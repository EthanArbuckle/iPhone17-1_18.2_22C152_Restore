uint64_t re::ecs2::CameraViewDescriptorsHelper::buildCameraViews<re::ecs2::CustomMatrixCameraComponent>(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  re::AssetHandle *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  re::Allocator *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  re::ecs2::CameraViewDescriptorsComponent *v28;
  int v29;
  re::ecs2::CameraViewDescriptorsComponent *v30;
  re::ecs2::CameraViewDescriptorsComponent *v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  re::DrawingManager *v44;
  float v45;
  uint64_t v46;
  uint64_t ViewDescriptor;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  void *v53;
  void *v54;
  void *v55;
  uint64_t j;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v63;
  re::DrawingManager *v64;
  float v65;
  float v66;
  void v71[3];
  int v72;
  uint64_t v73;
  void v74[3];
  int v75;
  uint64_t v76;
  void v77[2];
  uint64_t v78;
  int v79;
  uint64_t v80;
  void v81[2];
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned char v87[24];
  uint64_t v88;
  uint64_t v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  char v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  __int16 v105;
  char v106;
  void v107[3];
  int v108;
  uint64_t v109;
  unsigned char v110[28];
  __int16 v111;
  unsigned char v112[10];
  uint64_t v113;

  v6 = a5;
  v7 = a3;
  v8 = a2;
  v9 = a1;
  v113 = *MEMORY[0x263EF8340];
  if (!a5) {
    v6 = *(void *)(a2 + 16);
  }
  if (*(void *)(a2 + 216))
  {
    v10 = 0;
    v11 = 1;
    v12 = 336;
    v9 = 24;
    do
    {
      v13 = *(void *)(v8 + 232);
      v14 = (re::AssetHandle *)(v13 + 336 * v10);
      v15 = *((void *)v14 + 1);
      if (v15)
      {
        v16 = atomic_load((unsigned int *)(v15 + 704));
        if (v16 != 2)
        {
          re::AssetHandle::loadAsync(v14);
          v11 = 0;
        }
      }
      v17 = v13 + 336 * v10;
      if (*(void *)(v17 + 304))
      {
        v18 = 0;
        v19 = (uint64_t *)(v17 + 304);
        v7 = v13 + 336 * v10 + 320;
        while (2)
        {
          v20 = 0;
          v21 = 1;
          do
          {
            v22 = *v19;
            if (*v19 <= (unint64_t)v18)
            {
              v81[0] = 0;
              v93 = 0u;
              v94 = 0u;
              v91 = 0u;
              v92 = 0u;
              v90 = 0u;
              v8 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v110 = 136315906;
              *(void *)&v110[4] = "operator[]";
              *(_WORD *)&v110[12] = 1024;
              *(_DWORD *)&v110[14] = 797;
              *(_WORD *)&v110[18] = 2048;
              *(void *)&v110[20] = v18;
              v111 = 2048;
              *(void *)v112 = v22;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_26;
            }
            v12 = v21;
            v23 = *(void *)v7 + 136 * (void)v18 + 24 * v20;
            v24 = *(void *)(v23 + 40);
            if (v24)
            {
              v25 = atomic_load((unsigned int *)(v24 + 704));
              if (v25 != 2)
              {
                re::AssetHandle::loadAsync((re::AssetHandle *)(v23 + 32));
                v11 = 0;
              }
            }
            v21 = 0;
            v20 = 1;
          }
          while ((v12 & 1) != 0);
          v18 = (re::Allocator *)((char *)v18 + 1);
          if (*v19 > (unint64_t)v18) {
            continue;
          }
          break;
        }
      }
      ++v10;
      v12 = 336;
    }
    while (*(void *)(v8 + 216) > v10);
    v7 = a3;
    v9 = a1;
    if ((v11 & 1) == 0) {
      return 1;
    }
  }
  *(void *)&v112[2] = 0;
  memset(v110, 0, sizeof(v110));
  v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v85 = 0;
  v86 = 0;
  re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount((uint64_t *)v8, &v86, &v85);
  v84 = 0;
  v81[1] = 0;
  v82 = 0;
  v83 = 0;
  v18 = a4;
  v81[0] = a4;
  re::DynamicArray<re::CameraView>::setCapacity(v81, v86);
  ++v83;
  v80 = 0;
  v77[1] = 0;
  v78 = 0;
  v79 = 0;
  v77[0] = a4;
  re::DynamicArray<re::CameraMultiView>::setCapacity(v77, v85);
  ++v79;
  v76 = 0;
  v74[1] = 0;
  v74[2] = 0;
  v75 = 0;
  v74[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v74, v86);
  ++v75;
  v73 = 0;
  v71[1] = 0;
  v71[2] = 0;
  v72 = 0;
  v71[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v71, v85);
  v27 = 0;
  ++v72;
  if (v26) {
    v19 = (uint64_t *)(v26 + 40);
  }
  else {
    v19 = (uint64_t *)v110;
  }
  *(void *)&v90 = v8;
  *(void *)&v91 = 0;
  v12 = a6;
  if (!*(void *)(v8 + 216))
  {
    if (*(void *)(v8 + 256))
    {
      v27 = 1;
    }
    else
    {
LABEL_26:
      if (!*(void *)(v8 + 296))
      {
        v29 = 1;
LABEL_44:
        v35 = v6;
        do
        {
          v36 = v35;
          v35 = *(void *)(v35 + 24);
        }
        while (v35);
        v37 = *(void *)(*(void *)(v36 + 16) + 376);
        if (v37) {
          LOBYTE(v37) = *(void *)(v37 + 24) != 1;
        }
        if (!*(void *)(v8 + 256) && (v37 & 1) == 0)
        {
          v38 = 0;
          v90 = 0u;
          v91 = 0u;
          v92 = xmmword_23435FBB0;
          *(void *)&v93 = 0x70000FF00000000;
          WORD4(v93) = 1;
          BYTE12(v93) = 0;
          v98 = 0;
          v95 = 0;
          v96 = 0;
          *((void *)&v94 + 1) = 0;
          v97 = 0;
          do
          {
            v39 = (char *)&v90 + v38;
            *((void *)v39 + 18) = 0;
            *((void *)v39 + 15) = 0;
            *((void *)v39 + 16) = 0;
            *((void *)v39 + 14) = 0;
            v38 += 40;
            *((_DWORD *)v39 + 34) = 0;
          }
          while (v38 != 80);
          v99 = 0;
          v101 = xmmword_2343854A0;
          v100 = xmmword_2343854A0;
          v104 = 0u;
          v102 = 0u;
          v103 = 0u;
          v105 = 1;
          v106 = 0;
          v109 = 0;
          memset(v107, 0, sizeof(v107));
          v108 = 0;
          re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((_anonymous_namespace_ *)(v8 + 240), (re::ecs2::CameraViewDescriptor *)&v90);
          if (*(unsigned char *)(v7 + 32))
          {
            v41 = v7;
            v42 = v84;
            v43 = v82 - 1;
            v44 = *(re::DrawingManager **)(v9 + 104);
            if (v44) {
              v45 = re::DrawingManager::layerAspect(v44, 0, v40);
            }
            else {
              v45 = 1.0;
            }
            re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(v41, (float *)(v42 + 672 * v43 + 64), v45);
          }
          v51 = *(void *)(v8 + 256);
          *(void *)(v8 + 256) = 0;
          re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(v8 + 272), (re::AssetHandle *)(*(void *)(v8 + 272) + 336 * v51));
          ++*(_DWORD *)(v8 + 264);
          re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v107);
          for (i = 272; i != 256; i -= 8)
          {
            v53 = *(void **)((char *)&v90 + i);
            if (v53)
            {

              *(void *)((char *)&v90 + i) = 0;
            }
          }
          do
          {
            v54 = *(void **)((char *)&v90 + i);
            if (v54)
            {

              *(void *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 240);
          do
          {
            v55 = *(void **)((char *)&v90 + i);
            if (v55)
            {

              *(void *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 224);
          for (j = 152; j != 72; j -= 40)
            re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v90 + j);
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v94 + 8);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v90);
        }
        goto LABEL_76;
      }
      v27 = 2;
    }
  }
  v28 = 0;
  DWORD2(v90) = v27;
  v29 = 1;
  do
  {
    v30 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x20000);
    if (v27 == 1) {
      v28 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x10000);
    }
    if (v27 == 2) {
      v31 = v30;
    }
    else {
      v31 = v28;
    }
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v90);
    v27 = DWORD2(v90);
    v28 = (re::ecs2::CameraViewDescriptorsComponent *)v91;
  }
  while ((void)v90 != v8 || DWORD2(v90) != 3 || (void)v91 != 0);
  v34 = *(void *)(v8 + 216);
  if (v34 == 1)
  {
    if (!*(void *)(v8 + 256) && !*(void *)(*(void *)(v8 + 232) + 304))
    {
      v46 = v7;
      ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v8, 0);
      v49 = v82 ? v84 + 672 * v82 - 672 : v80 + 1360 * v78 - 1360;
      if (*(unsigned char *)(v46 + 32))
      {
        LODWORD(v48) = *(_DWORD *)(ViewDescriptor + 204);
        v63 = *(float *)(ViewDescriptor + 208);
        v64 = *(re::DrawingManager **)(v9 + 104);
        v65 = *(float *)&v48 / v63;
        if (v64) {
          v66 = re::DrawingManager::layerAspect(v64, 0, v48);
        }
        else {
          v66 = 1.0;
        }
        re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(v46, (float *)(v49 + 64), v65 * v66);
      }
    }
    goto LABEL_76;
  }
  if (!v34) {
    goto LABEL_44;
  }
LABEL_76:
  if (*(void *)(v8 + 296))
  {
    v57 = 0;
    v58 = 336;
    do
    {
      v59 = *(void *)(v8 + 312);
      v60 = *(void *)(v9 + 104);
      if (v60) {
        v61 = re::RenderFrameBox::get(v60 + 344, 0xFFFFFFFFFFFFFFFuLL);
      }
      else {
        v61 = 0;
      }
      v88 = *(void *)(v59 + v58 + 24);
      v89 = 0;
      re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>((uint64_t)v87, v59 + v58);
      re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add((_anonymous_namespace_ *)(v61 + 3832), (uint64_t)v87);
      re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)v87);
      ++v57;
      v58 += 384;
    }
    while (*(void *)(v8 + 296) > v57);
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 40, (uint64_t)v81);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 80, (uint64_t)v77);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 120, (uint64_t)v74);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 160, (uint64_t)v71);
  if (v29) {
    v50 = 0;
  }
  else {
    v50 = 2;
  }
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v71);
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v74);
  re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)v77);
  re::DynamicArray<re::CameraView>::deinit((uint64_t)v81);
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit((uint64_t)v110);
  return v50;
}

uint64_t anonymous namespace'::buildOneCameraView<re::ecs2::CustomMatrixCameraComponent>(uint64_t a1, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3, re::ecs2::CameraViewDescriptorsComponent *this, _anonymous_namespace_ *a5, _anonymous_namespace_ *a6, _anonymous_namespace_ *a7, _anonymous_namespace_ *a8, uint64_t a9, re::Allocator *a10, re::ecs2::Entity *a11, uint64_t a12)
{
  uint64_t v182 = *MEMORY[0x263EF8340];
  v132 = a11;
  if (!a11) {
    v132 = (re::ecs2::Entity *)*((void *)this + 2);
  }
  v16 = &v175;
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  int v18 = *(unsigned __int8 *)(ViewDescriptor + 192);
  re::CameraView::CameraView((re::CameraView *)&v138, a10);
  re::CameraView::CameraView((re::CameraView *)v134, a10);
  re::CameraView::CameraView((re::CameraView *)&v136, a10);
  v137[224] = 2;
  long long v140 = 0uLL;
  *((void *)&v141 + 1) = 0x3F80000000000000;
  *(void *)&long long v141 = 0;
  if (v18)
  {
    unint64_t v20 = *((void *)a6 + 2);
    if (*((void *)this + 22) <= v20
      || !re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((void *)this + 24) + 336 * v20)))
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, (re::ecs2::CameraViewDescriptor *)ViewDescriptor);
      goto LABEL_10;
    }
    v21 = (float *)*((void *)this + 12);
    if ((unint64_t)v21 <= v20) {
      goto LABEL_115;
    }
    re::CameraMultiView::operator=((uint64_t)v134, *((void *)this + 14) + 1360 * v20);
    v21 = (float *)*((void *)this + 22);
    if ((unint64_t)v21 > v20)
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, (uint64_t *)(*((void *)this + 24) + 336 * v20));
LABEL_10:
      re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)v137, v135);
      goto LABEL_34;
    }
LABEL_116:
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v175 = 136315906;
    *(void *)(v16 + 1) = "operator[]";
    WORD2(v176) = 1024;
    *(int *)((char *)v16 + 14) = 789;
    __int16 v177 = 2048;
    *(void *)(v16 + 5) = v20;
    __int16 v178 = 2048;
    *(void *)((char *)v16 + 30) = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
  unint64_t v20 = *((void *)a5 + 2);
  if (*((void *)this + 17) > v20
    && re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((void *)this + 19) + 336 * v20)))
  {
    a8 = (_anonymous_namespace_ *)*((void *)this + 7);
    if ((unint64_t)a8 <= v20)
    {
LABEL_117:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v175 = 136315906;
      *(void *)(v16 + 1) = "operator[]";
      WORD2(v176) = 1024;
      *(int *)((char *)v16 + 14) = 789;
      __int16 v177 = 2048;
      *(void *)(v16 + 5) = v20;
      __int16 v178 = 2048;
      *(void *)((char *)v16 + 30) = a8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_118;
    }
    uint64_t v122 = *((void *)this + 9);
    uint64_t v22 = v122 + 672 * v20;
    re::DynamicString::operator=((re::DynamicString *)&v138, (re::DynamicString *)v22);
    long long v23 = *(_OWORD *)(v22 + 32);
    long long v24 = *(_OWORD *)(v22 + 48);
    long long v25 = *(_OWORD *)(v22 + 80);
    long long v142 = *(_OWORD *)(v22 + 64);
    long long v143 = v25;
    long long v140 = v23;
    long long v141 = v24;
    long long v26 = *(_OWORD *)(v22 + 96);
    long long v27 = *(_OWORD *)(v22 + 112);
    long long v28 = *(_OWORD *)(v22 + 144);
    long long v146 = *(_OWORD *)(v22 + 128);
    long long v147 = v28;
    long long v144 = v26;
    long long v145 = v27;
    long long v29 = *(_OWORD *)(v22 + 160);
    long long v30 = *(_OWORD *)(v22 + 176);
    long long v31 = *(_OWORD *)(v22 + 208);
    long long v150 = *(_OWORD *)(v22 + 192);
    long long v151 = v31;
    long long v148 = v29;
    long long v149 = v30;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v152, v22 + 224);
    v152[20] = *(_WORD *)(v22 + 264);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v153, v22 + 272);
    v153[3] = *(_OWORD *)(v22 + 320);
    long long v33 = *(_OWORD *)(v22 + 352);
    long long v32 = *(_OWORD *)(v22 + 368);
    long long v34 = *(_OWORD *)(v22 + 336);
    v154 = *(re::ecs2::CameraViewDescriptorsComponent **)(v22 + 384);
    v153[5] = v33;
    v153[6] = v32;
    v153[4] = v34;
    char v155 = *(unsigned char *)(v22 + 400);
    if (v156 || *(unsigned char *)(v22 + 401))
    {
      if (!v156 || *(unsigned char *)(v22 + 401))
      {
        if (!v156) {
          BOOL v156 = *(unsigned char *)(v22 + 401) != 0;
        }
        char v157 = *(unsigned char *)(v122 + 672 * v20 + 402);
      }
      else
      {
        BOOL v156 = 0;
      }
    }
    if (v158 || *(unsigned char *)(v122 + 672 * v20 + 404))
    {
      if (!v158 || *(unsigned char *)(v122 + 672 * v20 + 404))
      {
        if (!v158) {
          BOOL v158 = *(unsigned char *)(v122 + 672 * v20 + 404) != 0;
        }
        int v159 = *(_DWORD *)(v122 + 672 * v20 + 408);
      }
      else
      {
        BOOL v158 = 0;
      }
    }
    uint64_t v35 = v122 + 672 * v20;
    long long v36 = *(_OWORD *)(v35 + 416);
    long long v37 = *(_OWORD *)(v35 + 432);
    long long v38 = *(_OWORD *)(v35 + 464);
    long long v162 = *(_OWORD *)(v35 + 448);
    long long v163 = v38;
    long long v160 = v36;
    long long v161 = v37;
    long long v39 = *(_OWORD *)(v35 + 480);
    long long v40 = *(_OWORD *)(v35 + 496);
    long long v41 = *(_OWORD *)(v35 + 528);
    long long v166 = *(_OWORD *)(v35 + 512);
    long long v167 = v41;
    long long v164 = v39;
    long long v165 = v40;
    long long v43 = *(_OWORD *)(v35 + 624);
    long long v42 = *(_OWORD *)(v35 + 640);
    long long v44 = *(_OWORD *)(v35 + 608);
    *(void *)((char *)v174 + 13) = *(void *)(v35 + 653);
    long long v173 = v43;
    v174[0] = v42;
    long long v172 = v44;
    long long v45 = *(_OWORD *)(v35 + 544);
    long long v46 = *(_OWORD *)(v35 + 560);
    long long v47 = *(_OWORD *)(v35 + 592);
    long long v170 = *(_OWORD *)(v35 + 576);
    long long v171 = v47;
    long long v168 = v45;
    long long v169 = v46;
    a8 = (_anonymous_namespace_ *)*((void *)this + 17);
    if ((unint64_t)a8 <= v20)
    {
LABEL_118:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v175 = 136315906;
      *(void *)(v16 + 1) = "operator[]";
      WORD2(v176) = 1024;
      *(int *)((char *)v16 + 14) = 789;
      __int16 v177 = 2048;
      *(void *)(v16 + 5) = v20;
      __int16 v178 = 2048;
      *(void *)((char *)v16 + 30) = a8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_119:
      re::internal::assertLog((re::internal *)4, v88, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "buildOneCameraView", 635);
      _os_crash();
      __break(1u);
LABEL_120:
      re::internal::assertLog((re::internal *)4, v88, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "buildOneCameraView", 666);
      _os_crash();
      __break(1u);
    }
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, (uint64_t *)(*((void *)this + 19) + 336 * v20));
  }
  else
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, (re::ecs2::CameraViewDescriptor *)ViewDescriptor);
  }
LABEL_34:
  if (!*(unsigned char *)(ViewDescriptor + 192))
  {
    re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, a2, v132, a10, 0, (re::DynamicString *)v179);
    re::DynamicString::operator=((re::DynamicString *)&v138, (re::DynamicString *)v179);
    if (*(void *)v179 && (v179[8] & 1) != 0) {
      (*(void (**)(void, void))(**(void **)v179 + 40))(*(void *)v179, *(void *)&v179[16]);
    }
    *(_DWORD *)v179 = 0;
    *(_OWORD *)&v179[4] = xmmword_234390F00;
    *(void *)&v179[20] = 0xBDCCCCCD3DCCCCCDLL;
    v179[28] = 0;
    long long v180 = xmmword_23435FD80;
    LODWORD(v181) = 1;
    *((void *)&v181 + 1) = 0;
    re::Projection::setFromMatrix4x4F((uint64_t)v179, a3 + 256);
    long long v164 = *(_OWORD *)v179;
    long long v165 = *(_OWORD *)&v179[16];
    long long v166 = v180;
    long long v167 = v181;
    long long v168 = *(_OWORD *)(ViewDescriptor + 196);
    *(_DWORD *)v179 = 0;
    *(_OWORD *)&v179[4] = xmmword_234390F00;
    *(void *)&v179[20] = 0xBDCCCCCD3DCCCCCDLL;
    v179[28] = 0;
    long long v180 = xmmword_23435FD80;
    LODWORD(v181) = 1;
    *((void *)&v181 + 1) = 0;
    re::Projection::setFromMatrix4x4F((uint64_t)v179, a3 + 256);
    long long v144 = v180;
    long long v145 = v181;
    long long v142 = *(_OWORD *)v179;
    long long v143 = *(_OWORD *)&v179[16];
    long long v169 = xmmword_2343854A0;
    long long v148 = *(_OWORD *)v179;
    long long v149 = *(_OWORD *)&v179[16];
    long long v150 = v180;
    long long v151 = v181;
    v154 = a2;
    *(void *)&double v96 = re::DynamicArray<re::CameraView>::add(a5, (re::DynamicString *)&v138).n128_u64[0];
    if (!*(void *)(ViewDescriptor + 304)) {
      goto LABEL_108;
    }
    unint64_t v20 = 0;
    v21 = 0;
    uint64_t v131 = *((void *)a5 + 4) + 672 * (*((void *)a5 + 2) - 1);
    v133 = (int *)(v131 + 648);
    a8 = (_anonymous_namespace_ *)(v131 + 160);
    v97 = &selRef_stepFunction_0;
    v16 = (int *)&selRef_taskToken;
    while (1)
    {
      float v98 = *(float *)(ViewDescriptor + 204);
      float v99 = *(float *)(ViewDescriptor + 208);
      uint64_t v100 = *(void *)(ViewDescriptor + 320);
      uint64_t v101 = v100 + v20;
      if (*(void *)(v100 + v20 + 40))
      {
        uint64_t v102 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v101 + 32));
        if (*(_DWORD *)(v102 + 240))
        {
LABEL_114:
          std::__throw_bad_variant_access[abi:nn180100]();
LABEL_115:
          *((_OWORD *)v16 + 6) = 0u;
          *((_OWORD *)v16 + 7) = 0u;
          *((_OWORD *)v16 + 4) = 0u;
          *((_OWORD *)v16 + 5) = 0u;
          *((_OWORD *)v16 + 3) = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v175 = 136315906;
          *(void *)(v16 + 1) = "operator[]";
          WORD2(v176) = 1024;
          *(int *)((char *)v16 + 14) = 789;
          __int16 v177 = 2048;
          *(void *)(v16 + 5) = v20;
          __int16 v178 = 2048;
          *(void *)((char *)v16 + 30) = v21;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_116;
        }
        id v103 = *(id *)(v102 + 160);
        float v104 = (float)(unint64_t)[v103 v97[26]];
        *(float *)&double v96 = (float)(unint64_t)objc_msgSend(v103, sel_height);
        float v105 = v104 / *(float *)&v96;
        if (v103) {
      }
        }
      else
      {
        unsigned int v106 = *(_DWORD *)(v101 + 80);
        if (v106 == -1)
        {
          uint64_t v108 = v100 + v20;
          v109 = *(void **)(v100 + v20 + 88);
          if (v109)
          {
            id v110 = objc_msgSend(v109, v97[26], v96);
            v111 = *(void **)(v108 + 88);
            goto LABEL_100;
          }
          v112 = *(void **)(v108 + 104);
          if (v112)
          {
            id v110 = objc_msgSend(v112, v97[26], v96);
            v111 = *(void **)(v108 + 104);
LABEL_100:
            id v113 = objc_msgSend(v111, sel_height);
            re::ecs2::CustomMatrixCameraComponent::localEyePose(a3, *v133, (float32x4_t *)v179);
            if (a12 && !*(_DWORD *)(a12 + 24))
            {
              re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, (long long *)v179, *v133, (re::DynamicString *)v131);
              *(unsigned char *)(v131 + 347) = *(unsigned char *)(a12 + 28);
            }
            *(float *)&double v96 = (float)(unint64_t)v110;
            float v105 = (float)(unint64_t)v110 / (float)(unint64_t)v113;
            v97 = &selRef_stepFunction_0;
            goto LABEL_105;
          }
LABEL_104:
          float v105 = 1.0;
          goto LABEL_105;
        }
        v107 = *(re::DrawingManager **)(a1 + 104);
        if (!v107) {
          goto LABEL_104;
        }
        *(float *)&double v96 = re::DrawingManager::layerAspect(v107, v106, v96);
        float v105 = *(float *)&v96;
      }
LABEL_105:
      if (*(unsigned char *)(a3 + 32))
      {
        float v114 = (float)(v98 / v99) * v105;
        re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(a3, (float *)(v131 + 64), v114);
        *(float *)&double v96 = re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(a3, (float *)a8, v114);
      }
      v21 = (float *)((char *)v21 + 1);
      v20 += 136;
      if (*(void *)(ViewDescriptor + 304) <= (unint64_t)v21) {
        goto LABEL_108;
      }
    }
  }
  re::DynamicArray<re::CameraMultiView>::add(a6, (uint64_t)v134);
  uint64_t v48 = *((void *)a6 + 2) - 1;
  v126 = (_anonymous_namespace_ *)*((void *)a6 + 4);
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, a2, v132, a10, 0, (re::DynamicString *)v179);
  v118 = (char *)v126 + 1360 * v48;
  re::DynamicString::operator=((re::DynamicString *)v118, (re::DynamicString *)v179);
  if (*(void *)v179 && (v179[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)v179 + 40))();
  }
  *(_DWORD *)v179 = 0;
  *(_OWORD *)&v179[4] = xmmword_234390F00;
  *(void *)&v179[20] = 0xBDCCCCCD3DCCCCCDLL;
  v179[28] = 0;
  long long v180 = xmmword_23435FD80;
  LODWORD(v181) = 1;
  *((void *)&v181 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v179, a3 + 256);
  long long v49 = *(_OWORD *)v179;
  long long v50 = *(_OWORD *)&v179[16];
  long long v51 = v181;
  *((_OWORD *)v118 + 32) = v180;
  *((_OWORD *)v118 + 33) = v51;
  *((_OWORD *)v118 + 30) = v49;
  *((_OWORD *)v118 + 31) = v50;
  *((_OWORD *)v118 + 34) = *(_OWORD *)(ViewDescriptor + 196);
  *(_DWORD *)v179 = 0;
  *(_OWORD *)&v179[4] = xmmword_234390F00;
  *(void *)&v179[20] = 0xBDCCCCCD3DCCCCCDLL;
  v179[28] = 0;
  long long v180 = xmmword_23435FD80;
  LODWORD(v181) = 1;
  *((void *)&v181 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v179, a3 + 256);
  long long v52 = *(_OWORD *)v179;
  long long v53 = *(_OWORD *)&v179[16];
  long long v54 = v181;
  *((_OWORD *)v118 + 6) = v180;
  *((_OWORD *)v118 + 7) = v54;
  *((_OWORD *)v118 + 4) = v52;
  *((_OWORD *)v118 + 5) = v53;
  *((_OWORD *)v118 + 35) = xmmword_2343854A0;
  long long v55 = *((_OWORD *)v118 + 5);
  *((_OWORD *)v118 + 10) = *((_OWORD *)v118 + 4);
  *((_OWORD *)v118 + 11) = v55;
  long long v56 = *((_OWORD *)v118 + 7);
  *((_OWORD *)v118 + 12) = *((_OWORD *)v118 + 6);
  *((_OWORD *)v118 + 13) = v56;
  *((void *)v118 + 48) = a2;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, a2, v132, a10, 1, (re::DynamicString *)v179);
  re::DynamicString::operator=((re::DynamicString *)(v118 + 672), (re::DynamicString *)v179);
  if (*(void *)v179 && (v179[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)v179 + 40))();
  }
  *(_DWORD *)v179 = 0;
  *(_OWORD *)&v179[4] = xmmword_234390F00;
  *(void *)&v179[20] = 0xBDCCCCCD3DCCCCCDLL;
  v179[28] = 0;
  long long v180 = xmmword_23435FD80;
  LODWORD(v181) = 1;
  *((void *)&v181 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v179, a3 + 256);
  long long v57 = *(_OWORD *)v179;
  long long v58 = *(_OWORD *)&v179[16];
  long long v59 = v180;
  *((_OWORD *)v118 + 75) = v181;
  *((_OWORD *)v118 + 74) = v59;
  *((_OWORD *)v118 + 73) = v58;
  *((_OWORD *)v118 + 72) = v57;
  *((_OWORD *)v118 + 76) = *(_OWORD *)(ViewDescriptor + 212);
  *(_DWORD *)v179 = 0;
  *(_OWORD *)&v179[4] = xmmword_234390F00;
  *(void *)&v179[20] = 0xBDCCCCCD3DCCCCCDLL;
  v179[28] = 0;
  long long v180 = xmmword_23435FD80;
  LODWORD(v181) = 1;
  *((void *)&v181 + 1) = 0;
  re::Projection::setFromMatrix4x4F((uint64_t)v179, a3 + 320);
  uint64_t v60 = 0;
  long long v61 = *(_OWORD *)v179;
  long long v62 = *(_OWORD *)&v179[16];
  long long v63 = v181;
  *((_OWORD *)v118 + 48) = v180;
  *((_OWORD *)v118 + 49) = v63;
  *((_OWORD *)v118 + 46) = v61;
  *((_OWORD *)v118 + 47) = v62;
  *((_OWORD *)v118 + 77) = xmmword_2343854A0;
  long long v64 = *((_OWORD *)v118 + 49);
  *((_OWORD *)v118 + 54) = *((_OWORD *)v118 + 48);
  *((_OWORD *)v118 + 55) = v64;
  long long v65 = *((_OWORD *)v118 + 47);
  *((_OWORD *)v118 + 52) = *((_OWORD *)v118 + 46);
  *((_OWORD *)v118 + 53) = v65;
  *((void *)v118 + 132) = a2;
  v66 = (char *)v126 + 1360 * v48;
  a8 = (_anonymous_namespace_ *)(v66 + 1344);
  v127 = (_anonymous_namespace_ *)(v66 + 1345);
  unint64_t v67 = *(void *)(ViewDescriptor + 304);
  char v68 = 1;
  do
  {
    char v69 = v68;
    if (!v67) {
      goto LABEL_82;
    }
    char v120 = v68;
    unint64_t v20 = 0;
    unint64_t v70 = 0;
    v119 = (re::DynamicString *)&v118[672 * v60];
    uint64_t v71 = ViewDescriptor + 16 * v60;
    v21 = (float *)(v71 + 204);
    v72 = (float *)(v71 + 208);
    v123 = (int *)((char *)v119 + 648);
    uint64_t v121 = 8 * v60;
    uint64_t v128 = 4 * v60 + 80;
    uint64_t v73 = 24 * v60 + 32;
    do
    {
      float v74 = *v21;
      float v75 = *v72;
      uint64_t v76 = *(void *)(ViewDescriptor + 320);
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v175, (const re::AssetHandle *)(v76 + v73 + v20));
      if (*(unsigned char *)a8 == 1) {
        re::AssetHandle::operator=((uint64_t)&v175, (uint64_t *)(v76 + v20 + 32));
      }
      float v78 = v74 / v75;
      if (v176)
      {
        uint64_t v79 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v175);
        if (*(_DWORD *)(v79 + 240)) {
          goto LABEL_114;
        }
        v16 = (int *)*(id *)(v79 + 160);
        float v80 = (float)(unint64_t)objc_msgSend(v16, sel_width);
        float v81 = v80 / (float)(unint64_t)objc_msgSend(v16, sel_height);
        id v82 = objc_msgSend(v16, sel_arrayLength);
        if (v16) {

        }
        goto LABEL_50;
      }
      unsigned int v83 = *(_DWORD *)(v76 + v128 + v20);
      if (v83 == -1)
      {
        unint64_t v85 = v76 + v121 + v20;
        v86 = *(void **)(v85 + 88);
        if (v86)
        {
          float v87 = (float)(unint64_t)objc_msgSend(v86, sel_width);
          float v81 = v87 / (float)(unint64_t)objc_msgSend(*(id *)(v85 + 88), sel_height);
          id v82 = objc_msgSend(*(id *)(v85 + 88), sel_arrayLength);
          uint64_t v88 = *v123;
          v89 = (unsigned __int8 *)(a3 + 240);
          if (v88 == 1) {
            goto LABEL_61;
          }
          if (v88 == 2)
          {
            v89 = (unsigned __int8 *)(a3 + 241);
LABEL_61:
            int v90 = *v89;
            if (v90 != 1)
            {
              if (v90) {
                goto LABEL_119;
              }
              goto LABEL_75;
            }
LABEL_78:
            re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(a3, v88, (float32x4_t *)v179);
            v16 = (int *)a12;
            if (a12 && !*(_DWORD *)(a12 + 24))
            {
              re::RenderFrameWorkloadPatchCamera::trackWorldEyePose(a12, (long long *)v179, *v123, v119);
LABEL_81:
              *((unsigned char *)v119 + 347) = *((unsigned char *)v16 + 28);
            }
            goto LABEL_50;
          }
        }
        else
        {
          v92 = *(void **)(v85 + 104);
          if (!v92) {
            goto LABEL_67;
          }
          float v93 = (float)(unint64_t)objc_msgSend(v92, sel_width);
          float v81 = v93 / (float)(unint64_t)objc_msgSend(*(id *)(v85 + 104), sel_height);
          id v82 = objc_msgSend(*(id *)(v85 + 104), sel_arrayLength);
          uint64_t v88 = *v123;
          v94 = (unsigned __int8 *)(a3 + 240);
          if (v88 != 1)
          {
            if (v88 != 2) {
              goto LABEL_75;
            }
            v94 = (unsigned __int8 *)(a3 + 241);
          }
          int v95 = *v94;
          if (v95 == 1) {
            goto LABEL_78;
          }
          if (v95) {
            goto LABEL_120;
          }
        }
LABEL_75:
        re::ecs2::CustomMatrixCameraComponent::localEyePose(a3, v88, (float32x4_t *)v179);
        v16 = (int *)a12;
        if (a12 && !*(_DWORD *)(a12 + 24))
        {
          re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, (long long *)v179, *v123, v119);
          goto LABEL_81;
        }
LABEL_50:
        if (*(unsigned char *)a8 == 1 && (unint64_t)v82 >= 2)
        {
          *(unsigned char *)v127 = 1;
          float v78 = *v21 / *v72;
          if (([*(id *)(a1 + 184) supportsTexture2DMultisampleArray] & 1) == 0) {
            *((_DWORD *)v119 + 89) = 1;
          }
        }
        goto LABEL_65;
      }
      v84 = *(re::DrawingManager **)(a1 + 104);
      if (v84) {
        float v81 = re::DrawingManager::layerAspect(v84, v83, v77);
      }
      else {
        float v81 = 1.0;
      }
LABEL_65:
      if (*(unsigned char *)(a3 + 32))
      {
        float v91 = v81 * v78;
        re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(a3, (float *)v119 + 16, v91);
        re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(a3, (float *)v119 + 40, v91);
      }
LABEL_67:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v175);
      ++v70;
      unint64_t v67 = *(void *)(ViewDescriptor + 304);
      v20 += 136;
    }
    while (v67 > v70);
    char v69 = v120;
LABEL_82:
    char v68 = 0;
    uint64_t v60 = 1;
  }
  while ((v69 & 1) != 0);
LABEL_108:
  uint64_t v115 = 1344;
  do
  {
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v134[v115 - 400]);
    re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v134[v115 - 448]);
    re::DynamicString::deinit((re::DynamicString *)&v134[v115 - 672]);
    v115 -= 672;
  }
  while (v115);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v153);
  re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v152);
  if (v138 && (v139 & 1) != 0) {
    (*(void (**)(void))(*(void *)v138 + 40))();
  }
  return v117;
}

void re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::PerspectiveCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a3, re::ecs2::CameraViewDescriptorsComponent *a4)
{
  v4 = a4;
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!a4) {
    v4 = (re::ecs2::CameraViewDescriptorsComponent *)*((void *)this + 2);
  }
  *(void *)long long v53 = this;
  *(void *)&v55[2] = 0;
  if (*((void *)this + 27))
  {
    int v8 = 0;
  }
  else if (*((void *)this + 32))
  {
    int v8 = 1;
  }
  else
  {
    if (!*((void *)this + 37))
    {
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      goto LABEL_25;
    }
    int v8 = 2;
  }
  v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  *(_DWORD *)&v53[8] = v8;
  do
  {
    v12 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x20000);
    if (v8 == 1) {
      v9 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x10000);
    }
    if (v8 == 2) {
      v13 = v12;
    }
    else {
      v13 = v9;
    }
    if (*(unsigned char *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, v13) + 192))
    {
      unint64_t v14 = *((void *)this + 12);
      if (v14 <= v11)
      {
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(void *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(void *)&v58[5] = v11;
        LOWORD(v58[7]) = 2048;
        *(void *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_57:
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(void *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(void *)&v58[5] = v10;
        LOWORD(v58[7]) = 2048;
        *(void *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v15 = 0;
      uint64_t v16 = *((void *)this + 14) + 1360 * v11++;
    }
    else
    {
      unint64_t v14 = *((void *)this + 7);
      if (v14 <= v10) {
        goto LABEL_57;
      }
      uint64_t v16 = 0;
      uint64_t v15 = *((void *)this + 9) + 672 * v10++;
    }
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)v53);
    int v8 = *(_DWORD *)&v53[8];
    v9 = *(re::ecs2::CameraViewDescriptorsComponent **)&v55[2];
  }
  while (*(re::ecs2::CameraViewDescriptorsComponent **)v53 != this || *(_DWORD *)&v53[8] != 3 || *(void *)&v55[2]);
  uint64_t v18 = *((void *)this + 27);
  if (v18 == 1)
  {
    if (!*((void *)this + 32) && !*(void *)(*((void *)this + 29) + 304)) {
    return;
    }
  }
  if (v18) {
    return;
  }
LABEL_25:
  v19 = v4;
  do
  {
    unint64_t v20 = v19;
    v19 = (re::ecs2::CameraViewDescriptorsComponent *)*((void *)v19 + 3);
  }
  while (v19);
  uint64_t v21 = *(void *)(*((void *)v20 + 2) + 376);
  if (v21) {
    LOBYTE(v21) = *(void *)(v21 + 24) != 1;
  }
  if (!*((void *)this + 32) && (v21 & 1) == 0)
  {
    uint64_t v22 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = xmmword_23435FBB0;
    *(void *)&long long v36 = 0x70000FF00000000;
    WORD4(v36) = 1;
    BYTE12(v36) = 0;
    uint64_t v41 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    *((void *)&v37 + 1) = 0;
    int v40 = 0;
    do
    {
      long long v23 = (char *)&v33 + v22;
      *((void *)v23 + 18) = 0;
      *((void *)v23 + 15) = 0;
      *((void *)v23 + 16) = 0;
      *((void *)v23 + 14) = 0;
      v22 += 40;
      *((_DWORD *)v23 + 34) = 0;
    }
    while (v22 != 80);
    char v42 = 0;
    long long v44 = xmmword_2343854A0;
    long long v43 = xmmword_2343854A0;
    long long v47 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    __int16 v48 = 1;
    char v49 = 0;
    uint64_t v52 = 0;
    memset(v50, 0, sizeof(v50));
    int v51 = 0;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((re::ecs2::CameraViewDescriptorsComponent *)((char *)this + 240), (re::ecs2::CameraViewDescriptor *)&v33);
    if (*(unsigned char *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, (re::ecs2::CameraViewDescriptorsComponent *)0x10000)+ 192))
    {
      unint64_t v14 = *((void *)this + 12);
      if (v14 > v11)
      {
        uint64_t v24 = 0;
        uint64_t v25 = *((void *)this + 14) + 1360 * v11;
LABEL_41:
        uint64_t v27 = *((void *)this + 32);
        *((void *)this + 32) = 0;
        re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*((re::AssetHandle **)this + 34), (re::AssetHandle *)(*((void *)this + 34) + 336 * v27));
        ++*((_DWORD *)this + 66);
        re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v50);
        for (uint64_t i = 272; i != 256; i -= 8)
        {
          long long v29 = *(void **)((char *)&v33 + i);
          if (v29)
          {

            *(void *)((char *)&v33 + i) = 0;
          }
        }
        do
        {
          long long v30 = *(void **)((char *)&v33 + i);
          if (v30)
          {

            *(void *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 240);
        do
        {
          long long v31 = *(void **)((char *)&v33 + i);
          if (v31)
          {

            *(void *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 224);
        for (uint64_t j = 152; j != 72; j -= 40)
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v33 + j);
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v37 + 8);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v33);
        return;
      }
LABEL_58:
      long long v59 = 0u;
      long long v60 = 0u;
      memset(v58, 0, sizeof(v58));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v53 = 136315906;
      *(void *)&v53[4] = "operator[]";
      __int16 v54 = 1024;
      *(_DWORD *)long long v55 = 789;
      *(_WORD *)&v55[4] = 2048;
      *(void *)&v55[6] = v11;
      __int16 v56 = 2048;
      unint64_t v57 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      unint64_t v14 = *((void *)this + 7);
      if (v14 > v10)
      {
        uint64_t v25 = 0;
        uint64_t v24 = *((void *)this + 9) + 672 * v10;
        goto LABEL_41;
      }
    }
    long long v59 = 0u;
    long long v60 = 0u;
    memset(v58, 0, sizeof(v58));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v53 = 136315906;
    *(void *)&v53[4] = "operator[]";
    __int16 v54 = 1024;
    *(_DWORD *)long long v55 = 789;
    *(_WORD *)&v55[4] = 2048;
    *(void *)&v55[6] = v10;
    __int16 v56 = 2048;
    unint64_t v57 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void anonymous namespace'::updateOneViewPerFrameData<re::ecs2::PerspectiveCameraComponent>(uint64_t a1, re::ecs2::CameraViewDescriptorsComponent *a2, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  uint64_t v11 = *(void *)(a1 + 104);
  if (v11) {
    long long v140 = (re::RenderFrame *)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    long long v140 = 0;
  }
  int v12 = *(unsigned __int8 *)(a1 + 300);
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)a4, 0, (uint64_t)&__src);
  float32x4_t v13 = vnegq_f32(v148);
  int8x16_t v14 = (int8x16_t)vnegq_f32(__src);
  float32x4_t v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
  float32x4_t v16 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL), v148), v15, __src);
  int8x16_t v17 = (int8x16_t)vaddq_f32(v16, v16);
  float32x4_t v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
  int8x16_t v19 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v148), v18, v15);
  float32x4_t v20 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v18, v148, 3), __src), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL));
  v18.f32[0] = v13.f32[0] + v13.f32[0];
  float v21 = (float)(v13.f32[0] + v13.f32[0]) * v13.f32[0];
  float v22 = vmuls_lane_f32(v13.f32[1] + v13.f32[1], *(float32x2_t *)v13.f32, 1);
  float v23 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v13, 2);
  float v24 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], *(float32x2_t *)v13.f32, 1);
  float v25 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], v13, 2);
  v13.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v13, 2);
  v15.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v148, 3);
  *(float *)v19.i32 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v148, 3);
  HIDWORD(v26) = 0;
  *(float *)&long long v26 = 1.0 - (float)(v22 + v23);
  *((float *)&v26 + 1) = v24 + *(float *)v19.i32;
  *((float *)&v26 + 2) = v25 - v15.f32[0];
  float v27 = vmuls_lane_f32(v18.f32[0], v148, 3);
  HIDWORD(v28) = 0;
  *(float *)&long long v28 = v24 - *(float *)v19.i32;
  *((float *)&v28 + 1) = 1.0 - (float)(v21 + v23);
  *((float *)&v28 + 2) = v13.f32[0] + v27;
  v18.i32[3] = 0;
  v18.f32[0] = v25 + v15.f32[0];
  v18.f32[1] = v13.f32[0] - v27;
  v18.f32[2] = 1.0 - (float)(v21 + v22);
  long long v151 = v26;
  long long v152 = v28;
  v20.i32[3] = 1.0;
  float32x4_t v153 = v18;
  float32x4_t v154 = v20;
  if (!*(unsigned char *)(ViewDescriptor + 192))
  {
    a4[7] = xmmword_23435FD50;
    a4[8] = xmmword_23435FD60;
    a4[9] = xmmword_23435FD80;
    a4[10] = xmmword_23435FBB0;
    __src.i64[0] = 0;
    __src.i32[2] = 0;
    long long v139 = *(_OWORD *)(ViewDescriptor + 196);
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v45))
    {
      *((_OWORD *)&__src + ++__src.i64[0]) = v139;
      ++__src.i32[2];
    }
    uint64_t v144 = 0;
    int v145 = 0;
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v144, v46))
    {
      v146[v144++] = xmmword_2343854A0;
      ++v145;
    }
    *(_DWORD *)(a5 + 640) = -1;
    if (*(void *)(ViewDescriptor + 232))
    {
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 232));
      if (__src.i64[0] && *(unsigned char *)(*((void *)v140 + 1) + 300)) {
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
      }
      *(_DWORD *)(a5 + 644) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 248));
      if (v144 && *(unsigned char *)(*((void *)v140 + 1) + 300)) {
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), &v144);
      }
    }
    else if (*(void *)(ViewDescriptor + 264))
    {
      if (!v12) {
        *(_DWORD *)(a5 + 356) = 1;
      }
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v140, (void *)(ViewDescriptor + 264));
      if (__src.i64[0] && *(unsigned char *)(*((void *)v140 + 1) + 300)) {
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
      }
      *(_DWORD *)(a5 + 644) = -1;
    }
    if (!*(void *)(ViewDescriptor + 304)) {
      return;
    }
    uint64_t v91 = 0;
    while (1)
    {
      uint64_t v92 = *(void *)(ViewDescriptor + 320);
      uint64_t v93 = v92 + 136 * v91;
      if (!*(void *)(v93 + 40))
      {
        uint64_t v98 = v92 + 136 * v91;
        int v100 = *(_DWORD *)(v98 + 80);
        float v99 = (const unsigned int *)(v98 + 80);
        if (v100 == -1)
        {
          uint64_t v109 = v92 + 136 * v91;
          uint64_t v111 = *(void *)(v109 + 88);
          id v110 = (void **)(v109 + 88);
          if (!v111)
          {
            uint64_t v121 = v92 + 136 * v91;
            uint64_t v123 = *(void *)(v121 + 104);
            uint64_t v122 = (void **)(v121 + 104);
            if (v123)
            {
              if (*(unsigned char *)(v93 + 8)) {
                v124 = *(char **)(v93 + 16);
              }
              else {
                v124 = (char *)(v93 + 9);
              }
              uint64_t v131 = (const char *)(a5 + 9);
              if (*(unsigned char *)(a5 + 8)) {
                uint64_t v131 = *(const char **)(a5 + 16);
              }
              re::RenderFrame::specifyScopeLane(v140, v124, v122, v131, *(_DWORD *)(a5 + 648));
            }
            goto LABEL_178;
          }
          unint64_t v112 = *(void *)(v93 + 8);
          if (v112)
          {
            float v114 = *(unsigned char **)(v93 + 16);
            if (v114)
            {
              LOBYTE(v113) = *v114;
              goto LABEL_160;
            }
            uint64_t v129 = 0x7FFFFFFFFFFFFFFFLL;
            v125 = v140;
          }
          else
          {
            uint64_t v113 = v112 >> 8;
            float v114 = (unsigned char *)(v93 + 9);
LABEL_160:
            v125 = v140;
            if ((_BYTE)v113)
            {
              uint64_t v113 = (char)v113;
              char v126 = v114[1];
              if (v126)
              {
                v127 = v114 + 2;
                do
                {
                  uint64_t v113 = 31 * v113 + v126;
                  int v128 = *v127++;
                  char v126 = v128;
                }
                while (v128);
              }
              uint64_t v129 = v113 & 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v129 = 0;
            }
          }
          v143[0] = (id)v129;
          v132 = (const char *)(a5 + 9);
          if (*(unsigned char *)(a5 + 8)) {
            v132 = *(const char **)(a5 + 16);
          }
          re::RenderFrame::specifyScopeLane(v125, (uint64_t *)v143, v110, v132);
          goto LABEL_178;
        }
        unint64_t v101 = *(void *)(v93 + 8);
        if (v101)
        {
          id v103 = *(unsigned char **)(v93 + 16);
          if (v103)
          {
            LOBYTE(v102) = *v103;
            goto LABEL_144;
          }
          uint64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v115 = v140;
        }
        else
        {
          uint64_t v102 = v101 >> 8;
          id v103 = (unsigned char *)(v93 + 9);
LABEL_144:
          uint64_t v115 = v140;
          if ((_BYTE)v102)
          {
            uint64_t v102 = (char)v102;
            char v116 = v103[1];
            if (v116)
            {
              unsigned int v117 = v103 + 2;
              do
              {
                uint64_t v102 = 31 * v102 + v116;
                int v118 = *v117++;
                char v116 = v118;
              }
              while (v118);
            }
            uint64_t v119 = v102 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v119 = 0;
          }
        }
        v143[0] = (id)v119;
        v130 = (const char *)(a5 + 9);
        if (*(unsigned char *)(a5 + 8)) {
          v130 = *(const char **)(a5 + 16);
        }
        re::RenderFrame::specifyScopeLane(v115, (const re::WeakStringID *)v143, v99, v130);
        goto LABEL_178;
      }
      uint64_t v94 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v93 + 32));
      if (*(_DWORD *)(v94 + 240))
      {
LABEL_180:
        v133 = (_anonymous_namespace_ *)std::__throw_bad_variant_access[abi:nn180100]();
        return;
      }
      v143[0] = *(id *)(v94 + 160);
      unint64_t v95 = *(void *)(v93 + 8);
      if ((v95 & 1) == 0) {
        break;
      }
      v97 = *(unsigned char **)(v93 + 16);
      if (v97)
      {
        LOBYTE(v96) = *v97;
LABEL_133:
        float v104 = v140;
        if ((_BYTE)v96)
        {
          uint64_t v96 = (char)v96;
          char v105 = v97[1];
          if (v105)
          {
            unsigned int v106 = v97 + 2;
            do
            {
              uint64_t v96 = 31 * v96 + v105;
              int v107 = *v106++;
              char v105 = v107;
            }
            while (v107);
          }
          uint64_t v108 = v96 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v108 = 0;
        }
        goto LABEL_150;
      }
      uint64_t v108 = 0x7FFFFFFFFFFFFFFFLL;
      float v104 = v140;
LABEL_150:
      id v142 = (id)v108;
      char v120 = (const char *)(a5 + 9);
      if (*(unsigned char *)(a5 + 8)) {
        char v120 = *(const char **)(a5 + 16);
      }
      re::RenderFrame::specifyScopeLane(v104, (uint64_t *)&v142, v143, v120);
      if (v143[0]) {

      }
LABEL_178:
      if (*(void *)(ViewDescriptor + 304) <= (unint64_t)++v91) {
        return;
      }
    }
    uint64_t v96 = v95 >> 8;
    v97 = (unsigned char *)(v93 + 9);
    goto LABEL_133;
  }
  long long v29 = v151;
  long long v30 = v152;
  *(_OWORD *)(a6 + 416) = v151;
  *(_OWORD *)(a6 + 432) = v30;
  float32x4_t v31 = v153;
  float32x4_t v32 = v154;
  *(float32x4_t *)(a6 + 448) = v153;
  *(float32x4_t *)(a6 + 464) = v32;
  *(_OWORD *)(a6 + 1088) = v29;
  *(_OWORD *)(a6 + 1104) = v30;
  *(float32x4_t *)(a6 + 1120) = v31;
  *(float32x4_t *)(a6 + 1136) = v32;
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)a4, 1, (uint64_t)v150);
  long long v33 = v150[1];
  *(_OWORD *)(a6 + 32) = v150[0];
  *(_OWORD *)(a6 + 48) = v33;
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)a4, 2, (uint64_t)v149);
  long long v34 = v149[1];
  *(_OWORD *)(a6 + 704) = v149[0];
  *(_OWORD *)(a6 + 720) = v34;
  __src.i64[0] = 0;
  __src.i32[2] = 0;
  uint64_t v35 = *(void *)(ViewDescriptor + 204);
  uint64_t v36 = *(void *)(ViewDescriptor + 196);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v37))
  {
    uint64_t v39 = &__src + __src.i64[0];
    v39[1].i64[0] = v36;
    v39[1].i64[1] = v35;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  uint64_t v40 = *(void *)(ViewDescriptor + 220);
  uint64_t v41 = *(void *)(ViewDescriptor + 212);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v38))
  {
    long long v43 = &__src + __src.i64[0];
    v43[1].i64[0] = v41;
    v43[1].i64[1] = v40;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  uint64_t v144 = 0;
  int v145 = 0;
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v144, v42))
  {
    v146[v144++] = xmmword_2343854A0;
    ++v145;
  }
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v144, v44))
  {
    v146[v144++] = xmmword_2343854A0;
    ++v145;
  }
  *(_DWORD *)(a6 + 640) = -1;
  if (*(void *)(ViewDescriptor + 232))
  {
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 232));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v140 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 644) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 248));
    if (v144 && *(unsigned char *)(*((void *)v140 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), &v144);
    }
  }
  else if (*(void *)(ViewDescriptor + 264))
  {
    if (!v12) {
      *(_DWORD *)(a6 + 356) = 1;
    }
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v140, (void *)(ViewDescriptor + 264));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v140 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 644) = -1;
  }
  *(_DWORD *)(a6 + 1312) = -1;
  if (*(void *)(ViewDescriptor + 240))
  {
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 240));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v140 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 1316) = re::RenderFrame::addRateMap((uint64_t)v140, (void **)(ViewDescriptor + 256));
    if (v144 && *(unsigned char *)(*((void *)v140 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), &v144);
    }
  }
  else if (*(void *)(ViewDescriptor + 272))
  {
    if (!v12) {
      *(_DWORD *)(a6 + 1028) = 1;
    }
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v140, (void *)(ViewDescriptor + 272));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v140 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v140 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 1316) = -1;
  }
  uint64_t v47 = 0;
  unint64_t v48 = *(void *)(ViewDescriptor + 304);
  char v49 = 1;
  do
  {
    char v50 = v49;
    if (!v48) {
      goto LABEL_113;
    }
    char v138 = v49;
    unint64_t v51 = 0;
    uint64_t v52 = a6 + 672 * v47;
    do
    {
      uint64_t v53 = *(void *)(ViewDescriptor + 320);
      uint64_t v54 = v53 + 136 * v51;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v143, (const re::AssetHandle *)(v54 + 24 * v47 + 32));
      if (*(unsigned char *)(a6 + 1344) == 1) {
        re::AssetHandle::operator=((uint64_t)v143, (uint64_t *)(v53 + 136 * v51 + 32));
      }
      if (v143[1])
      {
        uint64_t v55 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v143);
        if (*(_DWORD *)(v55 + 240)) {
          goto LABEL_180;
        }
        id v142 = *(id *)(v55 + 160);
        unint64_t v56 = *(void *)(v54 + 8);
        if (v56)
        {
          long long v58 = *(unsigned char **)(v54 + 16);
          if (!v58)
          {
            uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_83:
            uint64_t v141 = v68;
            uint64_t v79 = (const char *)(v52 + 9);
            if (*(unsigned char *)(v52 + 8)) {
              uint64_t v79 = *(const char **)(v52 + 16);
            }
            re::RenderFrame::specifyScopeLane(v140, &v141, &v142, v79);
            if (v142) {

            }
            goto LABEL_111;
          }
          LOBYTE(v57) = *v58;
        }
        else
        {
          uint64_t v57 = v56 >> 8;
          long long v58 = (unsigned char *)(v54 + 9);
        }
        if ((_BYTE)v57)
        {
          uint64_t v57 = (char)v57;
          char v65 = v58[1];
          if (v65)
          {
            v66 = v58 + 2;
            do
            {
              uint64_t v57 = 31 * v57 + v65;
              int v67 = *v66++;
              char v65 = v67;
            }
            while (v67);
          }
          uint64_t v68 = v57 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v68 = 0;
        }
        goto LABEL_83;
      }
      uint64_t v59 = v53 + 136 * v51 + 4 * v47;
      int v61 = *(_DWORD *)(v59 + 80);
      long long v60 = (const unsigned int *)(v59 + 80);
      if (v61 != -1)
      {
        unint64_t v62 = *(void *)(v54 + 8);
        if (v62)
        {
          long long v64 = *(unsigned char **)(v54 + 16);
          if (v64)
          {
            LOBYTE(v63) = *v64;
            goto LABEL_77;
          }
          uint64_t v78 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v63 = v62 >> 8;
          long long v64 = (unsigned char *)(v54 + 9);
LABEL_77:
          if ((_BYTE)v63)
          {
            uint64_t v63 = (char)v63;
            char v75 = v64[1];
            if (v75)
            {
              uint64_t v76 = v64 + 2;
              do
              {
                uint64_t v63 = 31 * v63 + v75;
                int v77 = *v76++;
                char v75 = v77;
              }
              while (v77);
            }
            uint64_t v78 = v63 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v78 = 0;
          }
        }
        id v142 = (id)v78;
        uint64_t v88 = (const char *)(v52 + 9);
        if (*(unsigned char *)(v52 + 8)) {
          uint64_t v88 = *(const char **)(v52 + 16);
        }
        re::RenderFrame::specifyScopeLane(v140, (const re::WeakStringID *)&v142, v60, v88);
        goto LABEL_111;
      }
      uint64_t v69 = v53 + 136 * v51 + 8 * v47;
      uint64_t v71 = *(void *)(v69 + 88);
      unint64_t v70 = (void **)(v69 + 88);
      if (v71)
      {
        unint64_t v72 = *(void *)(v54 + 8);
        if (v72)
        {
          float v74 = *(unsigned char **)(v54 + 16);
          if (v74)
          {
            LOBYTE(v73) = *v74;
            goto LABEL_93;
          }
          uint64_t v87 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v73 = v72 >> 8;
          float v74 = (unsigned char *)(v54 + 9);
LABEL_93:
          if ((_BYTE)v73)
          {
            uint64_t v73 = (char)v73;
            char v84 = v74[1];
            if (v84)
            {
              unint64_t v85 = v74 + 2;
              do
              {
                uint64_t v73 = 31 * v73 + v84;
                int v86 = *v85++;
                char v84 = v86;
              }
              while (v86);
            }
            uint64_t v87 = v73 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v87 = 0;
          }
        }
        id v142 = (id)v87;
        int v90 = (const char *)(v52 + 9);
        if (*(unsigned char *)(v52 + 8)) {
          int v90 = *(const char **)(v52 + 16);
        }
        re::RenderFrame::specifyScopeLane(v140, (uint64_t *)&v142, v70, v90);
        goto LABEL_111;
      }
      uint64_t v80 = v53 + 136 * v51 + 8 * v47;
      uint64_t v82 = *(void *)(v80 + 104);
      float v81 = (void **)(v80 + 104);
      if (v82)
      {
        if (*(unsigned char *)(v54 + 8)) {
          unsigned int v83 = *(char **)(v54 + 16);
        }
        else {
          unsigned int v83 = (char *)(v54 + 9);
        }
        v89 = (const char *)(v52 + 9);
        if (*(unsigned char *)(v52 + 8)) {
          v89 = *(const char **)(v52 + 16);
        }
        re::RenderFrame::specifyScopeLane(v140, v83, v81, v89, *(_DWORD *)(v52 + 648));
      }
LABEL_111:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v143);
      ++v51;
      unint64_t v48 = *(void *)(ViewDescriptor + 304);
    }
    while (v48 > v51);
    char v50 = v138;
LABEL_113:
    char v49 = 0;
    uint64_t v47 = 1;
  }
  while ((v50 & 1) != 0);
}

uint64_t anonymous namespace'::addDefaultSpecifyLaneCommand(_anonymous_namespace_ *this, re::RenderManager *a2, re::ecs2::CameraViewDescriptorsComponent *a3, re::ecs2::CameraViewDescriptorsComponent *a4, re::ecs2::Entity *a5)
{
  v9 = (re::Allocator *)re::RenderManager::perFrameAllocator(this);
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(a3, a2, a4, v9, 0, (re::DynamicString *)&v15);
  uint64_t v10 = *((void *)this + 13);
  if (v10) {
    uint64_t v11 = (re::RenderFrame *)re::RenderFrameBox::get(v10 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v14 = 65290051;
  if (v16) {
    int v12 = *(const char **)&v17[7];
  }
  else {
    int v12 = v17;
  }
  re::RenderFrame::specifyScopeLane(v11, (const re::WeakStringID *)&v14, &re::kLegacyRenderLayerHandle, v12);
  uint64_t result = v15;
  if (v15)
  {
    if (v16) {
      return (*(uint64_t (**)(void))(*(void *)v15 + 40))();
    }
  }
  return result;
}

void re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::OrthographicCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a3, re::ecs2::CameraViewDescriptorsComponent *a4)
{
  v4 = a4;
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!a4) {
    v4 = (re::ecs2::CameraViewDescriptorsComponent *)*((void *)this + 2);
  }
  *(void *)uint64_t v53 = this;
  *(void *)&v55[2] = 0;
  if (*((void *)this + 27))
  {
    int v8 = 0;
  }
  else if (*((void *)this + 32))
  {
    int v8 = 1;
  }
  else
  {
    if (!*((void *)this + 37))
    {
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      goto LABEL_25;
    }
    int v8 = 2;
  }
  v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  *(_DWORD *)&v53[8] = v8;
  do
  {
    int v12 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x20000);
    if (v8 == 1) {
      v9 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x10000);
    }
    if (v8 == 2) {
      float32x4_t v13 = v12;
    }
    else {
      float32x4_t v13 = v9;
    }
    if (*(unsigned char *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, v13) + 192))
    {
      unint64_t v14 = *((void *)this + 12);
      if (v14 <= v11)
      {
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(void *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(void *)&v58[5] = v11;
        LOWORD(v58[7]) = 2048;
        *(void *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_57:
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(void *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(void *)&v58[5] = v10;
        LOWORD(v58[7]) = 2048;
        *(void *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v15 = 0;
      uint64_t v16 = *((void *)this + 14) + 1360 * v11++;
    }
    else
    {
      unint64_t v14 = *((void *)this + 7);
      if (v14 <= v10) {
        goto LABEL_57;
      }
      uint64_t v16 = 0;
      uint64_t v15 = *((void *)this + 9) + 672 * v10++;
    }
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)v53);
    int v8 = *(_DWORD *)&v53[8];
    v9 = *(re::ecs2::CameraViewDescriptorsComponent **)&v55[2];
  }
  while (*(re::ecs2::CameraViewDescriptorsComponent **)v53 != this || *(_DWORD *)&v53[8] != 3 || *(void *)&v55[2]);
  uint64_t v18 = *((void *)this + 27);
  if (v18 == 1)
  {
    if (!*((void *)this + 32) && !*(void *)(*((void *)this + 29) + 304)) {
    return;
    }
  }
  if (v18) {
    return;
  }
LABEL_25:
  int8x16_t v19 = v4;
  do
  {
    float32x4_t v20 = v19;
    int8x16_t v19 = (re::ecs2::CameraViewDescriptorsComponent *)*((void *)v19 + 3);
  }
  while (v19);
  uint64_t v21 = *(void *)(*((void *)v20 + 2) + 376);
  if (v21) {
    LOBYTE(v21) = *(void *)(v21 + 24) != 1;
  }
  if (!*((void *)this + 32) && (v21 & 1) == 0)
  {
    uint64_t v22 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = xmmword_23435FBB0;
    *(void *)&long long v36 = 0x70000FF00000000;
    WORD4(v36) = 1;
    BYTE12(v36) = 0;
    uint64_t v41 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    *((void *)&v37 + 1) = 0;
    int v40 = 0;
    do
    {
      float v23 = (char *)&v33 + v22;
      *((void *)v23 + 18) = 0;
      *((void *)v23 + 15) = 0;
      *((void *)v23 + 16) = 0;
      *((void *)v23 + 14) = 0;
      v22 += 40;
      *((_DWORD *)v23 + 34) = 0;
    }
    while (v22 != 80);
    char v42 = 0;
    long long v44 = xmmword_2343854A0;
    long long v43 = xmmword_2343854A0;
    long long v47 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    __int16 v48 = 1;
    char v49 = 0;
    uint64_t v52 = 0;
    memset(v50, 0, sizeof(v50));
    int v51 = 0;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((re::ecs2::CameraViewDescriptorsComponent *)((char *)this + 240), (re::ecs2::CameraViewDescriptor *)&v33);
    if (*(unsigned char *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, (re::ecs2::CameraViewDescriptorsComponent *)0x10000)+ 192))
    {
      unint64_t v14 = *((void *)this + 12);
      if (v14 > v11)
      {
        uint64_t v24 = 0;
        uint64_t v25 = *((void *)this + 14) + 1360 * v11;
LABEL_41:
        uint64_t v27 = *((void *)this + 32);
        *((void *)this + 32) = 0;
        re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*((re::AssetHandle **)this + 34), (re::AssetHandle *)(*((void *)this + 34) + 336 * v27));
        ++*((_DWORD *)this + 66);
        re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v50);
        for (uint64_t i = 272; i != 256; i -= 8)
        {
          long long v29 = *(void **)((char *)&v33 + i);
          if (v29)
          {

            *(void *)((char *)&v33 + i) = 0;
          }
        }
        do
        {
          long long v30 = *(void **)((char *)&v33 + i);
          if (v30)
          {

            *(void *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 240);
        do
        {
          float32x4_t v31 = *(void **)((char *)&v33 + i);
          if (v31)
          {

            *(void *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 224);
        for (uint64_t j = 152; j != 72; j -= 40)
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v33 + j);
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v37 + 8);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v33);
        return;
      }
LABEL_58:
      long long v59 = 0u;
      long long v60 = 0u;
      memset(v58, 0, sizeof(v58));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v53 = 136315906;
      *(void *)&v53[4] = "operator[]";
      __int16 v54 = 1024;
      *(_DWORD *)uint64_t v55 = 789;
      *(_WORD *)&v55[4] = 2048;
      *(void *)&v55[6] = v11;
      __int16 v56 = 2048;
      unint64_t v57 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      unint64_t v14 = *((void *)this + 7);
      if (v14 > v10)
      {
        uint64_t v25 = 0;
        uint64_t v24 = *((void *)this + 9) + 672 * v10;
        goto LABEL_41;
      }
    }
    long long v59 = 0u;
    long long v60 = 0u;
    memset(v58, 0, sizeof(v58));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v53 = 136315906;
    *(void *)&v53[4] = "operator[]";
    __int16 v54 = 1024;
    *(_DWORD *)uint64_t v55 = 789;
    *(_WORD *)&v55[4] = 2048;
    *(void *)&v55[6] = v10;
    __int16 v56 = 2048;
    unint64_t v57 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void anonymous namespace'::updateOneViewPerFrameData<re::ecs2::OrthographicCameraComponent>(uint64_t a1, re::ecs2::CameraViewDescriptorsComponent *a2, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  uint64_t v11 = *(void *)(a1 + 104);
  if (v11) {
    int v175 = (re::RenderFrame *)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    int v175 = 0;
  }
  int v12 = *(unsigned __int8 *)(a1 + 300);
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 0, (uint64_t)&__src);
  float32x4_t v13 = vnegq_f32(v193);
  int8x16_t v14 = (int8x16_t)vnegq_f32(__src);
  float32x4_t v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
  float32x4_t v16 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL), v193), v15, __src);
  int8x16_t v17 = (int8x16_t)vaddq_f32(v16, v16);
  float32x4_t v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
  int8x16_t v19 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v193), v18, v15);
  float32x4_t v30 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v18, v193, 3), __src), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL));
  float v20 = v13.f32[0] + v13.f32[0];
  *(float *)v19.i32 = (float)(v13.f32[0] + v13.f32[0]) * v13.f32[0];
  float v21 = vmuls_lane_f32(v13.f32[1] + v13.f32[1], *(float32x2_t *)v13.f32, 1);
  float v22 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v13, 2);
  float v23 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], *(float32x2_t *)v13.f32, 1);
  float v24 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], v13, 2);
  v13.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v13, 2);
  float v25 = vmuls_lane_f32(v20, v193, 3);
  v18.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v193, 3);
  float v26 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v193, 3);
  HIDWORD(v29) = 0;
  HIDWORD(v27) = 0;
  *(float *)&long long v27 = 1.0 - (float)(v21 + v22);
  *((float *)&v27 + 1) = v23 + v26;
  *((float *)&v27 + 2) = v24 - v18.f32[0];
  v15.f32[0] = 1.0 - (float)(*(float *)v19.i32 + v22);
  HIDWORD(v28) = 0;
  *(float *)&long long v28 = v23 - v26;
  DWORD1(v28) = v15.i32[0];
  *((float *)&v28 + 2) = v13.f32[0] + v25;
  *(float *)&long long v29 = v24 + v18.f32[0];
  *((float *)&v29 + 1) = v13.f32[0] - v25;
  *((float *)&v29 + 2) = 1.0 - (float)(*(float *)v19.i32 + v21);
  v30.i32[3] = 1.0;
  if (!*(unsigned char *)(ViewDescriptor + 192))
  {
    *(_OWORD *)(a5 + 416) = v27;
    *(_OWORD *)(a5 + 432) = v28;
    *(_OWORD *)(a5 + 448) = v29;
    *(float32x4_t *)(a5 + 464) = v30;
    re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 0, (uint64_t)&v186);
    long long v70 = v186;
    long long v69 = v187;
    *(_OWORD *)(a5 + 32) = v186;
    *(_OWORD *)(a5 + 48) = v69;
    *(_OWORD *)(a5 + 128) = v70;
    *(_OWORD *)(a5 + 144) = v69;
    long long v71 = a4[6];
    long long v73 = a4[3];
    long long v72 = a4[4];
    *(_OWORD *)(a5 + 608) = a4[5];
    *(_OWORD *)(a5 + 624) = v71;
    *(_OWORD *)(a5 + 576) = v73;
    *(_OWORD *)(a5 + 592) = v72;
    re::Projection::computeMatrix4x4F((re::Projection *)(a5 + 64), (uint64_t)v182);
    re::RenderCamera::computeInverseTransform((float32x4_t *)(a5 + 32), (uint64_t)v178);
    uint64_t v75 = 0;
    float32x4_t v76 = *(float32x4_t *)v182;
    float32x4_t v77 = v183;
    float32x4_t v78 = v184;
    float32x4_t v79 = v185;
    long long v188 = *(_OWORD *)v178;
    long long v189 = v179;
    long long v190 = v180;
    long long v191 = v181;
    do
    {
      *(float32x4_t *)((char *)&__src + v75) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, COERCE_FLOAT(*(long long *)((char *)&v188 + v75))), v77, *(float32x2_t *)((char *)&v188 + v75), 1), v78, *(float32x4_t *)((char *)&v188 + v75), 2), v79, *(float32x4_t *)((char *)&v188 + v75), 3);
      v75 += 16;
    }
    while (v75 != 64);
    float32x4_t v80 = v193;
    long long v81 = v194;
    long long v82 = v195;
    a4[3] = __src;
    a4[4] = v80;
    a4[5] = v81;
    a4[6] = v82;
    a4[7] = xmmword_23435FD50;
    a4[8] = xmmword_23435FD60;
    a4[9] = xmmword_23435FD80;
    a4[10] = xmmword_23435FBB0;
    __src.i64[0] = 0;
    __src.i32[2] = 0;
    long long v174 = *(_OWORD *)(ViewDescriptor + 196);
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v74))
    {
      *((_OWORD *)&__src + ++__src.i64[0]) = v174;
      ++__src.i32[2];
    }
    *(void *)&long long v188 = 0;
    DWORD2(v188) = 0;
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v188, v83))
    {
      *(&v188 + (void)v188 + 1) = xmmword_2343854A0;
      *(void *)&long long v188 = v188 + 1;
      ++DWORD2(v188);
    }
    *(_DWORD *)(a5 + 640) = -1;
    if (*(void *)(ViewDescriptor + 232))
    {
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 232));
      if (__src.i64[0] && *(unsigned char *)(*((void *)v175 + 1) + 300)) {
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
      }
      *(_DWORD *)(a5 + 644) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 248));
      if ((void)v188 && *(unsigned char *)(*((void *)v175 + 1) + 300)) {
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&v188);
      }
    }
    else if (*(void *)(ViewDescriptor + 264))
    {
      if (!v12) {
        *(_DWORD *)(a5 + 356) = 1;
      }
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v175, (void *)(ViewDescriptor + 264));
      if (__src.i64[0] && *(unsigned char *)(*((void *)v175 + 1) + 300)) {
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
      }
      *(_DWORD *)(a5 + 644) = -1;
    }
    if (!*(void *)(ViewDescriptor + 304)) {
      return;
    }
    uint64_t v128 = 0;
    while (1)
    {
      uint64_t v129 = *(void *)(ViewDescriptor + 320);
      uint64_t v130 = v129 + 136 * v128;
      if (!*(void *)(v130 + 40))
      {
        uint64_t v135 = v129 + 136 * v128;
        int v137 = *(_DWORD *)(v135 + 80);
        uint64_t v136 = (const unsigned int *)(v135 + 80);
        if (v137 == -1)
        {
          uint64_t v145 = v129 + 136 * v128;
          uint64_t v147 = *(void *)(v145 + 88);
          long long v146 = (void **)(v145 + 88);
          if (!v147)
          {
            uint64_t v156 = v129 + 136 * v128;
            uint64_t v158 = *(void *)(v156 + 104);
            char v157 = (void **)(v156 + 104);
            if (v158)
            {
              if (*(unsigned char *)(v130 + 8)) {
                int v159 = *(char **)(v130 + 16);
              }
              else {
                int v159 = (char *)(v130 + 9);
              }
              long long v165 = (const char *)(a5 + 9);
              if (*(unsigned char *)(a5 + 8)) {
                long long v165 = *(const char **)(a5 + 16);
              }
              re::RenderFrame::specifyScopeLane(v175, v159, v157, v165, *(_DWORD *)(a5 + 648));
            }
            goto LABEL_184;
          }
          unint64_t v148 = *(void *)(v130 + 8);
          if (v148)
          {
            long long v150 = *(unsigned char **)(v130 + 16);
            if (v150)
            {
              LOBYTE(v149) = *v150;
              goto LABEL_166;
            }
            uint64_t v163 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v149 = v148 >> 8;
            long long v150 = (unsigned char *)(v130 + 9);
LABEL_166:
            if ((_BYTE)v149)
            {
              uint64_t v149 = (char)v149;
              char v160 = v150[1];
              if (v160)
              {
                long long v161 = v150 + 2;
                do
                {
                  uint64_t v149 = 31 * v149 + v160;
                  int v162 = *v161++;
                  char v160 = v162;
                }
                while (v162);
              }
              uint64_t v163 = v149 & 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v163 = 0;
            }
          }
          v182[0] = (id)v163;
          long long v166 = (const char *)(a5 + 9);
          if (*(unsigned char *)(a5 + 8)) {
            long long v166 = *(const char **)(a5 + 16);
          }
          re::RenderFrame::specifyScopeLane(v175, (uint64_t *)v182, v146, v166);
          goto LABEL_184;
        }
        unint64_t v138 = *(void *)(v130 + 8);
        if (v138)
        {
          long long v140 = *(unsigned char **)(v130 + 16);
          if (v140)
          {
            LOBYTE(v139) = *v140;
            goto LABEL_150;
          }
          uint64_t v154 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v139 = v138 >> 8;
          long long v140 = (unsigned char *)(v130 + 9);
LABEL_150:
          if ((_BYTE)v139)
          {
            uint64_t v139 = (char)v139;
            char v151 = v140[1];
            if (v151)
            {
              long long v152 = v140 + 2;
              do
              {
                uint64_t v139 = 31 * v139 + v151;
                int v153 = *v152++;
                char v151 = v153;
              }
              while (v153);
            }
            uint64_t v154 = v139 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v154 = 0;
          }
        }
        v182[0] = (id)v154;
        long long v164 = (const char *)(a5 + 9);
        if (*(unsigned char *)(a5 + 8)) {
          long long v164 = *(const char **)(a5 + 16);
        }
        re::RenderFrame::specifyScopeLane(v175, (const re::WeakStringID *)v182, v136, v164);
        goto LABEL_184;
      }
      uint64_t v131 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v130 + 32));
      if (*(_DWORD *)(v131 + 240))
      {
LABEL_186:
        int v167 = std::__throw_bad_variant_access[abi:nn180100]();
        re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::CustomMatrixCameraComponent>(v167, v168);
        return;
      }
      v182[0] = *(id *)(v131 + 160);
      unint64_t v132 = *(void *)(v130 + 8);
      if ((v132 & 1) == 0) {
        break;
      }
      v134 = *(unsigned char **)(v130 + 16);
      if (v134)
      {
        LOBYTE(v133) = *v134;
LABEL_139:
        if ((_BYTE)v133)
        {
          uint64_t v133 = (char)v133;
          char v141 = v134[1];
          if (v141)
          {
            id v142 = v134 + 2;
            do
            {
              uint64_t v133 = 31 * v133 + v141;
              int v143 = *v142++;
              char v141 = v143;
            }
            while (v143);
          }
          uint64_t v144 = v133 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v144 = 0;
        }
        goto LABEL_156;
      }
      uint64_t v144 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_156:
      v178[0] = (id)v144;
      char v155 = (const char *)(a5 + 9);
      if (*(unsigned char *)(a5 + 8)) {
        char v155 = *(const char **)(a5 + 16);
      }
      re::RenderFrame::specifyScopeLane(v175, (uint64_t *)v178, v182, v155);
      if (v182[0]) {

      }
LABEL_184:
      if (*(void *)(ViewDescriptor + 304) <= (unint64_t)++v128) {
        return;
      }
    }
    uint64_t v133 = v132 >> 8;
    v134 = (unsigned char *)(v130 + 9);
    goto LABEL_139;
  }
  *(_OWORD *)(a6 + 416) = v27;
  *(_OWORD *)(a6 + 432) = v28;
  *(_OWORD *)(a6 + 448) = v29;
  *(float32x4_t *)(a6 + 464) = v30;
  *(_OWORD *)(a6 + 1088) = v27;
  *(_OWORD *)(a6 + 1104) = v28;
  *(_OWORD *)(a6 + 1120) = v29;
  *(float32x4_t *)(a6 + 1136) = v30;
  long long v171 = v29;
  float32x4_t v173 = v30;
  long long v169 = v28;
  long long v170 = v27;
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 1, (uint64_t)v177);
  long long v31 = v177[1];
  *(_OWORD *)(a6 + 32) = v177[0];
  *(_OWORD *)(a6 + 48) = v31;
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 2, (uint64_t)v176);
  long long v32 = v176[1];
  *(_OWORD *)(a6 + 704) = v176[0];
  *(_OWORD *)(a6 + 720) = v32;
  *(_OWORD *)(a6 + 416) = v170;
  *(_OWORD *)(a6 + 432) = v169;
  *(_OWORD *)(a6 + 448) = v171;
  *(float32x4_t *)(a6 + 464) = v173;
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 1, (uint64_t)&v186);
  long long v34 = v186;
  long long v33 = v187;
  *(_OWORD *)(a6 + 32) = v186;
  *(_OWORD *)(a6 + 48) = v33;
  *(_OWORD *)(a6 + 128) = v34;
  *(_OWORD *)(a6 + 144) = v33;
  long long v35 = a4[6];
  long long v37 = a4[3];
  long long v36 = a4[4];
  *(_OWORD *)(a6 + 608) = a4[5];
  *(_OWORD *)(a6 + 624) = v35;
  *(_OWORD *)(a6 + 576) = v37;
  *(_OWORD *)(a6 + 592) = v36;
  re::Projection::computeMatrix4x4F((re::Projection *)(a6 + 64), (uint64_t)v182);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a6 + 32), (uint64_t)v178);
  uint64_t v38 = 0;
  float32x4_t v39 = *(float32x4_t *)v182;
  float32x4_t v40 = v183;
  float32x4_t v41 = v184;
  float32x4_t v42 = v185;
  long long v188 = *(_OWORD *)v178;
  long long v189 = v179;
  long long v190 = v180;
  long long v191 = v181;
  do
  {
    *(float32x4_t *)((char *)&__src + v38) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(long long *)((char *)&v188 + v38))), v40, *(float32x2_t *)((char *)&v188 + v38), 1), v41, *(float32x4_t *)((char *)&v188 + v38), 2), v42, *(float32x4_t *)((char *)&v188 + v38), 3);
    v38 += 16;
  }
  while (v38 != 64);
  float32x4_t v43 = v193;
  long long v44 = v194;
  long long v45 = v195;
  a4[3] = __src;
  a4[4] = v43;
  a4[5] = v44;
  a4[6] = v45;
  *(_OWORD *)(a6 + 1088) = v170;
  *(_OWORD *)(a6 + 1104) = v169;
  *(_OWORD *)(a6 + 1120) = v171;
  *(float32x4_t *)(a6 + 1136) = v173;
  re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)a4, 2, (uint64_t)&v186);
  long long v47 = v186;
  long long v46 = v187;
  *(_OWORD *)(a6 + 704) = v186;
  *(_OWORD *)(a6 + 720) = v46;
  *(_OWORD *)(a6 + 800) = v47;
  *(_OWORD *)(a6 + 816) = v46;
  long long v49 = a4[9];
  long long v48 = a4[10];
  long long v50 = a4[8];
  *(_OWORD *)(a6 + 1248) = a4[7];
  *(_OWORD *)(a6 + 1280) = v49;
  *(_OWORD *)(a6 + 1296) = v48;
  *(_OWORD *)(a6 + 1264) = v50;
  re::Projection::computeMatrix4x4F((re::Projection *)(a6 + 736), (uint64_t)v182);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a6 + 704), (uint64_t)v178);
  uint64_t v52 = 0;
  float32x4_t v53 = *(float32x4_t *)v182;
  float32x4_t v54 = v183;
  float32x4_t v55 = v184;
  float32x4_t v56 = v185;
  long long v188 = *(_OWORD *)v178;
  long long v189 = v179;
  long long v190 = v180;
  long long v191 = v181;
  do
  {
    *(float32x4_t *)((char *)&__src + v52) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(*(long long *)((char *)&v188 + v52))), v54, *(float32x2_t *)((char *)&v188 + v52), 1), v55, *(float32x4_t *)((char *)&v188 + v52), 2), v56, *(float32x4_t *)((char *)&v188 + v52), 3);
    v52 += 16;
  }
  while (v52 != 64);
  float32x4_t v57 = v193;
  long long v58 = v194;
  long long v59 = v195;
  a4[7] = __src;
  a4[8] = v57;
  a4[9] = v58;
  a4[10] = v59;
  __src.i64[0] = 0;
  __src.i32[2] = 0;
  uint64_t v60 = *(void *)(ViewDescriptor + 204);
  uint64_t v61 = *(void *)(ViewDescriptor + 196);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v51))
  {
    uint64_t v63 = &__src + __src.i64[0];
    v63[1].i64[0] = v61;
    v63[1].i64[1] = v60;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  uint64_t v64 = *(void *)(ViewDescriptor + 220);
  uint64_t v65 = *(void *)(ViewDescriptor + 212);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v62))
  {
    int v67 = &__src + __src.i64[0];
    v67[1].i64[0] = v65;
    v67[1].i64[1] = v64;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  *(void *)&long long v188 = 0;
  DWORD2(v188) = 0;
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v188, v66))
  {
    *(&v188 + (void)v188 + 1) = xmmword_2343854A0;
    *(void *)&long long v188 = v188 + 1;
    ++DWORD2(v188);
  }
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v188, v68))
  {
    *(&v188 + (void)v188 + 1) = xmmword_2343854A0;
    *(void *)&long long v188 = v188 + 1;
    ++DWORD2(v188);
  }
  *(_DWORD *)(a6 + 640) = -1;
  if (*(void *)(ViewDescriptor + 232))
  {
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 232));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v175 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 644) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 248));
    if ((void)v188 && *(unsigned char *)(*((void *)v175 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&v188);
    }
  }
  else if (*(void *)(ViewDescriptor + 264))
  {
    if (!v12) {
      *(_DWORD *)(a6 + 356) = 1;
    }
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v175, (void *)(ViewDescriptor + 264));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v175 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 644) = -1;
  }
  *(_DWORD *)(a6 + 1312) = -1;
  if (*(void *)(ViewDescriptor + 240))
  {
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 240));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v175 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 1316) = re::RenderFrame::addRateMap((uint64_t)v175, (void **)(ViewDescriptor + 256));
    if ((void)v188 && *(unsigned char *)(*((void *)v175 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&v188);
    }
  }
  else if (*(void *)(ViewDescriptor + 272))
  {
    if (!v12) {
      *(_DWORD *)(a6 + 1028) = 1;
    }
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v175, (void *)(ViewDescriptor + 272));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v175 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v175 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 1316) = -1;
  }
  uint64_t v84 = 0;
  unint64_t v85 = *(void *)(ViewDescriptor + 304);
  char v86 = 1;
  do
  {
    char v87 = v86;
    if (!v85) {
      goto LABEL_119;
    }
    char v172 = v86;
    unint64_t v88 = 0;
    uint64_t v89 = a6 + 672 * v84;
    do
    {
      uint64_t v90 = *(void *)(ViewDescriptor + 320);
      uint64_t v91 = v90 + 136 * v88;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v182, (const re::AssetHandle *)(v91 + 24 * v84 + 32));
      if (*(unsigned char *)(a6 + 1344) == 1) {
        re::AssetHandle::operator=((uint64_t)v182, (uint64_t *)(v90 + 136 * v88 + 32));
      }
      if (v182[1])
      {
        uint64_t v92 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v182);
        if (*(_DWORD *)(v92 + 240)) {
          goto LABEL_186;
        }
        v178[0] = *(id *)(v92 + 160);
        unint64_t v93 = *(void *)(v91 + 8);
        if (v93)
        {
          unint64_t v95 = *(unsigned char **)(v91 + 16);
          if (!v95)
          {
            uint64_t v105 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_89:
            *(void *)&long long v186 = v105;
            char v116 = (const char *)(v89 + 9);
            if (*(unsigned char *)(v89 + 8)) {
              char v116 = *(const char **)(v89 + 16);
            }
            re::RenderFrame::specifyScopeLane(v175, (uint64_t *)&v186, v178, v116);
            if (v178[0]) {

            }
            goto LABEL_117;
          }
          LOBYTE(v94) = *v95;
        }
        else
        {
          uint64_t v94 = v93 >> 8;
          unint64_t v95 = (unsigned char *)(v91 + 9);
        }
        if ((_BYTE)v94)
        {
          uint64_t v94 = (char)v94;
          char v102 = v95[1];
          if (v102)
          {
            id v103 = v95 + 2;
            do
            {
              uint64_t v94 = 31 * v94 + v102;
              int v104 = *v103++;
              char v102 = v104;
            }
            while (v104);
          }
          uint64_t v105 = v94 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v105 = 0;
        }
        goto LABEL_89;
      }
      uint64_t v96 = v90 + 136 * v88 + 4 * v84;
      int v98 = *(_DWORD *)(v96 + 80);
      v97 = (const unsigned int *)(v96 + 80);
      if (v98 != -1)
      {
        unint64_t v99 = *(void *)(v91 + 8);
        if (v99)
        {
          unint64_t v101 = *(unsigned char **)(v91 + 16);
          if (v101)
          {
            LOBYTE(v100) = *v101;
            goto LABEL_83;
          }
          uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v100 = v99 >> 8;
          unint64_t v101 = (unsigned char *)(v91 + 9);
LABEL_83:
          if ((_BYTE)v100)
          {
            uint64_t v100 = (char)v100;
            char v112 = v101[1];
            if (v112)
            {
              uint64_t v113 = v101 + 2;
              do
              {
                uint64_t v100 = 31 * v100 + v112;
                int v114 = *v113++;
                char v112 = v114;
              }
              while (v114);
            }
            uint64_t v115 = v100 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v115 = 0;
          }
        }
        v178[0] = (id)v115;
        v125 = (const char *)(v89 + 9);
        if (*(unsigned char *)(v89 + 8)) {
          v125 = *(const char **)(v89 + 16);
        }
        re::RenderFrame::specifyScopeLane(v175, (const re::WeakStringID *)v178, v97, v125);
        goto LABEL_117;
      }
      uint64_t v106 = v90 + 136 * v88 + 8 * v84;
      uint64_t v108 = *(void *)(v106 + 88);
      int v107 = (void **)(v106 + 88);
      if (v108)
      {
        unint64_t v109 = *(void *)(v91 + 8);
        if (v109)
        {
          uint64_t v111 = *(unsigned char **)(v91 + 16);
          if (v111)
          {
            LOBYTE(v110) = *v111;
            goto LABEL_99;
          }
          uint64_t v124 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v110 = v109 >> 8;
          uint64_t v111 = (unsigned char *)(v91 + 9);
LABEL_99:
          if ((_BYTE)v110)
          {
            uint64_t v110 = (char)v110;
            char v121 = v111[1];
            if (v121)
            {
              uint64_t v122 = v111 + 2;
              do
              {
                uint64_t v110 = 31 * v110 + v121;
                int v123 = *v122++;
                char v121 = v123;
              }
              while (v123);
            }
            uint64_t v124 = v110 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v124 = 0;
          }
        }
        v178[0] = (id)v124;
        v127 = (const char *)(v89 + 9);
        if (*(unsigned char *)(v89 + 8)) {
          v127 = *(const char **)(v89 + 16);
        }
        re::RenderFrame::specifyScopeLane(v175, (uint64_t *)v178, v107, v127);
        goto LABEL_117;
      }
      uint64_t v117 = v90 + 136 * v88 + 8 * v84;
      uint64_t v119 = *(void *)(v117 + 104);
      int v118 = (void **)(v117 + 104);
      if (v119)
      {
        if (*(unsigned char *)(v91 + 8)) {
          char v120 = *(char **)(v91 + 16);
        }
        else {
          char v120 = (char *)(v91 + 9);
        }
        char v126 = (const char *)(v89 + 9);
        if (*(unsigned char *)(v89 + 8)) {
          char v126 = *(const char **)(v89 + 16);
        }
        re::RenderFrame::specifyScopeLane(v175, v120, v118, v126, *(_DWORD *)(v89 + 648));
      }
LABEL_117:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v182);
      ++v88;
      unint64_t v85 = *(void *)(ViewDescriptor + 304);
    }
    while (v85 > v88);
    char v87 = v172;
LABEL_119:
    char v86 = 0;
    uint64_t v84 = 1;
  }
  while ((v87 & 1) != 0);
}

void re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::CustomMatrixCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a3, re::ecs2::CameraViewDescriptorsComponent *a4)
{
  v4 = a4;
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!a4) {
    v4 = (re::ecs2::CameraViewDescriptorsComponent *)*((void *)this + 2);
  }
  *(void *)float32x4_t v53 = this;
  *(void *)&v55[2] = 0;
  if (*((void *)this + 27))
  {
    int v8 = 0;
  }
  else if (*((void *)this + 32))
  {
    int v8 = 1;
  }
  else
  {
    if (!*((void *)this + 37))
    {
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      goto LABEL_25;
    }
    int v8 = 2;
  }
  v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  *(_DWORD *)&v53[8] = v8;
  do
  {
    int v12 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x20000);
    if (v8 == 1) {
      v9 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v9 + 0x10000);
    }
    if (v8 == 2) {
      float32x4_t v13 = v12;
    }
    else {
      float32x4_t v13 = v9;
    }
    if (*(unsigned char *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, v13) + 192))
    {
      unint64_t v14 = *((void *)this + 12);
      if (v14 <= v11)
      {
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(void *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(void *)&v58[5] = v11;
        LOWORD(v58[7]) = 2048;
        *(void *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_57:
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v58[0] = 136315906;
        *(void *)&v58[1] = "operator[]";
        LOWORD(v58[3]) = 1024;
        *(_DWORD *)((char *)&v58[3] + 2) = 789;
        HIWORD(v58[4]) = 2048;
        *(void *)&v58[5] = v10;
        LOWORD(v58[7]) = 2048;
        *(void *)((char *)&v58[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v15 = 0;
      uint64_t v16 = *((void *)this + 14) + 1360 * v11++;
    }
    else
    {
      unint64_t v14 = *((void *)this + 7);
      if (v14 <= v10) {
        goto LABEL_57;
      }
      uint64_t v16 = 0;
      uint64_t v15 = *((void *)this + 9) + 672 * v10++;
    }
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)v53);
    int v8 = *(_DWORD *)&v53[8];
    v9 = *(re::ecs2::CameraViewDescriptorsComponent **)&v55[2];
  }
  while (*(re::ecs2::CameraViewDescriptorsComponent **)v53 != this || *(_DWORD *)&v53[8] != 3 || *(void *)&v55[2]);
  uint64_t v18 = *((void *)this + 27);
  if (v18 == 1)
  {
    if (!*((void *)this + 32) && !*(void *)(*((void *)this + 29) + 304)) {
    return;
    }
  }
  if (v18) {
    return;
  }
LABEL_25:
  int8x16_t v19 = v4;
  do
  {
    float v20 = v19;
    int8x16_t v19 = (re::ecs2::CameraViewDescriptorsComponent *)*((void *)v19 + 3);
  }
  while (v19);
  uint64_t v21 = *(void *)(*((void *)v20 + 2) + 376);
  if (v21) {
    LOBYTE(v21) = *(void *)(v21 + 24) != 1;
  }
  if (!*((void *)this + 32) && (v21 & 1) == 0)
  {
    uint64_t v22 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = xmmword_23435FBB0;
    *(void *)&long long v36 = 0x70000FF00000000;
    WORD4(v36) = 1;
    BYTE12(v36) = 0;
    uint64_t v41 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    *((void *)&v37 + 1) = 0;
    int v40 = 0;
    do
    {
      float v23 = (char *)&v33 + v22;
      *((void *)v23 + 18) = 0;
      *((void *)v23 + 15) = 0;
      *((void *)v23 + 16) = 0;
      *((void *)v23 + 14) = 0;
      v22 += 40;
      *((_DWORD *)v23 + 34) = 0;
    }
    while (v22 != 80);
    char v42 = 0;
    long long v44 = xmmword_2343854A0;
    long long v43 = xmmword_2343854A0;
    long long v47 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    __int16 v48 = 1;
    char v49 = 0;
    uint64_t v52 = 0;
    memset(v50, 0, sizeof(v50));
    int v51 = 0;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((re::ecs2::CameraViewDescriptorsComponent *)((char *)this + 240), (re::ecs2::CameraViewDescriptor *)&v33);
    if (*(unsigned char *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, (re::ecs2::CameraViewDescriptorsComponent *)0x10000)+ 192))
    {
      unint64_t v14 = *((void *)this + 12);
      if (v14 > v11)
      {
        uint64_t v24 = 0;
        uint64_t v25 = *((void *)this + 14) + 1360 * v11;
LABEL_41:
        uint64_t v27 = *((void *)this + 32);
        *((void *)this + 32) = 0;
        re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*((re::AssetHandle **)this + 34), (re::AssetHandle *)(*((void *)this + 34) + 336 * v27));
        ++*((_DWORD *)this + 66);
        re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v50);
        for (uint64_t i = 272; i != 256; i -= 8)
        {
          long long v29 = *(void **)((char *)&v33 + i);
          if (v29)
          {

            *(void *)((char *)&v33 + i) = 0;
          }
        }
        do
        {
          float32x4_t v30 = *(void **)((char *)&v33 + i);
          if (v30)
          {

            *(void *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 240);
        do
        {
          long long v31 = *(void **)((char *)&v33 + i);
          if (v31)
          {

            *(void *)((char *)&v33 + i) = 0;
          }
          i -= 8;
        }
        while (i != 224);
        for (uint64_t j = 152; j != 72; j -= 40)
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v33 + j);
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v37 + 8);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v33);
        return;
      }
LABEL_58:
      long long v59 = 0u;
      long long v60 = 0u;
      memset(v58, 0, sizeof(v58));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v53 = 136315906;
      *(void *)&v53[4] = "operator[]";
      __int16 v54 = 1024;
      *(_DWORD *)float32x4_t v55 = 789;
      *(_WORD *)&v55[4] = 2048;
      *(void *)&v55[6] = v11;
      __int16 v56 = 2048;
      unint64_t v57 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      unint64_t v14 = *((void *)this + 7);
      if (v14 > v10)
      {
        uint64_t v25 = 0;
        uint64_t v24 = *((void *)this + 9) + 672 * v10;
        goto LABEL_41;
      }
    }
    long long v59 = 0u;
    long long v60 = 0u;
    memset(v58, 0, sizeof(v58));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v53 = 136315906;
    *(void *)&v53[4] = "operator[]";
    __int16 v54 = 1024;
    *(_DWORD *)float32x4_t v55 = 789;
    *(_WORD *)&v55[4] = 2048;
    *(void *)&v55[6] = v10;
    __int16 v56 = 2048;
    unint64_t v57 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void anonymous namespace'::updateOneViewPerFrameData<re::ecs2::CustomMatrixCameraComponent>(uint64_t a1, re::ecs2::CameraViewDescriptorsComponent *a2, re::ecs2::CameraViewDescriptorsComponent *this, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  uint64_t v11 = *(void *)(a1 + 104);
  if (v11) {
    long long v174 = (re::RenderFrame *)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    long long v174 = 0;
  }
  int v12 = *(unsigned __int8 *)(a1 + 300);
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 0, &__src);
  float32x4_t v13 = vnegq_f32(v192);
  int8x16_t v14 = (int8x16_t)vnegq_f32(__src);
  float32x4_t v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
  float32x4_t v16 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL), v192), v15, __src);
  int8x16_t v17 = (int8x16_t)vaddq_f32(v16, v16);
  float32x4_t v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
  int8x16_t v19 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v192), v18, v15);
  float32x4_t v30 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v18, v192, 3), __src), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL));
  float v20 = v13.f32[0] + v13.f32[0];
  *(float *)v19.i32 = (float)(v13.f32[0] + v13.f32[0]) * v13.f32[0];
  float v21 = vmuls_lane_f32(v13.f32[1] + v13.f32[1], *(float32x2_t *)v13.f32, 1);
  float v22 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v13, 2);
  float v23 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], *(float32x2_t *)v13.f32, 1);
  float v24 = vmuls_lane_f32(v13.f32[0] + v13.f32[0], v13, 2);
  v13.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v13, 2);
  float v25 = vmuls_lane_f32(v20, v192, 3);
  v18.f32[0] = vmuls_lane_f32(v13.f32[1] + v13.f32[1], v192, 3);
  float v26 = vmuls_lane_f32(v13.f32[2] + v13.f32[2], v192, 3);
  HIDWORD(v29) = 0;
  HIDWORD(v27) = 0;
  *(float *)&long long v27 = 1.0 - (float)(v21 + v22);
  *((float *)&v27 + 1) = v23 + v26;
  *((float *)&v27 + 2) = v24 - v18.f32[0];
  v15.f32[0] = 1.0 - (float)(*(float *)v19.i32 + v22);
  HIDWORD(v28) = 0;
  *(float *)&long long v28 = v23 - v26;
  DWORD1(v28) = v15.i32[0];
  *((float *)&v28 + 2) = v13.f32[0] + v25;
  *(float *)&long long v29 = v24 + v18.f32[0];
  *((float *)&v29 + 1) = v13.f32[0] - v25;
  *((float *)&v29 + 2) = 1.0 - (float)(*(float *)v19.i32 + v21);
  v30.i32[3] = 1.0;
  if (!*(unsigned char *)(ViewDescriptor + 192))
  {
    *(_OWORD *)(a5 + 416) = v27;
    *(_OWORD *)(a5 + 432) = v28;
    *(_OWORD *)(a5 + 448) = v29;
    *(float32x4_t *)(a5 + 464) = v30;
    re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 0, &v185);
    float32x4_t v70 = v185;
    long long v69 = v186;
    *(float32x4_t *)(a5 + 32) = v185;
    *(_OWORD *)(a5 + 48) = v69;
    *(float32x4_t *)(a5 + 128) = v70;
    *(_OWORD *)(a5 + 144) = v69;
    long long v71 = a4[6];
    long long v73 = a4[3];
    long long v72 = a4[4];
    *(_OWORD *)(a5 + 608) = a4[5];
    *(_OWORD *)(a5 + 624) = v71;
    *(_OWORD *)(a5 + 576) = v73;
    *(_OWORD *)(a5 + 592) = v72;
    re::Projection::computeMatrix4x4F((re::Projection *)(a5 + 64), (uint64_t)v181);
    re::RenderCamera::computeInverseTransform((float32x4_t *)(a5 + 32), (uint64_t)v177);
    uint64_t v75 = 0;
    float32x4_t v76 = *(float32x4_t *)v181;
    float32x4_t v77 = v182;
    float32x4_t v78 = v183;
    float32x4_t v79 = v184;
    long long v187 = *(_OWORD *)v177;
    long long v188 = v178;
    long long v189 = v179;
    long long v190 = v180;
    do
    {
      *(float32x4_t *)((char *)&__src + v75) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, COERCE_FLOAT(*(long long *)((char *)&v187 + v75))), v77, *(float32x2_t *)((char *)&v187 + v75), 1), v78, *(float32x4_t *)((char *)&v187 + v75), 2), v79, *(float32x4_t *)((char *)&v187 + v75), 3);
      v75 += 16;
    }
    while (v75 != 64);
    float32x4_t v80 = v192;
    long long v81 = v193;
    long long v82 = v194;
    a4[3] = __src;
    a4[4] = v80;
    a4[5] = v81;
    a4[6] = v82;
    a4[7] = xmmword_23435FD50;
    a4[8] = xmmword_23435FD60;
    a4[9] = xmmword_23435FD80;
    a4[10] = xmmword_23435FBB0;
    __src.i64[0] = 0;
    __src.i32[2] = 0;
    long long v173 = *(_OWORD *)(ViewDescriptor + 196);
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v74))
    {
      *((_OWORD *)&__src + ++__src.i64[0]) = v173;
      ++__src.i32[2];
    }
    *(void *)&long long v187 = 0;
    DWORD2(v187) = 0;
    if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v187, v83))
    {
      *(&v187 + (void)v187 + 1) = xmmword_2343854A0;
      *(void *)&long long v187 = v187 + 1;
      ++DWORD2(v187);
    }
    *(_DWORD *)(a5 + 640) = -1;
    if (*(void *)(ViewDescriptor + 232))
    {
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 232));
      if (__src.i64[0] && *(unsigned char *)(*((void *)v174 + 1) + 300)) {
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
      }
      *(_DWORD *)(a5 + 644) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 248));
      if ((void)v187 && *(unsigned char *)(*((void *)v174 + 1) + 300)) {
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&v187);
      }
    }
    else if (*(void *)(ViewDescriptor + 264))
    {
      if (!v12) {
        *(_DWORD *)(a5 + 356) = 1;
      }
      *(_DWORD *)(a5 + 640) = re::RenderFrame::addRateMap((uint64_t)v174, (void *)(ViewDescriptor + 264));
      if (__src.i64[0] && *(unsigned char *)(*((void *)v174 + 1) + 300)) {
        re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
      }
      *(_DWORD *)(a5 + 644) = -1;
    }
    if (!*(void *)(ViewDescriptor + 304)) {
      return;
    }
    uint64_t v128 = 0;
    while (1)
    {
      uint64_t v129 = *(void *)(ViewDescriptor + 320);
      uint64_t v130 = v129 + 136 * v128;
      if (!*(void *)(v130 + 40))
      {
        uint64_t v135 = v129 + 136 * v128;
        int v137 = *(_DWORD *)(v135 + 80);
        uint64_t v136 = (const unsigned int *)(v135 + 80);
        if (v137 == -1)
        {
          uint64_t v145 = v129 + 136 * v128;
          uint64_t v147 = *(void *)(v145 + 88);
          long long v146 = (void **)(v145 + 88);
          if (!v147)
          {
            uint64_t v156 = v129 + 136 * v128;
            uint64_t v158 = *(void *)(v156 + 104);
            char v157 = (void **)(v156 + 104);
            if (v158)
            {
              if (*(unsigned char *)(v130 + 8)) {
                int v159 = *(char **)(v130 + 16);
              }
              else {
                int v159 = (char *)(v130 + 9);
              }
              long long v165 = (const char *)(a5 + 9);
              if (*(unsigned char *)(a5 + 8)) {
                long long v165 = *(const char **)(a5 + 16);
              }
              re::RenderFrame::specifyScopeLane(v174, v159, v157, v165, *(_DWORD *)(a5 + 648));
            }
            goto LABEL_184;
          }
          unint64_t v148 = *(void *)(v130 + 8);
          if (v148)
          {
            long long v150 = *(unsigned char **)(v130 + 16);
            if (v150)
            {
              LOBYTE(v149) = *v150;
              goto LABEL_166;
            }
            uint64_t v163 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v149 = v148 >> 8;
            long long v150 = (unsigned char *)(v130 + 9);
LABEL_166:
            if ((_BYTE)v149)
            {
              uint64_t v149 = (char)v149;
              char v160 = v150[1];
              if (v160)
              {
                long long v161 = v150 + 2;
                do
                {
                  uint64_t v149 = 31 * v149 + v160;
                  int v162 = *v161++;
                  char v160 = v162;
                }
                while (v162);
              }
              uint64_t v163 = v149 & 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v163 = 0;
            }
          }
          v181[0] = (id)v163;
          long long v166 = (const char *)(a5 + 9);
          if (*(unsigned char *)(a5 + 8)) {
            long long v166 = *(const char **)(a5 + 16);
          }
          re::RenderFrame::specifyScopeLane(v174, (uint64_t *)v181, v146, v166);
          goto LABEL_184;
        }
        unint64_t v138 = *(void *)(v130 + 8);
        if (v138)
        {
          long long v140 = *(unsigned char **)(v130 + 16);
          if (v140)
          {
            LOBYTE(v139) = *v140;
            goto LABEL_150;
          }
          uint64_t v154 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v139 = v138 >> 8;
          long long v140 = (unsigned char *)(v130 + 9);
LABEL_150:
          if ((_BYTE)v139)
          {
            uint64_t v139 = (char)v139;
            char v151 = v140[1];
            if (v151)
            {
              long long v152 = v140 + 2;
              do
              {
                uint64_t v139 = 31 * v139 + v151;
                int v153 = *v152++;
                char v151 = v153;
              }
              while (v153);
            }
            uint64_t v154 = v139 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v154 = 0;
          }
        }
        v181[0] = (id)v154;
        long long v164 = (const char *)(a5 + 9);
        if (*(unsigned char *)(a5 + 8)) {
          long long v164 = *(const char **)(a5 + 16);
        }
        re::RenderFrame::specifyScopeLane(v174, (const re::WeakStringID *)v181, v136, v164);
        goto LABEL_184;
      }
      uint64_t v131 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v130 + 32));
      if (*(_DWORD *)(v131 + 240))
      {
LABEL_186:
        int v167 = (re::RenderGraphAsset *)std::__throw_bad_variant_access[abi:nn180100]();
        re::AssetHandle::asset<re::RenderGraphAsset>(v167);
        return;
      }
      v181[0] = *(id *)(v131 + 160);
      unint64_t v132 = *(void *)(v130 + 8);
      if ((v132 & 1) == 0) {
        break;
      }
      v134 = *(unsigned char **)(v130 + 16);
      if (v134)
      {
        LOBYTE(v133) = *v134;
LABEL_139:
        if ((_BYTE)v133)
        {
          uint64_t v133 = (char)v133;
          char v141 = v134[1];
          if (v141)
          {
            id v142 = v134 + 2;
            do
            {
              uint64_t v133 = 31 * v133 + v141;
              int v143 = *v142++;
              char v141 = v143;
            }
            while (v143);
          }
          uint64_t v144 = v133 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v144 = 0;
        }
        goto LABEL_156;
      }
      uint64_t v144 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_156:
      v177[0] = (id)v144;
      char v155 = (const char *)(a5 + 9);
      if (*(unsigned char *)(a5 + 8)) {
        char v155 = *(const char **)(a5 + 16);
      }
      re::RenderFrame::specifyScopeLane(v174, (uint64_t *)v177, v181, v155);
      if (v181[0]) {

      }
LABEL_184:
      if (*(void *)(ViewDescriptor + 304) <= (unint64_t)++v128) {
        return;
      }
    }
    uint64_t v133 = v132 >> 8;
    v134 = (unsigned char *)(v130 + 9);
    goto LABEL_139;
  }
  *(_OWORD *)(a6 + 416) = v27;
  *(_OWORD *)(a6 + 432) = v28;
  *(_OWORD *)(a6 + 448) = v29;
  *(float32x4_t *)(a6 + 464) = v30;
  *(_OWORD *)(a6 + 1088) = v27;
  *(_OWORD *)(a6 + 1104) = v28;
  *(_OWORD *)(a6 + 1120) = v29;
  *(float32x4_t *)(a6 + 1136) = v30;
  long long v170 = v29;
  float32x4_t v172 = v30;
  long long v168 = v28;
  long long v169 = v27;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 1, v176);
  float32x4_t v31 = v176[1];
  *(float32x4_t *)(a6 + 32) = v176[0];
  *(float32x4_t *)(a6 + 48) = v31;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 2, v175);
  float32x4_t v32 = v175[1];
  *(float32x4_t *)(a6 + 704) = v175[0];
  *(float32x4_t *)(a6 + 720) = v32;
  *(_OWORD *)(a6 + 416) = v169;
  *(_OWORD *)(a6 + 432) = v168;
  *(_OWORD *)(a6 + 448) = v170;
  *(float32x4_t *)(a6 + 464) = v172;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 1, &v185);
  float32x4_t v34 = v185;
  long long v33 = v186;
  *(float32x4_t *)(a6 + 32) = v185;
  *(_OWORD *)(a6 + 48) = v33;
  *(float32x4_t *)(a6 + 128) = v34;
  *(_OWORD *)(a6 + 144) = v33;
  long long v35 = a4[6];
  long long v37 = a4[3];
  long long v36 = a4[4];
  *(_OWORD *)(a6 + 608) = a4[5];
  *(_OWORD *)(a6 + 624) = v35;
  *(_OWORD *)(a6 + 576) = v37;
  *(_OWORD *)(a6 + 592) = v36;
  re::Projection::computeMatrix4x4F((re::Projection *)(a6 + 64), (uint64_t)v181);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a6 + 32), (uint64_t)v177);
  uint64_t v38 = 0;
  float32x4_t v39 = *(float32x4_t *)v181;
  float32x4_t v40 = v182;
  float32x4_t v41 = v183;
  float32x4_t v42 = v184;
  long long v187 = *(_OWORD *)v177;
  long long v188 = v178;
  long long v189 = v179;
  long long v190 = v180;
  do
  {
    *(float32x4_t *)((char *)&__src + v38) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(long long *)((char *)&v187 + v38))), v40, *(float32x2_t *)((char *)&v187 + v38), 1), v41, *(float32x4_t *)((char *)&v187 + v38), 2), v42, *(float32x4_t *)((char *)&v187 + v38), 3);
    v38 += 16;
  }
  while (v38 != 64);
  float32x4_t v43 = v192;
  long long v44 = v193;
  long long v45 = v194;
  a4[3] = __src;
  a4[4] = v43;
  a4[5] = v44;
  a4[6] = v45;
  *(_OWORD *)(a6 + 1088) = v169;
  *(_OWORD *)(a6 + 1104) = v168;
  *(_OWORD *)(a6 + 1120) = v170;
  *(float32x4_t *)(a6 + 1136) = v172;
  re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)a4, 2, &v185);
  float32x4_t v47 = v185;
  long long v46 = v186;
  *(float32x4_t *)(a6 + 704) = v185;
  *(_OWORD *)(a6 + 720) = v46;
  *(float32x4_t *)(a6 + 800) = v47;
  *(_OWORD *)(a6 + 816) = v46;
  long long v49 = a4[9];
  long long v48 = a4[10];
  long long v50 = a4[8];
  *(_OWORD *)(a6 + 1248) = a4[7];
  *(_OWORD *)(a6 + 1280) = v49;
  *(_OWORD *)(a6 + 1296) = v48;
  *(_OWORD *)(a6 + 1264) = v50;
  re::Projection::computeMatrix4x4F((re::Projection *)(a6 + 736), (uint64_t)v181);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a6 + 704), (uint64_t)v177);
  uint64_t v52 = 0;
  float32x4_t v53 = *(float32x4_t *)v181;
  float32x4_t v54 = v182;
  float32x4_t v55 = v183;
  float32x4_t v56 = v184;
  long long v187 = *(_OWORD *)v177;
  long long v188 = v178;
  long long v189 = v179;
  long long v190 = v180;
  do
  {
    *(float32x4_t *)((char *)&__src + v52) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(*(long long *)((char *)&v187 + v52))), v54, *(float32x2_t *)((char *)&v187 + v52), 1), v55, *(float32x4_t *)((char *)&v187 + v52), 2), v56, *(float32x4_t *)((char *)&v187 + v52), 3);
    v52 += 16;
  }
  while (v52 != 64);
  float32x4_t v57 = v192;
  long long v58 = v193;
  long long v59 = v194;
  a4[7] = __src;
  a4[8] = v57;
  a4[9] = v58;
  a4[10] = v59;
  __src.i64[0] = 0;
  __src.i32[2] = 0;
  uint64_t v60 = *(void *)(ViewDescriptor + 204);
  uint64_t v61 = *(void *)(ViewDescriptor + 196);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v51))
  {
    uint64_t v63 = &__src + __src.i64[0];
    v63[1].i64[0] = v61;
    v63[1].i64[1] = v60;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  uint64_t v64 = *(void *)(ViewDescriptor + 220);
  uint64_t v65 = *(void *)(ViewDescriptor + 212);
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&__src, v62))
  {
    int v67 = &__src + __src.i64[0];
    v67[1].i64[0] = v65;
    v67[1].i64[1] = v64;
    ++__src.i64[0];
    ++__src.i32[2];
  }
  *(void *)&long long v187 = 0;
  DWORD2(v187) = 0;
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v187, v66))
  {
    *(&v187 + (void)v187 + 1) = xmmword_2343854A0;
    *(void *)&long long v187 = v187 + 1;
    ++DWORD2(v187);
  }
  if (re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(&v187, v68))
  {
    *(&v187 + (void)v187 + 1) = xmmword_2343854A0;
    *(void *)&long long v187 = v187 + 1;
    ++DWORD2(v187);
  }
  *(_DWORD *)(a6 + 640) = -1;
  if (*(void *)(ViewDescriptor + 232))
  {
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 232));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v174 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 644) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 248));
    if ((void)v187 && *(unsigned char *)(*((void *)v174 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&v187);
    }
  }
  else if (*(void *)(ViewDescriptor + 264))
  {
    if (!v12) {
      *(_DWORD *)(a6 + 356) = 1;
    }
    *(_DWORD *)(a6 + 640) = re::RenderFrame::addRateMap((uint64_t)v174, (void *)(ViewDescriptor + 264));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v174 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 644) = -1;
  }
  *(_DWORD *)(a6 + 1312) = -1;
  if (*(void *)(ViewDescriptor + 240))
  {
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 240));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v174 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 1316) = re::RenderFrame::addRateMap((uint64_t)v174, (void **)(ViewDescriptor + 256));
    if ((void)v187 && *(unsigned char *)(*((void *)v174 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&v187);
    }
  }
  else if (*(void *)(ViewDescriptor + 272))
  {
    if (!v12) {
      *(_DWORD *)(a6 + 1028) = 1;
    }
    *(_DWORD *)(a6 + 1312) = re::RenderFrame::addRateMap((uint64_t)v174, (void *)(ViewDescriptor + 272));
    if (__src.i64[0] && *(unsigned char *)(*((void *)v174 + 1) + 300)) {
      re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add((re::RenderFrame *)((char *)v174 + 4072), (uint64_t *)&__src);
    }
    *(_DWORD *)(a6 + 1316) = -1;
  }
  uint64_t v84 = 0;
  unint64_t v85 = *(void *)(ViewDescriptor + 304);
  char v86 = 1;
  do
  {
    char v87 = v86;
    if (!v85) {
      goto LABEL_119;
    }
    char v171 = v86;
    unint64_t v88 = 0;
    uint64_t v89 = a6 + 672 * v84;
    do
    {
      uint64_t v90 = *(void *)(ViewDescriptor + 320);
      uint64_t v91 = v90 + 136 * v88;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v181, (const re::AssetHandle *)(v91 + 24 * v84 + 32));
      if (*(unsigned char *)(a6 + 1344) == 1) {
        re::AssetHandle::operator=((uint64_t)v181, (uint64_t *)(v90 + 136 * v88 + 32));
      }
      if (v181[1])
      {
        uint64_t v92 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v181);
        if (*(_DWORD *)(v92 + 240)) {
          goto LABEL_186;
        }
        v177[0] = *(id *)(v92 + 160);
        unint64_t v93 = *(void *)(v91 + 8);
        if (v93)
        {
          unint64_t v95 = *(unsigned char **)(v91 + 16);
          if (!v95)
          {
            uint64_t v105 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_89:
            v185.i64[0] = v105;
            char v116 = (const char *)(v89 + 9);
            if (*(unsigned char *)(v89 + 8)) {
              char v116 = *(const char **)(v89 + 16);
            }
            re::RenderFrame::specifyScopeLane(v174, (uint64_t *)&v185, v177, v116);
            if (v177[0]) {

            }
            goto LABEL_117;
          }
          LOBYTE(v94) = *v95;
        }
        else
        {
          uint64_t v94 = v93 >> 8;
          unint64_t v95 = (unsigned char *)(v91 + 9);
        }
        if ((_BYTE)v94)
        {
          uint64_t v94 = (char)v94;
          char v102 = v95[1];
          if (v102)
          {
            id v103 = v95 + 2;
            do
            {
              uint64_t v94 = 31 * v94 + v102;
              int v104 = *v103++;
              char v102 = v104;
            }
            while (v104);
          }
          uint64_t v105 = v94 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v105 = 0;
        }
        goto LABEL_89;
      }
      uint64_t v96 = v90 + 136 * v88 + 4 * v84;
      int v98 = *(_DWORD *)(v96 + 80);
      v97 = (const unsigned int *)(v96 + 80);
      if (v98 != -1)
      {
        unint64_t v99 = *(void *)(v91 + 8);
        if (v99)
        {
          unint64_t v101 = *(unsigned char **)(v91 + 16);
          if (v101)
          {
            LOBYTE(v100) = *v101;
            goto LABEL_83;
          }
          uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v100 = v99 >> 8;
          unint64_t v101 = (unsigned char *)(v91 + 9);
LABEL_83:
          if ((_BYTE)v100)
          {
            uint64_t v100 = (char)v100;
            char v112 = v101[1];
            if (v112)
            {
              uint64_t v113 = v101 + 2;
              do
              {
                uint64_t v100 = 31 * v100 + v112;
                int v114 = *v113++;
                char v112 = v114;
              }
              while (v114);
            }
            uint64_t v115 = v100 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v115 = 0;
          }
        }
        v177[0] = (id)v115;
        v125 = (const char *)(v89 + 9);
        if (*(unsigned char *)(v89 + 8)) {
          v125 = *(const char **)(v89 + 16);
        }
        re::RenderFrame::specifyScopeLane(v174, (const re::WeakStringID *)v177, v97, v125);
        goto LABEL_117;
      }
      uint64_t v106 = v90 + 136 * v88 + 8 * v84;
      uint64_t v108 = *(void *)(v106 + 88);
      int v107 = (void **)(v106 + 88);
      if (v108)
      {
        unint64_t v109 = *(void *)(v91 + 8);
        if (v109)
        {
          uint64_t v111 = *(unsigned char **)(v91 + 16);
          if (v111)
          {
            LOBYTE(v110) = *v111;
            goto LABEL_99;
          }
          uint64_t v124 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v110 = v109 >> 8;
          uint64_t v111 = (unsigned char *)(v91 + 9);
LABEL_99:
          if ((_BYTE)v110)
          {
            uint64_t v110 = (char)v110;
            char v121 = v111[1];
            if (v121)
            {
              uint64_t v122 = v111 + 2;
              do
              {
                uint64_t v110 = 31 * v110 + v121;
                int v123 = *v122++;
                char v121 = v123;
              }
              while (v123);
            }
            uint64_t v124 = v110 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v124 = 0;
          }
        }
        v177[0] = (id)v124;
        v127 = (const char *)(v89 + 9);
        if (*(unsigned char *)(v89 + 8)) {
          v127 = *(const char **)(v89 + 16);
        }
        re::RenderFrame::specifyScopeLane(v174, (uint64_t *)v177, v107, v127);
        goto LABEL_117;
      }
      uint64_t v117 = v90 + 136 * v88 + 8 * v84;
      uint64_t v119 = *(void *)(v117 + 104);
      int v118 = (void **)(v117 + 104);
      if (v119)
      {
        if (*(unsigned char *)(v91 + 8)) {
          char v120 = *(char **)(v91 + 16);
        }
        else {
          char v120 = (char *)(v91 + 9);
        }
        char v126 = (const char *)(v89 + 9);
        if (*(unsigned char *)(v89 + 8)) {
          char v126 = *(const char **)(v89 + 16);
        }
        re::RenderFrame::specifyScopeLane(v174, v120, v118, v126, *(_DWORD *)(v89 + 648));
      }
LABEL_117:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v181);
      ++v88;
      unint64_t v85 = *(void *)(ViewDescriptor + 304);
    }
    while (v85 > v88);
    char v87 = v171;
LABEL_119:
    char v86 = 0;
    uint64_t v84 = 1;
  }
  while ((v87 & 1) != 0);
}

uint64_t re::AssetHandle::asset<re::RenderGraphAsset>(re::RenderGraphAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v2 = re::RenderGraphAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        v7 = (char *)v6[18];
      }
      else {
        v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

re::DynamicString *re::DynamicArray<re::RenderGraphFileProvider>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderGraphFileProvider>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 48 * v4;
  *(void *)uint64_t v5 = *(void *)a2;
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(v5 + 8), (const re::DynamicString *)(a2 + 8));
  *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 + 40);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::RenderGraphFileProvider>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::AssetHandle::loadedAsset<re::RenderGraphAsset>(re::RenderGraphAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  unint64_t v2 = re::RenderGraphAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

void *re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 80 * v9;
        uint64_t v11 = v7;
        do
        {
          *uint64_t v11 = 0;
          v11[1] = 0;
          v11[2] = 0;
          v11[1] = *(void *)(v8 + 8);
          *(void *)(v8 + 8) = 0;
          uint64_t v12 = *v11;
          *uint64_t v11 = 0;
          *uint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = v12;
          uint64_t v13 = v11[2];
          v11[2] = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = v13;
          *(_OWORD *)(v11 + 5) = 0u;
          *(_OWORD *)(v11 + 3) = 0u;
          v11[3] = *(void *)(v8 + 24);
          *(void *)(v8 + 24) = 0;
          v11[6] = *(void *)(v8 + 48);
          *(void *)(v8 + 48) = 0;
          uint64_t v15 = v11[4];
          uint64_t v14 = v11[5];
          uint64_t v16 = *(void *)(v8 + 40);
          v11[4] = *(void *)(v8 + 32);
          v11[5] = v16;
          *(void *)(v8 + 32) = v15;
          *(void *)(v8 + 40) = v14;
          long long v17 = *(_OWORD *)(v8 + 56);
          *((unsigned char *)v11 + 72) = *(unsigned char *)(v8 + 72);
          *(_OWORD *)(v11 + 7) = v17;
          re::DynamicString::deinit((re::DynamicString *)(v8 + 24));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
          v8 += 80;
          v11 += 10;
          v10 -= 80;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

__n128 std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      re::AssetHandle::operator=(a3, (uint64_t *)v5);
      re::DynamicString::operator=((re::DynamicString *)(a3 + 24), (re::DynamicString *)(v5 + 24));
      __n128 result = *(__n128 *)(v5 + 56);
      *(unsigned char *)(a3 + 72) = *(unsigned char *)(v5 + 72);
      *(__n128 *)(a3 + 56) = result;
      v5 += 80;
      a3 += 80;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t anonymous namespace'::setCameraViewDescriptorData(_anonymous_namespace_ *this, re::RenderManager *a2, re::CameraView *a3, re::CameraMultiView *a4, const re::ecs2::CameraViewDescriptor *a5, re::Allocator *a6)
{
  char v11 = *((unsigned char *)a4 + 24);
  uint64_t v12 = *((void *)this + 11);
  if (v12)
  {
    LOBYTE(v92) = 1;
    uint64_t v96 = 0x38BDA0FDF1630EF8;
    v97 = "overrides:enablemsaa";
    int v13 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v12, &v96, &v92);
    re::StringID::destroyString((re::StringID *)&v96);
    if (!v13) {
      char v11 = v92 ^ 1;
    }
  }
  char v14 = *((unsigned char *)a4 + 26);
  char v15 = *((unsigned char *)a4 + 28);
  char v16 = *((unsigned char *)a4 + 25);
  char v17 = *((unsigned char *)a4 + 27);
  char v18 = *((unsigned char *)a4 + 52);
  char v19 = *((unsigned char *)a4 + 53);
  int v20 = *((unsigned __int8 *)a4 + 54);
  int v21 = *((unsigned __int8 *)a4 + 55);
  *((unsigned char *)a2 + 343) = 0;
  *((_WORD *)a2 + 170) = 0;
  *((unsigned char *)a2 + 265) = 0;
  *((_OWORD *)a2 + 20) = *((_OWORD *)a4 + 2);
  *((unsigned char *)a2 + 342) = *((unsigned char *)a4 + 31);
  *((_DWORD *)a2 + 84) = *((_DWORD *)a4 + 12);
  if (v11) {
    int v22 = 1;
  }
  else {
    int v22 = 4;
  }
  *((_DWORD *)a2 + 89) = v22;
  *((unsigned char *)a2 + 345) = v14;
  *((unsigned char *)a2 + 349) = v15;
  *((unsigned char *)a2 + 344) = v17 ^ 1;
  *((unsigned char *)a2 + 348) = v16;
  *((_WORD *)a2 + 132) = *(_WORD *)((char *)a4 + 29);
  *((unsigned char *)a2 + 652) = *((unsigned char *)a4 + 280);
  *((unsigned char *)a2 + 653) = (*((unsigned __int8 *)this + 271) | *((unsigned __int8 *)a4 + 281)) != 0;
  *((unsigned char *)a2 + 654) = *((unsigned char *)a4 + 282);
  if (v20 || v21 != 7)
  {
    *((unsigned char *)a2 + 360) = 1;
    *((unsigned char *)a2 + 376) = v19;
    *((unsigned char *)a2 + 361) = v18;
    *((unsigned char *)a2 + 362) = v18;
    *((unsigned char *)a2 + 366) = v20;
    *((unsigned char *)a2 + 363) = v21;
    *((unsigned char *)a2 + 368) = 1;
    *((unsigned char *)a2 + 369) = v18;
    *((unsigned char *)a2 + 370) = v18;
    *((unsigned char *)a2 + 374) = v20;
    *((unsigned char *)a2 + 371) = v21;
  }
  *((unsigned char *)a2 + 400) = *((unsigned char *)a4 + 56);
  if (*((unsigned char *)a2 + 401) || *((unsigned char *)a4 + 57))
  {
    if (!*((unsigned char *)a2 + 401) || *((unsigned char *)a4 + 57))
    {
      if (!*((unsigned char *)a2 + 401) && *((unsigned char *)a4 + 57)) {
        *((unsigned char *)a2 + 401) = 1;
      }
      *((unsigned char *)a2 + 402) = *((unsigned char *)a4 + 58);
    }
    else
    {
      *((unsigned char *)a2 + 401) = 0;
    }
  }
  if (*((unsigned char *)a2 + 404) || *((unsigned char *)a4 + 60))
  {
    if (!*((unsigned char *)a2 + 404) || *((unsigned char *)a4 + 60))
    {
      if (!*((unsigned char *)a2 + 404) && *((unsigned char *)a4 + 60)) {
        *((unsigned char *)a2 + 404) = 1;
      }
      *((_DWORD *)a2 + 102) = *((_DWORD *)a4 + 16);
    }
    else
    {
      *((unsigned char *)a2 + 404) = 0;
    }
  }
  if (*((unsigned char *)a4 + 192))
  {
    *((unsigned char *)a3 + 1344) = *((unsigned char *)a4 + 192);
    re::DynamicString::operator=(a3, a2);
    long long v23 = *((_OWORD *)a2 + 2);
    long long v24 = *((_OWORD *)a2 + 3);
    long long v25 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a3 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a3 + 5) = v25;
    *((_OWORD *)a3 + 2) = v23;
    *((_OWORD *)a3 + 3) = v24;
    long long v26 = *((_OWORD *)a2 + 6);
    long long v27 = *((_OWORD *)a2 + 7);
    long long v28 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a3 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a3 + 9) = v28;
    *((_OWORD *)a3 + 6) = v26;
    *((_OWORD *)a3 + 7) = v27;
    long long v29 = *((_OWORD *)a2 + 10);
    long long v30 = *((_OWORD *)a2 + 11);
    long long v31 = *((_OWORD *)a2 + 13);
    *((_OWORD *)a3 + 12) = *((_OWORD *)a2 + 12);
    *((_OWORD *)a3 + 13) = v31;
    *((_OWORD *)a3 + 10) = v29;
    *((_OWORD *)a3 + 11) = v30;
    re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)a3 + 224, (uint64_t *)a2 + 28);
    *((_WORD *)a3 + 132) = *((_WORD *)a2 + 132);
    re::DynamicArray<re::CameraView::PickupScopeLane>::operator=((uint64_t)a3 + 272, (uint64_t *)a2 + 34);
    *((_OWORD *)a3 + 20) = *((_OWORD *)a2 + 20);
    long long v33 = *((_OWORD *)a2 + 22);
    long long v32 = *((_OWORD *)a2 + 23);
    long long v34 = *((_OWORD *)a2 + 21);
    *((void *)a3 + 48) = *((void *)a2 + 48);
    *((_OWORD *)a3 + 22) = v33;
    *((_OWORD *)a3 + 23) = v32;
    *((_OWORD *)a3 + 21) = v34;
    *((unsigned char *)a3 + 400) = *((unsigned char *)a2 + 400);
    if (*((unsigned char *)a3 + 401) || *((unsigned char *)a2 + 401))
    {
      if (!*((unsigned char *)a3 + 401) || *((unsigned char *)a2 + 401))
      {
        if (!*((unsigned char *)a3 + 401) && *((unsigned char *)a2 + 401)) {
          *((unsigned char *)a3 + 401) = 1;
        }
        *((unsigned char *)a3 + 402) = *((unsigned char *)a2 + 402);
      }
      else
      {
        *((unsigned char *)a3 + 401) = 0;
      }
    }
    uint64_t v90 = a3;
    if (*((unsigned char *)a3 + 404) || *((unsigned char *)a2 + 404))
    {
      if (!*((unsigned char *)a3 + 404) || *((unsigned char *)a2 + 404))
      {
        if (*((unsigned char *)a3 + 404) || !*((unsigned char *)a2 + 404))
        {
          *((_DWORD *)a3 + 102) = *((_DWORD *)a2 + 102);
        }
        else
        {
          *((unsigned char *)a3 + 404) = 1;
          *((_DWORD *)a3 + 102) = *((_DWORD *)a2 + 102);
        }
      }
      else
      {
        *((unsigned char *)a3 + 404) = 0;
      }
    }
    long long v42 = *((_OWORD *)a2 + 26);
    long long v43 = *((_OWORD *)a2 + 27);
    long long v44 = *((_OWORD *)a2 + 29);
    *((_OWORD *)a3 + 28) = *((_OWORD *)a2 + 28);
    *((_OWORD *)a3 + 29) = v44;
    *((_OWORD *)a3 + 26) = v42;
    *((_OWORD *)a3 + 27) = v43;
    long long v45 = *((_OWORD *)a2 + 30);
    long long v46 = *((_OWORD *)a2 + 31);
    long long v47 = *((_OWORD *)a2 + 33);
    *((_OWORD *)a3 + 32) = *((_OWORD *)a2 + 32);
    *((_OWORD *)a3 + 33) = v47;
    *((_OWORD *)a3 + 30) = v45;
    *((_OWORD *)a3 + 31) = v46;
    long long v49 = *((_OWORD *)a2 + 39);
    long long v48 = *((_OWORD *)a2 + 40);
    long long v50 = *((_OWORD *)a2 + 38);
    *(void *)((char *)a3 + 653) = *(void *)((char *)a2 + 653);
    *((_OWORD *)a3 + 39) = v49;
    *((_OWORD *)a3 + 40) = v48;
    *((_OWORD *)a3 + 38) = v50;
    long long v51 = *((_OWORD *)a2 + 34);
    long long v52 = *((_OWORD *)a2 + 35);
    long long v53 = *((_OWORD *)a2 + 37);
    *((_OWORD *)a3 + 36) = *((_OWORD *)a2 + 36);
    *((_OWORD *)a3 + 37) = v53;
    *((_OWORD *)a3 + 34) = v51;
    *((_OWORD *)a3 + 35) = v52;
    re::DynamicString::operator=((re::CameraView *)((char *)a3 + 672), a2);
    long long v54 = *((_OWORD *)a2 + 2);
    long long v55 = *((_OWORD *)a2 + 3);
    long long v56 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a3 + 46) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a3 + 47) = v56;
    *((_OWORD *)a3 + 44) = v54;
    *((_OWORD *)a3 + 45) = v55;
    long long v57 = *((_OWORD *)a2 + 6);
    long long v58 = *((_OWORD *)a2 + 7);
    long long v59 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a3 + 50) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a3 + 51) = v59;
    *((_OWORD *)a3 + 48) = v57;
    *((_OWORD *)a3 + 49) = v58;
    long long v60 = *((_OWORD *)a2 + 10);
    long long v61 = *((_OWORD *)a2 + 11);
    long long v62 = *((_OWORD *)a2 + 13);
    *((_OWORD *)a3 + 54) = *((_OWORD *)a2 + 12);
    *((_OWORD *)a3 + 55) = v62;
    *((_OWORD *)a3 + 52) = v60;
    *((_OWORD *)a3 + 53) = v61;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a3 + 896, (uint64_t)a2 + 224);
    *((_WORD *)a3 + 468) = *((_WORD *)a2 + 132);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a3 + 944, (uint64_t)a2 + 272);
    *((_OWORD *)a3 + 62) = *((_OWORD *)a2 + 20);
    long long v64 = *((_OWORD *)a2 + 22);
    long long v63 = *((_OWORD *)a2 + 23);
    long long v65 = *((_OWORD *)a2 + 21);
    *((void *)a3 + 132) = *((void *)a2 + 48);
    *((_OWORD *)a3 + 65) = v63;
    *((_OWORD *)a3 + 63) = v65;
    *((_OWORD *)a3 + 64) = v64;
    *((unsigned char *)a3 + 1072) = *((unsigned char *)a2 + 400);
    if (*((unsigned char *)a3 + 1073) || *((unsigned char *)a2 + 401))
    {
      if (!*((unsigned char *)a3 + 1073) || *((unsigned char *)a2 + 401))
      {
        if (!*((unsigned char *)a3 + 1073) && *((unsigned char *)a2 + 401)) {
          *((unsigned char *)a3 + 1073) = 1;
        }
        *((unsigned char *)a3 + 1074) = *((unsigned char *)a2 + 402);
      }
      else
      {
        *((unsigned char *)a3 + 1073) = 0;
      }
    }
    if (*((unsigned char *)a3 + 1076) || *((unsigned char *)a2 + 404))
    {
      if (!*((unsigned char *)a3 + 1076) || *((unsigned char *)a2 + 404))
      {
        if (!*((unsigned char *)a3 + 1076) && *((unsigned char *)a2 + 404)) {
          *((unsigned char *)a3 + 1076) = 1;
        }
        *((_DWORD *)a3 + 270) = *((_DWORD *)a2 + 102);
      }
      else
      {
        *((unsigned char *)a3 + 1076) = 0;
      }
    }
    uint64_t v66 = 0;
    long long v67 = *((_OWORD *)a2 + 26);
    long long v68 = *((_OWORD *)a2 + 27);
    long long v69 = *((_OWORD *)a2 + 28);
    *((_OWORD *)a3 + 71) = *((_OWORD *)a2 + 29);
    *((_OWORD *)a3 + 70) = v69;
    *((_OWORD *)a3 + 69) = v68;
    *((_OWORD *)a3 + 68) = v67;
    long long v70 = *((_OWORD *)a2 + 30);
    long long v71 = *((_OWORD *)a2 + 31);
    long long v72 = *((_OWORD *)a2 + 32);
    *((_OWORD *)a3 + 75) = *((_OWORD *)a2 + 33);
    *((_OWORD *)a3 + 74) = v72;
    *((_OWORD *)a3 + 73) = v71;
    *((_OWORD *)a3 + 72) = v70;
    long long v74 = *((_OWORD *)a2 + 39);
    long long v73 = *((_OWORD *)a2 + 40);
    uint64_t v75 = *(void *)((char *)a2 + 653);
    *((_OWORD *)a3 + 80) = *((_OWORD *)a2 + 38);
    *(void *)((char *)a3 + 1325) = v75;
    *((_OWORD *)a3 + 82) = v73;
    *((_OWORD *)a3 + 81) = v74;
    long long v76 = *((_OWORD *)a2 + 34);
    long long v77 = *((_OWORD *)a2 + 35);
    long long v78 = *((_OWORD *)a2 + 36);
    *((_OWORD *)a3 + 79) = *((_OWORD *)a2 + 37);
    unint64_t v88 = (uint64_t *)((char *)a4 + 72);
    uint64_t v89 = a4;
    *((_OWORD *)a3 + 78) = v78;
    *((_OWORD *)a3 + 77) = v77;
    *((_OWORD *)a3 + 76) = v76;
    char v79 = 1;
    do
    {
      char v91 = v79;
      float32x4_t v80 = (char *)v89 + 40 * v66;
      if (*((void *)v80 + 16)) {
        long long v81 = (uint64_t *)(v80 + 112);
      }
      else {
        long long v81 = v88;
      }
      re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)v101, v81);
      long long v82 = (void *)((char *)a3 + 672 * v66 + 272);
      re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(v82, v102);
      if (v102)
      {
        uint64_t v83 = v103;
        unint64_t v84 = v102 << 6;
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v96, (const re::DynamicString *)v83);
          re::DynamicString::DynamicString((re::DynamicString *)&v99, (const re::DynamicString *)(v83 + 32));
          if (v97) {
            unint64_t v85 = v98;
          }
          else {
            unint64_t v85 = (char *)&v97 + 1;
          }
          if (BYTE8(v99)) {
            char v86 = (const char *)v100;
          }
          else {
            char v86 = (char *)&v99 + 9;
          }
          re::DynamicString::DynamicString((re::DynamicString *)&v92, v85, a5);
          re::DynamicString::DynamicString((re::DynamicString *)&v94, v86, a5);
          v87.n128_f64[0] = re::DynamicArray<re::CameraView::PickupScopeLane>::add((uint64_t)v82, &v92);
          if ((void)v94)
          {
            if (BYTE8(v94)) {
              (*(void (**)(double))(*(void *)v94 + 40))(v87.n128_f64[0]);
            }
            __n128 v87 = 0uLL;
            long long v94 = 0u;
            long long v95 = 0u;
          }
          if (v92 && (v93 & 1) != 0) {
            (*(void (**)(__n128))(*(void *)v92 + 40))(v87);
          }
          if ((void)v99)
          {
            if (BYTE8(v99)) {
              (*(void (**)(__n128))(*(void *)v99 + 40))(v87);
            }
            __n128 v87 = 0uLL;
            long long v99 = 0u;
            long long v100 = 0u;
          }
          if (v96)
          {
            if (v97) {
              (*(void (**)(__n128))(*(void *)v96 + 40))(v87);
            }
          }
          v83 += 64;
          v84 -= 64;
        }
        while (v84);
      }
      a3 = v90;
      *((_DWORD *)v90 + 168 * v66 + 162) = *((_DWORD *)&qword_234386B10 + v66);
      uint64_t result = re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v101);
      char v79 = 0;
      uint64_t v66 = 1;
    }
    while ((v91 & 1) != 0);
  }
  else
  {
    if (*((void *)a4 + 16)) {
      long long v35 = (uint64_t *)((char *)a4 + 112);
    }
    else {
      long long v35 = (uint64_t *)((char *)a4 + 72);
    }
    re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)v101, v35);
    re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((void *)a2 + 34, v102);
    if (v102)
    {
      uint64_t v36 = v103;
      unint64_t v37 = v102 << 6;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v96, (const re::DynamicString *)v36);
        re::DynamicString::DynamicString((re::DynamicString *)&v99, (const re::DynamicString *)(v36 + 32));
        if (v97) {
          uint64_t v38 = v98;
        }
        else {
          uint64_t v38 = (char *)&v97 + 1;
        }
        if (BYTE8(v99)) {
          float32x4_t v39 = (const char *)v100;
        }
        else {
          float32x4_t v39 = (char *)&v99 + 9;
        }
        re::DynamicString::DynamicString((re::DynamicString *)&v92, v38, a5);
        re::DynamicString::DynamicString((re::DynamicString *)&v94, v39, a5);
        v40.n128_f64[0] = re::DynamicArray<re::CameraView::PickupScopeLane>::add((uint64_t)a2 + 272, &v92);
        if ((void)v94)
        {
          if (BYTE8(v94)) {
            (*(void (**)(double))(*(void *)v94 + 40))(v40.n128_f64[0]);
          }
          __n128 v40 = 0uLL;
          long long v94 = 0u;
          long long v95 = 0u;
        }
        if (v92 && (v93 & 1) != 0) {
          (*(void (**)(__n128))(*(void *)v92 + 40))(v40);
        }
        if ((void)v99)
        {
          if (BYTE8(v99)) {
            (*(void (**)(__n128))(*(void *)v99 + 40))(v40);
          }
          __n128 v40 = 0uLL;
          long long v99 = 0u;
          long long v100 = 0u;
        }
        if (v96 && (v97 & 1) != 0) {
          (*(void (**)(__n128))(*(void *)v96 + 40))(v40);
        }
        v36 += 64;
        v37 -= 64;
      }
      while (v37);
    }
    *((_DWORD *)a2 + 162) = 0;
    return re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v101);
  }
  return result;
}

uint64_t re::CameraMultiView::operator=(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = 0;
  do
  {
    char v6 = v4;
    uint64_t v7 = a1 + 672 * v5;
    uint64_t v8 = a2 + 672 * v5;
    re::DynamicString::operator=((re::DynamicString *)v7, (re::DynamicString *)v8);
    long long v9 = *(_OWORD *)(v8 + 32);
    long long v10 = *(_OWORD *)(v8 + 48);
    long long v11 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(v7 + 80) = v11;
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v10;
    long long v12 = *(_OWORD *)(v8 + 96);
    long long v13 = *(_OWORD *)(v8 + 112);
    long long v14 = *(_OWORD *)(v8 + 144);
    *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
    *(_OWORD *)(v7 + 144) = v14;
    *(_OWORD *)(v7 + 96) = v12;
    *(_OWORD *)(v7 + 112) = v13;
    long long v15 = *(_OWORD *)(v8 + 160);
    long long v16 = *(_OWORD *)(v8 + 176);
    long long v17 = *(_OWORD *)(v8 + 208);
    *(_OWORD *)(v7 + 192) = *(_OWORD *)(v8 + 192);
    *(_OWORD *)(v7 + 208) = v17;
    *(_OWORD *)(v7 + 160) = v15;
    *(_OWORD *)(v7 + 176) = v16;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v7 + 224, v8 + 224);
    *(_WORD *)(v7 + 264) = *(_WORD *)(v8 + 264);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v7 + 272, v8 + 272);
    *(_OWORD *)(v7 + 320) = *(_OWORD *)(v8 + 320);
    long long v19 = *(_OWORD *)(v8 + 352);
    long long v18 = *(_OWORD *)(v8 + 368);
    long long v20 = *(_OWORD *)(v8 + 336);
    *(void *)(v7 + 384) = *(void *)(v8 + 384);
    *(_OWORD *)(v7 + 352) = v19;
    *(_OWORD *)(v7 + 368) = v18;
    *(_OWORD *)(v7 + 336) = v20;
    *(unsigned char *)(v7 + 400) = *(unsigned char *)(v8 + 400);
    if (*(unsigned char *)(v7 + 401) || *(unsigned char *)(v8 + 401))
    {
      int v21 = (unsigned char *)(v7 + 401);
      if (!*(unsigned char *)(v7 + 401) || *(unsigned char *)(v8 + 401))
      {
        if (*(unsigned char *)(v7 + 401) || !*(unsigned char *)(v8 + 401))
        {
          *(unsigned char *)(a1 + 672 * v5 + 402) = *(unsigned char *)(a2 + 672 * v5 + 402);
        }
        else
        {
          unsigned char *v21 = 1;
          *(unsigned char *)(a1 + 672 * v5 + 402) = *(unsigned char *)(a2 + 672 * v5 + 402);
        }
      }
      else
      {
        unsigned char *v21 = 0;
      }
    }
    uint64_t v22 = a1 + 672 * v5;
    int v23 = *(unsigned __int8 *)(v22 + 404);
    if (*(unsigned char *)(v22 + 404) || *(unsigned char *)(a2 + 672 * v5 + 404))
    {
      long long v24 = (unsigned char *)(v22 + 404);
      if (!v23 || *(unsigned char *)(a2 + 672 * v5 + 404))
      {
        if (v23 || !*(unsigned char *)(a2 + 672 * v5 + 404))
        {
          *(_DWORD *)(a1 + 672 * v5 + 408) = *(_DWORD *)(a2 + 672 * v5 + 408);
        }
        else
        {
          *long long v24 = 1;
          *(_DWORD *)(a1 + 672 * v5 + 408) = *(_DWORD *)(a2 + 672 * v5 + 408);
        }
      }
      else
      {
        *long long v24 = 0;
      }
    }
    uint64_t v25 = a1 + 672 * v5;
    uint64_t v26 = a2 + 672 * v5;
    long long v27 = *(_OWORD *)(v26 + 416);
    long long v28 = *(_OWORD *)(v26 + 432);
    long long v29 = *(_OWORD *)(v26 + 464);
    *(_OWORD *)(v25 + 448) = *(_OWORD *)(v26 + 448);
    *(_OWORD *)(v25 + 464) = v29;
    *(_OWORD *)(v25 + 416) = v27;
    *(_OWORD *)(v25 + 432) = v28;
    long long v30 = *(_OWORD *)(v26 + 480);
    long long v31 = *(_OWORD *)(v26 + 496);
    long long v32 = *(_OWORD *)(v26 + 528);
    *(_OWORD *)(v25 + 512) = *(_OWORD *)(v26 + 512);
    *(_OWORD *)(v25 + 528) = v32;
    *(_OWORD *)(v25 + 480) = v30;
    *(_OWORD *)(v25 + 496) = v31;
    long long v34 = *(_OWORD *)(v26 + 624);
    long long v33 = *(_OWORD *)(v26 + 640);
    long long v35 = *(_OWORD *)(v26 + 608);
    *(void *)(v25 + 653) = *(void *)(v26 + 653);
    *(_OWORD *)(v25 + 624) = v34;
    *(_OWORD *)(v25 + 640) = v33;
    *(_OWORD *)(v25 + 608) = v35;
    long long v36 = *(_OWORD *)(v26 + 544);
    long long v37 = *(_OWORD *)(v26 + 560);
    long long v38 = *(_OWORD *)(v26 + 592);
    *(_OWORD *)(v25 + 576) = *(_OWORD *)(v26 + 576);
    *(_OWORD *)(v25 + 592) = v38;
    *(_OWORD *)(v25 + 544) = v36;
    *(_OWORD *)(v25 + 560) = v37;
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v6 & 1) == 0);
  *(_WORD *)(a1 + 1344) = *(_WORD *)(a2 + 1344);
  return a1;
}

uint64_t re::DynamicArray<re::CameraMultiView>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::CameraMultiView>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::CameraMultiView::CameraMultiView(*((void *)this + 4) + 1360 * v4, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

double re::DynamicArray<re::CameraView::PickupScopeLane>::add(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  unint64_t v11 = *(void *)(a1 + 32) + (v5 << 6);
  double result = 0.0;
  *(_OWORD *)unint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(v11 + 24) = a2[3];
  uint64_t v13 = a2[1];
  *(void *)unint64_t v11 = *a2;
  *a2 = 0;
  uint64_t v14 = a2[2];
  a2[3] = 0;
  uint64_t v16 = *(void *)(v11 + 8);
  uint64_t v15 = *(void *)(v11 + 16);
  *(void *)(v11 + 8) = v13;
  *(void *)(v11 + 16) = v14;
  a2[1] = v16;
  a2[2] = v15;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(void *)(v11 + 56) = a2[7];
  uint64_t v17 = a2[5];
  *(void *)(v11 + 32) = a2[4];
  a2[4] = 0;
  uint64_t v18 = a2[6];
  a2[7] = 0;
  uint64_t v20 = *(void *)(v11 + 40);
  uint64_t v19 = *(void *)(v11 + 48);
  *(void *)(v11 + 40) = v17;
  *(void *)(v11 + 48) = v18;
  a2[5] = v20;
  a2[6] = v19;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

double anonymous namespace'::updateOneViewPerFrameData<re::ecs2::PerspectiveCameraComponent>(re::RenderManager &,unsigned long,re::ecs2::CameraViewDescriptorsComponent *,re::ecs2::PerspectiveCameraComponent *,re::CameraView *,re::CameraMultiView *)::{lambda(re::CameraView&,re::ecs2::PerspectiveCameraComponent*,re::CameraEye)#1}::operator()(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = a4;
  long long v7 = *a1;
  long long v8 = a1[1];
  long long v9 = a1[3];
  *(_OWORD *)(a2 + 448) = a1[2];
  *(_OWORD *)(a2 + 464) = v9;
  *(_OWORD *)(a2 + 416) = v7;
  *(_OWORD *)(a2 + 432) = v8;
  unint64_t v10 = (float32x4_t *)(a2 + 32);
  re::ecs2::PerspectiveCameraComponent::calculateWorldPose(a3, a4, (uint64_t)v45);
  long long v12 = v45[0];
  long long v11 = v45[1];
  *(_OWORD *)(a2 + 32) = v45[0];
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 128) = v12;
  *(_OWORD *)(a2 + 144) = v11;
  if (*(unsigned char *)(a3 + 176))
  {
    *(unsigned char *)(a2 + 92) = 1;
    *(unsigned char *)(a2 + 188) = 1;
    float32x4_t v41 = *(float32x4_t *)(a3 + 192);
    float32x4_t v42 = vmulq_n_f32(v41, -v41.f32[3]);
    re::RenderCamera::computeInverseTransform(v10, (uint64_t)&v47);
    float32x4_t v13 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v41.f32[0]), v48, *(float32x2_t *)v41.f32, 1), v49, v41, 2);
    int32x4_t v14 = (int32x4_t)vmulq_f32(v13, v13);
    v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
    float32x2_t v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
    float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
    float32x4_t v17 = vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
    float32x4_t v18 = vaddq_f32(v50, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v42.f32[0]), v48, *(float32x2_t *)v42.f32, 1), v49, v42, 2));
    float32x4_t v19 = vmulq_f32(v17, vdivq_f32(v18, (float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3)));
    v17.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
    *(float32x4_t *)(a2 + 96) = v17;
    re::RenderCamera::computeInverseTransform((float32x4_t *)(a2 + 128), (uint64_t)&v47);
    float32x4_t v20 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v41.f32[0]), v48, *(float32x2_t *)v41.f32, 1), v49, v41, 2);
    int32x4_t v21 = (int32x4_t)vmulq_f32(v20, v20);
    v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
    float32x2_t v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    float32x2_t v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
    float32x4_t v24 = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
    float32x4_t v25 = vaddq_f32(v50, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v42.f32[0]), v48, *(float32x2_t *)v42.f32, 1), v49, v42, 2));
    float32x4_t v26 = vmulq_f32(v24, vdivq_f32(v25, (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 3)));
    v24.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
    *(float32x4_t *)(a2 + 192) = v24;
  }
  long long v27 = (float32x4_t *)(a3 + ((unint64_t)(v4 == 2) << 6));
  long long v28 = v27 + 3;
  float32x4_t v29 = v27[3];
  float32x4_t v30 = v27[4];
  float32x4_t v31 = v27[6];
  *(float32x4_t *)(a2 + 608) = v27[5];
  *(float32x4_t *)(a2 + 624) = v31;
  *(float32x4_t *)(a2 + 576) = v29;
  *(float32x4_t *)(a2 + 592) = v30;
  re::Projection::computeMatrix4x4F((re::Projection *)(a2 + 64), (uint64_t)v44);
  re::RenderCamera::computeInverseTransform(v10, (uint64_t)v43);
  uint64_t v32 = 0;
  float32x4_t v33 = (float32x4_t)v44[0];
  float32x4_t v34 = (float32x4_t)v44[1];
  float32x4_t v35 = (float32x4_t)v44[2];
  float32x4_t v36 = (float32x4_t)v44[3];
  v46[0] = v43[0];
  v46[1] = v43[1];
  v46[2] = v43[2];
  v46[3] = v43[3];
  do
  {
    *(float32x4_t *)((char *)&v47 + v32 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, COERCE_FLOAT(v46[v32])), v34, *(float32x2_t *)&v46[v32], 1), v35, (float32x4_t)v46[v32], 2), v36, (float32x4_t)v46[v32], 3);
    ++v32;
  }
  while (v32 != 4);
  double result = *(double *)v47.i64;
  float32x4_t v38 = v48;
  float32x4_t v39 = v49;
  float32x4_t v40 = v50;
  *long long v28 = v47;
  v28[1] = v38;
  v28[2] = v39;
  v28[3] = v40;
  return result;
}

uint64_t re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity(void *a1, uint64_t a2)
{
  if (*a1 <= 1uLL) {
    return 1;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *re::ecs2::allocInfo_AdaptiveResolutionComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_231, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_231))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF883C8, "AdaptiveResolutionComponent");
    __cxa_guard_release(&_MergedGlobals_231);
  }
  return &unk_26AF883C8;
}

void re::ecs2::initInfo_AdaptiveResolutionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xB5AB72FA376B5E76;
  v9[1] = "AdaptiveResolutionComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF883A0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF883A0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88398 = v7;
      __cxa_guard_release(&qword_26AF883A0);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF88398;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E6AE0;
}

void *re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E6AE0;
}

void *re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AdaptiveResolutionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AdaptiveResolutionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AdaptiveResolutionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AdaptiveResolutionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AdaptiveResolutionComponent>, this);
}

void *re::ecs2::allocInfo_AdaptiveResolutionStateComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF883A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF883A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88440, "AdaptiveResolutionStateComponent");
    __cxa_guard_release(&qword_26AF883A8);
  }
  return &unk_26AF88440;
}

void re::ecs2::initInfo_AdaptiveResolutionStateComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x1125A55C2DBA5FDCLL;
  v13[1] = "AdaptiveResolutionStateComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF883B0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF883B0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF883B8 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "pixelsPerMeter";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF883C0 = v11;
      __cxa_guard_release(&qword_26AF883B0);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF883B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionStateComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionStateComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionStateComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionStateComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionStateComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E6C80;
  *(_DWORD *)(v3 + 28) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionStateComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionStateComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E6C80;
  *(_DWORD *)(v1 + 28) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionStateComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AdaptiveResolutionStateComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AdaptiveResolutionStateComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AdaptiveResolutionStateComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AdaptiveResolutionStateComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AdaptiveResolutionStateComponent>, this);
}

void *re::ecs2::allocInfo_VideoAudioControlComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_232, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_232))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF884D8, "VideoAudioControlComponent");
    __cxa_guard_release(&_MergedGlobals_232);
  }
  return &unk_26AF884D8;
}

void re::ecs2::initInfo_VideoAudioControlComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x700C00A660220CF6;
  v9[1] = "VideoAudioControlComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF884C8, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF884C8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF884C0 = v7;
      __cxa_guard_release(&qword_26AF884C8);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF884C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoAudioControlComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoAudioControlComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoAudioControlComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoAudioControlComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::VideoAudioControlComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6BB8;
  *(_DWORD *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoAudioControlComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::VideoAudioControlComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F6BB8;
  *(_DWORD *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoAudioControlComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoAudioControlComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoAudioControlComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoAudioControlComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoAudioControlComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoAudioControlComponent>, this);
}

void *re::ecs2::allocInfo_VideoAudioControlSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF884D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF884D0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88550, "VideoAudioControlSystem");
    __cxa_guard_release(&qword_26AF884D0);
  }
  return &unk_26AF88550;
}

void re::ecs2::initInfo_VideoAudioControlSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x731113394ED252E2;
  v5[1] = "VideoAudioControlSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_VideoAudioControlSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoAudioControlSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoAudioControlSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::VideoAudioControlSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::VideoAudioControlSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoAudioControlSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoAudioControlSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::VideoAudioControlSystem *re::internal::defaultConstruct<re::ecs2::VideoAudioControlSystem>(int a1, int a2, re::ecs2::VideoAudioControlSystem *this)
{
  return re::ecs2::VideoAudioControlSystem::VideoAudioControlSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::VideoAudioControlSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::internal::destroyPersistent<re::ecs2::AudioComponentForwarder>(*(re **)(a3 + 104));
  *(void *)(a3 + 104) = 0;
  *(void *)a3 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::VideoAudioControlSystem>(uint64_t a1)
{
  re::internal::destroyPersistent<re::ecs2::AudioComponentForwarder>(*(re **)(a1 + 104));
  *(void *)(a1 + 104) = 0;
  *(void *)a1 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_VideoAudioControlSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoAudioControlSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoAudioControlSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoAudioControlSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoAudioControlSystem>, this);
}

id re::ecs2::VideoAudioControlComponent::ControlInfo::label(id *this)
{
  if (*(_DWORD *)this) {
    return this[1];
  }
  else {
    return 0;
  }
}

void re::ecs2::VideoAudioControlComponent::setDeferToSystemAcousticTuning(re::ecs2::VideoAudioControlComponent *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    if (*((_DWORD *)this + 8) == 1)
    {
      uint64_t v6 = *((void *)this + 6);
      uint64_t v2 = *(re::ecs2::NetworkComponent **)(v1 + 200);
      uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v3)
      {
        long long v4 = (const re::ecs2::Component *)v3;
        uint64_t v5 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v3 + 32, &v6);
        if (v5)
        {
          if (*(unsigned char *)(v5 + 256))
          {
            *(unsigned char *)(v5 + 256) = 0;
            re::ecs2::Component::markDirty(v4);
            if (v2) {
              re::ecs2::NetworkComponent::markDirty(v2, v4);
            }
          }
        }
      }
    }
  }
}

re::ecs2::VideoAudioControlSystem *re::ecs2::VideoAudioControlSystem::VideoAudioControlSystem(re::ecs2::VideoAudioControlSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E6FFA88;
  uint64_t v3 = re::globalAllocators(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 48, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 0;
  *(void *)(v4 + 36) = 0x7FFFFFFFLL;
  *((void *)this + 13) = v4;
  return this;
}

re *re::internal::destroyPersistent<re::ecs2::AudioComponentForwarder>(re *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit(v1);
    v3.n128_f64[0] = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit(v1);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t *, __n128))(*(void *)v2 + 40);
    return (re *)v4(v2, v1, v3);
  }
  return result;
}

void re::ecs2::VideoAudioControlSystem::~VideoAudioControlSystem(re **this)
{
  this[13] = 0;
  *this = (re *)&unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  re::internal::destroyPersistent<re::ecs2::AudioComponentForwarder>(this[13]);
  this[13] = 0;
  *this = (re *)&unk_26E6DECE0;
  objc_destructInstance(this + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::ecs2::VideoAudioControlSystem::willAddSceneToECSService(re::ecs2::VideoAudioControlSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2)
  {
    __n128 v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    uint64_t v7 = this;
    long long v8 = re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoComponent>;
    uint64_t v9 = 0;
    long long v10 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 392), (uint64_t)&v7);
    uint64_t v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    uint64_t v7 = this;
    long long v8 = re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoPlayerComponent>;
    uint64_t v9 = 0;
    long long v10 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 392), (uint64_t)&v7);
  }
  return result;
}

void re::ecs2::VideoAudioControlSystem::willRemoveSceneFromECSService(re::ecs2::VideoAudioControlSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    __n128 v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v6 = this;
    *((void *)&v6 + 1) = re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoComponent>;
    uint64_t v7 = 0;
    long long v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 392, &v6);
    uint64_t v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v6 = this;
    *((void *)&v6 + 1) = re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoPlayerComponent>;
    uint64_t v7 = 0;
    long long v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 392, &v6);
  }
}

uint64_t re::ecs2::VideoAudioControlSystem::getVideoAudioControlComponentUnderneathParent(uint64_t this, re::ecs2::Entity *a2)
{
  if (this)
  {
    v7[0] = 0x731113391DD5364ALL;
    v7[1] = "VideoAudioControlEntity";
    uint64_t v2 = *(void *)(this + 328);
    if (v2)
    {
      __n128 v3 = *(uint64_t **)(this + 344);
      uint64_t v4 = 8 * v2;
      while (1)
      {
        uint64_t v5 = *v3;
        if ((*(void *)(*v3 + 272) ^ 0x731113391DD5364AuLL) <= 1)
        {
          long long v6 = *(char **)(v5 + 280);
          if (v6 == "VideoAudioControlEntity" || !strcmp(v6, "VideoAudioControlEntity")) {
            break;
          }
        }
        ++v3;
        v4 -= 8;
        if (!v4) {
          goto LABEL_8;
        }
      }
      re::StringID::destroyString((re::StringID *)v7);
      return re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    }
    else
    {
LABEL_8:
      re::StringID::destroyString((re::StringID *)v7);
      return 0;
    }
  }
  return this;
}

void re::ecs2::VideoAudioControlSystem::ignoreCreateOrCleanUpComponentForAudioControl(uint64_t a1, uint64_t a2, unsigned char *a3, char **a4)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  long long v8 = (id **)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(a3 + 8));
  if (v8)
  {
    uint64_t v9 = v8;
    long long v10 = re::VideoAsset::getAVPlayer(v8);
    uint64_t v11 = v10;
    if (!v10)
    {
LABEL_80:

      return;
    }
    unint64_t v12 = v10;
    float32x4_t v13 = (void *)v12;
    unint64_t v14 = v12 ^ (v12 >> 30);
    if (*(void *)a2)
    {
      unint64_t v15 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
      uint64_t v16 = *(unsigned int *)(*(void *)(a2 + 8) + 4 * ((v15 ^ (v15 >> 31)) % *(unsigned int *)(a2 + 24)));
      if (v16 != 0x7FFFFFFF)
      {
        uint64_t v20 = *(void *)(a2 + 16);
        if (*(void *)(v20 + 80 * v16 + 16) == v12)
        {
LABEL_13:
          uint64_t v21 = v20 + 80 * v16 + 24;
LABEL_29:

          float32x4_t v35 = *a4;
          float32x4_t v34 = a4[1];
          if (v34)
          {
            uint64_t v36 = 8 * (void)v34;
            long long v37 = *a4;
            while (*(void *)v37 != *(void *)a3)
            {
              v37 += 8;
              v36 -= 8;
              if (!v36)
              {
                long long v37 = &v35[8 * (void)v34];
                break;
              }
            }
          }
          else
          {
            long long v37 = *a4;
          }
          uint64_t v38 = v37 - v35;
          uint64_t v39 = *(void *)a3;
          if (v34 != (char *)(v38 >> 3)) {
            goto LABEL_48;
          }
          uint64_t v40 = *(void *)(v39 + 16);
          if (!v40) {
            goto LABEL_48;
          }
          if ((*(unsigned char *)(v40 + 288) & 1) == 0) {
            goto LABEL_48;
          }
          uint64_t v41 = *(void *)(v39 + 16);
          do
          {
            uint64_t v42 = v41;
            uint64_t v41 = *(void *)(v41 + 24);
          }
          while (v41);
          BOOL v43 = *(void *)(v42 + 16) && a3[32] == 0;
          if (v43 && *(_DWORD *)(v21 + 40) != 2)
          {
            VideoAudioControlComponentUnderneathParent = (_anonymous_namespace_ *)re::ecs2::VideoAudioControlSystem::getVideoAudioControlComponentUnderneathParent(v40, v33);
            uint64_t v54 = (uint64_t)VideoAudioControlComponentUnderneathParent;
            if (!VideoAudioControlComponentUnderneathParent)
            {
              uint64_t v55 = *(void *)(*(void *)a3 + 16);
              *(void *)buf = 0x731113391DD5364ALL;
              *(void *)&buf[8] = "VideoAudioControlEntity";
              long long v56 = re::ecs2::EntityChildCollection::getOrAdd((re::ecs2::EntityChildCollection *)(v55 + 304), (const re::StringID *)buf);
              re::StringID::destroyString((re::StringID *)buf);
              *((_DWORD *)v56 + 72) |= 0x1400u;
              if (!*((void *)v56 + 25)) {
                re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v56 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              }
              if (!*((void *)v56 + 30)) {
                re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v56 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              }
              uint64_t v54 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v56 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              re::ecs2::AudioComponentForwarder::forwardAudioComponentState(*(re::ecs2::AudioComponentForwarder **)(a1 + 104), v55, v56);
            }
            unint64_t v58 = *(void *)(v21 + 8);
            unint64_t v57 = *(void *)(v21 + 16);
            if (v57 >= v58)
            {
              unint64_t v59 = v57 + 1;
              if (v58 < v57 + 1)
              {
                if (*(void *)v21)
                {
                  unint64_t v60 = 2 * v58;
                  if (!v58) {
                    unint64_t v60 = 8;
                  }
                  if (v60 <= v59) {
                    unint64_t v61 = v59;
                  }
                  else {
                    unint64_t v61 = v60;
                  }
                  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v21, v61);
                }
                else
                {
                  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v21, v59);
                  ++*(_DWORD *)(v21 + 24);
                }
              }
              unint64_t v57 = *(void *)(v21 + 16);
            }
            long long v67 = (uint64_t *)(*(void *)(v21 + 32) + 16 * v57);
            *long long v67 = v54;
            v67[1] = (uint64_t)v9;
            *(void *)(v21 + 16) = v57 + 1;
            ++*(_DWORD *)(v21 + 24);
          }
          else
          {
LABEL_48:
            unint64_t v45 = *(void *)(v39 + 16);
            uint64_t v46 = re::ecs2::VideoAudioControlSystem::getVideoAudioControlComponentUnderneathParent(v45, v33);
            if (v46)
            {
              uint64_t v47 = v46;
              re::ecs2::AudioComponentForwarder::stopForwardingAudioComponentState(*(re::ecs2::AudioComponentForwarder **)(a1 + 104), v45, *(re::ecs2::Entity **)(v46 + 16));
              float32x4_t v48 = (_DWORD *)(v47 + 32);
              if (*(_DWORD *)(v47 + 32) == 1)
              {
                float32x4_t v49 = *(void **)(v47 + 16);
                float32x4_t v50 = (re::ecs2::AudioPlayerComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v49 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (v50)
                {
                  long long v51 = v50;
                  unint64_t v52 = *v48 ? *(void *)(v47 + 48) : 0;
                  re::ecs2::AudioPlayerComponent::destroy(v50, v52);
                  float32x4_t v50 = (re::ecs2::AudioPlayerComponent *)v49[25];
                  if (v50) {
                    re::ecs2::NetworkComponent::markDirty(v50, v51);
                  }
                }
                long long v62 = *re::audioLogObjects(v50);
                if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                {
                  if (*v48) {
                    uint64_t v63 = *(void *)(v47 + 48);
                  }
                  else {
                    uint64_t v63 = 0;
                  }
                  long long v64 = v62;
                  long long v65 = re::ecs2::VideoAudioControlComponent::ControlInfo::label((id *)(v47 + 32));
                  uint64_t v66 = v49[35];
                  *(_DWORD *)buf = 134218754;
                  *(void *)&buf[4] = v63;
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v65;
                  __int16 v71 = 2048;
                  uint64_t v72 = v47;
                  __int16 v73 = 2080;
                  uint64_t v74 = v66;
                  _os_log_impl(&dword_233120000, v64, OS_LOG_TYPE_DEFAULT, "Cleaning up audio token %llu for label %@ in VideoAudioControlComponent@%p on entity %s", buf, 0x2Au);
                }
                *float32x4_t v48 = 0;
              }
            }
          }
          goto LABEL_80;
        }
        while (1)
        {
          LODWORD(v16) = *(_DWORD *)(v20 + 80 * v16 + 8) & 0x7FFFFFFF;
          if (v16 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v20 + 80 * v16 + 16) == v12) {
            goto LABEL_13;
          }
        }
      }
    }
    uint64_t v69 = a1;
    id v17 = [(id)v12 _STSLabel];
    float32x4_t v18 = v17;
    if (v17)
    {
      if ([v17 hasPrefix:@"REVideoAudioControl:"]) {
        int v19 = 1;
      }
      else {
        int v19 = 2;
      }
      int v68 = v19;
    }
    else
    {
      int v68 = 0;
    }

    unint64_t v22 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
    unint64_t v23 = v22 ^ (v22 >> 31);
    if (*(void *)a2)
    {
      unint64_t v24 = v23 % *(unsigned int *)(a2 + 24);
      uint64_t v25 = *(unsigned int *)(*(void *)(a2 + 8) + 4 * v24);
      if (v25 != 0x7FFFFFFF)
      {
        uint64_t v26 = *(void *)(a2 + 16);
        if (*(void **)(v26 + 80 * v25 + 16) == v13)
        {
LABEL_20:
          uint64_t v21 = v26 + 80 * v25 + 24;
LABEL_28:

          a1 = v69;
          goto LABEL_29;
        }
        while (1)
        {
          LODWORD(v25) = *(_DWORD *)(v26 + 80 * v25 + 8) & 0x7FFFFFFF;
          if (v25 == 0x7FFFFFFF) {
            break;
          }
          if (*(void **)(v26 + 80 * v25 + 16) == v13) {
            goto LABEL_20;
          }
        }
      }
    }
    else
    {
      LODWORD(v24) = 0;
    }
    uint64_t v27 = *(unsigned int *)(a2 + 36);
    if (v27 == 0x7FFFFFFF)
    {
      uint64_t v27 = *(unsigned int *)(a2 + 32);
      int v28 = v27;
      if (v27 == *(_DWORD *)(a2 + 24))
      {
        re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::setCapacity(a2, 2 * *(_DWORD *)(a2 + 28));
        LODWORD(v24) = v23 % *(unsigned int *)(a2 + 24);
        int v28 = *(_DWORD *)(a2 + 32);
      }
      *(_DWORD *)(a2 + 32) = v28 + 1;
      uint64_t v29 = *(void *)(a2 + 16);
      int v30 = *(_DWORD *)(v29 + 80 * v27 + 8);
    }
    else
    {
      uint64_t v29 = *(void *)(a2 + 16);
      int v30 = *(_DWORD *)(v29 + 80 * v27 + 8);
      *(_DWORD *)(a2 + 36) = v30 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v29 + 80 * v27 + 8) = v30 | 0x80000000;
    *(_DWORD *)(*(void *)(a2 + 16) + 80 * v27 + 8) = *(_DWORD *)(*(void *)(a2 + 16) + 80 * v27 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a2 + 8) + 4 * v24);
    *(void *)(*(void *)(a2 + 16) + 80 * v27) = v23;
    uint64_t v31 = *(void *)(a2 + 16) + 80 * v27;
    *(void *)(v31 + 16) = v13;
    uint64_t v32 = *(void *)(a2 + 16) + 80 * v27;
    *(void *)(v32 + 56) = 0;
    *(_DWORD *)(v32 + 48) = 0;
    *(void *)(v32 + 32) = 0;
    *(void *)(v32 + 40) = 0;
    *(void *)(v32 + 24) = 0;
    *(_DWORD *)(v32 + 64) = v68;
    *(void *)(v32 + 72) = v18;
    *(_DWORD *)(*(void *)(a2 + 8) + 4 * v24) = v27;
    ++*(_DWORD *)(a2 + 28);
    ++*(_DWORD *)(a2 + 40);
    uint64_t v21 = *(void *)(a2 + 16) + 80 * v27 + 24;
    goto LABEL_28;
  }
}

void re::ecs2::VideoAudioControlSystem::updateAudioControllersForAllVideoAssetsInScene(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if ((uint64_t v5 = (re::ecs2::SceneComponentTable *)(a2 + 200),
          (long long v6 = (_anonymous_namespace_ *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) != 0)&& *((void *)v6 + 3)|| (long long v6 = (_anonymous_namespace_ *)re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) != 0&& *((void *)v6 + 3))
    {
      unsigned int v99 = 0;
      long long v97 = 0u;
      long long v98 = 0u;
      uint64_t v100 = 0x7FFFFFFFLL;
      uint64_t v7 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 24);
        if (v8)
        {
          uint64_t v9 = *(uint64_t **)(v7 + 40);
          uint64_t v10 = 8 * v8;
          do
          {
            uint64_t v11 = *v9++;
            *(void *)__buf = v11;
            re::AssetHandle::AssetHandle((re::AssetHandle *)&__buf[8], (const re::AssetHandle *)(v11 + 168));
            char v107 = *(unsigned char *)(v11 + 291);
            re::ecs2::VideoAudioControlSystem::ignoreCreateOrCleanUpComponentForAudioControl(a1, (uint64_t)&v97, __buf, a3);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&__buf[8]);
            v10 -= 8;
          }
          while (v10);
        }
      }
      unint64_t v12 = (re *)re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v12)
      {
        uint64_t v13 = *((void *)v12 + 3);
        if (v13)
        {
          unint64_t v14 = (uint64_t *)*((void *)v12 + 5);
          uint64_t v15 = 8 * v13;
          do
          {
            uint64_t v16 = *v14++;
            *(void *)__buf = v16;
            re::AssetHandle::AssetHandle((re::AssetHandle *)&__buf[8], (const re::AssetHandle *)(v16 + 40));
            char v107 = 0;
            re::ecs2::VideoAudioControlSystem::ignoreCreateOrCleanUpComponentForAudioControl(a1, (uint64_t)&v97, __buf, a3);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&__buf[8]);
            v15 -= 8;
          }
          while (v15);
        }
      }
      uint64_t v90 = a1;
      if (v99)
      {
        uint64_t v17 = 0;
        float32x4_t v18 = (int *)(v98 + 8);
        while (1)
        {
          int v19 = *v18;
          v18 += 20;
          if (v19 < 0) {
            break;
          }
          if (v99 == ++v17)
          {
            LODWORD(v17) = v99;
            break;
          }
        }
      }
      else
      {
        LODWORD(v17) = 0;
      }
      if (v99 != v17)
      {
        uint64_t v20 = v17;
        uint64_t v21 = v98;
        uint64_t v87 = v98;
        unsigned int v88 = v99;
        while (1)
        {
          int v89 = v17;
          uint64_t v22 = v21 + 80 * v20;
          long long v95 = (id *)(v22 + 16);
          uint64_t v23 = *(void *)(v22 + 40);
          if (v23) {
            break;
          }
          if (*(_DWORD *)(v21 + 80 * v20 + 64) == 1)
          {
            float32x4_t v80 = *re::audioLogObjects(v12);
            if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
            {
              id v81 = *v95;
              long long v82 = v80;
              uint64_t v83 = [v81 _STSLabel];
              *(_DWORD *)__buf = 138412290;
              *(void *)&__buf[4] = v83;
              _os_log_impl(&dword_233120000, v82, OS_LOG_TYPE_DEFAULT, "clearing label %@ for uncontrolled player", __buf, 0xCu);
            }
            unint64_t v12 = (re *)[*v95 _setSTSLabel:0];
          }
LABEL_83:
          int v84 = v89;
          uint64_t v21 = v87;
          if (v88 <= v89 + 1) {
            unsigned int v85 = v89 + 1;
          }
          else {
            unsigned int v85 = v88;
          }
          while (1)
          {
            uint64_t v20 = (v84 + 1);
            if (v85 - 1 == v84) {
              break;
            }
            ++v84;
            unsigned int v86 = v20;
            if ((*(_DWORD *)(v87 + 80 * v20 + 8) & 0x80000000) != 0) {
              goto LABEL_90;
            }
          }
          unsigned int v86 = v85;
LABEL_90:
          LODWORD(v17) = v86;
          if (v88 == v86) {
            goto LABEL_91;
          }
        }
        unint64_t v24 = *(uint64_t **)(v22 + 56);
        uint64_t v91 = *(void *)(v22 + 40);
        uint64_t v25 = v21 + 80 * v20;
        char v93 = (int *)(v25 + 64);
        long long v94 = &v24[2 * v23];
        uint64_t v92 = (id *)(v25 + 72);
        while (1)
        {
          uint64_t v27 = *v24;
          uint64_t v26 = v24[1];
          id v28 = *v95;
          int v29 = *v93;
          id v30 = *v92;
          id v31 = v28;
          uint64_t v96 = v26;
          if (*(_DWORD *)(v27 + 32) == 1)
          {
            uint64_t v32 = re::ecs2::VideoAudioControlComponent::ControlInfo::label((id *)(v27 + 32));
          }
          else
          {
            float32x4_t v33 = NSString;
            *(void *)__buf = 0;
            do
              arc4random_buf(__buf, 8uLL);
            while (*(void *)__buf < 0x3E8uLL);
            float32x4_t v34 = [v33 stringWithFormat:@"%@%llx", @"REVideoAudioControl:", *(void *)__buf];
            uint64_t v35 = *(void *)(v27 + 16);
            uint64_t v36 = (re::ecs2::AudioPlayerComponent *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v35 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            uint64_t v37 = re::ecs2::AudioPlayerComponent::prepare(v36, v34);
            uint64_t v38 = *(re::ecs2::NetworkComponent **)(v35 + 200);
            if (v38) {
              re::ecs2::NetworkComponent::markDirty(v38, v36);
            }
            uint64_t v39 = v34;
            uint64_t v40 = v39;
            if (v39 && v37)
            {
              int v41 = 1;
            }
            else
            {
              uint64_t v42 = *re::audioLogObjects(v39);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__buf = 134218242;
                *(void *)&__buf[4] = v37;
                __int16 v103 = 2112;
                int v104 = v40;
                _os_log_error_impl(&dword_233120000, v42, OS_LOG_TYPE_ERROR, "invalid control info %llu, %@", __buf, 0x16u);
              }
              int v41 = 0;
            }

            *(_DWORD *)(v27 + 32) = v41;
            objc_storeStrong((id *)(v27 + 40), v34);
            *(void *)(v27 + 48) = v37;

            uint64_t v32 = re::ecs2::VideoAudioControlComponent::ControlInfo::label((id *)(v27 + 32));
          }
          if (!v29) {
            break;
          }
          if (v91 == 1 && v29 == 1)
          {
            long long v44 = (re *)[v32 isEqualToString:v30];
            if ((v44 & 1) == 0)
            {
              unint64_t v45 = *re::audioLogObjects(v44);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v46 = (re *)v30;
                *(_DWORD *)__buf = 134218498;
                *(void *)&__buf[4] = v90;
                __int16 v103 = 2112;
                int v104 = v46;
                __int16 v105 = 2112;
                uint64_t v106 = v32;
                uint64_t v47 = v45;
                _os_log_impl(&dword_233120000, v47, OS_LOG_TYPE_DEFAULT, "VideoAudioControlComponent@%p overwriting AVPlayer's existing STS label %@ to %@", __buf, 0x20u);
              }
LABEL_45:
              [v31 _setSTSLabel:v32];
            }
          }
          uint64_t v49 = *(void *)(v27 + 16);
          uint64_t v50 = *(unsigned __int16 *)(v49 + 82);
          if (*(_WORD *)(v49 + 82))
          {
            long long v51 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            unint64_t v52 = *(int16x8_t **)(v49 + 88);
            int16x8_t v53 = vld1q_dup_s16(v51);
            int v54 = 1;
            uint64_t v55 = v52;
            uint64_t v56 = *(unsigned __int16 *)(v49 + 82);
            while (1)
            {
              uint16x8_t v57 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v53, *v55), (int8x16_t)xmmword_23436BBD0);
              v57.i16[0] = vmaxvq_u16(v57);
              if (v57.i32[0]) {
                break;
              }
              v54 -= 8;
              ++v55;
              if (!--v56) {
                goto LABEL_52;
              }
            }
            if (v57.u16[0] - v54 < *(unsigned __int16 *)(v49 + 80))
            {
LABEL_62:
              re::ecs2::VideoAudioControlComponent::setDeferToSystemAcousticTuning((re::ecs2::VideoAudioControlComponent *)v27);
              goto LABEL_77;
            }
LABEL_52:
            unint64_t v58 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            int16x8_t v59 = vld1q_dup_s16(v58);
            int v60 = 1;
            unint64_t v61 = *(int16x8_t **)(v49 + 88);
            uint64_t v62 = *(unsigned __int16 *)(v49 + 82);
            while (1)
            {
              uint16x8_t v63 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v59, *v61), (int8x16_t)xmmword_23436BBD0);
              v63.i16[0] = vmaxvq_u16(v63);
              if (v63.i32[0]) {
                break;
              }
              v60 -= 8;
              ++v61;
              if (!--v62) {
                goto LABEL_57;
              }
            }
            if (v63.u16[0] - v60 < *(unsigned __int16 *)(v49 + 80)) {
              goto LABEL_62;
            }
LABEL_57:
            long long v64 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            int16x8_t v65 = vld1q_dup_s16(v64);
            int v66 = 1;
            while (1)
            {
              uint16x8_t v67 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v65, *v52), (int8x16_t)xmmword_23436BBD0);
              v67.i16[0] = vmaxvq_u16(v67);
              if (v67.i32[0]) {
                break;
              }
              v66 -= 8;
              ++v52;
              if (!--v50) {
                goto LABEL_63;
              }
            }
            if (v67.u16[0] - v66 < *(unsigned __int16 *)(v49 + 80)) {
              goto LABEL_62;
            }
          }
LABEL_63:
          re::ecs2::VideoAudioControlComponent::setDeferToSystemAcousticTuning((re::ecs2::VideoAudioControlComponent *)v27);
          uint64_t v68 = *(void *)(v27 + 16);
          if (v68)
          {
            if (*(_DWORD *)(v27 + 32) == 1)
            {
              int v69 = *(unsigned __int8 *)(v96 + 24);
              float v70 = *(float *)(v96 + 28);
              *(void *)__buf = *(void *)(v27 + 48);
              __int16 v71 = (re::ecs2::EntityComponentCollection *)(v68 + 32);
              uint64_t v72 = *(re::ecs2::NetworkComponent **)(v68 + 200);
              uint64_t v73 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v68 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v73)
              {
                uint64_t v74 = (const re::ecs2::Component *)v73;
                uint64_t v75 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v73 + 32, (uint64_t *)__buf);
                if (v75)
                {
                  if (*(float *)(v75 + 56) != v70)
                  {
                    *(float *)(v75 + 56) = v70;
                    re::ecs2::Component::markDirty(v74);
                    if (v72) {
                      re::ecs2::NetworkComponent::markDirty(v72, v74);
                    }
                  }
                  uint64_t v76 = re::ecs2::EntityComponentCollection::getOrAdd(v71, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
                  if (v76)
                  {
                    long long v77 = (const re::ecs2::Component *)v76;
                    uint64_t v78 = v76 + 40;
                    char v79 = (unsigned char *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v76 + 40, (uint64_t *)__buf);
                    if (!v79)
                    {
                      HIDWORD(v101) = 6553601;
                      LOBYTE(v101) = v69;
                      re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::ecs2::TransientAudioState&>(v78, (uint64_t *)__buf, &v101);
LABEL_75:
                      re::ecs2::Component::markDirty(v77);
                      if (v72) {
                        re::ecs2::NetworkComponent::markDirty(v72, v77);
                      }
                      goto LABEL_77;
                    }
                    if (*v79 != v69)
                    {
                      *char v79 = v69;
                      goto LABEL_75;
                    }
                  }
                }
              }
            }
          }
LABEL_77:

          v24 += 2;
          if (v24 == v94) {
            goto LABEL_83;
          }
        }
        float32x4_t v48 = *re::audioLogObjects(v43);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__buf = 134218242;
          *(void *)&__buf[4] = v90;
          __int16 v103 = 2112;
          int v104 = (re *)v32;
          _os_log_impl(&dword_233120000, v48, OS_LOG_TYPE_DEFAULT, "VideoAudioControlComponent@%p setting AVPlayer's STS label to %@", __buf, 0x16u);
        }
        goto LABEL_45;
      }
LABEL_91:
      re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::deinit((uint64_t *)&v97);
    }
  }
}

uint64_t re::ecs2::VideoAudioControlSystem::update(uint64_t a1, uint64_t a2)
{
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v7);
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v6, 3137, a1);
  v5[0] = 0;
  v5[1] = 0;
  re::ecs2::VideoAudioControlSystem::updateAudioControllersForAllVideoAssetsInScene(a1, a2, v5);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v6);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v7);
}

uint64_t re::ecs2::VideoAudioControlSystem::typeInfo(re::ecs2::VideoAudioControlSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoAudioControlSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoAudioControlSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoAudioControlSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoAudioControlSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::VideoAudioControlSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VideoAudioControlSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  long long v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoComponent>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v4 = *(void *)(a2 + 120);
  v6[0] = a3;
  v6[1] = a4;
  re::ecs2::VideoAudioControlSystem::updateAudioControllersForAllVideoAssetsInScene(a1, v4, v6);
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoAudioControlSystem>(re::ecs2::VideoAudioControlSystem *,REEventHandlerResult (re::ecs2::VideoAudioControlSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  long long v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::ecs2::VideoAudioControlSystem::willRemoveComponents<re::ecs2::VideoPlayerComponent>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v4 = *(void *)(a2 + 120);
  v6[0] = a3;
  v6[1] = a4;
  re::ecs2::VideoAudioControlSystem::updateAudioControllersForAllVideoAssetsInScene(a1, v4, v6);
  return 0;
}

void re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(void *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v27, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v27;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)uint64_t v27 = v5;
      *(void *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 40;
        do
        {
          if ((*(_DWORD *)(v13 - 32) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 40);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 80 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 80 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 80 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 80 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 80 * v17) = v14;
            uint64_t v21 = *(void *)(a1 + 16) + 80 * v17;
            *(void *)(v21 + 16) = *(id *)(v13 - 24);
            uint64_t v22 = *(void *)(a1 + 16) + 80 * v17;
            *(void *)(v22 + 56) = 0;
            *(_DWORD *)(v22 + 48) = 0;
            *(void *)(v22 + 32) = 0;
            *(void *)(v22 + 40) = 0;
            *(void *)(v22 + 24) = 0;
            *(void *)(v22 + 24) = *(void *)(v13 - 16);
            *(void *)(v13 - 16) = 0;
            *(void *)(v22 + 32) = *(void *)(v13 - 8);
            *(void *)(v13 - 8) = 0;
            uint64_t v23 = *(void *)(v22 + 40);
            *(void *)(v22 + 40) = *(void *)v13;
            *(void *)uint64_t v13 = v23;
            uint64_t v24 = *(void *)(v22 + 56);
            *(void *)(v22 + 56) = *(void *)(v13 + 16);
            *(void *)(v13 + 16) = v24;
            ++*(_DWORD *)(v13 + 8);
            ++*(_DWORD *)(v22 + 48);
            *(_DWORD *)(v22 + 64) = *(_DWORD *)(v13 + 24);
            uint64_t v25 = *(void *)(v13 + 32);
            *(void *)(v13 + 32) = 0;
            *(void *)(v22 + 72) = v25;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 80;
          --v10;
        }
        while (v10);
      }
      re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2) {
      signed int v26 = a2;
    }
    else {
      signed int v26 = 3;
    }
  }
}

double re::HashTable<AVPlayer * {__strong},re::ecs2::VideoAudioControlSystem::AVPlayerState,re::Hash<AVPlayer * {__strong}>,re::EqualTo<AVPlayer * {__strong}>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = a1[2];
        uint64_t v6 = v5 + v3;
        int v7 = *(_DWORD *)(v5 + v3 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          uint64_t v10 = *(void *)(v6 + 24);
          long long v9 = (void *)(v6 + 24);
          uint64_t v8 = v10;
          if (v10)
          {
            uint64_t v11 = v5 + v3;
            if (*(void *)(v11 + 56)) {
              (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
            }
            *(void *)(v11 + 56) = 0;
            v9[1] = 0;
            void v9[2] = 0;
            void *v9 = 0;
            ++*(_DWORD *)(v11 + 48);
          }
        }
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::ecs2::StateCommandFactoryECS::getCommandIDFromCommandName(re::ecs2::StateCommandFactoryECS *this, const re::StringID *a2)
{
    return 1;
    return 2;
    return 3;
    return 4;
  return 0;
}

uint64_t re::ecs2::StateCommandFactoryECS::createStateCommand(re::ecs2::StateCommandFactoryECS *this, const StringID *a2, const re::StringID *a3)
{
  if (v5)
  {
    uint64_t v6 = re::globalAllocators((re *)v5);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 104, 8);
    *(void *)uint64_t v7 = &unk_26E6FFB38;
    re::StringID::StringID((re::StringID *)(v7 + 8), a2);
    *(_DWORD *)(v7 + 56) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(void *)(v7 + 64) = 0;
    *(void *)(v7 + 72) = 0;
    *(void *)uint64_t v7 = &unk_26E70B408;
    *(void *)(v7 + 80) = 0;
    *(void *)(v7 + 88) = "";
    *(unsigned char *)(v7 + 96) = 0;
  }
  else
  {
    if (v8)
    {
      long long v9 = re::globalAllocators((re *)v8);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 80, 8);
      *(void *)uint64_t v7 = &unk_26E6FFB38;
      re::StringID::StringID((re::StringID *)(v7 + 8), a2);
      *(_DWORD *)(v7 + 56) = 0;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 24) = 0u;
      uint64_t v10 = &unk_26E70B4C0;
    }
    else
    {
      if (v11)
      {
        uint64_t v12 = re::globalAllocators((re *)v11);
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 80, 8);
        *(void *)uint64_t v7 = &unk_26E6FFB38;
        re::StringID::StringID((re::StringID *)(v7 + 8), a2);
        *(_DWORD *)(v7 + 56) = 0;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
        uint64_t v10 = &unk_26E70B578;
      }
      else
      {
        if (!v13) {
          return 0;
        }
        unint64_t v14 = re::globalAllocators((re *)v13);
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 88, 8);
        *(void *)uint64_t v7 = &unk_26E6FFB38;
        re::StringID::StringID((re::StringID *)(v7 + 8), a2);
        *(_DWORD *)(v7 + 56) = 0;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
        uint64_t v10 = &unk_26E70B630;
      }
    }
    *(void *)(v7 + 64) = 0;
    *(void *)(v7 + 72) = 0;
    *(void *)uint64_t v7 = v10;
  }
  return v7;
}

uint64_t re::ecs2::StateCommandFactoryECS::createStateCommand(re *a1, const StringID *a2)
{
  switch((int)a1)
  {
    case 1:
      uint64_t v3 = re::globalAllocators(a1);
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 104, 8);
      *(void *)uint64_t v4 = &unk_26E6FFB38;
      re::StringID::StringID((re::StringID *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 56) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      *(void *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 0;
      *(void *)uint64_t v4 = &unk_26E70B408;
      *(void *)(v4 + 80) = 0;
      *(void *)(v4 + 88) = "";
      *(unsigned char *)(v4 + 96) = 0;
      return v4;
    case 2:
      BOOL v5 = re::globalAllocators(a1);
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 80, 8);
      *(void *)uint64_t v4 = &unk_26E6FFB38;
      re::StringID::StringID((re::StringID *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 56) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      uint64_t v6 = &unk_26E70B4C0;
      goto LABEL_7;
    case 3:
      uint64_t v7 = re::globalAllocators(a1);
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 80, 8);
      *(void *)uint64_t v4 = &unk_26E6FFB38;
      re::StringID::StringID((re::StringID *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 56) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      uint64_t v6 = &unk_26E70B578;
      goto LABEL_7;
    case 4:
      BOOL v8 = re::globalAllocators(a1);
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 88, 8);
      *(void *)uint64_t v4 = &unk_26E6FFB38;
      re::StringID::StringID((re::StringID *)(v4 + 8), a2);
      *(_DWORD *)(v4 + 56) = 0;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 24) = 0u;
      uint64_t v6 = &unk_26E70B630;
LABEL_7:
      *(void *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 0;
      *(void *)uint64_t v4 = v6;
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  return v4;
}

uint64_t re::StateCommand::commandID(re::StateCommand *this)
{
  return 0;
}

uint64_t re::StateCommand::getRequiredParameterCount(re::StateCommand *this)
{
  return 0;
}

uint64_t re::StateCommand::getParameterNames(re::StateCommand *this)
{
  return 0;
}

uint64_t re::StateCommand::getParameterDescriptions(re::StateCommand *this)
{
  return 0;
}

uint64_t re::StateCommand::getParameterTypes(re::StateCommand *this)
{
  return 0;
}

void re::ecs2::ECSStateCommand::~ECSStateCommand(re::ecs2::ECSStateCommand *this)
{
  *(void *)this = &unk_26E6FFB38;
  uint64_t v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::ECSStateCommand *)((char *)this + 8));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6FFB38;
  uint64_t v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::ECSStateCommand *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::ecsNetworkLogObjects(re *this)
{
  {
    re::ecsNetworkLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "ECS.Network");
  }
  return &re::ecsNetworkLogObjects(void)::logObjects;
}

void *re::ecs2::allocInfo_OpacityService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_233, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_233))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF885D0, "OpacityService");
    __cxa_guard_release(&_MergedGlobals_233);
  }
  return &unk_26AF885D0;
}

void re::ecs2::initInfo_OpacityService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xFB68753FBF224094;
  v5[1] = "OpacityService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_OpacityService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_OpacityService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"OpacityService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_OpacityService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_OpacityService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::OpacityService>, this);
}

re *re::ecs2::PhysicsSimulationData::deinit(re *this)
{
  uint64_t v1 = (void (***)(void))*((void *)this + 1);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = re::globalAllocators(this)[2];
    (**v1)(v1);
    (*(void (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40))(v3, v1);
    *((void *)v2 + 1) = 0;
    re::internal::destroyPersistent<re::CollisionEventDelegate>((re *)"deinit", 67, *((void (****)(void))v2 + 2));
    *((void *)v2 + 2) = 0;
    re::internal::destroyPersistent<re::MotionStateEventDelegate>((re *)"deinit", 70, *((void (****)(void))v2 + 3));
    *((void *)v2 + 3) = 0;
    re::internal::destroyPersistent<re::ecs2::ECSSimulationEventDelegate>((re *)"deinit", 73, *((void (****)(void))v2 + 4));
    *((void *)v2 + 4) = 0;
    this = re::internal::destroyPersistent<re::ecs2::ECSForceEffectEventDelegate>((re *)"deinit", 76, *((void (****)(void))v2 + 5));
    *((void *)v2 + 5) = 0;
  }
  return this;
}

re *re::internal::destroyPersistent<re::CollisionEventDelegate>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    BOOL v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

re *re::internal::destroyPersistent<re::MotionStateEventDelegate>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    BOOL v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

re *re::internal::destroyPersistent<re::ecs2::ECSSimulationEventDelegate>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    BOOL v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

re *re::internal::destroyPersistent<re::ecs2::ECSForceEffectEventDelegate>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    BOOL v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(re::ecs2::PhysicsSimulationData *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    WeakRetained = (char *)objc_loadWeakRetained((id *)this + 6);
    uint64_t v4 = WeakRetained;
    if (WeakRetained) {
      BOOL v5 = WeakRetained - 8;
    }
    else {
      BOOL v5 = 0;
    }
    if (WeakRetained) {

    }
    long long v6 = *re::physicsLogObjects((re *)WeakRetained);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (v4) {
        uint64_t v7 = (const char *)*((void *)v4 + 34);
      }
      else {
        uint64_t v7 = "null";
      }
      int v22 = 136315394;
      uint64_t v23 = v7;
      __int16 v24 = 2048;
      uint64_t v25 = v5;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "----- CREATING SIMULATION FOR ROOT ENTITY %s (%p) ------ ", (uint8_t *)&v22, 0x16u);
    }
    BOOL v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                              + 32))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator);
    *((void *)this + 1) = v8;
    uint64_t v9 = *(void *)this;
    uint64_t v10 = re::ServiceLocator::serviceOrNull<re::JobService>(*(void *)this);
    uint64_t v11 = *((void *)this + 1);
    *(_DWORD *)(v11 + 68) = *((_DWORD *)this + 64);
    *(_DWORD *)(v11 + 64) = *((_DWORD *)this + 65);
    uint64_t v12 = (re *)re::ServiceLocator::serviceOrNull<re::EventBus>(*(void *)this);
    BOOL v13 = re::globalAllocators(v12);
    unint64_t v14 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 16, 8);
    *(void *)unint64_t v14 = &unk_26E70C060;
    *((void *)v14 + 1) = v12;
    *((void *)this + 2) = v14;
    *(void *)(*(void *)(*((void *)this + 1) + 56) + 64) = v14;
    unint64_t v15 = re::globalAllocators(v14);
    unint64_t v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 16, 8);
    *(void *)unint64_t v16 = &unk_26E700218;
    *((void *)v16 + 1) = v12;
    *((void *)this + 3) = v16;
    uint64_t v17 = re::globalAllocators(v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17[2] + 32))(v17[2], 192, 16);
    *(void *)(v18 + 48) = 0;
    *(void *)(v18 + 56) = 0;
    *(void *)uint64_t v18 = &unk_26E704E10;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *(void *)(v18 + 40) = 0x7FFFFFFF00000000;
    *(_OWORD *)(v18 + 64) = xmmword_23435FD50;
    *(_OWORD *)(v18 + 80) = xmmword_23435FD60;
    *(_OWORD *)(v18 + 96) = xmmword_23435FD80;
    *(_OWORD *)(v18 + 112) = xmmword_23435FBB0;
    *(_OWORD *)(v18 + 128) = xmmword_23435FD50;
    *(_OWORD *)(v18 + 144) = xmmword_23435FD60;
    *(_OWORD *)(v18 + 160) = xmmword_23435FD80;
    *(_OWORD *)(v18 + 176) = xmmword_23435FBB0;
    *((void *)this + 5) = v18;
    uint64_t v19 = *((void *)this + 1);
    *(void *)(v19 + 40) = v18;
    if (!*((unsigned char *)this + 264))
    {
      int v20 = re::globalAllocators((re *)v18);
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20[2] + 32))(v20[2], 32, 8);
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 8) = 0;
      *(void *)(v21 + 16) = 0;
      *(void *)uint64_t v21 = &unk_26E6FFEB0;
      objc_initWeak((id *)(v21 + 24), 0);
      *((void *)this + 4) = v21;
      uint64_t v19 = *((void *)this + 1);
      *(void *)(v19 + 32) = v21;
    }
    (*(void (**)(void, char *))(**(void **)(v19 + 56) + 120))(*(void *)(v19 + 56), (char *)this + 112);
    return *((void *)this + 1);
  }
  return result;
}

__n128 re::ecs2::PhysicsSimulationData::setGravityOverride(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (v4) {
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 64) && v3 == 0)
  {
    *(unsigned char *)(a1 + 64) = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 64)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v3 == 0;
    }
    if (!v6) {
      *(unsigned char *)(a1 + 64) = 1;
    }
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 1);
  }
  if (!*a2)
  {
LABEL_18:
    uint64_t v8 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(*(void *)a1);
    uint64_t v7 = (__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8);
  }
  else
  {
    uint64_t v7 = (__n128 *)(a2 + 16);
  }
  __n128 v11 = *v7;
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    (*(void (**)(void, __n128 *))(*(void *)v9 + 80))(*(void *)(a1 + 8), &v11);
  }
  else
  {
    __n128 result = *v7;
    *(__n128 *)(a1 + 240) = *v7;
  }
  return result;
}

uint64_t re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(a1);
  if (!result)
  {
    uint64_t v2 = (re::internal *)re::introspect<re::ecs2::PhysicsSimulationService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    int v3 = (re::internal *)re::introspect<re::ecs2::PhysicsSimulationService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if (v7[8]) {
      BOOL v5 = *(unsigned char **)&v8[7];
    }
    else {
      BOOL v5 = v8;
    }
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::PhysicsSimulationData::setFixedTimeStepOverride(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  int v3 = *a2;
  if (*(unsigned char *)(result + 96)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (v4) {
    goto LABEL_18;
  }
  if (*(unsigned char *)(result + 96) && v3 == 0)
  {
    *(unsigned char *)(result + 96) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 96)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v3 == 0;
    }
    if (!v6) {
      *(unsigned char *)(result + 96) = 1;
    }
    *(_DWORD *)(result + 100) = *((_DWORD *)a2 + 1);
  }
  if (!*a2)
  {
LABEL_18:
    uint64_t v8 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(*(void *)result);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 152))(v8);
  }
  else
  {
    int v7 = *((_DWORD *)a2 + 1);
  }
  uint64_t v9 = *(void *)(v2 + 8);
  if (v9) {
    *(_DWORD *)(v9 + 68) = v7;
  }
  else {
    *(_DWORD *)(v2 + 256) = v7;
  }
  return result;
}

void re::ecs2::PhysicsSimulationData::updatePhysicsOrigin(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[3];
  *(_OWORD *)(a1 + 144) = a2[2];
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v4;
  *(simd_float4x4 *)(a1 + 176) = __invert_f4(*(simd_float4x4 *)a2);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    int v7 = *(void (**)(void))(**(void **)(v6 + 56) + 120);
    v7();
  }
}

double re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace@<D0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = 0;
  float32x4_t v4 = a1[11];
  float32x4_t v5 = a1[12];
  float32x4_t v6 = a1[13];
  float32x4_t v7 = a1[14];
  long long v8 = *(_OWORD *)(a2 + 48);
  void v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v8;
  do
  {
    v14[v3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(v13[v3])), v5, *(float32x2_t *)&v13[v3], 1), v6, (float32x4_t)v13[v3], 2), v7, (float32x4_t)v13[v3], 3);
    ++v3;
  }
  while (v3 != 4);
  double result = *(double *)v14;
  long long v10 = v14[1];
  long long v11 = v14[2];
  long long v12 = v14[3];
  *a3 = v14[0];
  a3[1] = v10;
  a3[2] = v11;
  a3[3] = v12;
  return result;
}

uint64_t re::ecs2::PhysicsSimulationData::localTransformFromPhysicsSimulationSpace@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 + 24);
  if (v7)
  {
    if ((*(unsigned char *)(v7 + 288) & 0x80) != 0) {
      long long v8 = 0;
    }
    else {
      long long v8 = *(re::ecs2::TransformComponent ***)(a3 + 24);
    }
  }
  else
  {
    long long v8 = 0;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(v8, (const re::ecs2::Entity *)1, &v25);
  simd_float4x4 v33 = __invert_f4(v25);
  unint64_t v9 = 0;
  long long v10 = *(_OWORD *)(a1 + 128);
  long long v11 = *(_OWORD *)(a1 + 144);
  long long v12 = *(_OWORD *)(a1 + 160);
  int32x4_t v26 = *(int32x4_t *)(a1 + 112);
  long long v27 = v10;
  long long v28 = v11;
  long long v29 = v12;
  do
  {
    v30[v9 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v26 + v9))), (float32x4_t)v33.columns[1], *(float32x2_t *)&v26.i8[v9], 1), (float32x4_t)v33.columns[2], *(float32x4_t *)((char *)&v26 + v9), 2), (float32x4_t)v33.columns[3], *(float32x4_t *)((char *)&v26 + v9), 3);
    v9 += 16;
  }
  while (v9 != 64);
  unint64_t v13 = 0;
  float32x4_t v14 = (float32x4_t)v30[0];
  float32x4_t v15 = (float32x4_t)v30[1];
  float32x4_t v16 = (float32x4_t)v30[2];
  float32x4_t v17 = (float32x4_t)v30[3];
  long long v18 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)(a2 + 32);
  long long v20 = *(_OWORD *)(a2 + 48);
  int32x4_t v26 = *(int32x4_t *)a2;
  long long v27 = v18;
  long long v28 = v19;
  long long v29 = v20;
  do
  {
    v30[v13 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)((char *)&v26 + v13))), v15, *(float32x2_t *)&v26.i8[v13], 1), v16, *(float32x4_t *)((char *)&v26 + v13), 2), v17, *(float32x4_t *)((char *)&v26 + v13), 3);
    v13 += 16;
  }
  while (v13 != 64);
  int32x4_t v26 = 0u;
  long long v31 = 0u;
  long long v32 = xmmword_23435FBB0;
  uint64_t result = re::decomposeScaleRotationTranslation<float>((uint64_t)v30, &v26, &v32, &v31);
  uint64_t v22 = v26.i64[1];
  long long v23 = v32;
  long long v24 = v31;
  *(void *)a4 = v26.i64[0];
  *(void *)(a4 + 8) = v22;
  *(_OWORD *)(a4 + 16) = v23;
  *(_OWORD *)(a4 + 32) = v24;
  return result;
}

uint64_t re::introspect<re::ecs2::PhysicsSimulationService>()
{
  v0 = &qword_268772000;
  {
    v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::ecs2::PhysicsSimulationService>(void)::info = re::ecs2::introspect_PhysicsSimulationService(0);
      v0 = &qword_268772000;
    }
  }
  return v0[381];
}

void *re::ecs2::allocInfo_LightGroupComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_234, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_234))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88660, "LightGroupComponent");
    __cxa_guard_release(&_MergedGlobals_234);
  }
  return &unk_26AF88660;
}

void re::ecs2::initInfo_LightGroupComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xE3D9149F7DF89FA8;
  v9[1] = "LightGroupComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88658, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF88658);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88650 = v7;
      __cxa_guard_release(&qword_26AF88658);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF88650;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::LightGroupComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::LightGroupComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LightGroupComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LightGroupComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::LightGroupComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EAB28;
}

uint64_t re::internal::defaultDestruct<re::ecs2::LightGroupComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::LightGroupComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EAB28;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::LightGroupComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_LightGroupComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightGroupComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightGroupComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightGroupComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightGroupComponent>, this);
}

void *re::ecs2::allocInfo_ProjectiveShadowReceiverService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_235, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_235))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF886E0, "ProjectiveShadowReceiverService");
    __cxa_guard_release(&_MergedGlobals_235);
  }
  return &unk_26AF886E0;
}

void re::ecs2::initInfo_ProjectiveShadowReceiverService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x84AD34C2FA98150ELL;
  v5[1] = "ProjectiveShadowReceiverService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ProjectiveShadowReceiverService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_ProjectiveShadowReceiverService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProjectiveShadowReceiverService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProjectiveShadowReceiverService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProjectiveShadowReceiverService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProjectiveShadowReceiverService>, this);
}

re::VideoBufferInfo *re::VideoBufferInfo::VideoBufferInfo(re::VideoBufferInfo *this, CVPixelBufferRef pixelBuffer)
{
  *(void *)this = CVPixelBufferGetWidth(pixelBuffer);
  *((void *)this + 1) = CVPixelBufferGetHeight(pixelBuffer);
  PixelFormatType = (re::PeerVideoStreamingUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  re::PeerVideoStreamingUtils::mtlPixelFormatFromCVPixelFormat(PixelFormatType, v5);
  *((_DWORD *)this + 4) = 80;
  return this;
}

uint64_t re::PeerVideoStreamingUtils::mtlPixelFormatFromCVPixelFormat(re::PeerVideoStreamingUtils *this, uint64_t a2)
{
  if (this == 1111970369) {
    return 80;
  }
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unsupported CV pixel format %lu", "false", "mtlPixelFormatFromCVPixelFormat", 426, this);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t *re::VideoBufferInfo::debugStr@<X0>(re::VideoBufferInfo *this@<X0>, re::DynamicString *a2@<X8>)
{
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  re::DynamicString::setCapacity(&v11, 0);
  int v5 = *((_DWORD *)this + 4);
  if (v5)
  {
    long long v6 = (_anonymous_namespace_ *)re::PeerVideoStreamingUtils::cvPixelFormatFromMTLPixelFormat(v5, v4);
    strcpy(__s, "ARGB");
    re::DynamicString::operator=((re::DynamicString *)&v11, (re::DynamicString *)&v9);
    if (v9 && (v10 & 1) != 0) {
      (*(void (**)(void))(*(void *)v9 + 40))();
    }
  }
  else
  {
    unint64_t v9 = "Invalid";
    uint64_t v10 = 7;
    re::DynamicString::operator=((re::DynamicString *)&v11, (uint64_t)&v9);
  }
  if (v12) {
    uint64_t v7 = v13;
  }
  else {
    uint64_t v7 = (char *)&v12 + 1;
  }
  re::DynamicString::format((re::DynamicString *)"(Size %lux%lu, Format %s)", a2, *(void *)this, *((void *)this + 1), v7);
  uint64_t result = v11;
  if (v11)
  {
    if (v12) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v11 + 40))();
    }
  }
  return result;
}

uint64_t re::PeerVideoStreamingUtils::cvPixelFormatFromMTLPixelFormat(int a1, uint64_t a2)
{
  if ((a1 & 0xFFFFFFFE) == 0x50) {
    return 1111970369;
  }
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unsupported metal format: %lu", "false", "cvPixelFormatFromMTLPixelFormat", 438, a1);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::PeerVideoStreamingUtils::writeCMSampleBuffer(re::zerocopy **this, re::OPackWriter *a2, opaqueCMSampleBuffer *a3)
{
  char v14 = -27;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v14, (char *)1);
  char v15 = 8;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v15, (char *)1);
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  re::PeerVideoStreamingUtils::writeCMFormatDescription(this, FormatDescription, v7);
  char v16 = 9;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v16, (char *)1);
  unint64_t NumSamples = CMSampleBufferGetNumSamples(a2);
  re::OPackWriter::writeInteger(this, NumSamples);
  char v17 = 10;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v17, (char *)1);
  re::OPackWriter::writeArrayBegin(this, NumSamples);
  if (NumSamples)
  {
    for (CMItemIndex i = 0; i != NumSamples; ++i)
    {
      size_t SampleSize = CMSampleBufferGetSampleSize(a2, i);
      re::OPackWriter::writeInteger(this, SampleSize);
    }
    if (NumSamples >= 0xF)
    {
      char v18 = 3;
      re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v18, (char *)1);
    }
  }
  char v19 = 11;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v19, (char *)1);
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  re::PeerVideoStreamingUtils::writeCMBlockBuffer(this, DataBuffer, v12);
  char v20 = 12;
  re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&v20, (char *)1);
  return re::OPackWriter::writeInteger(this, (uint64_t)a3);
}

uint64_t re::PeerVideoStreamingUtils::writeCMFormatDescription(re::zerocopy **this, CMFormatDescriptionRef videoDesc, const opaqueCMFormatDescription *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  size_t parameterSetCountOut = 0;
  int NALUnitHeaderLengthOut = 0;
  HEVCParameterSetAtIndex = (re *)CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(videoDesc, 0, 0, 0, &parameterSetCountOut, &NALUnitHeaderLengthOut);
  if (HEVCParameterSetAtIndex)
  {
    int v6 = (int)HEVCParameterSetAtIndex;
    uint64_t v7 = *re::peerVideoStreamingLogObjects(HEVCParameterSetAtIndex);
    HEVCParameterSetAtIndex = (re *)os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (HEVCParameterSetAtIndex)
    {
      LODWORD(parameterSetPointerOut) = 67109120;
      HIDWORD(parameterSetPointerOut) = v6;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Error getting parameter set: %d", (uint8_t *)&parameterSetPointerOut, 8u);
    }
  }
  if (NALUnitHeaderLengthOut != 4)
  {
    long long v8 = *re::peerVideoStreamingLogObjects(HEVCParameterSetAtIndex);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      parameterSetPointerOut = (uint8_t *)0x404000200;
      __int16 v20 = 1024;
      int v21 = NALUnitHeaderLengthOut;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Expected parameter sets to use NAL header size of %d. Parameters are using %d instead.", (uint8_t *)&parameterSetPointerOut, 0xEu);
    }
  }
  uint64_t result = re::OPackWriter::writeArrayBegin(this, parameterSetCountOut);
  if (parameterSetCountOut)
  {
    for (size_t i = 0; i < parameterSetCountOut; ++i)
    {
      parameterSetPointerOut = 0;
      size_t parameterSetSizeOut = 0;
      long long v11 = (re *)CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(videoDesc, i, (const uint8_t **)&parameterSetPointerOut, &parameterSetSizeOut, 0, 0);
      if (v11)
      {
        int v12 = (int)v11;
        unint64_t v13 = *re::peerVideoStreamingLogObjects(v11);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          int v18 = v12;
          _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Error getting parameter set, errCode: %d", buf, 8u);
        }
      }
      uint64_t result = re::OPackWriter::writeData(this, (re::zerocopy::WriteStream *)parameterSetPointerOut, parameterSetSizeOut);
    }
    if (parameterSetCountOut >= 0xF)
    {
      LOBYTE(parameterSetPointerOut) = 3;
      return re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)&parameterSetPointerOut, (char *)1);
    }
  }
  return result;
}

void re::PeerVideoStreamingUtils::writeCMBlockBuffer(re::zerocopy **this, CMBlockBufferRef theBuffer, OpaqueCMBlockBuffer *a3)
{
  lengthAtOffsetOut[1] = *MEMORY[0x263EF8340];
  size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
  CMBlockBufferRef blockBufferOut = 0;
  int v6 = (re *)CMBlockBufferCreateContiguous(0, theBuffer, 0, 0, 0, DataLength, 0, &blockBufferOut);
  if (v6)
  {
    int v7 = (int)v6;
    long long v8 = *re::peerVideoStreamingLogObjects(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(lengthAtOffsetOut[0]) = 67109120;
      HIDWORD(lengthAtOffsetOut[0]) = v7;
      unint64_t v9 = "Error creating contiguous CMSampleBuffer, errCode: %d";
      uint64_t v10 = (uint8_t *)lengthAtOffsetOut;
LABEL_7:
      char v14 = v8;
      uint32_t v15 = 8;
LABEL_8:
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, v9, v10, v15);
    }
  }
  else
  {
    lengthAtOffsetOut[0] = 0;
    dataPointerOut = 0;
    size_t totalLengthOut = 0;
    OSStatus DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if (DataPointer)
    {
      OSStatus v12 = DataPointer;
      CFRelease(blockBufferOut);
      long long v8 = *re::peerVideoStreamingLogObjects(v13);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        OSStatus v22 = v12;
        unint64_t v9 = "Error getting CMSampleBuffer data pointer, errCode: %d";
        uint64_t v10 = buf;
        goto LABEL_7;
      }
    }
    else if (lengthAtOffsetOut[0] == totalLengthOut)
    {
      re::OPackWriter::writeData(this, (re::zerocopy::WriteStream *)dataPointerOut, lengthAtOffsetOut[0]);
      CFRelease(blockBufferOut);
    }
    else
    {
      CFRelease(blockBufferOut);
      char v17 = *re::peerVideoStreamingLogObjects(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        unint64_t v9 = "Expected lengthAtOffset == totalLength because buffer is contiguous.";
        uint64_t v10 = buf;
        char v14 = v17;
        uint32_t v15 = 2;
        goto LABEL_8;
      }
    }
  }
}

BOOL re::PeerVideoStreamingUtils::readCMSampleBuffer(re::PeerVideoStreamingUtils *this, re::OPackReader *a2, unint64_t *a3, opaqueCMSampleBuffer **a4, unint64_t *a5)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  BOOL v10 = 0;
  if (!re::OPackReader::next(this, (uint64_t)a2) || *((unsigned char *)this + 196) != 13) {
    return v10;
  }
  int v54 = a3;
  uint64_t v55 = a2;
  sampleSizeArray = 0;
  CMFormatDescriptionRef formatDescriptionOut = 0;
  v60[1] = 0;
  CMItemCount v61 = 0;
  v60[0] = 0;
  int v62 = 0;
  OSStatus v12 = 0;
  if (!re::OPackReader::next(this, v9))
  {
    CMItemCount v13 = 0;
    goto LABEL_64;
  }
  CMItemCount v13 = 0;
  if (*((unsigned char *)this + 196) != 6)
  {
LABEL_64:
    if (*((unsigned char *)this + 184) != 5) {
      goto LABEL_83;
    }
    uint64_t v72 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    int v71 = 0;
    long long v58 = *MEMORY[0x263F01090];
    CMTimeEpoch v59 = *(void *)(MEMORY[0x263F01090] + 16);
    CMTimeMake((CMTime *)destinationBuffer, 1, 90);
    int64_t v36 = (*(void *)v55)++;
    uint64_t v37 = CMTimeMake(&buf, v36, 90);
    *(CMTime *)&v57[8] = buf;
    re::DynamicArray<CMSampleTimingInfo>::setCapacity(v68, 1uLL);
    int v38 = v71;
    uint64_t v39 = v70;
    uint64_t v40 = v72;
    int v41 = (CMSampleTimingInfo *)&v72[v70];
    *(_OWORD *)&v41->duration.value = *(_OWORD *)destinationBuffer;
    long long v42 = v58;
    long long v43 = *(_OWORD *)&v57[16];
    long long v44 = *(_OWORD *)v57;
    v41->decodeTimeStamp.epoch = v59;
    *(_OWORD *)&v41->presentationTimeStamp.timescale = v43;
    *(_OWORD *)&v41->decodeTimeStamp.value = v42;
    *(_OWORD *)&v41->duration.epoch = v44;
    uint64_t v70 = v39 + 1;
    int v71 = v38 + 2;
    buf.value = 0;
    OSStatus v45 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v12, 1u, 0, 0, formatDescriptionOut, v13, v39 + 1, v40, v61, sampleSizeArray, (CMSampleBufferRef *)&buf);
    BOOL v10 = v45 == 0;
    uint64_t v46 = formatDescriptionOut;
    if (v45)
    {
      if (formatDescriptionOut) {
        CFRelease(formatDescriptionOut);
      }
      if (v12) {
        CFRelease(v12);
      }
      uint64_t v47 = *re::peerVideoStreamingLogObjects(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int16x8_t v65 = 67109120;
        OSStatus v66 = v45;
        _os_log_error_impl(&dword_233120000, v47, OS_LOG_TYPE_ERROR, "Failed to create CMSampleBuffer, errCode: %d", v65, 8u);
      }
    }
    else
    {
      if (formatDescriptionOut) {
        CFRelease(formatDescriptionOut);
      }
      if (v12) {
        CFRelease(v12);
      }
      *int v54 = buf.value;
    }
    if (*(void *)v68 && v72) {
      (*(void (**)(void))(**(void **)v68 + 40))();
    }
    goto LABEL_84;
  }
  CMItemCount v13 = 0;
  OSStatus v12 = 0;
  while (2)
  {
    switch(*((unsigned char *)this + 224))
    {
      case 0:
        BOOL v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((unsigned char *)this + 196) != 12) {
          goto LABEL_84;
        }
        *(void *)&v57[16] = 0;
        destinationBuffer[1] = 0;
        *(void *)uint16x8_t v57 = 0;
        destinationBuffer[0] = 0;
        *(_DWORD *)&v57[8] = 0;
        uint64_t v72 = 0;
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        *(void *)uint64_t v68 = 0;
        int v71 = 0;
        int v15 = re::OPackReader::next(this, v14);
        char v17 = 0;
        if (v15)
        {
          int v18 = 0;
          size_t v19 = 0;
          if (*((unsigned char *)this + 184) != 3)
          {
            int v20 = 0;
            uint64_t v21 = 0;
            size_t v19 = 0;
            do
            {
              *((unsigned char *)this + 2) = 1;
              OSStatus v22 = (_anonymous_namespace_ *)re::OPackReader::next(this, v16);
              char v24 = 0;
              if (!v22 || *((unsigned char *)this + 196) != 11) {
                goto LABEL_53;
              }
              if ((CMBlockBufferRef)v19 >= destinationBuffer[1])
              {
                simd_float4x4 v25 = (OpaqueCMBlockBuffer *)(v19 + 1);
                if (destinationBuffer[1] < v25)
                {
                  if (destinationBuffer[0])
                  {
                    unint64_t v26 = 8;
                    if (destinationBuffer[1]) {
                      unint64_t v26 = 2 * (uint64_t)destinationBuffer[1];
                    }
                    if (v26 <= (unint64_t)v25) {
                      unint64_t v27 = (unint64_t)v25;
                    }
                    else {
                      unint64_t v27 = v26;
                    }
                    re::DynamicArray<float *>::setCapacity(destinationBuffer, v27);
                    int v20 = *(_DWORD *)&v57[8];
                  }
                  else
                  {
                    re::DynamicArray<float *>::setCapacity(destinationBuffer, (unint64_t)v25);
                    int v20 = *(_DWORD *)&v57[8] + 1;
                  }
                }
                size_t v19 = *(void *)v57;
                uint64_t v21 = *(void *)&v57[16];
              }
              *(void *)(v21 + 8 * v19++) = *((void *)this + 26);
              *(void *)uint16x8_t v57 = v19;
              *(_DWORD *)&v57[8] = ++v20;
              re::DynamicArray<unsigned long>::add(v68, (void *)this + 27);
            }
            while (re::OPackReader::next(this, v28) && *((unsigned char *)this + 184) != 3);
            int v18 = *(const uint8_t *const **)&v57[16];
            char v17 = (const size_t *)v72;
          }
        }
        else
        {
          int v18 = 0;
          size_t v19 = 0;
        }
        simd_float4x4 v33 = (re *)CMVideoFormatDescriptionCreateFromHEVCParameterSets(0, v19, v18, v17, 4, 0, &formatDescriptionOut);
        if (v33)
        {
          int v34 = (int)v33;
          uint64_t v35 = *re::peerVideoStreamingLogObjects(v33);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.value) = 67109120;
            HIDWORD(buf.value) = v34;
            _os_log_error_impl(&dword_233120000, v35, OS_LOG_TYPE_ERROR, "Error creating format description from parameters, errCode: %d", (uint8_t *)&buf, 8u);
          }
          char v24 = 0;
        }
        else
        {
          char v24 = 1;
        }
LABEL_53:
        if (*(void *)v68)
        {
          uint64_t v23 = (uint64_t)v72;
          if (v72) {
            (*(void (**)(void))(**(void **)v68 + 40))(*(void *)v68);
          }
        }
        if (destinationBuffer[0])
        {
          uint64_t v23 = *(void *)&v57[16];
          if (*(void *)&v57[16]) {
            (*(void (**)(void))(*(void *)destinationBuffer[0] + 40))();
          }
        }
        if (v24) {
          goto LABEL_60;
        }
        goto LABEL_83;
      case 1:
        BOOL v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((unsigned char *)this + 196) != 6) {
          goto LABEL_84;
        }
        CMItemCount v13 = *((void *)this + 28);
        goto LABEL_60;
      case 2:
        BOOL v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((unsigned char *)this + 196) != 12) {
          goto LABEL_84;
        }
        while (2)
        {
          if (!re::OPackReader::next(this, v29) || *((unsigned char *)this + 184) == 3) {
            goto LABEL_60;
          }
          *((unsigned char *)this + 2) = 1;
          BOOL v10 = 0;
          if (re::OPackReader::next(this, v23) && *((unsigned char *)this + 196) == 6)
          {
            destinationBuffer[0] = *((CMBlockBufferRef *)this + 28);
            re::DynamicArray<unsigned long>::add(v60, destinationBuffer);
            continue;
          }
          goto LABEL_84;
        }
      case 3:
        BOOL v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((unsigned char *)this + 196) != 11) {
          goto LABEL_84;
        }
        destinationBuffer[0] = 0;
        id v30 = (re *)CMBlockBufferCreateWithMemoryBlock(0, 0, *((void *)this + 27), 0, 0, 0, *((void *)this + 27), 1u, destinationBuffer);
        int v31 = (int)v30;
        if (destinationBuffer[0] && !v30)
        {
          OSStatus v32 = CMBlockBufferReplaceDataBytes(*((const void **)this + 26), destinationBuffer[0], 0, *((void *)this + 27));
          OSStatus v12 = destinationBuffer[0];
          if (v32)
          {
            OSStatus v49 = v32;
            CFRelease(destinationBuffer[0]);
            long long v51 = *re::peerVideoStreamingLogObjects(v50);
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v68 = 67109120;
              *(_DWORD *)&v68[4] = v49;
              float32x4_t v48 = "Failed to copy data to block buffer, errCode: %d";
LABEL_89:
              _os_log_error_impl(&dword_233120000, v51, OS_LOG_TYPE_ERROR, v48, v68, 8u);
            }
            goto LABEL_83;
          }
LABEL_60:
          if (!re::OPackReader::next(this, v23) || *((unsigned char *)this + 196) != 6) {
            goto LABEL_64;
          }
          continue;
        }
        long long v51 = *re::peerVideoStreamingLogObjects(v30);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v68 = 67109120;
          *(_DWORD *)&v68[4] = v31;
          float32x4_t v48 = "Failed to create block buffer, errCode: %d";
          goto LABEL_89;
        }
LABEL_83:
        BOOL v10 = 0;
LABEL_84:
        if (v60[0] && sampleSizeArray) {
          (*(void (**)(void))(*(void *)v60[0] + 40))();
        }
        return v10;
      case 4:
        BOOL v10 = 0;
        if (!re::OPackReader::next(this, v11) || *((unsigned char *)this + 196) != 6) {
          goto LABEL_84;
        }
        *a4 = (opaqueCMSampleBuffer *)*((void *)this + 28);
        goto LABEL_60;
      default:
        goto LABEL_83;
    }
  }
}

void *re::DynamicArray<CMSampleTimingInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    int v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          int v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x48uLL))
        {
          uint64_t v2 = 72 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 4);
          if (result)
          {
            int v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 72 * v5[2]);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<CMSampleTimingInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void *re::ecs2::allocInfo_ReverbComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_236, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_236))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88790, "ReverbComponent");
    __cxa_guard_release(&_MergedGlobals_236);
  }
  return &unk_26AF88790;
}

void re::ecs2::initInfo_ReverbComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v21[0] = 0x53A499A3A873EE56;
  v21[1] = "ReverbComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88760, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF88760);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88770 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      BOOL v10 = re::introspect_uint16_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "priority";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2A00000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF88778 = v11;
      OSStatus v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "allowSpaceBlendingWithReverbPreset";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF88780 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      int v18 = re::introspect_ReverbPreset((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "reverbPreset";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF88788 = v19;
      __cxa_guard_release(&qword_26AF88760);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF88770;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ReverbComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ReverbComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ReverbComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ReverbComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

void re::internal::defaultConstruct<re::ecs2::ReverbComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6FFCC8;
  *(void *)(v3 + 32) = -1;
  *(unsigned char *)(v3 + 40) = 1;
  *(_WORD *)(v3 + 42) = 1;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ReverbComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::ReverbComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6FFCC8;
  *(void *)(v1 + 32) = -1;
  *(unsigned char *)(v1 + 40) = 1;
  *(_WORD *)(v1 + 42) = 1;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ReverbComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ReverbComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReverbComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReverbComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReverbComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReverbComponent>, this);
}

void *re::ecs2::allocInfo_ReverbSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88768, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88768))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88808, "ReverbSystem");
    __cxa_guard_release(&qword_26AF88768);
  }
  return &unk_26AF88808;
}

void re::ecs2::initInfo_ReverbSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x3C372182C9CAED82;
  v5[1] = "ReverbSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x17800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ReverbSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ReverbSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ReverbSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ReverbSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ReverbSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ReverbSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ReverbSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::ReverbSystem *re::internal::defaultConstruct<re::ecs2::ReverbSystem>(int a1, int a2, re::ecs2::ReverbSystem *this)
{
  return re::ecs2::ReverbSystem::ReverbSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::ReverbSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 17);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::ReverbSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 17);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ReverbSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReverbSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReverbSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReverbSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReverbSystem>, this);
}

void re::ecs2::ReverbComponent::~ReverbComponent(re::ecs2::ReverbComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ReverbComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a3 + 8);
  if (!v5) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, *(void *)(a3 + 8));
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v25, a5, 0);
    unint64_t v27 = a4;
    uint64_t v28 = v25;
    uint64_t v29 = v26[0];
    if (v25 != a5 || LOWORD(v26[0]) != 0xFFFFLL || (v26[0] & 0xFFFF0000) != 4294901760)
    {
      do
      {
        uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
        uint64_t v15 = *(void *)v14;
        if (*(void *)(*(void *)v14 + 16))
        {
          unint64_t v16 = v27;
          unint64_t v17 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
          int v18 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v16, v17, *(void *)(a3 + 48));
          uint64_t v19 = *re::audioLogObjects(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            long long v22 = *(re::ecs2::Entity **)(v15 + 16);
            uint64_t v23 = v19;
            re::ecs2::Entity::debugDescription(v22, (re::DynamicString *)&v25);
            char v24 = (char *)v26 + 1;
            if (v26[0]) {
              char v24 = (char *)v26[1];
            }
            *(_DWORD *)CMTime buf = 134218242;
            uint64_t v31 = v15;
            __int16 v32 = 2080;
            simd_float4x4 v33 = v24;
            _os_log_debug_impl(&dword_233120000, v23, OS_LOG_TYPE_DEBUG, "[RE/ECS] [Update] ReverbComponentStateImpl::processDirtyComponents: setting state to 'updating' for ReverbComponent %p on entity %s", buf, 0x16u);

            if (v25 && (v26[0] & 1) != 0) {
              (*(void (**)(void))(*(void *)v25 + 40))();
            }
          }
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
      }
      while (v28 != a5 || (unsigned __int16)v29 != 0xFFFF || WORD1(v29) != 0xFFFF);
    }
    if (*(void *)(a1 + 16) && v11)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 544))(v11)) {
        re::ecs2::ReverbSystem::updateLatestReverbPresetState(*(void *)(*(void *)(a1 + 16) + 104), v5, 0, 0);
      }
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  return result;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    BOOL v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

void re::ecs2::ReverbSystem::updateLatestReverbPresetState(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (a2)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)(*(void *)(a2 + 104) + 272) >> 1;
        uint64_t v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v11 = *(void *)(v10 + 24);
        if (!v11)
        {
LABEL_28:
          unint64_t v26 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 456))(v8, v9, -1, 1);
          unint64_t v27 = *re::audioLogObjects(v26);
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          *(_WORD *)CMTime buf = 0;
          uint64_t v28 = "[RE/ECS] [Update] Set sceneID to default reverbPreset with no valid reverb components in scene.";
          uint64_t v29 = v27;
          uint32_t v30 = 2;
          goto LABEL_32;
        }
        BOOL v12 = 0;
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        unint64_t v16 = *(uint64_t **)(v10 + 40);
        unint64_t v17 = &v16[v11];
        uint64_t v34 = v9;
        char v18 = 1;
LABEL_6:
        char v36 = v13;
        unsigned int v19 = v14;
        uint64_t v35 = v15;
        do
        {
          uint64_t v20 = *v16;
          uint64_t v21 = *(void *)(*v16 + 16);
          if (v21 && (*(unsigned char *)(v21 + 288) & 1) != 0)
          {
            if (!a4) {
              goto LABEL_15;
            }
            uint64_t v22 = 8 * a4;
            uint64_t v23 = a3;
            while (*v23 != v20)
            {
              ++v23;
              v22 -= 8;
              if (!v22)
              {
                uint64_t v23 = &a3[a4];
                break;
              }
            }
            if (a4 == v23 - a3)
            {
LABEL_15:
              char v24 = *(re::ecs2::NetworkComponent **)(v21 + 200);
              if (v24) {
                LODWORD(v24) = re::ecs2::NetworkComponent::owningProcessType(v24);
              }
              uint64_t v15 = *(void *)(v20 + 32);
              unsigned int v14 = *(unsigned __int16 *)(v20 + 42);
              char v13 = *(unsigned char *)(v20 + 40);
              if (v18)
              {
                char v18 = 0;
                BOOL v12 = v24 == 0;
                ++v16;
                uint64_t v9 = v34;
                if (v16 != v17) {
                  goto LABEL_6;
                }
                goto LABEL_30;
              }
              BOOL v25 = v19 == v14;
              if (v24 | v12) {
                BOOL v25 = 0;
              }
              if (v19 < v14 || v25)
              {
                BOOL v12 = v24 == 0;
                char v36 = *(unsigned char *)(v20 + 40);
                unsigned int v19 = *(unsigned __int16 *)(v20 + 42);
                uint64_t v35 = *(void *)(v20 + 32);
              }
            }
          }
          ++v16;
        }
        while (v16 != v17);
        char v13 = v36;
        uint64_t v15 = v35;
        uint64_t v9 = v34;
        if (v18) {
          goto LABEL_28;
        }
LABEL_30:
        int v31 = v13 & 1;
        __int16 v32 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v8 + 456))(v8, v9, v15, v13 & 1);
        simd_float4x4 v33 = *re::audioLogObjects(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 134218496;
          uint64_t v38 = v9;
          __int16 v39 = 2048;
          uint64_t v40 = v15;
          __int16 v41 = 1024;
          int v42 = v31;
          uint64_t v28 = "[RE/ECS] [Update] Set sceneID %llu with reverbPreset %lld and allowSpaceBlending %d";
          uint64_t v29 = v33;
          uint32_t v30 = 28;
LABEL_32:
          _os_log_impl(&dword_233120000, v29, OS_LOG_TYPE_DEFAULT, v28, buf, v30);
        }
      }
    }
  }
}

uint64_t re::ecs2::ReverbSystem::willAddSystemToECSService(re::ecs2::ReverbSystem *this)
{
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    uint64_t result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v3);
    *((void *)this + 13) = result;
    *((void *)this + 15) = result;
  }
  return result;
}

uint64_t re::ecs2::ReverbSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  *(void *)(this + 120) = 0;
  return this;
}

void re::ecs2::ReverbSystem::willAddSceneToECSService(re::ecs2::ReverbSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (!a2) {
    return;
  }
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(void *)&long long v50 = this;
  *((void *)&v50 + 1) = re::ecs2::ReverbSystem::activateComponents;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 216), (uint64_t)&v50);
  *(void *)&long long v50 = this;
  *((void *)&v50 + 1) = re::ecs2::ReverbSystem::deactivateComponents;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)&v50);
  float32x4_t v48 = a2;
  unint64_t v5 = *((void *)this + 33);
  int v6 = *((_DWORD *)this + 68);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)((char *)this + 280);
    }
    else {
      uint64_t v7 = (void *)*((void *)this + 36);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_18;
      }
    }
    goto LABEL_17;
  }
  if (v6)
  {
    uint64_t v8 = (uint64_t *)((char *)this + 280);
    if (!v5) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)*((void *)this + 36);
    if (!v5) {
      goto LABEL_18;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (!v10)
  {
LABEL_18:
    long long v57 = 0u;
    long long v50 = 0u;
    *(void *)&long long v51 = 0;
    *((void *)&v51 + 1) = -1;
    long long v52 = 0u;
    long long v53 = 0u;
    uint64_t v54 = 0;
    uint64_t v55 = 1;
    long long v56 = 0uLL;
    unint64_t v16 = *((void *)this + 22);
    *(void *)&long long v57 = 0;
    unint64_t v17 = *((void *)this + 18);
    DWORD2(v57) = 0;
    if (v16 + 1 > 4 * v17)
    {
      re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 17, (v16 + 4) >> 2);
      unint64_t v17 = *((void *)this + 18);
    }
    if (v17 <= v16 >> 2)
    {
      uint64_t v49 = 0;
      memset(v66, 0, sizeof(v66));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v58 = 136315906;
      CMTimeEpoch v59 = "operator[]";
      __int16 v60 = 1024;
      int v61 = 858;
      __int16 v62 = 2048;
      unint64_t v63 = v16 >> 2;
      __int16 v64 = 2048;
      unint64_t v65 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      if (*((unsigned char *)this + 152)) {
        char v18 = (char *)this + 160;
      }
      else {
        char v18 = (char *)*((void *)this + 21);
      }
      uint64_t v19 = *(void *)&v18[8 * (v16 >> 2)];
      ++*((void *)this + 22);
      ++*((_DWORD *)this + 46);
      uint64_t v20 = v19 + 112 * (v16 & 3);
      long long v21 = v50;
      long long v22 = v51;
      long long v23 = v52;
      *(void *)(v20 + 48) = v53;
      *(_OWORD *)(v20 + 16) = v22;
      *(_OWORD *)(v20 + 32) = v23;
      *(_OWORD *)uint64_t v20 = v21;
      re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v53 + 8);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v50);
      uint64_t v25 = *((void *)this + 22);
      if (v25)
      {
        uint64_t v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 136, v25 - 1);
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::init(v26, (uint64_t)this + 136, (uint64_t)v48);
        *(void *)&v66[0] = *((void *)this + 22) - 1;
        re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::ReverbSystem *)((char *)this + 192), &v48, (uint64_t *)v66);
        unint64_t v27 = *((void *)this + 22);
        unint64_t v28 = *((void *)this + 37);
        if ((v27 & 0x3F) != 0) {
          unint64_t v29 = (v27 >> 6) + 1;
        }
        else {
          unint64_t v29 = v27 >> 6;
        }
        *((void *)this + 37) = v27;
        *(void *)&long long v50 = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::ReverbSystem *)((char *)this + 256), v29, &v50);
        if (v27 && v28 > v27)
        {
          uint64_t v30 = 63;
          uint64_t v31 = *((void *)this + 37) & 0x3FLL;
          if (v31 && v31 != 63) {
            uint64_t v30 = ~(-1 << v31);
          }
          if (*((unsigned char *)this + 272)) {
            __int16 v32 = (char *)this + 280;
          }
          else {
            __int16 v32 = (char *)*((void *)this + 36);
          }
          *(void *)&v32[8 * *((void *)this + 33) - 8] &= v30;
        }
        unint64_t v33 = *((void *)this + 22);
        unint64_t v34 = *((void *)this + 43);
        if ((v33 & 0x3F) != 0) {
          unint64_t v35 = (v33 >> 6) + 1;
        }
        else {
          unint64_t v35 = v33 >> 6;
        }
        *((void *)this + 43) = v33;
        *(void *)&long long v50 = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::ReverbSystem *)((char *)this + 304), v35, &v50);
        if (v33 && v34 > v33)
        {
          uint64_t v36 = 63;
          uint64_t v37 = *((void *)this + 43) & 0x3FLL;
          if (v37 && v37 != 63) {
            uint64_t v36 = ~(-1 << v37);
          }
          if (*((unsigned char *)this + 320)) {
            uint64_t v38 = (char *)this + 328;
          }
          else {
            uint64_t v38 = (char *)*((void *)this + 42);
          }
          *(void *)&v38[8 * *((void *)this + 39) - 8] &= v36;
        }
        unint64_t v15 = *(void *)&v66[0];
        unsigned int v14 = (char *)this + 304;
        goto LABEL_50;
      }
    }
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v48, v49);
    _os_crash();
    __break(1u);
  }
LABEL_17:
  *(void *)&long long v50 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 256, 0);
  uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 136, v50);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::init(v13, (uint64_t)this + 136, (uint64_t)a2);
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::ReverbSystem *)((char *)this + 192), &v48, (uint64_t *)&v50);
  re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 256, v50);
  unsigned int v14 = (char *)this + 304;
  unint64_t v15 = v50;
LABEL_50:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v14, v15);
  if (!*((unsigned char *)this + 368)) {
    return;
  }
  unint64_t v39 = *((void *)this + 39);
  int v40 = *((_DWORD *)this + 80);
  if (v39 >= 0xB)
  {
    if (v40) {
      __int16 v41 = (void *)((char *)this + 328);
    }
    else {
      __int16 v41 = (void *)*((void *)this + 42);
    }
    uint64_t v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43) {
        return;
      }
    }
LABEL_66:
    uint64_t v47 = (re::ecs2::System *)*((void *)this + 44);
    if (!*((unsigned char *)v47 + 86)) {
      re::ecs2::System::queueToRun(v47, 0.0);
    }
    return;
  }
  if (v40)
  {
    int v42 = (uint64_t *)((char *)this + 328);
    if (!v39) {
      return;
    }
  }
  else
  {
    int v42 = (uint64_t *)*((void *)this + 42);
    if (!v39) {
      return;
    }
  }
  uint64_t v44 = 0;
  uint64_t v45 = 8 * v39;
  do
  {
    uint64_t v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44) {
    goto LABEL_66;
  }
}

uint64_t re::ecs2::ReverbSystem::activateComponents(re *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 16);
      uint64_t v8 = (id)*re::audioLogObjects(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if (v7)
        {
          uint64_t v9 = *(const char **)(v7 + 280);
          uint64_t v10 = *(void *)(v7 + 296);
        }
        else
        {
          uint64_t v10 = 0;
          uint64_t v9 = "(null)";
        }
        uint64_t v11 = *(void *)(v6 + 32);
        int v12 = *(unsigned __int8 *)(v6 + 40);
        int v13 = *(unsigned __int16 *)(v6 + 42);
        *(_DWORD *)CMTime buf = 136316162;
        unint64_t v16 = v9;
        __int16 v17 = 2048;
        uint64_t v18 = v10;
        __int16 v19 = 1024;
        int v20 = v11;
        __int16 v21 = 1024;
        int v22 = v12;
        __int16 v23 = 1024;
        int v24 = v13;
        _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "ReverbSystem::activateComponents() ReverbComponent activating, name='%s', entityId=%llu, preset=%d, allowSpaceBlending=%d, priority=%d", buf, 0x28u);
      }

      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::ReverbSystem::deactivateComponents(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = &v31;
  if (a4)
  {
    uint64_t v6 = a1;
    uint64_t v7 = &a3[a4];
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *v8;
      uint64_t v10 = *(void **)(*v8 + 16);
      uint64_t v11 = (id)*re::audioLogObjects((re *)a1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if (v10)
        {
          int v12 = (const char *)v10[35];
          uint64_t v13 = v10[37];
        }
        else
        {
          uint64_t v13 = 0;
          int v12 = "(null)";
        }
        uint64_t v14 = *(void *)(v9 + 32);
        int v15 = *(unsigned __int8 *)(v9 + 40);
        int v16 = *(unsigned __int16 *)(v9 + 42);
        *(_DWORD *)CMTime buf = 136316162;
        unint64_t v34 = v12;
        __int16 v35 = 2048;
        uint64_t v36 = v13;
        __int16 v37 = 1024;
        int v38 = v14;
        __int16 v39 = 1024;
        int v40 = v15;
        __int16 v41 = 1024;
        int v42 = v16;
        _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "ReverbSystem::deactivateComponents() ReverbComponent deactivating, name='%s', entityId=%llu, preset=%d, allowSpaceBlending=%d, priority=%d", buf, 0x28u);
      }

      do
      {
        __int16 v17 = v10;
        uint64_t v10 = (void *)v10[3];
      }
      while (v10);
      unint64_t v18 = v17[2];
      __int16 v19 = v31;
      int v20 = &v31;
      __int16 v21 = &v31;
      if (v31)
      {
        while (1)
        {
          while (1)
          {
            __int16 v21 = (uint64_t **)v19;
            unint64_t v22 = v19[4];
            if (v22 <= v18) {
              break;
            }
            __int16 v19 = *v21;
            int v20 = v21;
            if (!*v21) {
              goto LABEL_17;
            }
          }
          if (v22 >= v18) {
            break;
          }
          __int16 v19 = v21[1];
          if (!v19)
          {
            int v20 = v21 + 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
LABEL_17:
        __int16 v23 = (uint64_t *)operator new(0x28uLL);
        v23[4] = v18;
        *__int16 v23 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v21;
        *int v20 = v23;
        if (*v30)
        {
          uint64_t v30 = (uint64_t **)*v30;
          int v24 = *v20;
        }
        else
        {
          int v24 = v23;
        }
        a1 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v31, v24);
        ++v32;
      }
      ++v8;
    }
    while (v8 != v7);
    uint64_t v25 = (uint64_t *)v30;
    if (v30 != &v31)
    {
      do
      {
        re::ecs2::ReverbSystem::updateLatestReverbPresetState(v6[13], v25[4], a3, a4);
        uint64_t v26 = (uint64_t *)v25[1];
        if (v26)
        {
          do
          {
            unint64_t v27 = (uint64_t **)v26;
            uint64_t v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            unint64_t v27 = (uint64_t **)v25[2];
            BOOL v28 = *v27 == v25;
            uint64_t v25 = (uint64_t *)v27;
          }
          while (!v28);
        }
        uint64_t v25 = (uint64_t *)v27;
      }
      while (v27 != &v31);
    }
  }
  std::__tree<re::ecs2::Scene *>::destroy(v31);
  return 0;
}

uint64_t re::ecs2::ReverbSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = this;
    uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(void *)&long long v17 = v3;
    *((void *)&v17 + 1) = re::ecs2::ReverbSystem::activateComponents;
    uint64_t v18 = 0;
    __int16 v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 216, &v17);
    *(void *)&long long v17 = v3;
    *((void *)&v17 + 1) = re::ecs2::ReverbSystem::deactivateComponents;
    uint64_t v18 = 0;
    __int16 v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v17);
    *(void *)&long long v17 = a2;
    uint64_t v5 = (uint64_t *)(v3 + 192);
    this = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v3 + 192), &v17);
    if (this != -1)
    {
      uint64_t v6 = *(void *)(v3 + 200) + 16 * this;
      re::DynamicBitset<unsigned long long,256ul>::setBit(v3 + 256, *(void *)(v6 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v3 + 304, *(void *)(v6 + 8));
      uint64_t v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v3 + 136, *(void *)(v6 + 8));
      if (*v7)
      {
        uint64_t v8 = v7;
        void *v7 = 0;
        uint64_t v9 = v7 + 1;
        uint64_t v10 = *(void *)(v7[1] + 288);
        if (v10)
        {
          uint64_t v11 = v7[12];
          if (v11)
          {
            for (unint64_t i = 0; i != v11; ++i)
            {
              uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
              re::EventBus::unsubscribe(v10, *(void *)v13, *(void *)(v13 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
        uint64_t v14 = 0;
        int v15 = v8 + 3;
        do
        {
          int v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
          if (*(void *)v16) {
            re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
          }
          v15[v14++] = -1;
        }
        while (v14 != 4);
        void *v9 = 0;
        v9[1] = 0;
      }
      return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v5, &v17);
    }
  }
  return this;
}

uint64_t re::ecs2::ReverbSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v27[0] = a3;
  v27[1] = a4;
  if (a2)
  {
    uint64_t v4 = result;
    if (*(void *)(result + 104))
    {
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v26);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25, 3148, v4);
      uint64_t v28 = a2;
      unint64_t v6 = *(void *)(*(void *)(v4 + 200)
                     + 16
                     * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 192), &v28)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v4 + 304, v6);
      uint64_t v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4 + 136, v6);
      uint64_t v8 = *(void *)(*v7 + 224);
      unint64_t v9 = v7[3];
      unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
      if (*(_DWORD *)(v10 + 40)) {
        int v11 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v8 + 24))(v8, v27, v7, v9, v10, 0);
      }
      else {
        int v11 = 0;
      }
      unint64_t v12 = v7[5];
      unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
      if (*(_DWORD *)(v13 + 40)) {
        v11 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v27, v7, v12, v13, 0);
      }
      unint64_t v14 = v7[6];
      unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
      if (*(_DWORD *)(v15 + 40))
      {
        if (((v11 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v8 + 40))(v8, v27, v7, v14, v15, 0)) & 1) == 0)goto LABEL_11; {
      }
        }
      else if (!v11)
      {
LABEL_11:
        if (*(unsigned char *)(v4 + 368))
        {
          unint64_t v16 = *(void *)(v4 + 312);
          int v17 = *(_DWORD *)(v4 + 320);
          if (v16 >= 0xB)
          {
            if (v17) {
              uint64_t v18 = (void *)(v4 + 328);
            }
            else {
              uint64_t v18 = *(void **)(v4 + 336);
            }
            uint64_t v20 = 8 * v16;
            while (!*v18)
            {
              ++v18;
              v20 -= 8;
              if (!v20) {
                goto LABEL_31;
              }
            }
LABEL_29:
            int v24 = *(re::ecs2::System **)(v4 + 352);
            if (!*((unsigned char *)v24 + 86)) {
              re::ecs2::System::queueToRun(v24, 0.0);
            }
            goto LABEL_31;
          }
          if ((v17 & 1) == 0)
          {
            __int16 v19 = *(uint64_t **)(v4 + 336);
            if (!v16) {
              goto LABEL_31;
            }
LABEL_26:
            uint64_t v21 = 0;
            uint64_t v22 = 8 * v16;
            do
            {
              uint64_t v23 = *v19++;
              v21 |= v23;
              v22 -= 8;
            }
            while (v22);
            if (!v21) {
              goto LABEL_31;
            }
            goto LABEL_29;
          }
          __int16 v19 = (uint64_t *)(v4 + 328);
          if (v16) {
            goto LABEL_26;
          }
        }
LABEL_31:
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v26);
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 304, v6);
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ReverbComponent>::dependsOnComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ReverbComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ReverbComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ReverbComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::ReverbSystem::~ReverbSystem(re::ecs2::ReverbSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ReverbSystem::typeInfo(re::ecs2::ReverbSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReverbSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReverbSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReverbSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReverbSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::ReverbSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ReverbSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::createSubscription<re::ecs2::ReverbSystem>(re::ecs2::ReverbSystem *,REEventHandlerResult (re::ecs2::ReverbSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Slice<re::ecs2::ReverbComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ReverbComponent>,re::Slice<re::ecs2::ReverbComponent*>>::Subscription const&,re::Slice<re::ecs2::ReverbComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FFD50;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E6FFDA8;
    v16[1] = a1;
    v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6FFE00;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    long long v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *uint64_t v28 = &unk_26E6FFE58;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        int v71 = 0;
        __int16 v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *__int16 v37 = &unk_26E6FFD50;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        int v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        __int16 v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *__int16 v41 = v38;
        v41[1] = v40;
        int v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6FFDA8;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        float32x4_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *uint64_t v49 = &unk_26E6FFE00;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FFE58;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        CMTimeEpoch v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *CMTimeEpoch v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FFD50;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FFD50;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FFDA8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FFDA8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FFE00;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FFE00;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FFE58;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FFE58;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void std::__tree<re::ecs2::Scene *>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<re::ecs2::Scene *>::destroy(*a1);
    std::__tree<re::ecs2::Scene *>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t re::ecs2::RigComponentHelper::areExternalDependenciesLoadedForRigGraph(re::ecs2::RigComponentHelper *this, const re::ecs2::RigComponent *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v5 = (re::ecs2::RigComponentHelper *)((char *)this + 32);
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    uint64_t v7 = *(const re::AssetType **)(v6 + 264);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = (void *)re::AssetHandle::assetWithType(v5, v7, 0);
  re::makeBindNode(*((re **)this + 2), (uint64_t)v29);
  uint64_t v9 = 0;
  if (!((uint64_t)v29[0] | (uint64_t)v29[2])) {
    goto LABEL_27;
  }
  uint64_t v27 = v8[17];
  if (!v27)
  {
LABEL_23:
    uint64_t v9 = 1;
    goto LABEL_27;
  }
  unint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = v8[12];
    if (v11) {
      break;
    }
LABEL_22:
    if (++v10 == v27) {
      goto LABEL_23;
    }
  }
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = (re::RigGraphNode *)v8[12];
    if ((unint64_t)v13 <= v12)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      __int16 v31 = 2048;
      unint64_t v32 = v12;
      __int16 v33 = 2048;
      unint64_t v34 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      __int16 v31 = 2048;
      unint64_t v32 = v10;
      __int16 v33 = 2048;
      unint64_t v34 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v14 = v8[14];
    uint64_t v15 = v14 + 40 * v12;
    if (v10 != *(_DWORD *)(v15 + 32)) {
      goto LABEL_21;
    }
    uint64_t v2 = (re::RigGraphNode *)v8[17];
    if ((unint64_t)v2 <= v10) {
      goto LABEL_29;
    }
    uint64_t v2 = (re::RigGraphNode *)(v8[19] + 200 * v10);
    uint64_t v16 = *((void *)v2 + 2);
    if (v16)
    {
      unint64_t v28 = v3;
      unint64_t v17 = 0;
      uint64_t v18 = (void *)*((void *)v2 + 4);
      while (!re::StringID::operator==((void *)v15, v18))
      {
        ++v17;
        v18 += 5;
        if (v16 == v17)
        {
          unint64_t v3 = v28;
          goto LABEL_18;
        }
      }
      unint64_t v3 = v17;
    }
LABEL_18:
    unint64_t v19 = (void *)re::RigGraphNode::inputType(v2, v3);
    if (!re::StringID::operator==(v19, re::ecs2::RigComponentHelper::areExternalDependenciesLoadedForRigGraph(re::ecs2::RigComponent const&)::rigHierarchyStr))goto LABEL_21; {
    uint64_t v20 = v14 + 40 * v12;
    }
    uint64_t v22 = *(const char **)(v20 + 24);
    unint64_t v21 = (uint64_t *)(v20 + 24);
    size_t v23 = strlen(v22);
    *(void *)CMTime buf = v22;
    *(void *)&buf[8] = v23;
    re::BindNode::bindPointWithOverride<re::SkeletalPose>(v29, (uint64_t *)buf, (uint64_t)&v35);
    if (!re::BindPoint::valueUntyped((re::BindPoint *)&v35)) {
      break;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v35 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v35 + 8);
LABEL_21:
    if (++v12 == v11) {
      goto LABEL_22;
    }
  }
  uint64_t v24 = *re::assetsLogObjects(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *v21;
    *(_DWORD *)CMTime buf = 136315138;
    *(void *)&uint8_t buf[4] = v25;
    _os_log_impl(&dword_233120000, v24, OS_LOG_TYPE_DEFAULT, "RigHierarchy Input Binding path could not be resolved: %s", buf, 0xCu);
  }
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v35 + 8);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v35 + 8);
  uint64_t v9 = 0;
LABEL_27:
  re::BindNode::deinit((re::BindNode *)v29);
  return v9;
}

uint64_t re::ecs2::RigComponentHelper::areAssetAndDependenciesLoaded(re::ecs2::RigComponentHelper *this, const re::ecs2::RigComponent *a2)
{
  uint64_t v2 = *((void *)this + 5);
  if (!v2) {
    goto LABEL_7;
  }
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 704));
  if (v3 != 2) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 5);
  if (!v5)
  {
LABEL_7:
    re::RigGraphAsset::assetType(this);
    return 1;
  }
  uint64_t v6 = *(uint64_t **)(v5 + 264);
  if (v6 != re::RigGraphAsset::assetType(this)) {
    return 1;
  }
  uint64_t result = re::ecs2::RigComponentHelper::areExternalDependenciesLoadedForRigGraph(this, v7);
  if (result) {
    return 1;
  }
  return result;
}

void re::ecs2::ECSSimulationEventDelegate::preSimulation(id *location, __n128 a2, char a3, re::PhysicsSimulation *a4)
{
  uint64_t v7 = location + 3;
  unint64_t v8 = (const re::ecs2::Scene *)location[2];
  if (!location[3]) {
    goto LABEL_7;
  }
  unsigned __int32 v9 = a2.n128_u32[0];
  uint64_t v10 = *((void *)v8 + 36);
  id WeakRetained = objc_loadWeakRetained(location + 3);
  unint64_t v12 = WeakRetained;
  if (WeakRetained) {
    uint64_t v13 = (uint64_t)WeakRetained - 8;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsWillSimulateEvent>(v10, v13);
  uint64_t v15 = v14;
  if (!v12)
  {
    if (v14) {
      goto LABEL_10;
    }
LABEL_7:
    if (a3) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v16 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsWillSimulateEvent>(v10, 0);

  if (!(v16 + v15)) {
    goto LABEL_7;
  }
LABEL_10:
  id v17 = objc_loadWeakRetained(v7);
  if (v17) {
    uint64_t v18 = (uint64_t)v17 - 8;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17) {

  }
  unint64_t v19 = (re::EventBus *)*((void *)v8 + 36);
  unsigned __int32 v23 = v9;
  uint64_t v24 = v18;
  uint64_t Type = re::EventBus::getTypeId<REEntityPhysicsWillSimulateEvent>();
  re::EventBus::publish(v19, v18, Type, (uint64_t)&v23, 0x10uLL, 0);
  (*(void (**)(void))(**((void **)v8 + 7) + 200))(*((void *)v8 + 7));
  uint64_t v21 = (*(uint64_t (**)(void))(**((void **)v8 + 7) + 32))(*((void *)v8 + 7));
  uint64_t v22 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v21);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 56))(v22, 1);
LABEL_16:
  if (location[1])
  {
    (*(void (**)(void, __n128))(**((void **)v8 + 7) + 200))(*((void *)v8 + 7), a2);
    re::ecs2::PhysicsSystem::ecsToSim((re::ecs2::PhysicsSystem *)location[1], v8, a4);
  }
}

void re::ecs2::ECSSimulationEventDelegate::postSimulation(re::ecs2::ECSSimulationEventDelegate *this, float a2, re::PhysicsSimulation *a3)
{
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 176);
    if (v8)
    {
      unsigned __int32 v9 = *(uint64_t **)(v6 + 184);
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v9++;
        (*(void (**)(uint64_t, re::PhysicsSimulation *, uint64_t))(*(void *)v11 + 64))(v11, a3, v7);
        v10 -= 8;
      }
      while (v10);
    }
  }
  if (a2 > 0.0)
  {
    (*(void (**)(void))(**((void **)a3 + 7) + 208))(*((void *)a3 + 7));
    uint64_t v13 = *((void *)this + 3);
    unint64_t v12 = (id *)((char *)this + 24);
    if (v13)
    {
      uint64_t v14 = *(void *)(v7 + 288);
      id WeakRetained = objc_loadWeakRetained(v12);
      uint64_t v16 = WeakRetained;
      if (WeakRetained) {
        uint64_t v17 = (uint64_t)WeakRetained - 8;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsDidSimulateEvent>(v14, v17);
      uint64_t v19 = v18;
      if (v16)
      {
        uint64_t v20 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsDidSimulateEvent>(v14, 0);

        if (!(v20 + v19)) {
          return;
        }
      }
      else if (!v18)
      {
        return;
      }
      id v21 = objc_loadWeakRetained(v12);
      if (v21) {
        uint64_t v22 = (uint64_t)v21 - 8;
      }
      else {
        uint64_t v22 = 0;
      }
      if (v21) {

      }
      unsigned __int32 v23 = *(re::EventBus **)(v7 + 288);
      float v25 = a2;
      uint64_t v26 = v22;
      uint64_t Type = re::EventBus::getTypeId<REEntityPhysicsDidSimulateEvent>();
      re::EventBus::publish(v23, v22, Type, (uint64_t)&v25, 0x10uLL, 0);
      (*(void (**)(void))(**(void **)(v7 + 56) + 200))(*(void *)(v7 + 56));
    }
  }
}

uint64_t re::ecs2::ECSSimulationEventDelegate::simulationPausedTick(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 176);
    if (v3)
    {
      uint64_t v5 = *(void *)(result + 16);
      uint64_t v6 = *(uint64_t **)(v2 + 184);
      uint64_t v7 = 8 * v3;
      do
      {
        uint64_t v8 = *v6++;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 64))(v8, a2, v5);
        v7 -= 8;
      }
      while (v7);
    }
  }
  return result;
}

void re::ecs2::ECSSimulationEventDelegate::~ECSSimulationEventDelegate(id *this)
{
  *this = &unk_26E6FFEB0;
  objc_destroyWeak(this + 3);
  this[3] = 0;
}

{
  uint64_t vars8;

  *this = &unk_26E6FFEB0;
  objc_destroyWeak(this + 3);
  this[3] = 0;
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsWillSimulateEvent>(uint64_t a1, uint64_t a2)
{
  v9[0] = re::EventBus::getTypeId<REEntityPhysicsWillSimulateEvent>();
  uint64_t v4 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), v9);
  if (v4 == -1) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 48 * v4 + 8);
  if (!v5) {
    return 0;
  }
  if (!a2)
  {
    uint64_t v7 = v5 + 88;
    return *(void *)(v7 + 120);
  }
  v9[0] = a2;
  v9[1] = 0;
  uint64_t v6 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(v5 + 216), v9);
  if (v6 == -1) {
    return 0;
  }
  uint64_t v7 = *(void *)(v5 + 224) + 144 * v6 + 16;
  return *(void *)(v7 + 120);
}

uint64_t re::EventBus::getTypeId<REEntityPhysicsWillSimulateEvent>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88888))
  {
    _MergedGlobals_237 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32REEntityPhysicsWillSimulateEvent" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF88888);
  }
  return _MergedGlobals_237;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityPhysicsDidSimulateEvent>(uint64_t a1, uint64_t a2)
{
  v9[0] = re::EventBus::getTypeId<REEntityPhysicsDidSimulateEvent>();
  uint64_t v4 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), v9);
  if (v4 == -1) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 48 * v4 + 8);
  if (!v5) {
    return 0;
  }
  if (!a2)
  {
    uint64_t v7 = v5 + 88;
    return *(void *)(v7 + 120);
  }
  v9[0] = a2;
  v9[1] = 0;
  uint64_t v6 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(v5 + 216), v9);
  if (v6 == -1) {
    return 0;
  }
  uint64_t v7 = *(void *)(v5 + 224) + 144 * v6 + 16;
  return *(void *)(v7 + 120);
}

uint64_t re::EventBus::getTypeId<REEntityPhysicsDidSimulateEvent>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88898))
  {
    qword_26AF88890 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"31REEntityPhysicsDidSimulateEvent" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF88898);
  }
  return qword_26AF88890;
}

uint64_t re::ecs2::MipmapGenerationSystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 104);
  if (!v3 || (*(unsigned char *)(v3 + 424) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)(result + 112) + 104);
    if (v4 && re::RenderFrameBox::get(v4 + 344, 0xFFFFFFFFFFFFFFFuLL))
    {
      uint64_t v5 = *(void *)(v2 + 112);
      uint64_t v6 = *(void *)(v5 + 104);
      if (v6)
      {
        uint64_t v7 = re::RenderFrameBox::get(v6 + 344, 0xFFFFFFFFFFFFFFFuLL);
        uint64_t v5 = *(void *)(v2 + 112);
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v12 = 0;
      v9[1] = 0;
      uint64_t v10 = 0;
      v9[0] = 0;
      int v11 = 0;
      re::TextureManager::dequeueMipmapGeneration(*(os_unfair_lock_s **)(v5 + 64), (uint64_t)v8);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v9, (uint64_t)v8);
      re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v8);
      if (v10) {
        (*(void (**)(void, void *))(**(void **)(v7 + 320) + 16))(*(void *)(v7 + 320), v9);
      }
      return re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v9);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager->renderFrame()", "updateScenes", 19);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void *re::ecs2::allocInfo_MipmapGenerationSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_238))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF888A8, "MipmapGenerationSystem");
    __cxa_guard_release(&_MergedGlobals_238);
  }
  return &unk_26AF888A8;
}

void re::ecs2::initInfo_MipmapGenerationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x7C4B2F6E5830485ELL;
  v5[1] = "MipmapGenerationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_MipmapGenerationSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MipmapGenerationSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MipmapGenerationSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::MipmapGenerationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MipmapGenerationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MipmapGenerationSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MipmapGenerationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::MipmapGenerationSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E6FFF10;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::MipmapGenerationSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::MipmapGenerationSystem>(_OWORD *a1)
{
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E6FFF10;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::MipmapGenerationSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MipmapGenerationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MipmapGenerationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MipmapGenerationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MipmapGenerationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MipmapGenerationSystem>, this);
}

void re::ecs2::MipmapGenerationSystem::~MipmapGenerationSystem(re::ecs2::MipmapGenerationSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::MipmapGenerationSystem::typeInfo(re::ecs2::MipmapGenerationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MipmapGenerationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MipmapGenerationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MipmapGenerationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MipmapGenerationSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::MipmapGenerationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MipmapGenerationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void re::ecs2::TintManager::updateTintData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 88);
  if (v4)
  {
    uint64_t v5 = 0;
    long long v6 = (int *)(*(void *)(a1 + 72) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 6;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 88);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    unsigned int v44 = *(_DWORD *)(a1 + 88);
    uint64_t v45 = (unint64_t *)(a1 + 8);
    unsigned int v9 = v44;
    do
    {
      unint64_t v10 = *(void *)(*(void *)(a1 + 72) + 24 * v8 + 16);
      if (!*(void *)(a1 + 8)
        || (unint64_t v11 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27)),
            uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * ((v11 ^ (v11 >> 31)) % *(unsigned int *)(a1 + 32))),
            v12 == 0x7FFFFFFF))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 8))(&v53);
        if ((_BYTE)v53) {
          uint64_t v14 = v54;
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v15 = *(void *)(v10 + 24);
        for (i = 1.0; v15; unint64_t v15 = *(void *)(v15 + 24))
        {
          if ((*(unsigned char *)(v15 + 288) & 0x80) != 0) {
            break;
          }
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 8))(&v53);
          uint64_t v17 = (_BYTE)v53 ? v54 : 0;
          if (v14 != v17) {
            break;
          }
          if (*v45)
          {
            unint64_t v18 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
            uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * ((v18 ^ (v18 >> 31)) % *(unsigned int *)(a1 + 32)));
            if (v19 != 0x7FFFFFFF)
            {
              uint64_t v20 = *(void *)(a1 + 24);
              while (*(void *)(v20 + 32 * v19 + 16) != v15)
              {
                uint64_t v19 = *(_DWORD *)(v20 + 32 * v19 + 8) & 0x7FFFFFFF;
                if (v19 == 0x7FFFFFFF) {
                  goto LABEL_28;
                }
              }
              unsigned __int32 i = *(_DWORD *)(v20 + 32 * v19 + 24);
              break;
            }
          }
LABEL_28:
          uint64_t v21 = *(void *)(v15 + 160);
          if (v21 && *(float *)(v21 + 28) != 0.0) {
            unint64_t v10 = v15;
          }
        }
        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v53);
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        int v48 = 1;
        uint64_t v50 = 0;
        unint64_t v51 = 0;
        uint64_t v49 = 0;
        int v52 = 0;
        re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::init((uint64_t)&v46, (uint64_t)&v53, 1uLL);
        v55.n128_u64[0] = v10;
        v55.n128_u32[2] = i;
        __n128 v22 = re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::add((uint64_t)&v46, &v55);
LABEL_35:
        unint64_t v23 = v51;
        while (v23)
        {
          uint64_t v24 = re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v46, --v23);
          unint64_t v25 = *(void *)v24;
          float v26 = *(float *)(v24 + 8);
          re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v46, v23);
          unint64_t v51 = v23;
          ++v52;
          if (*(unsigned char *)(v25 + 288))
          {
            uint64_t v27 = *(void *)(v25 + 160);
            if (v27)
            {
              v22.n128_f32[0] = 1.0 - *(float *)(v27 + 28);
              float v26 = v26 * v22.n128_f32[0];
            }
            if (v26 != 1.0)
            {
              unint64_t v28 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) >> 27));
              unint64_t v29 = v28 ^ (v28 >> 31);
              unint64_t v30 = *v45;
              if (!*v45
                || (unint64_t v30 = v29 % *(unsigned int *)(a1 + 32),
                    uint64_t v31 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * v30),
                    v31 == 0x7FFFFFFF))
              {
LABEL_46:
                uint64_t v33 = *(unsigned int *)(a1 + 44);
                if (v33 == 0x7FFFFFFF)
                {
                  uint64_t v33 = *(unsigned int *)(a1 + 40);
                  int v34 = v33;
                  if (v33 == *(_DWORD *)(a1 + 32))
                  {
                    re::HashTable<re::ecs2::Entity const*,float,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v45, 2 * *(_DWORD *)(a1 + 36));
                    unint64_t v30 = v29 % *(unsigned int *)(a1 + 32);
                    int v34 = *(_DWORD *)(a1 + 40);
                  }
                  *(_DWORD *)(a1 + 40) = v34 + 1;
                  uint64_t v35 = *(void *)(a1 + 24);
                  int v36 = *(_DWORD *)(v35 + 32 * v33 + 8);
                }
                else
                {
                  uint64_t v35 = *(void *)(a1 + 24);
                  int v36 = *(_DWORD *)(v35 + 32 * v33 + 8);
                  *(_DWORD *)(a1 + 44) = v36 & 0x7FFFFFFF;
                }
                *(_DWORD *)(v35 + 32 * v33 + 8) = v36 | 0x80000000;
                *(_DWORD *)(*(void *)(a1 + 24) + 32 * v33 + 8) = *(_DWORD *)(*(void *)(a1 + 24) + 32 * v33 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 16) + 4 * v30);
                *(void *)(*(void *)(a1 + 24) + 32 * v33) = v29;
                *(void *)(*(void *)(a1 + 24) + 32 * v33 + 16) = v25;
                *(float *)(*(void *)(a1 + 24) + 32 * v33 + 24) = v26;
                *(_DWORD *)(*(void *)(a1 + 16) + 4 * v30) = v33;
                ++*(_DWORD *)(a1 + 36);
                ++*(_DWORD *)(a1 + 48);
              }
              else
              {
                uint64_t v32 = *(void *)(a1 + 24);
                while (*(void *)(v32 + 32 * v31 + 16) != v25)
                {
                  uint64_t v31 = *(_DWORD *)(v32 + 32 * v31 + 8) & 0x7FFFFFFF;
                  if (v31 == 0x7FFFFFFF) {
                    goto LABEL_46;
                  }
                }
              }
            }
            uint64_t v37 = *(void *)(v25 + 328);
            if (v37)
            {
              long long v38 = *(unint64_t **)(v25 + 344);
              uint64_t v39 = 8 * v37;
              do
              {
                unint64_t v40 = *v38;
                (*(void (**)(__n128 *__return_ptr))(**(void **)a2 + 8))(&v55);
                if (v55.n128_u8[0]) {
                  unint64_t v41 = v55.n128_u64[1];
                }
                else {
                  unint64_t v41 = 0;
                }
                v55.n128_u64[0] = v40;
                if (v14 == v41) {
                  v55.n128_f32[2] = v26;
                }
                else {
                  v55.n128_u32[2] = 1065353216;
                }
                __n128 v22 = re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::add((uint64_t)&v46, &v55);
                ++v38;
                v39 -= 8;
              }
              while (v39);
              goto LABEL_35;
            }
          }
        }
        while (v47)
          re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(&v46);
        if (v46 && (v48 & 1) == 0) {
          (*(void (**)(__n128))(*(void *)v46 + 40))(v22);
        }
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v53);
        unsigned int v9 = *(_DWORD *)(a1 + 88);
        LODWORD(v4) = v44;
      }
      else
      {
        uint64_t v13 = *(void *)(a1 + 24);
        while (*(void *)(v13 + 32 * v12 + 16) != v10)
        {
          uint64_t v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
          if (v12 == 0x7FFFFFFF) {
            goto LABEL_14;
          }
        }
      }
      if (v9 <= (int)v5 + 1) {
        unsigned int v42 = v5 + 1;
      }
      else {
        unsigned int v42 = v9;
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v42 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        unsigned int v43 = v8;
        if ((*(_DWORD *)(*(void *)(a1 + 72) + 24 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_75;
        }
      }
      unsigned int v43 = v42;
LABEL_75:
      LODWORD(v5) = v43;
    }
    while (v4 != v43);
  }
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 56);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 104);
}

uint64_t re::ecs2::TintManager::registerScene(re::ecs2::TintManager *this, re::EventBus **a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  int v48 = (re::ecs2::Scene *)a2;
  uint64_t v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track tint changes.", "eventBus", "registerScene", 31);
    _os_crash();
    __break(1u);
  }
  v42[0] = 0;
  v42[1] = 0;
  int v43 = 1;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v44 = 0;
  int v47 = 0;
  uint64_t v5 = 0;
  v55[0] = re::ecs2::ComponentImpl<re::ecs2::HierarchicalTintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v55[1] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  do
  {
    uint64_t v6 = v55[v5];
    uint64_t v57 = re::globalAllocators((re *)v4)[2];
    int v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v57 + 32))(v57, 32, 0);
    void *v7 = &unk_26E7000B8;
    v7[1] = this;
    uint64_t v7[2] = re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
    v7[3] = 0;
    uint64_t v58 = v7;
    uint64_t v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v56, v6, 0);
    uint64_t v10 = v9;
    unint64_t v11 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
    *unint64_t v11 = v8;
    v11[1] = v10;
    uint64_t v12 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v56);
    uint64_t v57 = re::globalAllocators(v12)[2];
    uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v57 + 32))(v57, 32, 0);
    void *v13 = &unk_26E700110;
    v13[1] = this;
    void v13[2] = re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentDidAddEvent>;
    v13[3] = 0;
    uint64_t v58 = v13;
    uint64_t v14 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v56, v6, 0);
    uint64_t v16 = v15;
    uint64_t v17 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
    void *v17 = v14;
    v17[1] = v16;
    unint64_t v18 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v56);
    uint64_t v57 = re::globalAllocators(v18)[2];
    uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v57 + 32))(v57, 32, 0);
    void *v19 = &unk_26E700168;
    v19[1] = this;
    v19[2] = re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentWillRemoveEvent>;
    v19[3] = 0;
    uint64_t v58 = v19;
    uint64_t v20 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v56, v6, 0);
    uint64_t v22 = v21;
    unint64_t v23 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
    *unint64_t v23 = v20;
    v23[1] = v22;
    uint64_t v4 = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v56);
    ++v5;
  }
  while (v5 != 2);
  uint64_t v57 = re::globalAllocators((re *)v4)[2];
  uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v57 + 32))(v57, 32, 0);
  *uint64_t v24 = &unk_26E7001C0;
  v24[1] = this;
  v24[2] = re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  v24[3] = 0;
  uint64_t v58 = v24;
  uint64_t v25 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v56, 0, 0);
  uint64_t v27 = v26;
  unint64_t v28 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
  *unint64_t v28 = v25;
  v28[1] = v27;
  unint64_t v29 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v56);
  uint64_t v53 = re::globalAllocators(v29)[2];
  unint64_t v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v53 + 32))(v53, 32, 0);
  *unint64_t v30 = &unk_26E700008;
  v30[1] = this;
  v30[2] = re::ecs2::TintManager::activateEntityEventHandler;
  v30[3] = 0;
  uint64_t v54 = v30;
  uint64_t v31 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v52, 0, 0);
  uint64_t v33 = v32;
  int v34 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
  *int v34 = v31;
  v34[1] = v33;
  uint64_t v35 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)v52);
  uint64_t v50 = re::globalAllocators(v35)[2];
  int v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v50 + 32))(v50, 32, 0);
  *int v36 = &unk_26E700060;
  v36[1] = this;
  v36[2] = re::ecs2::TintManager::deactivateEntityEventHandler;
  v36[3] = 0;
  unint64_t v51 = v36;
  uint64_t v37 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v49, 0, 0);
  uint64_t v39 = v38;
  unint64_t v40 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v42);
  *unint64_t v40 = v37;
  v40[1] = v39;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v49);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 152, (uint64_t *)&v48, (uint64_t)v42);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v42);
  uint64_t result = v42[0];
  if (v42[0])
  {
    if ((v43 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v42[0] + 40))();
    }
  }
  return result;
}

uint64_t re::ecs2::TintManager::activateEntityEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 56, &v4);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v4);
  return 0;
}

uint64_t re::ecs2::TintManager::deactivateEntityEventHandler(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(a1 + 8, a2);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 56, (uint64_t *)&v4);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 104, (uint64_t *)&v4);
  return 0;
}

void re::ecs2::TintManager::unregisterScene(re::ecs2::TintManager *this, re::ecs2::Scene *a2)
{
  unint64_t v30 = a2;
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v29);
  v23[0] = 0;
  v23[1] = 0;
  int v24 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  int v28 = 0;
  re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v23, (uint64_t)v29, 1uLL);
  uint64_t v4 = *((void *)a2 + 13);
  uint64_t v5 = *(void *)(v4 + 328);
  if (v5)
  {
    uint64_t v6 = *(re::ecs2::Entity ***)(v4 + 344);
    int v7 = &v6[v5];
    do
    {
      uint64_t v8 = *v6;
      if (*((unsigned char *)*v6 + 288))
      {
        re::ecs2::TintManager::clearEntityHierarchyTint(this, *v6);
        uint64_t v9 = v27;
        if (v27)
        {
          unint64_t v10 = 0;
          do
            re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v23, v10++);
          while (v9 != v10);
        }
        uint64_t v27 = 0;
        ++v28;
        *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v23) = v8;
        while (v27)
        {
          uint64_t v22 = 0;
          uint64_t v22 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v23, v27 - 1);
          re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v23, --v27);
          ++v28;
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 56, &v22);
          uint64_t v11 = *(void *)(v22 + 328);
          if (v11)
          {
            uint64_t v12 = *(uint64_t **)(v22 + 344);
            uint64_t v13 = 8 * v11;
            do
            {
              uint64_t v14 = *v12++;
              *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v23) = v14;
              v13 -= 8;
            }
            while (v13);
          }
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  uint64_t v15 = (char *)this + 152;
  uint64_t v16 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v15, (uint64_t *)&v30);
  if (v16)
  {
    uint64_t v17 = *((void *)v30 + 36);
    if (v17)
    {
      uint64_t v18 = v16;
      uint64_t v19 = *(void *)(v16 + 40);
      if (v19)
      {
        for (unint64_t i = 0; i != v19; ++i)
        {
          uint64_t v21 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v18, i);
          re::EventBus::unsubscribe(v17, *(void *)v21, *(void *)(v21 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v15, (uint64_t *)&v30);
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v23);
  if (v23[0] && (v24 & 1) == 0) {
    (*(void (**)(void))(*(void *)v23[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v29);
}

void re::ecs2::TintManager::clearEntityHierarchyTint(re::ecs2::TintManager *this, re::ecs2::Entity *a2)
{
  if (*((_DWORD *)this + 9))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    int v12 = 1;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    int v16 = 0;
    re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v11) = a2;
    uint64_t v4 = v15;
    if (v15)
    {
      uint64_t v5 = (char *)this + 8;
      do
      {
        unint64_t v6 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
        ++v16;
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove((uint64_t)v5, v6);
        uint64_t v7 = *(void *)(v6 + 328);
        if (v7)
        {
          uint64_t v8 = *(uint64_t **)(v6 + 344);
          uint64_t v9 = 8 * v7;
          do
          {
            uint64_t v10 = *v8++;
            *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v11) = v10;
            v9 -= 8;
          }
          while (v9);
        }
        uint64_t v4 = v15;
      }
      while (v15);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0])
    {
      if ((v12 & 1) == 0) {
        (*(void (**)(void))(*(void *)v11[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

__n128 re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::setBucketsCapacity((void *)a1, (v4 + 32) >> 5);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v6 = a1 + 24;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(v6 + 8 * (v4 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  __n128 result = *a2;
  *(__n128 *)(v7 + 16 * (v4 & 0x1F)) = *a2;
  return result;
}

void re::ecs2::TintManager::~TintManager(re::ecs2::TintManager *this)
{
  re::ecs2::TintManager::~TintManager(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 1);
}

uint64_t re::ecs2::TintManager::tintFactorPerEntity(re::ecs2::TintManager *this)
{
  return (uint64_t)this + 8;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700008;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700008;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700060;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700060;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(re::ecs2::TintManager *a1, re::ecs2::Entity *a2)
{
  unint64_t v5 = a2;
  if (*((unsigned char *)a2 + 288))
  {
    uint64_t v3 = (uint64_t)a1 + 56;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 56, (uint64_t *)&v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 104, (uint64_t *)&v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, (uint64_t *)&v5);
      re::ecs2::TintManager::clearEntityHierarchyTint(a1, v5);
    }
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7000B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7000B8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentDidAddEvent>(re::ecs2::TintManager *a1, re::ecs2::Entity *a2)
{
  unint64_t v5 = a2;
  if (*((unsigned char *)a2 + 288))
  {
    uint64_t v3 = (uint64_t)a1 + 56;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 56, (uint64_t *)&v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 104, (uint64_t *)&v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, (uint64_t *)&v5);
      re::ecs2::TintManager::clearEntityHierarchyTint(a1, v5);
    }
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700110;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700110;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<REComponentWillRemoveEvent>(re::ecs2::TintManager *a1, re::ecs2::Entity *a2)
{
  unint64_t v5 = a2;
  if (*((unsigned char *)a2 + 288))
  {
    uint64_t v3 = (uint64_t)a1 + 56;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 56, (uint64_t *)&v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 104, (uint64_t *)&v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, (uint64_t *)&v5);
      re::ecs2::TintManager::clearEntityHierarchyTint(a1, v5);
    }
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700168;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700168;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::TintManager::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(re::ecs2::TintManager *a1, re::ecs2::Entity *a2)
{
  unint64_t v5 = a2;
  if (*((unsigned char *)a2 + 288))
  {
    uint64_t v3 = (uint64_t)a1 + 56;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 56, (uint64_t *)&v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)a1 + 104, (uint64_t *)&v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, (uint64_t *)&v5);
      re::ecs2::TintManager::clearEntityHierarchyTint(a1, v5);
    }
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7001C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7001C0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::TintManager,REEventHandlerResult (re::ecs2::TintManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::TintManager::buildTintForEntityHierarchy(re::ecs2::Entity *,re::ecs2::WorldRootProvider const&)::EntityTint,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        unint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 512, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,float,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)int v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = v7;
        int v14 = DWORD1(v9);
        do
        {
          uint64_t v15 = (uint64_t *)(*(void *)&v24[16] + v11);
          if ((*(_DWORD *)(*(void *)&v24[16] + v11 + 8) & 0x80000000) != 0)
          {
            unint64_t v16 = *v15;
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = *v15 % v17;
            uint64_t v19 = *(unsigned int *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              uint64_t v19 = *(unsigned int *)(a1 + 32);
              int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<re::ecs2::Entity const*,float,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v14));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 32 * v19 + 8) = v22 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v19 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v19 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(void *)(*(void *)(a1 + 16) + 32 * v19) = v16;
            *(void *)(*(void *)(a1 + 16) + 32 * v19 + 16) = v15[2];
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v19 + 24) = *((_DWORD *)v15 + 6);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            int v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            unsigned int v10 = *(_DWORD *)&v24[32];
          }
          ++v12;
          v11 += 32;
        }
        while (v12 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

uint64_t re::EngineMotionStateEventDelegate::updateMotionState(uint64_t this, const re::RigidBody *a2, char a3)
{
  uint64_t v4 = *(void *)(*((void *)a2 + 9) + 40);
  if (v4)
  {
    uint64_t v5 = v4;
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = *(void *)(v5 + 24);
    }
    while (v5);
    if (!*(void *)(v6 + 16)) {
      goto LABEL_8;
    }
    uint64_t v7 = v4;
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = *(void *)(v7 + 24);
    }
    while (v7);
    long long v9 = *(re::EventBus **)(*(void *)(v8 + 16) + 288);
    if (!v9) {
LABEL_8:
    }
      long long v9 = *(re::EventBus **)(this + 8);
    uint64_t v13 = a2;
    char v14 = a3;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88928, memory_order_acquire) & 1) == 0)
    {
      uint64_t v11 = (const char *)v4;
      unint64_t v12 = v9;
      int v10 = __cxa_guard_acquire(&qword_26AF88928);
      uint64_t v4 = (uint64_t)v11;
      long long v9 = v12;
      if (v10)
      {
        _MergedGlobals_239 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"27REMotionStateDidChangeEvent" & 0x7FFFFFFFFFFFFFFFLL), v11);
        __cxa_guard_release(&qword_26AF88928);
        uint64_t v4 = (uint64_t)v11;
        long long v9 = v12;
      }
    }
    return re::EventBus::publish(v9, v4, _MergedGlobals_239, (uint64_t)&v13, 0x10uLL, 0);
  }
  return this;
}

void re::EngineMotionStateEventDelegate::~EngineMotionStateEventDelegate(re::EngineMotionStateEventDelegate *this)
{
}

void *re::ecs2::allocInfo_PlanarReflectionCaptureComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88940))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88970, "PlanarReflectionCaptureComponent");
    __cxa_guard_release(&qword_26AF88940);
  }
  return &unk_26AF88970;
}

void re::ecs2::initInfo_PlanarReflectionCaptureComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x28414266274E86F8;
  v9[1] = "PlanarReflectionCaptureComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88938, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF88938);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      _MergedGlobals_240 = v7;
      __cxa_guard_release(&qword_26AF88938);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &_MergedGlobals_240;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PlanarReflectionCaptureComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PlanarReflectionCaptureComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PlanarReflectionCaptureComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PlanarReflectionCaptureComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::PlanarReflectionCaptureComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EE808;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PlanarReflectionCaptureComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::PlanarReflectionCaptureComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EE808;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PlanarReflectionCaptureComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PlanarReflectionCaptureComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PlanarReflectionCaptureComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PlanarReflectionCaptureComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PlanarReflectionCaptureComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PlanarReflectionCaptureComponent>, this);
}

void *re::ecs2::allocInfo_PlanarReflectionReceiverComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88950, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88950))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF889E8, "PlanarReflectionReceiverComponent");
    __cxa_guard_release(&qword_26AF88950);
  }
  return &unk_26AF889E8;
}

void re::ecs2::initInfo_PlanarReflectionReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x4B7E6CB8AD15EA92;
  v13[1] = "PlanarReflectionReceiverComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88948, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF88948);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88960 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "captureEntity";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF88968 = v11;
      __cxa_guard_release(&qword_26AF88948);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF88960;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PlanarReflectionReceiverComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PlanarReflectionReceiverComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PlanarReflectionReceiverComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PlanarReflectionReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::PlanarReflectionReceiverComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v4 = (id *)((char *)this + 32);
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  *(void *)this = &unk_26E6EE9A8;
  objc_initWeak(v4, 0);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v4);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PlanarReflectionReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::PlanarReflectionReceiverComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EE9A8;
  objc_initWeak(v2, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v2);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PlanarReflectionReceiverComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PlanarReflectionReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PlanarReflectionReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PlanarReflectionReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PlanarReflectionReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PlanarReflectionReceiverComponent>, this);
}

void *re::ecs2::allocInfo_PlanarReflectionSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88958, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88958))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88A60, "PlanarReflectionSystem");
    __cxa_guard_release(&qword_26AF88958);
  }
  return &unk_26AF88A60;
}

void re::ecs2::initInfo_PlanarReflectionSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x9B1399D5F4C5728;
  v5[1] = "PlanarReflectionSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PlanarReflectionSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PlanarReflectionSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PlanarReflectionSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PlanarReflectionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PlanarReflectionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PlanarReflectionSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PlanarReflectionSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::PlanarReflectionSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E700268;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 192) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 196) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PlanarReflectionSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 20);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::PlanarReflectionSystem>(_OWORD *a1)
{
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E700268;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 196) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PlanarReflectionSystem>(void *a1)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 20);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PlanarReflectionSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PlanarReflectionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PlanarReflectionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PlanarReflectionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PlanarReflectionSystem>, this);
}

uint64_t (***re::ecs2::PlanarReflectionSystem::willAddSceneToECSService(re::ecs2::PlanarReflectionSystem *this, re::EventBus **a2))(void)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v9 = (re::ecs2::Scene *)a2;
  uint64_t v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for PlanarReflectionSystem to track parameter changes.", "eventBus", "willAddSceneToECSService", 62);
    _os_crash();
    __break(1u);
  }
  long long v4 = (char *)this + 160;
  uint64_t v11 = re::globalAllocators(this)[2];
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v11 + 32))(v11, 32, 0);
  *uint64_t v5 = &unk_26E7002F8;
  v5[1] = this;
  void v5[2] = re::ecs2::PlanarReflectionSystem::componentWillDeactivateEventHandler;
  v5[3] = 0;
  long long v12 = v5;
  *(void *)&long long v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v2, (uint64_t)v10, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
  *((void *)&v8 + 1) = v6;
  re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addNew((uint64_t)v4, (uint64_t *)&v9, &v8);
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v10);
}

uint64_t re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addNew(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 40 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 40 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 40 * v10;
  return v12 + 24;
}

uint64_t re::ecs2::PlanarReflectionSystem::componentWillDeactivateEventHandler(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::PlanarReflectionSystem::willRemoveSceneFromECSService(re::ecs2::PlanarReflectionSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v11 = (unint64_t)a2;
  uint64_t v3 = *((void *)a2 + 36);
  long long v4 = (void *)((char *)this + 160);
  uint64_t result = re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey((uint64_t)this + 160, (uint64_t *)&v11);
  if (result)
  {
    LODWORD(v6) = 0x7FFFFFFF;
    if (*v4)
    {
      unint64_t v7 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
      uint64_t v8 = *(unsigned int *)(*((void *)this + 21) + 4 * ((v7 ^ (v7 >> 31)) % *((unsigned int *)this + 46)));
      if (v8 != 0x7FFFFFFF)
      {
        uint64_t v9 = *((void *)this + 22);
        if (*(void *)(v9 + 40 * v8 + 16) == v11)
        {
          LODWORD(v6) = v8;
        }
        else
        {
          uint64_t v6 = v8;
          while (1)
          {
            LODWORD(v6) = *(_DWORD *)(v9 + 40 * v6 + 8) & 0x7FFFFFFF;
            if (v6 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v9 + 40 * v6 + 16) == v11) {
              goto LABEL_11;
            }
          }
          LODWORD(v6) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    uint64_t v10 = *((void *)this + 22) + 40 * v6;
    re::EventBus::unsubscribe(v3, *(void *)(v10 + 24), *(void *)(v10 + 32));
    return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v4, (uint64_t *)&v11);
  }
  return result;
}

BOOL re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 40 * v4 + 16) == v2) {
    return 1;
  }
  do
  {
    LODWORD(v4) = *(_DWORD *)(v6 + 40 * v4 + 8) & 0x7FFFFFFF;
    BOOL result = v4 != 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF && *(void *)(v6 + 40 * v4 + 16) != v2);
  return result;
}

void anonymous namespace'::removeParamsFromSystemParameterBlock(_anonymous_namespace_ *this, re::MaterialManager *a2, int a3)
{
  SystemMaterialParameterBlock = re::MaterialManager::getSystemMaterialParameterBlock(this, (uint64_t)a2);
  if (SystemMaterialParameterBlock)
  {
    unint64_t v7 = (re::MaterialParameterBlock *)SystemMaterialParameterBlock;
    uint64_t v8 = 0x3578C2CBE23A420;
    re::MaterialParameterBlock::removeTexture((uint64_t)SystemMaterialParameterBlock, &v8);
    uint64_t v8 = 0;
    if (a3)
    {
      if (re::MaterialParameterBlock::isEmpty(v7)) {
        re::MaterialManager::removeSystemMaterialParameterBlock(this, (uint64_t)a2);
      }
    }
  }
}

uint64_t re::ecs2::PlanarReflectionSystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v127 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(result + 104);
  if (!v3 || (*(unsigned char *)(v3 + 424) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      uint64_t v5 = *(void **)a2;
      uint64_t v6 = *(void *)a2 + 8 * v4;
      unint64_t v7 = &unk_2687A0000;
      uint64_t v102 = v6;
      do
      {
        uint64_t v106 = *v5;
        if (*v5)
        {
          re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v121);
          uint64_t v10 = *(void *)(v2 + 112);
          if (!v10)
          {
            re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 115);
            _os_crash();
            __break(1u);
LABEL_121:
            std::__throw_bad_variant_access[abi:nn180100]();
          }
          uint64_t v11 = *(void *)(v10 + 104);
          if (v11)
          {
            __int16 v105 = (re::DynamicString **)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
            uint64_t v10 = *(void *)(v2 + 112);
          }
          else
          {
            __int16 v105 = 0;
          }
          uint64_t v12 = *(_anonymous_namespace_ **)(v10 + 24);
          if (v7[79] != -1) {
            dispatch_once(&re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken, &__block_literal_global_35);
          }
          if (*((unsigned char *)v8 + 2376))
          {
            uint64_t v13 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v106 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v13)
            {
              uint64_t v14 = *(void *)(v13 + 24);
              if (v14)
              {
                uint64_t v15 = *(uint64_t **)(v13 + 40);
                uint64_t v16 = 8 * v14;
                do
                {
                  uint64_t v17 = *v15++;
                  v16 -= 8;
                }
                while (v16);
              }
            }
          }
          uint64_t v18 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v106 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v18)
          {
            uint64_t v19 = *(void *)(v18 + 24);
            if (v19)
            {
              int v104 = (re::RenderManager **)v12;
              __int16 v103 = v5;
              int v20 = *(uint64_t **)(v18 + 40);
              uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(v2 + 136) + 24))(*(void *)(v2 + 136));
              int v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
              int v23 = *((_DWORD *)v22 + 31);
              if (!v23) {
                int v23 = *((_DWORD *)v22 + 4);
              }
              signed int v24 = v23 + 1;
              unsigned int v119 = 0;
              long long v117 = 0u;
              long long v118 = 0u;
              uint64_t v120 = 0x7FFFFFFFLL;
              memset(&v115, 0, 36);
              *(uint64_t *)((char *)v115.columns[2].i64 + 4) = 0x7FFFFFFFLL;
              uint64_t v26 = 8 * v19;
              uint64_t v27 = v20;
              int v28 = &v20[v19];
              do
              {
                uint64_t v29 = *v27++;
                v122[0] = 0;
                (*(void (**)(float32x4_t *__return_ptr, uint64_t, void))(*(void *)v21 + 8))(&v123, v21, *(void *)(v29 + 16));
                if (v123.i8[0]) {
                  unint64_t v30 = (void *)v123.i64[1];
                }
                else {
                  unint64_t v30 = 0;
                }
                v122[0] = v30;
                v123.i32[0] = 0;
                uint64_t v31 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)&v115, (uint64_t *)v122, (int *)&v123);
                ++*(void *)v31;
                v26 -= 8;
              }
              while (v26);
              __int32 v32 = v115.columns[2].i32[0];
              if (v115.columns[2].i32[0])
              {
                uint64_t v33 = 0;
                int v34 = (int *)(v115.columns[1].i64[0] + 8);
                while (1)
                {
                  int v35 = *v34;
                  v34 += 8;
                  if (v35 < 0) {
                    break;
                  }
                  if (v115.columns[2].u32[0] == ++v33)
                  {
                    LODWORD(v33) = v115.columns[2].i32[0];
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v33) = 0;
              }
              if (v115.columns[2].i32[0] != v33)
              {
                uint64_t v36 = v33;
                uint64_t v37 = v115.columns[1].i64[0];
                do
                {
                  uint64_t v38 = v37 + 32 * v36;
                  unint64_t v39 = *(void *)(v38 + 24);
                  uint64_t v126 = 0;
                  uint64_t v124 = 0;
                  float32x4_t v123 = 0uLL;
                  int v125 = 0;
                  re::DynamicArray<re::PlanarReflectionData>::setCapacity(&v123, v39);
                  unint64_t v42 = *(void *)(v38 + 16);
                  unint64_t v41 = (void *)(v38 + 16);
                  unint64_t v40 = v42;
                  ++v125;
                  unint64_t v43 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) >> 27));
                  unint64_t v44 = v43 ^ (v43 >> 31);
                  if ((void)v117)
                  {
                    unint64_t v45 = v44 % DWORD2(v118);
                    uint64_t v46 = *(unsigned int *)(*((void *)&v117 + 1) + 4 * v45);
                    if (v46 != 0x7FFFFFFF)
                    {
                      while (*(void *)(v118 + (v46 << 6) + 16) != v40)
                      {
                        uint64_t v46 = *(_DWORD *)(v118 + (v46 << 6) + 8) & 0x7FFFFFFF;
                        if (v46 == 0x7FFFFFFF) {
                          goto LABEL_40;
                        }
                      }
                      goto LABEL_41;
                    }
                  }
                  else
                  {
                    LODWORD(v45) = 0;
                  }
LABEL_40:
                  re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v117, v45, v44, v41, (uint64_t)&v123);
                  ++HIDWORD(v120);
LABEL_41:
                  uint64_t v31 = (_anonymous_namespace_ *)re::DynamicArray<re::PlanarReflectionData>::deinit((uint64_t)&v123);
                  uint64_t v37 = v115.columns[1].i64[0];
                  if (v115.columns[2].i32[0] <= (v33 + 1)) {
                    __int32 v47 = v33 + 1;
                  }
                  else {
                    __int32 v47 = v115.columns[2].i32[0];
                  }
                  while (1)
                  {
                    uint64_t v36 = (v33 + 1);
                    if (v47 - 1 == v33) {
                      break;
                    }
                    LODWORD(v33) = v33 + 1;
                    __int32 v48 = v36;
                    if ((*(_DWORD *)(v115.columns[1].i64[0] + 32 * v36 + 8) & 0x80000000) != 0) {
                      goto LABEL_48;
                    }
                  }
                  __int32 v48 = v47;
LABEL_48:
                  LODWORD(v33) = v48;
                }
                while (v32 != v48);
              }
              re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v115);
              do
              {
                uint64_t v49 = (float32x4_t *)*v20;
                uint64_t v50 = *(re::ecs2::TransformComponent ***)(*v20 + 16);
                re::ecs2::TransformComponent::worldMatrix4x4F(v50, (const re::ecs2::Entity *)1, &v115);
                float32x4_t v109 = v116;
                simd_float3x3 v128 = __invert_f3(v115);
                int32x4_t v51 = vzip2q_s32((int32x4_t)v128.columns[0], (int32x4_t)v128.columns[2]);
                float32x4_t v52 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v128.columns[0], (int32x4_t)v128.columns[2]), (int32x4_t)v128.columns[1]);
                v128.columns[0] = (simd_float3)vtrn2q_s32((int32x4_t)v128.columns[0], (int32x4_t)v128.columns[1]);
                v128.columns[0].i32[2] = v128.columns[2].i32[1];
                v128.columns[0] = (simd_float3)vmlaq_f32(vaddq_f32((float32x4_t)v128.columns[0], vmulq_f32(v52, (float32x4_t)0)), (float32x4_t)0, (float32x4_t)vzip1q_s32(v51, vdupq_laneq_s32((int32x4_t)v128.columns[1], 2)));
                v128.columns[1] = (simd_float3)vmulq_f32((float32x4_t)v128.columns[0], (float32x4_t)v128.columns[0]);
                v128.columns[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v128.columns[1], 2), vadd_f32(*(float32x2_t *)v128.columns[1].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v128.columns[1].f32, 1))).u32[0];
                *(float32x2_t *)v128.columns[2].f32 = vrsqrte_f32((float32x2_t)v128.columns[1].u32[0]);
                *(float32x2_t *)v128.columns[2].f32 = vmul_f32(*(float32x2_t *)v128.columns[2].f32, vrsqrts_f32((float32x2_t)v128.columns[1].u32[0], vmul_f32(*(float32x2_t *)v128.columns[2].f32, *(float32x2_t *)v128.columns[2].f32)));
                float32x4_t v53 = vmulq_n_f32((float32x4_t)v128.columns[0], vmul_f32(*(float32x2_t *)v128.columns[2].f32, vrsqrts_f32((float32x2_t)v128.columns[1].u32[0], vmul_f32(*(float32x2_t *)v128.columns[2].f32, *(float32x2_t *)v128.columns[2].f32))).f32[0]);
                if (v53.f32[0] != 0.0 && (float v54 = fabsf(v53.f32[0]), v54 >= (float)((float)(v54 + 1.0) * 0.00001))
                  || v53.f32[1] != 0.0 && (float v55 = fabsf(v53.f32[1]), v55 >= (float)((float)(v55 + 1.0) * 0.00001))
                  || v53.f32[2] != 0.0 && (float v56 = fabsf(v53.f32[2]), v56 >= (float)((float)(v56 + 1.0) * 0.00001)))
                {
                  if (!v49[2].i64[1])
                  {
                    float32x4_t v107 = v53;
                    uint64_t v57 = v2;
                    id v58 = *(id *)(*(void *)(v2 + 112) + 184);
                    v122[0] = v58;
                    unint64_t v114 = 5;
                    uint64_t v113 = 115;
                    uint64_t v112 = 2;
                    TextureCompressionuint64_t Type = re::mtl::getTextureCompressionType(v122, &v112, &v113, &v114);
                    id v60 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
                    objc_msgSend(v60, sel_setStorageMode_, 2);
                    if ((objc_msgSend(v60, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
                      || objc_msgSend(v60, sel_methodSignatureForSelector_, sel_setCompressionType_))
                    {
                      objc_msgSend(v60, sel_setCompressionType_, TextureCompressionType);
                    }
                    objc_msgSend(v60, sel_setTextureType_, 3);
                    objc_msgSend(v60, sel_setWidth_, 1024);
                    objc_msgSend(v60, sel_setHeight_, 1024);
                    objc_msgSend(v60, sel_setPixelFormat_, 115);
                    objc_msgSend(v60, sel_setMipmapLevelCount_, 1);
                    objc_msgSend(v60, sel_setUsage_, 5);
                    objc_msgSend(v60, sel_setSampleCount_, 1);
                    objc_msgSend(v60, sel_setProtectionOptions_, re::protectionOptions((re *)objc_msgSend(v60, sel_setArrayLength_, 2)));
                    re::mtl::Device::makeTexture(v60, (id *)(*(void *)(v2 + 112) + 184), &v111);
                    uint64_t v61 = *(void *)(v2 + 120);
                    id v62 = v111;
                    id v110 = v62;
                    re::AssetHelper::makeTextureMemoryAsset(v61, &v110, 0);
                    float32x4_t v63 = v49[2];
                    v49[2] = v123;
                    float32x4_t v123 = v63;
                    uint64_t v64 = v49[3].i64[0];
                    v49[3].i64[0] = v124;
                    uint64_t v124 = v64;
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v123);
                    if (v62)
                    {

                      id v110 = 0;
                    }
                    if (v111) {

                    }
                    uint64_t v2 = v57;
                    if (v60) {

                    }
                    float32x4_t v53 = v107;
                  }
                  float32x4_t v65 = vmulq_f32(v109, v53);
                  float32x4_t v66 = v53;
                  v66.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).f32[0];
                  float32x4_t v108 = v66;
                  uint64_t v67 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v49[2]);
                  uint64_t v124 = 0;
                  float32x4_t v123 = v108;
                  if (*(_DWORD *)(v67 + 240)) {
                    goto LABEL_121;
                  }
                  NS::SharedPtr<MTL::Texture>::operator=((void **)&v124, (void **)(v67 + 160));
                  uint64_t v68 = (_anonymous_namespace_ *)(*(void *(**)(id *__return_ptr, uint64_t, re::ecs2::TransformComponent **))(*(void *)v21 + 8))(v122, v21, v50);
                  if (LOBYTE(v122[0])) {
                    unint64_t v69 = (unint64_t)v122[1];
                  }
                  else {
                    unint64_t v69 = 0;
                  }
                  if (!(void)v117
                    || (unint64_t v70 = 0x94D049BB133111EBLL
                            * ((0xBF58476D1CE4E5B9 * (v69 ^ (v69 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                              * (v69 ^ (v69 >> 30))) >> 27)),
                        uint64_t v71 = *(unsigned int *)(*((void *)&v117 + 1) + 4 * ((v70 ^ (v70 >> 31)) % DWORD2(v118))),
                        v71 == 0x7FFFFFFF))
                  {
LABEL_75:
                    uint64_t v72 = 0;
                  }
                  else
                  {
                    while (*(void *)(v118 + (v71 << 6) + 16) != v69)
                    {
                      uint64_t v71 = *(_DWORD *)(v118 + (v71 << 6) + 8) & 0x7FFFFFFF;
                      if (v71 == 0x7FFFFFFF) {
                        goto LABEL_75;
                      }
                    }
                    uint64_t v72 = v118 + (v71 << 6) + 24;
                  }
                  unint64_t v73 = *(void *)(v72 + 8);
                  unint64_t v74 = *(void *)(v72 + 16);
                  if (v74 >= v73)
                  {
                    unint64_t v75 = v74 + 1;
                    if (v73 < v74 + 1)
                    {
                      if (*(void *)v72)
                      {
                        uint64_t v76 = 2 * v73;
                        BOOL v77 = v73 == 0;
                        unint64_t v78 = 8;
                        if (!v77) {
                          unint64_t v78 = v76;
                        }
                        if (v78 <= v75) {
                          unint64_t v79 = v75;
                        }
                        else {
                          unint64_t v79 = v78;
                        }
                        re::DynamicArray<re::PlanarReflectionData>::setCapacity((void *)v72, v79);
                      }
                      else
                      {
                        re::DynamicArray<re::PlanarReflectionData>::setCapacity((void *)v72, v75);
                        ++*(_DWORD *)(v72 + 24);
                      }
                    }
                    unint64_t v74 = *(void *)(v72 + 16);
                  }
                  uint64_t v80 = *(void *)(v72 + 32) + 32 * v74;
                  *(float32x4_t *)uint64_t v80 = v123;
                  *(void *)(v80 + 16) = v124;
                  ++*(void *)(v72 + 16);
                  ++*(_DWORD *)(v72 + 24);
                }
                ++v20;
              }
              while (v20 != v28);
              uint64_t v81 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v106 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              uint64_t v6 = v102;
              unint64_t v7 = (void *)&unk_2687A0000;
              if (v81)
              {
                uint64_t v82 = *(void *)(v81 + 24);
                if (v82)
                {
                  uint64_t v83 = *(void *)(v81 + 40);
                  uint64_t v84 = 8 * v82;
                  do
                  {
                    uint64_t v85 = *(void *)(*(void *)(*(void *)v83 + 16) + 296);
                    unsigned int v86 = re::ecs2::EntityHandle::resolve((id *)(*(void *)v83 + 32), *(void *)(v2 + 40));
                    if (v86)
                    {
                      uint64_t v87 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v86 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                      if (v87)
                      {
                        uint64_t v88 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v87 + 32));
                        if (v88)
                        {
                          uint64_t v89 = v88;
                          uint64_t v90 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(v104, v85);
                          v122[0] = (id)0x3578C2CBE23A420;
                          re::MaterialParameterBlock::setTextureHandle(v90, (uint64_t *)v122, (re::TextureHandle *)(v89 + 48), (uint64_t)&v115);
                          v115.columns[0].i64[0] = 0;
                          v122[0] = 0;
                        }
                      }
                    }
                    v83 += 8;
                    v84 -= 8;
                  }
                  while (v84);
                }
              }
              unsigned int v91 = v119;
              if (v119)
              {
                uint64_t v92 = 0;
                char v93 = (int *)(v118 + 8);
                uint64_t v5 = v103;
                while (1)
                {
                  int v94 = *v93;
                  v93 += 16;
                  if (v94 < 0) {
                    break;
                  }
                  if (v119 == ++v92)
                  {
                    LODWORD(v92) = v119;
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v92) = 0;
                uint64_t v5 = v103;
              }
              if (v119 != v92)
              {
                uint64_t v95 = v92;
                uint64_t v96 = v118;
                unsigned int v97 = v119;
                do
                {
                  uint64_t v98 = v96 + (v95 << 6);
                  if (*(void *)(v98 + 40))
                  {
                    re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v106, *(const re::ecs2::Scene **)(v98 + 16), v105, &v123);
                    unint64_t v114 = (unint64_t)v123.i64[0] >> 1;
                    uint64_t v99 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v105 + 33), (const re::WeakStringID *)&v114)+ 48);
                    (*(void (**)(void))(v99 + 944))();
                    re::StringID::destroyString((re::StringID *)&v123);
                    unsigned int v97 = v119;
                    uint64_t v96 = v118;
                  }
                  if (v97 <= (int)v92 + 1) {
                    unsigned int v100 = v92 + 1;
                  }
                  else {
                    unsigned int v100 = v97;
                  }
                  while (1)
                  {
                    uint64_t v95 = (v92 + 1);
                    if (v100 - 1 == v92) {
                      break;
                    }
                    LODWORD(v92) = v92 + 1;
                    unsigned int v101 = v95;
                    if ((*(_DWORD *)(v96 + (v95 << 6) + 8) & 0x80000000) != 0) {
                      goto LABEL_115;
                    }
                  }
                  unsigned int v101 = v100;
LABEL_115:
                  LODWORD(v92) = v101;
                }
                while (v91 != v101);
              }
              re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v117);
            }
          }
          BOOL result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v121);
        }
        ++v5;
      }
      while (v5 != (void *)v6);
    }
  }
  return result;
}

void re::ecs2::PlanarReflectionSystem::~PlanarReflectionSystem(re::ecs2::PlanarReflectionSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PlanarReflectionSystem::typeInfo(re::ecs2::PlanarReflectionSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PlanarReflectionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PlanarReflectionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PlanarReflectionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PlanarReflectionSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7002F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7002F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PlanarReflectionSystem,REEventHandlerResult (re::ecs2::PlanarReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void *re::DynamicArray<re::PlanarReflectionData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (!*v5)
      {
        BOOL result = (void *)re::DynamicArray<re::PlanarReflectionData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 32 * v9;
        uint64_t v11 = v7;
        do
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v8;
          void v11[2] = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = 0;
          v8 += 32;
          v11 += 4;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      BOOL result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::PlanarReflectionData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 32 * v4;
        uint64_t v6 = (id *)(v3 + 16);
        do
        {
          if (*v6)
          {

            id *v6 = 0;
          }
          v6 += 4;
          v5 -= 32;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::PlanarReflectionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PlanarReflectionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 40 * v9 + 16) = *a4;
  *(_OWORD *)(*(void *)(a1 + 16) + 40 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

double re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::PlanarReflectionData>::deinit(v6 + 24);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)int v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::PlanarReflectionContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 40) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  uint64_t v26 = *(void *)(v25 + 40);
  *(void *)(v25 + 40) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v26;
  uint64_t v27 = *(void *)(v25 + 56);
  *(void *)(v25 + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

BOOL re::ecs2::JiggleSystemComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v20, a5, 0);
  unint64_t v8 = v20;
  unint64_t v9 = v21;
  unint64_t v20 = a4;
  unint64_t v21 = v8;
  unint64_t v22 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v21);
      if (*(void *)(*(void *)v14 + 240))
      {
        v19[0] = *(void *)v14 + 232;
        v19[1] = 17;
        if (re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v19)) {
          long long v15 = (unint64_t *)(a3 + 32);
        }
        else {
          long long v15 = (unint64_t *)(a3 + 48);
        }
      }
      else
      {
        long long v15 = (unint64_t *)(a3 + 32);
      }
      unint64_t v16 = v20;
      unint64_t v17 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v21);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v16, v17, *v15);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v21);
    }
    while (v21 != a5 || (unsigned __int16)v22 != 0xFFFF || WORD1(v22) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty(re::MeshDeformationRuntimeData::MeshDeformationIteration *this)
{
  unint64_t v1 = *((unsigned int *)this + 2);
  if (*(void *)(*(void *)this + 136) <= v1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(*(void *)this + 144) + 96 * v1 + 8) == 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t re::ecs2::JiggleSystemComponentStateImpl::processUpdatingComponents(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)(*(void *)(a1 + 8) + 112));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v34, a5, 0);
  uint64_t v9 = v34;
  uint64_t v10 = v35;
  uint64_t v34 = a4;
  uint64_t v35 = v9;
  uint64_t v36 = v10;
  uint64_t v11 = (unsigned __int16)v10;
  uint64_t v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      uint64_t v15 = *(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v35);
      v33[0] = v15 + 232;
      v33[1] = 17;
      uint64_t v16 = *(void *)(v15 + 392);
      unint64_t v17 = *(void *)(v16 + 88);
      uint64_t v18 = *(void *)(v16 + 96);
      uint64_t v30 = v33[0];
      uint64_t v31 = 17;
      __int16 v32 = 0;
      while (1)
      {
        re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v33, (uint64_t)v27);
        if (HIDWORD(v31) == v28 && v32 == v29) {
          break;
        }
        unsigned int v19 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v30);
        unsigned int v21 = v19;
        if (v17 <= v19)
        {
          re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v19, v17);
          uint64_t result = _os_crash();
          __break(1u);
          return result;
        }
        unint64_t v22 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 4, 4);
        *unint64_t v22 = *a2;
        uint64_t v23 = v18 + 168 * v21;
        ++*(unsigned char *)(v23 + 17);
        *(void *)(v23 + 160) = v22;
        re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v30);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v35);
    }
    while (v35 != a5 || (unsigned __int16)v36 != 0xFFFF || WORD1(v36) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::JiggleSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v12);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    int v7 = *(uint64_t **)a2;
    uint64_t v8 = a1 + 200;
    uint64_t v9 = 8 * v6;
    do
    {
      uint64_t v10 = *v7++;
      re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::updateForScene(v8, v10, (uint64_t)v13, 0);
      v9 -= 8;
    }
    while (v9);
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v12);
}

void re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  uint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      unint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

void re::ecs2::JiggleSystem::willAddSceneToECSService(re::ecs2::JiggleSystem *this, re::ecs2::Scene *a2)
{
}

void re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  uint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      unint64_t v7 = (void *)(a1 + 144);
    }
    else {
      unint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      uint64_t v35 = (void *)(a1 + 192);
    }
    else {
      uint64_t v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    unint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::JiggleSystem::willRemoveSceneFromECSService(re::ecs2::JiggleSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 200, (uint64_t)a2);
}

void *re::ecs2::allocInfo_JiggleSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_241, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_241))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88AE0, "JiggleSystem");
    __cxa_guard_release(&_MergedGlobals_241);
  }
  return &unk_26AF88AE0;
}

void re::ecs2::initInfo_JiggleSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x36A7507F0523F10ELL;
  v5[1] = "JiggleSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_JiggleSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::JiggleSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::JiggleSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::JiggleSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::JiggleSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::JiggleSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::JiggleSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::JiggleSystem *re::internal::defaultConstruct<re::ecs2::JiggleSystem>(int a1, int a2, re::ecs2::JiggleSystem *this)
{
  return re::ecs2::JiggleSystem::JiggleSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::JiggleSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &unk_26E700350;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 22);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::JiggleSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &unk_26E700350;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 22);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_JiggleSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"JiggleSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_JiggleSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_JiggleSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::JiggleSystem>, this);
}

uint64_t re::ecs2::JiggleSystemComponentStateImpl::dependsOnComponents(re::ecs2::JiggleSystemComponentStateImpl *this)
{
  return *((void *)this + 4);
}

void re::ecs2::BasicComponentStateImpl<re::ecs2::MeshDeformationComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t v3 = *(re::ecs2::Component **)(a3 + 184);
  if (v3)
  {
    uint64_t v5 = 3;
    unint64_t v6 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v7 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v5], v3);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v10 = v7;
        unint64_t v6 = v8;
        goto LABEL_11;
      }
      ++v5;
    }
    while (v5 != 7);
    unint64_t v10 = -1;
LABEL_11:
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::setComponentState(a2, v10, v6, 0);
  }
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshDeformationComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::JiggleSystem::~JiggleSystem(re::ecs2::JiggleSystem *this)
{
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = &unk_26E700350;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25);
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = &unk_26E700350;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::JiggleSystem::typeInfo(re::ecs2::JiggleSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"JiggleSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_JiggleSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_JiggleSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::JiggleSystem>, 0);
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *unint64_t v10 = &unk_26E700448;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E7004A0;
    v16[1] = a1;
    v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E7004F8;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    BOOL v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E700550;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    unint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E700448;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        unint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *unint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *long long v43 = &unk_26E7004A0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E7004F8;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        float32x4_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v53 = v50;
        v53[1] = v52;
        float v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        id v62 = 0;
        float v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *float v55 = &unk_26E700550;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        id v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 184);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v17, v18, 0);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 184);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v17, v18, 0);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 184);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v17, v18, 0);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 184);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v17, v18, 0);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700448;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700448;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7004A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7004A0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7004F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7004F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700550;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700550;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

id re::internal::defaultRetain<re::ecs2::JiggleSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::JiggleSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_AudioMixGroupsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_242, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_242))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88B78, "AudioMixGroupsComponent");
    __cxa_guard_release(&_MergedGlobals_242);
  }
  return &unk_26AF88B78;
}

void re::ecs2::initInfo_AudioMixGroupsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xAE6F5221A4A0CBC6;
  v13[1] = "AudioMixGroupsComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88B60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF88B60);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88B68 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "mixGroups";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF88B70 = v11;
      __cxa_guard_release(&qword_26AF88B60);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF88B68;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioMixGroupsComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioMixGroupsComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioMixGroupsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioMixGroupsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

double re::internal::defaultConstruct<re::ecs2::AudioMixGroupsComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E7005A8;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 68) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)(v3 + 116) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioMixGroupsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AudioMixGroupsComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E7005A8;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 68) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)(v1 + 116) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioMixGroupsComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioMixGroupsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixGroupsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioMixGroupsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioMixGroupsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioMixGroupsComponent>, this);
}

uint64_t re::ecs2::AudioMixGroupsComponent::addOrReplaceMixGroup(re::ecs2::AudioMixGroupsComponent *this, uint64_t a2, const char *a3, float a4, float a5, char a6)
{
  uint64_t v29 = 0;
  *(_WORD *)uint64_t v30 = 0;
  *(_DWORD *)&_OWORD v30[4] = 0;
  *(_DWORD *)&v30[8] = 0;
  *(void *)&v30[12] = 0x3F80000000000000;
  long long v27 = 0u;
  memset(v28, 0, 28);
  *(void *)&v30[28] = 0;
  *(void *)&v30[20] = 0;
  *(_DWORD *)&v30[36] = 1;
  size_t v12 = strlen(a3);
  v31[0] = a3;
  v31[1] = v12;
  re::DynamicString::operator=((re::DynamicString *)&v24, (uint64_t)v31);
  float v13 = 15.0;
  if (a4 <= 15.0) {
    float v13 = a4;
  }
  *(_DWORD *)&v30[24] = fmaxf(v13, -60.0);
  *(_DWORD *)&v30[28] = *(_DWORD *)&v30[24];
  *(_DWORD *)&v30[20] = 0;
  *(_DWORD *)&v30[12] = 0;
  ++*(_DWORD *)&v30[36];
  v30[0] = a6;
  *(float *)&v30[16] = a5;
  *(void *)&long long v27 = a2;
  re::DynamicString::DynamicString((re::DynamicString *)v17, (const re::DynamicString *)&v24);
  v17[2] = v27;
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v18, (uint64_t *)v28);
  long long v21 = *(_OWORD *)v30;
  long long v22 = *(_OWORD *)&v30[16];
  uint64_t v23 = *(void *)&v30[32];
  re::ecs2::AudioMixGroupsComponent::updateMixGroupInMixGroupsStructure(this, (uint64_t)v17);
  if (v18[0])
  {
    if (v20) {
      (*(void (**)(void))(*(void *)v18[0] + 40))();
    }
    uint64_t v20 = 0;
    memset(v18, 0, sizeof(v18));
    ++v19;
  }
  if (*(void *)&v17[0])
  {
    if (BYTE8(v17[0])) {
      (*(void (**)(void))(**(void **)&v17[0] + 40))();
    }
    memset(v17, 0, 32);
  }
  if (*(void *)&v28[0])
  {
    if (v29) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)&v28[0] + 40))(*(void *)&v28[0], v29, v14, v15);
    }
    uint64_t v29 = 0;
    memset(v28, 0, 24);
    ++DWORD2(v28[1]);
  }
  uint64_t result = v24;
  if (v24)
  {
    if (v25) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v24 + 40))(v24, v26, v14, v15);
    }
  }
  return result;
}

void re::ecs2::AudioMixGroupsComponent::updateMixGroupInMixGroupsStructure(re::ecs2::AudioMixGroupsComponent *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 124);
  uint64_t v5 = (uint64_t)a1 + 32;
  uint64_t v6 = (uint64_t *)(a2 + 32);
  uint64_t v7 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 32, (uint64_t *)(a2 + 32));
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 124);
    if (v4 <= v8 + 1) {
      int v4 = v8 + 1;
    }
  }
  *(_DWORD *)(a2 + 124) = v4;
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addInternal<re::AudioMixGroup&>(v5, v6, 2, a2);
  re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(a1);
}

void re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(re::ecs2::AudioMixGroupsComponent *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    re::ecs2::Component::markDirty(this);
    uint64_t v3 = *(re::ecs2::NetworkComponent **)(v1 + 200);
    if (v3)
    {
      re::ecs2::NetworkComponent::markDirty(v3, this);
    }
  }
}

BOOL re::ecs2::AudioMixGroupsComponent::isMixGroupGainDirty(re::ecs2::AudioMixGroupsComponent *this, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v3 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, &v6);
  int v4 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 80, &v6);
  BOOL result = 1;
  if (v3)
  {
    if (v4) {
      return *v4 != *(_DWORD *)(v3 + 124);
    }
  }
  return result;
}

void re::ecs2::AudioMixGroupsComponent::~AudioMixGroupsComponent(re::ecs2::AudioMixGroupsComponent *this)
{
  *(void *)this = &unk_26E7005A8;
  unint64_t v2 = (uint64_t *)((char *)this + 32);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 10);
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::AudioMixGroupsComponent::~AudioMixGroupsComponent(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::ecs2::allocInfo_DrawableQueueSyncComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_243, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_243))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88C20, "DrawableQueueSyncComponent");
    __cxa_guard_release(&_MergedGlobals_243);
  }
  return &unk_26AF88C20;
}

void re::ecs2::initInfo_DrawableQueueSyncComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x4E59B8C38DB250DELL;
  v17[1] = "DrawableQueueSyncComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88BF8, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF88BF8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88C08 = v7;
      int v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_int((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "bestToPresentIndex";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF88C10 = v11;
      size_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "textureHandle";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF88C18 = v15;
      __cxa_guard_release(&qword_26AF88BF8);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF88C08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DrawableQueueSyncComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DrawableQueueSyncComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DrawableQueueSyncComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DrawableQueueSyncComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::internal::defaultConstruct<re::ecs2::DrawableQueueSyncComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6CE060;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::DrawableQueueSyncComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::DrawableQueueSyncComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6CE060;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::DrawableQueueSyncComponent>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DrawableQueueSyncComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DrawableQueueSyncComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DrawableQueueSyncComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DrawableQueueSyncComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DrawableQueueSyncComponent>, this);
}

void *re::ecs2::allocInfo_DrawableQueueSyncSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88C00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88C00))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88C98, "DrawableQueueSyncSystem");
    __cxa_guard_release(&qword_26AF88C00);
  }
  return &unk_26AF88C98;
}

void re::ecs2::initInfo_DrawableQueueSyncSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x61AC455877C2D7FALL;
  v5[1] = "DrawableQueueSyncSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1D800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_DrawableQueueSyncSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DrawableQueueSyncSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DrawableQueueSyncSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::DrawableQueueSyncSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::DrawableQueueSyncSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DrawableQueueSyncSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DrawableQueueSyncSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::DrawableQueueSyncSystem *re::internal::defaultConstruct<re::ecs2::DrawableQueueSyncSystem>(int a1, int a2, re::ecs2::DrawableQueueSyncSystem *this)
{
  return re::ecs2::DrawableQueueSyncSystem::DrawableQueueSyncSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::DrawableQueueSyncSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a3 + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 23);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::DrawableQueueSyncSystem>(void *a1)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 23);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::DrawableQueueSyncSystem::willAddSystemToECSService(re::ecs2::DrawableQueueSyncSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = re::ServiceLocator::serviceOrNull<re::AssetService>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::DrawableQueueService>(v3);
  *((void *)this + 21) = result;
  return result;
}

uint64_t re::ecs2::DrawableQueueSyncSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 160) = 0;
  *(void *)(this + 168) = 0;
  return this;
}

uint64_t re::ecs2::DrawableQueueSyncSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v2 = this;
  uint64_t v5 = a2;
  uint64_t v3 = *((void *)a2 + 47);
  if (!v3 || *(void *)(v3 + 24) == 1)
  {
    re::ecs2::BasicComponentStates<re::ecs2::DrawableQueueSyncComponent>::addScene(this + 184, (uint64_t)a2);
    re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::add(v2 + 424, (uint64_t *)&v5);
    this = *(void *)(v2 + 168);
    if (this)
    {
      long long v4 = *(uint64_t (**)(void))(*(void *)this + 24);
      return v4();
    }
  }
  return this;
}

void re::ecs2::BasicComponentStates<re::ecs2::DrawableQueueSyncComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  v56[0] = a2;
  long long v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    int v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v48 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v48);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)&v48);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v48);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v48;
    goto LABEL_49;
  }
LABEL_17:
  long long v55 = 0u;
  long long v48 = 0u;
  *(void *)&long long v49 = 0;
  *((void *)&v49 + 1) = -1;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v52 = 0;
  uint64_t v53 = 1;
  long long v54 = 0uLL;
  unint64_t v16 = *(void *)(a1 + 40);
  *(void *)&long long v55 = 0;
  unint64_t v17 = *(void *)(a1 + 8);
  DWORD2(v55) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v16 + 4) >> 2);
    unint64_t v17 = *(void *)(a1 + 8);
  }
  if (v17 <= v16 >> 2)
  {
    v56[1] = 0;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v57 = 136315906;
    uint64_t v58 = "operator[]";
    __int16 v59 = 1024;
    int v60 = 858;
    __int16 v61 = 2048;
    unint64_t v62 = v16 >> 2;
    __int16 v63 = 2048;
    unint64_t v64 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v18 = a1 + 24;
  }
  else {
    uint64_t v18 = *(void *)(a1 + 32);
  }
  uint64_t v19 = *(void *)(v18 + 8 * (v16 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v20 = v19 + 112 * (v16 & 3);
  long long v21 = v48;
  long long v22 = v49;
  long long v23 = v50;
  *(void *)(v20 + 48) = v51;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)uint64_t v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v51 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v48);
  uint64_t v25 = *(void *)(a1 + 40);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::init(v26, a1, v56[0]);
  *(void *)&v65[0] = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)v65);
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 160);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 160) = v27;
  *(void *)&long long v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v29, &v48);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 160) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v32 = a1 + 144;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 152);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 128) - 8) &= v30;
  }
  unint64_t v33 = *(void *)(a1 + 40);
  unint64_t v34 = *(void *)(a1 + 208);
  if ((v33 & 0x3F) != 0) {
    unint64_t v35 = (v33 >> 6) + 1;
  }
  else {
    unint64_t v35 = v33 >> 6;
  }
  *(void *)(a1 + 208) = v33;
  *(void *)&long long v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v35, &v48);
  if (v33 && v34 > v33)
  {
    uint64_t v36 = 63;
    uint64_t v37 = *(void *)(a1 + 208) & 0x3FLL;
    if (v37 && v37 != 63) {
      uint64_t v36 = ~(-1 << v37);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v38 = a1 + 192;
    }
    else {
      uint64_t v38 = *(void *)(a1 + 200);
    }
    *(void *)(v38 + 8 * *(void *)(a1 + 176) - 8) &= v36;
  }
  unint64_t v15 = *(void *)&v65[0];
  uint64_t v14 = a1 + 168;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v39 = *(void *)(a1 + 176);
  int v40 = *(_DWORD *)(a1 + 184);
  if (v39 >= 0xB)
  {
    if (v40) {
      unint64_t v41 = (void *)(a1 + 192);
    }
    else {
      unint64_t v41 = *(void **)(a1 + 200);
    }
    uint64_t v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43) {
        return;
      }
    }
LABEL_65:
    uint64_t v47 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v47 + 86)) {
      re::ecs2::System::queueToRun(v47, 0.0);
    }
    return;
  }
  if (v40)
  {
    unint64_t v42 = (uint64_t *)(a1 + 192);
    if (!v39) {
      return;
    }
  }
  else
  {
    unint64_t v42 = *(uint64_t **)(a1 + 200);
    if (!v39) {
      return;
    }
  }
  uint64_t v44 = 0;
  uint64_t v45 = 8 * v39;
  do
  {
    uint64_t v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44) {
    goto LABEL_65;
  }
}

void *re::ecs2::DrawableQueueSyncSystem::willRemoveSceneFromECSService(re::ecs2::DrawableQueueSyncSystem *this, unint64_t a2)
{
  long long v4 = (char *)this + 184;
  unint64_t v49 = a2;
  unint64_t v5 = (uint64_t *)((char *)this + 240);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 30, &v49);
  if (v6 != -1)
  {
    uint64_t v7 = *((void *)this + 31) + 16 * v6;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 304, *(void *)(v7 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 352, *(void *)(v7 + 8));
    int v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, *(void *)(v7 + 8));
    if (*v8)
    {
      uint64_t v9 = v8;
      *int v8 = 0;
      uint64_t v10 = v8 + 1;
      uint64_t v11 = *(void *)(v8[1] + 288);
      if (v11)
      {
        uint64_t v12 = v8[12];
        if (v12)
        {
          for (unint64_t i = 0; i != v12; ++i)
          {
            uint64_t v14 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v9 + 7), i);
            re::EventBus::unsubscribe(v11, *(void *)v14, *(void *)(v14 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v9 + 7));
      uint64_t v15 = 0;
      unint64_t v16 = v9 + 3;
      do
      {
        unint64_t v17 = (re::ecs2::ComponentBucketsBase *)v9[2];
        if (*(void *)v17) {
          re::ecs2::ComponentBucketsBase::removeBucket(v17, v16[v15]);
        }
        v16[v15++] = -1;
      }
      while (v15 != 4);
      *uint64_t v10 = 0;
      v10[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v5, &v49);
  }
  unint64_t v18 = *((unsigned int *)this + 112);
  if (v18)
  {
    unint64_t v19 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v20 = (v19 ^ (v19 >> 31)) % v18;
    uint64_t v21 = *((void *)this + 54);
    uint64_t v22 = *(unsigned int *)(v21 + 4 * v20);
    if (v22 != 0x7FFFFFFF)
    {
      uint64_t v23 = *((void *)this + 55);
      if (*(void *)(v23 + 24 * v22 + 16) == a2)
      {
        *(_DWORD *)(v21 + 4 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *(_DWORD *)(v23 + 24 * v22 + 8) & 0x7FFFFFFF;
LABEL_20:
        uint64_t v25 = *((void *)this + 55);
        uint64_t v26 = v25 + 24 * v22;
        int v29 = *(_DWORD *)(v26 + 8);
        unint64_t v28 = (int *)(v26 + 8);
        int v27 = v29;
        if (v29 < 0)
        {
          *unint64_t v28 = v27 & 0x7FFFFFFF;
          uint64_t v25 = *((void *)this + 55);
          int v27 = *(_DWORD *)(v25 + 24 * v22 + 8);
        }
        *(_DWORD *)(v25 + 24 * v22 + 8) = *((_DWORD *)this + 115) | v27 & 0x80000000;
        *((_DWORD *)this + 115) = v22;
        --*((_DWORD *)this + 113);
        ++*((_DWORD *)this + 116);
      }
      else
      {
        while (1)
        {
          unsigned int v24 = v22;
          LODWORD(v22) = *(_DWORD *)(v23 + 24 * v22 + 8) & 0x7FFFFFFF;
          if (v22 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v23 + 24 * v22 + 16) == a2)
          {
            *(_DWORD *)(v23 + 24 * v24 + 8) = *(_DWORD *)(v23 + 24 * v24 + 8) & 0x80000000 | *(_DWORD *)(v23 + 24 * v22 + 8) & 0x7FFFFFFF;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (a2)
  {
    uint64_t v30 = *((void *)this + 21);
    if (v30) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v30 + 32))(v30, a2);
    }
  }
  uint64_t v31 = *((unsigned int *)this + 114);
  if (v31)
  {
    uint64_t v32 = 0;
    unint64_t v33 = (int *)(*((void *)this + 55) + 8);
    while (1)
    {
      int v34 = *v33;
      v33 += 6;
      if (v34 < 0) {
        break;
      }
      if (v31 == ++v32)
      {
        LODWORD(v32) = *((_DWORD *)this + 114);
        break;
      }
    }
  }
  else
  {
    LODWORD(v32) = 0;
  }
  if (v31 == v32)
  {
LABEL_47:
    uint64_t result = (void *)(*(uint64_t (**)(void))(**((void **)this + 5) + 104))(*((void *)this + 5));
    uint64_t v43 = result[3];
    if (!v43) {
      return result;
    }
    uint64_t v44 = (re::ecs2::Scene **)result[5];
    uint64_t v45 = 8 * v43;
    while (1)
    {
      uint64_t v46 = *v44;
      if (*v44 != (re::ecs2::Scene *)a2)
      {
        uint64_t v47 = *((void *)v46 + 47);
        if (!v47 || *(void *)(v47 + 24) == 1)
        {
          if (*((void *)v46 + 7))
          {
            unint64_t v49 = (unint64_t)*v44;
            re::ecs2::BasicComponentStates<re::ecs2::DrawableQueueSyncComponent>::addScene((uint64_t)v4, (uint64_t)v46);
            re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::add((uint64_t)this + 424, (uint64_t *)&v49);
            uint64_t result = (void *)*((void *)this + 21);
            if (result) {
              break;
            }
          }
        }
      }
      ++v44;
      v45 -= 8;
      if (!v45) {
        return result;
      }
    }
    long long v48 = *(uint64_t (**)(void))(*result + 24);
  }
  else
  {
    uint64_t v35 = v32;
    uint64_t v36 = *((void *)this + 55);
    while (1)
    {
      unint64_t v37 = *(void *)(v36 + 24 * v35 + 16);
      if (v37 && v37 != a2)
      {
        uint64_t v39 = *((void *)this + 21);
        if (v39) {
          break;
        }
      }
      if (v31 <= (int)v32 + 1) {
        int v40 = v32 + 1;
      }
      else {
        int v40 = *((_DWORD *)this + 114);
      }
      while (1)
      {
        uint64_t v35 = (v32 + 1);
        if (v40 - 1 == v32) {
          break;
        }
        LODWORD(v32) = v32 + 1;
        int v41 = v35;
        if ((*(_DWORD *)(v36 + 24 * v35 + 8) & 0x80000000) != 0) {
          goto LABEL_46;
        }
      }
      int v41 = v40;
LABEL_46:
      LODWORD(v32) = v41;
      if (v31 == v41) {
        goto LABEL_47;
      }
    }
    long long v48 = *(uint64_t (**)(void))(*(void *)v39 + 24);
  }
  return (void *)v48();
}

void re::ecs2::DrawableQueueSyncSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v31[0] = a3;
  v31[1] = a4;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = a1 + 184;
    int v8 = (void *)(a1 + 240);
    uint64_t v9 = a1 + 352;
    int v29 = (uint64_t *)(a1 + 376);
    uint64_t v30 = *(void *)a2 + 8 * v4;
    while (1)
    {
      uint64_t v32 = *v6;
      unint64_t v10 = *(void *)(*(void *)(a1 + 248)
                      + 16
                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v8, &v32)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v9, v10);
      uint64_t v11 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v7, v10);
      uint64_t v12 = *(void *)(*v11 + 224);
      unint64_t v13 = v11[3];
      unint64_t v14 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v11[2] + 8, v13);
      if (*(_DWORD *)(v14 + 40)) {
        int v15 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v12 + 24))(v12, v31, v11, v13, v14, 0);
      }
      else {
        int v15 = 0;
      }
      unint64_t v16 = v11[5];
      unint64_t v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v11[2] + 8, v16);
      if (*(_DWORD *)(v17 + 40)) {
        v15 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v12 + 32))(v12, v31, v11, v16, v17, 0);
      }
      unint64_t v18 = v11[6];
      unint64_t v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v11[2] + 8, v18);
      if (*(_DWORD *)(v19 + 40)) {
        break;
      }
      if (v15) {
        goto LABEL_10;
      }
LABEL_11:
      if (*(unsigned char *)(a1 + 416))
      {
        unint64_t v20 = *(void *)(a1 + 360);
        int v21 = *(_DWORD *)(a1 + 368);
        if (v20 < 0xB)
        {
          unsigned int v24 = v29;
          if ((v21 & 1) == 0) {
            unsigned int v24 = *(uint64_t **)(a1 + 384);
          }
          if (!v20) {
            goto LABEL_29;
          }
          uint64_t v25 = 0;
          uint64_t v26 = 8 * v20;
          do
          {
            uint64_t v27 = *v24++;
            v25 |= v27;
            v26 -= 8;
          }
          while (v26);
          if (!v25) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v22 = v29;
          if ((v21 & 1) == 0) {
            uint64_t v22 = *(uint64_t **)(a1 + 384);
          }
          uint64_t v23 = 8 * v20;
          while (!*v22)
          {
            ++v22;
            v23 -= 8;
            if (!v23) {
              goto LABEL_29;
            }
          }
        }
        unint64_t v28 = *(re::ecs2::System **)(a1 + 400);
        if (!*((unsigned char *)v28 + 86)) {
          re::ecs2::System::queueToRun(v28, 0.0);
        }
      }
LABEL_29:
      if (++v6 == (uint64_t *)v30) {
        return;
      }
    }
    if (((v15 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v12 + 40))(v12, v31, v11, v18, v19, 0)) & 1) == 0)goto LABEL_11; {
LABEL_10:
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v9, v10);
    goto LABEL_11;
  }
}

BOOL re::ecs2::DrawableQueueSyncComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v33, a5, 0);
  unint64_t v8 = v33;
  unint64_t v9 = v34;
  unint64_t v33 = a4;
  unint64_t v34 = v8;
  unint64_t v35 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v34);
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(*(void *)v14 + 40);
      if (v16)
      {
        unsigned int v17 = atomic_load((unsigned int *)(v16 + 704));
        if (v17 == 2)
        {
          uint64_t v18 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v15 + 32));
          uint64_t v19 = *(void *)(v18 + 96);
          if (v19 && *(unsigned char *)(v19 + 295))
          {
            uint64_t v20 = 0;
            int v21 = 3;
            atomic_compare_exchange_strong((atomic_uint *volatile)(*(void *)(*(void *)(v19 + 432) + 32) + 16 * *(int *)(v15 + 28) + 32), (unsigned int *)&v21, 2u);
            unint64_t v22 = atomic_load((unint64_t *)(*(void *)(*(void *)(*(void *)(v18 + 96) + 432) + 32)
                                                 + 16 * *(int *)(v15 + 28)
                                                 + 40));
            uint64_t v23 = *(void *)(*(void *)(v18 + 96) + 432);
            do
            {
              unsigned int v24 = atomic_load((unsigned int *)(*(void *)(v23 + 32) + v20 + 32));
              unint64_t v25 = atomic_load((unint64_t *)(*(void *)(v23 + 32) + v20 + 40));
              if (v24 == 3 && v25 < v22)
              {
                int v27 = 3;
                atomic_compare_exchange_strong((atomic_uint *volatile)(*(void *)(v23 + 32) + v20 + 32), (unsigned int *)&v27, 2u);
              }
              v20 += 16;
            }
            while (v20 != 48);
          }
          unint64_t v28 = v33;
          unint64_t v29 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v34);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v28, v29, *(void *)(a3 + 32));
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v34);
    }
    while (v34 != a5 || (unsigned __int16)v35 != 0xFFFF || WORD1(v35) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DrawableQueueSyncComponent>::dependsOnComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DrawableQueueSyncComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    unint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DrawableQueueSyncComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DrawableQueueSyncComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::DrawableQueueSyncSystem::~DrawableQueueSyncSystem(re::ecs2::DrawableQueueSyncSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 53);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::DrawableQueueSyncSystem::typeInfo(re::ecs2::DrawableQueueSyncSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DrawableQueueSyncSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DrawableQueueSyncSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DrawableQueueSyncSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DrawableQueueSyncSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::DrawableQueueSyncSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DrawableQueueSyncSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E700728;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E700780;
    v16[1] = a1;
    v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E7007D8;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    BOOL v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E700830;
    v28[1] = a1;
    _OWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    unint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        unint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *unint64_t v37 = &unk_26E700728;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E700780;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        unint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *unint64_t v49 = &unk_26E7007D8;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        unint64_t v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E700830;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        unint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        __int16 v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *__int16 v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700728;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700728;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700780;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700780;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7007D8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7007D8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700830;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700830;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DrawableQueueSyncComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::allocInfo_AudioAnimationComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88D20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88D20))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88DC8, "AudioAnimationComponent");
    __cxa_guard_release(&qword_26AF88D20);
  }
  return &unk_26AF88DC8;
}

void re::ecs2::initInfo_AudioAnimationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v59 = 0x2C04ED5A7FFBF85ELL;
  int v60 = "AudioAnimationComponent";
  re::StringID::destroyString((re::StringID *)&v59);
  *((_OWORD *)this + 2) = v52;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88D18, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF88D18);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88D38 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_AudioAnimationState((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "animationState";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF88D40 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_float((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "animationGain";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x3800000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF88D48 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      uint64_t v17 = re::introspect_AssetHandle((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "audioAsset";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x4800000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF88D50 = v18;
      unint64_t v19 = re::introspectionAllocator((re *)v18);
      unint64_t v21 = re::introspect_float((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "mediaOffset";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x3C00000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF88D58 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      uint64_t v25 = re::introspect_float((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "additionalLinearGain";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x4000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF88D60 = v26;
      int v27 = re::introspectionAllocator((re *)v26);
      uint64_t v29 = re::introspect_BOOL((re *)1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "mute";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x4400000006;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF88D68 = v30;
      uint64_t v32 = re::introspectionAllocator((re *)v30);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88D30, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF88D30))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF88D78);
        qword_26AF88D78 = (uint64_t)&unk_26E700A00;
        __cxa_guard_release(&qword_26AF88D30);
      }
      if ((_MergedGlobals_244 & 1) == 0)
      {
        uint64_t v33 = re::IntrospectionInfo<re::StringID>::get(1, v31);
        uint64_t v35 = re::introspect_AssetHandle((re *)1, v34);
        if ((_MergedGlobals_244 & 1) == 0)
        {
          uint64_t v36 = (uint64_t)v35;
          _MergedGlobals_244 = 1;
          int v37 = *((_DWORD *)v35 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF88D78, 0);
          qword_26AF88D88 = 0x3000000007;
          dword_26AF88D90 = v37;
          word_26AF88D94 = 0;
          *(void *)&xmmword_26AF88D98 = 0;
          *((void *)&xmmword_26AF88D98 + 1) = 0xFFFFFFFFLL;
          qword_26AF88DA8 = (uint64_t)v33;
          unk_26AF88DB0 = 0;
          qword_26AF88DB8 = v36;
          unk_26AF88DC0 = 0;
          qword_26AF88D78 = (uint64_t)&unk_26E700A00;
          re::IntrospectionRegistry::add(v38, v39);
          re::getPrettyTypeName((re *)&qword_26AF88D78, (const re::IntrospectionBase *)&v59);
          if (v60) {
            uint64_t v40 = v61;
          }
          else {
            uint64_t v40 = (char *)&v60 + 1;
          }
          if (v59 && (v60 & 1) != 0) {
            (*(void (**)(void))(*(void *)v59 + 40))();
          }
          long long v41 = v33[2];
          long long v54 = *(_OWORD *)(v36 + 32);
          long long v55 = v41;
          unint64_t v42 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v56);
          if (v42)
          {
            uint64_t v43 = *v42;
            *((void *)&v53 + 1) = v43;
          }
          else
          {
            uint64_t v59 = 0x449AD97C4B77BED4;
            int v60 = "_CompareFunc";
            uint64_t v44 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v59);
            if (v44)
            {
              uint64_t v45 = *v44;
              re::StringID::destroyString((re::StringID *)&v59);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v59);
              *(void *)&v64.var0 = 0x449AD97C4B77BED4;
              v64.var1 = "_CompareFunc";
              uint64_t v46 = (void *)v59;
              uint64_t v45 = (uint64_t)v60;
              re::StringID::destroyString((re::StringID *)&v64);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v64, (uint64_t)&v60);
            if (!v46
              || (uint64_t v47 = *v65,
                  uint64_t v59 = v45,
                  int v60 = v47,
                  LODWORD(v61) = -1,
                  (long long v48 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v64.var0 + 768, &v59)) == 0)|| !*(void *)v48)
            {
              long long v63 = v55;
              v62[0] = v46;
              v62[1] = v45;
            }
            long long v57 = v54;
            long long v58 = v55;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v59, v56, 1, 0x30uLL, 8uLL, &v58, &v57);
            re::TypeBuilder::setConstructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v59, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v59, v49);
          }
          xmmword_26AF88D98 = v53;
          re::StringID::destroyString((re::StringID *)v56);
        }
      }
      uint64_t v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *(void *)(v50 + 8) = "animationAssets";
      *(void *)(v50 + 16) = &qword_26AF88D78;
      *(void *)(v50 + 24) = 0;
      *(void *)(v50 + 32) = 0x9800000007;
      *(_DWORD *)(v50 + 40) = 0;
      *(void *)(v50 + 48) = 0;
      *(void *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_26AF88D70 = v50;
      __cxa_guard_release(&qword_26AF88D18);
    }
  }
  *((void *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((void *)this + 8) = &qword_26AF88D38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioAnimationComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioAnimationComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioAnimationComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioAnimationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v51 = v52;
}

double re::internal::defaultConstruct<re::ecs2::AudioAnimationComponent>(int a1, int a2, re::ecs2::AudioAnimationComponent *this)
{
  return re::ecs2::AudioAnimationComponent::AudioAnimationComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioAnimationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioAnimationComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioAnimationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioAnimationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioAnimationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioAnimationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioAnimationComponent>, this);
}

void *re::ecs2::allocInfo_AudioAnimationSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88D28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88D28))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88E40, "AudioAnimationSystem");
    __cxa_guard_release(&qword_26AF88D28);
  }
  return &unk_26AF88E40;
}

void re::ecs2::initInfo_AudioAnimationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x7DC7B6F774A6607ALL;
  v5[1] = "AudioAnimationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AudioAnimationSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioAnimationSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioAnimationSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioAnimationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioAnimationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioAnimationSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioAnimationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::AudioAnimationSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1);
  *(void *)uint64_t v3 = &unk_26E7008E0;
  *(void *)(v3 + 104) = 0;
  *(unsigned char *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 136) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::AudioAnimationSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AudioAnimationSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1);
  *(void *)uint64_t v1 = &unk_26E7008E0;
  *(void *)(v1 + 104) = 0;
  *(unsigned char *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 136) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::AudioAnimationSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AudioAnimationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioAnimationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioAnimationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioAnimationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioAnimationSystem>, this);
}

double re::ecs2::AudioAnimationComponent::AudioAnimationComponent(re::ecs2::AudioAnimationComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E700888;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 44) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 1065353216;
  *(_DWORD *)(v1 + 64) = 1065353216;
  *(unsigned char *)(v1 + 68) = 0;
  *(void *)(v1 + 128) = 0;
  *(unsigned char *)(v1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_DWORD *)(v1 + 184) = 0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)(v1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 0;
  *(void *)(v1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(void *)(v1 + 236) = 0x7FFFFFFFLL;
  return result;
}

void re::ecs2::AudioAnimationComponent::~AudioAnimationComponent(re::ecs2::AudioAnimationComponent *this)
{
  *(void *)this = &unk_26E700888;
  uint64_t v2 = (re::ecs2::AudioAnimationComponent *)((char *)this + 72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 25);
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 19);
  re::AssetHandle::~AssetHandle(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::AudioAnimationComponent::~AudioAnimationComponent(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::AudioAnimationComponent::setAudioAssetForEvent(re::ecs2::AudioAnimationComponent *this, re::AssetHandle *a2, const re::DynamicString *a3)
{
  if (*((void *)a3 + 1)) {
    uint64_t v5 = (const char *)*((void *)a3 + 2);
  }
  else {
    uint64_t v5 = (char *)a3 + 9;
  }
  *(void *)&v14.var0 = 0;
  v14.var1 = "";
  unint64_t v6 = *(void *)&v14.var0;
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((*(void *)&v14.var0 >> 31) ^ (*(void *)&v14.var0 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                                                * ((*(void *)&v14.var0 >> 31) ^ (*(void *)&v14.var0 >> 1))) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (!*((void *)this + 19))
  {
    LODWORD(v9) = 0;
    goto LABEL_13;
  }
  unint64_t v9 = v8 % *((unsigned int *)this + 44);
  uint64_t v10 = *(unsigned int *)(*((void *)this + 20) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_13:
    re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::AssetHandle&>((uint64_t)this + 152, v9, v8, &v14, a2);
    goto LABEL_14;
  }
  uint64_t v11 = *((void *)this + 21);
  var1 = v14.var1;
  while (1)
  {
    if ((*(void *)(v11 + 48 * v10 + 8) ^ v6) <= 1)
    {
      uint64_t v13 = *(const char **)(v11 + 48 * v10 + 16);
      if (v13 == var1 || !strcmp(v13, var1)) {
        break;
      }
    }
    uint64_t v10 = *(_DWORD *)(v11 + 48 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_13;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(v11 + 48 * v10 + 24));
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*((void *)this + 21) + 48 * v10 + 24), a2);
LABEL_14:
  ++*((_DWORD *)this + 48);
  re::StringID::destroyString((re::StringID *)&v14);
}

void re::ecs2::AudioAnimationComponent::removeAudioAssetForEvent(re::ecs2::AudioAnimationComponent *this, const re::DynamicString *a2)
{
  uint64_t v2 = (char *)this + 152;
  if (*((void *)a2 + 1)) {
    uint64_t v3 = (const char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v3 = (char *)a2 + 9;
  }
  v4[0] = 0;
  v4[1] = "";
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v2, v4);
  re::StringID::destroyString((re::StringID *)v4);
}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v9 + 48 * v7 + 8), a2))
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 48 * v7);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v9 + 48 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 48 * v10) = *(_DWORD *)(v9 + 48 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 48 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 48 * v7) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + 48 * v7));
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v7) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

uint64_t re::ecs2::AudioAnimationComponent::getPlaybackTokenForEvent(re::ecs2::AudioAnimationComponent *this, const re::DynamicString *a2)
{
  uint64_t v2 = (char *)this + 200;
  if (*((void *)a2 + 1)) {
    uint64_t v3 = (const char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v3 = (char *)a2 + 9;
  }
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v2, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    return *(void *)v4;
  }
  else {
    return 0;
  }
}

uint64_t re::ecs2::AudioAnimationSystem::willAddSystemToECSService(re::ecs2::AudioAnimationSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((void *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::AudioAnimationSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  return this;
}

void re::ecs2::AudioAnimationSystem::willAddSceneToECSService(re::ecs2::AudioAnimationSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v24 = this;
  v25[0] = re::ecs2::AudioAnimationSystem::didAddComponents;
  v25[1] = 0;
  v25[2] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::createSubscription<re::ecs2::AudioAnimationSystem>(re::ecs2::AudioAnimationSystem *,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Slice<re::ecs2::AudioAnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioAnimationComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 128), (uint64_t)&v24);
  uint64_t v6 = (re::EventBus *)*((void *)a2 + 36);
  if (v6)
  {
    uint64_t v7 = re::globalAllocators(v5)[2];
    uint64_t v19 = v7;
    unint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v7 + 32))(v7, 32, 0);
    *unint64_t v8 = &unk_26E700998;
    v8[1] = this;
    v8[2] = re::ecs2::AudioAnimationSystem::animationTimelineEventDidStart;
    v8[3] = 0;
    unint64_t v20 = v8;
    uint64_t v16 = v7;
    uint64_t v17 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::operator=<24ul>((uint64_t)v15, (uint64_t)v18);
    uint64_t v22 = v16;
    uint64_t v23 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::operator=<24ul>((uint64_t)v21, (uint64_t)v15);
    uint64_t Type = re::EventBus::getTypeId<REAnimationHasTimelineEventStart>();
    unint64_t EventInfo = re::EventBus::addOrGetEventInfo(v6, (uint64_t)Type);
    uint64_t v28 = v22;
    uint64_t v29 = 0;
    int v11 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::operator=<24ul>((uint64_t)v27, (uint64_t)v21);
    v25[5] = re::globalAllocators(v11)[2];
    uint64_t v26 = 0;
    uint64_t v24 = (re::ecs2::AudioAnimationSystem *)&unk_26E700AA0;
    v25[3] = v28;
    v25[4] = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::operator=<24ul>((uint64_t)v25, (uint64_t)v27);
    uint64_t v26 = &v24;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::destroyCallable((uint64_t)v27);
    uint64_t v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)&v24, 0, 0xE32FFACEFE22CE5);
    uint64_t v14 = v13;
    re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v24);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::destroyCallable((uint64_t)v21);
    if (!*((unsigned char *)this + 112)) {
      *((unsigned char *)this + 112) = 1;
    }
    *((void *)this + 15) = v12;
    *((void *)this + 16) = v14;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::destroyCallable((uint64_t)v15);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::destroyCallable((uint64_t)v18);
  }
}

uint64_t re::ecs2::AudioAnimationSystem::animationTimelineEventDidStart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v4 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v6 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  unint64_t v8 = (re::ecs2::AudioPlayerComponent **)v6;
  uint64_t v10 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 40);
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = "";
  int v11 = (StringID *)re::TimelineEventData::parameter<re::StringID>(v9, v10, &buf);
  re::StringID::destroyString((re::StringID *)&buf);
  if (v11)
  {
    if (*(void *)&v11->var0 > 1uLL || (uint64_t v13 = v11->var1) == 0 || *v13)
    {
      uint64_t v14 = *re::audioLogObjects(v12);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        long long v53 = v14;
        var1 = v11->var1;
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = var1;
        _os_log_debug_impl(&dword_233120000, v53, OS_LOG_TYPE_DEBUG, "AudioAnimationSystem: Play audio animation event: %s", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v15 = (const re::AssetHandle *)re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5 + 152, v11);
      if (!v15)
      {
        uint64_t v24 = *re::audioLogObjects(0);
        char v23 = 1;
        uint64_t v12 = (re *)os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
        if (v12)
        {
          uint64_t v25 = v24;
          uint64_t v26 = v11->var1;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v26;
          _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_INFO, "AudioAnimationSystem: no audio asset defined for event: %s", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_29;
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v59, v15);
      unint64_t v16 = re::ecs2::AudioPlayerComponent::prepare((uint64_t)v8, (re::AssetHandle *)v59);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v59);
      re::ecs2::AudioPlayerComponent::play((uint64_t)v8, v16, 1);
      unint64_t v17 = 0xBF58476D1CE4E5B9 * ((*(void *)&v11->var0 >> 31) ^ (*(void *)&v11->var0 >> 1));
      unint64_t v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
      if (*(void *)(v5 + 200))
      {
        unint64_t v19 = v18 % *(unsigned int *)(v5 + 224);
        uint64_t v20 = *(unsigned int *)(*(void *)(v5 + 208) + 4 * v19);
        if (v20 != 0x7FFFFFFF)
        {
          unint64_t v57 = v18 % *(unsigned int *)(v5 + 224);
          unint64_t v58 = v16;
          uint64_t v21 = *(void *)(v5 + 216);
          while (1)
          {
            uint64_t v22 = v21 + 32 * v20;
            uint64_t v12 = (re *)re::StringID::operator==((void *)(v22 + 8), v11);
            if (v12) {
              break;
            }
            uint64_t v20 = *(_DWORD *)(v21 + 32 * v20) & 0x7FFFFFFF;
            if (v20 == 0x7FFFFFFF)
            {
              unint64_t v16 = v58;
              LODWORD(v19) = v57;
              goto LABEL_22;
            }
          }
          *(void *)(v22 + 24) = v58;
          goto LABEL_28;
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
LABEL_22:
      uint64_t v27 = *(unsigned int *)(v5 + 236);
      if (v27 == 0x7FFFFFFF)
      {
        uint64_t v27 = *(unsigned int *)(v5 + 232);
        int v28 = v27;
        if (v27 == *(_DWORD *)(v5 + 224))
        {
          re::HashTable<re::StringID,unsigned long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(v5 + 200, 2 * *(_DWORD *)(v5 + 228));
          LODWORD(v19) = v18 % *(unsigned int *)(v5 + 224);
          int v28 = *(_DWORD *)(v5 + 232);
        }
        *(_DWORD *)(v5 + 232) = v28 + 1;
        uint64_t v29 = *(void *)(v5 + 216);
        int v30 = *(_DWORD *)(v29 + 32 * v27);
      }
      else
      {
        uint64_t v29 = *(void *)(v5 + 216);
        int v30 = *(_DWORD *)(v29 + 32 * v27);
        *(_DWORD *)(v5 + 236) = v30 & 0x7FFFFFFF;
      }
      uint64_t v31 = 32 * v27;
      *(_DWORD *)(v29 + v31) = v30 | 0x80000000;
      unsigned int v32 = v19;
      *(_DWORD *)(*(void *)(v5 + 216) + v31) = *(_DWORD *)(*(void *)(v5 + 216) + 32 * v27) & 0x80000000 | *(_DWORD *)(*(void *)(v5 + 208) + 4 * v19);
      uint64_t v12 = re::StringID::StringID((re::StringID *)(*(void *)(v5 + 216) + 32 * v27 + 8), v11);
      *(void *)(*(void *)(v5 + 216) + 32 * v27 + 24) = v16;
      *(_DWORD *)(*(void *)(v5 + 208) + 4 * v32) = v27;
      ++*(_DWORD *)(v5 + 228);
LABEL_28:
      char v23 = 0;
      ++*(_DWORD *)(v5 + 240);
      goto LABEL_29;
    }
  }
  char v23 = 1;
LABEL_29:
  uint64_t v33 = *(void *)(a3 + 32);
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = "";
  unint64_t v34 = (void *)re::TimelineEventData::parameter<re::StringID>(v9, v33, &buf);
  re::StringID::destroyString((re::StringID *)&buf);
  if (v34)
  {
    if (*v34 > 1uLL || (int v37 = (unsigned char *)v34[1]) == 0 || *v37)
    {
      uint64_t v38 = *re::audioLogObjects(v35);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        long long v55 = v38;
        uint64_t v56 = v34[1];
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v56;
        _os_log_debug_impl(&dword_233120000, v55, OS_LOG_TYPE_DEBUG, "AudioAnimationSystem: Stop audio animation event: %s", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v39 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5 + 200, v34);
      if (v39)
      {
        uint64_t v40 = v39;
        re::ecs2::AudioPlayerComponent::stop(v8, *v39);
        re::ecs2::AudioPlayerComponent::destroy((re::ecs2::AudioPlayerComponent *)v8, *v40);
        if (*(void *)(v5 + 200))
        {
          unint64_t v41 = 0xBF58476D1CE4E5B9 * ((*v34 >> 31) ^ (*v34 >> 1));
          unint64_t v42 = ((0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) ^ ((0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) >> 31))
              % *(unsigned int *)(v5 + 224);
          uint64_t v43 = *(void *)(v5 + 208);
          uint64_t v44 = *(unsigned int *)(v43 + 4 * v42);
          if (v44 != 0x7FFFFFFF)
          {
            uint64_t v45 = *(void *)(v5 + 216);
            if (re::StringID::operator==((void *)(v45 + 32 * v44 + 8), v34))
            {
              *(_DWORD *)(v43 + 4 * v42) = *(_DWORD *)(v45 + 32 * v44) & 0x7FFFFFFF;
LABEL_47:
              uint64_t v49 = *(void *)(v5 + 216);
              uint64_t v50 = (int *)(v49 + 32 * v44);
              int v51 = *v50;
              if (*v50 < 0)
              {
                *uint64_t v50 = v51 & 0x7FFFFFFF;
                re::StringID::destroyString((re::StringID *)(v50 + 2));
                uint64_t v49 = *(void *)(v5 + 216);
                int v51 = *(_DWORD *)(v49 + 32 * v44);
              }
              *(_DWORD *)(v49 + 32 * v44) = *(_DWORD *)(v5 + 236) | v51 & 0x80000000;
              --*(_DWORD *)(v5 + 228);
              int v52 = *(_DWORD *)(v5 + 240) + 1;
              *(_DWORD *)(v5 + 236) = v44;
              *(_DWORD *)(v5 + 240) = v52;
            }
            else
            {
              while (1)
              {
                unsigned int v47 = v44;
                int v48 = *(_DWORD *)(v45 + 32 * v44);
                uint64_t v44 = v48 & 0x7FFFFFFF;
                if ((v48 & 0x7FFFFFFF) == 0x7FFFFFFF) {
                  break;
                }
                if (re::StringID::operator==((void *)(v45 + 32 * v44 + 8), v34))
                {
                  *(_DWORD *)(v45 + 32 * v47) = *(_DWORD *)(v45 + 32 * v47) & 0x80000000 | *(_DWORD *)(v45 + 32 * v44) & 0x7FFFFFFF;
                  goto LABEL_47;
                }
              }
            }
          }
        }
        goto LABEL_41;
      }
    }
  }
  if ((v23 & 1) == 0) {
LABEL_41:
  }
    re::ecs2::AudioAnimationSystem::markAudioPlayerDirty((re::ecs2::AudioAnimationSystem *)v5, v36);
  return 0;
}

uint64_t re::ecs2::AudioAnimationSystem::willRemoveSceneFromECSService(re::ecs2::AudioAnimationSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(void *)&long long v6 = this;
  *((void *)&v6 + 1) = re::ecs2::AudioAnimationSystem::didAddComponents;
  uint64_t v7 = 0;
  unint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::createSubscription<re::ecs2::AudioAnimationSystem>(re::ecs2::AudioAnimationSystem *,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Slice<re::ecs2::AudioAnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioAnimationComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 128, &v6);
  uint64_t result = *((void *)a2 + 36);
  if (result && *((unsigned char *)this + 112))
  {
    uint64_t result = re::EventBus::unsubscribe(result, *((void *)this + 15), *((void *)this + 16));
    if (*((unsigned char *)this + 112)) {
      *((unsigned char *)this + 112) = 0;
    }
  }
  return result;
}

uint64_t re::ecs2::AudioAnimationSystem::didAddComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = [MEMORY[0x263EFFA40] standardUserDefaults];
      [v7 doubleForKey:@"com.apple.re.AudioAnimationSyncThreshold"];
      *(void *)(v6 + 136) = v8;

      if (*(double *)(v6 + 136) == 0.0) {
        *(void *)(v6 + 136) = 0x3FA5810624DD2F1BLL;
      }
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::TimelineEventData::parameter<re::StringID>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (!v5 || v5[1] != 3) {
    return 0;
  }
  uint64_t v6 = *v5;
  return re::EventParameterArray<re::StringID>::parameter((void *)(a1 + 280), a2, v6);
}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 48 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 48 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 48 * v4 + 24;
}

void re::ecs2::AudioAnimationSystem::markAudioPlayerDirty(re::ecs2::AudioAnimationSystem *this, re::ecs2::AudioAnimationComponent *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v4)
    {
      uint64_t v5 = (const re::ecs2::Component *)v4;
      uint64_t v6 = *(re::ecs2::NetworkComponent **)(v2 + 200);
      if (v6)
      {
        re::ecs2::NetworkComponent::markDirty(v6, v5);
      }
    }
    else
    {
      uint64_t v7 = *re::audioLogObjects(0);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *((void *)this + 12);
        int v9 = 134217984;
        uint64_t v10 = v8;
        _os_log_debug_impl(&dword_233120000, v7, OS_LOG_TYPE_DEBUG, "Expected AudioPlayerComponent on associated Entity for AudioAnimationComponent (token=%llu)", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

uint64_t re::ecs2::AudioAnimationSystem::update(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t result = *(void *)(a1 + 104);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if (a2)
    {
      uint64_t v7 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v55);
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v7);
      if (isStatisticCollectionEnabled)
      {
        uint64_t v9 = re::profilerThreadContext(isStatisticCollectionEnabled);
        uint64_t v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        unint64_t v11 = v10 ? *(void *)(v10 + 24) : 0;
        uint64_t v12 = *(int64x2_t **)(v9 + 152);
        if (v12)
        {
          unint64_t v13 = v12[572].u64[0];
          if (v13 >= v11) {
            unint64_t v13 = v11;
          }
          v12[572].i64[0] = v13;
          unint64_t v14 = v12[572].u64[1];
          if (v14 <= v11) {
            unint64_t v14 = v11;
          }
          v12[572].i64[1] = v14;
          int64x2_t v15 = vdupq_n_s64(1uLL);
          v15.i64[0] = v11;
          v12[573] = vaddq_s64(v12[573], v15);
          *(unsigned char *)(v9 + 184) = 0;
        }
      }
      unint64_t v16 = (re::ecs2::SceneComponentTable *)(a2 + 200);
      re::ecs2::SceneComponentTable::get(v16, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54, 3097, a1);
      uint64_t v17 = re::ecs2::SceneComponentTable::get(v16, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      uint64_t v18 = *(void *)(v17 + 24);
      if (v18)
      {
        unint64_t v19 = *(uint64_t **)(v17 + 40);
        for (uint64_t i = 8 * v18; i; i -= 8)
        {
          uint64_t v21 = *v19;
          if (!*v19) {
            goto LABEL_72;
          }
          uint64_t v22 = *(void *)(v21 + 16);
          if (!v22) {
            goto LABEL_72;
          }
          isPlaying = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v22 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (!isPlaying)
          {
            uint64_t v31 = *re::audioLogObjects(0);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_233120000, v31, OS_LOG_TYPE_DEFAULT, "Expected AudioPlayerComponent on associated Entity", buf, 2u);
            }
            goto LABEL_72;
          }
          uint64_t v25 = isPlaying;
          unint64_t v26 = *(void *)(v21 + 96);
          BOOL v27 = v26 == 0;
          unint64_t v28 = v26;
          if (!v26)
          {
            if (!*(unsigned char *)(v21 + 44)) {
              goto LABEL_72;
            }
            re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)(v21 + 72));
            *(void *)(v21 + 96) = re::ecs2::AudioPlayerComponent::prepare((uint64_t)v25, (re::AssetHandle *)buf);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
            unint64_t v28 = *(void *)(v21 + 96);
            if (!v28) {
              goto LABEL_71;
            }
          }
          uint64_t v29 = (_OWORD *)(v21 + 32);
          uint64_t v30 = *(void *)(v21 + 48);
          if (*(void *)(v21 + 104) == v30)
          {
            *(_DWORD *)(v21 + 40) = 0;
            *(void *)(v21 + 32) = 0;
            goto LABEL_66;
          }
          *(void *)(v21 + 104) = v30;
          float v32 = *(float *)(v21 + 40);
          if (v32 <= 0.0) {
            goto LABEL_65;
          }
          double v33 = *(double *)(v21 + 32) - *(float *)(v21 + 60);
          if (v33 >= 0.0)
          {
            float v36 = *(float *)(v21 + 120);
            long double v37 = re::ecs2::AudioPlayerComponent::assetDurationFor(v25, v28);
            if (v37 != 0.0)
            {
              double v39 = fmod(v33, v37);
              if (v36 == 0.0)
              {
                uint64_t v40 = *re::audioLogObjects(v38);
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)unint64_t v57 = 134217984;
                  *(double *)&v57[4] = v39;
                  _os_log_debug_impl(&dword_233120000, v40, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent. Seeking on start to %f seconds", v57, 0xCu);
                }
                re::ecs2::AudioPlayerComponent::setPlaybackPositionFor(v25, v28, v39);
                goto LABEL_42;
              }
              double v41 = re::ecs2::AudioPlayerComponent::playbackPositionFor((CMTimeValue *)v25, v28);
              if (vabdd_f64(v39, v41) <= *(double *)(v21 + 136) + *(float *)&a3)
              {
                char v44 = 0;
              }
              else
              {
                re::ecs2::AudioPlayerComponent::setPlaybackPositionFor(v25, v28, v39);
                uint64_t v43 = *re::audioLogObjects(v42);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)unint64_t v57 = 134218240;
                  *(double *)&v57[4] = v39;
                  __int16 v58 = 2048;
                  double v59 = v39 - v41;
                  _os_log_debug_impl(&dword_233120000, v43, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent out of sync. Seeking to %5.4f sec, error = %5.4f sec", v57, 0x16u);
                }
LABEL_42:
                char v44 = 1;
                BOOL v27 = 1;
              }
              float v45 = 0.0;
              float v46 = 0.0;
              if (!*(unsigned char *)(v21 + 68)) {
                float v46 = *(float *)(v21 + 56) * *(float *)(v21 + 64);
              }
              *(void *)unint64_t v57 = v28;
              uint64_t v47 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v25 + 32, (uint64_t *)v57);
              if (v47) {
                float v45 = *(float *)(v47 + 84);
              }
              if (v46 != v45)
              {
                if (v36 == 0.0) {
                  float v48 = 0.0;
                }
                else {
                  float v48 = *(float *)&a3;
                }
                re::ecs2::AudioPlayerComponent::fadeToGain((re::ecs2::AudioPlayerComponent **)v25, v28, v46, v48);
                BOOL v27 = 1;
              }
              isPlaying = (re *)re::ecs2::AudioPlayerComponent::isPlaying(v25, *(void *)(v21 + 96));
              if (isPlaying)
              {
                char v49 = 0;
                goto LABEL_63;
              }
              char v53 = v44;
              if (!*(unsigned char *)(v21 + 144)) {
                goto LABEL_58;
              }
              uint64_t v50 = *re::audioLogObjects(isPlaying);
              isPlaying = (re *)os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG);
              if (isPlaying)
              {
                *(_WORD *)unint64_t v57 = 0;
                _os_log_debug_impl(&dword_233120000, v50, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent skipping subsequent play command because we already sent a play command.", v57, 2u);
              }
              if (!*(unsigned char *)(v21 + 144))
              {
LABEL_58:
                int v51 = *re::audioLogObjects(isPlaying);
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)unint64_t v57 = 134217984;
                  *(void *)&v57[4] = v28;
                  _os_log_debug_impl(&dword_233120000, v51, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent sending play(token=%llu)", v57, 0xCu);
                }
                if ((v53 & 1) == 0) {
                  re::ecs2::AudioPlayerComponent::setPlaybackPositionFor(v25, v28, v39);
                }
                char v49 = 1;
                re::ecs2::AudioPlayerComponent::play((uint64_t)v25, v28, 1);
                BOOL v27 = 1;
LABEL_63:
                *(unsigned char *)(v21 + 144) = v49;
              }
              float v32 = *(float *)(v21 + 40);
LABEL_65:
              if (v32 == 0.0)
              {
LABEL_66:
                if (*(unsigned char *)(v21 + 144)
                  || (isPlaying = (re *)re::ecs2::AudioPlayerComponent::isPlaying(v25, *(void *)(v21 + 96)),
                      isPlaying))
                {
                  int v52 = *re::audioLogObjects(isPlaying);
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)unint64_t v57 = 134217984;
                    *(void *)&v57[4] = v28;
                    _os_log_debug_impl(&dword_233120000, v52, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent sending pause(token=%llu)", v57, 0xCu);
                  }
                  re::ecs2::AudioPlayerComponent::pause((re::ecs2::AudioPlayerComponent **)v25, v28);
                  *(unsigned char *)(v21 + 144) = 0;
                  *(_OWORD *)(v21 + 112) = *v29;
                  *(void *)(v21 + 128) = *(void *)(v21 + 48);
                }
                else
                {
                  *(unsigned char *)(v21 + 144) = 0;
                  *(_OWORD *)(v21 + 112) = *v29;
                  *(void *)(v21 + 128) = *(void *)(v21 + 48);
                  if (!v27) {
                    goto LABEL_72;
                  }
                }
              }
              else
              {
                *(_OWORD *)(v21 + 112) = *v29;
                *(void *)(v21 + 128) = *(void *)(v21 + 48);
                if (!v27) {
                  goto LABEL_72;
                }
              }
LABEL_71:
              re::ecs2::AudioAnimationSystem::markAudioPlayerDirty((re::ecs2::AudioAnimationSystem *)v21, v24);
            }
          }
          else
          {
            BOOL v34 = re::ecs2::AudioPlayerComponent::isPlaying(v25, v28);
            if (v34)
            {
              uint64_t v35 = *re::audioLogObjects((re *)v34);
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)unint64_t v57 = 134217984;
                *(void *)&v57[4] = v28;
                _os_log_debug_impl(&dword_233120000, v35, OS_LOG_TYPE_DEBUG, "AudioAnimationComponent sending stop(token=%llu)", v57, 0xCu);
              }
              re::ecs2::AudioPlayerComponent::stop((re::ecs2::AudioPlayerComponent **)v25, v28);
              goto LABEL_71;
            }
            if (!v26) {
              goto LABEL_71;
            }
          }
LABEL_72:
          ++v19;
        }
      }
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v55);
    }
  }
  return result;
}

void re::ecs2::AudioAnimationSystem::~AudioAnimationSystem(re::ecs2::AudioAnimationSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AudioAnimationSystem::typeInfo(re::ecs2::AudioAnimationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioAnimationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioAnimationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioAnimationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioAnimationSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700998;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700998;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioAnimationSystem,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::size()
{
  return 32;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  memset(v10, 0, sizeof(v10));
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 12;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 48 * v10 + 8, *(void *)(a2 + 16) + 48 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 48 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

double re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 48;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(_DWORD *a1)
{
  if ((*a1 & 0x80000000) != 0)
  {
    *a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 2));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 6));
  }
}

void re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)int64x2_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 48 * v9 + 8), a4);
  int64x2_t v15 = (void *)(*(void *)(a1 + 16) + 48 * v9);
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v15[4] = a5[1];
  a5[1] = 0;
  uint64_t v16 = v15[3];
  v15[3] = 0;
  v15[3] = *a5;
  *a5 = v16;
  uint64_t v17 = v15[5];
  v15[5] = a5[2];
  a5[2] = v17;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 48;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, void *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 48 * v11;
    return v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 48 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v14 = (void *)(v10 + 48 * v9);
  uint64_t v15 = v14[4];
  _OWORD v14[4] = a3[1];
  a3[1] = v15;
  uint64_t v16 = v14[3];
  v14[3] = 0;
  v14[3] = *a3;
  *a3 = v16;
  uint64_t v17 = v14[5];
  v14[5] = a3[2];
  a3[2] = v17;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 48 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 48 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 12;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::AudioAnimationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioAnimationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::AssetHandle&>(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, const re::AssetHandle *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 48 * v9 + 8), a4);
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 48 * v9 + 24), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::createSubscription<re::ecs2::AudioAnimationSystem>(re::ecs2::AudioAnimationSystem *,REEventHandlerResult (re::ecs2::AudioAnimationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Slice<re::ecs2::AudioAnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioAnimationComponent>,re::Slice<re::ecs2::AudioAnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioAnimationComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  int v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    int v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

char *re::EventBus::getTypeId<REAnimationHasTimelineEventStart>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<REAnimationHasTimelineEventStart>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32REAnimationHasTimelineEventStart" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[379];
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E700AA0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E700AA0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E700AA0;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E700AA0;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTimelineEventStart const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::EventParameterArray<re::StringID>::parameter(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 + *a1 * a2;
  if (a1[3] <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1[5] + 16 * v3;
}

void re::HashTable<re::StringID,unsigned long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)char v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        do
        {
          if ((*(_DWORD *)v6 & 0x80000000) != 0)
          {
            unint64_t v13 = 0xBF58476D1CE4E5B9 * ((*(void *)(v6 + 8) >> 31) ^ (*(void *)(v6 + 8) >> 1));
            unint64_t v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::StringID,unsigned long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            uint64_t v21 = 32 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v21) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v17 + 8), (const StringID *)(v6 + 8));
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 24) = *(void *)(v6 + 24);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v6 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void *re::ecs2::allocInfo_ThrottleService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_245, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_245))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88EC0, "ThrottleService");
    __cxa_guard_release(&_MergedGlobals_245);
  }
  return &unk_26AF88EC0;
}

void re::ecs2::initInfo_ThrottleService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x174E2110AB251016;
  v5[1] = "ThrottleService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ThrottleService>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ThrottleService>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ThrottleService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_ThrottleService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ThrottleService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ThrottleService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ThrottleService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ThrottleService>, this);
}

id re::internal::defaultRetain<re::ecs2::ThrottleService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ThrottleService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_PreviewSupportComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_246, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_246))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88F50, "PreviewSupportComponent");
    __cxa_guard_release(&_MergedGlobals_246);
  }
  return &unk_26AF88F50;
}

void re::ecs2::initInfo_PreviewSupportComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x71CA9DDC24F30B6CLL;
  v9[1] = "PreviewSupportComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88F48, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF88F48);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88F40 = v7;
      __cxa_guard_release(&qword_26AF88F48);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF88F40;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PreviewSupportComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PreviewSupportComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PreviewSupportComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PreviewSupportComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::PreviewSupportComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F5F28;
}

void *re::internal::defaultDestruct<re::ecs2::PreviewSupportComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::PreviewSupportComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F5F28;
}

void *re::internal::defaultDestructV2<re::ecs2::PreviewSupportComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PreviewSupportComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PreviewSupportComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PreviewSupportComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PreviewSupportComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PreviewSupportComponent>, this);
}

void re::ecs2::PinHandle::~PinHandle(re::ecs2::PinHandle *this)
{
  *(void *)this = 0;
}

void re::ecs2::PinHandle::pin(id *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained(this);
  if (!WeakRetained) {
    goto LABEL_15;
  }

  long long v5 = (char *)objc_loadWeakRetained(this);
  if (v5)
  {
    uint64_t v6 = v5 - 8;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (re::ecs2::PinComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7
    && (long long v8 = (const StringID *)(this + 3),
        re::ecs2::PinComponent::pinByName(v7, (const re::StringID *)(this + 3), (uint64_t)v35),
        v35[0]))
  {
    v27[0] = v37;
    v27[1] = v38;
    v25[0] = v39;
    if (v39)
    {
      re::StringID::StringID((re::StringID *)v26, &v40);
      long long v9 = objc_loadWeakRetained(this);

      long long v10 = (re::ecs2::PinSkeletalPoseHelper *)v9[28];
      int v11 = objc_loadWeakRetained(this);

      if (v10
        && (uint64_t v12 = v11[21]) != 0
        && (uint64_t v13 = *(void *)(v12 + 40)) != 0
        && (unsigned int v14 = atomic_load((unsigned int *)(v13 + 704)), v14 == 2)
        && (unint64_t v15 = (const re::ecs2::SkeletalPoseComponent *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v12 + 32)),
            re::ecs2::PinSkeletalPoseHelper::pinByName(v10, v15, (const re::MeshAsset *)v8, v31),
            v31[0]))
      {
        int32x4_t v23 = v33;
        long long v24 = v34;
        *(void *)&long long v16 = 0x7F0000007FLL;
        *((void *)&v16 + 1) = 0x7F0000007FLL;
        v22[0] = vdupq_n_s32(0x7F800000u);
        v22[1] = v16;
        uint64_t v21 = 0;
        uint64_t v19 = 0;
        long long v18 = 0uLL;
        LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
        re::ecs2::Pin::Pin((uint64_t)v28, v8, &v23, v27, v25, v22, (uint64_t *)&v18);
        re::Optional<re::ecs2::Pin>::Optional((uint64_t)a2, (uint64_t)v28);
        re::ecs2::Pin::~Pin((re::ecs2::Pin *)v28);
        re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)&v18);
        if (v31[0]) {
          (*v32)();
        }
      }
      else
      {
        *a2 = 0;
      }
    }
    else
    {
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      uint64_t v20 = 0x3F80000000000000;
      LOBYTE(v22[0]) = 0;
      *(void *)&long long v17 = 0x7F0000007FLL;
      *((void *)&v17 + 1) = 0x7F0000007FLL;
      int32x4_t v23 = vdupq_n_s32(0x7F800000u);
      long long v24 = v17;
      uint64_t v30 = 0;
      memset(v28, 0, sizeof(v28));
      int v29 = 0;
      re::ecs2::Pin::Pin((uint64_t)v31, v8, &v18, v27, (unsigned __int8 *)v22, &v23, v28);
      re::Optional<re::ecs2::Pin>::Optional((uint64_t)a2, (uint64_t)v31);
      re::ecs2::Pin::~Pin((re::ecs2::Pin *)v31);
      re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)v28);
      if (LOBYTE(v22[0])) {
        re::StringID::destroyString((re::StringID *)((char *)v22 + 8));
      }
    }
    if (v25[0]) {
      re::StringID::destroyString((re::StringID *)v26);
    }
    if (v35[0]) {
      (*v36)();
    }
  }
  else
  {
LABEL_15:
    *a2 = 0;
  }
}

void re::ecs2::PinHandle::pinPose(id *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained(this);
  if (WeakRetained)
  {

    re::ecs2::PinHandle::pin(this, v25);
    if (v25[0])
    {
      float32x4_t v7 = v27;
      _Q1 = v28;
      if (a2)
      {
        float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL);
        float32x4_t v10 = *((float32x4_t *)this + 3);
        _Q4 = *((float32x4_t *)this + 4);
        float32x4_t v12 = vnegq_f32((float32x4_t)v28);
        float32x4_t v13 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), v12), v10, v9);
        int8x16_t v14 = (int8x16_t)vaddq_f32(v13, v13);
        float32x4_t v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL);
        int8x16_t v16 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), v12), v15, v9);
        float32x4_t v7 = vaddq_f32(v27, vaddq_f32(vaddq_f32(v10, vmulq_laneq_f32(v15, (float32x4_t)v28, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL)));
        _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), (int8x16_t)_Q4, 0xCuLL), v12), _Q4, v9);
        float32x4_t v18 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), _Q4, (float32x4_t)v28, 3);
        _Q3.i32[0] = _Q4.i32[3];
        float32x4_t v19 = vmlaq_laneq_f32(v18, (float32x4_t)v28, _Q4, 3);
        __asm { FMLA            S4, S3, V1.S[3] }
        v19.i32[3] = _Q4.i32[0];
        _Q1 = (int32x4_t)v19;
      }
      *(unsigned char *)a3 = 1;
      *(float32x4_t *)(a3 + 16) = v7;
      *(int32x4_t *)(a3 + 32) = _Q1;
      (*v26)();
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
  }
  else
  {
    *(unsigned char *)a3 = 1;
    long long v24 = *((_OWORD *)this + 4);
    *(_OWORD *)(a3 + 16) = *((_OWORD *)this + 3);
    *(_OWORD *)(a3 + 32) = v24;
  }
}

BOOL re::ecs2::PinHandle::operator==(uint64_t a1, uint64_t a2)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)a1);
  if (WeakRetained)
  {
    long long v5 = WeakRetained - 8;
  }
  else
  {
    long long v5 = 0;
  }
  uint64_t v6 = (char *)objc_loadWeakRetained((id *)a2);
  if (v6)
  {
    float32x4_t v7 = v6 - 8;
  }
  else
  {
    float32x4_t v7 = 0;
  }
  if (v5 != v7) {
    return 0;
  }
  BOOL result = re::StringID::operator==((void *)(a1 + 24), (void *)(a2 + 24));
  if (result)
  {
    uint32x4_t v9 = (uint32x4_t)vceqq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a2 + 48));
    v9.i32[3] = v9.i32[2];
    if ((vminvq_u32(v9) & 0x80000000) == 0) {
      return 0;
    }
    return vminvq_u32((uint32x4_t)vceqq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a2 + 64))) >> 31;
  }
  return result;
}

void *re::ecs2::allocInfo_PinHandle(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88FD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88FD0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88FF0, "PinHandle");
    __cxa_guard_release(&qword_26AF88FD0);
  }
  return &unk_26AF88FF0;
}

void re::ecs2::initInfo_PinHandle(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x818C5825CFFALL;
  v17[1] = "PinHandle";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_247, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_247);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      float32x4_t v7 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_entityHandle";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF88FD8 = v8;
      uint32x4_t v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_pinName";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF88FE0 = v12;
      float32x4_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v14 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "m_offsetFromPin";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x3000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF88FE8 = v15;
      __cxa_guard_release(&_MergedGlobals_247);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF88FD8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PinHandle>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PinHandle>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PinHandle>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PinHandle>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::internal::defaultConstruct<re::ecs2::PinHandle>(int a1, int a2, id *location)
{
  location[1] = 0;
  location[2] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
  location[3] = 0;
  location[4] = "";
  location[6] = 0;
  location[7] = 0;
  location[8] = 0;
  location[9] = (id)0x3F80000000000000;
}

void re::internal::defaultDestruct<re::ecs2::PinHandle>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
}

void re::internal::defaultConstructV2<re::ecs2::PinHandle>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)a1);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = "";
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x3F80000000000000;
}

void re::internal::defaultDestructV2<re::ecs2::PinHandle>(uint64_t a1)
{
  *(void *)a1 = 0;
}

uint64_t re::ecs2::introspect_PinHandle(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PinHandle", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PinHandle, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PinHandle, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PinHandle>, this);
}

void re::ecs2::introspect_GroundingShadowFadeBehaviorNearPhysicalObjects(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89070, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF89070);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      unint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)unint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Default";
      qword_26AF89090 = (uint64_t)v26;
      float32x4_t v27 = re::introspectionAllocator(v26);
      int32x4_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)int32x4_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Fade";
      qword_26AF89098 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "Constant";
      qword_26AF890A0 = v30;
      __cxa_guard_release(&qword_26AF89070);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89078, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89078))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF890D8, "GroundingShadowFadeBehaviorNearPhysicalObjects", 4, 4, 1, 1);
    qword_26AF890D8 = (uint64_t)&unk_26E715E00;
    qword_26AF89118 = (uint64_t)&re::ecs2::introspect_GroundingShadowFadeBehaviorNearPhysicalObjects(BOOL)::enumTable;
    dword_26AF890E8 = 9;
    __cxa_guard_release(&qword_26AF89078);
  }
  if ((_MergedGlobals_248 & 1) == 0)
  {
    _MergedGlobals_248 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF890D8, a2);
    uint64_t v32 = 0xC6305B05C0246B98;
    int32x4_t v33 = "GroundingShadowFadeBehaviorNearPhysicalObjects";
    v36[0] = 208862;
    v36[1] = "int";
    int v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      long long v4 = (unsigned int *)qword_26AF89118;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint32x4_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF890F8 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GroundingShadowFadeBehaviorNearPhysicalObjects", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_GroundingShadowComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89080, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89080))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89120, "GroundingShadowComponent");
    __cxa_guard_release(&qword_26AF89080);
  }
  return &unk_26AF89120;
}

void re::ecs2::initInfo_GroundingShadowComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v28[0] = 0xB9FED500E734E2C4;
  v28[1] = "GroundingShadowComponent";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89088, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF89088);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF890A8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "enableIBLShadow";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF890B0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "enableMeshShadow";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1B00000002;
      *(_DWORD *)(v15 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF890B8 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_BOOL((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "enableReceiveIBLShadow";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1A00000003;
      *(_DWORD *)(v19 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF890C0 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_BOOL((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "enableReceiveMeshShadow";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1C00000004;
      *(_DWORD *)(v23 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF890C8 = v23;
      long long v24 = (re::ecs2 *)re::introspectionAllocator((re *)v23);
      re::ecs2::introspect_GroundingShadowFadeBehaviorNearPhysicalObjects(v24, v25);
      uint64_t v26 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "shadowFadeBehaviorNearPhysicalObjects";
      *(void *)(v26 + 16) = &qword_26AF890D8;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x2000000005;
      *(_DWORD *)(v26 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF890D0 = v26;
      __cxa_guard_release(&qword_26AF89088);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF890A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::GroundingShadowComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::GroundingShadowComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::GroundingShadowComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::GroundingShadowComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v27 = v29;
}

double re::internal::defaultConstruct<re::ecs2::GroundingShadowComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = &unk_26E6F5708;
  *(void *)&double result = 0x1000000010000;
  *(_DWORD *)(v3 + 24) = 0x10000;
  *(unsigned char *)(v3 + 28) = 1;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 36) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::GroundingShadowComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::GroundingShadowComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = &unk_26E6F5708;
  *(void *)&double result = 0x1000000010000;
  *(_DWORD *)(v1 + 24) = 0x10000;
  *(unsigned char *)(v1 + 28) = 1;
  *(_DWORD *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 36) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::GroundingShadowComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_GroundingShadowComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GroundingShadowComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_GroundingShadowComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_GroundingShadowComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::GroundingShadowComponent>, this);
}

void *re::ecs2::allocInfo_UILayerGeometryService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_249, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_249))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF891A0, "UILayerGeometryService");
    __cxa_guard_release(&_MergedGlobals_249);
  }
  return &unk_26AF891A0;
}

void re::ecs2::initInfo_UILayerGeometryService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x2FEC9E4C8A81EA0CLL;
  v5[1] = "UILayerGeometryService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_UILayerGeometryService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_UILayerGeometryService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"UILayerGeometryService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_UILayerGeometryService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_UILayerGeometryService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::UILayerGeometryService>, this);
}

uint64_t re::ShadowManager::getMutableShadowParams(re::ShadowManager *this)
{
  return (uint64_t)this + 16;
}

double re::ShadowManager::ShadowManager(re::ShadowManager *this)
{
  *(void *)this = &unk_26E700AF8;
  *((_DWORD *)this + 4) = 1065353216;
  *(_OWORD *)((char *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = xmmword_2343864E0;
  *((_DWORD *)this + 9) = 12;
  *((void *)this + 5) = 0x3CF5C28F3F800000;
  *((_WORD *)this + 24) = 0;
  *((_OWORD *)this + 4) = xmmword_2343864F0;
  *((void *)this + 1objc_initWeak(location, 0) = 0x3EB333333F800000;
  *((unsigned char *)this + 88) = 1;
  *(_OWORD *)((char *)this + 92) = xmmword_234386500;
  *(_OWORD *)((char *)this + 108) = xmmword_234386510;
  *(void *)((char *)this + 124) = 0x3DCCCCCD41F00000;
  *((_DWORD *)this + 33) = 1097877340;
  *((unsigned char *)this + 136) = 1;
  *((_OWORD *)this + 9) = xmmword_23435FD90;
  *((unsigned char *)this + 16objc_initWeak(location, 0) = 1;
  *((void *)this + 22) = 0x3F8000003F2D42C4;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = 0xA3F800000;
  *((_OWORD *)this + 12) = xmmword_234386520;
  *((void *)this + 26) = 1056964608;
  *((_DWORD *)this + 54) = 0x40000000;
  *((_WORD *)this + 11objc_initWeak(location, 0) = 256;
  *((_WORD *)this + 112) = 1;
  *((unsigned char *)this + 226) = 0;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 57) = 897988541;
  *((void *)this + 3objc_initWeak(location, 0) = 0x3DCCCCCD3E800000;
  *((_DWORD *)this + 62) = 16;
  *((void *)this + 32) = 0x3F80000000000000;
  *((_DWORD *)this + 74) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 28objc_initWeak(location, 0) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(void *)((char *)this + 30objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 86) = 0;
  *(void *)((char *)this + 348) = 0x7FFFFFFFLL;
  *((void *)this + 45) = 1;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 46objc_initWeak(location, 0) = 0u;
  *(void *)((char *)this + 476) = 0x7FFFFFFFLL;
  *((void *)this + 61) = 0;
  return result;
}

void re::ShadowManager::~ShadowManager(re::ShadowManager *this)
{
  *(void *)this = &unk_26E700AF8;

  uint64_t v2 = *((void *)this + 55);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)((char *)this + 440);
    unint64_t v4 = *((unsigned int *)this + 118);
    if (v4)
    {
      uint64_t v5 = 0;
      for (unint64_t i = 0; i < v4; ++i)
      {
        uint64_t v7 = *((void *)this + 57) + v5;
        int v8 = *(_DWORD *)(v7 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          uint64_t v9 = *(void *)(v7 + 24);
          if (v9)
          {

            *(void *)(v7 + 24) = 0;
            unint64_t v4 = *((unsigned int *)this + 118);
          }
        }
        v5 += 32;
      }
      uint64_t v2 = *v3;
    }
    (*(void (**)(uint64_t, void))(*(void *)v2 + 40))(v2, *((void *)this + 56));
    *((_DWORD *)this + 118) = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)((char *)this + 456) = 0u;
    *(void *)((char *)this + 476) = 0x7FFFFFFFLL;
  }
  re::AssetHandle::~AssetHandle((re::ShadowManager *)((char *)this + 416));
  re::AssetHandle::~AssetHandle((re::ShadowManager *)((char *)this + 392));
  re::AssetHandle::~AssetHandle((re::ShadowManager *)((char *)this + 368));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 39);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 33);
}

{
  uint64_t vars8;

  re::ShadowManager::~ShadowManager(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ShadowManager::getShadowParams(re::ShadowManager *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *((_OWORD *)this + 14);
  *(_OWORD *)(a3 + 192) = *((_OWORD *)this + 13);
  *(_OWORD *)(a3 + 208) = v4;
  *(_OWORD *)(a3 + 224) = *((_OWORD *)this + 15);
  long long v5 = *((_OWORD *)this + 10);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 144) = v5;
  long long v6 = *((_OWORD *)this + 12);
  *(_OWORD *)(a3 + 16objc_initWeak(location, 0) = *((_OWORD *)this + 11);
  *(_OWORD *)(a3 + 176) = v6;
  long long v7 = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 8objc_initWeak(location, 0) = v7;
  long long v8 = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 112) = v8;
  long long v9 = *((_OWORD *)this + 2);
  *(_OWORD *)a3 = *((_OWORD *)this + 1);
  *(_OWORD *)(a3 + 16) = v9;
  long long v10 = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 48) = v10;
  if (re::ShadowManager::getMutableDeprecatedShadowParams(void)::deprecatedShadowParams) {
    *(unsigned char *)(a3 + 208) = byte_26879F781;
  }
  if (byte_26879F782) {
    *(unsigned char *)(a3 + 209) = byte_26879F783;
  }
  if (byte_26879F784) {
    *(unsigned char *)(a3 + 21objc_initWeak(location, 0) = byte_26879F785;
  }
  if (byte_26879F7B8) {
    *(_DWORD *)(a3 + 232) = dword_26879F7BC;
  }
  if (byte_26879F790) {
    *(_DWORD *)(a3 + 216) = dword_26879F794;
  }
  if (byte_26879F798) {
    *(_DWORD *)(a3 + 2re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = dword_26879F79C;
  }
  if (byte_26879F788) {
    *(_DWORD *)(a3 + 212) = dword_26879F78C;
  }
  if (byte_26879F7A8) {
    *(_DWORD *)(a3 + 224) = dword_26879F7AC;
  }
  if (byte_26879F7B0) {
    *(_DWORD *)(a3 + 228) = dword_26879F7B4;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89220))
  {
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.EnableTweaking", a2, &v53);
    if (v53) {
      char v52 = v54;
    }
    else {
      char v52 = 0;
    }
    _MergedGlobals_250 = v52;
    __cxa_guard_release(&qword_26AF89220);
  }
  if (_MergedGlobals_250)
  {
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.ForceShadowUpdate", a2, &v53);
    if (v53) {
      *(unsigned char *)(a3 + 32) = v54;
    }
    re::Defaults::uintValue((re::Defaults *)"MeshShadow.TileResolution", v11, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 4) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.BlurSizeScale", v12, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)a3 = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.IntensityMax", v13, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 64) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.IntensityScale", v14, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 6objc_initWeak(location, 0) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.OpacityCurveFactor", v15, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 68) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.BoundsDecayRate", v16, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 48) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.BelowReceiverDecayRate", v17, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 56) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.ReceiverDecayRate", v18, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 52) = v55;
    }
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.EnableNearFade", v19, &v53);
    if (v53) {
      *(unsigned char *)(a3 + 72) = v54;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.NearFadeStart", v20, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 76) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.NearFadeEnd", v21, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 8objc_initWeak(location, 0) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.NearFadeNormalizationDistance", v22, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 84) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.FalloffBias", v23, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 88) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.DepthErrorMultiplier", v24, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 92) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.OffsetMeshShadow", v25, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 10objc_initWeak(location, 0) = v55;
    }
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.DebugClearShadowTextureArray", v26, &v53);
    if (v53) {
      *(unsigned char *)(a3 + 33) = v54;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.NormalThresholdForFlatShadow", v27, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 108) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.FadeRangeMultiplier", v28, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 112) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.MaxMipDistance", v29, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 96) = v55;
    }
    re::Defaults::uintValue((re::Defaults *)"MeshShadow.NumMips", v30, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 16) = v55;
    }
    re::Defaults::uintValue((re::Defaults *)"MeshShadow.MinContentWidth", v31, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 12) = v55;
    }
    re::Defaults::uintValue((re::Defaults *)"MeshShadow.MinContentWidthCurvedUI", v32, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.MinBlurRadiusInWorldSpace", v33, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 28) = v55;
    }
    re::Defaults::intValue((re::Defaults *)"MeshShadow.PlaneProxy.Steps", v34, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 172) = v55;
    }
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.PlaneProxy.UseCylindricalProxy", v35, &v53);
    if (v53) {
      *(unsigned char *)(a3 + 205) = v54;
    }
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.PlaneProxy.RegenerateMesh", v36, &v53);
    if (v53) {
      *(unsigned char *)(a3 + 204) = v54;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.DepthRatio", v37, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 16objc_initWeak(location, 0) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.WidthRatio", v38, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 164) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.CurveFactor", v39, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 20objc_initWeak(location, 0) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.zTop", v40, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 176) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.zBottom", v41, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 18objc_initWeak(location, 0) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.xTop", v42, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 184) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.xBottom", v43, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 188) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.yTop", v44, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 192) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.yBottom", v45, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 196) = v55;
    }
    re::Defaults::floatValue((re::Defaults *)"MeshShadow.PlaneProxy.TiltFadeOpacityFalloffExp", v46, (uint64_t)&v53);
    if (v53) {
      *(_DWORD *)(a3 + 116) = v55;
    }
    re::Defaults::BOOLValue((re::Defaults *)"MeshShadow.PlaneProxy.EnablePlaneProxyTiltFade", v47, &v53);
    if (v53) {
      *(unsigned char *)(a3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v54;
    }
  }
  float v48 = *(float *)(a3 + 64);
  if (v48 >= *(float *)(a3 + 60)) {
    float v48 = *(float *)(a3 + 60);
  }
  *(float *)(a3 + 64) = v48;
  unsigned int v49 = *(_DWORD *)(a3 + 4) + (21 << (*(_DWORD *)(a3 + 16) - 1)) - 1;
  unsigned int v50 = v49 | (v49 >> 1) | ((v49 | (v49 >> 1)) >> 2);
  unsigned int v51 = v50 | (v50 >> 4) | ((v50 | (v50 >> 4)) >> 8);
  *(_DWORD *)(a3 + 8) = (v51 | HIWORD(v51)) + 1;
}

float re::ShadowManager::getClusterData@<S0>(re::ShadowManager *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *((void *)this + 32);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase(a2 + 8, (uint64_t)this + 264);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase(a2 + 56, (uint64_t)this + 312);
  *(void *)(a2 + 104) = *((void *)this + 45);
  if (byte_26879F7A0)
  {
    float result = *(float *)&dword_26879F7A4;
    *(_DWORD *)a2 = dword_26879F7A4;
  }
  if (byte_26879F7C0)
  {
    float result = *(float *)&dword_26879F7C4;
    *(_DWORD *)(a2 + 4) = dword_26879F7C4;
  }
  return result;
}

uint64_t re::ShadowManager::getMutableClusterData(re::ShadowManager *this)
{
  return (uint64_t)this + 256;
}

re::AssetHandle *re::ShadowManager::getDefaultMeshShadowCasterMaterial@<X0>(re::ShadowManager *this@<X0>, re::AssetHandle *a2@<X8>)
{
  return re::AssetHandle::AssetHandle(a2, (re::ShadowManager *)((char *)this + 368));
}

re::AssetHandle *re::ShadowManager::getDefaultMeshShadowReceiverMaterial@<X0>(re::ShadowManager *this@<X0>, re::AssetHandle *a2@<X8>)
{
  return re::AssetHandle::AssetHandle(a2, (re::ShadowManager *)((char *)this + 392));
}

re::AssetHandle *re::ShadowManager::getDefaultMeshShadowPatchReceiverMaterial@<X0>(re::ShadowManager *this@<X0>, re::AssetHandle *a2@<X8>)
{
  return re::AssetHandle::AssetHandle(a2, (re::ShadowManager *)((char *)this + 416));
}

void re::ShadowManager::transformForShadowProxy(re::ShadowManager *a1@<X0>, float32x2_t *a2@<X1>, float32x4_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  re::ShadowManager::getShadowParams(a1, (const char *)a2, (uint64_t)v10);
  if (v10[205])
  {
    re::internal::shadows::calcCylShadowProxyLocalTransform(a2, a3, (_OWORD *)a4);
  }
  else
  {
    float v7 = re::MeshShadowCasterParams::PlaneProxyParams::calcShadowProxyThicknessInLocalCoord(a2, a3);
    __int32 v8 = a2->i32[0];
    __int32 v9 = a2->i32[1];
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_DWORD *)a4 = v8;
    *(_DWORD *)(a4 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v9;
    *(float *)(a4 + 4objc_initWeak(location, 0) = v7;
    *(_DWORD *)(a4 + 6objc_initWeak(location, 0) = 1065353216;
  }
}

void re::ShadowManager::setShadowClusterRootUpdateHandler(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  long long v4 = *(void **)(a1 + 488);
  *(void *)(a1 + 488) = v3;
}

void re::ShadowManager::clearShadowClusterRootUpdateHandler(re::ShadowManager *this)
{
  uint64_t v1 = (void *)*((void *)this + 61);
  *((void *)this + 61) = 0;
}

id re::ShadowManager::getShadowClusterRootUpdateHandler(const void **this)
{
  uint64_t v1 = _Block_copy(this[61]);
  return v1;
}

void re::ShadowManager::init(void *a1, uint64_t a2)
{
  uint64_t v4 = re::ServiceLocator::service<re::AssetService>(a2);
  (*(void (**)(long long *__return_ptr))(*(void *)v4 + 8))(&v15);
  long long v5 = *(_OWORD *)(a1 + 49);
  *(_OWORD *)(a1 + 49) = v15;
  long long v15 = v5;
  uint64_t v6 = a1[51];
  a1[51] = v16;
  uint64_t v16 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 49));
  uint64_t v7 = re::ServiceLocator::service<re::AssetService>(a2);
  (*(void (**)(long long *__return_ptr))(*(void *)v7 + 8))(&v15);
  long long v8 = *((_OWORD *)a1 + 23);
  *((_OWORD *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = v15;
  long long v15 = v8;
  uint64_t v9 = a1[48];
  a1[48] = v16;
  uint64_t v16 = v9;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 46));
  uint64_t v10 = re::ServiceLocator::service<re::AssetService>(a2);
  (*(void (**)(long long *__return_ptr))(*(void *)v10 + 8))(&v15);
  long long v11 = *((_OWORD *)a1 + 26);
  *((_OWORD *)a1 + 26) = v15;
  long long v15 = v11;
  uint64_t v12 = a1[54];
  a1[54] = v16;
  uint64_t v16 = v12;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 52));
  re::internal::shadows::initializeMeshShadowDefaults(v13, v14);
}

uint64_t re::ShadowManager::getMaterialParameterBlockForClusterIds(re::ShadowManager *this)
{
  return (uint64_t)this + 440;
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, v4, v5);
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, v8 + 16, (void *)(v8 + 16));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::ecs2::CustomDeformerComponent::setCustomDeformerDeformationModel(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v10 = a1[6];
  if (v10 <= a3)
  {
    do
    {
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::add((_anonymous_namespace_ *)(a1 + 4), (uint64_t)&v11);
      re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v16);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v13 + 8);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v11);
      ++v10;
    }
    while (v10 <= a3);
    unint64_t v10 = a1[6];
  }
  if (v10 <= a3)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    uint64_t v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    unint64_t v23 = a3;
    __int16 v24 = 2048;
    unint64_t v25 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::CustomDeformerComponent::CustomDeformerData::addMappedDeformationDataToArray(a2, a4, a5, a1[8] + 120 * a3);
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        float result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::setCapacity(result, v10);
      }
      else
      {
        float result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  uint64_t v11 = *((void *)v3 + 4) + 120 * v5;
  *(void *)(v11 + 32) = 0;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = 0;
  *(_DWORD *)(v11 + 24) = 0;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)uint64_t v11 = *(void *)a2;
  *(void *)(v11 + 8) = v12;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v13 = *(void *)(v11 + 16);
  *(void *)(v11 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v13;
  uint64_t v14 = *(void *)(v11 + 32);
  *(void *)(v11 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v14;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v11 + 24);
  *(void *)(v11 + 72) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 4objc_initWeak(location, 0) = 0;
  *(_DWORD *)(v11 + 64) = 0;
  uint64_t v15 = *(void *)(a2 + 48);
  *(void *)(v11 + 4objc_initWeak(location, 0) = *(void *)(a2 + 40);
  *(void *)(v11 + 48) = v15;
  *(void *)(a2 + 4objc_initWeak(location, 0) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v16 = *(void *)(v11 + 56);
  *(void *)(v11 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v16;
  uint64_t v17 = *(void *)(v11 + 72);
  *(void *)(v11 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v17;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(v11 + 64);
  *(void *)(v11 + 112) = 0;
  *(void *)(v11 + 88) = 0;
  *(void *)(v11 + 96) = 0;
  *(void *)(v11 + 8objc_initWeak(location, 0) = 0;
  *(_DWORD *)(v11 + 104) = 0;
  uint64_t v18 = *(void *)(a2 + 88);
  *(void *)(v11 + 8objc_initWeak(location, 0) = *(void *)(a2 + 80);
  *(void *)(v11 + 88) = v18;
  *(void *)(a2 + 8objc_initWeak(location, 0) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v19 = *(void *)(v11 + 96);
  *(void *)(v11 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v19;
  uint64_t v20 = *(void *)(v11 + 112);
  *(void *)(v11 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v20;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(v11 + 104);
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::ecs2::CustomDeformerComponent::setCustomDeformerDeformationInput(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v10 = a1[6];
  if (v10 <= a3)
  {
    do
    {
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::add((_anonymous_namespace_ *)(a1 + 4), (uint64_t)&v11);
      re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v16);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v13 + 8);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v11);
      ++v10;
    }
    while (v10 <= a3);
    unint64_t v10 = a1[6];
  }
  if (v10 <= a3)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    uint64_t v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    unint64_t v23 = a3;
    __int16 v24 = 2048;
    unint64_t v25 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::ecs2::CustomDeformerComponent::CustomDeformerData::addMappedDeformationDataToArray(a2, a4, a5, a1[8] + 120 * a3 + 40);
}

void re::ecs2::CustomDeformerComponent::setForceContinuousDeformations(void *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a2;
  uint64_t v58 = *MEMORY[0x263EF8340];
  unint64_t v9 = (void *)a1[6];
  if ((unint64_t)v9 <= a2)
  {
    do
    {
      uint64_t v49 = 0;
      memset(v48, 0, sizeof(v48));
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v43 = 0u;
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::add((_anonymous_namespace_ *)(a1 + 4), (uint64_t)&v43);
      re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v48);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v45 + 8);
      re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit((uint64_t)&v43);
      unint64_t v9 = (void *)((char *)v9 + 1);
    }
    while ((unint64_t)v9 <= v7);
    unint64_t v9 = (void *)a1[6];
  }
  if ((unint64_t)v9 <= v7) {
    goto LABEL_32;
  }
  uint64_t v42 = a1[8];
  uint64_t v10 = v42 + 120 * v7;
  uint64_t v13 = *(void *)(v10 + 96);
  long long v12 = (unint64_t *)(v10 + 96);
  uint64_t v11 = v13;
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = 0;
  unint64_t v4 = 0;
  unint64_t v9 = (void *)(v42 + 120 * v7 + 112);
  while (1)
  {
    long long v15 = (void *)*v12;
    if (*v12 <= v4)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v43 = 0u;
      unint64_t v7 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v50 = 136315906;
      unsigned int v51 = "operator[]";
      __int16 v52 = 1024;
      int v53 = 789;
      __int16 v54 = 2048;
      unint64_t v55 = v4;
      __int16 v56 = 2048;
      unint64_t v57 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v43 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v50 = 136315906;
      unsigned int v51 = "operator[]";
      __int16 v52 = 1024;
      int v53 = 789;
      __int16 v54 = 2048;
      unint64_t v55 = v7;
      __int16 v56 = 2048;
      unint64_t v57 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_33:
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v43 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v50 = 136315906;
      unsigned int v51 = "removeStableAt";
      __int16 v52 = 1024;
      int v53 = 969;
      __int16 v54 = 2048;
      unint64_t v55 = v4;
      __int16 v56 = 2048;
      unint64_t v57 = (void *)a4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (re::MeshIdentifierAsset::operator==((unsigned __int8 *)(*v9 + v14), (unsigned __int8 *)a3)) {
      break;
    }
    ++v4;
    v14 += 48;
    if (v11 == v4) {
      goto LABEL_18;
    }
  }
  int v40 = a4;
  a4 = *v12;
  if (*v12 <= v4) {
    goto LABEL_33;
  }
  uint64_t v16 = *v9;
  if (a4 - 1 > v4 && 48 * a4 - 48 != v14)
  {
    uint64_t v17 = 0;
    uint64_t v41 = 48 * a4 - v14 - 48;
    uint64_t v18 = v16 + v14;
    do
    {
      *(unsigned char *)(v18 + vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = *(unsigned char *)(v18 + v17 + 48);
      uint64_t v19 = v16 + v17 + v14;
      uint64_t v20 = *(void *)(v19 + 56);
      uint64_t v21 = *(void *)(v19 + 64);
      uint64_t v22 = v16;
      uint64_t v23 = *(void *)(v19 + 16);
      unint64_t v24 = v20 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v19 + 8) & 1;
      *(void *)(v19 + 56) = 0;
      *(void *)(v19 + 64) = "";
      *(void *)(v19 + 16) = v21;
      *(void *)&long long v43 = v24;
      *((void *)&v43 + 1) = v23;
      *(void *)(v19 + 8) = v20;
      re::StringID::destroyString((re::StringID *)&v43);
      uint64_t v25 = *(void *)(v19 + 72);
      uint64_t v26 = *(void *)(v19 + 80);
      *(void *)(v19 + 72) = 0;
      *(void *)(v19 + 8objc_initWeak(location, 0) = "";
      uint64_t v27 = *(void *)(v19 + 32);
      unint64_t v28 = v25 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v19 + 24) & 1;
      *(void *)(v19 + 32) = v26;
      *(void *)&long long v43 = v28;
      *((void *)&v43 + 1) = v27;
      *(void *)(v19 + 24) = v25;
      re::StringID::destroyString((re::StringID *)&v43);
      uint64_t v16 = v22;
      *(unsigned char *)(v19 + 4objc_initWeak(location, 0) = *(unsigned char *)(v19 + 88);
      v17 += 48;
    }
    while (v41 != v17);
    a4 = *v12;
    uint64_t v16 = *v9;
  }
  uint64_t v29 = v16 + 48 * a4;
  re::StringID::destroyString((re::StringID *)(v29 - 24));
  re::StringID::destroyString((re::StringID *)(v29 - 40));
  --*v12;
  ++*(_DWORD *)(v42 + 120 * v7 + 104);
  LOBYTE(a4) = v40;
  if (v40)
  {
LABEL_18:
    LOBYTE(v43) = *(unsigned char *)a3;
    re::StringID::StringID((re::StringID *)((char *)&v43 + 8), (const StringID *)(a3 + 8));
    uint64_t v30 = re::StringID::StringID((re::StringID *)((char *)&v44 + 8), (const StringID *)(a3 + 24));
    BYTE8(v45) = a4;
    unint64_t v31 = *v12;
    unint64_t v32 = *(void *)(v42 + 120 * v7 + 88);
    if (*v12 >= v32)
    {
      unint64_t v33 = v31 + 1;
      if (v32 < v31 + 1)
      {
        if (*(v12 - 2))
        {
          unint64_t v34 = 2 * v32;
          if (!v32) {
            unint64_t v34 = 8;
          }
          if (v34 <= v33) {
            unint64_t v35 = v33;
          }
          else {
            unint64_t v35 = v34;
          }
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::ForcedContinuousDeformations>::setCapacity(v12 - 2, v35);
        }
        else
        {
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::ForcedContinuousDeformations>::setCapacity(v12 - 2, v33);
          ++*(_DWORD *)(v42 + 120 * v7 + 104);
        }
      }
      unint64_t v31 = *v12;
    }
    uint64_t v36 = v42 + 120 * v7;
    uint64_t v37 = *(void *)(v36 + 112) + 48 * v31;
    *(unsigned char *)uint64_t v37 = v43;
    char v38 = BYTE8(v43);
    *(void *)(v37 + 8) = *(void *)(v37 + 8) & 0xFFFFFFFFFFFFFFFELL | BYTE8(v43) & 1;
    *(void *)(v37 + 8) = *((void *)&v43 + 1) & 0xFFFFFFFFFFFFFFFELL | v38 & 1;
    *(void *)(v37 + 16) = v44;
    *((void *)&v43 + 1) = 0;
    *(void *)&long long v44 = "";
    char v39 = BYTE8(v44);
    *(void *)(v37 + 24) = *(void *)(v37 + 24) & 0xFFFFFFFFFFFFFFFELL | BYTE8(v44) & 1;
    *(void *)(v37 + 24) = *((void *)&v44 + 1) & 0xFFFFFFFFFFFFFFFELL | v39 & 1;
    *(void *)(v37 + 32) = v45;
    *((void *)&v44 + 1) = 0;
    *(void *)&long long v45 = "";
    *(unsigned char *)(v37 + 4objc_initWeak(location, 0) = BYTE8(v45);
    ++*v12;
    ++*(_DWORD *)(v36 + 104);
    re::StringID::destroyString((re::StringID *)((char *)&v44 + 8));
    re::StringID::destroyString((re::StringID *)((char *)&v43 + 8));
  }
}

BOOL re::MeshIdentifierAsset::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || !re::StringID::operator==((void *)a1 + 1, (void *)a2 + 1)) {
    return 0;
  }
  return re::StringID::operator==((void *)a1 + 3, (void *)a2 + 3);
}

void re::ecs2::CustomDeformerComponent::CustomDeformerData::addMappedDeformationDataToArray(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v48[7] = *(id *)MEMORY[0x263EF8340];
  if (*(void *)(a4 + 16))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = (96 * v9) | 0x18;
      while (re::MeshIdentifierAsset::operator==((unsigned __int8 *)(*(void *)(a4 + 32) + v10 - 24), (unsigned __int8 *)a2))
      {
        ++v9;
        unint64_t v11 = *(void *)(a4 + 16);
        v10 += 96;
        if (v9 >= v11) {
          goto LABEL_10;
        }
      }
      if (v8 != v9)
      {
        uint64_t v12 = *(void *)(a4 + 32);
        uint64_t v13 = (void *)(v12 + v10);
        uint64_t v14 = v12 + 96 * v8;
        *(unsigned char *)uint64_t v14 = *((unsigned char *)v13 - 24);
        uint64_t v15 = *(v13 - 2);
        uint64_t v16 = *(v13 - 1);
        *(v13 - 2) = 0;
        *(v13 - 1) = "";
        uint64_t v17 = *(void *)(v14 + 16);
        unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v14 + 8) & 1;
        *(void *)(v14 + 16) = v16;
        unint64_t v43 = v18;
        uint64_t v44 = v17;
        *(void *)(v14 + 8) = v15;
        re::StringID::destroyString((re::StringID *)&v43);
        uint64_t v19 = *v13;
        uint64_t v20 = v13[1];
        void *v13 = 0;
        v13[1] = "";
        uint64_t v21 = *(void *)(v14 + 32);
        unint64_t v22 = v19 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v14 + 24) & 1;
        *(void *)(v14 + 32) = v20;
        unint64_t v43 = v22;
        uint64_t v44 = v21;
        *(void *)(v14 + 24) = v19;
        re::StringID::destroyString((re::StringID *)&v43);
        re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::operator=((id *)(v14 + 40), (uint64_t)(v13 + 2));
      }
      ++v9;
      ++v8;
      unint64_t v11 = *(void *)(a4 + 16);
    }
    while (v9 < v11);
LABEL_10:
    if (v8 != v11)
    {
      uint64_t v23 = 96 * v11 - 96 * v8;
      unint64_t v24 = (id *)(*(void *)(a4 + 32) + 96 * v8 + 40);
      do
      {
        re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::~FramePersistentPtr(v24);
        re::StringID::destroyString((re::StringID *)(v24 - 2));
        re::StringID::destroyString((re::StringID *)(v24 - 4));
        v24 += 12;
        v23 -= 96;
      }
      while (v23);
      *(void *)(a4 + 16) = v8;
      ++*(_DWORD *)(a4 + 24);
    }
  }
  LOBYTE(v43) = *(unsigned char *)a2;
  re::StringID::StringID((re::StringID *)&v44, (const StringID *)(a2 + 8));
  uint64_t v25 = re::StringID::StringID((re::StringID *)&v46, (const StringID *)(a2 + 24));
  uint64_t v26 = *(void *)(a1 + 136);
  uint64_t v27 = re::globalAllocators(v25);
  unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27[2] + 32))(v27[2], 40, 8);
  uint64_t v29 = *a3;
  *a3 = 0;
  *unint64_t v28 = v29;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:nn180100]((uint64_t)(v28 + 1), (uint64_t)(a3 + 1));
  if (v26) {
    uint64_t v30 = (void *)(v26 + 8);
  }
  else {
    uint64_t v30 = 0;
  }
  inited = (re *)objc_initWeak(v48, v30);
  v48[1] = v28;
  unint64_t v32 = (id *)re::globalAllocators(inited);
  v48[5] = v32[2];
  v48[6] = 0;
  unint64_t v33 = *(void *)(a4 + 8);
  unint64_t v34 = *(void *)(a4 + 16);
  if (v34 >= v33)
  {
    unint64_t v35 = v34 + 1;
    if (v33 < v34 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v36 = 2 * v33;
        BOOL v37 = v33 == 0;
        unint64_t v38 = 8;
        if (!v37) {
          unint64_t v38 = v36;
        }
        if (v38 <= v35) {
          unint64_t v39 = v35;
        }
        else {
          unint64_t v39 = v38;
        }
        re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::setCapacity((void *)a4, v39);
      }
      else
      {
        re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::setCapacity((void *)a4, v35);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v34 = *(void *)(a4 + 16);
  }
  uint64_t v40 = *(void *)(a4 + 32) + 96 * v34;
  *(unsigned char *)uint64_t v40 = v43;
  char v41 = v44;
  *(void *)(v40 + 8) = *(void *)(v40 + 8) & 0xFFFFFFFFFFFFFFFELL | v44 & 1;
  *(void *)(v40 + 8) = v44 & 0xFFFFFFFFFFFFFFFELL | v41 & 1;
  *(void *)(v40 + 16) = v45;
  uint64_t v44 = 0;
  long long v45 = "";
  char v42 = v46;
  *(void *)(v40 + 24) = *(void *)(v40 + 24) & 0xFFFFFFFFFFFFFFFELL | v46 & 1;
  *(void *)(v40 + 24) = v46 & 0xFFFFFFFFFFFFFFFELL | v42 & 1;
  *(void *)(v40 + 32) = v47;
  uint64_t v46 = 0;
  long long v47 = "";
  re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::FramePersistentPtr(v40 + 40, (uint64_t)v48);
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::~FramePersistentPtr(v48);
  re::StringID::destroyString((re::StringID *)&v46);
  re::StringID::destroyString((re::StringID *)&v44);
}

void *re::ecs2::CustomDeformerSystemComponentStateImpl::CustomDeformerSystemComponentStateImpl(void *a1, uint64_t a2)
{
  v5[3] = *MEMORY[0x263EF8340];
  *a1 = &unk_26E700BA8;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(a1 + 2), (uint64_t)v4);
  return a1;
}

BOOL re::ecs2::CustomDeformerSystemComponentStateImpl::processDirtyComponents(re::DeformerFeatureFlags *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int isCustomDeformerLoggingEnabled = re::DeformerFeatureFlags::isCustomDeformerLoggingEnabled(a1);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v54, a5, 0);
  unint64_t v9 = v54;
  unint64_t v10 = v55;
  unint64_t v54 = a4;
  unint64_t v55 = v9;
  unint64_t v56 = v10;
  uint64_t v11 = (unsigned __int16)v10;
  uint64_t v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      uint64_t v15 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v55);
      uint64_t v16 = *(void *)v15;
      uint64_t v17 = *(void **)(*(void *)v15 + 16);
      uint64_t v18 = v17[22];
      uint64_t v19 = v17[23];
      if (v18) {
        BOOL v20 = v19 == 0;
      }
      else {
        BOOL v20 = 1;
      }
      if (v20)
      {
        uint64_t v21 = (unint64_t *)(a3 + 32);
        if (!isCustomDeformerLoggingEnabled) {
          goto LABEL_36;
        }
        uint64_t v22 = *(void *)(*(void *)v15 + 16);
        do
        {
          uint64_t v23 = v22;
          uint64_t v22 = *(void *)(v22 + 24);
        }
        while (v22);
        uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v23 + 16) + 56) + 32))(*(void *)(*(void *)(v23 + 16) + 56));
        uint64_t v25 = (re *)re::ServiceLocator::service<re::FrameManager>(v24);
        uint64_t v26 = *re::ecsComponentsLogObjects(v25);
        uint64_t v21 = (unint64_t *)(a3 + 32);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
          goto LABEL_36;
        }
        uint64_t v27 = *((void *)v25 + 3) & 0xFFFFFFFFFFFFFFFLL;
        uint64_t v28 = v17[35];
        *(_DWORD *)long long buf = 134218242;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v28;
        uint64_t v29 = v26;
        uint64_t v30 = "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, missing mesh or mesh deformation for entity - %s";
      }
      else if (*(void *)(v19 + 240) {
             && (uint64_t v31 = *(void *)(v19 + 392),
      }
                 *(void *)long long buf = v19 + 232,
                 *(void *)&buf[8] = 12,
                 !re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)buf))
             && v31
             && *(void *)(v18 + 40))
      {
        uint64_t v21 = (unint64_t *)(a3 + 40);
        if (*(void *)(v16 + 48)) {
          goto LABEL_36;
        }
        uint64_t v32 = *(void *)(v19 + 392);
        uint64_t v33 = *(void *)(v32 + 88);
        if (v33)
        {
          uint64_t v34 = *(void *)(v32 + 96);
          uint64_t v35 = 168 * v33;
          uint64_t v36 = (void *)(v34 + 120);
          do
          {
            ++*((unsigned char *)v36 - 108);
            *uint64_t v36 = 0;
            v36 += 21;
            v35 -= 168;
          }
          while (v35);
        }
        BOOL v37 = v17;
        uint64_t v21 = (unint64_t *)(a3 + 32);
        if (!isCustomDeformerLoggingEnabled) {
          goto LABEL_36;
        }
        do
        {
          unint64_t v38 = v37;
          BOOL v37 = (void *)v37[3];
        }
        while (v37);
        uint64_t v39 = (*(uint64_t (**)(void))(**(void **)(v38[2] + 56) + 32))(*(void *)(v38[2] + 56));
        uint64_t v40 = (re *)re::ServiceLocator::service<re::FrameManager>(v39);
        char v41 = *re::ecsComponentsLogObjects(v40);
        uint64_t v21 = (unint64_t *)(a3 + 32);
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_INFO)) {
          goto LABEL_36;
        }
        uint64_t v42 = *((void *)v40 + 3) & 0xFFFFFFFFFFFFFFFLL;
        uint64_t v43 = v17[35];
        *(_DWORD *)long long buf = 134218242;
        *(void *)&uint8_t buf[4] = v42;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v43;
        uint64_t v29 = v41;
        uint64_t v30 = "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, not custom deformation data set for entity - %s";
      }
      else
      {
        uint64_t v21 = (unint64_t *)(a3 + 32);
        if (!isCustomDeformerLoggingEnabled) {
          goto LABEL_36;
        }
        uint64_t v44 = v17;
        do
        {
          long long v45 = v44;
          uint64_t v44 = (void *)v44[3];
        }
        while (v44);
        uint64_t v46 = (*(uint64_t (**)(void))(**(void **)(v45[2] + 56) + 32))(*(void *)(v45[2] + 56));
        long long v47 = (re *)re::ServiceLocator::service<re::FrameManager>(v46);
        float v48 = *re::ecsComponentsLogObjects(v47);
        uint64_t v21 = (unint64_t *)(a3 + 32);
        if (!os_log_type_enabled(v48, OS_LOG_TYPE_INFO)) {
          goto LABEL_36;
        }
        uint64_t v49 = *((void *)v47 + 3) & 0xFFFFFFFFFFFFFFFLL;
        uint64_t v50 = v17[35];
        *(_DWORD *)long long buf = 134218242;
        *(void *)&uint8_t buf[4] = v49;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v50;
        uint64_t v29 = v48;
        uint64_t v30 = "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, custom deformer not assigned for entity - %s";
      }
      _os_log_impl(&dword_233120000, v29, OS_LOG_TYPE_INFO, v30, buf, 0x16u);
      uint64_t v21 = (unint64_t *)(a3 + 32);
LABEL_36:
      unint64_t v51 = v54;
      unint64_t v52 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v55);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v51, v52, *v21);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v55);
    }
    while (v55 != a5 || (unsigned __int16)v56 != 0xFFFF || WORD1(v56) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ServiceLocator::service<re::FrameManager>(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::FrameManager>(a1);
  if (!result)
  {
    uint64_t v2 = (re::internal *)re::introspect<re::FrameManager>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t v3 = (re::internal *)re::introspect<re::FrameManager>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if (v7[8]) {
      unint64_t v5 = *(unsigned char **)&v8[7];
    }
    else {
      unint64_t v5 = v8;
    }
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    unint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::CustomDeformerSystemComponentStateImpl::processPreparingComponents(re::DeformerFeatureFlags *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  LODWORD(v8) = re::DeformerFeatureFlags::isCustomDeformerLoggingEnabled(a1);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  unint64_t v98 = a4;
  uint64_t v99 = *(void *)buf;
  uint64_t v100 = *(void *)&buf[8];
  if (*(void *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    uint64_t v86 = a3;
    unint64_t v87 = a5;
    unsigned int v85 = v8;
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v99);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void **)(*(void *)v11 + 16);
      uint64_t v14 = v13[22];
      uint64_t v15 = (re::AssetHandle *)(v14 + 32);
      uint64_t v16 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v14 + 32));
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v18) {
          uint64_t v19 = (re::MeshNameMap *)(v18 + 216);
        }
        else {
          uint64_t v19 = (re::MeshNameMap *)(v17 + 448);
        }
        uint64_t v20 = v13[23];
        unint64_t v8 = *(void *)(v20 + 256);
        uint64_t v21 = *(void *)(*(void *)(*((void *)a1 + 1) + 112) + 136);
        if (v21) {
          uint64_t v22 = (void *)(v21 + 8);
        }
        else {
          uint64_t v22 = 0;
        }
        inited = (re *)objc_initWeak(&location, v22);
        uint64_t v24 = re::globalAllocators(inited);
        uint64_t v25 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 24, 8);
        *((void *)v25 + 1) = v8;
        *((void *)v25 + 2) = 0;
        if (v8)
        {
          if (v8 >= 0x666666666666667) {
            goto LABEL_84;
          }
          *((void *)v25 + 2) = v26;
          if (!v26)
          {
LABEL_85:
            re::internal::assertLog((re::internal *)4, v28, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
          }
          unint64_t v29 = v8 - 1;
          if (v8 != 1)
          {
            do
            {
              *(void *)(v26 + 32) = 0;
              *(void *)(v26 + 8) = 0;
              *(void *)(v26 + 16) = 0;
              *(void *)uint64_t v26 = 0;
              *(_DWORD *)(v26 + 24) = 0;
              v26 += 40;
              --v29;
            }
            while (v29);
          }
          *(void *)(v26 + 32) = 0;
          *(void *)(v26 + 8) = 0;
          *(void *)(v26 + 16) = 0;
          *(void *)uint64_t v26 = 0;
          *(_DWORD *)(v26 + 24) = 0;
        }
        uint64_t v94 = v17;
        uint64_t v88 = v20;
        uint64_t v30 = (re::MeshDeformationRuntimeData *)(v20 + 232);
        *(void *)&long long v113 = 0;
        memset(buf, 0, sizeof(buf));
        *(void *)&buf[24] = re::globalAllocators((re *)v26)[2];
        *(void *)&long long v113 = 0;
        re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::reset((id *)(v12 + 72), &location, v25, (uint64_t)buf);
        re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)buf);
        objc_destroyWeak(&location);
        id location = 0;
        unint64_t i = &v102[24];
        uint64_t v90 = *(void *)(v12 + 48);
        if (v90)
        {
          a5 = 0;
          do
          {
            uint64_t v32 = *(unsigned char **)(v12 + 48);
            if ((unint64_t)v32 <= a5) {
              goto LABEL_83;
            }
            uint64_t v91 = *(void *)(v12 + 64);
            uint64_t v33 = v91 + 120 * a5;
            uint64_t v34 = *(void *)(v33 + 16);
            unint64_t v95 = a5 + 1;
            if (v34)
            {
              uint64_t v35 = *(void *)(v33 + 32);
              uint64_t v92 = v35 + 96 * v34;
              do
              {
                re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v19, (unsigned __int8 *)v35, buf);
                *(void *)uint64_t v102 = v94;
                *(void *)&v102[8] = v19;
                *(void *)&v102[16] = *(void *)buf;
                uint64_t v105 = v113;
                uint64_t v106 = 0;
                re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)&v102[24], (uint64_t)&buf[8]);
                re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&buf[8]);
                uint64_t v36 = *(_OWORD **)&v102[16];
                if (*(void *)&v102[16])
                {
                  for (unint64_t i = 0; v36 != (_OWORD *)i; ++i)
                  {
                    *(void *)long long buf = i;
                    unsigned int v37 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v106 + 16))(v106, buf);
                    int started = re::MeshNameMap::meshPartStartIndexForInstance(v19, v37);
                    *(void *)long long buf = i;
                    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v106 + 16))(v106, buf);
                    unsigned int v40 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(v30, started + WORD2(v39));
                    if (v8 > v40)
                    {
                      unint64_t v41 = v40;
                      uint64_t v42 = *(void *)(v12 + 80);
                      unint64_t v43 = *(void *)(v42 + 8);
                      if (v43 <= v40)
                      {
                        v96[0] = 0;
                        long long v114 = 0u;
                        long long v115 = 0u;
                        long long v113 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)float32x4_t v107 = 136315906;
                        *(void *)&v107[4] = "operator[]";
                        *(_WORD *)&v107[12] = 1024;
                        *(_DWORD *)&v107[14] = 468;
                        __int16 v108 = 2048;
                        unint64_t v109 = v41;
                        __int16 v110 = 2048;
                        unint64_t v111 = v43;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_78:
                        v96[0] = 0;
                        unint64_t v53 = (unint64_t)v107;
                        long long v114 = 0u;
                        long long v115 = 0u;
                        long long v113 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)float32x4_t v107 = 136315906;
                        *(void *)&v107[4] = "operator[]";
                        *(_WORD *)&v107[12] = 1024;
                        *(_DWORD *)&v107[14] = 789;
                        __int16 v108 = 2048;
                        unint64_t v109 = a5;
                        __int16 v110 = 2048;
                        unint64_t v111 = v43;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_79:
                        v96[0] = 0;
                        long long v114 = 0u;
                        long long v115 = 0u;
                        long long v113 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)float32x4_t v107 = 136315906;
                        *(void *)&v107[4] = "operator[]";
                        *(_WORD *)&v107[12] = 1024;
                        *(_DWORD *)&v107[14] = 468;
                        __int16 v108 = 2048;
                        unint64_t v109 = v53;
                        __int16 v110 = 2048;
                        unint64_t v111 = v43;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_80:
                        v96[0] = 0;
                        uint64_t v32 = v107;
                        long long v114 = 0u;
                        long long v115 = 0u;
                        long long v113 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)float32x4_t v107 = 136315906;
                        *(void *)&v107[4] = "operator[]";
                        *(_WORD *)&v107[12] = 1024;
                        *(_DWORD *)&v107[14] = 789;
                        __int16 v108 = 2048;
                        unint64_t v109 = a5;
                        __int16 v110 = 2048;
                        unint64_t v111 = v43;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_81:
                        re::internal::assertLog((re::internal *)6, v60, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v30, v32);
                        _os_crash();
                        __break(1u);
LABEL_82:
                        uint64_t v101 = 0;
                        v36[6] = 0u;
                        v36[7] = 0u;
                        v36[4] = 0u;
                        v36[5] = 0u;
                        v36[3] = 0u;
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)uint64_t v102 = 136315906;
                        *(void *)&v102[4] = "operator[]";
                        *(_WORD *)&v102[12] = 1024;
                        *(_DWORD *)&v102[14] = 468;
                        *(_WORD *)&v102[18] = 2048;
                        *(void *)&v102[20] = v30;
                        __int16 v103 = 2048;
                        int v104 = i;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_83:
                        *(void *)float32x4_t v107 = 0;
                        long long v114 = 0u;
                        long long v115 = 0u;
                        long long v113 = 0u;
                        memset(buf, 0, sizeof(buf));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)uint64_t v102 = 136315906;
                        *(void *)&v102[4] = "operator[]";
                        *(_WORD *)&v102[12] = 1024;
                        *(_DWORD *)&v102[14] = 789;
                        *(_WORD *)&v102[18] = 2048;
                        *(void *)&v102[20] = a5;
                        __int16 v103 = 2048;
                        int v104 = v32;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_84:
                        re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v8);
                        _os_crash();
                        __break(1u);
                        goto LABEL_85;
                      }
                      uint64_t v44 = *(void *)(v42 + 16) + 40 * v40;
                      unint64_t v43 = *(void *)(v44 + 16);
                      if (a5 >= v43)
                      {
                        re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(v44, v95);
                        unint64_t v43 = *(void *)(v44 + 16);
                      }
                      if (v43 <= a5) {
                        goto LABEL_78;
                      }
                      long long v45 = *(void **)(v35 + 48);
                      if (v45) {
                        *(void *)(*(void *)(v44 + 32) + 16 * a5) = *v45;
                      }
                    }
                  }
                }
                unint64_t i = &v102[24];
                re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v102[24]);
                v35 += 96;
              }
              while (v35 != v92);
            }
            uint64_t v46 = v91 + 120 * a5;
            uint64_t v47 = *(void *)(v46 + 56);
            if (v47)
            {
              uint64_t v48 = *(void *)(v46 + 72);
              uint64_t v93 = v48 + 96 * v47;
              do
              {
                re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v19, (unsigned __int8 *)v48, buf);
                *(void *)uint64_t v102 = v94;
                *(void *)&v102[8] = v19;
                *(void *)&v102[16] = *(void *)buf;
                uint64_t v105 = v113;
                uint64_t v106 = 0;
                re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)&v102[24], (uint64_t)&buf[8]);
                re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&buf[8]);
                uint64_t v36 = *(_OWORD **)&v102[16];
                if (*(void *)&v102[16])
                {
                  for (unint64_t i = 0; v36 != (_OWORD *)i; ++i)
                  {
                    *(void *)long long buf = i;
                    unsigned int v49 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v106 + 16))(v106, buf);
                    int v50 = re::MeshNameMap::meshPartStartIndexForInstance(v19, v49);
                    *(void *)long long buf = i;
                    uint64_t v51 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v106 + 16))(v106, buf);
                    unsigned int v52 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(v30, v50 + WORD2(v51));
                    if (v8 > v52)
                    {
                      unint64_t v53 = v52;
                      uint64_t v54 = *(void *)(v12 + 80);
                      unint64_t v43 = *(void *)(v54 + 8);
                      if (v43 <= v52) {
                        goto LABEL_79;
                      }
                      uint64_t v55 = *(void *)(v54 + 16) + 40 * v52;
                      unint64_t v43 = *(void *)(v55 + 16);
                      if (a5 >= v43)
                      {
                        re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(v55, v95);
                        unint64_t v43 = *(void *)(v55 + 16);
                      }
                      if (v43 <= a5) {
                        goto LABEL_80;
                      }
                      unint64_t v56 = *(void **)(v48 + 48);
                      if (v56) {
                        *(void *)(*(void *)(v55 + 32) + 16 * a5 + 8) = *v56;
                      }
                    }
                  }
                }
                unint64_t i = &v102[24];
                re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v102[24]);
                v48 += 96;
              }
              while (v48 != v93);
            }
            ++a5;
          }
          while (v95 != v90);
        }
        a5 = v87;
        uint64_t v57 = *(void *)(v88 + 392);
        uint64_t v32 = *(unsigned char **)(v57 + 88);
        uint64_t v58 = *(void *)(v57 + 96);
        v96[0] = v30;
        v96[1] = 12;
        *(void *)float32x4_t v107 = v30;
        *(void *)&v107[8] = 12;
        *(_WORD *)&v107[16] = 0;
        uint64_t v36 = v107;
        a3 = v86;
        unint64_t v8 = v85;
        while (1)
        {
          re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v96, (uint64_t)buf);
          if (*(_DWORD *)&v107[12] == *(_DWORD *)&buf[12]
            && *(unsigned __int16 *)&v107[16] == *(unsigned __int16 *)&buf[16])
          {
            break;
          }
          unsigned int v59 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)v107);
          uint64_t v30 = (re::MeshDeformationRuntimeData *)v59;
          if ((unint64_t)v32 <= v59) {
            goto LABEL_81;
          }
          uint64_t v61 = *(void *)(v12 + 80);
          unint64_t i = *(unsigned char **)(v61 + 8);
          if ((unint64_t)i <= v59) {
            goto LABEL_82;
          }
          uint64_t v62 = *(void *)(v61 + 16) + 40 * v59;
          uint64_t v63 = v58 + 168 * v59;
          ++*(unsigned char *)(v63 + 12);
          *(void *)(v63 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v62;
          re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)v107);
        }
        unint64_t v82 = v98;
        unint64_t v83 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v99);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v86 + 16), v82, v83, *(void *)(v86 + 48));
      }
      else
      {
        uint64_t v64 = *(void *)(v14 + 40);
        if (v64 && (unsigned int v65 = atomic_load((unsigned int *)(v64 + 704)), v65 == 3))
        {
          if (v8)
          {
            uint64_t v66 = v13;
            do
            {
              uint64_t v67 = v66;
              uint64_t v66 = (void *)v66[3];
            }
            while (v66);
            uint64_t v68 = (*(uint64_t (**)(void))(**(void **)(v67[2] + 56) + 32))(*(void *)(v67[2] + 56));
            unint64_t v69 = (re *)re::ServiceLocator::service<re::FrameManager>(v68);
            uint64_t v70 = *re::ecsComponentsLogObjects(v69);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
            {
              uint64_t v71 = *((void *)v69 + 3) & 0xFFFFFFFFFFFFFFFLL;
              uint64_t v72 = v13[35];
              *(_DWORD *)long long buf = 134218242;
              *(void *)&uint8_t buf[4] = v71;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v72;
              _os_log_impl(&dword_233120000, v70, OS_LOG_TYPE_INFO, "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, mesh failed to load for entity - %s", buf, 0x16u);
            }
          }
          unint64_t v73 = v98;
          unint64_t v74 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v99);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v73, v74, *(void *)(a3 + 32));
        }
        else
        {
          if (v8)
          {
            unint64_t v75 = v13;
            do
            {
              uint64_t v76 = v75;
              unint64_t v75 = (void *)v75[3];
            }
            while (v75);
            uint64_t v77 = (*(uint64_t (**)(void))(**(void **)(v76[2] + 56) + 32))(*(void *)(v76[2] + 56));
            unint64_t v78 = (re *)re::ServiceLocator::service<re::FrameManager>(v77);
            uint64_t v79 = *re::ecsComponentsLogObjects(v78);
            if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
            {
              uint64_t v80 = *((void *)v78 + 3) & 0xFFFFFFFFFFFFFFFLL;
              uint64_t v81 = v13[35];
              *(_DWORD *)long long buf = 134218242;
              *(void *)&uint8_t buf[4] = v80;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v81;
              _os_log_impl(&dword_233120000, v79, OS_LOG_TYPE_INFO, "[DeformerLogging] Frame[%llu]: Custom Deformer skipping, mesh still loading for entity - %s", buf, 0x16u);
            }
          }
          re::AssetHandle::loadAsync(v15);
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v99);
    }
    while (v99 != a5 || (unsigned __int16)v100 != 0xFFFF || WORD1(v100) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::CustomDeformerSystemComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  v95[5] = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v91, a5, 0);
  unint64_t v86 = a4;
  long long v87 = v91[0];
  uint64_t v73 = a5;
  if (*(void *)&v91[0] != a5 || WORD4(v91[0]) != 0xFFFFLL || (DWORD2(v91[0]) & 0xFFFF0000) != 4294901760)
  {
    while (1)
    {
      uint64_t v9 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v87);
      uint64_t v10 = *(void *)v9;
      uint64_t v11 = *(void *)(*(void *)v9 + 16);
      uint64_t v12 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(*(void *)(v11 + 176) + 32));
      if (v12) {
        break;
      }
LABEL_90:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v87);
      if ((void)v87 == v73 && WORD4(v87) == 0xFFFF && WORD5(v87) == 0xFFFF) {
        return *(_DWORD *)(v73 + 40) != 0;
      }
    }
    uint64_t v13 = v12;
    uint64_t v74 = v11;
    uint64_t v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v14) {
      uint64_t v15 = (re::MeshNameMap *)(v14 + 216);
    }
    else {
      uint64_t v15 = (re::MeshNameMap *)(v13 + 448);
    }
    uint64_t v80 = 0;
    unint64_t v81 = 0;
    int v82 = 1;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    unint64_t v16 = *((void *)v15 + 42);
    if (v16) {
      unint64_t v16 = *(unsigned int *)(*((void *)v15 + 43) + 4 * v16 - 4);
    }
    if ((v16 & 0x3F) != 0) {
      unint64_t v17 = (v16 >> 6) + 1;
    }
    else {
      unint64_t v17 = v16 >> 6;
    }
    unint64_t v85 = v16;
    *(void *)&v91[0] = 0;
    re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)&v80, v17, v91);
    uint64_t v76 = *(void *)(v10 + 48);
    if (v76)
    {
      unint64_t v18 = 0;
      uint64_t v75 = v10;
      while (1)
      {
        unint64_t v19 = *(void *)(v10 + 48);
        if (v19 <= v18)
        {
          uint64_t v94 = 0;
          long long v92 = 0u;
          long long v93 = 0u;
          memset(v91, 0, sizeof(v91));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v88 = 136315906;
          *(void *)&v88[4] = "operator[]";
          *(_WORD *)&v88[12] = 1024;
          *(_DWORD *)&v88[14] = 789;
          *(_WORD *)&v88[18] = 2048;
          *(void *)uint64_t v89 = v18;
          *(_WORD *)&v89[8] = 2048;
          *(void *)&v89[10] = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v20 = *(void *)(v10 + 64);
        *(void *)uint64_t v88 = 0;
        *(void *)&v88[8] = 0;
        *(_DWORD *)&v88[16] = 1;
        *(void *)&v89[4] = 0;
        *(void *)&v89[12] = 0;
        unint64_t v21 = *((void *)v15 + 42);
        if (v21) {
          unint64_t v21 = *(unsigned int *)(*((void *)v15 + 43) + 4 * v21 - 4);
        }
        if ((v21 & 0x3F) != 0) {
          unint64_t v22 = (v21 >> 6) + 1;
        }
        else {
          unint64_t v22 = v21 >> 6;
        }
        unint64_t v90 = v21;
        *(void *)&v91[0] = 0;
        re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)v88, v22, v91);
        uint64_t v23 = v20 + 120 * v18;
        uint64_t v24 = *(unsigned __int8 **)(v23 + 112);
        uint64_t v77 = (void *)(v23 + 112);
        uint64_t v26 = (uint64_t *)(v23 + 96);
        uint64_t v25 = *(void *)(v23 + 96);
        unint64_t v78 = v26;
        uint64_t v79 = v20;
        if (v25)
        {
          uint64_t v27 = &v24[48 * v25];
          do
          {
            re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v15, v24, &v94);
            *(void *)&v91[0] = v13;
            *((void *)&v91[0] + 1) = v15;
            *(void *)&v91[1] = v94;
            long long v92 = v95[3];
            re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)&v91[1] + 8, (uint64_t)v95);
            re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)v95);
            uint64_t v28 = *(void *)&v91[1];
            if (*(void *)&v91[1])
            {
              uint64_t v29 = 0;
              do
              {
                uint64_t v94 = v29;
                unsigned int v30 = (*(uint64_t (**)(void, uint64_t *))(**((void **)&v92 + 1) + 16))(*((void *)&v92 + 1), &v94);
                int started = re::MeshNameMap::meshPartStartIndexForInstance(v15, v30);
                uint64_t v94 = v29;
                unint64_t v32 = started
                    + (unsigned __int16)((unint64_t)(*(uint64_t (**)(void, uint64_t *))(**((void **)&v92 + 1) + 16))(*((void *)&v92 + 1), &v94) >> 32);
                if (v24[40]) {
                  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v88, v32);
                }
                else {
                  re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v88, v32);
                }
                ++v29;
              }
              while (v28 != v29);
            }
            re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v91[1] + 8);
            v24 += 48;
          }
          while (v24 != v27);
        }
        unint64_t v33 = *(void *)&v88[8];
        uint64_t v34 = *(uint64_t **)&v89[12];
        if (v88[16]) {
          uint64_t v34 = (uint64_t *)&v89[4];
        }
        if (*(void *)&v88[8] >= 0xBuLL) {
          break;
        }
        if (*(void *)&v88[8])
        {
          uint64_t v36 = 0;
          uint64_t v37 = 8 * *(void *)&v88[8];
          do
          {
            uint64_t v38 = *v34++;
            v36 |= v38;
            v37 -= 8;
          }
          while (v37);
          if (v36) {
            goto LABEL_45;
          }
        }
LABEL_62:
        uint64_t v44 = *v78;
        *unint64_t v78 = 0;
        uint64_t v10 = v75;
        if (v44)
        {
          uint64_t v45 = 48 * v44;
          uint64_t v46 = (re::StringID *)(*v77 + 24);
          do
          {
            re::StringID::destroyString(v46);
            re::StringID::destroyString((re::StringID *)((char *)v46 - 16));
            uint64_t v46 = (re::StringID *)((char *)v46 + 48);
            v45 -= 48;
          }
          while (v45);
        }
        ++*(_DWORD *)(v79 + 120 * v18 + 104);
LABEL_66:
        if (*(void *)v88 && (v88[16] & 1) == 0) {
          (*(void (**)(void))(**(void **)v88 + 40))();
        }
        if (++v18 == v76) {
          goto LABEL_70;
        }
      }
      uint64_t v35 = 8 * *(void *)&v88[8];
      while (!*v34)
      {
        ++v34;
        v35 -= 8;
        if (!v35) {
          goto LABEL_62;
        }
      }
LABEL_45:
      uint64_t v10 = v75;
      if (v90 > v85)
      {
        if ((v90 & 0x3F) != 0) {
          unint64_t v39 = (v90 >> 6) + 1;
        }
        else {
          unint64_t v39 = v90 >> 6;
        }
        unint64_t v85 = v90;
        *(void *)&v91[0] = 0;
        re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)&v80, v39, v91);
        unint64_t v33 = *(void *)&v88[8];
      }
      if (v33 >= v81) {
        unint64_t v33 = v81;
      }
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v88[16]) {
            unint64_t v41 = &v89[4];
          }
          else {
            unint64_t v41 = *(unsigned char **)&v89[12];
          }
          uint64_t v42 = *(void *)&v41[8 * i];
          if (v82) {
            unint64_t v43 = &v83;
          }
          else {
            unint64_t v43 = v84;
          }
          v43[i] |= v42;
        }
      }
      goto LABEL_66;
    }
LABEL_70:
    unint64_t v47 = v81;
    uint64_t v48 = (unint64_t *)v84;
    if (v82) {
      uint64_t v48 = (unint64_t *)&v83;
    }
    if (v81 < 0xB)
    {
      uint64_t v51 = v74;
      if (!v81) {
        goto LABEL_86;
      }
      uint64_t v52 = 0;
      uint64_t v53 = 8 * v81;
      uint64_t v54 = v48;
      do
      {
        uint64_t v55 = *v54++;
        v52 |= v55;
        v53 -= 8;
      }
      while (v53);
      if (!v52)
      {
LABEL_86:
        unint64_t v64 = v86;
        unint64_t v65 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v87);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v64, v65, *(void *)(a3 + 32));
LABEL_87:
        if (v80 && (v82 & 1) == 0) {
          (*(void (**)(void))(*(void *)v80 + 40))();
        }
        goto LABEL_90;
      }
    }
    else
    {
      uint64_t v49 = 8 * v81;
      int v50 = v48;
      uint64_t v51 = v74;
      while (!*v50)
      {
        ++v50;
        v49 -= 8;
        if (!v49) {
          goto LABEL_86;
        }
      }
    }
    if ((v81 & 0x3FFFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v56 = 0;
      uint64_t v57 = *(void *)(v51 + 184);
      uint64_t v58 = (re::MeshDeformationRuntimeData *)(v57 + 232);
      uint64_t v59 = *(void *)(v57 + 392);
      unint64_t v61 = *(void *)(v59 + 88);
      uint64_t v60 = *(void *)(v59 + 96);
      while (1)
      {
        unint64_t v63 = *v48++;
        unint64_t v62 = v63;
        if (v63) {
          break;
        }
        v56 -= 64;
        if (!--v47) {
          goto LABEL_87;
        }
      }
      unint64_t v68 = __clz(__rbit64(v62));
      if (v68 + 1 != v56)
      {
        unint64_t FirstBitSet = v68 - v56;
        do
        {
          unsigned int v70 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(v58, FirstBitSet);
          if (v61 > v70) {
            ++*(unsigned char *)(v60 + 168 * v70 + 12);
          }
          unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v80, FirstBitSet + 1);
        }
        while (FirstBitSet != -1);
      }
    }
    goto LABEL_87;
  }
  return *(_DWORD *)(v73 + 40) != 0;
}

uint64_t re::ecs2::CustomDeformerSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v30[0] = a3;
  v30[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v29);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)a2;
    uint64_t v28 = *(void *)a2 + 8 * v6;
    while (1)
    {
      uint64_t v31 = *v7;
      unint64_t v8 = *(void *)(*(void *)(a1 + 264)
                     + 16
                     * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 256), &v31)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 368, v8);
      uint64_t v9 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 200, v8);
      uint64_t v10 = *(void *)(*v9 + 224);
      unint64_t v11 = v9[3];
      unint64_t v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v11);
      if (*(_DWORD *)(v12 + 40)) {
        int v13 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 24))(v10, v30, v9, v11, v12, 0);
      }
      else {
        int v13 = 0;
      }
      unint64_t v14 = v9[5];
      unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v14);
      if (*(_DWORD *)(v15 + 40)) {
        v13 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 32))(v10, v30, v9, v14, v15, 0);
      }
      unint64_t v16 = v9[6];
      unint64_t v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v16);
      if (*(_DWORD *)(v17 + 40)) {
        break;
      }
      if (v13) {
        goto LABEL_10;
      }
LABEL_11:
      if (*(unsigned char *)(a1 + 432))
      {
        unint64_t v18 = *(void *)(a1 + 376);
        int v19 = *(_DWORD *)(a1 + 384);
        if (v18 < 0xB)
        {
          unint64_t v22 = (uint64_t *)(a1 + 392);
          if ((v19 & 1) == 0) {
            unint64_t v22 = *(uint64_t **)(a1 + 400);
          }
          if (!v18) {
            goto LABEL_29;
          }
          uint64_t v23 = 0;
          uint64_t v24 = 8 * v18;
          do
          {
            uint64_t v25 = *v22++;
            v23 |= v25;
            v24 -= 8;
          }
          while (v24);
          if (!v23) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v20 = (void *)(a1 + 392);
          if ((v19 & 1) == 0) {
            uint64_t v20 = *(void **)(a1 + 400);
          }
          uint64_t v21 = 8 * v18;
          while (!*v20)
          {
            ++v20;
            v21 -= 8;
            if (!v21) {
              goto LABEL_29;
            }
          }
        }
        uint64_t v26 = *(re::ecs2::System **)(a1 + 416);
        if (!*((unsigned char *)v26 + 86)) {
          re::ecs2::System::queueToRun(v26, 0.0);
        }
      }
LABEL_29:
      if (++v7 == (uint64_t *)v28) {
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
      }
    }
    if (((v13 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 40))(v10, v30, v9, v16, v17, 0)) & 1) == 0)goto LABEL_11; {
LABEL_10:
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 368, v8);
    goto LABEL_11;
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
}

void re::ecs2::CustomDeformerSystem::willAddSceneToECSService(re::ecs2::CustomDeformerSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 200;
  v57[0] = (uint64_t)a2;
  unint64_t v5 = (re::ecs2::CustomDeformerSystem *)((char *)this + 320);
  unint64_t v6 = *((void *)this + 41);
  int v7 = *((_DWORD *)this + 84);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)this + 344);
    }
    else {
      unint64_t v8 = (void *)*((void *)this + 44);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 344);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 44);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 320, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::CustomDeformerSystem *)((char *)this + 256), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    unint64_t v15 = (char *)this + 368;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 30);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 26);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 25, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 26);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 216)) {
    int v19 = (char *)this + 224;
  }
  else {
    int v19 = (char *)*((void *)this + 29);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 30);
  ++*((_DWORD *)this + 62);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 30);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 30) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::CustomDeformerSystem *)((char *)this + 256), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 30);
  unint64_t v29 = *((void *)this + 45);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 45) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 45) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 336)) {
      unint64_t v33 = (char *)this + 344;
    }
    else {
      unint64_t v33 = (char *)*((void *)this + 44);
    }
    *(void *)&v33[8 * *((void *)this + 41) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 30);
  unint64_t v35 = *((void *)this + 51);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 51) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::CustomDeformerSystem *)((char *)this + 368), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 51) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 384)) {
      unint64_t v39 = (char *)this + 392;
    }
    else {
      unint64_t v39 = (char *)*((void *)this + 50);
    }
    *(void *)&v39[8 * *((void *)this + 47) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  unint64_t v15 = (char *)this + 368;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 432)) {
    return;
  }
  unint64_t v40 = *((void *)this + 47);
  int v41 = *((_DWORD *)this + 96);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)((char *)this + 392);
    }
    else {
      uint64_t v42 = (void *)*((void *)this + 50);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    uint64_t v48 = (re::ecs2::System *)*((void *)this + 52);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    unint64_t v43 = (uint64_t *)((char *)this + 392);
    if (!v40) {
      return;
    }
  }
  else
  {
    unint64_t v43 = (uint64_t *)*((void *)this + 50);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::CustomDeformerSystem::willRemoveSceneFromECSService(re::ecs2::CustomDeformerSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 256);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 32, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 33) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 320, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 368, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 200, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        unint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_CustomDeformerComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_251, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_251))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89248, "CustomDeformerComponent");
    __cxa_guard_release(&_MergedGlobals_251);
  }
  return &unk_26AF89248;
}

void re::ecs2::initInfo_CustomDeformerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xBE4AC62966A262B4;
  v9[1] = "CustomDeformerComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89238, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF89238);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF89230 = v7;
      __cxa_guard_release(&qword_26AF89238);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF89230;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomDeformerComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::CustomDeformerComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomDeformerComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CustomDeformerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

uint64_t re::internal::defaultConstruct<re::ecs2::CustomDeformerComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::CustomDeformerComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CustomDeformerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CustomDeformerComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CustomDeformerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomDeformerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomDeformerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomDeformerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomDeformerComponent>, this);
}

void *re::ecs2::allocInfo_CustomDeformerSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89240, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89240))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF892C0, "CustomDeformerSystem");
    __cxa_guard_release(&qword_26AF89240);
  }
  return &unk_26AF892C0;
}

void re::ecs2::initInfo_CustomDeformerSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xCEE3922955205E4;
  v5[1] = "CustomDeformerSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_CustomDeformerSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomDeformerSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::CustomDeformerSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::CustomDeformerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::CustomDeformerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomDeformerSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CustomDeformerSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::CustomDeformerSystem *re::internal::defaultConstruct<re::ecs2::CustomDeformerSystem>(int a1, int a2, re::ecs2::CustomDeformerSystem *this)
{
  return re::ecs2::CustomDeformerSystem::CustomDeformerSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::CustomDeformerSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &unk_26E700BA8;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 22);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::CustomDeformerSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &unk_26E700BA8;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 22);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_CustomDeformerSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomDeformerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomDeformerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomDeformerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomDeformerSystem>, this);
}

uint64_t re::ecs2::CustomDeformerSystemComponentStateImpl::dependsOnComponents(re::ecs2::CustomDeformerSystemComponentStateImpl *this)
{
  return *((void *)this + 4);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::CustomDeformerComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

void re::ecs2::CustomDeformerSystem::~CustomDeformerSystem(re::ecs2::CustomDeformerSystem *this)
{
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = &unk_26E700BA8;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25);
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = &unk_26E700BA8;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::CustomDeformerSystem::typeInfo(re::ecs2::CustomDeformerSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomDeformerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomDeformerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomDeformerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomDeformerSystem>, 0);
}

void *re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x78uLL))
        {
          uint64_t v2 = 120 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 120 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 120, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 120 * v9;
        unint64_t v11 = v7 + 7;
        do
        {
          *(v11 - 3) = 0;
          *(v11 - 6) = 0;
          *(v11 - 5) = 0;
          *(v11 - 7) = 0;
          *((_DWORD *)v11 - 8) = 0;
          uint64_t v12 = *(void *)(v8 + 8);
          *(v11 - 7) = *(void *)v8;
          *(v11 - 6) = v12;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v13 = *(v11 - 5);
          *(v11 - 5) = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = v13;
          uint64_t v14 = *(v11 - 3);
          *(v11 - 3) = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 8);
          void v11[2] = 0;
          *(v11 - 1) = 0;
          *unint64_t v11 = 0;
          *(v11 - 2) = 0;
          *((_DWORD *)v11 + 2) = 0;
          uint64_t v15 = *(void *)(v8 + 48);
          *(v11 - 2) = *(void *)(v8 + 40);
          *(void *)(v8 + 4objc_initWeak(location, 0) = 0;
          *(v11 - 1) = v15;
          *(void *)(v8 + 48) = 0;
          uint64_t v16 = *v11;
          *unint64_t v11 = *(void *)(v8 + 56);
          *(void *)(v8 + 56) = v16;
          uint64_t v17 = v11[2];
          void v11[2] = *(void *)(v8 + 72);
          *(void *)(v8 + 72) = v17;
          ++*(_DWORD *)(v8 + 64);
          ++*((_DWORD *)v11 + 2);
          v11[7] = 0;
          v11[4] = 0;
          v11[5] = 0;
          v11[3] = 0;
          *((_DWORD *)v11 + 12) = 0;
          uint64_t v18 = *(void *)(v8 + 88);
          v11[3] = *(void *)(v8 + 80);
          *(void *)(v8 + 8objc_initWeak(location, 0) = 0;
          v11[4] = v18;
          *(void *)(v8 + 88) = 0;
          uint64_t v19 = v11[5];
          v11[5] = *(void *)(v8 + 96);
          *(void *)(v8 + 96) = v19;
          uint64_t v20 = v11[7];
          v11[7] = *(void *)(v8 + 112);
          *(void *)(v8 + 112) = v20;
          ++*(_DWORD *)(v8 + 104);
          ++*((_DWORD *)v11 + 12);
          re::DynamicArray<re::MeshDeformationIndex>::deinit(v8 + 80);
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit(v8 + 40);
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit(v8);
          v11 += 15;
          v8 += 120;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::ForcedContinuousDeformations>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::ForcedContinuousDeformations>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 48 * v9;
        unint64_t v11 = v7;
        do
        {
          *(unsigned char *)unint64_t v11 = *(unsigned char *)v8;
          uint64_t v13 = (re::StringID *)(v8 + 8);
          char v12 = *(void *)(v8 + 8);
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | *(void *)(v8 + 8) & 1;
          v11[1] = *(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          void v11[2] = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = "";
          *(void *)(v8 + 8) = 0;
          uint64_t v15 = *(void *)(v8 + 24);
          uint64_t v14 = v8 + 24;
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[3] = *(void *)v14 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[4] = *(void *)(v14 + 8);
          *(void *)uint64_t v14 = 0;
          *(void *)(v14 + 8) = "";
          *((unsigned char *)v11 + 4objc_initWeak(location, 0) = *(unsigned char *)(v14 + 16);
          re::StringID::destroyString((re::StringID *)v14);
          re::StringID::destroyString(v13);
          uint64_t v8 = v14 + 24;
          v11 += 6;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

id *re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::operator=(id *from, uint64_t a2)
{
  v6[5] = *(id *)MEMORY[0x263EF8340];
  v6[0] = 0;
  objc_moveWeak(v6, from);
  re::ArcWeakPtr<re::VideoHistogram>::operator=(from, (id *)a2);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a2, v6);
  objc_destroyWeak(v6);
  id v4 = from[1];
  from[1] = *(id *)(a2 + 8);
  *(void *)(a2 + 8) = v4;
  a2 += 16;
  v6[3] = from[5];
  v6[4] = 0;
  re::FunctionBase<24ul,void ()(void *)>::operator=<24ul>((uint64_t)v6, (uint64_t)(from + 2));
  re::FunctionBase<24ul,void ()(void *)>::operator=<24ul>((uint64_t)(from + 2), a2);
  re::FunctionBase<24ul,void ()(void *)>::operator=<24ul>(a2, (uint64_t)v6);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v6);
  return from;
}

void *re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          uint64_t v2 = 96 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (id *)(v8 + 96 * v9);
        uint64_t v11 = (uint64_t)(v7 + 5);
        char v12 = (id *)(v8 + 40);
        do
        {
          *(unsigned char *)(v11 - 4objc_initWeak(location, 0) = *((unsigned char *)v12 - 40);
          unsigned __int8 v13 = *(v12 - 4);
          *(void *)(v11 - 32) = *(void *)(v11 - 32) & 0xFFFFFFFFFFFFFFFELL | (unint64_t)*(v12 - 4) & 1;
          *(void *)(v11 - 32) = (unint64_t)*(v12 - 4) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          *(void *)(v11 - 24) = *(v12 - 3);
          *(v12 - 3) = "";
          *(v12 - 4) = 0;
          unsigned __int8 v14 = *(v12 - 2);
          *(void *)(v11 - 16) = *(void *)(v11 - 16) & 0xFFFFFFFFFFFFFFFELL | (unint64_t)*(v12 - 2) & 1;
          *(void *)(v11 - 16) = (unint64_t)*(v12 - 2) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          *(void *)(v11 - 8) = *(v12 - 1);
          *(v12 - 1) = "";
          *(v12 - 2) = 0;
          re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::FramePersistentPtr(v11, (uint64_t)v12);
          re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::~FramePersistentPtr(v12);
          re::StringID::destroyString((re::StringID *)(v12 - 2));
          re::StringID::destroyString((re::StringID *)(v12 - 4));
          v11 += 96;
          uint64_t v15 = v12 + 7;
          v12 += 12;
        }
        while (v15 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

id *re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::FramePersistentPtr(uint64_t a1, uint64_t a2)
{
  inited = (re *)objc_initWeak((id *)a1, 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 4objc_initWeak(location, 0) = re::globalAllocators(inited)[2];
  *(void *)(a1 + 48) = 0;
  return re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::operator=((id *)a1, a2);
}

uint64_t re::ServiceLocator::serviceOrNull<re::FrameManager>(uint64_t a1)
{
  {
    re::introspect<re::FrameManager>(void)::info = re::introspect_FrameManager(0);
  }
  uint64_t v2 = re::introspect<re::FrameManager>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::introspect<re::FrameManager>()
{
  v0 = &qword_268772000;
  {
    v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::FrameManager>(void)::info = re::introspect_FrameManager(0);
      v0 = &qword_268772000;
    }
  }
  return v0[403];
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E700CA0;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    unsigned __int8 v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unsigned __int8 v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E700CF8;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E700D50;
    v22[1] = a1;
    _OWORD v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E700DA8;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidAddEvent>;
    uint64_t v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E700CA0;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        unint64_t v68 = 0;
        unint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *unint64_t v43 = &unk_26E700CF8;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        unint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E700D50;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E700DA8;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unsigned __int8 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unsigned __int8 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unsigned __int8 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unsigned __int8 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  int v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    int v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700CA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700CA0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700CF8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700CF8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700D50;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700D50;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E700DA8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E700DA8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::CustomDeformerComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6E74B0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 4objc_initWeak(location, 0) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  inited = (re *)objc_initWeak((id *)(v2 + 72), 0);
  *(void *)(a1 + 8objc_initWeak(location, 0) = 0;
  *(void *)(a1 + 112) = re::globalAllocators(inited)[2];
  *(void *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::CustomDeformerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::CustomDeformerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_DebugMeshComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_252, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_252))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89358, "DebugMeshComponent");
    __cxa_guard_release(&_MergedGlobals_252);
  }
  return &unk_26AF89358;
}

void re::ecs2::initInfo_DebugMeshComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xE189FFFAC063EC3ALL;
  v13[1] = "DebugMeshComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89340, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF89340);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF89348 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicString>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "shaderDebugMode";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF89350 = v11;
      __cxa_guard_release(&qword_26AF89340);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF89348;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DebugMeshComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::DebugMeshComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DebugMeshComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DebugMeshComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void *re::internal::defaultConstruct<re::ecs2::DebugMeshComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v3 = (void *)((char *)this + 32);
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E6E98C0;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  return re::DynamicString::setCapacity(v3, 0);
}

uint64_t re::internal::defaultDestruct<re::ecs2::DebugMeshComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void *re::internal::defaultConstructV2<re::ecs2::DebugMeshComponent>(_OWORD *a1)
{
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  uint64_t v1 = a1 + 2;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6E98C0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  return re::DynamicString::setCapacity(v1, 0);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DebugMeshComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DebugMeshComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DebugMeshComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DebugMeshComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DebugMeshComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DebugMeshComponent>, this);
}

void *re::ecs2::allocInfo_InputTargetComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF893D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF893D8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89498, "InputTargetComponent");
    __cxa_guard_release(&qword_26AF893D8);
  }
  return &unk_26AF89498;
}

void re::ecs2::initInfo_InputTargetComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v32[0] = 0xE32789C8E68F8AC4;
  v32[1] = "InputTargetComponent";
  re::StringID::destroyString((re::StringID *)v32);
  *((_OWORD *)this + 2) = v33;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF893E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF893E0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF89418 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "allowsDirectInput";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF89420 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "allowsIndirectInput";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1A00000002;
      *(_DWORD *)(v15 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF89428 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_BOOL((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "enabled";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1B00000003;
      *(_DWORD *)(v19 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF89430 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_BOOL((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "isHandAnchored";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1C00000004;
      *(_DWORD *)(v23 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF89438 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::ecs2::introspect_AnchoringOrientation((re::ecs2 *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "handAnchoringChirality";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x1D00000005;
      *(_DWORD *)(v27 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF89440 = v27;
      unint64_t v28 = (re::ecs2 *)re::introspectionAllocator((re *)v27);
      re::ecs2::introspect_InputTargetHitTestingType(v28, v29);
      uint64_t v30 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "hitTestingType";
      *(void *)(v30 + 16) = &qword_26AF89450;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x1E00000006;
      *(_DWORD *)(v30 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF89448 = v30;
      __cxa_guard_release(&qword_26AF893E0);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF89418;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::InputTargetComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::InputTargetComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::InputTargetComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::InputTargetComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v31 = v33;
}

double re::internal::defaultConstruct<re::ecs2::InputTargetComponent>(int a1, int a2, ArcSharedObject *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = &unk_26E700E00;
  *(void *)&double result = 16843008;
  *(_DWORD *)(v3 + 24) = 16843008;
  *(_WORD *)(v3 + 28) = -256;
  *(unsigned char *)(v3 + 3objc_initWeak(location, 0) = 1;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::InputTargetComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::InputTargetComponent>(ArcSharedObject *a1)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = &unk_26E700E00;
  *(void *)&double result = 16843008;
  *(_DWORD *)(v1 + 24) = 16843008;
  *(_WORD *)(v1 + 28) = -256;
  *(unsigned char *)(v1 + 3objc_initWeak(location, 0) = 1;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::InputTargetComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_InputTargetComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"InputTargetComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_InputTargetComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_InputTargetComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::InputTargetComponent>, this);
}

void re::ecs2::introspect_InputTargetHitTestingType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF893E8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF893E8);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Unknown";
      qword_26AF893F8 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      unint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)unint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Strong";
      qword_26AF89400 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Weak";
      qword_26AF89408 = (uint64_t)v30;
      long long v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = 3;
      *(void *)(v32 + 16) = "Hierarchical";
      qword_26AF89410 = v32;
      __cxa_guard_release(&qword_26AF893E8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF893F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF893F0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF89450, "InputTargetHitTestingType", 1, 1, 1, 1);
    qword_26AF89450 = (uint64_t)&unk_26E715E00;
    qword_26AF89490 = (uint64_t)&re::ecs2::introspect_InputTargetHitTestingType(BOOL)::enumTable;
    dword_26AF89460 = 9;
    __cxa_guard_release(&qword_26AF893F0);
  }
  if ((_MergedGlobals_253 & 1) == 0)
  {
    _MergedGlobals_253 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF89450, a2);
    uint64_t v34 = 0xD9B509DEEBC34D24;
    uint64_t v35 = "InputTargetHitTestingType";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v38);
      uint64_t v4 = (unsigned int *)qword_26AF89490;
      v37[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            int v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  long long v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v36.var0 = 2 * v10;
            v36.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v14, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v36.var0 = 2 * v18;
              v36.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v22, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v23);
      xmmword_26AF89470 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "InputTargetHitTestingType", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::InputTargetComponent::~InputTargetComponent(re::ecs2::InputTargetComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  long long v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 112 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

BOOL re::KeyValueStore::isSupportedValueType(re::KeyValueStore *this, const re::IntrospectionBase *a2)
{
  uint64_t v3 = &off_268773000;
  {
    uint64_t v3 = &off_268773000;
    if (v13)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v14);
      uint64_t v3 = &off_268773000;
    }
  }
  if (v3[187] == (char **)this) {
    return 1;
  }
  unint64_t v4 = 0x268771000uLL;
  {
    unint64_t v4 = 0x268771000;
    if (v15)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v16);
      unint64_t v4 = 0x268771000;
    }
  }
  if (*(re::KeyValueStore **)(v4 + 3632) == this) {
    return 1;
  }
  unint64_t v5 = 0x268771000uLL;
  {
    unint64_t v5 = 0x268771000;
    if (v17)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v18);
      unint64_t v5 = 0x268771000;
    }
  }
  if (*(re::KeyValueStore **)(v5 + 3648) == this) {
    return 1;
  }
  unint64_t v6 = &off_268773000;
  {
    unint64_t v6 = &off_268773000;
    if (v19)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v20);
      unint64_t v6 = &off_268773000;
    }
  }
  if (v6[267] == (char **)this) {
    return 1;
  }
  unint64_t v7 = 0x268771000uLL;
  {
    unint64_t v7 = 0x268771000;
    if (v21)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      unint64_t v7 = 0x268771000;
    }
  }
  if (*(re::KeyValueStore **)(v7 + 3664) == this) {
    return 1;
  }
  unint64_t v8 = 0x268771000uLL;
  {
    unint64_t v8 = 0x268771000;
    if (v22)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      unint64_t v8 = 0x268771000;
    }
  }
  if (*(re::KeyValueStore **)(v8 + 3680) == this) {
    return 1;
  }
  unint64_t v9 = 0x268771000uLL;
  {
    unint64_t v9 = 0x268771000;
    if (v23)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      unint64_t v9 = 0x268771000;
    }
  }
  if (*(re::KeyValueStore **)(v9 + 3696) == this) {
    return 1;
  }
  unint64_t v10 = 0x268771000uLL;
  {
    unint64_t v10 = 0x268771000;
    if (v24)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      unint64_t v10 = 0x268771000;
    }
  }
  if (*(re::KeyValueStore **)(v10 + 3712) == this) {
    return 1;
  }
  unint64_t v11 = 0x268771000uLL;
  {
    unint64_t v11 = 0x268771000;
    if (v25)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      unint64_t v11 = 0x268771000;
    }
  }
  return *(re::KeyValueStore **)(v11 + 3888) == this
      || (re::KeyValueStore *)re::introspect<re::DynamicString>() == this
      || (re::KeyValueStore *)re::introspect<re::SkeletalPose>() == this
      || re::introspect<re::DynamicArray<float>>() == (char *)this
      || re::introspect<re::DynamicArray<re::Vector3<float>>>() == (char *)this
      || re::introspect<long long>() == (char *)this
      || re::introspect<re::BlendShapeWeights>() == (void)this;
}

uint64_t re::introspect<re::Quaternion<float>>()
{
  unint64_t v0 = 0x268771000uLL;
  {
    unint64_t v0 = 0x268771000;
    if (v2)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      unint64_t v0 = 0x268771000;
    }
  }
  return *(void *)(v0 + 3712);
}

uint64_t re::introspect<re::GenericSRT<float>>()
{
  unint64_t v0 = 0x268771000uLL;
  {
    unint64_t v0 = 0x268771000;
    if (v2)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      unint64_t v0 = 0x268771000;
    }
  }
  return *(void *)(v0 + 3888);
}

uint64_t re::introspect<re::DynamicString>()
{
  unint64_t v0 = &qword_268772000;
  {
    unint64_t v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v3);
      unint64_t v0 = &qword_268772000;
    }
  }
  return v0[452];
}

uint64_t re::introspect<re::SkeletalPose>()
{
  unint64_t v0 = 0x268771000uLL;
  {
    unint64_t v0 = 0x268771000;
    if (v2)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      unint64_t v0 = 0x268771000;
    }
  }
  return *(void *)(v0 + 3872);
}

char *re::introspect<re::DynamicArray<float>>()
{
  unint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    unint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v3);
      unint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[385];
}

char *re::introspect<re::DynamicArray<re::Vector3<float>>>()
{
  unint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    unint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
      unint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[387];
}

char *re::introspect<long long>()
{
  unint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    unint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v3);
      unint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[147];
}

uint64_t re::introspect<re::BlendShapeWeights>()
{
  unint64_t v0 = &qword_268772000;
  {
    unint64_t v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
      unint64_t v0 = &qword_268772000;
    }
  }
  return v0[50];
}

BOOL re::KeyValueStore::isIntrinsicValueType(re::KeyValueStore *this, const re::IntrospectionBase *a2)
{
  return re::KeyValueStore::isSupportedValueType(a2, a2);
}

unint64_t re::KeyValueStore::addOrReplaceValue(re::KeyValueStore *this, const re::IntrospectionBase *a2, const re::StringID *a3, long long *a4)
{
  if (!a4)
  {
    if ((explicit & 1) == 0
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v27);
    }
    if (re::introspect<BOOL>(void)::info != (_UNKNOWN *)a2)
    {
      {
        re::introspect<float>(void)::info = re::introspect_float(0, v30);
      }
      if (re::introspect<float>(void)::info == (_UNKNOWN *)a2)
      {
        LODWORD(v39) = 0;
        return re::KeyValueStore::addOrReplaceValue<float>(this, a3, &v39);
      }
      {
        re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v33);
      }
      if ((const re::IntrospectionBase *)re::introspect<double>(void)::info == a2)
      {
        *(void *)&long long v39 = 0;
        return re::KeyValueStore::addOrReplaceValue<double>(this, a3, &v39);
      }
      {
        re::introspect<int>(void)::info = re::introspect_int(0, v35);
      }
      if (re::introspect<int>(void)::info == (_UNKNOWN *)a2)
      {
        LODWORD(v39) = 0;
        return re::KeyValueStore::addOrReplaceValue<int>(this, a3, &v39);
      }
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      }
      if (re::introspect<re::Vector2<float>>(void)::info == (_UNKNOWN *)a2)
      {
        *(void *)&long long v39 = 0;
        return re::KeyValueStore::addOrReplaceValue<re::Vector2<float>>(this, a3, &v39);
      }
      {
        re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      }
      if (re::introspect<re::Vector3<float>>(void)::info == (_UNKNOWN *)a2)
      {
        long long v39 = 0u;
        return re::KeyValueStore::addOrReplaceValue<re::Vector3<float>>(this, a3, &v39);
      }
      {
        re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      }
      if (re::introspect<re::Vector4<float>>(void)::info == (_UNKNOWN *)a2)
      {
        long long v39 = 0uLL;
        return re::KeyValueStore::addOrReplaceValue<re::Vector4<float>>(this, a3, &v39);
      }
      if ((const re::IntrospectionBase *)re::introspect<re::Quaternion<float>>() == a2)
      {
        long long v39 = xmmword_23435FBB0;
        return re::KeyValueStore::addOrReplaceValue<re::Quaternion<float>>(this, a3, &v39);
      }
      if ((const re::IntrospectionBase *)re::introspect<re::GenericSRT<float>>() == a2)
      {
        *(void *)&long long v39 = 0x3F8000003F800000;
        *((void *)&v39 + 1) = 1065353216;
        *(void *)&long long v40 = 0;
        *((void *)&v40 + 1) = 0x3F80000000000000;
        long long v41 = 0uLL;
        return re::KeyValueStore::addOrReplaceValue<re::GenericSRT<float>>(this, a3, &v39);
      }
      if ((const re::IntrospectionBase *)re::introspect<re::DynamicString>() == a2)
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v39);
        uint64_t v18 = re::KeyValueStore::addOrReplaceValue<re::DynamicString>(this, a3, (const re::DynamicString *)&v39);
        uint64_t v20 = v39;
        if (!(void)v39 || (BYTE8(v39) & 1) == 0) {
          return v18;
        }
        uint64_t v21 = v40;
      }
      else
      {
        if ((const re::IntrospectionBase *)re::introspect<re::SkeletalPose>() == a2)
        {
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          long long v41 = 0u;
          long long v42 = 0u;
          *(void *)&long long v39 = 0;
          long long v40 = 0u;
          *((void *)&v39 + 1) = "";
          uint64_t v45 = 0;
          uint64_t v18 = re::KeyValueStore::addOrReplaceValue<re::SkeletalPose>((uint64_t)this, (StringID *)a3, (uint64_t *)&v39);
          re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v39);
          return v18;
        }
        if (re::introspect<re::DynamicArray<float>>() == (char *)a2)
        {
          *(void *)&long long v41 = 0;
          *(void *)&long long v40 = 0;
          long long v39 = 0uLL;
          DWORD2(v4objc_initWeak(location, 0) = 0;
          unint64_t v22 = re::KeyValueStore::addOrReplaceValue<re::DynamicArray<float>>(this, a3, (uint64_t *)&v39);
        }
        else
        {
          if (re::introspect<re::DynamicArray<re::Vector3<float>>>() != (char *)a2)
          {
            if (re::introspect<long long>() != (char *)a2)
            {
              if ((const re::IntrospectionBase *)re::introspect<re::BlendShapeWeights>() == a2)
              {
                long long v39 = 0u;
                long long v40 = 0u;
                uint64_t v18 = re::KeyValueStore::addOrReplaceValue<re::BlendShapeWeights>((uint64_t)this, (StringID *)a3, (uint64_t)&v39);
                re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v39);
                return v18;
              }
              return 0;
            }
            *(void *)&long long v39 = 0;
            return re::KeyValueStore::addOrReplaceValue<long long>(this, a3, &v39);
          }
          *(void *)&long long v41 = 0;
          *(void *)&long long v40 = 0;
          long long v39 = 0uLL;
          DWORD2(v4objc_initWeak(location, 0) = 0;
          unint64_t v22 = re::KeyValueStore::addOrReplaceValue<re::DynamicArray<re::Vector3<float>>>(this, a3, (uint64_t *)&v39);
        }
        uint64_t v18 = v22;
        uint64_t v20 = v39;
        if (!(void)v39) {
          return v18;
        }
        uint64_t v21 = v41;
        if (!(void)v41) {
          return v18;
        }
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 40))(v20, v21);
      return v18;
    }
    LOBYTE(v39) = 0;
    return re::KeyValueStore::addOrReplaceValue<BOOL>(this, a3, &v39);
  }
  unint64_t v9 = &off_268773000;
  if ((explicit & 1) == 0)
  {
    unint64_t v9 = &off_268773000;
    if (v23)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v24);
      unint64_t v9 = &off_268773000;
    }
  }
  if (v9[187] == (char **)a2)
  {
    return re::KeyValueStore::addOrReplaceValue<BOOL>(this, a3, a4);
  }
  else
  {
    unint64_t v10 = 0x268771000uLL;
    {
      unint64_t v10 = 0x268771000;
      if (v25)
      {
        re::introspect<float>(void)::info = re::introspect_float(0, v26);
        unint64_t v10 = 0x268771000;
      }
    }
    if (*(const re::IntrospectionBase **)(v10 + 3632) == a2)
    {
      return re::KeyValueStore::addOrReplaceValue<float>(this, a3, a4);
    }
    else
    {
      unint64_t v11 = 0x268771000uLL;
      {
        unint64_t v11 = 0x268771000;
        if (v28)
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v29);
          unint64_t v11 = 0x268771000;
        }
      }
      if (*(const re::IntrospectionBase **)(v11 + 3648) == a2)
      {
        return re::KeyValueStore::addOrReplaceValue<double>(this, a3, a4);
      }
      else
      {
        long long v12 = &off_268773000;
        {
          long long v12 = &off_268773000;
          if (v31)
          {
            re::introspect<int>(void)::info = re::introspect_int(0, v32);
            long long v12 = &off_268773000;
          }
        }
        if (v12[267] == (char **)a2)
        {
          return re::KeyValueStore::addOrReplaceValue<int>(this, a3, a4);
        }
        else
        {
          unint64_t v13 = 0x268771000uLL;
          {
            unint64_t v13 = 0x268771000;
            if (v34)
            {
              re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
              unint64_t v13 = 0x268771000;
            }
          }
          if (*(const re::IntrospectionBase **)(v13 + 3664) == a2)
          {
            return re::KeyValueStore::addOrReplaceValue<re::Vector2<float>>(this, a3, a4);
          }
          else
          {
            unint64_t v14 = 0x268771000uLL;
            {
              unint64_t v14 = 0x268771000;
              if (v36)
              {
                re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
                unint64_t v14 = 0x268771000;
              }
            }
            if (*(const re::IntrospectionBase **)(v14 + 3680) == a2)
            {
              return re::KeyValueStore::addOrReplaceValue<re::Vector3<float>>(this, a3, a4);
            }
            else
            {
              unint64_t v15 = 0x268771000uLL;
              {
                unint64_t v15 = 0x268771000;
                if (v37)
                {
                  re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
                  unint64_t v15 = 0x268771000;
                }
              }
              if (*(const re::IntrospectionBase **)(v15 + 3696) == a2)
              {
                return re::KeyValueStore::addOrReplaceValue<re::Vector4<float>>(this, a3, a4);
              }
              else
              {
                unint64_t v16 = 0x268771000uLL;
                {
                  unint64_t v16 = 0x268771000;
                  if (v38)
                  {
                    re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
                    unint64_t v16 = 0x268771000;
                  }
                }
                if (*(const re::IntrospectionBase **)(v16 + 3712) == a2)
                {
                  return re::KeyValueStore::addOrReplaceValue<re::Quaternion<float>>(this, a3, a4);
                }
                else if ((const re::IntrospectionBase *)re::introspect<re::GenericSRT<float>>() == a2)
                {
                  return re::KeyValueStore::addOrReplaceValue<re::GenericSRT<float>>(this, a3, a4);
                }
                else if ((const re::IntrospectionBase *)re::introspect<re::DynamicString>() == a2)
                {
                  return re::KeyValueStore::addOrReplaceValue<re::DynamicString>(this, a3, (const re::DynamicString *)a4);
                }
                else if ((const re::IntrospectionBase *)re::introspect<re::SkeletalPose>() == a2)
                {
                  return re::KeyValueStore::addOrReplaceValue<re::SkeletalPose>((uint64_t)this, (StringID *)a3, (uint64_t *)a4);
                }
                else if (re::introspect<re::DynamicArray<float>>() == (char *)a2)
                {
                  return re::KeyValueStore::addOrReplaceValue<re::DynamicArray<float>>(this, a3, (uint64_t *)a4);
                }
                else if (re::introspect<re::DynamicArray<re::Vector3<float>>>() == (char *)a2)
                {
                  return re::KeyValueStore::addOrReplaceValue<re::DynamicArray<re::Vector3<float>>>(this, a3, (uint64_t *)a4);
                }
                else
                {
                  if (re::introspect<long long>() != (char *)a2)
                  {
                    if ((const re::IntrospectionBase *)re::introspect<re::BlendShapeWeights>() == a2)
                    {
                      return re::KeyValueStore::addOrReplaceValue<re::BlendShapeWeights>((uint64_t)this, (StringID *)a3, (uint64_t)a4);
                    }
                    return 0;
                  }
                  return re::KeyValueStore::addOrReplaceValue<long long>(this, a3, a4);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t re::KeyValueStore::addOrReplaceValue<double>(re::KeyValueStore *a1, const re::StringID *a2, void *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    unint64_t v14 = v9;
    unint64_t v9 = v14;
    if (v12)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v13);
      unint64_t v9 = v14;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<double>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v11);
      }
    }
    uint64_t v15 = re::introspect<double>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v15);
    return re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 152, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 152, (StringID *)a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<int>(re::KeyValueStore *a1, const re::StringID *a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = (const re::IntrospectionBase **)v7;
  unint64_t v9 = *v7;
  {
    unint64_t v14 = v9;
    unint64_t v9 = v14;
    if (v12)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v13);
      unint64_t v9 = v14;
    }
  }
  if (v9 != re::introspect<int>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<int>(void)::info = re::introspect_int(0, v11);
      }
    }
    uint64_t v15 = re::introspect<int>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v15);
    return re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 200, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 200, (StringID *)a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::Vector2<float>>(re::KeyValueStore *a1, const re::StringID *a2, void *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = (const re::IntrospectionBase **)v7;
  unint64_t v9 = *v7;
  {
    int v12 = v9;
    unint64_t v9 = v12;
    if (v11)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      unint64_t v9 = v12;
    }
  }
  if (v9 != re::introspect<re::Vector2<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      }
    }
    unint64_t v13 = re::introspect<re::Vector2<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v13);
    return re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 248, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 248, (StringID *)a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::Vector3<float>>(re::KeyValueStore *a1, const re::StringID *a2, _OWORD *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = (const re::IntrospectionBase **)v7;
  unint64_t v9 = *v7;
  {
    int v12 = v9;
    unint64_t v9 = v12;
    if (v11)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      unint64_t v9 = v12;
    }
  }
  if (v9 != re::introspect<re::Vector3<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      }
    }
    unint64_t v13 = re::introspect<re::Vector3<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v13);
    return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 296, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 296, (StringID *)a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::Vector4<float>>(re::KeyValueStore *a1, const re::StringID *a2, _OWORD *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = (const re::IntrospectionBase **)v7;
  unint64_t v9 = *v7;
  {
    int v12 = v9;
    unint64_t v9 = v12;
    if (v11)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      unint64_t v9 = v12;
    }
  }
  if (v9 != re::introspect<re::Vector4<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      }
    }
    unint64_t v13 = re::introspect<re::Vector4<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v13);
    return re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 344, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 344, (StringID *)a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::Quaternion<float>>(re::KeyValueStore *a1, const re::StringID *a2, _OWORD *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    int v12 = v9;
    unint64_t v9 = v12;
    if (v11)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      unint64_t v9 = v12;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::Quaternion<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      }
    }
    uint64_t v13 = re::introspect<re::Quaternion<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v13);
    return re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 392, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 392, (StringID *)a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::GenericSRT<float>>(re::KeyValueStore *a1, const re::StringID *a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    int v12 = v9;
    unint64_t v9 = v12;
    if (v11)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      unint64_t v9 = v12;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::GenericSRT<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      }
    }
    uint64_t v13 = re::introspect<re::GenericSRT<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v13);
    return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 440, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 440, (StringID *)a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::DynamicString>(re::KeyValueStore *a1, const re::StringID *a2, const re::DynamicString *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    unint64_t v14 = v9;
    unint64_t v9 = v14;
    if (v12)
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v13);
      unint64_t v9 = v14;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::DynamicString>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v11);
      }
    }
    uint64_t v15 = re::introspect<re::DynamicString>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v15);
    return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::DynamicString&>((uint64_t)a1 + 488, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 488, (StringID *)a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::SkeletalPose>(uint64_t a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
    }
    uint64_t v24 = re::introspect<re::SkeletalPose>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v24);
    unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
    if (*(void *)(a1 + 536))
    {
      unint64_t v12 = v11 % *(unsigned int *)(a1 + 560);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 544) + 4 * v12);
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 552);
        while (!re::StringID::operator==((void *)(v14 + 112 * v13 + 8), a2))
        {
          uint64_t v13 = *(_DWORD *)(v14 + 112 * v13) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_19;
          }
        }
        uint64_t v19 = v14 + 112 * v13;
        return v19 + 24;
      }
LABEL_19:
      unsigned int v18 = re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1 + 536, v12, v11, a2, (uint64_t)a3);
      ++*(_DWORD *)(a1 + 576);
      uint64_t v19 = *(void *)(a1 + 552) + 112 * v18;
      return v19 + 24;
    }
LABEL_18:
    LODWORD(v12) = 0;
    goto LABEL_19;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    unint64_t v22 = v9;
    unint64_t v9 = v22;
    if (v23)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      unint64_t v9 = v22;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::SkeletalPose>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  unint64_t v15 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v11 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
  if (!*(void *)(a1 + 536)) {
    goto LABEL_18;
  }
  unint64_t v12 = v11 % *(unsigned int *)(a1 + 560);
  uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 544) + 4 * v12);
  if (v16 == 0x7FFFFFFF) {
    goto LABEL_19;
  }
  uint64_t v17 = *(void *)(a1 + 552);
  while (!re::StringID::operator==((void *)(v17 + 112 * v16 + 8), a2))
  {
    uint64_t v16 = *(_DWORD *)(v17 + 112 * v16) & 0x7FFFFFFF;
    if (v16 == 0x7FFFFFFF) {
      goto LABEL_19;
    }
  }
  uint64_t v21 = (void *)(v17 + 112 * v16);
  re::StringID::operator=(v21 + 3, a3);
  re::FixedArray<re::GenericSRT<float>>::operator=(v21 + 5, (uint64_t)(a3 + 2));
  re::DynamicArray<BOOL>::operator=((uint64_t)(v21 + 8), a3 + 5);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v21 + 13, a3[10]);
  ++*(_DWORD *)(a1 + 576);
  uint64_t v19 = *(void *)(a1 + 552) + 112 * v16;
  return v19 + 24;
}

unint64_t re::KeyValueStore::addOrReplaceValue<re::DynamicArray<float>>(re::KeyValueStore *a1, const re::StringID *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    uint64_t v14 = v9;
    unint64_t v9 = v14;
    if (v12)
    {
      re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v13);
      unint64_t v9 = v14;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::DynamicArray<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v11);
      }
    }
    uint64_t v15 = re::introspect<re::DynamicArray<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v15);
    return re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 584, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 584, (StringID *)a2, a3);
}

unint64_t re::KeyValueStore::addOrReplaceValue<re::DynamicArray<re::Vector3<float>>>(re::KeyValueStore *a1, const re::StringID *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    int v12 = v9;
    unint64_t v9 = v12;
    if (v11)
    {
      re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
      unint64_t v9 = v12;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
      }
    }
    uint64_t v13 = re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v13);
    return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 632, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 632, (StringID *)a2, a3);
}

uint64_t re::KeyValueStore::addOrReplaceValue<re::BlendShapeWeights>(uint64_t a1, StringID *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
    }
    uint64_t v24 = re::introspect<re::BlendShapeWeights>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v24);
    unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
    if (*(void *)(a1 + 728))
    {
      unint64_t v12 = v11 % *(unsigned int *)(a1 + 752);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 736) + 4 * v12);
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 744);
        while (!re::StringID::operator==((void *)(v14 + 56 * v13 + 8), a2))
        {
          uint64_t v13 = *(_DWORD *)(v14 + 56 * v13) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_19;
          }
        }
        uint64_t v19 = v14 + 56 * v13;
        return v19 + 24;
      }
LABEL_19:
      unsigned int v18 = re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1 + 728, v12, v11, a2, a3);
      ++*(_DWORD *)(a1 + 768);
      uint64_t v19 = *(void *)(a1 + 744) + 56 * v18;
      return v19 + 24;
    }
LABEL_18:
    LODWORD(v12) = 0;
    goto LABEL_19;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    unint64_t v22 = v9;
    unint64_t v9 = v22;
    if (v23)
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
      unint64_t v9 = v22;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::BlendShapeWeights>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  unint64_t v15 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v11 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
  if (!*(void *)(a1 + 728)) {
    goto LABEL_18;
  }
  unint64_t v12 = v11 % *(unsigned int *)(a1 + 752);
  uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 736) + 4 * v12);
  if (v16 == 0x7FFFFFFF) {
    goto LABEL_19;
  }
  uint64_t v17 = *(void *)(a1 + 744);
  while (!re::StringID::operator==((void *)(v17 + 56 * v16 + 8), a2))
  {
    uint64_t v16 = *(_DWORD *)(v17 + 56 * v16) & 0x7FFFFFFF;
    if (v16 == 0x7FFFFFFF) {
      goto LABEL_19;
    }
  }
  uint64_t v21 = v17 + 56 * v16;
  re::FixedArray<float>::operator=((uint64_t *)(v21 + 24), a3);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v21 + 48), *(void *)(a3 + 24));
  ++*(_DWORD *)(a1 + 768);
  uint64_t v19 = *(void *)(a1 + 744) + 56 * v16;
  return v19 + 24;
}

uint64_t re::KeyValueStore::addAndSwapValue(re::KeyValueStore *this, const re::IntrospectionBase *a2, const re::StringID *a3, long long *a4)
{
  if (a4)
  {
    unint64_t v5 = a4;
    uint64_t v6 = a3;
    unint64_t v7 = a2;
    unint64_t v4 = this;
    unint64_t v8 = &off_268773000;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, "assertion failure: '%s' (%s:line %i) ", "swapValue", "addAndSwapValue", 67);
    _os_crash();
    __break(1u);
  }
  {
    v8[187] = (char **)re::introspect_BOOL(0, v141);
  }
LABEL_3:
  if (v8[187] == (char **)v7)
  {
    unint64_t v11 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v11)
    {
      unint64_t v12 = v11;
      uint64_t v13 = *v11;
      if ((atomic_load_explicit(v9, memory_order_acquire) & 1) == 0)
      {
        long long v146 = v13;
        uint64_t v13 = v146;
        if (v147)
        {
          v8[187] = (char **)re::introspect_BOOL(0, v148);
          uint64_t v13 = v146;
        }
      }
      if (v13 == (const re::IntrospectionBase *)v8[187])
      {
        uint64_t v48 = 0x7FFFFFFFLL;
        if (*((void *)v4 + 7))
        {
          unint64_t v49 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
          uint64_t v50 = *(unsigned int *)(*((void *)v4 + 8)
                                + 4
                                * (((0x94D049BB133111EBLL * (v49 ^ (v49 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v49 ^ (v49 >> 27))) >> 31))
                                 % *((unsigned int *)v4 + 20)));
          if (v50 != 0x7FFFFFFF)
          {
            uint64_t v51 = *((void *)v4 + 9);
            uint64_t v48 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((void *)(v51 + 32 * v50 + 8), v6))
            {
              uint64_t v50 = *(_DWORD *)(v51 + 32 * v50) & 0x7FFFFFFF;
              if (v50 == 0x7FFFFFFF) {
                goto LABEL_167;
              }
            }
            uint64_t v48 = v50;
          }
        }
LABEL_167:
        uint64_t v108 = *((void *)v4 + 9) + 32 * v48;
        char v109 = *(unsigned char *)(v108 + 24);
        *(unsigned char *)(v108 + 24) = *(unsigned char *)v5;
        *(unsigned char *)unint64_t v5 = v109;
        return 1;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v12, v6);
    }
    if ((atomic_load_explicit(v9, memory_order_acquire) & 1) == 0
    {
      v8[187] = (char **)re::introspect_BOOL(0, v144);
    }
    int v167 = v8[187];
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v167);
    unint64_t v14 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
    unint64_t v15 = (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31);
    if (*((void *)v4 + 7))
    {
      unint64_t v16 = v15 % *((unsigned int *)v4 + 20);
      uint64_t v17 = *(unsigned int *)(*((void *)v4 + 8) + 4 * v16);
      if (v17 != 0x7FFFFFFF)
      {
        uint64_t v18 = *((void *)v4 + 9);
        while (!re::StringID::operator==((void *)(v18 + 32 * v17 + 8), v6))
        {
          uint64_t v17 = *(_DWORD *)(v18 + 32 * v17) & 0x7FFFFFFF;
          if (v17 == 0x7FFFFFFF) {
            goto LABEL_61;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
LABEL_61:
    uint64_t v35 = *((unsigned int *)v4 + 23);
    if (v35 == 0x7FFFFFFF)
    {
      uint64_t v35 = *((unsigned int *)v4 + 22);
      int v36 = v35;
      if (v35 == *((_DWORD *)v4 + 20))
      {
        re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 56, 2 * *((_DWORD *)v4 + 21));
        LODWORD(v16) = v15 % *((unsigned int *)v4 + 20);
        int v36 = *((_DWORD *)v4 + 22);
      }
      *((_DWORD *)v4 + 22) = v36 + 1;
      uint64_t v37 = *((void *)v4 + 9);
      int v38 = *(_DWORD *)(v37 + 32 * v35);
    }
    else
    {
      uint64_t v37 = *((void *)v4 + 9);
      int v38 = *(_DWORD *)(v37 + 32 * v35);
      *((_DWORD *)v4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = v38 & 0x7FFFFFFF;
    }
    uint64_t v39 = 32 * v35;
    *(_DWORD *)(v37 + v39) = v38 | 0x80000000;
    *(_DWORD *)(*((void *)v4 + 9) + v39) = *(_DWORD *)(*((void *)v4 + 9) + 32 * v35) & 0x80000000 | *(_DWORD *)(*((void *)v4 + 8) + 4 * v16);
    re::StringID::StringID((re::StringID *)(*((void *)v4 + 9) + 32 * v35 + 8), (const StringID *)v6);
    uint64_t result = 0;
    *(unsigned char *)(*((void *)v4 + 9) + 32 * v35 + 24) = *(unsigned char *)v5;
    *(_DWORD *)(*((void *)v4 + 8) + 4 * v16) = v35;
    ++*((_DWORD *)v4 + 21);
    ++*((_DWORD *)v4 + 24);
    return result;
  }
  {
    re::introspect<float>(void)::info = re::introspect_float(0, v142);
  }
  if (re::introspect<float>(void)::info == (_UNKNOWN *)v7)
  {
    uint64_t v19 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v19)
    {
      uint64_t v20 = (const re::IntrospectionBase **)v19;
      uint64_t v21 = *v19;
      {
        long long v150 = v21;
        uint64_t v21 = v150;
        if (v151)
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v152);
          uint64_t v21 = v150;
        }
      }
      if (v21 == re::introspect<float>(void)::info)
      {
        uint64_t v65 = 0x7FFFFFFFLL;
        if (*((void *)v4 + 13))
        {
          unint64_t v66 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
          uint64_t v67 = *(unsigned int *)(*((void *)v4 + 14)
                                + 4
                                * (((0x94D049BB133111EBLL * (v66 ^ (v66 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v66 ^ (v66 >> 27))) >> 31))
                                 % *((unsigned int *)v4 + 32)));
          if (v67 != 0x7FFFFFFF)
          {
            uint64_t v68 = *((void *)v4 + 15);
            uint64_t v65 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((void *)(v68 + 32 * v67 + 8), v6))
            {
              uint64_t v67 = *(_DWORD *)(v68 + 32 * v67) & 0x7FFFFFFF;
              if (v67 == 0x7FFFFFFF) {
                goto LABEL_185;
              }
            }
            uint64_t v65 = v67;
          }
        }
LABEL_185:
        uint64_t v119 = *((void *)v4 + 15) + 32 * v65;
        int v120 = *(_DWORD *)(v119 + 24);
        *(_DWORD *)(v119 + 24) = *(_DWORD *)v5;
        *(_DWORD *)unint64_t v5 = v120;
        return 1;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v20, v6);
    }
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v149);
    }
    int v167 = (char **)re::introspect<float>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v167);
    unint64_t v22 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
    unint64_t v23 = (0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31);
    if (*((void *)v4 + 13))
    {
      unint64_t v24 = v23 % *((unsigned int *)v4 + 32);
      uint64_t v25 = *(unsigned int *)(*((void *)v4 + 14) + 4 * v24);
      if (v25 != 0x7FFFFFFF)
      {
        uint64_t v26 = *((void *)v4 + 15);
        while (!re::StringID::operator==((void *)(v26 + 32 * v25 + 8), v6))
        {
          uint64_t v25 = *(_DWORD *)(v26 + 32 * v25) & 0x7FFFFFFF;
          if (v25 == 0x7FFFFFFF) {
            goto LABEL_85;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v24) = 0;
    }
LABEL_85:
    uint64_t v52 = *((unsigned int *)v4 + 35);
    if (v52 == 0x7FFFFFFF)
    {
      uint64_t v52 = *((unsigned int *)v4 + 34);
      int v53 = v52;
      if (v52 == *((_DWORD *)v4 + 32))
      {
        re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 104, 2 * *((_DWORD *)v4 + 33));
        LODWORD(v24) = v23 % *((unsigned int *)v4 + 32);
        int v53 = *((_DWORD *)v4 + 34);
      }
      *((_DWORD *)v4 + 34) = v53 + 1;
      uint64_t v54 = *((void *)v4 + 15);
      int v55 = *(_DWORD *)(v54 + 32 * v52);
    }
    else
    {
      uint64_t v54 = *((void *)v4 + 15);
      int v55 = *(_DWORD *)(v54 + 32 * v52);
      *((_DWORD *)v4 + 35) = v55 & 0x7FFFFFFF;
    }
    uint64_t v56 = 32 * v52;
    *(_DWORD *)(v54 + v56) = v55 | 0x80000000;
    *(_DWORD *)(*((void *)v4 + 15) + v56) = *(_DWORD *)(*((void *)v4 + 15) + 32 * v52) & 0x80000000 | *(_DWORD *)(*((void *)v4 + 14) + 4 * v24);
    re::StringID::StringID((re::StringID *)(*((void *)v4 + 15) + 32 * v52 + 8), (const StringID *)v6);
    uint64_t result = 0;
    *(_DWORD *)(*((void *)v4 + 15) + 32 * v52 + 24) = *(_DWORD *)v5;
    *(_DWORD *)(*((void *)v4 + 14) + 4 * v24) = v52;
    ++*((_DWORD *)v4 + 33);
    ++*((_DWORD *)v4 + 36);
    return result;
  }
  {
    re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v143);
  }
  if ((const re::IntrospectionBase *)re::introspect<double>(void)::info == v7)
  {
    uint64_t v27 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v27)
    {
      int v28 = v27;
      uint64_t v29 = *v27;
      {
        uint64_t v154 = v29;
        uint64_t v29 = v154;
        if (v155)
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v156);
          uint64_t v29 = v154;
        }
      }
      if (v29 == (const re::IntrospectionBase *)re::introspect<double>(void)::info)
      {
        uint64_t v82 = 0x7FFFFFFFLL;
        if (*((void *)v4 + 19))
        {
          unint64_t v83 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
          uint64_t v84 = *(unsigned int *)(*((void *)v4 + 20)
                                + 4
                                * (((0x94D049BB133111EBLL * (v83 ^ (v83 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v83 ^ (v83 >> 27))) >> 31))
                                 % *((unsigned int *)v4 + 44)));
          if (v84 != 0x7FFFFFFF)
          {
            uint64_t v85 = *((void *)v4 + 21);
            uint64_t v82 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((void *)(v85 + 32 * v84 + 8), v6))
            {
              uint64_t v84 = *(_DWORD *)(v85 + 32 * v84) & 0x7FFFFFFF;
              if (v84 == 0x7FFFFFFF) {
                goto LABEL_203;
              }
            }
            uint64_t v82 = v84;
          }
        }
LABEL_203:
        uint64_t v130 = *((void *)v4 + 21) + 32 * v82;
        uint64_t v131 = *(void *)(v130 + 24);
        *(void *)(v130 + 24) = *(void *)v5;
        goto LABEL_220;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v28, v6);
    }
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v153);
    }
    int v167 = (char **)re::introspect<double>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v167);
    unint64_t v30 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
    unint64_t v31 = (0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) >> 31);
    if (*((void *)v4 + 19))
    {
      unint64_t v32 = v31 % *((unsigned int *)v4 + 44);
      uint64_t v33 = *(unsigned int *)(*((void *)v4 + 20) + 4 * v32);
      if (v33 != 0x7FFFFFFF)
      {
        uint64_t v34 = *((void *)v4 + 21);
        while (!re::StringID::operator==((void *)(v34 + 32 * v33 + 8), v6))
        {
          uint64_t v33 = *(_DWORD *)(v34 + 32 * v33) & 0x7FFFFFFF;
          if (v33 == 0x7FFFFFFF) {
            goto LABEL_109;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v32) = 0;
    }
LABEL_109:
    uint64_t v69 = *((unsigned int *)v4 + 47);
    if (v69 == 0x7FFFFFFF)
    {
      uint64_t v69 = *((unsigned int *)v4 + 46);
      int v70 = v69;
      if (v69 == *((_DWORD *)v4 + 44))
      {
        re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 152, 2 * *((_DWORD *)v4 + 45));
        LODWORD(v32) = v31 % *((unsigned int *)v4 + 44);
        int v70 = *((_DWORD *)v4 + 46);
      }
      *((_DWORD *)v4 + 46) = v70 + 1;
      uint64_t v71 = *((void *)v4 + 21);
      int v72 = *(_DWORD *)(v71 + 32 * v69);
    }
    else
    {
      uint64_t v71 = *((void *)v4 + 21);
      int v72 = *(_DWORD *)(v71 + 32 * v69);
      *((_DWORD *)v4 + 47) = v72 & 0x7FFFFFFF;
    }
    uint64_t v73 = 32 * v69;
    *(_DWORD *)(v71 + v73) = v72 | 0x80000000;
    *(_DWORD *)(*((void *)v4 + 21) + v73) = *(_DWORD *)(*((void *)v4 + 21) + 32 * v69) & 0x80000000 | *(_DWORD *)(*((void *)v4 + 20) + 4 * v32);
    re::StringID::StringID((re::StringID *)(*((void *)v4 + 21) + 32 * v69 + 8), (const StringID *)v6);
    uint64_t result = 0;
    *(void *)(*((void *)v4 + 21) + 32 * v69 + 24) = *(void *)v5;
    *(_DWORD *)(*((void *)v4 + 20) + 4 * v32) = v69;
    ++*((_DWORD *)v4 + 45);
    ++*((_DWORD *)v4 + 48);
    return result;
  }
  {
    re::introspect<int>(void)::info = re::introspect_int(0, v145);
  }
  if (re::introspect<int>(void)::info == (_UNKNOWN *)v7)
  {
    long long v40 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v40)
    {
      long long v41 = (const re::IntrospectionBase **)v40;
      long long v42 = *v40;
      {
        uint64_t v158 = v42;
        long long v42 = v158;
        if (v159)
        {
          re::introspect<int>(void)::info = re::introspect_int(0, v160);
          long long v42 = v158;
        }
      }
      if (v42 == re::introspect<int>(void)::info)
      {
        uint64_t v99 = 0x7FFFFFFFLL;
        if (*((void *)v4 + 25))
        {
          unint64_t v100 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
          uint64_t v101 = *(unsigned int *)(*((void *)v4 + 26)
                                 + 4
                                 * (((0x94D049BB133111EBLL * (v100 ^ (v100 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v100 ^ (v100 >> 27))) >> 31))
                                  % *((unsigned int *)v4 + 56)));
          if (v101 != 0x7FFFFFFF)
          {
            uint64_t v102 = *((void *)v4 + 27);
            uint64_t v99 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((void *)(v102 + 32 * v101 + 8), v6))
            {
              uint64_t v101 = *(_DWORD *)(v102 + 32 * v101) & 0x7FFFFFFF;
              if (v101 == 0x7FFFFFFF) {
                goto LABEL_214;
              }
            }
            uint64_t v99 = v101;
          }
        }
LABEL_214:
        uint64_t v135 = *((void *)v4 + 27) + 32 * v99;
        int v136 = *(_DWORD *)(v135 + 24);
        *(_DWORD *)(v135 + 24) = *(_DWORD *)v5;
        *(_DWORD *)unint64_t v5 = v136;
        return 1;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v41, v6);
    }
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v157);
    }
    int v167 = (char **)re::introspect<int>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v167);
    unint64_t v43 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
    unint64_t v44 = (0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) ^ ((0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) >> 31);
    if (*((void *)v4 + 25))
    {
      unint64_t v45 = v44 % *((unsigned int *)v4 + 56);
      uint64_t v46 = *(unsigned int *)(*((void *)v4 + 26) + 4 * v45);
      if (v46 != 0x7FFFFFFF)
      {
        uint64_t v47 = *((void *)v4 + 27);
        while (!re::StringID::operator==((void *)(v47 + 32 * v46 + 8), v6))
        {
          uint64_t v46 = *(_DWORD *)(v47 + 32 * v46) & 0x7FFFFFFF;
          if (v46 == 0x7FFFFFFF) {
            goto LABEL_133;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v45) = 0;
    }
LABEL_133:
    uint64_t v86 = *((unsigned int *)v4 + 59);
    if (v86 == 0x7FFFFFFF)
    {
      uint64_t v86 = *((unsigned int *)v4 + 58);
      int v87 = v86;
      if (v86 == *((_DWORD *)v4 + 56))
      {
        re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 200, 2 * *((_DWORD *)v4 + 57));
        LODWORD(v45) = v44 % *((unsigned int *)v4 + 56);
        int v87 = *((_DWORD *)v4 + 58);
      }
      *((_DWORD *)v4 + 58) = v87 + 1;
      uint64_t v88 = *((void *)v4 + 27);
      int v89 = *(_DWORD *)(v88 + 32 * v86);
    }
    else
    {
      uint64_t v88 = *((void *)v4 + 27);
      int v89 = *(_DWORD *)(v88 + 32 * v86);
      *((_DWORD *)v4 + 59) = v89 & 0x7FFFFFFF;
    }
    uint64_t v90 = 32 * v86;
    *(_DWORD *)(v88 + v9objc_initWeak(location, 0) = v89 | 0x80000000;
    *(_DWORD *)(*((void *)v4 + 27) + v9objc_initWeak(location, 0) = *(_DWORD *)(*((void *)v4 + 27) + 32 * v86) & 0x80000000 | *(_DWORD *)(*((void *)v4 + 26) + 4 * v45);
    re::StringID::StringID((re::StringID *)(*((void *)v4 + 27) + 32 * v86 + 8), (const StringID *)v6);
    uint64_t result = 0;
    *(_DWORD *)(*((void *)v4 + 27) + 32 * v86 + 24) = *(_DWORD *)v5;
    *(_DWORD *)(*((void *)v4 + 26) + 4 * v45) = v86;
    ++*((_DWORD *)v4 + 57);
    ++*((_DWORD *)v4 + 60);
    return result;
  }
  {
    re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
  }
  if (re::introspect<re::Vector2<float>>(void)::info == (_UNKNOWN *)v7)
  {
    uint64_t v57 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (!v57) {
      goto LABEL_95;
    }
    uint64_t v58 = (const re::IntrospectionBase **)v57;
    uint64_t v59 = *v57;
    {
      long long v161 = v59;
      uint64_t v59 = v161;
      if (v162)
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
        uint64_t v59 = v161;
      }
    }
    if (v59 != re::introspect<re::Vector2<float>>(void)::info)
    {
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v58, v6);
LABEL_95:
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      }
      int v167 = (char **)re::introspect<re::Vector2<float>>(void)::info;
      re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v167);
      unint64_t v60 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
      unint64_t v61 = (0x94D049BB133111EBLL * (v60 ^ (v60 >> 27))) ^ ((0x94D049BB133111EBLL * (v60 ^ (v60 >> 27))) >> 31);
      if (*((void *)v4 + 31))
      {
        unint64_t v62 = v61 % *((unsigned int *)v4 + 68);
        uint64_t v63 = *(unsigned int *)(*((void *)v4 + 32) + 4 * v62);
        if (v63 != 0x7FFFFFFF)
        {
          uint64_t v64 = *((void *)v4 + 33);
          while (!re::StringID::operator==((void *)(v64 + 32 * v63 + 8), v6))
          {
            uint64_t v63 = *(_DWORD *)(v64 + 32 * v63) & 0x7FFFFFFF;
            if (v63 == 0x7FFFFFFF) {
              goto LABEL_157;
            }
          }
          return 0;
        }
      }
      else
      {
        LODWORD(v62) = 0;
      }
LABEL_157:
      uint64_t v103 = *((unsigned int *)v4 + 71);
      if (v103 == 0x7FFFFFFF)
      {
        uint64_t v103 = *((unsigned int *)v4 + 70);
        int v104 = v103;
        if (v103 == *((_DWORD *)v4 + 68))
        {
          re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 248, 2 * *((_DWORD *)v4 + 69));
          LODWORD(v62) = v61 % *((unsigned int *)v4 + 68);
          int v104 = *((_DWORD *)v4 + 70);
        }
        *((_DWORD *)v4 + 7objc_initWeak(location, 0) = v104 + 1;
        uint64_t v105 = *((void *)v4 + 33);
        int v106 = *(_DWORD *)(v105 + 32 * v103);
      }
      else
      {
        uint64_t v105 = *((void *)v4 + 33);
        int v106 = *(_DWORD *)(v105 + 32 * v103);
        *((_DWORD *)v4 + 71) = v106 & 0x7FFFFFFF;
      }
      uint64_t v107 = 32 * v103;
      *(_DWORD *)(v105 + v107) = v106 | 0x80000000;
      *(_DWORD *)(*((void *)v4 + 33) + v107) = *(_DWORD *)(*((void *)v4 + 33) + 32 * v103) & 0x80000000 | *(_DWORD *)(*((void *)v4 + 32) + 4 * v62);
      re::StringID::StringID((re::StringID *)(*((void *)v4 + 33) + 32 * v103 + 8), (const StringID *)v6);
      uint64_t result = 0;
      *(void *)(*((void *)v4 + 33) + 32 * v103 + 24) = *(void *)v5;
      *(_DWORD *)(*((void *)v4 + 32) + 4 * v62) = v103;
      ++*((_DWORD *)v4 + 69);
      ++*((_DWORD *)v4 + 72);
      return result;
    }
    uint64_t v110 = 0x7FFFFFFFLL;
    if (*((void *)v4 + 31))
    {
      unint64_t v111 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
      uint64_t v112 = *(unsigned int *)(*((void *)v4 + 32)
                             + 4
                             * (((0x94D049BB133111EBLL * (v111 ^ (v111 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v111 ^ (v111 >> 27))) >> 31))
                              % *((unsigned int *)v4 + 68)));
      if (v112 != 0x7FFFFFFF)
      {
        uint64_t v113 = *((void *)v4 + 33);
        uint64_t v110 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((void *)(v113 + 32 * v112 + 8), v6))
        {
          uint64_t v112 = *(_DWORD *)(v113 + 32 * v112) & 0x7FFFFFFF;
          if (v112 == 0x7FFFFFFF) {
            goto LABEL_219;
          }
        }
        uint64_t v110 = v112;
      }
    }
LABEL_219:
    uint64_t v137 = *((void *)v4 + 33) + 32 * v110;
    uint64_t v131 = *(void *)(v137 + 24);
    *(void *)(v137 + 24) = *(void *)v5;
LABEL_220:
    *(void *)unint64_t v5 = v131;
    return 1;
  }
  {
    re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
  }
  if (re::introspect<re::Vector3<float>>(void)::info == (_UNKNOWN *)v7)
  {
    uint64_t v74 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
    if (v74)
    {
      uint64_t v75 = (const re::IntrospectionBase **)v74;
      uint64_t v76 = *v74;
      {
        uint64_t v163 = v76;
        uint64_t v76 = v163;
        if (v164)
        {
          re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
          uint64_t v76 = v163;
        }
      }
      if (v76 == re::introspect<re::Vector3<float>>(void)::info)
      {
        uint64_t v121 = 0x7FFFFFFFLL;
        if (*((void *)v4 + 37))
        {
          unint64_t v122 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
          uint64_t v123 = *(unsigned int *)(*((void *)v4 + 38)
                                 + 4
                                 * (((0x94D049BB133111EBLL * (v122 ^ (v122 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v122 ^ (v122 >> 27))) >> 31))
                                  % *((unsigned int *)v4 + 80)));
          if (v123 != 0x7FFFFFFF)
          {
            uint64_t v124 = *((void *)v4 + 39);
            uint64_t v121 = 0x7FFFFFFFLL;
            while (!re::StringID::operator==((void *)(v124 + 48 * v123 + 8), v6))
            {
              uint64_t v123 = *(_DWORD *)(v124 + 48 * v123) & 0x7FFFFFFF;
              if (v123 == 0x7FFFFFFF) {
                goto LABEL_225;
              }
            }
            uint64_t v121 = v123;
          }
        }
LABEL_225:
        uint64_t v138 = *((void *)v4 + 39);
LABEL_231:
        uint64_t v139 = v138 + 48 * v121;
        long long v140 = *(_OWORD *)(v139 + 32);
        *(_OWORD *)(v139 + 32) = *v5;
        *unint64_t v5 = v140;
        return 1;
      }
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v75, v6);
    }
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    int v167 = (char **)re::introspect<re::Vector3<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v167);
    unint64_t v77 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
    unint64_t v78 = (0x94D049BB133111EBLL * (v77 ^ (v77 >> 27))) ^ ((0x94D049BB133111EBLL * (v77 ^ (v77 >> 27))) >> 31);
    if (*((void *)v4 + 37))
    {
      unint64_t v79 = v78 % *((unsigned int *)v4 + 80);
      uint64_t v80 = *(unsigned int *)(*((void *)v4 + 38) + 4 * v79);
      if (v80 != 0x7FFFFFFF)
      {
        uint64_t v81 = *((void *)v4 + 39);
        while (!re::StringID::operator==((void *)(v81 + 48 * v80 + 8), v6))
        {
          uint64_t v80 = *(_DWORD *)(v81 + 48 * v80) & 0x7FFFFFFF;
          if (v80 == 0x7FFFFFFF) {
            goto LABEL_175;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v79) = 0;
    }
LABEL_175:
    uint64_t v114 = *((unsigned int *)v4 + 83);
    if (v114 == 0x7FFFFFFF)
    {
      uint64_t v114 = *((unsigned int *)v4 + 82);
      int v115 = v114;
      if (v114 == *((_DWORD *)v4 + 80))
      {
        re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 296, 2 * *((_DWORD *)v4 + 81));
        LODWORD(v79) = v78 % *((unsigned int *)v4 + 80);
        int v115 = *((_DWORD *)v4 + 82);
      }
      *((_DWORD *)v4 + 82) = v115 + 1;
      uint64_t v116 = *((void *)v4 + 39);
      int v117 = *(_DWORD *)(v116 + 48 * v114);
    }
    else
    {
      uint64_t v116 = *((void *)v4 + 39);
      int v117 = *(_DWORD *)(v116 + 48 * v114);
      *((_DWORD *)v4 + 83) = v117 & 0x7FFFFFFF;
    }
    uint64_t v118 = 48 * v114;
    *(_DWORD *)(v116 + v118) = v117 | 0x80000000;
    *(_DWORD *)(*((void *)v4 + 39) + v118) = *(_DWORD *)(*((void *)v4 + 39) + 48 * v114) & 0x80000000 | *(_DWORD *)(*((void *)v4 + 38) + 4 * v79);
    re::StringID::StringID((re::StringID *)(*((void *)v4 + 39) + 48 * v114 + 8), (const StringID *)v6);
    uint64_t result = 0;
    *(_OWORD *)(*((void *)v4 + 39) + 48 * v114 + 32) = *v5;
    *(_DWORD *)(*((void *)v4 + 38) + 4 * v79) = v114;
    ++*((_DWORD *)v4 + 81);
    ++*((_DWORD *)v4 + 84);
    return result;
  }
  {
    re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
  }
  if (re::introspect<re::Vector4<float>>(void)::info != (_UNKNOWN *)v7)
  {
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    if ((const re::IntrospectionBase *)re::introspect<re::Quaternion<float>>(void)::info == v7)
    {
      return re::KeyValueStore::addAndSwapValue<re::Quaternion<float>>((uint64_t)v4, (StringID *)v6, v5);
    }
    else
    {
      {
        re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      }
      if ((const re::IntrospectionBase *)re::introspect<re::GenericSRT<float>>(void)::info == v7)
      {
        return re::KeyValueStore::addAndSwapValue<re::GenericSRT<float>>((uint64_t)v4, (StringID *)v6, v5);
      }
      else if ((const re::IntrospectionBase *)re::introspect<re::DynamicString>() == v7)
      {
        return re::KeyValueStore::addAndSwapValue<re::DynamicString>((uint64_t)v4, v6, (const re::DynamicString *)v5);
      }
      else if ((const re::IntrospectionBase *)re::introspect<re::SkeletalPose>() == v7)
      {
        return re::KeyValueStore::addAndSwapValue<re::SkeletalPose>((uint64_t)v4, (StringID *)v6, (uint64_t)v5);
      }
      else if (re::introspect<re::DynamicArray<float>>() == (char *)v7)
      {
        return re::KeyValueStore::addAndSwapValue<re::DynamicArray<float>>((uint64_t)v4, (StringID *)v6, (uint64_t *)v5);
      }
      else if (re::introspect<re::DynamicArray<re::Vector3<float>>>() == (char *)v7)
      {
        return re::KeyValueStore::addAndSwapValue<re::DynamicArray<re::Vector3<float>>>((uint64_t)v4, (StringID *)v6, (uint64_t *)v5);
      }
      else if (re::introspect<long long>() == (char *)v7)
      {
        return re::KeyValueStore::addAndSwapValue<long long>((uint64_t)v4, (StringID *)v6, v5);
      }
      else
      {
        if ((const re::IntrospectionBase *)re::introspect<re::BlendShapeWeights>() != v7) {
          return 0;
        }
        return re::KeyValueStore::addAndSwapValue<re::BlendShapeWeights>((uint64_t)v4, (StringID *)v6, (uint64_t *)v5);
      }
    }
  }
  uint64_t v91 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4 + 8, v6);
  if (v91)
  {
    long long v92 = (const re::IntrospectionBase **)v91;
    long long v93 = *v91;
    {
      long long v165 = v93;
      long long v93 = v165;
      if (v166)
      {
        re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
        long long v93 = v165;
      }
    }
    if (v93 != re::introspect<re::Vector4<float>>(void)::info)
    {
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4 + 8, v6);
      re::KeyValueStore::removeValue(v4, *v92, v6);
      goto LABEL_143;
    }
    uint64_t v121 = 0x7FFFFFFFLL;
    if (*((void *)v4 + 43))
    {
      unint64_t v132 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
      uint64_t v133 = *(unsigned int *)(*((void *)v4 + 44)
                             + 4
                             * (((0x94D049BB133111EBLL * (v132 ^ (v132 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v132 ^ (v132 >> 27))) >> 31))
                              % *((unsigned int *)v4 + 92)));
      if (v133 != 0x7FFFFFFF)
      {
        uint64_t v134 = *((void *)v4 + 45);
        uint64_t v121 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((void *)(v134 + 48 * v133 + 8), v6))
        {
          uint64_t v133 = *(_DWORD *)(v134 + 48 * v133) & 0x7FFFFFFF;
          if (v133 == 0x7FFFFFFF) {
            goto LABEL_230;
          }
        }
        uint64_t v121 = v133;
      }
    }
LABEL_230:
    uint64_t v138 = *((void *)v4 + 45);
    goto LABEL_231;
  }
LABEL_143:
  {
    re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
  }
  int v167 = (char **)re::introspect<re::Vector4<float>>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4 + 8, (StringID *)v6, &v167);
  unint64_t v94 = 0xBF58476D1CE4E5B9 * ((*(void *)v6 >> 31) ^ (*(void *)v6 >> 1));
  unint64_t v95 = (0x94D049BB133111EBLL * (v94 ^ (v94 >> 27))) ^ ((0x94D049BB133111EBLL * (v94 ^ (v94 >> 27))) >> 31);
  if (*((void *)v4 + 43))
  {
    unint64_t v96 = v95 % *((unsigned int *)v4 + 92);
    uint64_t v97 = *(unsigned int *)(*((void *)v4 + 44) + 4 * v96);
    if (v97 != 0x7FFFFFFF)
    {
      uint64_t v98 = *((void *)v4 + 45);
      while (!re::StringID::operator==((void *)(v98 + 48 * v97 + 8), v6))
      {
        uint64_t v97 = *(_DWORD *)(v98 + 48 * v97) & 0x7FFFFFFF;
        if (v97 == 0x7FFFFFFF) {
          goto LABEL_193;
        }
      }
      return 0;
    }
  }
  else
  {
    LODWORD(v96) = 0;
  }
LABEL_193:
  uint64_t v125 = *((unsigned int *)v4 + 95);
  if (v125 == 0x7FFFFFFF)
  {
    uint64_t v125 = *((unsigned int *)v4 + 94);
    int v126 = v125;
    if (v125 == *((_DWORD *)v4 + 92))
    {
      re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v4 + 344, 2 * *((_DWORD *)v4 + 93));
      LODWORD(v96) = v95 % *((unsigned int *)v4 + 92);
      int v126 = *((_DWORD *)v4 + 94);
    }
    *((_DWORD *)v4 + 94) = v126 + 1;
    uint64_t v127 = *((void *)v4 + 45);
    int v128 = *(_DWORD *)(v127 + 48 * v125);
  }
  else
  {
    uint64_t v127 = *((void *)v4 + 45);
    int v128 = *(_DWORD *)(v127 + 48 * v125);
    *((_DWORD *)v4 + 95) = v128 & 0x7FFFFFFF;
  }
  uint64_t v129 = 48 * v125;
  *(_DWORD *)(v127 + v129) = v128 | 0x80000000;
  *(_DWORD *)(*((void *)v4 + 45) + v129) = *(_DWORD *)(*((void *)v4 + 45) + 48 * v125) & 0x80000000 | *(_DWORD *)(*((void *)v4 + 44) + 4 * v96);
  re::StringID::StringID((re::StringID *)(*((void *)v4 + 45) + 48 * v125 + 8), (const StringID *)v6);
  uint64_t result = 0;
  *(_OWORD *)(*((void *)v4 + 45) + 48 * v125 + 32) = *v5;
  *(_DWORD *)(*((void *)v4 + 44) + 4 * v96) = v125;
  ++*((_DWORD *)v4 + 93);
  ++*((_DWORD *)v4 + 96);
  return result;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::Quaternion<float>>(uint64_t a1, StringID *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    uint64_t v29 = re::introspect<re::Quaternion<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v29);
    unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
    if (*(void *)(a1 + 392))
    {
      unint64_t v12 = v11 % *(unsigned int *)(a1 + 416);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 400) + 4 * v12);
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 408);
        while (!re::StringID::operator==((void *)(v14 + 48 * v13 + 8), a2))
        {
          uint64_t v13 = *(_DWORD *)(v14 + 48 * v13) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
LABEL_13:
    uint64_t v15 = *(unsigned int *)(a1 + 428);
    if (v15 == 0x7FFFFFFF)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 424);
      int v16 = v15;
      if (v15 == *(_DWORD *)(a1 + 416))
      {
        re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 392, 2 * *(_DWORD *)(a1 + 420));
        LODWORD(v12) = v11 % *(unsigned int *)(a1 + 416);
        int v16 = *(_DWORD *)(a1 + 424);
      }
      *(_DWORD *)(a1 + 424) = v16 + 1;
      uint64_t v17 = *(void *)(a1 + 408);
      int v18 = *(_DWORD *)(v17 + 48 * v15);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 408);
      int v18 = *(_DWORD *)(v17 + 48 * v15);
      *(_DWORD *)(a1 + 428) = v18 & 0x7FFFFFFF;
    }
    uint64_t v19 = 48 * v15;
    *(_DWORD *)(v17 + v19) = v18 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 408) + v19) = *(_DWORD *)(*(void *)(a1 + 408) + 48 * v15) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 400) + 4 * v12);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 408) + 48 * v15 + 8), a2);
    uint64_t result = 0;
    *(_OWORD *)(*(void *)(a1 + 408) + 48 * v15 + 32) = *a3;
    *(_DWORD *)(*(void *)(a1 + 400) + 4 * v12) = v15;
    ++*(_DWORD *)(a1 + 420);
    ++*(_DWORD *)(a1 + 432);
    return result;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    uint64_t v27 = v9;
    unint64_t v9 = v27;
    if (v28)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      unint64_t v9 = v27;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::Quaternion<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  uint64_t v21 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 392))
  {
    unint64_t v22 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 400)
                          + 4
                          * (((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 416)));
    if (v23 != 0x7FFFFFFF)
    {
      uint64_t v24 = *(void *)(a1 + 408);
      uint64_t v21 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v24 + 48 * v23 + 8), a2))
      {
        uint64_t v23 = *(_DWORD *)(v24 + 48 * v23) & 0x7FFFFFFF;
        if (v23 == 0x7FFFFFFF) {
          goto LABEL_27;
        }
      }
      uint64_t v21 = v23;
    }
  }
LABEL_27:
  uint64_t v25 = *(void *)(a1 + 408) + 48 * v21;
  long long v26 = *(_OWORD *)(v25 + 32);
  *(_OWORD *)(v25 + 32) = *a3;
  *a3 = v26;
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::GenericSRT<float>>(uint64_t a1, StringID *a2, long long *a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v36[0] = re::introspect<re::GenericSRT<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v36);
    unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
    if (*(void *)(a1 + 440))
    {
      unint64_t v12 = v11 % *(unsigned int *)(a1 + 464);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 448) + 4 * v12);
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 456);
        while (!re::StringID::operator==((void *)(v14 + 80 * v13 + 8), a2))
        {
          uint64_t v13 = *(_DWORD *)(v14 + 80 * v13) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
LABEL_13:
    uint64_t v15 = *(unsigned int *)(a1 + 476);
    if (v15 == 0x7FFFFFFF)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 472);
      int v16 = v15;
      if (v15 == *(_DWORD *)(a1 + 464))
      {
        re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 440, 2 * *(_DWORD *)(a1 + 468));
        LODWORD(v12) = v11 % *(unsigned int *)(a1 + 464);
        int v16 = *(_DWORD *)(a1 + 472);
      }
      *(_DWORD *)(a1 + 472) = v16 + 1;
      uint64_t v17 = *(void *)(a1 + 456);
      int v18 = *(_DWORD *)(v17 + 80 * v15);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 456);
      int v18 = *(_DWORD *)(v17 + 80 * v15);
      *(_DWORD *)(a1 + 476) = v18 & 0x7FFFFFFF;
    }
    uint64_t v19 = 80 * v15;
    *(_DWORD *)(v17 + v19) = v18 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 456) + v19) = *(_DWORD *)(*(void *)(a1 + 456) + 80 * v15) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 448) + 4 * v12);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 456) + 80 * v15 + 8), a2);
    uint64_t result = 0;
    uint64_t v21 = (_OWORD *)(*(void *)(a1 + 456) + 80 * v15);
    long long v22 = *a3;
    long long v23 = a3[2];
    v21[3] = a3[1];
    v21[4] = v23;
    void v21[2] = v22;
    *(_DWORD *)(*(void *)(a1 + 448) + 4 * v12) = v15;
    ++*(_DWORD *)(a1 + 468);
    ++*(_DWORD *)(a1 + 480);
    return result;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    uint64_t v34 = v9;
    unint64_t v9 = v34;
    if (v35)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      unint64_t v9 = v34;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::GenericSRT<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  uint64_t v24 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 440))
  {
    unint64_t v25 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    uint64_t v26 = *(unsigned int *)(*(void *)(a1 + 448)
                          + 4
                          * (((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 464)));
    if (v26 != 0x7FFFFFFF)
    {
      uint64_t v27 = *(void *)(a1 + 456);
      uint64_t v24 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v27 + 80 * v26 + 8), a2))
      {
        uint64_t v26 = *(_DWORD *)(v27 + 80 * v26) & 0x7FFFFFFF;
        if (v26 == 0x7FFFFFFF) {
          goto LABEL_27;
        }
      }
      uint64_t v24 = v26;
    }
  }
LABEL_27:
  int v28 = (_OWORD *)(*(void *)(a1 + 456) + 80 * v24);
  long long v29 = v28[2];
  long long v30 = v28[3];
  long long v31 = v28[4];
  long long v33 = a3[1];
  long long v32 = a3[2];
  void v28[2] = *a3;
  uint64_t v28[3] = v33;
  v28[4] = v32;
  a3[1] = v30;
  a3[2] = v31;
  *a3 = v29;
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::DynamicString>(uint64_t a1, const re::StringID *a2, const re::DynamicString *a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    uint64_t v20 = v9;
    unint64_t v9 = v20;
    if (v18)
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v19);
      unint64_t v9 = v20;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::DynamicString>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v17);
      }
    }
    uint64_t v21 = re::introspect<re::DynamicString>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v21);
    re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::DynamicString&>(a1 + 488, (StringID *)a2, a3);
    return 0;
  }
  uint64_t v11 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 488))
  {
    unint64_t v12 = 0xBF58476D1CE4E5B9 * ((*(void *)a2 >> 31) ^ (*(void *)a2 >> 1));
    uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 496)
                          + 4
                          * (((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 512)));
    if (v13 != 0x7FFFFFFF)
    {
      uint64_t v14 = *(void *)(a1 + 504);
      uint64_t v11 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v14 + 56 * v13 + 8), a2))
      {
        uint64_t v13 = *(_DWORD *)(v14 + 56 * v13) & 0x7FFFFFFF;
        if (v13 == 0x7FFFFFFF) {
          goto LABEL_14;
        }
      }
      uint64_t v11 = v13;
    }
  }
LABEL_14:
  uint64_t v15 = (re::DynamicString *)(*(void *)(a1 + 504) + 56 * v11);
  uint64_t v16 = *((void *)v15 + 3);
  uint64_t v15 = (re::DynamicString *)((char *)v15 + 24);
  uint64_t v21 = v16;
  *(void *)uint64_t v15 = 0;
  uint64_t v23 = *((void *)v15 + 2);
  *((void *)v15 + 2) = 0;
  uint64_t v24 = *((void *)v15 + 3);
  *((void *)v15 + 3) = 0;
  uint64_t v22 = *((void *)v15 + 1);
  *((void *)v15 + 1) = 0;
  re::DynamicString::operator=(v15, a3);
  re::DynamicString::operator=(a3, (re::DynamicString *)&v21);
  if (v21 && (v22 & 1) != 0) {
    (*(void (**)(void))(*(void *)v21 + 40))();
  }
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::SkeletalPose>(uint64_t a1, StringID *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
    }
    v38[0] = re::introspect<re::SkeletalPose>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v38);
    unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
    if (*(void *)(a1 + 536))
    {
      unint64_t v12 = v11 % *(unsigned int *)(a1 + 560);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 544) + 4 * v12);
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 552);
        while (!re::StringID::operator==((void *)(v14 + 112 * v13 + 8), a2))
        {
          uint64_t v13 = *(_DWORD *)(v14 + 112 * v13) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
LABEL_13:
    uint64_t v15 = *(unsigned int *)(a1 + 572);
    if (v15 == 0x7FFFFFFF)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 568);
      int v16 = v15;
      if (v15 == *(_DWORD *)(a1 + 560))
      {
        re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 536, 2 * *(_DWORD *)(a1 + 564));
        LODWORD(v12) = v11 % *(unsigned int *)(a1 + 560);
        int v16 = *(_DWORD *)(a1 + 568);
      }
      *(_DWORD *)(a1 + 568) = v16 + 1;
      uint64_t v17 = *(void *)(a1 + 552);
      int v18 = *(_DWORD *)(v17 + 112 * v15);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 552);
      int v18 = *(_DWORD *)(v17 + 112 * v15);
      *(_DWORD *)(a1 + 572) = v18 & 0x7FFFFFFF;
    }
    uint64_t v19 = 112 * v15;
    *(_DWORD *)(v17 + v19) = v18 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 552) + v19) = *(_DWORD *)(*(void *)(a1 + 552) + 112 * v15) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 544) + 4 * v12);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 552) + 112 * v15 + 8), a2);
    uint64_t v20 = (void *)(*(void *)(a1 + 552) + 112 * v15);
    re::StringID::StringID((re::StringID *)(v20 + 3), (const StringID *)a3);
    re::FixedArray<re::GenericSRT<float>>::FixedArray(v20 + 5, a3 + 16);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)(v20 + 8), (uint64_t *)(a3 + 40));
    uint64_t v21 = *(void *)(a3 + 80);
    v20[13] = v21;
    if (v21) {
      id v22 = (id)(v21 + 8);
    }
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 + 544) + 4 * v12) = v15;
    ++*(_DWORD *)(a1 + 564);
    ++*(_DWORD *)(a1 + 576);
    return result;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    int v36 = v9;
    unint64_t v9 = v36;
    if (v37)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      unint64_t v9 = v36;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::SkeletalPose>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  uint64_t v24 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 536))
  {
    unint64_t v25 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    uint64_t v26 = *(unsigned int *)(*(void *)(a1 + 544)
                          + 4
                          * (((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 560)));
    if (v26 != 0x7FFFFFFF)
    {
      uint64_t v27 = *(void *)(a1 + 552);
      uint64_t v24 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v27 + 112 * v26 + 8), a2))
      {
        uint64_t v26 = *(_DWORD *)(v27 + 112 * v26) & 0x7FFFFFFF;
        if (v26 == 0x7FFFFFFF) {
          goto LABEL_29;
        }
      }
      uint64_t v24 = v26;
    }
  }
LABEL_29:
  uint64_t v28 = *(void *)(a1 + 552) + 112 * v24;
  long long v29 = (unint64_t *)(v28 + 24);
  re::StringID::StringID((re::StringID *)v38, (const StringID *)(v28 + 24));
  long long v30 = (void *)(v28 + 40);
  re::FixedArray<re::GenericSRT<float>>::FixedArray(v39, v28 + 40);
  uint64_t v31 = v28 + 64;
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v40, (uint64_t *)(v28 + 64));
  uint64_t v34 = *(void *)(v28 + 104);
  long long v33 = (uint64_t *)(v28 + 104);
  uint64_t v32 = v34;
  uint64_t v41 = v34;
  if (v34) {
    id v35 = (id)(v32 + 8);
  }
  re::StringID::operator=(v29, (uint64_t *)a3);
  re::FixedArray<re::GenericSRT<float>>::operator=(v30, a3 + 16);
  re::DynamicArray<BOOL>::operator=(v31, (uint64_t *)(a3 + 40));
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v33, *(void *)(a3 + 80));
  re::StringID::operator=((unint64_t *)a3, v38);
  re::FixedArray<re::GenericSRT<float>>::operator=((void *)(a3 + 16), (uint64_t)v39);
  re::DynamicArray<BOOL>::operator=(a3 + 40, v40);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a3 + 80), v41);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v38);
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::DynamicArray<float>>(uint64_t a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    {
      re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v27);
    }
    v31[0] = re::introspect<re::DynamicArray<float>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v31);
    unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
    if (*(void *)(a1 + 584))
    {
      unint64_t v12 = v11 % *(unsigned int *)(a1 + 608);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 592) + 4 * v12);
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 600);
        while (!re::StringID::operator==((void *)(v14 + (v13 << 6) + 8), a2))
        {
          uint64_t v13 = *(_DWORD *)(v14 + (v13 << 6)) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
LABEL_13:
    uint64_t v15 = *(unsigned int *)(a1 + 620);
    if (v15 == 0x7FFFFFFF)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 616);
      int v16 = v15;
      if (v15 == *(_DWORD *)(a1 + 608))
      {
        re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 584, 2 * *(_DWORD *)(a1 + 612));
        LODWORD(v12) = v11 % *(unsigned int *)(a1 + 608);
        int v16 = *(_DWORD *)(a1 + 616);
      }
      *(_DWORD *)(a1 + 616) = v16 + 1;
      uint64_t v17 = *(void *)(a1 + 600);
      int v18 = *(_DWORD *)(v17 + (v15 << 6));
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 600);
      int v18 = *(_DWORD *)(v17 + (v15 << 6));
      *(_DWORD *)(a1 + 6re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v18 & 0x7FFFFFFF;
    }
    uint64_t v19 = v15 << 6;
    *(_DWORD *)(v17 + v19) = v18 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 600) + v19) = *(_DWORD *)(*(void *)(a1 + 600) + (v15 << 6)) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 592) + 4 * v12);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 600) + (v15 << 6) + 8), a2);
    re::DynamicArray<float>::DynamicArray(*(void *)(a1 + 600) + (v15 << 6) + 24, a3);
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 + 592) + 4 * v12) = v15;
    ++*(_DWORD *)(a1 + 612);
    ++*(_DWORD *)(a1 + 624);
    return result;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    uint64_t v28 = v9;
    unint64_t v9 = v28;
    if (v29)
    {
      re::introspect<re::DynamicArray<float>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<float>>::get(0, v30);
      unint64_t v9 = v28;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::DynamicArray<float>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  uint64_t v21 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 584))
  {
    unint64_t v22 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 592)
                          + 4
                          * (((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 608)));
    if (v23 != 0x7FFFFFFF)
    {
      uint64_t v24 = *(void *)(a1 + 600);
      uint64_t v21 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v24 + (v23 << 6) + 8), a2))
      {
        uint64_t v23 = *(_DWORD *)(v24 + (v23 << 6)) & 0x7FFFFFFF;
        if (v23 == 0x7FFFFFFF) {
          goto LABEL_27;
        }
      }
      uint64_t v21 = v23;
    }
  }
LABEL_27:
  unint64_t v25 = (void *)(*(void *)(a1 + 600) + (v21 << 6));
  uint64_t v26 = v25[3];
  v25 += 3;
  v31[0] = v26;
  *unint64_t v25 = 0;
  v31[1] = v25[1];
  v25[1] = 0;
  void v31[2] = v25[2];
  v25[2] = 0;
  uint64_t v33 = v25[4];
  v25[4] = 0;
  ++*((_DWORD *)v25 + 6);
  int v32 = 1;
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v25, (uint64_t)a3);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a3, (uint64_t)v31);
  if (v31[0] && v33) {
    (*(void (**)(void))(*(void *)v31[0] + 40))();
  }
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::DynamicArray<re::Vector3<float>>>(uint64_t a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    {
      re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
    }
    v29[0] = re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v29);
    unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
    if (*(void *)(a1 + 632))
    {
      unint64_t v12 = v11 % *(unsigned int *)(a1 + 656);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 640) + 4 * v12);
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 648);
        while (!re::StringID::operator==((void *)(v14 + (v13 << 6) + 8), a2))
        {
          uint64_t v13 = *(_DWORD *)(v14 + (v13 << 6)) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
LABEL_13:
    uint64_t v15 = *(unsigned int *)(a1 + 668);
    if (v15 == 0x7FFFFFFF)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 664);
      int v16 = v15;
      if (v15 == *(_DWORD *)(a1 + 656))
      {
        re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 632, 2 * *(_DWORD *)(a1 + 660));
        LODWORD(v12) = v11 % *(unsigned int *)(a1 + 656);
        int v16 = *(_DWORD *)(a1 + 664);
      }
      *(_DWORD *)(a1 + 664) = v16 + 1;
      uint64_t v17 = *(void *)(a1 + 648);
      int v18 = *(_DWORD *)(v17 + (v15 << 6));
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 648);
      int v18 = *(_DWORD *)(v17 + (v15 << 6));
      *(_DWORD *)(a1 + 668) = v18 & 0x7FFFFFFF;
    }
    uint64_t v19 = v15 << 6;
    *(_DWORD *)(v17 + v19) = v18 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 648) + v19) = *(_DWORD *)(*(void *)(a1 + 648) + (v15 << 6)) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 640) + 4 * v12);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 648) + (v15 << 6) + 8), a2);
    re::DynamicArray<re::Vector3<float>>::DynamicArray(*(void *)(a1 + 648) + (v15 << 6) + 24, a3);
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 + 640) + 4 * v12) = v15;
    ++*(_DWORD *)(a1 + 660);
    ++*(_DWORD *)(a1 + 672);
    return result;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    uint64_t v27 = v9;
    unint64_t v9 = v27;
    if (v28)
    {
      re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(0);
      unint64_t v9 = v27;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::DynamicArray<re::Vector3<float>>>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  uint64_t v21 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 632))
  {
    unint64_t v22 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 640)
                          + 4
                          * (((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 656)));
    if (v23 != 0x7FFFFFFF)
    {
      uint64_t v24 = *(void *)(a1 + 648);
      uint64_t v21 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v24 + (v23 << 6) + 8), a2))
      {
        uint64_t v23 = *(_DWORD *)(v24 + (v23 << 6)) & 0x7FFFFFFF;
        if (v23 == 0x7FFFFFFF) {
          goto LABEL_27;
        }
      }
      uint64_t v21 = v23;
    }
  }
LABEL_27:
  unint64_t v25 = (void *)(*(void *)(a1 + 648) + (v21 << 6));
  uint64_t v26 = v25[3];
  v25 += 3;
  v29[0] = v26;
  *unint64_t v25 = 0;
  v29[1] = v25[1];
  v25[1] = 0;
  uint64_t v29[2] = v25[2];
  v25[2] = 0;
  uint64_t v31 = v25[4];
  v25[4] = 0;
  ++*((_DWORD *)v25 + 6);
  int v30 = 1;
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v25, (uint64_t)a3);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a3, (uint64_t)v29);
  if (v29[0] && v31) {
    (*(void (**)(void))(*(void *)v29[0] + 40))();
  }
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<long long>(uint64_t a1, StringID *a2, void *a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v27);
    }
    uint64_t v31 = re::introspect<long long>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v31);
    unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
    if (*(void *)(a1 + 680))
    {
      unint64_t v12 = v11 % *(unsigned int *)(a1 + 704);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 688) + 4 * v12);
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 696);
        while (!re::StringID::operator==((void *)(v14 + 32 * v13 + 8), a2))
        {
          uint64_t v13 = *(_DWORD *)(v14 + 32 * v13) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
LABEL_13:
    uint64_t v15 = *(unsigned int *)(a1 + 716);
    if (v15 == 0x7FFFFFFF)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 712);
      int v16 = v15;
      if (v15 == *(_DWORD *)(a1 + 704))
      {
        re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 680, 2 * *(_DWORD *)(a1 + 708));
        LODWORD(v12) = v11 % *(unsigned int *)(a1 + 704);
        int v16 = *(_DWORD *)(a1 + 712);
      }
      *(_DWORD *)(a1 + 712) = v16 + 1;
      uint64_t v17 = *(void *)(a1 + 696);
      int v18 = *(_DWORD *)(v17 + 32 * v15);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 696);
      int v18 = *(_DWORD *)(v17 + 32 * v15);
      *(_DWORD *)(a1 + 716) = v18 & 0x7FFFFFFF;
    }
    uint64_t v19 = 32 * v15;
    *(_DWORD *)(v17 + v19) = v18 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 696) + v19) = *(_DWORD *)(*(void *)(a1 + 696) + 32 * v15) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 688) + 4 * v12);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 696) + 32 * v15 + 8), a2);
    uint64_t result = 0;
    *(void *)(*(void *)(a1 + 696) + 32 * v15 + 24) = *a3;
    *(_DWORD *)(*(void *)(a1 + 688) + 4 * v12) = v15;
    ++*(_DWORD *)(a1 + 708);
    ++*(_DWORD *)(a1 + 720);
    return result;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    int v28 = v9;
    unint64_t v9 = v28;
    if (v29)
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v30);
      unint64_t v9 = v28;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<long long>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  uint64_t v21 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 680))
  {
    unint64_t v22 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 688)
                          + 4
                          * (((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 704)));
    if (v23 != 0x7FFFFFFF)
    {
      uint64_t v24 = *(void *)(a1 + 696);
      uint64_t v21 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v24 + 32 * v23 + 8), a2))
      {
        uint64_t v23 = *(_DWORD *)(v24 + 32 * v23) & 0x7FFFFFFF;
        if (v23 == 0x7FFFFFFF) {
          goto LABEL_27;
        }
      }
      uint64_t v21 = v23;
    }
  }
LABEL_27:
  uint64_t v25 = *(void *)(a1 + 696) + 32 * v21;
  uint64_t v26 = *(void *)(v25 + 24);
  *(void *)(v25 + 24) = *a3;
  *a3 = v26;
  return 1;
}

uint64_t re::KeyValueStore::addAndSwapValue<re::BlendShapeWeights>(uint64_t a1, StringID *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 8;
  unint64_t v7 = (const re::IntrospectionBase **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 8, a2);
  if (!v7)
  {
LABEL_5:
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
    }
    v36[0] = re::introspect<re::BlendShapeWeights>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, v36);
    unint64_t v10 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
    if (*(void *)(a1 + 728))
    {
      unint64_t v12 = v11 % *(unsigned int *)(a1 + 752);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 736) + 4 * v12);
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 744);
        while (!re::StringID::operator==((void *)(v14 + 56 * v13 + 8), a2))
        {
          uint64_t v13 = *(_DWORD *)(v14 + 56 * v13) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        return 0;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
LABEL_13:
    uint64_t v15 = *(unsigned int *)(a1 + 764);
    if (v15 == 0x7FFFFFFF)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 760);
      int v16 = v15;
      if (v15 == *(_DWORD *)(a1 + 752))
      {
        re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 728, 2 * *(_DWORD *)(a1 + 756));
        LODWORD(v12) = v11 % *(unsigned int *)(a1 + 752);
        int v16 = *(_DWORD *)(a1 + 760);
      }
      *(_DWORD *)(a1 + 76objc_initWeak(location, 0) = v16 + 1;
      uint64_t v17 = *(void *)(a1 + 744);
      int v18 = *(_DWORD *)(v17 + 56 * v15);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 744);
      int v18 = *(_DWORD *)(v17 + 56 * v15);
      *(_DWORD *)(a1 + 764) = v18 & 0x7FFFFFFF;
    }
    uint64_t v19 = 56 * v15;
    *(_DWORD *)(v17 + v19) = v18 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 744) + v19) = *(_DWORD *)(*(void *)(a1 + 744) + 56 * v15) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 736) + 4 * v12);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 744) + 56 * v15 + 8), a2);
    uint64_t v20 = *(void *)(a1 + 744) + 56 * v15;
    re::FixedArray<float>::FixedArray((uint64_t *)(v20 + 24), (uint64_t)a3);
    uint64_t v21 = a3[3];
    *(void *)(v20 + 48) = v21;
    if (v21) {
      id v22 = (id)(v21 + 8);
    }
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 + 736) + 4 * v12) = v15;
    ++*(_DWORD *)(a1 + 756);
    ++*(_DWORD *)(a1 + 768);
    return result;
  }
  unint64_t v8 = v7;
  unint64_t v9 = *v7;
  {
    uint64_t v34 = v9;
    unint64_t v9 = v34;
    if (v35)
    {
      re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
      unint64_t v9 = v34;
    }
  }
  if (v9 != (const re::IntrospectionBase *)re::introspect<re::BlendShapeWeights>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue((re::KeyValueStore *)a1, *v8, (const re::StringID *)a2);
    goto LABEL_5;
  }
  uint64_t v24 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 728))
  {
    unint64_t v25 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    uint64_t v26 = *(unsigned int *)(*(void *)(a1 + 736)
                          + 4
                          * (((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31))
                           % *(unsigned int *)(a1 + 752)));
    if (v26 != 0x7FFFFFFF)
    {
      uint64_t v27 = *(void *)(a1 + 744);
      uint64_t v24 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v27 + 56 * v26 + 8), a2))
      {
        uint64_t v26 = *(_DWORD *)(v27 + 56 * v26) & 0x7FFFFFFF;
        if (v26 == 0x7FFFFFFF) {
          goto LABEL_29;
        }
      }
      uint64_t v24 = v26;
    }
  }
LABEL_29:
  uint64_t v28 = *(void *)(a1 + 744) + 56 * v24;
  int v29 = (uint64_t *)(v28 + 24);
  re::FixedArray<float>::FixedArray(v36, v28 + 24);
  uint64_t v32 = *(void *)(v28 + 48);
  uint64_t v31 = (uint64_t *)(v28 + 48);
  uint64_t v30 = v32;
  uint64_t v37 = v32;
  if (v32) {
    id v33 = (id)(v30 + 8);
  }
  re::FixedArray<float>::operator=(v29, (uint64_t)a3);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v31, a3[3]);
  re::FixedArray<float>::operator=(a3, (uint64_t)v36);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a3 + 3, v37);
  re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v36);
  return 1;
}

uint64_t re::KeyValueStore::getValue(re::KeyValueStore *this, const re::IntrospectionBase *a2, const re::StringID *a3)
{
  unint64_t v4 = (char *)a2;
  if (!a2)
  {
    uint64_t v6 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 8, a3);
    if (!v6) {
      return 0;
    }
    unint64_t v4 = *v6;
  }
  unint64_t v7 = &off_268773000;
  {
    unint64_t v7 = &off_268773000;
    if (v25)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v26);
      unint64_t v7 = &off_268773000;
    }
  }
  if (v4 == (char *)v7[187])
  {
    uint64_t v17 = (char *)this + 56;
    int v18 = a3;
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v17, v18);
  }
  unint64_t v8 = 0x268771000uLL;
  {
    unint64_t v8 = 0x268771000;
    if (v27)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v28);
      unint64_t v8 = 0x268771000;
    }
  }
  if (v4 == *(char **)(v8 + 3632))
  {
    uint64_t v17 = (char *)this + 104;
    int v18 = a3;
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v17, v18);
  }
  unint64_t v9 = 0x268771000uLL;
  {
    unint64_t v9 = 0x268771000;
    if (v29)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v30);
      unint64_t v9 = 0x268771000;
    }
  }
  if (v4 == *(char **)(v9 + 3648))
  {
    uint64_t v17 = (char *)this + 152;
    int v18 = a3;
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v17, v18);
  }
  unint64_t v10 = &off_268773000;
  {
    unint64_t v10 = &off_268773000;
    if (v31)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v32);
      unint64_t v10 = &off_268773000;
    }
  }
  if (v4 == (char *)v10[267])
  {
    uint64_t v17 = (char *)this + 200;
    int v18 = a3;
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v17, v18);
  }
  unint64_t v11 = 0x268771000uLL;
  {
    unint64_t v11 = 0x268771000;
    if (v33)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      unint64_t v11 = 0x268771000;
    }
  }
  if (v4 == *(char **)(v11 + 3664))
  {
    uint64_t v17 = (char *)this + 248;
    int v18 = a3;
    return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v17, v18);
  }
  unint64_t v12 = 0x268771000uLL;
  {
    unint64_t v12 = 0x268771000;
    if (v34)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      unint64_t v12 = 0x268771000;
    }
  }
  if (v4 == *(char **)(v12 + 3680))
  {
    uint64_t v19 = (char *)this + 296;
    uint64_t v20 = a3;
    return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v19, v20);
  }
  unint64_t v13 = 0x268771000uLL;
  {
    unint64_t v13 = 0x268771000;
    if (v35)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      unint64_t v13 = 0x268771000;
    }
  }
  if (v4 == *(char **)(v13 + 3696))
  {
    uint64_t v19 = (char *)this + 344;
    uint64_t v20 = a3;
    return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v19, v20);
  }
  unint64_t v14 = 0x268771000uLL;
  {
    unint64_t v14 = 0x268771000;
    if (v36)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      unint64_t v14 = 0x268771000;
    }
  }
  if (v4 == *(char **)(v14 + 3712))
  {
    uint64_t v19 = (char *)this + 392;
    uint64_t v20 = a3;
    return re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v19, v20);
  }
  unint64_t v15 = 0x268771000uLL;
  {
    unint64_t v15 = 0x268771000;
    if (v37)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      unint64_t v15 = 0x268771000;
    }
  }
  if (v4 == *(char **)(v15 + 3888))
  {
    return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 440, a3);
  }
  else
  {
    if (v4 == (char *)re::introspect<re::DynamicString>())
    {
      uint64_t v21 = (char *)this + 488;
      id v22 = a3;
      return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v21, v22);
    }
    if (v4 == (char *)re::introspect<re::SkeletalPose>())
    {
      return re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 536, a3);
    }
    else
    {
      if (v4 == re::introspect<re::DynamicArray<float>>())
      {
        uint64_t v23 = (char *)this + 584;
        uint64_t v24 = a3;
      }
      else
      {
        if (v4 != re::introspect<re::DynamicArray<re::Vector3<float>>>())
        {
          if (v4 != re::introspect<long long>())
          {
            if (v4 != (char *)re::introspect<re::BlendShapeWeights>()) {
              return 0;
            }
            uint64_t v21 = (char *)this + 728;
            id v22 = a3;
            return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v21, v22);
          }
          uint64_t v17 = (char *)this + 680;
          int v18 = a3;
          return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v17, v18);
        }
        uint64_t v23 = (char *)this + 632;
        uint64_t v24 = a3;
      }
      return re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v23, v24);
    }
  }
}

uint64_t re::KeyValueStore::typeInfo(re::KeyValueStore *this, const re::StringID *a2)
{
  if (!*((void *)this + 1)) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*(void *)a2 >> 31) ^ (*(void *)a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*((void *)this + 2)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *((unsigned int *)this + 8)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 3);
  while (1)
  {
    uint64_t v6 = v5 + 32 * v4;
    if (re::StringID::operator==((void *)(v6 + 8), a2)) {
      break;
    }
    uint64_t v4 = *(_DWORD *)(v5 + 32 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return *(void *)(v6 + 24);
}

void re::KeyValueStore::removeValue(re::KeyValueStore *this, const re::IntrospectionBase *a2, const re::StringID *a3)
{
  uint64_t v6 = &off_268773000;
  {
    uint64_t v6 = &off_268773000;
    if (v21)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v22);
      uint64_t v6 = &off_268773000;
    }
  }
  if (v6[187] == (char **)a2)
  {
    unint64_t v15 = (char *)this + 56;
    int v16 = a3;
    goto LABEL_28;
  }
  unint64_t v7 = 0x268771000uLL;
  {
    unint64_t v7 = 0x268771000;
    if (v23)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v24);
      unint64_t v7 = 0x268771000;
    }
  }
  if (*(const re::IntrospectionBase **)(v7 + 3632) == a2)
  {
    unint64_t v15 = (char *)this + 104;
    int v16 = a3;
    goto LABEL_28;
  }
  unint64_t v8 = 0x268771000uLL;
  {
    unint64_t v8 = 0x268771000;
    if (v25)
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v26);
      unint64_t v8 = 0x268771000;
    }
  }
  if (*(const re::IntrospectionBase **)(v8 + 3648) == a2)
  {
    unint64_t v15 = (char *)this + 152;
    int v16 = a3;
    goto LABEL_28;
  }
  unint64_t v9 = &off_268773000;
  {
    unint64_t v9 = &off_268773000;
    if (v27)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v28);
      unint64_t v9 = &off_268773000;
    }
  }
  if (v9[267] == (char **)a2)
  {
    unint64_t v15 = (char *)this + 200;
    int v16 = a3;
    goto LABEL_28;
  }
  unint64_t v10 = 0x268771000uLL;
  {
    unint64_t v10 = 0x268771000;
    if (v29)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      unint64_t v10 = 0x268771000;
    }
  }
  if (*(const re::IntrospectionBase **)(v10 + 3664) == a2)
  {
    unint64_t v15 = (char *)this + 248;
    int v16 = a3;
    goto LABEL_28;
  }
  unint64_t v11 = 0x268771000uLL;
  {
    unint64_t v11 = 0x268771000;
    if (v30)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      unint64_t v11 = 0x268771000;
    }
  }
  if (*(const re::IntrospectionBase **)(v11 + 3680) == a2)
  {
    uint64_t v17 = (char *)this + 296;
    int v18 = a3;
    goto LABEL_43;
  }
  unint64_t v12 = 0x268771000uLL;
  {
    unint64_t v12 = 0x268771000;
    if (v31)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      unint64_t v12 = 0x268771000;
    }
  }
  if (*(const re::IntrospectionBase **)(v12 + 3696) == a2)
  {
    uint64_t v17 = (char *)this + 344;
    int v18 = a3;
    goto LABEL_43;
  }
  unint64_t v13 = 0x268771000uLL;
  {
    unint64_t v13 = 0x268771000;
    if (v32)
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      unint64_t v13 = 0x268771000;
    }
  }
  if (*(const re::IntrospectionBase **)(v13 + 3712) == a2)
  {
    uint64_t v17 = (char *)this + 392;
    int v18 = a3;
LABEL_43:
    re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v17, v18);
    return;
  }
  unint64_t v14 = 0x268771000uLL;
  {
    unint64_t v14 = 0x268771000;
    if (v33)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      unint64_t v14 = 0x268771000;
    }
  }
  if (*(const re::IntrospectionBase **)(v14 + 3888) == a2)
  {
    re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 440, a3);
  }
  else if ((const re::IntrospectionBase *)re::introspect<re::DynamicString>() == a2)
  {
    re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 488, a3);
  }
  else
  {
    if ((const re::IntrospectionBase *)re::introspect<re::SkeletalPose>() != a2)
    {
      if (re::introspect<re::DynamicArray<float>>() == (char *)a2)
      {
        uint64_t v19 = (char *)this + 584;
        uint64_t v20 = a3;
      }
      else
      {
        if (re::introspect<re::DynamicArray<re::Vector3<float>>>() != (char *)a2)
        {
          if (re::introspect<long long>() != (char *)a2)
          {
            if ((const re::IntrospectionBase *)re::introspect<re::BlendShapeWeights>() == a2)
            {
              re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 728, a3);
            }
            return;
          }
          unint64_t v15 = (char *)this + 680;
          int v16 = a3;
LABEL_28:
          re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v15, v16);
          return;
        }
        uint64_t v19 = (char *)this + 632;
        uint64_t v20 = a3;
      }
      re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v19, v20);
      return;
    }
    re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)this + 536, a3);
  }
}

void *re::allocInfo_KeyValueStore(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89528))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89A28, "KeyValueStore");
    __cxa_guard_release(&qword_26AF89528);
  }
  return &unk_26AF89A28;
}

void re::initInfo_KeyValueStore(re *this, re::IntrospectionBase *a2)
{
  uint64_t v292 = 0xB1B2D880730A6B1ELL;
  v293 = "KeyValueStore";
  re::StringID::destroyString((re::StringID *)&v292);
  *((_OWORD *)this + 2) = v285;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89520, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF89520);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_KeyValueStoreInterface((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "KeyValueStoreInterface";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF89B18 = v7;
      unint64_t v9 = re::introspectionAllocator((re *)v7);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89548, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89548))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF895C8);
        qword_26AF895C8 = (uint64_t)&unk_26E700EE0;
        __cxa_guard_release(&qword_26AF89548);
      }
      if ((_MergedGlobals_254 & 1) == 0)
      {
        unint64_t v10 = re::IntrospectionInfo<re::StringID>::get(1, v8);
        unint64_t v12 = re::introspect_BOOL((re *)1, v11);
        if ((_MergedGlobals_254 & 1) == 0)
        {
          uint64_t v13 = (uint64_t)v12;
          _MergedGlobals_254 = 1;
          int v14 = v12[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF895C8, 0);
          qword_26AF895D8 = 0x3000000007;
          dword_26AF895E0 = v14;
          word_26AF895E4 = 0;
          *(void *)&xmmword_26AF895E8 = 0;
          *((void *)&xmmword_26AF895E8 + 1) = 0xFFFFFFFFLL;
          qword_26AF895F8 = (uint64_t)v10;
          unk_26AF89600 = 0;
          qword_26AF89608 = v13;
          unk_26AF89610 = 0;
          qword_26AF895C8 = (uint64_t)&unk_26E700EE0;
          re::IntrospectionRegistry::add(v15, v16);
          re::getPrettyTypeName((re *)&qword_26AF895C8, (const re::IntrospectionBase *)&v292);
          if (v293) {
            uint64_t v17 = v294;
          }
          else {
            uint64_t v17 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v18 = v10[2];
          long long v287 = *(_OWORD *)(v13 + 32);
          long long v288 = v18;
          uint64_t v19 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v19)
          {
            uint64_t v20 = *v19;
            *((void *)&v286 + 1) = v20;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            int v21 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v21)
            {
              uint64_t v22 = *v21;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              int v23 = (void *)v292;
              uint64_t v22 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v23
              || (uint64_t v24 = *v299,
                  uint64_t v292 = v22,
                  v293 = v24,
                  LODWORD(v294) = -1,
                  (int v25 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v25)
            {
              long long v297 = v288;
              v295 = v23;
              uint64_t v296 = v22;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v26);
          }
          xmmword_26AF895E8 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "BOOLValues";
      *(void *)(v27 + 16) = &qword_26AF895C8;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x3800000001;
      *(_DWORD *)(v27 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF89B20 = v27;
      int v29 = re::introspectionAllocator((re *)v27);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89550, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89550))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF89618);
        qword_26AF89618 = (uint64_t)&unk_26E700F80;
        __cxa_guard_release(&qword_26AF89550);
      }
      if ((byte_26AF89511 & 1) == 0)
      {
        int v30 = re::IntrospectionInfo<re::StringID>::get(1, v28);
        int v32 = re::introspect_float((re *)1, v31);
        if ((byte_26AF89511 & 1) == 0)
        {
          uint64_t v33 = (uint64_t)v32;
          byte_26AF89511 = 1;
          int v34 = v32[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF89618, 0);
          qword_26AF89628 = 0x3000000007;
          dword_26AF89630 = v34;
          word_26AF89634 = 0;
          *(void *)&xmmword_26AF89638 = 0;
          *((void *)&xmmword_26AF89638 + 1) = 0xFFFFFFFFLL;
          qword_26AF89648 = (uint64_t)v30;
          unk_26AF89650 = 0;
          qword_26AF89658 = v33;
          unk_26AF89660 = 0;
          qword_26AF89618 = (uint64_t)&unk_26E700F80;
          re::IntrospectionRegistry::add(v35, v36);
          re::getPrettyTypeName((re *)&qword_26AF89618, (const re::IntrospectionBase *)&v292);
          if (v293) {
            int v37 = v294;
          }
          else {
            int v37 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v38 = v30[2];
          long long v287 = *(_OWORD *)(v33 + 32);
          long long v288 = v38;
          uint64_t v39 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v39)
          {
            uint64_t v40 = *v39;
            *((void *)&v286 + 1) = v40;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            uint64_t v41 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v41)
            {
              uint64_t v42 = *v41;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              unint64_t v43 = (void *)v292;
              uint64_t v42 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v43
              || (unint64_t v44 = *v299,
                  uint64_t v292 = v42,
                  v293 = v44,
                  LODWORD(v294) = -1,
                  (unint64_t v45 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v45)
            {
              long long v297 = v288;
              v295 = v43;
              uint64_t v296 = v42;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v46);
          }
          xmmword_26AF89638 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + 8) = "floatValues";
      *(void *)(v47 + 16) = &qword_26AF89618;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0x6800000002;
      *(_DWORD *)(v47 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v47 + 48) = 0;
      *(void *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26AF89B28 = v47;
      unint64_t v49 = re::introspectionAllocator((re *)v47);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89558, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89558))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF89668);
        qword_26AF89668 = (uint64_t)&unk_26E701020;
        __cxa_guard_release(&qword_26AF89558);
      }
      if ((byte_26AF89512 & 1) == 0)
      {
        uint64_t v50 = re::IntrospectionInfo<re::StringID>::get(1, v48);
        uint64_t v52 = re::introspect_double((re *)1, v51);
        if ((byte_26AF89512 & 1) == 0)
        {
          uint64_t v53 = (uint64_t)v52;
          byte_26AF89512 = 1;
          int v54 = v52[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF89668, 0);
          qword_26AF89678 = 0x3000000007;
          dword_26AF89680 = v54;
          word_26AF89684 = 0;
          *(void *)&xmmword_26AF89688 = 0;
          *((void *)&xmmword_26AF89688 + 1) = 0xFFFFFFFFLL;
          qword_26AF89698 = (uint64_t)v50;
          unk_26AF896A0 = 0;
          qword_26AF896A8 = v53;
          unk_26AF896B0 = 0;
          qword_26AF89668 = (uint64_t)&unk_26E701020;
          re::IntrospectionRegistry::add(v55, v56);
          re::getPrettyTypeName((re *)&qword_26AF89668, (const re::IntrospectionBase *)&v292);
          if (v293) {
            uint64_t v57 = v294;
          }
          else {
            uint64_t v57 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v58 = v50[2];
          long long v287 = *(_OWORD *)(v53 + 32);
          long long v288 = v58;
          uint64_t v59 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v59)
          {
            uint64_t v60 = *v59;
            *((void *)&v286 + 1) = v60;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            unint64_t v61 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v61)
            {
              uint64_t v62 = *v61;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              uint64_t v63 = (void *)v292;
              uint64_t v62 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v63
              || (uint64_t v64 = *v299,
                  uint64_t v292 = v62,
                  v293 = v64,
                  LODWORD(v294) = -1,
                  (uint64_t v65 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v65)
            {
              long long v297 = v288;
              v295 = v63;
              uint64_t v296 = v62;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v66);
          }
          xmmword_26AF89688 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v67 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v67 = 1;
      *(void *)(v67 + 8) = "doubleValues";
      *(void *)(v67 + 16) = &qword_26AF89668;
      *(void *)(v67 + 24) = 0;
      *(void *)(v67 + 32) = 0x9800000003;
      *(_DWORD *)(v67 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v67 + 48) = 0;
      *(void *)(v67 + 56) = 0;
      *(_DWORD *)(v67 + 64) = 0;
      qword_26AF89B30 = v67;
      uint64_t v69 = re::introspectionAllocator((re *)v67);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89560, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89560))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF896B8);
        qword_26AF896B8 = (uint64_t)&unk_26E7010C0;
        __cxa_guard_release(&qword_26AF89560);
      }
      if ((byte_26AF89513 & 1) == 0)
      {
        int v70 = re::IntrospectionInfo<re::StringID>::get(1, v68);
        int v72 = re::introspect_int((re *)1, v71);
        if ((byte_26AF89513 & 1) == 0)
        {
          uint64_t v73 = (uint64_t)v72;
          byte_26AF89513 = 1;
          int v74 = v72[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF896B8, 0);
          qword_26AF896C8 = 0x3000000007;
          dword_26AF896D0 = v74;
          word_26AF896D4 = 0;
          *(void *)&xmmword_26AF896D8 = 0;
          *((void *)&xmmword_26AF896D8 + 1) = 0xFFFFFFFFLL;
          qword_26AF896E8 = (uint64_t)v70;
          unk_26AF896F0 = 0;
          qword_26AF896F8 = v73;
          unk_26AF89700 = 0;
          qword_26AF896B8 = (uint64_t)&unk_26E7010C0;
          re::IntrospectionRegistry::add(v75, v76);
          re::getPrettyTypeName((re *)&qword_26AF896B8, (const re::IntrospectionBase *)&v292);
          if (v293) {
            unint64_t v77 = v294;
          }
          else {
            unint64_t v77 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v78 = v70[2];
          long long v287 = *(_OWORD *)(v73 + 32);
          long long v288 = v78;
          unint64_t v79 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v79)
          {
            uint64_t v80 = *v79;
            *((void *)&v286 + 1) = v80;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            uint64_t v81 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v81)
            {
              uint64_t v82 = *v81;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              unint64_t v83 = (void *)v292;
              uint64_t v82 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v83
              || (uint64_t v84 = *v299,
                  uint64_t v292 = v82,
                  v293 = v84,
                  LODWORD(v294) = -1,
                  (uint64_t v85 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v85)
            {
              long long v297 = v288;
              v295 = v83;
              uint64_t v296 = v82;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v86);
          }
          xmmword_26AF896D8 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v87 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v69 + 32))(v69, 72, 8);
      *(_DWORD *)uint64_t v87 = 1;
      *(void *)(v87 + 8) = "intValues";
      *(void *)(v87 + 16) = &qword_26AF896B8;
      *(void *)(v87 + 24) = 0;
      *(void *)(v87 + 32) = 0xC800000004;
      *(_DWORD *)(v87 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v87 + 48) = 0;
      *(void *)(v87 + 56) = 0;
      *(_DWORD *)(v87 + 64) = 0;
      qword_26AF89B38 = v87;
      int v89 = re::introspectionAllocator((re *)v87);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89568, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89568))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF89708);
        qword_26AF89708 = (uint64_t)&unk_26E701160;
        __cxa_guard_release(&qword_26AF89568);
      }
      if ((byte_26AF89514 & 1) == 0)
      {
        uint64_t v90 = re::IntrospectionInfo<re::StringID>::get(1, v88);
        uint64_t v91 = re::introspect_Vector2F((re::IntrospectionBase **)1);
        if ((byte_26AF89514 & 1) == 0)
        {
          uint64_t v92 = v91;
          byte_26AF89514 = 1;
          int v93 = *(_DWORD *)(v91 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF89708, 0);
          qword_26AF89718 = 0x3000000007;
          dword_26AF89720 = v93;
          word_26AF89724 = 0;
          *(void *)&xmmword_26AF89728 = 0;
          *((void *)&xmmword_26AF89728 + 1) = 0xFFFFFFFFLL;
          qword_26AF89738 = (uint64_t)v90;
          qword_26AF89740 = 0;
          qword_26AF89748 = v92;
          qword_26AF89750 = 0;
          qword_26AF89708 = (uint64_t)&unk_26E701160;
          re::IntrospectionRegistry::add(v94, v95);
          re::getPrettyTypeName((re *)&qword_26AF89708, (const re::IntrospectionBase *)&v292);
          if (v293) {
            unint64_t v96 = v294;
          }
          else {
            unint64_t v96 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v97 = v90[2];
          long long v287 = *(_OWORD *)(v92 + 32);
          long long v288 = v97;
          uint64_t v98 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v98)
          {
            uint64_t v99 = *v98;
            *((void *)&v286 + 1) = v99;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            unint64_t v100 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v100)
            {
              uint64_t v101 = *v100;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              uint64_t v102 = (void *)v292;
              uint64_t v101 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v102
              || (uint64_t v103 = *v299,
                  uint64_t v292 = v101,
                  v293 = v103,
                  LODWORD(v294) = -1,
                  (int v104 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v104)
            {
              long long v297 = v288;
              v295 = v102;
              uint64_t v296 = v101;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v105);
          }
          xmmword_26AF89728 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v106 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v89 + 32))(v89, 72, 8);
      *(_DWORD *)uint64_t v106 = 1;
      *(void *)(v106 + 8) = "Vector2FValues";
      *(void *)(v106 + 16) = &qword_26AF89708;
      *(void *)(v106 + 24) = 0;
      *(void *)(v106 + 32) = 0xF800000005;
      *(_DWORD *)(v106 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v106 + 48) = 0;
      *(void *)(v106 + 56) = 0;
      *(_DWORD *)(v106 + 64) = 0;
      qword_26AF89B40 = v106;
      uint64_t v108 = re::introspectionAllocator((re *)v106);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89570, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89570))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF89758);
        qword_26AF89758 = (uint64_t)&unk_26E701200;
        __cxa_guard_release(&qword_26AF89570);
      }
      if ((byte_26AF89515 & 1) == 0)
      {
        char v109 = re::IntrospectionInfo<re::StringID>::get(1, v107);
        uint64_t v110 = re::introspect_Vector3F((re::IntrospectionBase **)1);
        if ((byte_26AF89515 & 1) == 0)
        {
          uint64_t v111 = v110;
          byte_26AF89515 = 1;
          int v112 = *(_DWORD *)(v110 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF89758, 0);
          qword_26AF89768 = 0x3000000007;
          dword_26AF89770 = v112;
          word_26AF89774 = 0;
          *(void *)&xmmword_26AF89778 = 0;
          *((void *)&xmmword_26AF89778 + 1) = 0xFFFFFFFFLL;
          qword_26AF89788 = (uint64_t)v109;
          qword_26AF89790 = 0;
          qword_26AF89798 = v111;
          qword_26AF897A0 = 0;
          qword_26AF89758 = (uint64_t)&unk_26E701200;
          re::IntrospectionRegistry::add(v113, v114);
          re::getPrettyTypeName((re *)&qword_26AF89758, (const re::IntrospectionBase *)&v292);
          if (v293) {
            int v115 = v294;
          }
          else {
            int v115 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v116 = v109[2];
          long long v287 = *(_OWORD *)(v111 + 32);
          long long v288 = v116;
          int v117 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v117)
          {
            uint64_t v118 = *v117;
            *((void *)&v286 + 1) = v118;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            uint64_t v119 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v119)
            {
              uint64_t v120 = *v119;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              uint64_t v121 = (void *)v292;
              uint64_t v120 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v121
              || (unint64_t v122 = *v299,
                  uint64_t v292 = v120,
                  v293 = v122,
                  LODWORD(v294) = -1,
                  (uint64_t v123 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v123)
            {
              long long v297 = v288;
              v295 = v121;
              uint64_t v296 = v120;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v124);
          }
          xmmword_26AF89778 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v125 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v108 + 32))(v108, 72, 8);
      *(_DWORD *)uint64_t v125 = 1;
      *(void *)(v125 + 8) = "Vector3FValues";
      *(void *)(v125 + 16) = &qword_26AF89758;
      *(void *)(v125 + 24) = 0;
      *(void *)(v125 + 32) = 0x12800000006;
      *(_DWORD *)(v125 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v125 + 48) = 0;
      *(void *)(v125 + 56) = 0;
      *(_DWORD *)(v125 + 64) = 0;
      qword_26AF89B48 = v125;
      uint64_t v127 = re::introspectionAllocator((re *)v125);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89578, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89578))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF897A8);
        qword_26AF897A8 = (uint64_t)&unk_26E7012A0;
        __cxa_guard_release(&qword_26AF89578);
      }
      if ((byte_26AF89516 & 1) == 0)
      {
        int v128 = re::IntrospectionInfo<re::StringID>::get(1, v126);
        uint64_t v129 = re::introspect_Vector4F((re::IntrospectionBase **)1);
        if ((byte_26AF89516 & 1) == 0)
        {
          uint64_t v130 = v129;
          byte_26AF89516 = 1;
          int v131 = *(_DWORD *)(v129 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF897A8, 0);
          qword_26AF897B8 = 0x3000000007;
          dword_26AF897C0 = v131;
          word_26AF897C4 = 0;
          *(void *)&xmmword_26AF897C8 = 0;
          *((void *)&xmmword_26AF897C8 + 1) = 0xFFFFFFFFLL;
          qword_26AF897D8 = (uint64_t)v128;
          qword_26AF897E0 = 0;
          qword_26AF897E8 = v130;
          qword_26AF897F0 = 0;
          qword_26AF897A8 = (uint64_t)&unk_26E7012A0;
          re::IntrospectionRegistry::add(v132, v133);
          re::getPrettyTypeName((re *)&qword_26AF897A8, (const re::IntrospectionBase *)&v292);
          if (v293) {
            uint64_t v134 = v294;
          }
          else {
            uint64_t v134 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v135 = v128[2];
          long long v287 = *(_OWORD *)(v130 + 32);
          long long v288 = v135;
          int v136 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v136)
          {
            uint64_t v137 = *v136;
            *((void *)&v286 + 1) = v137;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            uint64_t v138 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v138)
            {
              uint64_t v139 = *v138;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              long long v140 = (void *)v292;
              uint64_t v139 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v140
              || (char v141 = *v299,
                  uint64_t v292 = v139,
                  v293 = v141,
                  LODWORD(v294) = -1,
                  (id v142 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v142)
            {
              long long v297 = v288;
              v295 = v140;
              uint64_t v296 = v139;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v143);
          }
          xmmword_26AF897C8 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v144 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v127 + 32))(v127, 72, 8);
      *(_DWORD *)uint64_t v144 = 1;
      *(void *)(v144 + 8) = "Vector4FValues";
      *(void *)(v144 + 16) = &qword_26AF897A8;
      *(void *)(v144 + 24) = 0;
      *(void *)(v144 + 32) = 0x15800000007;
      *(_DWORD *)(v144 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v144 + 48) = 0;
      *(void *)(v144 + 56) = 0;
      *(_DWORD *)(v144 + 64) = 0;
      qword_26AF89B50 = v144;
      long long v146 = re::introspectionAllocator((re *)v144);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89580, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89580))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF897F8);
        qword_26AF897F8 = (uint64_t)&unk_26E701340;
        __cxa_guard_release(&qword_26AF89580);
      }
      if ((byte_26AF89517 & 1) == 0)
      {
        int v147 = re::IntrospectionInfo<re::StringID>::get(1, v145);
        uint64_t v148 = re::introspect_QuaternionF((re::IntrospectionBase **)1);
        if ((byte_26AF89517 & 1) == 0)
        {
          uint64_t v149 = v148;
          byte_26AF89517 = 1;
          int v150 = *(_DWORD *)(v148 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF897F8, 0);
          qword_26AF89808 = 0x3000000007;
          dword_26AF89810 = v150;
          word_26AF89814 = 0;
          *(void *)&xmmword_26AF89818 = 0;
          *((void *)&xmmword_26AF89818 + 1) = 0xFFFFFFFFLL;
          qword_26AF89828 = (uint64_t)v147;
          qword_26AF89830 = 0;
          qword_26AF89838 = v149;
          qword_26AF89840 = 0;
          qword_26AF897F8 = (uint64_t)&unk_26E701340;
          re::IntrospectionRegistry::add(v151, v152);
          re::getPrettyTypeName((re *)&qword_26AF897F8, (const re::IntrospectionBase *)&v292);
          if (v293) {
            int v153 = v294;
          }
          else {
            int v153 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v154 = v147[2];
          long long v287 = *(_OWORD *)(v149 + 32);
          long long v288 = v154;
          int v155 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v155)
          {
            uint64_t v156 = *v155;
            *((void *)&v286 + 1) = v156;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            char v157 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v157)
            {
              uint64_t v158 = *v157;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              int v159 = (void *)v292;
              uint64_t v158 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v159
              || (char v160 = *v299,
                  uint64_t v292 = v158,
                  v293 = v160,
                  LODWORD(v294) = -1,
                  (long long v161 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v161)
            {
              long long v297 = v288;
              v295 = v159;
              uint64_t v296 = v158;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v162);
          }
          xmmword_26AF89818 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v163 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v146 + 32))(v146, 72, 8);
      *(_DWORD *)uint64_t v163 = 1;
      *(void *)(v163 + 8) = "QuaternionFValues";
      *(void *)(v163 + 16) = &qword_26AF897F8;
      *(void *)(v163 + 24) = 0;
      *(void *)(v163 + 32) = 0x18800000008;
      *(_DWORD *)(v163 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v163 + 48) = 0;
      *(void *)(v163 + 56) = 0;
      *(_DWORD *)(v163 + 64) = 0;
      qword_26AF89B58 = v163;
      long long v165 = re::introspectionAllocator((re *)v163);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89588, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89588))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF89848);
        qword_26AF89848 = (uint64_t)&unk_26E7013E0;
        __cxa_guard_release(&qword_26AF89588);
      }
      if ((byte_26AF89518 & 1) == 0)
      {
        int v166 = re::IntrospectionInfo<re::StringID>::get(1, v164);
        uint64_t v167 = re::introspect_SRT((re::IntrospectionBase **)1);
        if ((byte_26AF89518 & 1) == 0)
        {
          uint64_t v168 = v167;
          byte_26AF89518 = 1;
          int v169 = *(_DWORD *)(v167 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF89848, 0);
          qword_26AF89858 = 0x3000000007;
          dword_26AF89860 = v169;
          word_26AF89864 = 0;
          *(void *)&xmmword_26AF89868 = 0;
          *((void *)&xmmword_26AF89868 + 1) = 0xFFFFFFFFLL;
          qword_26AF89878 = (uint64_t)v166;
          qword_26AF89880 = 0;
          qword_26AF89888 = v168;
          qword_26AF89890 = 0;
          qword_26AF89848 = (uint64_t)&unk_26E7013E0;
          re::IntrospectionRegistry::add(v170, v171);
          re::getPrettyTypeName((re *)&qword_26AF89848, (const re::IntrospectionBase *)&v292);
          if (v293) {
            float32x4_t v172 = v294;
          }
          else {
            float32x4_t v172 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v173 = v166[2];
          long long v287 = *(_OWORD *)(v168 + 32);
          long long v288 = v173;
          long long v174 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v174)
          {
            uint64_t v175 = *v174;
            *((void *)&v286 + 1) = v175;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            uint64_t v176 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v176)
            {
              uint64_t v177 = *v176;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              long long v178 = (void *)v292;
              uint64_t v177 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v178
              || (long long v179 = *v299,
                  uint64_t v292 = v177,
                  v293 = v179,
                  LODWORD(v294) = -1,
                  (long long v180 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v180)
            {
              long long v297 = v288;
              v295 = v178;
              uint64_t v296 = v177;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v181);
          }
          xmmword_26AF89868 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v182 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v165 + 32))(v165, 72, 8);
      *(_DWORD *)uint64_t v182 = 1;
      *(void *)(v182 + 8) = "SRTValues";
      *(void *)(v182 + 16) = &qword_26AF89848;
      *(void *)(v182 + 24) = 0;
      *(void *)(v182 + 32) = 0x1B800000009;
      *(_DWORD *)(v182 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v182 + 48) = 0;
      *(void *)(v182 + 56) = 0;
      *(_DWORD *)(v182 + 64) = 0;
      qword_26AF89B60 = v182;
      float32x4_t v183 = re::introspectionAllocator((re *)v182);
      float32x4_t v185 = re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(1, v184);
      uint64_t v186 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v183 + 32))(v183, 72, 8);
      *(_DWORD *)uint64_t v186 = 1;
      *(void *)(v186 + 8) = "DynamicStringValues";
      *(void *)(v186 + 16) = v185;
      *(void *)(v186 + 24) = 0;
      *(void *)(v186 + 32) = 0x1E80000000ALL;
      *(_DWORD *)(v186 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v186 + 48) = 0;
      *(void *)(v186 + 56) = 0;
      *(_DWORD *)(v186 + 64) = 0;
      qword_26AF89B68 = v186;
      long long v188 = re::introspectionAllocator((re *)v186);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89590, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89590))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF89898);
        qword_26AF89898 = (uint64_t)&unk_26E701480;
        __cxa_guard_release(&qword_26AF89590);
      }
      if ((byte_26AF89519 & 1) == 0)
      {
        long long v189 = re::IntrospectionInfo<re::StringID>::get(1, v187);
        uint64_t v190 = re::introspect_SkeletalPose((re::IntrospectionBase **)1);
        if ((byte_26AF89519 & 1) == 0)
        {
          uint64_t v191 = v190;
          byte_26AF89519 = 1;
          int v192 = *(_DWORD *)(v190 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF89898, 0);
          qword_26AF898A8 = 0x3000000007;
          dword_26AF898B0 = v192;
          word_26AF898B4 = 0;
          *(void *)&xmmword_26AF898B8 = 0;
          *((void *)&xmmword_26AF898B8 + 1) = 0xFFFFFFFFLL;
          qword_26AF898C8 = (uint64_t)v189;
          qword_26AF898D0 = 0;
          qword_26AF898D8 = v191;
          qword_26AF898E0 = 0;
          qword_26AF89898 = (uint64_t)&unk_26E701480;
          re::IntrospectionRegistry::add(v193, v194);
          re::getPrettyTypeName((re *)&qword_26AF89898, (const re::IntrospectionBase *)&v292);
          if (v293) {
            long long v195 = v294;
          }
          else {
            long long v195 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v196 = v189[2];
          long long v287 = *(_OWORD *)(v191 + 32);
          long long v288 = v196;
          v197 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v197)
          {
            uint64_t v198 = *v197;
            *((void *)&v286 + 1) = v198;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            v199 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v199)
            {
              uint64_t v200 = *v199;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              v201 = (void *)v292;
              uint64_t v200 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v201
              || (v202 = *v299,
                  uint64_t v292 = v200,
                  v293 = v202,
                  LODWORD(v294) = -1,
                  (v203 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v203)
            {
              long long v297 = v288;
              v295 = v201;
              uint64_t v296 = v200;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v204);
          }
          xmmword_26AF898B8 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v205 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v188 + 32))(v188, 72, 8);
      *(_DWORD *)uint64_t v205 = 1;
      *(void *)(v205 + 8) = "SkeletalPoseValues";
      *(void *)(v205 + 16) = &qword_26AF89898;
      *(void *)(v205 + 24) = 0;
      *(void *)(v205 + 32) = 0x2180000000BLL;
      *(_DWORD *)(v205 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v205 + 48) = 0;
      *(void *)(v205 + 56) = 0;
      *(_DWORD *)(v205 + 64) = 0;
      qword_26AF89B70 = v205;
      v207 = re::introspectionAllocator((re *)v205);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89598, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF89598))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF898E8);
        qword_26AF898E8 = (uint64_t)&unk_26E701520;
        __cxa_guard_release(&qword_26AF89598);
      }
      if ((byte_26AF8951A & 1) == 0)
      {
        v208 = re::IntrospectionInfo<re::StringID>::get(1, v206);
        v210 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v209);
        if ((byte_26AF8951A & 1) == 0)
        {
          uint64_t v211 = (uint64_t)v210;
          byte_26AF8951A = 1;
          int v212 = *((_DWORD *)v210 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF898E8, 0);
          qword_26AF898F8 = 0x3000000007;
          dword_26AF89900 = v212;
          word_26AF89904 = 0;
          *(void *)&xmmword_26AF89908 = 0;
          *((void *)&xmmword_26AF89908 + 1) = 0xFFFFFFFFLL;
          qword_26AF89918 = (uint64_t)v208;
          qword_26AF89920 = 0;
          qword_26AF89928 = v211;
          qword_26AF89930 = 0;
          qword_26AF898E8 = (uint64_t)&unk_26E701520;
          re::IntrospectionRegistry::add(v213, v214);
          re::getPrettyTypeName((re *)&qword_26AF898E8, (const re::IntrospectionBase *)&v292);
          if (v293) {
            v215 = v294;
          }
          else {
            v215 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v216 = v208[2];
          long long v287 = *(_OWORD *)(v211 + 32);
          long long v288 = v216;
          v217 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v217)
          {
            uint64_t v218 = *v217;
            *((void *)&v286 + 1) = v218;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            v219 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v219)
            {
              uint64_t v220 = *v219;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              v221 = (void *)v292;
              uint64_t v220 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v221
              || (v222 = *v299,
                  uint64_t v292 = v220,
                  v293 = v222,
                  LODWORD(v294) = -1,
                  (v223 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v223)
            {
              long long v297 = v288;
              v295 = v221;
              uint64_t v296 = v220;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v224);
          }
          xmmword_26AF89908 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v225 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v207 + 32))(v207, 72, 8);
      *(_DWORD *)uint64_t v225 = 1;
      *(void *)(v225 + 8) = "FloatArrayValues";
      *(void *)(v225 + 16) = &qword_26AF898E8;
      *(void *)(v225 + 24) = 0;
      *(void *)(v225 + 32) = 0x2480000000CLL;
      *(_DWORD *)(v225 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v225 + 48) = 0;
      *(void *)(v225 + 56) = 0;
      *(_DWORD *)(v225 + 64) = 0;
      qword_26AF89B78 = v225;
      v227 = re::introspectionAllocator((re *)v225);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF895A0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF895A0))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF89938);
        qword_26AF89938 = (uint64_t)&unk_26E7015C0;
        __cxa_guard_release(&qword_26AF895A0);
      }
      if ((byte_26AF8951B & 1) == 0)
      {
        v228 = re::IntrospectionInfo<re::StringID>::get(1, v226);
        v229 = re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(1);
        if ((byte_26AF8951B & 1) == 0)
        {
          uint64_t v230 = (uint64_t)v229;
          byte_26AF8951B = 1;
          int v231 = *((_DWORD *)v229 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF89938, 0);
          qword_26AF89948 = 0x3000000007;
          dword_26AF89950 = v231;
          word_26AF89954 = 0;
          *(void *)&xmmword_26AF89958 = 0;
          *((void *)&xmmword_26AF89958 + 1) = 0xFFFFFFFFLL;
          qword_26AF89968 = (uint64_t)v228;
          qword_26AF89970 = 0;
          qword_26AF89978 = v230;
          qword_26AF89980 = 0;
          qword_26AF89938 = (uint64_t)&unk_26E7015C0;
          re::IntrospectionRegistry::add(v232, v233);
          re::getPrettyTypeName((re *)&qword_26AF89938, (const re::IntrospectionBase *)&v292);
          if (v293) {
            v234 = v294;
          }
          else {
            v234 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v235 = v228[2];
          long long v287 = *(_OWORD *)(v230 + 32);
          long long v288 = v235;
          v236 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v236)
          {
            uint64_t v237 = *v236;
            *((void *)&v286 + 1) = v237;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            v238 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v238)
            {
              uint64_t v239 = *v238;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              v240 = (void *)v292;
              uint64_t v239 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v240
              || (v241 = *v299,
                  uint64_t v292 = v239,
                  v293 = v241,
                  LODWORD(v294) = -1,
                  (v242 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v242)
            {
              long long v297 = v288;
              v295 = v240;
              uint64_t v296 = v239;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v243);
          }
          xmmword_26AF89958 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v244 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v227 + 32))(v227, 72, 8);
      *(_DWORD *)uint64_t v244 = 1;
      *(void *)(v244 + 8) = "Vector3ArrayValues";
      *(void *)(v244 + 16) = &qword_26AF89938;
      *(void *)(v244 + 24) = 0;
      *(void *)(v244 + 32) = 0x2780000000DLL;
      *(_DWORD *)(v244 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v244 + 48) = 0;
      *(void *)(v244 + 56) = 0;
      *(_DWORD *)(v244 + 64) = 0;
      qword_26AF89B80 = v244;
      v246 = re::introspectionAllocator((re *)v244);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF895A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF895A8))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF89988);
        qword_26AF89988 = (uint64_t)&unk_26E701660;
        __cxa_guard_release(&qword_26AF895A8);
      }
      if ((byte_26AF8951C & 1) == 0)
      {
        v247 = re::IntrospectionInfo<re::StringID>::get(1, v245);
        v249 = re::introspect_int64_t((re *)1, v248);
        if ((byte_26AF8951C & 1) == 0)
        {
          uint64_t v250 = (uint64_t)v249;
          byte_26AF8951C = 1;
          int v251 = v249[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF89988, 0);
          qword_26AF89998 = 0x3000000007;
          dword_26AF899A0 = v251;
          word_26AF899A4 = 0;
          *(void *)&xmmword_26AF899A8 = 0;
          *((void *)&xmmword_26AF899A8 + 1) = 0xFFFFFFFFLL;
          qword_26AF899B8 = (uint64_t)v247;
          qword_26AF899C0 = 0;
          qword_26AF899C8 = v250;
          qword_26AF899D0 = 0;
          qword_26AF89988 = (uint64_t)&unk_26E701660;
          re::IntrospectionRegistry::add(v252, v253);
          re::getPrettyTypeName((re *)&qword_26AF89988, (const re::IntrospectionBase *)&v292);
          if (v293) {
            v254 = v294;
          }
          else {
            v254 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v255 = v247[2];
          long long v287 = *(_OWORD *)(v250 + 32);
          long long v288 = v255;
          v256 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v256)
          {
            uint64_t v257 = *v256;
            *((void *)&v286 + 1) = v257;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            v258 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v258)
            {
              uint64_t v259 = *v258;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              v260 = (void *)v292;
              uint64_t v259 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v260
              || (v261 = *v299,
                  uint64_t v292 = v259,
                  v293 = v261,
                  LODWORD(v294) = -1,
                  (v262 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v262)
            {
              long long v297 = v288;
              v295 = v260;
              uint64_t v296 = v259;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v263);
          }
          xmmword_26AF899A8 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v264 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v246 + 32))(v246, 72, 8);
      *(_DWORD *)uint64_t v264 = 1;
      *(void *)(v264 + 8) = "int64Values";
      *(void *)(v264 + 16) = &qword_26AF89988;
      *(void *)(v264 + 24) = 0;
      *(void *)(v264 + 32) = 0x2A80000000ELL;
      *(_DWORD *)(v264 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v264 + 48) = 0;
      *(void *)(v264 + 56) = 0;
      *(_DWORD *)(v264 + 64) = 0;
      qword_26AF89B88 = v264;
      v266 = re::introspectionAllocator((re *)v264);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF895B0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF895B0))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF899D8);
        qword_26AF899D8 = (uint64_t)&unk_26E701700;
        __cxa_guard_release(&qword_26AF895B0);
      }
      if ((byte_26AF8951D & 1) == 0)
      {
        v267 = re::IntrospectionInfo<re::StringID>::get(1, v265);
        uint64_t v268 = re::introspect_BlendShapeWeights((re::IntrospectionBase **)1);
        if ((byte_26AF8951D & 1) == 0)
        {
          uint64_t v269 = v268;
          byte_26AF8951D = 1;
          int v270 = *(_DWORD *)(v268 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF899D8, 0);
          qword_26AF899E8 = 0x3000000007;
          dword_26AF899F0 = v270;
          word_26AF899F4 = 0;
          *(void *)&xmmword_26AF899F8 = 0;
          *((void *)&xmmword_26AF899F8 + 1) = 0xFFFFFFFFLL;
          qword_26AF89A08 = (uint64_t)v267;
          qword_26AF89A10 = 0;
          qword_26AF89A18 = v269;
          qword_26AF89A20 = 0;
          qword_26AF899D8 = (uint64_t)&unk_26E701700;
          re::IntrospectionRegistry::add(v271, v272);
          re::getPrettyTypeName((re *)&qword_26AF899D8, (const re::IntrospectionBase *)&v292);
          if (v293) {
            v273 = v294;
          }
          else {
            v273 = (char *)&v293 + 1;
          }
          if (v292 && (v293 & 1) != 0) {
            (*(void (**)(void))(*(void *)v292 + 40))();
          }
          long long v274 = v267[2];
          long long v287 = *(_OWORD *)(v269 + 32);
          long long v288 = v274;
          v275 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v289);
          if (v275)
          {
            uint64_t v276 = *v275;
            *((void *)&v286 + 1) = v276;
          }
          else
          {
            uint64_t v292 = 0x449AD97C4B77BED4;
            v293 = "_CompareFunc";
            v277 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v292);
            if (v277)
            {
              uint64_t v278 = *v277;
              re::StringID::destroyString((re::StringID *)&v292);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v292);
              *(void *)&v298.var0 = 0x449AD97C4B77BED4;
              v298.var1 = "_CompareFunc";
              v279 = (void *)v292;
              uint64_t v278 = (uint64_t)v293;
              re::StringID::destroyString((re::StringID *)&v298);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v298, (uint64_t)&v293);
            if (!v279
              || (v280 = *v299,
                  uint64_t v292 = v278,
                  v293 = v280,
                  LODWORD(v294) = -1,
                  (v281 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v298.var0 + 768, &v292)) == 0)|| !*(void *)v281)
            {
              long long v297 = v288;
              v295 = v279;
              uint64_t v296 = v278;
            }
            long long v290 = v287;
            long long v291 = v288;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v292, v289, 1, 0x30uLL, 8uLL, &v291, &v290);
            re::TypeBuilder::setConstructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v292, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v292, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v292, v282);
          }
          xmmword_26AF899F8 = v286;
          re::StringID::destroyString((re::StringID *)v289);
        }
      }
      uint64_t v283 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v266 + 32))(v266, 72, 8);
      *(_DWORD *)uint64_t v283 = 1;
      *(void *)(v283 + 8) = "BlendShapeWeightsValues";
      *(void *)(v283 + 16) = &qword_26AF899D8;
      *(void *)(v283 + 24) = 0;
      *(void *)(v283 + 32) = 0x2D80000000FLL;
      *(_DWORD *)(v283 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v283 + 48) = 0;
      *(void *)(v283 + 56) = 0;
      *(_DWORD *)(v283 + 64) = 0;
      qword_26AF89B90 = v283;
      __cxa_guard_release(&qword_26AF89520);
    }
  }
  *((void *)this + 2) = 0x30800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 16;
  *((void *)this + 8) = &qword_26AF89B18;
  *((void *)this + 9) = re::internal::defaultConstruct<re::KeyValueStore>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::KeyValueStore>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::KeyValueStore>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::KeyValueStore>;
  re::IntrospectionRegistry::add(this, v3);
  long long v284 = v285;
}

double re::internal::defaultConstruct<re::KeyValueStore>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E700E88;
  double result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 4objc_initWeak(location, 0) = 0;
  *(void *)(a3 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_DWORD *)(a3 + 88) = 0;
  *(void *)(a3 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(a3 + 136) = 0;
  *(void *)(a3 + 14objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(void *)(a3 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 20objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 248) = 0u;
  uint64_t v4 = a3 + 248;
  *(_OWORD *)(v4 + 192) = 0u;
  v4 += 192;
  *(_OWORD *)(v4 - 48) = 0u;
  v4 -= 48;
  *(_OWORD *)(v4 - 48) = 0u;
  v4 -= 48;
  *(_OWORD *)(v4 - 48) = 0u;
  v4 -= 48;
  *(void *)(v4 - 6objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 - 16) = 0;
  *(_OWORD *)(v4 - 32) = 0u;
  *(void *)(v4 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(void *)(v4 + 36) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 8objc_initWeak(location, 0) = 0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(void *)(v4 + 84) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(void *)(v4 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 16objc_initWeak(location, 0) = 0u;
  *(_DWORD *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 192) = 0u;
  v4 += 192;
  *(_OWORD *)(v4 + 144) = 0u;
  v4 += 144;
  *(void *)(v4 - 156) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 - 112) = 0;
  *(_OWORD *)(v4 - 128) = 0u;
  *(void *)(v4 - 108) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 - 64) = 0;
  *(_OWORD *)(v4 - 96) = 0u;
  *(_OWORD *)(v4 - 8objc_initWeak(location, 0) = 0u;
  *(void *)(v4 - 6objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 - 16) = 0;
  *(_OWORD *)(v4 - 48) = 0u;
  *(_OWORD *)(v4 - 32) = 0u;
  *(void *)(v4 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(void *)(v4 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 48) = 0u;
  v4 += 48;
  *(_OWORD *)(v4 + 48) = 0u;
  v4 += 48;
  *(_DWORD *)(v4 - 16) = 0;
  *(_OWORD *)(v4 - 32) = 0u;
  *(void *)(v4 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(void *)(v4 + 36) = 0x7FFFFFFFLL;
  return result;
}

void re::internal::defaultDestruct<re::KeyValueStore>(int a1, int a2, re::KeyValueStore *this)
{
}

uint64_t re::internal::defaultConstructV2<re::KeyValueStore>(uint64_t a1)
{
  *(void *)a1 = &unk_26E700E88;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 14objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 20objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  uint64_t v1 = a1 + 248;
  *(_OWORD *)(v1 + 192) = 0u;
  v1 += 192;
  *(_OWORD *)(v1 - 48) = 0u;
  v1 -= 48;
  *(_OWORD *)(v1 - 48) = 0u;
  v1 -= 48;
  *(_OWORD *)(v1 - 48) = 0u;
  v1 -= 48;
  *(void *)(v1 - 6objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 - 16) = 0;
  *(_OWORD *)(v1 - 32) = 0u;
  *(void *)(v1 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 32) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 36) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 8objc_initWeak(location, 0) = 0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(void *)(v1 + 84) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 128) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(void *)(v1 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 16objc_initWeak(location, 0) = 0u;
  *(_DWORD *)(v1 + 176) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  v1 += 192;
  *(_OWORD *)(v1 + 144) = 0u;
  v1 += 144;
  *(void *)(v1 - 156) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 - 112) = 0;
  *(_OWORD *)(v1 - 128) = 0u;
  *(void *)(v1 - 108) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 - 64) = 0;
  *(_OWORD *)(v1 - 96) = 0u;
  *(_OWORD *)(v1 - 8objc_initWeak(location, 0) = 0u;
  *(void *)(v1 - 6objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 - 16) = 0;
  *(_OWORD *)(v1 - 48) = 0u;
  *(_OWORD *)(v1 - 32) = 0u;
  *(void *)(v1 - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 32) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 48) = 0u;
  v1 += 48;
  *(_OWORD *)(v1 + 48) = 0u;
  uint64_t result = v1 + 48;
  *(_DWORD *)(result - 16) = 0;
  *(_OWORD *)(result - 32) = 0u;
  *(void *)(result - 12) = 0x7FFFFFFFLL;
  *(_DWORD *)(result + 32) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)(result + 36) = 0x7FFFFFFFLL;
  return result;
}

void *re::ecs2::allocInfo_KeyValueComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89538, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89538))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89AA0, "KeyValueComponent");
    __cxa_guard_release(&qword_26AF89538);
  }
  return &unk_26AF89AA0;
}

void re::ecs2::initInfo_KeyValueComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x7398D48E533EA556;
  v14[1] = "KeyValueComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89540, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF89540);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF895B8 = v7;
      unint64_t v8 = (re *)re::introspectionAllocator((re *)v7);
      unint64_t v9 = v8;
      unint64_t v10 = (re *)qword_26AF89530;
      if (!qword_26AF89530)
      {
        unint64_t v10 = (re *)re::allocInfo_KeyValueStore(v8);
        qword_26AF89530 = (uint64_t)v10;
        re::initInfo_KeyValueStore(v10, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "keyValueStore";
      *(void *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF895C0 = v12;
      __cxa_guard_release(&qword_26AF89540);
    }
  }
  *((void *)this + 2) = 0x32800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF895B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::KeyValueComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::KeyValueComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::KeyValueComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::KeyValueComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

double re::internal::defaultConstruct<re::ecs2::KeyValueComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::KeyValueComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::KeyValueComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::KeyValueComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_KeyValueComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"KeyValueComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_KeyValueComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_KeyValueComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::KeyValueComponent>, this);
}

uint64_t re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, void *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, void *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 8);
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_DWORD *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, void *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, void *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 48 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_OWORD *)(v10 + 48 * v9 + 32) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 48 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 48 * v9 + 8), a4);
  *(_OWORD *)(*(void *)(a1 + 16) + 48 * v9 + 32) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 48 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_OWORD *)(v10 + 48 * v9 + 32) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 48 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 48 * v9 + 8), a4);
  *(_OWORD *)(*(void *)(a1 + 16) + 48 * v9 + 32) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 48 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_OWORD *)(v10 + 48 * v9 + 32) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 48 * v11;
    return v12 + 32;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 48 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 48 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 48 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 48 * v9 + 8), a4);
  *(_OWORD *)(*(void *)(a1 + 16) + 48 * v9 + 32) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, long long *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 80 * v11;
    return v12 + 32;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 80 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 80 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  signed int v14 = (_OWORD *)(v10 + 80 * v9);
  long long v15 = *a3;
  long long v16 = a3[2];
  v14[3] = a3[1];
  _OWORD v14[4] = v16;
  void v14[2] = v15;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 80 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, long long *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 80 * v11;
    return v12 + 32;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 80 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 80 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 80 * v9;
  return v12 + 32;
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, long long *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 80 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 80 * v9 + 8), a4);
  long long v15 = (_OWORD *)(*(void *)(a1 + 16) + 80 * v9);
  long long v16 = *a5;
  long long v17 = a5[2];
  v15[3] = a5[1];
  v15[4] = v17;
  v15[2] = v16;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)long long v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, const re::DynamicString *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::DynamicString&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 56 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::DynamicString::operator=((re::DynamicString *)(v10 + 56 * v9 + 24), a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 56 * v9;
  return v12 + 24;
}

uint64_t re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 112 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 112 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 112 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  uint64_t v14 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 112 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 112 * v8 + 8), a4);
  long long v15 = (void *)(*(void *)(a1 + 16) + 112 * v8);
  re::StringID::StringID((re::StringID *)(v15 + 3), (const StringID *)a5);
  re::FixedArray<re::GenericSRT<float>>::FixedArray(v15 + 5, a5 + 16);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)(v15 + 8), (uint64_t *)(a5 + 40));
  uint64_t v16 = *(void *)(a5 + 80);
  v15[13] = v16;
  if (v16) {
    id v17 = (id)(v16 + 8);
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(void *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v16, v4, a2);
      long long v5 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v16[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v16[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            unint64_t v13 = 0xBF58476D1CE4E5B9 * ((*(void *)(v12 - 16) >> 31) ^ (*(void *)(v12 - 16) >> 1));
            unint64_t v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 112;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2) {
      signed int v15 = a2;
    }
    else {
      signed int v15 = 3;
    }
  }
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v13 = *(void *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::DynamicArray<float>::operator=(v11 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  unint64_t v13 = *(void *)(a1 + 16) + (v9 << 6);
  return v13 + 24;
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + ((unint64_t)v12 << 6) + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v9 << 6));
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v9 << 6));
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = v9 << 6;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6)) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + (v9 << 6) + 8), a4);
  re::DynamicArray<float>::DynamicArray(*(void *)(a1 + 16) + (v9 << 6) + 24, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)signed int v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v9 << 6));
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v9 << 6));
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = v9 << 6;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6)) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + (v9 << 6) + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v15 + 56) = 0;
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 4objc_initWeak(location, 0) = 0;
  *(void *)(v15 + 24) = 0;
  uint64_t v16 = *(void *)(a5 + 8);
  *(void *)(v15 + 24) = *(void *)a5;
  *(void *)(v15 + 32) = v16;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v17 = *(void *)(v15 + 40);
  *(void *)(v15 + 4objc_initWeak(location, 0) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v17;
  uint64_t v18 = *(void *)(v15 + 56);
  *(void *)(v15 + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v18;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v15 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v13 = *(void *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::DynamicArray<re::Vector3<float>>::operator=(v11 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  unint64_t v13 = *(void *)(a1 + 16) + (v9 << 6);
  return v13 + 24;
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + ((unint64_t)v12 << 6) + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v9 << 6));
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v9 << 6));
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = v9 << 6;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6)) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + (v9 << 6) + 8), a4);
  re::DynamicArray<re::Vector3<float>>::DynamicArray(*(void *)(a1 + 16) + (v9 << 6) + 24, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v9 << 6));
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v9 << 6));
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = v9 << 6;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6)) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + (v9 << 6) + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v15 + 56) = 0;
  *(_DWORD *)(v15 + 48) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 4objc_initWeak(location, 0) = 0;
  *(void *)(v15 + 24) = 0;
  uint64_t v16 = *(void *)(a5 + 8);
  *(void *)(v15 + 24) = *(void *)a5;
  *(void *)(v15 + 32) = v16;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v17 = *(void *)(v15 + 40);
  *(void *)(v15 + 4objc_initWeak(location, 0) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v17;
  uint64_t v18 = *(void *)(v15 + 56);
  *(void *)(v15 + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v18;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v15 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 56 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 56 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 56 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  uint64_t v14 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 56 * v8 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 56 * v8;
  re::FixedArray<float>::FixedArray((uint64_t *)(v15 + 24), a5);
  uint64_t v16 = *(void *)(a5 + 24);
  *(void *)(v15 + 48) = v16;
  if (v16) {
    id v17 = (id)(v16 + 8);
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(void *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v16, v4, a2);
      long long v5 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v16[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v16[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            unint64_t v13 = 0xBF58476D1CE4E5B9 * ((*(void *)(v12 - 16) >> 31) ^ (*(void *)(v12 - 16) >> 1));
            unint64_t v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 56;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2) {
      signed int v15 = a2;
    }
    else {
      signed int v15 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 48 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 48 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 48 * v4 + 32;
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 80 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 80 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 80 * v4 + 32;
}

uint64_t re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 112 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 112 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 112 * v4 + 24;
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v6 = v5 + (v4 << 6);
    if (re::StringID::operator==((void *)(v6 + 8), a2)) {
      break;
    }
    uint64_t v4 = *(_DWORD *)(v5 + (v4 << 6)) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 24;
}

uint64_t re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v9 + 48 * v7 + 8), a2))
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 48 * v7);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v9 + 48 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 48 * v1objc_initWeak(location, 0) = *(_DWORD *)(v9 + 48 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 48 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 48 * v7) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = (int *)(v12 + 48 * v7);
  int v14 = *v13;
  if (*v13 < 0)
  {
    int *v13 = v14 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v12 + 48 * v7 + 8));
    uint64_t v12 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v12 + 48 * v7);
  }
  int v15 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 48 * v7) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v15 + 1;
  return 1;
}

uint64_t re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v9 + 80 * v7 + 8), a2))
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 80 * v7);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v9 + 80 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 80 * v1objc_initWeak(location, 0) = *(_DWORD *)(v9 + 80 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 80 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 80 * v7) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = (int *)(v12 + 80 * v7);
  int v14 = *v13;
  if (*v13 < 0)
  {
    int *v13 = v14 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v12 + 80 * v7 + 8));
    uint64_t v12 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v12 + 80 * v7);
  }
  int v15 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 80 * v7) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v15 + 1;
  return 1;
}

void re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (*(void *)a1)
  {
    unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
       % *(unsigned int *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      if (re::StringID::operator==((void *)(v8 + 112 * v7 + 8), a2))
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 112 * v7) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + 112 * v7));
        int v11 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(*(void *)(a1 + 16) + 112 * v7) = *(_DWORD *)(*(void *)(a1 + 16) + 112 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v11 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v7;
          int v10 = *(_DWORD *)(v8 + 112 * v7);
          uint64_t v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (re::StringID::operator==((void *)(v8 + 112 * v7 + 8), a2))
          {
            *(_DWORD *)(v8 + 112 * v9) = *(_DWORD *)(v8 + 112 * v9) & 0x80000000 | *(_DWORD *)(v8
                                                                                                 + 112
                                                                                                 * v7) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

uint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v9 + (v7 << 6) + 8), a2))
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + (v7 << 6));
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v9 + (v7 << 6) + 8), a2))
      {
        *(_DWORD *)(v9 + ((unint64_t)v10 << 6)) = *(_DWORD *)(v9 + ((unint64_t)v10 << 6)) & 0x80000000 | *(_DWORD *)(v9 + (v7 << 6)) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + (v7 << 6)) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + (v7 << 6)));
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 16) + (v7 << 6)) = *(_DWORD *)(*(void *)(a1 + 16) + (v7 << 6)) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v12 + 1;
  return 1;
}

void re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (*(void *)a1)
  {
    unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
       % *(unsigned int *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      if (re::StringID::operator==((void *)(v8 + 56 * v7 + 8), a2))
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 56 * v7) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + 56 * v7));
        int v11 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(*(void *)(a1 + 16) + 56 * v7) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v11 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v7;
          int v10 = *(_DWORD *)(v8 + 56 * v7);
          uint64_t v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (re::StringID::operator==((void *)(v8 + 56 * v7 + 8), a2))
          {
            *(_DWORD *)(v8 + 56 * v9) = *(_DWORD *)(v8 + 56 * v9) & 0x80000000 | *(_DWORD *)(v8
                                                                                               + 56 * v7) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

void *re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  char v10 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 8, *(void *)(a2 + 16) + 32 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  int v10 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 8, *(void *)(a2 + 16) + 32 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  uint64_t v10 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 8, *(void *)(a2 + 16) + 32 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  int v10 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 8, *(void *)(a2 + 16) + 32 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  uint64_t v10 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 8, *(void *)(a2 + 16) + 32 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  long long v10 = 0u;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 12;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 48 * v10 + 8, *(void *)(a2 + 16) + 48 * v10 + 32);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 48 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 48;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v8;
  }
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 48 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 12;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 32;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  long long v10 = 0uLL;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 12;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 48 * v10 + 8, *(void *)(a2 + 16) + 48 * v10 + 32);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 48 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 48 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 12;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 32;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  long long v10 = xmmword_23435FBB0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 12;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 48 * v10 + 8, *(void *)(a2 + 16) + 48 * v10 + 32);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 48 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 48 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 12;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 32;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  *(void *)&long long v10 = 0x3F8000003F800000;
  *((void *)&v10 + 1) = 1065353216;
  uint64_t v11 = 0;
  uint64_t v12 = 0x3F80000000000000;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 20;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 80 * v10 + 8, *(void *)(a2 + 16) + 80 * v10 + 32);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 80 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 80;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v8;
  }
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (long long *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 80 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 20;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 80 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 80 * *(unsigned int *)(a1 + 32) + 32;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  v10[0] = 0;
  long long v11 = 0u;
  v10[1] = (uint64_t)"";
  uint64_t v16 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a4, a5, v10);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 28;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 112 * v10 + 8, *(void *)(a2 + 16) + 112 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 112 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 112;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v5;
  }
}

uint64_t re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, (uint64_t)a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 112 * v11;
    return v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 112 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 112 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v14 = (void *)(v10 + 112 * v9);
  re::StringID::operator=(v14 + 3, a3);
  re::FixedArray<re::GenericSRT<float>>::operator=(v14 + 5, (uint64_t)(a3 + 2));
  re::DynamicArray<BOOL>::operator=((uint64_t)(v14 + 8), a3 + 5);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v14 + 13, a3[10]);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 112 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (uint64_t *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 112 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 28;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 112 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 112 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  uint64_t v12 = 0;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, (uint64_t)v10);
  if (v10[0] && v12) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 16;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + (v10 << 6) + 8, *(void *)(a2 + 16) + (v10 << 6) + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + (v10 << 6)) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 64;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v5;
  }
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v13 = *(void *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::DynamicArray<re::RigComponentConstraint>::operator=(v11 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  unint64_t v13 = *(void *)(a1 + 16) + (v9 << 6);
  return v13 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

unint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  unint64_t v9 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + ((unint64_t)v10++ << 6));
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 16;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  uint64_t v12 = 0;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, (uint64_t)v10);
  if (v10[0] && v12) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 16;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + (v10 << 6) + 8, *(void *)(a2 + 16) + (v10 << 6) + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + (v10 << 6)) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v13 = *(void *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::DynamicArray<re::RigComponentConstraint>::operator=(v11 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  unint64_t v13 = *(void *)(a1 + 16) + (v9 << 6);
  return v13 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

unint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  unint64_t v9 = re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + ((unint64_t)v10++ << 6));
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 16;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  uint64_t v10 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 8, *(void *)(a2 + 16) + 32 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  memset(v10, 0, sizeof(v10));
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a4, a5, (uint64_t)v10);
  re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 14;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 56 * v10 + 8, *(void *)(a2 + 16) + 56 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 56 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 56;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v5;
  }
}

uint64_t re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 56 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v14 = v10 + 56 * v9;
  re::FixedArray<float>::operator=((uint64_t *)(v14 + 24), a3);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v14 + 48), *(void *)(a3 + 24));
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 56 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 56 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 14;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::KeyValueComponent>(void *a1)
{
  bzero(a1, 0x328uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((unsigned char *)a1 + 24) = 0;
  *a1 = &unk_26E6EA7E8;
  a1[4] = &unk_26E700E88;
  double result = 0.0;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *((_DWORD *)a1 + 18) = 0;
  *(void *)((char *)a1 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *((_DWORD *)a1 + 3objc_initWeak(location, 0) = 0;
  *(void *)((char *)a1 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *((_DWORD *)a1 + 42) = 0;
  *(void *)((char *)a1 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = 0u;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0u;
  *((_DWORD *)a1 + 54) = 0;
  *(void *)((char *)a1 + 2re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 29) = 0u;
  *(_OWORD *)(a1 + 31) = 0u;
  *((_DWORD *)a1 + 66) = 0;
  *(_OWORD *)(a1 + 35) = 0u;
  *(void *)((char *)a1 + 268) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 78) = 0;
  *(_OWORD *)(a1 + 37) = 0u;
  *(void *)((char *)a1 + 316) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *((_DWORD *)a1 + 9objc_initWeak(location, 0) = 0;
  *(void *)((char *)a1 + 364) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *((_DWORD *)a1 + 102) = 0;
  *(void *)((char *)a1 + 412) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 53) = 0u;
  *(_OWORD *)(a1 + 55) = 0u;
  *((_DWORD *)a1 + 114) = 0;
  *(void *)((char *)a1 + 46objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 126) = 0;
  *(_OWORD *)(a1 + 59) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *(void *)((char *)a1 + 508) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 138) = 0;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *(void *)((char *)a1 + 556) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 15objc_initWeak(location, 0) = 0;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)((char *)a1 + 604) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 162) = 0;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(void *)((char *)a1 + 652) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *((_DWORD *)a1 + 174) = 0;
  *(void *)((char *)a1 + 70objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 186) = 0;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(void *)((char *)a1 + 748) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 198) = 0;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  *(void *)((char *)a1 + 796) = 0x7FFFFFFFLL;
  return result;
}

re::ecs2::AudioDebugSystem *re::ecs2::AudioDebugSystem::AudioDebugSystem(re::ecs2::AudioDebugSystem *this)
{
  v11[4] = *MEMORY[0x263EF8340];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E7017A0;
  *((void *)v2 + 14) = 0;
  *((void *)v2 + 15) = 0;
  *((void *)v2 + 13) = 0;
  uint64_t v3 = re::globalAllocators(v2);
  int v4 = (re::audio::MeshVisualizer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 416, 16);
  *(_OWORD *)int v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 1objc_initWeak(location, 0) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  *((_OWORD *)v4 + 14) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_OWORD *)v4 + 16) = 0u;
  *((_OWORD *)v4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 0u;
  *((_OWORD *)v4 + 18) = 0u;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = 0u;
  *((_OWORD *)v4 + 24) = 0u;
  *((_OWORD *)v4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0u;
  uint64_t v5 = re::audio::MeshVisualizer::MeshVisualizer(v4);
  v11[0] = &unk_26E701828;
  v11[3] = v11;
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = (char *)this + 136;
  *((void *)this + 16) = v5;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = &unk_26E701828;
  std::__function::__value_func<void ()(re::audio::MeshVisualizer *)>::~__value_func[abi:nn180100](v11);
  *((_OWORD *)this + 14) = 0u;
  *((unsigned char *)this + 168) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 0;
  *(void *)((char *)this + 26objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 76) = 0;
  *(void *)((char *)this + 308) = 0x7FFFFFFFLL;
  uint64_t v6 = *((void *)this + 16);
  *(void *)(v6 + 96) = 0x800000008;
  uint64_t v7 = *(void *)(v6 + 160);
  if (*(void *)(v6 + 168) != v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 12;
    do
    {
      *(_DWORD *)(v7 + v9) = 1059749626;
      *(_DWORD *)(v6 + 204) = 1059749626;
      ++v8;
      uint64_t v7 = *(void *)(v6 + 160);
      v9 += 16;
    }
    while (v8 < (*(void *)(v6 + 168) - v7) >> 4);
  }
  return this;
}

void anonymous namespace'::tryLoadMaterialAsset(_anonymous_namespace_ *this, re::AssetHandle *a2, const char *a3, re::RenderManager *a4, AssetService *a5)
{
  uint64_t v8 = *((void *)this + 1);
  if (!v8 || (unsigned int v9 = atomic_load((unsigned int *)(v8 + 704)), v9 != 2))
  {
    (*(void (**)(uint64_t *__return_ptr, re::RenderManager *, re::AssetHandle *, const char *, re::RenderManager *, AssetService *))(*(void *)a4 + 8))(&v17, a4, a2, a3, a4, a5);
    if (v18)
    {
      if (!atomic_load((unsigned int *)(v18 + 704))) {
        re::AssetHandle::loadNow(v18, 0);
      }
      if (v18)
      {
        unsigned int v11 = atomic_load((unsigned int *)(v18 + 704));
        if (v11 == 2)
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (const re::AssetHandle *)&v17);
          re::MaterialAsset::makeMaterialMemoryAsset((uint64_t)a4, (uint64_t)a3, (re::AssetHandle *)v14, 0, 0);
          long long v12 = *(_OWORD *)this;
          *(_OWORD *)this = v15;
          long long v15 = v12;
          uint64_t v13 = *((void *)this + 2);
          *((void *)this + 2) = v16;
          uint64_t v16 = v13;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
        }
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  }
}

void re::ecs2::AudioDebugSystem::willAddSystemToECSService(re::ecs2::AudioDebugSystem *this)
{
  *((void *)this + 15) = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 13) = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v4 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  *((void *)this + 14) = v4;
  if (v4)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    uint64_t v6 = (re::RenderManager *)re::ServiceLocator::service<re::AssetService>(v5);
    unsigned int v9 = (const char *)*((void *)this + 14);
  }
}

void re::ecs2::AudioDebugSystem::willRemoveSystemFromECSService(re::ecs2::AudioDebugSystem *this)
{
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {

    *((void *)this + 22) = 0;
  }
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = 0;
  uint64_t v3 = *((void *)this + 25);
  if (v3)
  {

    *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  }
  *((void *)this + 26) = 0;
}

double re::ecs2::AudioDebugSystem::willAddSceneToECSService(re::ecs2::AudioDebugSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    uint64_t v8 = this;
    unsigned int v9 = re::ecs2::AudioDebugSystem::didAddComponents;
    uint64_t v10 = 0;
    unsigned int v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 128), (uint64_t)&v8);
    uint64_t v8 = this;
    unsigned int v9 = re::ecs2::AudioDebugSystem::willRemoveComponents;
    uint64_t v10 = 0;
    unsigned int v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 392), (uint64_t)&v8);
    uint64_t v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    uint64_t v8 = this;
    unsigned int v9 = re::ecs2::AudioDebugSystem::didAddAcousticMeshComponents;
    uint64_t v10 = 0;
    unsigned int v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 128), (uint64_t)&v8);
    uint64_t v8 = this;
    unsigned int v9 = re::ecs2::AudioDebugSystem::willRemoveAcousticMeshComponents;
    uint64_t v10 = 0;
    unsigned int v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 392), (uint64_t)&v8);
    uint64_t v6 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    uint64_t v8 = this;
    unsigned int v9 = re::ecs2::AudioDebugSystem::didAddAudioPlayerComponents;
    uint64_t v10 = 0;
    unsigned int v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 128), (uint64_t)&v8);
    uint64_t v8 = this;
    unsigned int v9 = re::ecs2::AudioDebugSystem::willRemoveAudioPlayerComponents;
    uint64_t v10 = 0;
    unsigned int v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 392), (uint64_t)&v8);
  }
  return result;
}

uint64_t re::ecs2::AudioDebugSystem::didAddComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a3;
    uint64_t v7 = &a3[a4];
    uint64_t v8 = a1 + 272;
    do
    {
      uint64_t v9 = *v4;
      uint64_t v10 = *(re::ecs2::Entity **)(*v4 + 16);
      if (v10)
      {
        if (v10 == re::ecs2::ComponentHelper::privateSceneDataEntity(*(re::ecs2::ComponentHelper **)(a2 + 120), 0))
        {
          uint64_t v11 = *(void *)(a2 + 120);
          uint64_t v18 = v9;
          uint64_t v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v11 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v12)
          {
            uint64_t v13 = *(void *)(v12 + 24);
            if (v13)
            {
              uint64_t v14 = *(uint64_t **)(v12 + 40);
              uint64_t v15 = 8 * v13;
              do
              {
                uint64_t v17 = *v14;
                if (*(void *)(v17 + 16)) {
                  re::HashTable<re::ecs2::AudioPlayerComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AudioPlayerComponent *>,re::EqualTo<re::ecs2::AudioPlayerComponent *>,true,false>::add<re::ecs2::AudioDebugComponent const*&>(v8, &v17, &v18);
                }
                ++v14;
                v15 -= 8;
              }
              while (v15);
            }
          }
        }
        else
        {
          re::ecs2::AudioDebugSystem::didAddComponentsRecursive(a1, v10, v9);
        }
      }
      ++v4;
    }
    while (v4 != v7);
  }
  return 0;
}

uint64_t re::ecs2::AudioDebugSystem::willRemoveComponents(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  unsigned int v86 = 0;
  long long v84 = 0u;
  long long v85 = 0u;
  uint64_t v87 = 0x7FFFFFFFLL;
  uint64_t v6 = 8 * a4;
  if (a4)
  {
    uint64_t v7 = 8 * a4;
    uint64_t v8 = a3;
    do
    {
      if (*v8)
      {
        uint64_t v9 = *(void **)(*v8 + 16);
        if (v9) {
          collectEntitiesRecursive((uint64_t)&v84, v9);
        }
      }
      ++v8;
      v7 -= 8;
    }
    while (v7);
    unsigned int v10 = v86;
    int v82 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
    uint64_t v83 = 0x7FFFFFFFLL;
    uint64_t v11 = 0;
    if (v86)
    {
      uint64_t v12 = (int *)(v85 + 8);
      while (1)
      {
        int v13 = *v12;
        v12 += 6;
        if (v13 < 0) {
          break;
        }
        if (v86 == ++v11)
        {
          LODWORD(v11) = v86;
          break;
        }
      }
    }
  }
  else
  {
    unsigned int v10 = 0;
    LODWORD(v11) = 0;
    int v82 = 0;
    long long v80 = 0uLL;
    long long v81 = 0uLL;
    uint64_t v83 = 0x7FFFFFFFLL;
  }
  if (v10 != v11)
  {
    uint64_t v15 = v11;
    uint64_t v16 = v85;
    int v70 = (unint64_t *)(a1 + 272);
    uint64_t v74 = v6;
    uint64_t v75 = &v5[v4];
    int v72 = v5;
    uint64_t v73 = v4;
    unsigned int v71 = v10;
    while (1)
    {
      uint64_t v17 = *(void *)(v16 + 24 * v15 + 16);
      long long v76 = 0u;
      long long v77 = 0u;
      int v78 = 0;
      uint64_t v79 = 0x7FFFFFFFLL;
      v92[0] = v17;
      unsigned int v90 = 0;
      long long v88 = 0u;
      long long v89 = 0u;
      uint64_t v91 = 0x7FFFFFFFLL;
      if (v17)
      {
        while (1)
        {
          re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v88, v92);
          uint64_t v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v92[0] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
          uint64_t v19 = v18;
          if (v18)
          {
            if (v4)
            {
              uint64_t v20 = v6;
              int v21 = v5;
              while (*v21 != v18)
              {
                ++v21;
                v20 -= 8;
                if (!v20)
                {
                  int v21 = v75;
                  break;
                }
              }
            }
            else
            {
              int v21 = v5;
            }
            if (v4 != v21 - v5) {
              uint64_t v19 = 0;
            }
          }
          uint64_t v22 = *(void *)(v92[0] + 24);
          if (!v22) {
            break;
          }
          int v23 = *(_DWORD *)(v22 + 288) & 0x80;
          if (v23) {
            uint64_t v22 = 0;
          }
          v92[0] = v22;
          if (v19) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v23 == 0;
          }
          if (!v24) {
            goto LABEL_36;
          }
        }
        v92[0] = 0;
LABEL_36:
        unsigned int v25 = v90;
        if (v90)
        {
          uint64_t v26 = 0;
          uint64_t v27 = (int *)(v89 + 8);
          while (1)
          {
            int v28 = *v27;
            v27 += 6;
            if (v28 < 0) {
              break;
            }
            if (v90 == ++v26)
            {
              LODWORD(v26) = v90;
              break;
            }
          }
        }
        else
        {
          LODWORD(v26) = 0;
        }
      }
      else
      {
        unsigned int v25 = 0;
        uint64_t v19 = 0;
        LODWORD(v26) = 0;
      }
      if (v25 != v26)
      {
        int v29 = 0;
        int v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = v26;
        uint64_t v36 = v89;
        unsigned int v37 = v25;
        do
        {
          unint64_t v38 = *(void *)(v36 + 24 * v35 + 16);
          unint64_t v39 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) >> 27));
          unint64_t v40 = v39 ^ (v39 >> 31);
          unint64_t v41 = v76;
          if ((void)v76)
          {
            unint64_t v41 = v40 % v34;
            for (uint64_t i = *(unsigned int *)(v33 + 4 * v41);
                  i != 0x7FFFFFFF;
                  uint64_t i = *(_DWORD *)(v32 + 32 * i + 8) & 0x7FFFFFFF)
            {
              if (*(void *)(v32 + 32 * i + 16) == v38)
              {
                *(void *)(v32 + 32 * i + 24) = v19;
                goto LABEL_57;
              }
            }
          }
          uint64_t v43 = v79;
          if (v79 == 0x7FFFFFFF)
          {
            unsigned int v34 = DWORD2(v77);
            if (v31 == DWORD2(v77))
            {
              re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v76, 2 * v30);
              unsigned int v34 = DWORD2(v77);
              int v30 = HIDWORD(v77);
              unint64_t v41 = v40 % DWORD2(v77);
              uint64_t v32 = v77;
              int v44 = v78;
              int v29 = HIDWORD(v79);
            }
            else
            {
              int v44 = v31;
            }
            uint64_t v46 = (v44 + 1);
            int v78 = v44 + 1;
            uint64_t v43 = v31;
            int v45 = *(_DWORD *)(v32 + 32 * v31 + 8);
          }
          else
          {
            int v45 = *(_DWORD *)(v32 + 32 * v79 + 8);
            LODWORD(v79) = v45 & 0x7FFFFFFF;
            uint64_t v46 = v31;
            LODWORD(v31) = v43;
          }
          *(_DWORD *)(v32 + 32 * v43 + 8) = v45 | 0x80000000;
          uint64_t v33 = *((void *)&v76 + 1);
          uint64_t v32 = v77;
          uint64_t v47 = v77 + 32 * v43;
          *(_DWORD *)(v47 + 8) = *(_DWORD *)(v47 + 8) & 0x80000000 | *(_DWORD *)(*((void *)&v76 + 1) + 4 * v41);
          *(void *)uint64_t v47 = v40;
          *(void *)(v47 + 16) = v38;
          *(void *)(v47 + 24) = v19;
          *(_DWORD *)(v33 + 4 * v41) = v31;
          HIDWORD(v77) = ++v30;
          unsigned int v37 = v90;
          uint64_t v31 = v46;
LABEL_57:
          HIDWORD(v79) = ++v29;
          uint64_t v36 = v89;
          if (v37 <= (int)v26 + 1) {
            unsigned int v48 = v26 + 1;
          }
          else {
            unsigned int v48 = v37;
          }
          while (1)
          {
            uint64_t v35 = (v26 + 1);
            if (v48 - 1 == v26) {
              break;
            }
            LODWORD(v26) = v26 + 1;
            unsigned int v49 = v35;
            if ((*(_DWORD *)(v89 + 24 * v35 + 8) & 0x80000000) != 0) {
              goto LABEL_64;
            }
          }
          unsigned int v49 = v48;
LABEL_64:
          LODWORD(v26) = v49;
        }
        while (v25 != v49);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v88);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v76);
      uint64_t v5 = v72;
      uint64_t v4 = v73;
      uint64_t v6 = v74;
      if (v19) {
        goto LABEL_66;
      }
      unint64_t v52 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v52) {
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(a1 + 224, v52);
      }
      uint64_t v53 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (!v53) {
        goto LABEL_66;
      }
      unint64_t v54 = v53;
      do
      {
        uint64_t v55 = v17;
        uint64_t v17 = *(void *)(v17 + 24);
      }
      while (v17);
      uint64_t v56 = re::ecs2::ComponentHelper::privateSceneDataEntity(*(re::ecs2::ComponentHelper **)(v55 + 16), (re::ecs2::Scene *)1);
      uint64_t v57 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v56 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      if (v57) {
        break;
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove((uint64_t)v70, v54);
LABEL_66:
      uint64_t v16 = v85;
      if (v86 <= (int)v11 + 1) {
        unsigned int v50 = v11 + 1;
      }
      else {
        unsigned int v50 = v86;
      }
      while (1)
      {
        uint64_t v15 = (v11 + 1);
        if (v50 - 1 == v11) {
          break;
        }
        LODWORD(v11) = v11 + 1;
        unsigned int v51 = v15;
        if ((*(_DWORD *)(v85 + 24 * v15 + 8) & 0x80000000) != 0) {
          goto LABEL_73;
        }
      }
      unsigned int v51 = v50;
LABEL_73:
      LODWORD(v11) = v51;
      if (v71 == v51) {
        goto LABEL_14;
      }
    }
    uint64_t v58 = v57;
    unint64_t v59 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) >> 27));
    unint64_t v60 = v59 ^ (v59 >> 31);
    unint64_t v61 = *v70;
    if (*v70)
    {
      uint64_t v62 = a1;
      unint64_t v61 = v60 % *(unsigned int *)(a1 + 296);
      uint64_t v63 = *(unsigned int *)(*(void *)(a1 + 280) + 4 * v61);
      if (v63 != 0x7FFFFFFF)
      {
        uint64_t v64 = *(void *)(a1 + 288);
        while (*(void *)(v64 + 32 * v63 + 16) != v54)
        {
          uint64_t v63 = *(_DWORD *)(v64 + 32 * v63 + 8) & 0x7FFFFFFF;
          if (v63 == 0x7FFFFFFF) {
            goto LABEL_89;
          }
        }
        *(void *)(v64 + 32 * v63 + 24) = v57;
        goto LABEL_96;
      }
    }
    else
    {
      uint64_t v62 = a1;
    }
LABEL_89:
    uint64_t v65 = *(unsigned int *)(v62 + 308);
    if (v65 == 0x7FFFFFFF)
    {
      uint64_t v65 = *(unsigned int *)(v62 + 304);
      int v66 = v65;
      if (v65 == *(_DWORD *)(v62 + 296))
      {
        re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v70, 2 * *(_DWORD *)(v62 + 300));
        unint64_t v61 = v60 % *(unsigned int *)(v62 + 296);
        int v66 = *(_DWORD *)(v62 + 304);
      }
      *(_DWORD *)(v62 + 304) = v66 + 1;
      uint64_t v67 = *(void *)(v62 + 288);
      int v68 = *(_DWORD *)(v67 + 32 * v65 + 8);
    }
    else
    {
      uint64_t v67 = *(void *)(v62 + 288);
      int v68 = *(_DWORD *)(v67 + 32 * v65 + 8);
      *(_DWORD *)(v62 + 308) = v68 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v67 + 32 * v65 + 8) = v68 | 0x80000000;
    *(_DWORD *)(*(void *)(v62 + 288) + 32 * v65 + 8) = *(_DWORD *)(*(void *)(v62 + 288) + 32 * v65 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v62 + 280) + 4 * v61);
    *(void *)(*(void *)(v62 + 288) + 32 * v65) = v60;
    *(void *)(*(void *)(v62 + 288) + 32 * v65 + 16) = v54;
    *(void *)(*(void *)(v62 + 288) + 32 * v65 + 24) = v58;
    *(_DWORD *)(*(void *)(v62 + 280) + 4 * v61) = v65;
    ++*(_DWORD *)(v62 + 300);
LABEL_96:
    ++*(_DWORD *)(v62 + 312);
    uint64_t v6 = v74;
    goto LABEL_66;
  }
LABEL_14:
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v80);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v84);
  return 0;
}

void re::ecs2::AudioDebugSystem::willRemoveSceneFromECSService(re::ecs2::AudioDebugSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    *(void *)&long long v7 = this;
    *((void *)&v7 + 1) = re::ecs2::AudioDebugSystem::didAddComponents;
    uint64_t v8 = 0;
    uint64_t v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 128, &v7);
    *(void *)&long long v7 = this;
    *((void *)&v7 + 1) = re::ecs2::AudioDebugSystem::willRemoveComponents;
    uint64_t v8 = 0;
    uint64_t v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 392, &v7);
    uint64_t v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(void *)&long long v7 = this;
    *((void *)&v7 + 1) = re::ecs2::AudioDebugSystem::didAddAcousticMeshComponents;
    uint64_t v8 = 0;
    uint64_t v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 128, &v7);
    *(void *)&long long v7 = this;
    *((void *)&v7 + 1) = re::ecs2::AudioDebugSystem::willRemoveAcousticMeshComponents;
    uint64_t v8 = 0;
    uint64_t v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 392, &v7);
    uint64_t v6 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v7 = this;
    *((void *)&v7 + 1) = re::ecs2::AudioDebugSystem::didAddAudioPlayerComponents;
    uint64_t v8 = 0;
    uint64_t v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 128, &v7);
    *(void *)&long long v7 = this;
    *((void *)&v7 + 1) = re::ecs2::AudioDebugSystem::willRemoveAudioPlayerComponents;
    uint64_t v8 = 0;
    uint64_t v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 392, &v7);
  }
}

void re::ecs2::AudioDebugSystem::didAddComponentsRecursive(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v6 = (re::ecs2::EntityComponentCollection *)(a2 + 4);
  uint64_t v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 224);
    unint64_t v27 = v7;
    unint64_t v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27));
    unint64_t v10 = v9 ^ (v9 >> 31);
    if (v8)
    {
      unint64_t v11 = v10 % *(unsigned int *)(a1 + 248);
      uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 232) + 4 * v11);
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v13 = *(void *)(a1 + 240);
        if (*(void *)(v13 + 32 * v12 + 16) == v7)
        {
LABEL_7:
          *(void *)(v13 + 32 * v12 + 24) = a3;
LABEL_10:
          ++*(_DWORD *)(a1 + 264);
          goto LABEL_11;
        }
        while (1)
        {
          uint64_t v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
          if (v12 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v13 + 32 * v12 + 16) == v7) {
            goto LABEL_7;
          }
        }
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
    re::HashTable<re::ecs2::AcousticMeshComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AcousticMeshComponent *>,re::EqualTo<re::ecs2::AcousticMeshComponent *>,true,false>::addEmplace<re::ecs2::AudioDebugComponent const*&>(a1 + 224, v11, v10, &v27, &v28);
    goto LABEL_10;
  }
LABEL_11:
  unint64_t v14 = re::ecs2::EntityComponentCollection::get(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (!v14) {
    goto LABEL_21;
  }
  unint64_t v27 = v14;
  unint64_t v15 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27));
  unint64_t v16 = v15 ^ (v15 >> 31);
  if (!*(void *)(a1 + 272))
  {
    LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 0;
    goto LABEL_19;
  }
  unint64_t v17 = v16 % *(unsigned int *)(a1 + 296);
  uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 280) + 4 * v17);
  if (v18 == 0x7FFFFFFF)
  {
LABEL_19:
    re::HashTable<unsigned long long,void (*)(unsigned long long),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<void (*&)(unsigned long long)>(a1 + 272, v17, v16, &v27, &v28);
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)(a1 + 288);
  while (*(void *)(v19 + 32 * v18 + 16) != v14)
  {
    uint64_t v18 = *(_DWORD *)(v19 + 32 * v18 + 8) & 0x7FFFFFFF;
    if (v18 == 0x7FFFFFFF) {
      goto LABEL_19;
    }
  }
  *(void *)(v19 + 32 * v18 + 24) = a3;
LABEL_20:
  ++*(_DWORD *)(a1 + 312);
LABEL_21:
  uint64_t v20 = a2[41];
  if (v20)
  {
    int v21 = (uint64_t *)a2[43];
    uint64_t v22 = 8 * v20;
    do
    {
      uint64_t v23 = *v21;
      if (*v21)
      {
        id v24 = (id)(v23 + 8);
        uint64_t v25 = re::ecs2::EntityComponentCollection::get(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = a3;
        }
        re::ecs2::AudioDebugSystem::didAddComponentsRecursive(a1, v23, v26);
      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
}

uint64_t re::HashTable<re::ecs2::AudioPlayerComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AudioPlayerComponent *>,re::EqualTo<re::ecs2::AudioPlayerComponent *>,true,false>::add<re::ecs2::AudioDebugComponent const*&>(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 32 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 32 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  double result = re::HashTable<unsigned long long,void (*)(unsigned long long),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<void (*&)(unsigned long long)>(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void collectEntitiesRecursive(uint64_t a1, void *a2)
{
  uint64_t v10 = a2;
  if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1, (uint64_t *)&v10))
  {
    uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v4 | re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
    {
      uint64_t v10 = a2;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1, (uint64_t *)&v10);
    }
    uint64_t v5 = a2[41];
    if (v5)
    {
      uint64_t v6 = (uint64_t *)a2[43];
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6;
        if (*v6)
        {
          id v9 = (id)(v8 + 8);
          collectEntitiesRecursive(a1, v8);
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
}

uint64_t re::ecs2::AudioDebugSystem::didAddAcousticMeshComponents(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a3;
    uint64_t v6 = (void *)(a1 + 224);
    uint64_t v7 = &a3[a4];
    do
    {
      unint64_t v8 = *v4;
      unint64_t v16 = v8;
      id v9 = *(_anonymous_namespace_ **)(v8 + 16);
      if (v9)
      {
        if (AudioDebugComponentFromEntity)
        {
          unint64_t v10 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
          unint64_t v11 = v10 ^ (v10 >> 31);
          if (*v6)
          {
            a2 = v11 % *(unsigned int *)(a1 + 248);
            uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 232) + 4 * a2);
            if (v12 != 0x7FFFFFFF)
            {
              uint64_t v13 = *(void *)(a1 + 240);
              while (*(void *)(v13 + 32 * v12 + 16) != v8)
              {
                uint64_t v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
                if (v12 == 0x7FFFFFFF) {
                  goto LABEL_12;
                }
              }
              goto LABEL_13;
            }
          }
          else
          {
            LODWORD(a2) = 0;
          }
LABEL_12:
          re::HashTable<re::ecs2::AcousticMeshComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AcousticMeshComponent *>,re::EqualTo<re::ecs2::AcousticMeshComponent *>,true,false>::addEmplace<re::ecs2::AudioDebugComponent const*&>((uint64_t)v6, a2, v11, &v16, &AudioDebugComponentFromEntity);
          ++*(_DWORD *)(a1 + 264);
        }
      }
LABEL_13:
      ++v4;
    }
    while (v4 != v7);
  }
  return 0;
}

uint64_t anonymous namespace'::getAudioDebugComponentFromEntity(_anonymous_namespace_ *this, const re::ecs2::Entity *a2)
{
  do
  {
    uint64_t result = re::ecs2::EntityComponentCollection::get((_anonymous_namespace_ *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    uint64_t v4 = *((void *)this + 3);
    if (!v4) {
      break;
    }
    int v5 = *(_DWORD *)(v4 + 288);
    this = (v5 & 0x80) != 0 ? 0 : (_anonymous_namespace_ *)*((void *)this + 3);
  }
  while ((v5 & 0x80) == 0 && !result);
  return result;
}

uint64_t re::ecs2::AudioDebugSystem::willRemoveAcousticMeshComponents(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = a1 + 224;
    uint64_t v6 = 8 * a4;
    do
    {
      unint64_t v7 = *a3++;
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(v5, v7);
      v6 -= 8;
    }
    while (v6);
  }
  return 0;
}

uint64_t re::ecs2::AudioDebugSystem::didAddAudioPlayerComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v7 = re::ecs2::ComponentHelper::privateSceneDataEntity(*(re::ecs2::ComponentHelper **)(a2 + 120), (re::ecs2::Scene *)1);
  uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (a4)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + 272;
    uint64_t v12 = 8 * a4;
    do
    {
      uint64_t v18 = *a3;
      uint64_t v13 = *(_anonymous_namespace_ **)(v18 + 16);
      if (v13)
      {
        if (AudioDebugComponentFromEntity) {
          uint64_t v15 = AudioDebugComponentFromEntity;
        }
        else {
          uint64_t v15 = v10;
        }
        uint64_t v17 = v15;
        if (v15) {
          re::HashTable<re::ecs2::AudioPlayerComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AudioPlayerComponent *>,re::EqualTo<re::ecs2::AudioPlayerComponent *>,true,false>::add<re::ecs2::AudioDebugComponent const*&>(v11, &v18, &v17);
        }
      }
      ++a3;
      v12 -= 8;
    }
    while (v12);
  }
  return 0;
}

uint64_t re::ecs2::AudioDebugSystem::willRemoveAudioPlayerComponents(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = a1 + 272;
    uint64_t v6 = 8 * a4;
    do
    {
      unint64_t v7 = *a3++;
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(v5, v7);
      v6 -= 8;
    }
    while (v6);
  }
  return 0;
}

uint64_t re::ecs2::AudioDebugSystem::update(uint64_t result, re::ecs2::ComponentHelper *a2, uint64_t a3)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if ((a3 & 0x100000000) == 0)
    {
      uint64_t v3 = a2;
      uint64_t v4 = result;
      uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(result + 40) + 32))(*(void *)(result + 40));
      uint64_t result = re::ServiceLocator::serviceOrNull<re::Engine>(v5);
      if (!result || (*(unsigned char *)(result + 424) & 0x10) != 0)
      {
        uint64_t v6 = *(void *)(v4 + 112);
        if (v6)
        {
          LODWORD(v89) = 0;
          float32x4_t v87 = 0u;
          int32x4_t v88 = 0u;
          *(void *)((char *)&v89 + 4) = 0x7FFFFFFFLL;
          if (*(_DWORD *)(v4 + 252))
          {
            re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v105, *(void *)(*(void *)(*(void *)(v6 + 104) + 312) + 224), *(re::RenderManager **)(*(void *)(*(void *)(v6 + 104) + 312) + 248));
            re::audio::MeshVisualizer::setMaterial(*(re::audio::MeshVisualizer **)(v4 + 128), *(re::RenderManager **)(v4 + 112), (re::PrimitiveRenderingContext *)v105);
            uint64_t v7 = *(unsigned int *)(v4 + 256);
            if (v7)
            {
              uint64_t v8 = 0;
              id v9 = (int *)(*(void *)(v4 + 240) + 8);
              while (1)
              {
                int v10 = *v9;
                v9 += 8;
                if (v10 < 0) {
                  break;
                }
                if (v7 == ++v8)
                {
                  LODWORD(v8) = *(_DWORD *)(v4 + 256);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v8) = 0;
            }
            if (v7 != v8)
            {
              uint64_t v11 = v8;
              unsigned int v12 = *(_DWORD *)(v4 + 256);
              do
              {
                uint64_t v13 = *(void *)(v4 + 240) + 32 * v11;
                uint64_t v14 = *(void *)(v13 + 24);
                if (v14 && *(_DWORD *)(v14 + 32) && *(unsigned char *)(v14 + 25) == 1)
                {
                  uint64_t v15 = *(void *)(v13 + 16);
                  re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformComponent ***)(v15 + 16), *(void *)(v4 + 120), &v90);
                  re::audio::cleanUpTransformForPHASE(&v90, v16, v17, v18, (uint64_t)v93);
                  int32x4_t v83 = 0u;
                  int32x4_t v85 = 0u;
                  int32x4_t v86 = (int32x4_t)xmmword_23435FBB0;
                  re::decomposeScaleRotationTranslation<float>((uint64_t)v93, &v83, &v86, &v85);
                  v84[0] = v83;
                  v84[1] = v86;
                  v84[2] = v85;
                  re::AssetHandle::AssetHandle((re::AssetHandle *)&v83, (const re::AssetHandle *)(v15 + 32));
                  if (v83.i64[1])
                  {
                    unsigned int v19 = atomic_load((unsigned int *)(v83.i64[1] + 704));
                    if (v19 == 2)
                    {
                      uint64_t v20 = re::AssetHandle::asset<re::AcousticMeshAsset>((re::AcousticMeshAsset *)&v83);
                      if (*(_DWORD *)(v20 + 8) == 1)
                      {
                        uint64_t v21 = v20;
                        re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add((uint64_t)&v87, (re::AssetHandle *)&v83);
                        re::AssetHandle::AssetHandle((re::AssetHandle *)v82, (const re::AssetHandle *)&v83);
                        uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(v4 + 40) + 32))(*(void *)(v4 + 40));
                        uint64_t v23 = (re::AssetManager *)re::ServiceLocator::service<re::AssetService>(v22);
                        re::audio::MeshVisualizer::setupMaterials(*(re::audio::MeshVisualizer **)(v4 + 128), v23, *(re::RenderManager **)(v4 + 112));
                        uint64_t v24 = *(void *)(v4 + 128);
                        if (*(unsigned char *)(v4 + 168)
                          || (BOOL v42 = *(_DWORD *)(v24 + 104) == 2, (*(unsigned char *)(v4 + 168) = v42) != 0))
                        {
                          re::AssetHandle::AssetHandle((re::AssetHandle *)v93, (const re::AssetHandle *)v82);
                          re::audio::MeshVisualizer::addDebugVisMesh(v24, (const re::AssetHandle *)v93, v21 + 16);
                          re::AssetHandle::~AssetHandle((re::AssetHandle *)v93);
                          uint64_t v25 = *(void *)(v4 + 128);
                          re::AssetHandle::AssetHandle((re::AssetHandle *)&v90, (const re::AssetHandle *)v82);
                          re::audio::MeshVisualizer::drawDebugVisMesh(v25, (uint64_t)&v90, v84, (uint64_t)v105);
                          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v90);
                        }
                        re::AssetHandle::~AssetHandle((re::AssetHandle *)v82);
                      }
                    }
                  }
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v83);
                  unsigned int v12 = *(_DWORD *)(v4 + 256);
                }
                if (v12 <= (int)v8 + 1) {
                  unsigned int v26 = v8 + 1;
                }
                else {
                  unsigned int v26 = v12;
                }
                while (1)
                {
                  uint64_t v11 = (v8 + 1);
                  if (v26 - 1 == v8) {
                    break;
                  }
                  LODWORD(v8) = v8 + 1;
                  unsigned int v27 = v11;
                  if ((*(_DWORD *)(*(void *)(v4 + 240) + 32 * v11 + 8) & 0x80000000) != 0) {
                    goto LABEL_34;
                  }
                }
                unsigned int v27 = v26;
LABEL_34:
                LODWORD(v8) = v27;
              }
              while (v7 != v27);
            }
            uint64_t v28 = *(void *)(*(void *)(v4 + 112) + 104);
            if (v28) {
              uint64_t v29 = *(void *)(v28 + 312);
            }
            else {
              uint64_t v29 = 0;
            }
            re::PrimitiveRenderer::submitContext(v29, v105);
            if (v117)
            {
              if (v121) {
                (*(void (**)(void))(*(void *)v117 + 40))();
              }
              uint64_t v121 = 0;
              uint64_t v118 = 0;
              uint64_t v119 = 0;
              uint64_t v117 = 0;
              ++v120;
            }
            re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v115);
            if (v110)
            {
              if (v114) {
                (*(void (**)(void))(*(void *)v110 + 40))();
              }
              uint64_t v114 = 0;
              uint64_t v111 = 0;
              uint64_t v112 = 0;
              uint64_t v110 = 0;
              ++v113;
            }
            for (uint64_t i = 122; i != 102; i -= 5)
              re::DynamicArray<unsigned long>::deinit((uint64_t)&v105[i]);
            do
            {
              re::DynamicArray<unsigned long>::deinit((uint64_t)&v105[i]);
              i -= 5;
            }
            while (i != 82);
            do
            {
              re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v105[i]);
              i -= 5;
            }
            while (i != 62);
            for (uint64_t j = 30; j != -5; j -= 5)
              re::DynamicArray<unsigned long>::deinit((uint64_t)&v105[j]);
          }
          re::audio::MeshVisualizer::removeDebugVisMeshesNotInUse(*(void *)(v4 + 128), (uint64_t)&v87);
          re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)&v87);
          if (*(_DWORD *)(v4 + 300))
          {
            uint64_t v32 = *(void *)(*(void *)(v4 + 112) + 104);
            if (v32) {
              uint64_t v79 = *(void *)(v32 + 312);
            }
            else {
              uint64_t v79 = 0;
            }
            LOBYTE(v105[0]) = 0;
            char v122 = 0;
            uint64_t v33 = *(unsigned int *)(v4 + 304);
            if (v33)
            {
              uint64_t v34 = 0;
              uint64_t v35 = (int *)(*(void *)(v4 + 288) + 8);
              while (1)
              {
                int v36 = *v35;
                v35 += 8;
                if (v36 < 0) {
                  break;
                }
                if (v33 == ++v34)
                {
                  LODWORD(v34) = *(_DWORD *)(v4 + 304);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v34) = 0;
            }
            if (v33 != v34)
            {
              uint64_t v37 = v34;
              int v78 = v3;
              unsigned int v38 = *(_DWORD *)(v4 + 304);
              unsigned int v80 = v38;
              do
              {
                uint64_t v39 = *(void *)(v4 + 288) + 32 * v37;
                uint64_t v41 = *(void *)(v39 + 16);
                uint64_t v40 = *(void *)(v39 + 24);
                if (v41) {
                  BOOL v42 = v40 == 0;
                }
                else {
                  BOOL v42 = 1;
                }
                if (!v42)
                {
                  uint64_t v43 = *(re::ecs2::TransformComponent ***)(v41 + 16);
                  if (v43)
                  {
                    if (*(unsigned char *)(v40 + 32))
                    {
                      v86.i64[0] = 0x300000004;
                      v86.i8[8] = 0;
                      uint64_t v44 = *(unsigned int *)(v41 + 112);
                      if (v44)
                      {
                        uint64_t v45 = 0;
                        uint64_t v46 = (int *)(*(void *)(v41 + 96) + 8);
                        while (1)
                        {
                          int v47 = *v46;
                          v46 += 8;
                          if (v47 < 0) {
                            break;
                          }
                          if (v44 == ++v45)
                          {
                            LODWORD(v45) = *(_DWORD *)(v41 + 112);
                            break;
                          }
                        }
                      }
                      else
                      {
                        LODWORD(v45) = 0;
                      }
                      if (v44 == v45)
                      {
                        int v48 = 4;
                        int v49 = 3;
                      }
                      else
                      {
                        long long v81 = v43;
                        __int8 v50 = 0;
                        uint64_t v51 = v45;
                        int v49 = 3;
                        int v48 = 4;
                        unsigned int v52 = *(_DWORD *)(v41 + 112);
                        do
                        {
                          uint64_t v53 = *(void *)(v41 + 96) + 32 * v51;
                          uint64_t v54 = *(void *)(v53 + 24);
                          if (*(unsigned char *)(v54 + 478))
                          {
                            unint64_t v55 = *(void *)(v54 + 256);
                            if (v55) {
                              unint64_t v56 = v55 >> 1;
                            }
                            else {
                              unint64_t v56 = v55 >> 1;
                            }
                            if (v56 || !*(void *)(v54 + 40) && (*(void *)(v54 + 232) || *(void *)(v54 + 240)))
                            {
                              if (v49) {
                                BOOL v57 = v49 == 3;
                              }
                              else {
                                BOOL v57 = 1;
                              }
                              if (v57) {
                                int v49 = 0;
                              }
                              else {
                                int v49 = 2;
                              }
                            }
                            else if (((v49 - 1) & 0xFFFFFFFD) != 0)
                            {
                              int v49 = 2;
                            }
                            else
                            {
                              int v49 = 1;
                            }
                            uint64_t v58 = (uint64_t *)(v53 + 16);
                            int v59 = re::ecs2::AudioPlayerComponent::selectInputMode((re::ecs2::AudioPlayerComponent *)v41, *(void *)(v53 + 16));
                            switch(v59)
                            {
                              case 2:
                                if (v48 == 1 || v48 == 4) {
                                  int v48 = 1;
                                }
                                else {
                                  int v48 = 3;
                                }
                                break;
                              case 1:
                                if (((v48 - 2) & 0xFFFFFFFD) != 0) {
                                  int v48 = 3;
                                }
                                else {
                                  int v48 = 2;
                                }
                                break;
                              case 0:
                                if (v48 == 4) {
                                  int v48 = 0;
                                }
                                else {
                                  int v48 = 3;
                                }
                                break;
                            }
                            v50 |= re::ecs2::AudioPlayerComponent::playbackStateForToken((re::ecs2::AudioPlayerComponent *)v41, *v58) == 1;
                            unsigned int v52 = *(_DWORD *)(v41 + 112);
                          }
                          if (v52 <= (int)v45 + 1) {
                            unsigned int v61 = v45 + 1;
                          }
                          else {
                            unsigned int v61 = v52;
                          }
                          while (1)
                          {
                            uint64_t v51 = (v45 + 1);
                            if (v61 - 1 == v45) {
                              break;
                            }
                            LODWORD(v45) = v45 + 1;
                            unsigned int v62 = v51;
                            if ((*(_DWORD *)(*(void *)(v41 + 96) + 32 * v51 + 8) & 0x80000000) != 0) {
                              goto LABEL_117;
                            }
                          }
                          unsigned int v62 = v61;
LABEL_117:
                          LODWORD(v45) = v62;
                        }
                        while (v44 != v62);
                        v86.i64[0] = __PAIR64__(v49, v48);
                        v86.i8[8] = v50;
                        LODWORD(v33) = v80;
                        uint64_t v43 = v81;
                      }
                      if (v48 != 4 || v49 != 3)
                      {
                        if (!v122)
                        {
                          uint64_t v63 = v43;
                          re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v93, *(void *)(v79 + 224), *(re::RenderManager **)(v79 + 248));
                          std::optional<re::PrimitiveRenderingContext>::operator=[abi:nn180100]<re::PrimitiveRenderingContext,void>((uint64_t)v105, (uint64_t)v93);
                          if (v100)
                          {
                            if (v104) {
                              (*(void (**)(void))(*(void *)v100 + 40))();
                            }
                            uint64_t v104 = 0;
                            uint64_t v101 = 0;
                            uint64_t v102 = 0;
                            uint64_t v100 = 0;
                            ++v103;
                          }
                          re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v99);
                          if (v94)
                          {
                            if (v98) {
                              (*(void (**)(void))(*(void *)v94 + 40))();
                            }
                            uint64_t v98 = 0;
                            uint64_t v95 = 0;
                            uint64_t v96 = 0;
                            uint64_t v94 = 0;
                            ++v97;
                          }
                          for (uint64_t k = 122; k != 102; k -= 5)
                            re::DynamicArray<unsigned long>::deinit((uint64_t)&v93[k]);
                          do
                          {
                            re::DynamicArray<unsigned long>::deinit((uint64_t)&v93[k]);
                            k -= 5;
                          }
                          while (k != 82);
                          do
                          {
                            re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v93[k]);
                            k -= 5;
                          }
                          while (k != 62);
                          for (uint64_t m = 30; m != -5; m -= 5)
                            re::DynamicArray<unsigned long>::deinit((uint64_t)&v93[m]);
                          if (v109)
                          {
                            v105[12] = 0;
                            ++v106;
                            char v109 = 0;
                          }
                          uint64_t v43 = v63;
                          if (v108) {
                            int v108 = 0;
                          }
                          int v107 = 998445679;
                        }
                        re::ecs2::TransformHelper::computeWorldMatrixForRendering(v43, *(void *)(v4 + 120), &v90);
                        re::audio::cleanUpTransformForPHASE(&v90, v66, v67, v68, (uint64_t)v93);
                        v84[0] = 0u;
                        int32x4_t v83 = (int32x4_t)xmmword_23435FBB0;
                        v82[0] = 0u;
                        re::decomposeScaleRotationTranslation<float>((uint64_t)v93, v84, &v83, v82);
                        float32x4_t v87 = (float32x4_t)v84[0];
                        int32x4_t v88 = v83;
                        long long v89 = v82[0];
                        if (!v122 || (re::ecs2::AudioDebugSystem::createAxis(v86.i32[0], &v87, (uint64_t)v105), !v122))
                        {
                          uint64_t v76 = std::__throw_bad_optional_access[abi:nn180100]();
                          return std::optional<re::PrimitiveRenderingContext>::operator=[abi:nn180100]<re::PrimitiveRenderingContext,void>(v76, v77);
                        }
                        re::ecs2::AudioDebugSystem::createShape((unsigned int *)&v86, (uint64_t)&v87, (uint64_t)v105);
                      }
                      unsigned int v38 = *(_DWORD *)(v4 + 304);
                    }
                  }
                }
                if (v38 <= (int)v34 + 1) {
                  unsigned int v69 = v34 + 1;
                }
                else {
                  unsigned int v69 = v38;
                }
                while (1)
                {
                  uint64_t v37 = (v34 + 1);
                  if (v69 - 1 == v34) {
                    break;
                  }
                  LODWORD(v34) = v34 + 1;
                  unsigned int v70 = v37;
                  if ((*(_DWORD *)(*(void *)(v4 + 288) + 32 * v37 + 8) & 0x80000000) != 0) {
                    goto LABEL_155;
                  }
                }
                unsigned int v70 = v69;
LABEL_155:
                LODWORD(v34) = v70;
              }
              while (v33 != v70);
              uint64_t v3 = v78;
              if (v122 && !re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v105))
              {
                char v116 = 0;
                re::PrimitiveRenderer::submitContext(v79, v105);
              }
            }
            std::__optional_destruct_base<re::PrimitiveRenderingContext,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v105);
          }
          v84[0].i64[0] = (uint64_t)v3;
          uint64_t v71 = *(void *)(*(void *)(v4 + 112) + 104);
          if (v71) {
            uint64_t v71 = *(void *)(v71 + 312);
          }
          v83.i64[0] = v71;
          LOBYTE(v105[0]) = 0;
          char v122 = 0;
          int v72 = re::ecs2::ComponentHelper::privateSceneDataEntity(v3, (re::ecs2::Scene *)1);
          *(void *)&v82[0] = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v72 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
          if (*(void *)&v82[0])
          {
            v87.i64[0] = 0;
            v87.i8[8] = 1;
            uint64_t v73 = *(void *)(v4 + 104);
            if (v73)
            {
              uint64_t v74 = (re *)(*(uint64_t (**)(uint64_t, re::ecs2::ComponentHelper *))(*(void *)v73 + 16))(v73, v3);
              v93[0] = v84;
              v93[1] = v82;
              v93[2] = v105;
              v93[3] = &v83;
              v93[4] = v4;
              v93[5] = &v87;
              uint64_t v75 = re::globalAllocators(v74)[2];
              v90.i64[0] = (uint64_t)&unk_26E7018B8;
              v90.i64[1] = (uint64_t)v93;
              uint64_t v91 = v75;
              uint64_t v92 = &v90;
              (*(void (**)(re *, float32x4_t *))(*(void *)v74 + 808))(v74, &v90);
              re::FunctionBase<24ul,void ()(unsigned long long)>::destroyCallable((uint64_t)&v90);
              if (v122)
              {
                if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v105))
                {
                  char v116 = 0;
                  re::PrimitiveRenderer::submitContext(v83.i64[0], v105);
                }
              }
            }
          }
          return std::__optional_destruct_base<re::PrimitiveRenderingContext,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v105);
        }
      }
    }
  }
  return result;
}

uint64_t std::optional<re::PrimitiveRenderingContext>::operator=[abi:nn180100]<re::PrimitiveRenderingContext,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1200))
  {
    for (uint64_t i = 0; i != 280; i += 40)
    {
      if (a1 != a2)
      {
        uint64_t v5 = *(void *)(a1 + i);
        uint64_t v6 = *(void *)(a2 + i);
        if (v5) {
          BOOL v7 = v6 == 0;
        }
        else {
          BOOL v7 = 1;
        }
        if (!v7 && v5 != v6)
        {
          re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
LABEL_61:
          re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
LABEL_62:
          re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
LABEL_63:
          re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
LABEL_64:
          re::internal::assertLog((re::internal *)4, v57, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
          goto LABEL_65;
        }
        uint64_t v9 = a1 + i;
        uint64_t v10 = a2 + i;
        uint64_t v11 = *(void *)(a1 + i + 8);
        uint64_t v12 = *(void *)(a2 + i + 8);
        *(void *)uint64_t v9 = v6;
        *(void *)(v9 + 8) = v12;
        *(void *)uint64_t v10 = v5;
        *(void *)(v10 + 8) = v11;
        uint64_t v13 = *(void *)(a1 + i + 16);
        *(void *)(v9 + 16) = *(void *)(a2 + i + 16);
        *(void *)(v10 + 16) = v13;
        uint64_t v14 = *(void *)(a1 + i + 32);
        *(void *)(v9 + 32) = *(void *)(a2 + i + 32);
        *(void *)(v10 + 32) = v14;
        *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + i + 24) + 1;
        *(_DWORD *)(v9 + 24) = *(_DWORD *)(a1 + i + 24) + 1;
      }
    }
    uint64_t v15 = 0;
    long long v16 = *(_OWORD *)(a2 + 288);
    long long v17 = *(_OWORD *)(a2 + 304);
    long long v18 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v18;
    *(_OWORD *)(a1 + 288) = v16;
    *(_OWORD *)(a1 + 304) = v17;
    long long v19 = *(_OWORD *)(a2 + 352);
    long long v20 = *(_OWORD *)(a2 + 368);
    long long v21 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 40objc_initWeak(location, 0) = v21;
    *(_OWORD *)(a1 + 352) = v19;
    *(_OWORD *)(a1 + 368) = v20;
    long long v22 = *(_OWORD *)(a2 + 416);
    long long v23 = *(_OWORD *)(a2 + 432);
    long long v24 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v24;
    *(_OWORD *)(a1 + 416) = v22;
    *(_OWORD *)(a1 + 432) = v23;
    long long v25 = *(_OWORD *)(a2 + 480);
    long long v26 = *(_OWORD *)(a2 + 496);
    long long v27 = *(_OWORD *)(a2 + 512);
    *(void *)(a1 + 528) = *(void *)(a2 + 528);
    *(_OWORD *)(a1 + 496) = v26;
    *(_OWORD *)(a1 + 512) = v27;
    *(_OWORD *)(a1 + 48objc_initWeak(location, 0) = v25;
    do
    {
      if (a1 != a2)
      {
        uint64_t v28 = *(void *)(a1 + v15 + 536);
        uint64_t v29 = *(void *)(a2 + v15 + 536);
        if (v28) {
          BOOL v30 = v29 == 0;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30 && v28 != v29) {
          goto LABEL_61;
        }
        *(void *)(a1 + v15 + 536) = v29;
        *(void *)(a2 + v15 + 536) = v28;
        uint64_t v32 = a1 + v15;
        uint64_t v33 = a2 + v15;
        uint64_t v34 = *(void *)(a1 + v15 + 544);
        *(void *)(v32 + 544) = *(void *)(a2 + v15 + 544);
        *(void *)(v33 + 544) = v34;
        uint64_t v35 = *(void *)(a1 + v15 + 552);
        *(void *)(v32 + 552) = *(void *)(a2 + v15 + 552);
        *(void *)(v33 + 552) = v35;
        uint64_t v36 = *(void *)(a1 + v15 + 568);
        *(void *)(v32 + 568) = *(void *)(a2 + v15 + 568);
        *(void *)(v33 + 568) = v36;
        *(_DWORD *)(v33 + 56objc_initWeak(location, 0) = *(_DWORD *)(a2 + v15 + 560) + 1;
        *(_DWORD *)(v32 + 56objc_initWeak(location, 0) = *(_DWORD *)(a1 + v15 + 560) + 1;
      }
      v15 += 40;
    }
    while (v15 != 160);
    for (uint64_t j = 0; j != 160; j += 40)
    {
      if (a1 != a2)
      {
        uint64_t v38 = *(void *)(a1 + j + 696);
        uint64_t v39 = *(void *)(a2 + j + 696);
        if (v38) {
          BOOL v40 = v39 == 0;
        }
        else {
          BOOL v40 = 1;
        }
        if (!v40 && v38 != v39) {
          goto LABEL_62;
        }
        *(void *)(a1 + j + 696) = v39;
        *(void *)(a2 + j + 696) = v38;
        uint64_t v42 = a1 + j;
        uint64_t v43 = a2 + j;
        uint64_t v44 = *(void *)(a1 + j + 704);
        *(void *)(v42 + 704) = *(void *)(a2 + j + 704);
        *(void *)(v43 + 704) = v44;
        uint64_t v45 = *(void *)(a1 + j + 712);
        *(void *)(v42 + 712) = *(void *)(a2 + j + 712);
        *(void *)(v43 + 712) = v45;
        uint64_t v46 = *(void *)(a1 + j + 728);
        *(void *)(v42 + 728) = *(void *)(a2 + j + 728);
        *(void *)(v43 + 728) = v46;
        *(_DWORD *)(v43 + 7re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *(_DWORD *)(a2 + j + 720) + 1;
        *(_DWORD *)(v42 + 7re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *(_DWORD *)(a1 + j + 720) + 1;
      }
    }
    for (uint64_t k = 0; k != 160; k += 40)
    {
      if (a1 != a2)
      {
        uint64_t v48 = *(void *)(a1 + k + 856);
        uint64_t v49 = *(void *)(a2 + k + 856);
        if (v48) {
          BOOL v50 = v49 == 0;
        }
        else {
          BOOL v50 = 1;
        }
        if (!v50 && v48 != v49) {
          goto LABEL_63;
        }
        *(void *)(a1 + k + 856) = v49;
        *(void *)(a2 + k + 856) = v48;
        uint64_t v52 = a1 + k;
        uint64_t v53 = a2 + k;
        uint64_t v54 = *(void *)(a1 + k + 864);
        *(void *)(v52 + 864) = *(void *)(a2 + k + 864);
        *(void *)(v53 + 864) = v54;
        uint64_t v55 = *(void *)(a1 + k + 872);
        *(void *)(v52 + 872) = *(void *)(a2 + k + 872);
        *(void *)(v53 + 872) = v55;
        uint64_t v56 = *(void *)(a1 + k + 888);
        *(void *)(v52 + 888) = *(void *)(a2 + k + 888);
        *(void *)(v53 + 888) = v56;
        *(_DWORD *)(v53 + 88objc_initWeak(location, 0) = *(_DWORD *)(a2 + k + 880) + 1;
        *(_DWORD *)(v52 + 88objc_initWeak(location, 0) = *(_DWORD *)(a1 + k + 880) + 1;
      }
    }
    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(a1 + 1016, a2 + 1016);
    if (a1 == a2)
    {
LABEL_58:
      long long v70 = *(_OWORD *)(a2 + 1176);
      *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
      *(_OWORD *)(a1 + 1176) = v70;
      return a1;
    }
    uint64_t v58 = *(void *)(a1 + 1056);
    uint64_t v59 = *(void *)(a2 + 1056);
    if (v58 && v59 && v58 != v59) {
      goto LABEL_64;
    }
    *(void *)(a1 + 1056) = v59;
    *(void *)(a2 + 1056) = v58;
    uint64_t v60 = *(void *)(a1 + 1064);
    *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
    *(void *)(a2 + 1064) = v60;
    uint64_t v61 = *(void *)(a1 + 1072);
    *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
    *(void *)(a2 + 1072) = v61;
    uint64_t v62 = *(void *)(a1 + 1088);
    *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
    *(void *)(a2 + 1088) = v62;
    ++*(_DWORD *)(a2 + 1080);
    ++*(_DWORD *)(a1 + 1080);
    long long v63 = *(_OWORD *)(a2 + 1096);
    long long v64 = *(_OWORD *)(a2 + 1112);
    *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a2 + 1128);
    *(_OWORD *)(a1 + 1096) = v63;
    *(_OWORD *)(a1 + 1112) = v64;
    uint64_t v65 = *(void *)(a1 + 1136);
    uint64_t v66 = *(void *)(a2 + 1136);
    if (!v65 || !v66 || v65 == v66)
    {
      *(void *)(a1 + 1136) = v66;
      *(void *)(a2 + 1136) = v65;
      uint64_t v67 = *(void *)(a1 + 1144);
      *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
      *(void *)(a2 + 1144) = v67;
      uint64_t v68 = *(void *)(a1 + 1152);
      *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
      *(void *)(a2 + 1152) = v68;
      uint64_t v69 = *(void *)(a1 + 1168);
      *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
      *(void *)(a2 + 1168) = v69;
      ++*(_DWORD *)(a2 + 1160);
      ++*(_DWORD *)(a1 + 1160);
      goto LABEL_58;
    }
LABEL_65:
    re::internal::assertLog((re::internal *)4, v57, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    re::PrimitiveRenderingDynamicGeometry::PrimitiveRenderingDynamicGeometry(a1, a2);
    *(void *)(a1 + 1088) = 0;
    *(void *)(a1 + 1056) = 0;
    *(_DWORD *)(a1 + 108objc_initWeak(location, 0) = 0;
    *(void *)(a1 + 1072) = 0;
    *(void *)(a1 + 1064) = 0;
    *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
    *(void *)(a2 + 1056) = 0;
    *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
    *(void *)(a2 + 1064) = 0;
    uint64_t v71 = *(void *)(a1 + 1072);
    *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
    *(void *)(a2 + 1072) = v71;
    uint64_t v72 = *(void *)(a1 + 1088);
    *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
    *(void *)(a2 + 1088) = v72;
    ++*(_DWORD *)(a2 + 1080);
    ++*(_DWORD *)(a1 + 1080);
    long long v73 = *(_OWORD *)(a2 + 1096);
    long long v74 = *(_OWORD *)(a2 + 1112);
    *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a2 + 1128);
    *(_OWORD *)(a1 + 1096) = v73;
    *(_OWORD *)(a1 + 1112) = v74;
    *(void *)(a1 + 1168) = 0;
    *(void *)(a1 + 1136) = 0;
    *(void *)(a1 + 1152) = 0;
    *(void *)(a1 + 1144) = 0;
    *(_DWORD *)(a1 + 116objc_initWeak(location, 0) = 0;
    *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
    *(void *)(a2 + 1136) = 0;
    *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
    *(void *)(a2 + 1144) = 0;
    uint64_t v75 = *(void *)(a1 + 1152);
    *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
    *(void *)(a2 + 1152) = v75;
    uint64_t v76 = *(void *)(a1 + 1168);
    *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
    *(void *)(a2 + 1168) = v76;
    ++*(_DWORD *)(a2 + 1160);
    ++*(_DWORD *)(a1 + 1160);
    long long v77 = *(_OWORD *)(a2 + 1176);
    *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
    *(_OWORD *)(a1 + 1176) = v77;
    *(unsigned char *)(a1 + 120objc_initWeak(location, 0) = 1;
    return a1;
  }
  return result;
}

float re::ecs2::AudioDebugSystem::createAxis(int a1, float32x4_t *a2, uint64_t a3)
{
  if (a1 != 2)
  {
    uint64_t v37 = v3;
    uint64_t v38 = v4;
    float32x4_t v6 = a2[1];
    float32x4_t v36 = a2[2];
    float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL);
    float32x4_t v8 = vnegq_f32(v6);
    float32x4_t v9 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_23437C080), (float32x4_t)xmmword_23435FD50, v7);
    int8x16_t v10 = (int8x16_t)vaddq_f32(v9, v9);
    float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL);
    int8x16_t v12 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v8), v11, v7);
    float32x4_t v13 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v11, v6, 3), (float32x4_t)xmmword_23435FD50), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL));
    float32x4_t v14 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_23437C090), (float32x4_t)xmmword_23435FD60, v7);
    int8x16_t v15 = (int8x16_t)vaddq_f32(v14, v14);
    float32x4_t v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), v15, 0xCuLL);
    int8x16_t v17 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), v8), v16, v7);
    float32x4_t v18 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v16, v6, 3), (float32x4_t)xmmword_23435FD60), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL));
    float32x4_t v19 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_23437C0A0), (float32x4_t)xmmword_23435FD80, v7);
    int8x16_t v20 = (int8x16_t)vaddq_f32(v19, v19);
    float32x4_t v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL);
    int8x16_t v22 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v8), v21, v7);
    float32x4_t v23 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v21, v6, 3), (float32x4_t)xmmword_23435FD80), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL));
    float32x4_t v24 = vmulq_f32(v13, v13);
    float32x4_t v25 = vmulq_n_f32(v13, 0.1/ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]));
    float32x4_t v26 = vmulq_f32(v18, v18);
    float32x4_t v27 = vmulq_n_f32(v18, 0.1/ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]));
    float32x4_t v28 = vmulq_f32(v23, v23);
    float32x4_t v33 = v27;
    float32x4_t v34 = vmulq_n_f32(v23, 0.1/ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]));
    float32x4_t v35 = vaddq_f32(v36, v25);
    unint64_t v29 = re::PrimitiveRenderingContext::addLine(a3, &v36, &v35);
    float32x4_t v35 = vaddq_f32(v36, v33);
    unint64_t v30 = re::PrimitiveRenderingContext::addLine(a3, &v36, &v35);
    float32x4_t v35 = vaddq_f32(v36, v34);
    unint64_t v31 = re::PrimitiveRenderingContext::addLine(a3, &v36, &v35);
    float32x4_t v35 = (float32x4_t)xmmword_234376D50;
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v29, (__n128 *)&v35, (_anonymous_namespace_ *)(a3 + 200), (unsigned char *)(a3 + 517), *(void *)(a3 + 136), *(void *)(a3 + 528), *(re **)(a3 + 1192));
    float32x4_t v35 = (float32x4_t)xmmword_234385470;
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v30, (__n128 *)&v35, (_anonymous_namespace_ *)(a3 + 200), (unsigned char *)(a3 + 517), *(void *)(a3 + 136), *(void *)(a3 + 528), *(re **)(a3 + 1192));
    float32x4_t v35 = (float32x4_t)xmmword_2343854A0;
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v31, (__n128 *)&v35, (_anonymous_namespace_ *)(a3 + 200), (unsigned char *)(a3 + 517), *(void *)(a3 + 136), *(void *)(a3 + 528), *(re **)(a3 + 1192));
  }
  return result;
}

double re::ecs2::AudioDebugSystem::createShape(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _Q0 = *(float32x4_t *)(a2 + 16);
  float32x4_t v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL);
  float32x4_t v7 = vnegq_f32(_Q0);
  float32x4_t v8 = vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_23437C080), (float32x4_t)xmmword_23435FD50, v6);
  int8x16_t v9 = (int8x16_t)vaddq_f32(v8, v8);
  float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), v9, 0xCuLL);
  int8x16_t v11 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), v7), v10, v6);
  float32x4_t v12 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v10, _Q0, 3), (float32x4_t)xmmword_23435FD50), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), v11, 0xCuLL));
  float32x4_t v13 = vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_234390E80), (float32x4_t)xmmword_234382760, v6);
  int8x16_t v14 = (int8x16_t)vaddq_f32(v13, v13);
  float32x4_t v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL);
  int8x16_t v16 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), v7), v15, v6);
  float32x4_t v17 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v15, _Q0, 3), (float32x4_t)xmmword_234382760), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL));
  float32x4_t v18 = vmulq_f32(v12, v12);
  LODWORD(v19) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).u32[0];
  if (fabsf(v19) >= 1.0e-10)
  {
    float v20 = v19;
    float32x2_t v21 = vrsqrte_f32((float32x2_t)LODWORD(v19));
    float32x2_t v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)LODWORD(v20), vmul_f32(v21, v21)));
    float32x4_t v12 = vmulq_n_f32(v12, vmul_f32(v22, vrsqrts_f32((float32x2_t)LODWORD(v20), vmul_f32(v22, v22))).f32[0]);
  }
  float32x4_t v23 = vmulq_f32(v17, v17);
  LODWORD(v24) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).u32[0];
  if (fabsf(v24) >= 1.0e-10)
  {
    float v25 = v24;
    float32x2_t v26 = vrsqrte_f32((float32x2_t)LODWORD(v24));
    float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)LODWORD(v25), vmul_f32(v26, v26)));
    float32x4_t v17 = vmulq_n_f32(v17, vmul_f32(v27, vrsqrts_f32((float32x2_t)LODWORD(v25), vmul_f32(v27, v27))).f32[0]);
  }
  float32x4_t v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q0, 3);
  float32x4_t v29 = vmulq_f32(v12, v17);
  int32x2_t v30 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u64[0];
  if (*(float *)v30.i32 == -1.0
    || (float v31 = (float)((float)(fabsf(*(float *)v30.i32) + 1.0) + 1.0) * 0.00001,
        *(float *)v30.i32 = *(float *)v30.i32 + 1.0,
        fabsf(*(float *)v30.i32) < v31))
  {
    if (fabsf(v12.f32[2]) >= 0.00001)
    {
      v32.i32[0] = 0;
      v32.f32[1] = -v12.f32[2];
      v32.i64[1] = v12.u32[1];
    }
    else
    {
      float32x4_t v32 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v12.f32[1]), (int32x4_t)v12);
    }
    int32x4_t v33 = (int32x4_t)vmulq_f32(v32, v32);
    v33.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v33, 2), vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1))).u32[0];
    float32x2_t v34 = vrsqrte_f32((float32x2_t)v33.u32[0]);
    float32x2_t v35 = vmul_f32(v34, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v34, v34)));
    float32x4_t v36 = vmulq_n_f32(v32, vmul_f32(v35, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v35, v35))).f32[0]);
    _S3 = 0.0;
  }
  else
  {
    int8x16_t v38 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), vnegq_f32(v12)), v17, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
    float32x4_t v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), v38, 0xCuLL);
    *(float *)v30.i32 = sqrtf(*(float *)v30.i32 + *(float *)v30.i32);
    _S3 = *(float *)v30.i32 * 0.5;
    float32x4_t v36 = vdivq_f32(v39, (float32x4_t)vdupq_lane_s32(v30, 0));
  }
  _Q2 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), v7), v36, v6);
  float32x4_t v41 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL), v36, v28), _Q0, _S3);
  __asm { FMLA            S2, S3, V0.S[3] }
  v41.i32[3] = _Q2.i32[0];
  float32x4_t v54 = v41;
  unint64_t v46 = *a1;
  if (v46 >= 5) {
    unsigned __int8 v47 = 0;
  }
  else {
    unsigned __int8 v47 = 0x607000304uLL >> (8 * v46);
  }
  unint64_t v48 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a3, v47 & 7, (_OWORD *)(a2 + 32), &v54);
  int32x4_t v53 = vdupq_n_s32(0x3CCCCCCDu);
  re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a3, v48, v47 & 7, 2, (__n128 *)&v53);
  unsigned int v49 = a1[1];
  if (v49 == 2)
  {
    long long v50 = xmmword_234399D90;
  }
  else if (v49 == 1)
  {
    long long v50 = xmmword_23435FD80;
  }
  else
  {
    *(void *)&long long v50 = 0;
    DWORD2(v5objc_initWeak(location, 0) = 0;
    if (!v49) {
      long long v50 = xmmword_23435FD50;
    }
  }
  float v51 = 1.0;
  if (!*((unsigned char *)a1 + 8)) {
    float v51 = 0.25;
  }
  *((float *)&v50 + 3) = v51;
  int32x4_t v53 = (int32x4_t)v50;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a3, v48, v47, 3, (__n128 *)&v53);
}

uint64_t re::AssetHandle::asset<re::AcousticMeshAsset>(re::AcousticMeshAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::AcousticMeshAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      float32x4_t v6 = v4;
      float32x4_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        float32x4_t v8 = (char *)v7[18];
      }
      else {
        float32x4_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      float32x4_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

void re::introspect_AudioDebugDrawMode(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89BA0, memory_order_acquire) & 1) == 0)
  {
    float v24 = (re *)__cxa_guard_acquire(&qword_26AF89BA0);
    if (v24)
    {
      float v25 = re::introspectionAllocator(v24);
      float32x2_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)float32x2_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Wireframe";
      qword_26AF89C00 = (uint64_t)v26;
      float32x2_t v27 = re::introspectionAllocator(v26);
      float32x4_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)float32x4_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Solid";
      qword_26AF89C08 = (uint64_t)v28;
      float32x4_t v29 = re::introspectionAllocator(v28);
      int32x2_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)int32x2_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Transparent";
      qword_26AF89C10 = (uint64_t)v30;
      float v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = 3;
      *(void *)(v32 + 16) = "Lines";
      qword_26AF89C18 = v32;
      __cxa_guard_release(&qword_26AF89BA0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89BA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89BA8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF89C60, "AudioDebugDrawMode", 4, 4, 1, 1);
    qword_26AF89C60 = (uint64_t)&unk_26E715E00;
    qword_26AF89CA0 = (uint64_t)&re::introspect_AudioDebugDrawMode(BOOL)::enumTable;
    dword_26AF89C70 = 9;
    __cxa_guard_release(&qword_26AF89BA8);
  }
  if ((_MergedGlobals_255 & 1) == 0)
  {
    _MergedGlobals_255 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF89C60, a2);
    uint64_t v34 = 0xFA7BEE5A61D098C8;
    float32x2_t v35 = "AudioDebugDrawMode";
    v38[0] = 208862;
    v38[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v38);
      uint64_t v4 = (unsigned int *)qword_26AF89CA0;
      v37[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            int v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  float32x4_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v36.var0 = 2 * v10;
            v36.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v14, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              float32x4_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    float v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v36.var0 = 2 * v18;
              v36.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v22, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v23);
      xmmword_26AF89C80 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AudioDebugDrawMode", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_AudioDebugDrawLevel(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89BB0, memory_order_acquire) & 1) == 0)
  {
    float v24 = (re *)__cxa_guard_acquire(&qword_26AF89BB0);
    if (v24)
    {
      float v25 = re::introspectionAllocator(v24);
      float32x2_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)float32x2_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Disabled";
      qword_26AF89BE8 = (uint64_t)v26;
      float32x2_t v27 = re::introspectionAllocator(v26);
      float32x4_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)float32x4_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "ECSComponent";
      qword_26AF89BF0 = (uint64_t)v28;
      float32x4_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "PHASE";
      qword_26AF89BF8 = v30;
      __cxa_guard_release(&qword_26AF89BB0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89BB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89BB8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF89CA8, "AudioDebugDrawLevel", 1, 1, 1, 1);
    qword_26AF89CA8 = (uint64_t)&unk_26E715E00;
    qword_26AF89CE8 = (uint64_t)&re::introspect_AudioDebugDrawLevel(BOOL)::enumTable;
    dword_26AF89CB8 = 9;
    __cxa_guard_release(&qword_26AF89BB8);
  }
  if ((byte_26AF89B99 & 1) == 0)
  {
    byte_26AF89B99 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF89CA8, a2);
    uint64_t v32 = 0x5501DCF1D81DC1C6;
    uint64_t v33 = "AudioDebugDrawLevel";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF89CE8;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            int v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  float32x4_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              float32x4_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    float v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF89CC8 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AudioDebugDrawLevel", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_AudioDebugDrawOptions(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89BC0, memory_order_acquire) & 1) == 0)
  {
    float v24 = (re *)__cxa_guard_acquire(&qword_26AF89BC0);
    if (v24)
    {
      float v25 = re::introspectionAllocator(v24);
      float32x2_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)float32x2_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Disabled";
      qword_26AF89C20 = (uint64_t)v26;
      float32x2_t v27 = re::introspectionAllocator(v26);
      float32x4_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)float32x4_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "AudioSources";
      qword_26AF89C28 = (uint64_t)v28;
      float32x4_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "VirtualAcousticGeometries";
      qword_26AF89C30 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = 4;
      *(void *)(v32 + 16) = "ARAcousticGeometries";
      qword_26AF89C38 = v32;
      __cxa_guard_release(&qword_26AF89BC0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89BC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89BC8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF89CF0, "AudioDebugDrawOptions", 4, 4, 1, 1);
    qword_26AF89CF0 = (uint64_t)&unk_26E715E00;
    qword_26AF89D30 = (uint64_t)&re::introspect_AudioDebugDrawOptions(BOOL)::enumTable;
    dword_26AF89D00 = 9;
    __cxa_guard_release(&qword_26AF89BC8);
  }
  if ((byte_26AF89B9A & 1) == 0)
  {
    byte_26AF89B9A = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF89CF0, a2);
    uint64_t v34 = 0x1BFE67DDAA6FE07ALL;
    float32x2_t v35 = "AudioDebugDrawOptions";
    v38[0] = 0x607DD0F01DCLL;
    v38[1] = "uint32_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v38);
      uint64_t v4 = (unsigned int *)qword_26AF89D30;
      v37[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            int v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  float32x4_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v36.var0 = 2 * v10;
            v36.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v14, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              float32x4_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    float v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v36.var0 = 2 * v18;
              v36.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v22, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v23);
      xmmword_26AF89D10 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AudioDebugDrawOptions", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_AudioDebugComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89BD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89BD0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89D38, "AudioDebugComponent");
    __cxa_guard_release(&qword_26AF89BD0);
  }
  return &unk_26AF89D38;
}

void re::ecs2::initInfo_AudioDebugComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x5501DB4321E1AA80;
  v18[1] = "AudioDebugComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89BD8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF89BD8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF89C40 = v7;
      uint64_t v8 = (re *)re::introspectionAllocator((re *)v7);
      re::introspect_AudioDebugDrawLevel(v8, v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "debugDrawLevel";
      *(void *)(v10 + 16) = &qword_26AF89CA8;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x1900000001;
      *(_DWORD *)(v10 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF89C48 = v10;
      char v11 = (re *)re::introspectionAllocator((re *)v10);
      re::introspect_AudioDebugDrawMode(v11, v12);
      uint64_t v13 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "debugDrawMode";
      *(void *)(v13 + 16) = &qword_26AF89C60;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x1C00000002;
      *(_DWORD *)(v13 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF89C50 = v13;
      uint64_t v14 = (re *)re::introspectionAllocator((re *)v13);
      re::introspect_AudioDebugDrawOptions(v14, v15);
      uint64_t v16 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "debugDrawOptions";
      *(void *)(v16 + 16) = &qword_26AF89CF0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x2000000003;
      *(_DWORD *)(v16 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF89C58 = v16;
      __cxa_guard_release(&qword_26AF89BD8);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF89C40;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioDebugComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::AudioDebugComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioDebugComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioDebugComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

double re::internal::defaultConstruct<re::ecs2::AudioDebugComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 256;
  *(void *)uint64_t v3 = &unk_26E6E7FC0;
  *(void *)&double result = 3;
  *(void *)(v3 + 28) = 3;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioDebugComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AudioDebugComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 256;
  *(void *)uint64_t v1 = &unk_26E6E7FC0;
  *(void *)&double result = 3;
  *(void *)(v1 + 28) = 3;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioDebugComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioDebugComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioDebugComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioDebugComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioDebugComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioDebugComponent>, this);
}

void *re::ecs2::allocInfo_AudioDebugSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89BE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89BE0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89DB0, "AudioDebugSystem");
    __cxa_guard_release(&qword_26AF89BE0);
  }
  return &unk_26AF89DB0;
}

void re::ecs2::initInfo_AudioDebugSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xBB723698560B198;
  v5[1] = "AudioDebugSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AudioDebugSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioDebugSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::AudioDebugSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioDebugSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioDebugSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::AudioDebugSystem *re::internal::defaultConstruct<re::ecs2::AudioDebugSystem>(int a1, int a2, re::ecs2::AudioDebugSystem *this)
{
  return re::ecs2::AudioDebugSystem::AudioDebugSystem(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioDebugSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioDebugSystem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioDebugSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioDebugSystem>, this);
}

void re::ecs2::AudioDebugSystem::~AudioDebugSystem(re::ecs2::AudioDebugSystem *this)
{
  *(void *)this = &unk_26E7017A0;
  uint64_t v2 = (uint64_t *)((char *)this + 128);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 34);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 28);
  re::AssetHandle::~AssetHandle((re::ecs2::AudioDebugSystem *)((char *)this + 200));
  re::AssetHandle::~AssetHandle((re::ecs2::AudioDebugSystem *)((char *)this + 176));
  std::unique_ptr<re::audio::MeshVisualizer,std::function<void ()(re::audio::MeshVisualizer*)>>::~unique_ptr[abi:nn180100](v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E7017A0;
  uint64_t v2 = (uint64_t *)((char *)this + 128);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 34);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 28);
  re::AssetHandle::~AssetHandle((re::ecs2::AudioDebugSystem *)((char *)this + 200));
  re::AssetHandle::~AssetHandle((re::ecs2::AudioDebugSystem *)((char *)this + 176));
  std::unique_ptr<re::audio::MeshVisualizer,std::function<void ()(re::audio::MeshVisualizer*)>>::~unique_ptr[abi:nn180100](v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AudioDebugSystem::typeInfo(re::ecs2::AudioDebugSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioDebugSystem>, 0);
}

uint64_t std::__optional_destruct_base<re::PrimitiveRenderingContext,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1200))
  {
    re::DynamicArray<unsigned long>::deinit(a1 + 1136);
    re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(a1 + 1056);
    re::DynamicArray<unsigned long>::deinit(a1 + 1016);
    for (uint64_t i = 0; i != -160; i -= 40)
      re::DynamicArray<unsigned long>::deinit(a1 + 976 + i);
    for (uint64_t j = 0; j != -160; j -= 40)
      re::DynamicArray<unsigned long>::deinit(a1 + 816 + j);
    for (uint64_t k = 0; k != -160; k -= 40)
      re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a1 + 656 + k);
    for (uint64_t m = 240; m != -40; m -= 40)
      re::DynamicArray<unsigned long>::deinit(a1 + m);
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(unsigned long long)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t *std::unique_ptr<re::audio::MeshVisualizer,std::function<void ()(re::audio::MeshVisualizer*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t v3 = a1[4];
  uint64_t v6 = v2;
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v6);
LABEL_4:
    std::__function::__value_func<void ()(re::audio::MeshVisualizer *)>::~__value_func[abi:nn180100](a1 + 1);
    return a1;
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<void ()(re::audio::MeshVisualizer *)>::~__value_func[abi:nn180100](v5);
}

void *std::__function::__value_func<void ()(re::audio::MeshVisualizer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

re::audio::MeshVisualizer *re::audio::MeshVisualizer::MeshVisualizer(re::audio::MeshVisualizer *this)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 36) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 3objc_initWeak(location, 0) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 8) = _Q0;
  *((_OWORD *)this + 9) = _Q0;
  re::audio::ColorPaletteEditorMaterial::ColorPaletteEditorMaterial((re::audio::MeshVisualizer *)((char *)this + 160));
  re::audio::ColorPaletteARKitMaterial::ColorPaletteARKitMaterial((re::audio::MeshVisualizer *)((char *)this + 240));
  re::audio::ColorPaletteARKitClassification::ColorPaletteARKitClassification((re::audio::MeshVisualizer *)((char *)this + 320));
  *((_WORD *)this + 20objc_initWeak(location, 0) = 257;
  *((unsigned char *)this + 402) = 1;
  return this;
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EE7__cloneEv()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E701828;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EE7__cloneEPNS0_6__baseISK_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26E701828;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EEclEOSG_(re *result, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    long long v4 = (void *)v2[46];
    if (v4) {
      operator delete(v4);
    }
    uint64_t v5 = (void *)v2[40];
    if (v5)
    {
      v2[41] = (uint64_t)v5;
      operator delete(v5);
    }
    uint64_t v6 = (void *)v2[36];
    if (v6) {
      operator delete(v6);
    }
    uint64_t v7 = (void *)v2[30];
    if (v7)
    {
      v2[31] = (uint64_t)v7;
      operator delete(v7);
    }
    uint64_t v8 = (void *)v2[26];
    if (v8) {
      operator delete(v8);
    }
    int v9 = (void *)v2[20];
    if (v9)
    {
      v2[21] = (uint64_t)v9;
      operator delete(v9);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(v2 + 9));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(v2 + 6));
    v10.n128_f64[0] = re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v2);
    char v11 = *(uint64_t (**)(uint64_t, uint64_t *, __n128))(*(void *)v3 + 40);
    return (re *)v11(v3, v2, v10);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EE11target_typeEv()
{
}

double re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 56;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 16));
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v3);
    }
  }
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::HashTable<re::ecs2::AcousticMeshComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AcousticMeshComponent *>,re::EqualTo<re::ecs2::AcousticMeshComponent *>,true,false>::addEmplace<re::ecs2::AudioDebugComponent const*&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t re::PrimitiveRenderingDynamicGeometry::PrimitiveRenderingDynamicGeometry(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 0; i != 280; i += 40)
  {
    uint64_t v3 = result + i;
    uint64_t v4 = a2 + i;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0;
    *(void *)uint64_t v3 = 0;
    *(_DWORD *)(v3 + 24) = 0;
    uint64_t v5 = *(void *)(a2 + i + 8);
    *(void *)uint64_t v3 = *(void *)(a2 + i);
    *(void *)(v3 + 8) = v5;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    uint64_t v6 = *(void *)(result + i + 16);
    *(void *)(v3 + 16) = *(void *)(a2 + i + 16);
    *(void *)(v4 + 16) = v6;
    uint64_t v7 = *(void *)(result + i + 32);
    *(void *)(v3 + 32) = *(void *)(a2 + i + 32);
    *(void *)(v4 + 32) = v7;
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + i + 24) + 1;
    *(_DWORD *)(v3 + 24) = *(_DWORD *)(result + i + 24) + 1;
  }
  uint64_t v8 = 0;
  long long v9 = *(_OWORD *)(a2 + 288);
  long long v10 = *(_OWORD *)(a2 + 304);
  long long v11 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(result + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(result + 336) = v11;
  *(_OWORD *)(result + 288) = v9;
  *(_OWORD *)(result + 304) = v10;
  long long v12 = *(_OWORD *)(a2 + 352);
  long long v13 = *(_OWORD *)(a2 + 368);
  long long v14 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(result + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(result + 40objc_initWeak(location, 0) = v14;
  *(_OWORD *)(result + 352) = v12;
  *(_OWORD *)(result + 368) = v13;
  long long v15 = *(_OWORD *)(a2 + 416);
  long long v16 = *(_OWORD *)(a2 + 432);
  long long v17 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(result + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(result + 464) = v17;
  *(_OWORD *)(result + 416) = v15;
  *(_OWORD *)(result + 432) = v16;
  long long v18 = *(_OWORD *)(a2 + 480);
  long long v19 = *(_OWORD *)(a2 + 496);
  long long v20 = *(_OWORD *)(a2 + 512);
  *(void *)(result + 528) = *(void *)(a2 + 528);
  *(_OWORD *)(result + 496) = v19;
  *(_OWORD *)(result + 512) = v20;
  *(_OWORD *)(result + 48objc_initWeak(location, 0) = v18;
  do
  {
    uint64_t v21 = result + v8;
    uint64_t v22 = a2 + v8;
    *(void *)(v21 + 568) = 0;
    *(void *)(v21 + 536) = 0;
    *(void *)(v21 + 552) = 0;
    *(void *)(v21 + 544) = 0;
    *(_DWORD *)(v21 + 56objc_initWeak(location, 0) = 0;
    *(void *)(v21 + 536) = *(void *)(a2 + v8 + 536);
    *(void *)(v22 + 536) = 0;
    *(void *)(v21 + 544) = *(void *)(a2 + v8 + 544);
    *(void *)(v22 + 544) = 0;
    uint64_t v23 = *(void *)(result + v8 + 552);
    *(void *)(v21 + 552) = *(void *)(a2 + v8 + 552);
    *(void *)(v22 + 552) = v23;
    uint64_t v24 = *(void *)(result + v8 + 568);
    *(void *)(v21 + 568) = *(void *)(a2 + v8 + 568);
    *(void *)(v22 + 568) = v24;
    *(_DWORD *)(v22 + 56objc_initWeak(location, 0) = *(_DWORD *)(a2 + v8 + 560) + 1;
    *(_DWORD *)(v21 + 56objc_initWeak(location, 0) = *(_DWORD *)(result + v8 + 560) + 1;
    v8 += 40;
  }
  while (v8 != 160);
  for (uint64_t j = 0; j != 160; j += 40)
  {
    uint64_t v26 = result + j;
    uint64_t v27 = a2 + j;
    *(void *)(v26 + 728) = 0;
    *(void *)(v26 + 696) = 0;
    *(void *)(v26 + 712) = 0;
    *(void *)(v26 + 704) = 0;
    *(_DWORD *)(v26 + 7re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
    *(void *)(v26 + 696) = *(void *)(a2 + j + 696);
    *(void *)(v27 + 696) = 0;
    *(void *)(v26 + 704) = *(void *)(a2 + j + 704);
    *(void *)(v27 + 704) = 0;
    uint64_t v28 = *(void *)(result + j + 712);
    *(void *)(v26 + 712) = *(void *)(a2 + j + 712);
    *(void *)(v27 + 712) = v28;
    uint64_t v29 = *(void *)(result + j + 728);
    *(void *)(v26 + 728) = *(void *)(a2 + j + 728);
    *(void *)(v27 + 728) = v29;
    *(_DWORD *)(v27 + 7re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *(_DWORD *)(a2 + j + 720) + 1;
    *(_DWORD *)(v26 + 7re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *(_DWORD *)(result + j + 720) + 1;
  }
  for (uint64_t k = 0; k != 160; k += 40)
  {
    uint64_t v31 = result + k;
    uint64_t v32 = a2 + k;
    *(void *)(v31 + 888) = 0;
    *(void *)(v31 + 856) = 0;
    *(void *)(v31 + 872) = 0;
    *(void *)(v31 + 864) = 0;
    *(_DWORD *)(v31 + 88objc_initWeak(location, 0) = 0;
    *(void *)(v31 + 856) = *(void *)(a2 + k + 856);
    *(void *)(v32 + 856) = 0;
    *(void *)(v31 + 864) = *(void *)(a2 + k + 864);
    *(void *)(v32 + 864) = 0;
    uint64_t v33 = *(void *)(result + k + 872);
    *(void *)(v31 + 872) = *(void *)(a2 + k + 872);
    *(void *)(v32 + 872) = v33;
    uint64_t v34 = *(void *)(result + k + 888);
    *(void *)(v31 + 888) = *(void *)(a2 + k + 888);
    *(void *)(v32 + 888) = v34;
    *(_DWORD *)(v32 + 88objc_initWeak(location, 0) = *(_DWORD *)(a2 + k + 880) + 1;
    *(_DWORD *)(v31 + 88objc_initWeak(location, 0) = *(_DWORD *)(result + k + 880) + 1;
  }
  *(void *)(result + 1048) = 0;
  *(void *)(result + 1016) = 0;
  *(void *)(result + 1032) = 0;
  *(void *)(result + 1024) = 0;
  *(_DWORD *)(result + 104objc_initWeak(location, 0) = 0;
  *(void *)(result + 1016) = *(void *)(a2 + 1016);
  *(void *)(a2 + 1016) = 0;
  *(void *)(result + 1024) = *(void *)(a2 + 1024);
  *(void *)(a2 + 1024) = 0;
  uint64_t v35 = *(void *)(result + 1032);
  *(void *)(result + 1032) = *(void *)(a2 + 1032);
  *(void *)(a2 + 1032) = v35;
  uint64_t v36 = *(void *)(result + 1048);
  *(void *)(result + 1048) = *(void *)(a2 + 1048);
  *(void *)(a2 + 1048) = v36;
  ++*(_DWORD *)(a2 + 1040);
  ++*(_DWORD *)(result + 1040);
  return result;
}

void re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::~CallableRef()
{
}

double re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::invoke[abi:nn180100]<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0 const&,unsigned long long>(*(uint64_t ***)(a1 + 8), *a2);
}

uint64_t re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(long long **)(a1 + 8);
  *(void *)a2 = &unk_26E701910;
  long long v3 = *v2;
  long long v4 = v2[1];
  *(_OWORD *)(a2 + 4objc_initWeak(location, 0) = v2[2];
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return a2;
}

uint64_t re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::moveInto(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::size()
{
  return 56;
}

double std::invoke[abi:nn180100]<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0 const&,unsigned long long>(uint64_t **a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v3 = a1[4];
  uint64_t v4 = **a1;
  v21[0] = a2;
  uint64_t v5 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v4 + 152, v21);
  if (v5)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    if (!v7) {
      return result;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 104);
    if (*(void *)(v7 + 296) != v21[0]) {
      return result;
    }
  }
  if (*(unsigned char *)(*a1[1] + 32))
  {
    if (!*((unsigned char *)a1[2] + 1200))
    {
      re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v21, *(void *)(*a1[3] + 224), *(re::RenderManager **)(*a1[3] + 248));
      std::optional<re::PrimitiveRenderingContext>::operator=[abi:nn180100]<re::PrimitiveRenderingContext,void>((uint64_t)a1[2], (uint64_t)v21);
      if (v28)
      {
        if (v32) {
          (*(void (**)(void))(*(void *)v28 + 40))();
        }
        uint64_t v32 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v28 = 0;
        ++v31;
      }
      re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v27);
      if (v22)
      {
        if (v26) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
        uint64_t v26 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v22 = 0;
        ++v25;
      }
      for (uint64_t i = 122; i != 102; i -= 5)
        re::DynamicArray<unsigned long>::deinit((uint64_t)&v21[i]);
      do
      {
        re::DynamicArray<unsigned long>::deinit((uint64_t)&v21[i]);
        i -= 5;
      }
      while (i != 82);
      do
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v21[i]);
        i -= 5;
      }
      while (i != 62);
      for (uint64_t j = 30; j != -5; j -= 5)
        re::DynamicArray<unsigned long>::deinit((uint64_t)&v21[j]);
      long long v10 = a1[2];
      if (*((unsigned char *)v10 + 514))
      {
        v10[12] = 0;
        ++*((_DWORD *)v10 + 26);
        *((unsigned char *)v10 + 514) = 0;
      }
      if (*((_DWORD *)v10 + 92)) {
        *((_DWORD *)v10 + 92) = 0;
      }
      *((_DWORD *)v10 + 88) = 998445679;
    }
    re::ecs2::TransformHelper::computeWorldMatrixForRendering((re::ecs2::TransformComponent **)v7, v3[15], v16);
    re::audio::cleanUpTransformForPHASE(v16, v11, v12, v13, (uint64_t)v21);
    float32x4_t v19 = (float32x4_t)xmmword_23435FBB0;
    float32x4_t v20 = 0u;
    float32x4_t v18 = 0u;
    re::decomposeScaleRotationTranslation<float>((uint64_t)v21, (int32x4_t *)&v20, &v19, &v18);
    v17[0] = v20;
    v17[1] = v19;
    void v17[2] = v18;
    uint64_t v14 = (uint64_t)a1[2];
    if (!*(unsigned char *)(v14 + 1200)
      || (re::ecs2::AudioDebugSystem::createAxis(*(_DWORD *)a1[5], v17, v14),
          uint64_t v15 = (uint64_t)a1[2],
          !*(unsigned char *)(v15 + 1200)))
    {
      std::__throw_bad_optional_access[abi:nn180100]();
      JUMPOUT(0x2338ED29CLL);
    }
    return re::ecs2::AudioDebugSystem::createShape((unsigned int *)a1[5], (uint64_t)v17, v15);
  }
  return result;
}

void re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::~Callable()
{
}

double re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::invoke[abi:nn180100]<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0 const&,unsigned long long>((uint64_t **)(a1 + 8), *a2);
}

uint64_t re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E701910;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4objc_initWeak(location, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E701910;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4objc_initWeak(location, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::size()
{
  return 56;
}

id re::internal::defaultRetain<re::ecs2::AudioDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_EDRColorManagementComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_256, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_256))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89E40, "EDRColorManagementComponent");
    __cxa_guard_release(&_MergedGlobals_256);
  }
  return &unk_26AF89E40;
}

void re::ecs2::initInfo_EDRColorManagementComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x34DD0CE7CF85CC94;
  v9[1] = "EDRColorManagementComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89E38, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF89E38);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF89E30 = v7;
      __cxa_guard_release(&qword_26AF89E38);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF89E30;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::EDRColorManagementComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::EDRColorManagementComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::EDRColorManagementComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::EDRColorManagementComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::EDRColorManagementComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EA1F0;
  *(void *)(v3 + 32) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::EDRColorManagementComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::EDRColorManagementComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EA1F0;
  *(void *)(v1 + 32) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::EDRColorManagementComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_EDRColorManagementComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EDRColorManagementComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_EDRColorManagementComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_EDRColorManagementComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::EDRColorManagementComponent>, this);
}

void *re::ecs2::allocInfo_PortalRenderingSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_257, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_257))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89EC0, "PortalRenderingSystem");
    __cxa_guard_release(&_MergedGlobals_257);
  }
  return &unk_26AF89EC0;
}

void re::ecs2::initInfo_PortalRenderingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xB8F182DDF4708B5ELL;
  v5[1] = "PortalRenderingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PortalRenderingSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PortalRenderingSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::PortalRenderingSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PortalRenderingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PortalRenderingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PortalRenderingSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PortalRenderingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::PortalRenderingSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E701978;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PortalRenderingSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PortalRenderingSystem>(_OWORD *a1)
{
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E701978;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PortalRenderingSystem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PortalRenderingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalRenderingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalRenderingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalRenderingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalRenderingSystem>, this);
}

void re::ecs2::PortalRenderingSystem::updateScenes(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (!v2 || (*(unsigned char *)(v2 + 424) & 0x10) != 0)
  {
    if (*(void *)(a1 + 136))
    {
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 3127, a1);
      (*(void (**)(void))(**(void **)(a1 + 136) + 48))(*(void *)(a1 + 136));
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
    }
  }
}

uint64_t re::ecs2::PortalRenderingSystem::willAddSystemToECSService(re::ecs2::PortalRenderingSystem *this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t result = *((void *)this + 17);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v3();
  }
  return result;
}

uint64_t re::ecs2::PortalRenderingSystem::willAddSceneToECSService(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 136);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t re::ecs2::PortalRenderingSystem::willRemoveSceneFromECSService(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 136);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void re::ecs2::PortalRenderingSystem::~PortalRenderingSystem(re::ecs2::PortalRenderingSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PortalRenderingSystem::typeInfo(re::ecs2::PortalRenderingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalRenderingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalRenderingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalRenderingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalRenderingSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::PortalRenderingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PortalRenderingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_PhysicsSimulationService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_258, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_258))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89F40, "PhysicsSimulationService");
    __cxa_guard_release(&_MergedGlobals_258);
  }
  return &unk_26AF89F40;
}

void re::ecs2::initInfo_PhysicsSimulationService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x747915B438994E8ELL;
  v5[1] = "PhysicsSimulationService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PhysicsSimulationService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_PhysicsSimulationService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsSimulationService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSimulationService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSimulationService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSimulationService>, this);
}

uint64_t re::ecs2::WorldRootProvider::worldIds@<X0>(re::ecs2::WorldRootProvider *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_DWORD *)(a2 + 128) = 0;
  *(void *)(a2 + 132) = 0x7FFFFFFFLL;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)this + 16))(*(void *)this);
  re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::operator=(a2, v3);
  return re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(a2, &re::kDefaultWorldRootId);
}

uint64_t re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 124) || *(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 120))
  {
    long long v4 = (uint64_t *)(a1 + 96);
    if (*(void *)(a1 + 96)) {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v4);
    }
    *(void *)(a1 + 16) = 0;
    ++*(_DWORD *)(a1 + 24);
    *(void *)a1 = 0;
  }
  *(void *)a1 = *(void *)a2;
  if (*(_DWORD *)(a2 + 124)) {
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::operator=(a1 + 96, a2 + 96);
  }
  else {
    re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  }
  return a1;
}

uint64_t re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot@<X0>(re::ecs2::RenderingSubsystem *this@<X0>, const re::ecs2::Scene *a2@<X1>, re::DynamicString **a3@<X2>, void *a4@<X8>)
{
  uint64_t result = re::RenderFrame::getStreamNameForWorldRoot(a3, (const re::StringID *)(*((void *)this + 13) + 272), (uint64_t)a2);
  uint64_t v7 = *(char **)(result + 16);
  if ((*(unsigned char *)(result + 8) & 1) == 0) {
    uint64_t v7 = (char *)(result + 9);
  }
  if (v7)
  {
    uint64_t v8 = *v7;
    if (*v7)
    {
      char v9 = v7[1];
      if (v9)
      {
        long long v10 = (unsigned __int8 *)(v7 + 2);
        do
        {
          uint64_t v8 = 31 * v8 + v9;
          int v11 = *v10++;
          char v9 = v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a4 = 2 * v8;
  a4[1] = v7;
  return result;
}

void re::ecs2::RenderingSubsystem::update(void **a1, uint64_t a2, uint64_t a3)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v31, 3099, (uint64_t)a1);
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  int v28 = 1;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1[5] + 120))(a1[5]);
  if (!v7)
  {
    unint64_t v21 = 0;
    float32x4_t v20 = &v29;
    goto LABEL_24;
  }
  uint64_t v8 = (id *)v6;
  uint64_t v9 = 8 * v7;
  do
  {
    id WeakRetained = objc_loadWeakRetained(v8);
    if (!WeakRetained) {
      goto LABEL_19;
    }
    int v11 = WeakRetained;
    long long v12 = (_anonymous_namespace_ *)WeakRetained;
    if (v26)
    {
      char v13 = v28;
      if (v28)
      {
        if (v27 - 8 < 0xFFFFFFFFFFFFFFF7)
        {
          unint64_t v14 = v27 + 1;
          unint64_t v15 = 16;
          goto LABEL_12;
        }
      }
      else if (v27 >= v29)
      {
        unint64_t v14 = v27 + 1;
        if (v29 < v27 + 1)
        {
          unint64_t v15 = 2 * v29;
LABEL_12:
          if (v15 <= v14) {
            unint64_t v16 = v14;
          }
          else {
            unint64_t v16 = v15;
          }
          re::DynamicOverflowArray<re::SharedPtr<re::ecs2::Scene>,8ul>::setCapacity((uint64_t *)&v26, v16);
          char v13 = v28;
        }
      }
    }
    else
    {
      re::DynamicOverflowArray<re::SharedPtr<re::ecs2::Scene>,8ul>::setCapacity((uint64_t *)&v26, v27 + 1);
      char v13 = v28 + 2;
      v28 += 2;
    }
    BOOL v17 = (v13 & 1) == 0;
    float32x4_t v18 = v30;
    unint64_t v19 = v27;
    if (!v17) {
      float32x4_t v18 = &v29;
    }
    v18[v27] = (unint64_t)v11 - 8;
    unint64_t v27 = v19 + 1;
    v28 += 2;

LABEL_19:
    ++v8;
    v9 -= 8;
  }
  while (v9);
  float32x4_t v20 = v30;
  unint64_t v21 = v27;
  if (v28) {
    float32x4_t v20 = &v29;
  }
LABEL_24:
  v25[0] = v20;
  v25[1] = v21;
  ((void (*)(void **, void *, uint64_t, uint64_t))(*a1)[12])(a1, v25, a2, a3);
  if (v26)
  {
    char v22 = v28;
    if (v27)
    {
      if (v28) {
        uint64_t v23 = &v29;
      }
      else {
        uint64_t v23 = v30;
      }
      uint64_t v24 = 8 * v27;
      do
      {
        if (*v23)
        {

          *uint64_t v23 = 0;
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
      char v22 = v28;
    }
    if ((v22 & 1) == 0) {
      (*(void (**)(uint64_t *, unint64_t *))(*v26 + 40))(v26, v30);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v31);
}

void re::ecs2::RenderingSubsystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a2;
  if (a2) {
    id v7 = (id)(a2 + 8);
  }
  v8[0] = &v9;
  v8[1] = 1;
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, v8, a3, a4);
  if (v9) {
}
  }

uint64_t re::ecs2::RenderingSubsystem::willAddSystemToECSService(re::ecs2::RenderingSubsystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 15) = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 16) = re::ServiceLocator::serviceOrNull<re::ShadowService>(v5);
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(v6);
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 18) = re::ServiceLocator::serviceOrNull<re::ecs2::RenderOptionsService>(v7);
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(v8);
  *((void *)this + 19) = result;
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ShadowService>(uint64_t a1)
{
  {
    re::introspect<re::ShadowService>(void)::info = re::introspect_ShadowService(0);
  }
  uint64_t v2 = re::introspect<re::ShadowService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

double re::ecs2::RenderingSubsystem::willRemoveSystemFromECSService(re::ecs2::RenderingSubsystem *this)
{
  *((void *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init(a1, v4, v5);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * (*(void *)(v8 + v6 + 8) ^ (*(void *)(v8 + v6 + 8) >> 30));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, v8 + v6 + 8, (void *)(v8 + v6 + 8));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 16;
    }
  }
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 16 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 16;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v8;
  }
}

uint64_t re::DynamicOverflowArray<re::SharedPtr<re::ecs2::Scene>,8ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<re::SharedPtr<re::ecs2::Scene>,8ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        unint64_t v14 = a1 + 3;
        if (v7) {
          unint64_t v15 = a1 + 3;
        }
        else {
          unint64_t v15 = (void *)a1[4];
        }
        if (v9)
        {
          uint64_t v16 = 8 * v9;
          do
          {
            *v14++ = *v15;
            *v15++ = 0;
            v16 -= 8;
          }
          while (v16);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 8 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            char v13 = a1 + 3;
          }
          else {
            char v13 = (void *)a1[4];
          }
          uint64_t v17 = a1[1];
          if (v17)
          {
            uint64_t v18 = 8 * v17;
            unint64_t v19 = (void *)result;
            do
            {
              *v19++ = *v13;
              *v13++ = 0;
              v18 -= 8;
            }
            while (v18);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void *re::ecs2::allocInfo_ListenerComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_259, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_259))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF89FE0, "ListenerComponent");
    __cxa_guard_release(&_MergedGlobals_259);
  }
  return &unk_26AF89FE0;
}

void re::ecs2::initInfo_ListenerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x9E2DEA8680918512;
  v13[1] = "ListenerComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89FC0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF89FC0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF89FD0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "linearGain";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF89FD8 = v11;
      __cxa_guard_release(&qword_26AF89FC0);
    }
  }
  *((void *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF89FD0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ListenerComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::ListenerComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ListenerComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ListenerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

double re::internal::defaultConstruct<re::ecs2::ListenerComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ListenerComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::ListenerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ListenerComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ListenerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ListenerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ListenerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ListenerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ListenerComponent>, this);
}

void *re::ecs2::allocInfo_ListenerSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF89FC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF89FC8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A058, "ListenerSystem");
    __cxa_guard_release(&qword_26AF89FC8);
  }
  return &unk_26AF8A058;
}

void re::ecs2::initInfo_ListenerSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x7E48499C06873046;
  v5[1] = "ListenerSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x9800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ListenerSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ListenerSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::ListenerSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ListenerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ListenerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ListenerSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ListenerSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::ListenerSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1, 1);
  *(void *)uint64_t v3 = &unk_26E701A20;
  double result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(v3 + 136) = 0;
  *(_DWORD *)(v3 + 144) = 1065353216;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ListenerSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a3 + 14));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ListenerSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1, 1);
  *(void *)uint64_t v1 = &unk_26E701A20;
  double result = 0.0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 1065353216;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ListenerSystem>(void *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a1 + 14));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ListenerSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ListenerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ListenerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ListenerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ListenerSystem>, this);
}

uint64_t re::ecs2::ListenerSystem::willAddSystemToECSService(re::ecs2::ListenerSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((void *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::ListenerSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  return this;
}

void re::ecs2::ListenerSystem::willAddSceneToECSService(re::ecs2::ListenerSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  if (a2)
  {
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(void *)long long buf = this;
    uint64_t v18 = re::ecs2::ListenerSystem::willRemoveComponents;
    uint64_t v19 = 0;
    float32x4_t v20 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::createSubscription<re::ecs2::ListenerSystem>(re::ecs2::ListenerSystem *,REEventHandlerResult (re::ecs2::ListenerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Slice<re::ecs2::ListenerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::Subscription const&,re::Slice<re::ecs2::ListenerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 392), (uint64_t)buf);
    std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__emplace_unique_key_args<re::ecs2::Scene *,re::ecs2::Scene * const&>((uint64_t)this + 112, &v16, &v16);
    uint64_t v4 = *((void *)this + 13);
    if (v4)
    {
      unint64_t v5 = *(void *)(*((void *)v16 + 13) + 272);
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      if (v6)
      {
        uint64_t v9 = MEMORY[0x263EF8330];
        uint64_t v10 = 3221225472;
        uint64_t v11 = ___ZN2re4ecs214ListenerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke;
        long long v12 = &__block_descriptor_56_e5_v8__0l;
        char v13 = v16;
        unint64_t v14 = v5 >> 1;
        uint64_t v15 = v6;
        uint64_t v7 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 768);
        uint64_t v8 = *re::audioLogObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_debug_impl(&dword_233120000, v8, OS_LOG_TYPE_DEBUG, "[ListenerSystem] ->[willAddSystemToECSService] addServiceResetCallback :: Adding Callback", buf, 2u);
        }
      }
    }
  }
}

void ___ZN2re4ecs214ListenerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *re::audioLogObjects((re *)a1);
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v11 = v9;
      _os_log_debug_impl(&dword_233120000, v3, OS_LOG_TYPE_DEBUG, "[ListenerSystem] ->[willAddSystemToECSService] addServiceResetCallback :: Start of Callback for scene: %llu", buf, 0xCu);
    }
    uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(void *)(a1 + 32) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      uint64_t v6 = *(uint64_t **)(v4 + 40);
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        (*(void (**)(void, void))(**(void **)(a1 + 48) + 312))(*(void *)(a1 + 48), *(void *)(v8 + 32));
        *(_OWORD *)(v8 + 32) = xmmword_234361D10;
        v7 -= 8;
      }
      while (v7);
    }
    (*(void (**)(void, uint64_t, void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), 4, *(void *)(a1 + 40), 1);
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "[ListenerSystem] ->[willAddSystemToECSService] addServiceResetCallback :: Scene is a nullptr", buf, 2u);
  }
}

uint64_t re::ecs2::ListenerSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v2 = this;
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(void *)&long long v5 = v2;
    *((void *)&v5 + 1) = re::ecs2::ListenerSystem::willRemoveComponents;
    uint64_t v6 = 0;
    uint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::createSubscription<re::ecs2::ListenerSystem>(re::ecs2::ListenerSystem *,REEventHandlerResult (re::ecs2::ListenerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Slice<re::ecs2::ListenerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::Subscription const&,re::Slice<re::ecs2::ListenerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v5);
    std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__erase_unique<re::ecs2::Scene *>((void *)(v2 + 112), &v4);
    this = *(void *)(v2 + 104);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(void *)this + 16))(this, v4);
      if (this) {
        return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)this + 40))(this, 768, *(void *)(*((void *)v4 + 13) + 272) >> 1);
      }
    }
  }
  return this;
}

uint64_t re::ecs2::ListenerSystem::willRemoveComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(void *)(a1 + 104)) {
    BOOL v4 = a4 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    long long v5 = a3;
    uint64_t v7 = &a3[a4];
    do
    {
      uint64_t v8 = *v5;
      for (unint64_t i = *(void **)(a1 + 128); i; unint64_t i = (void *)*i)
      {
        uint64_t v10 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104), i[2]);
        if (v10) {
          (*(void (**)(uint64_t, void))(*(void *)v10 + 312))(v10, *(void *)(v8 + 32));
        }
      }
      *(_OWORD *)(v8 + 32) = xmmword_234361D10;
      ++v5;
    }
    while (v5 != v7);
  }
  return 0;
}

uint64_t re::ecs2::ListenerSystem::update(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 40))
  {
    if (a2)
    {
      uint64_t v3 = result;
      if (*(void *)(result + 104))
      {
        BOOL v4 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v40);
        isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v4);
        if (isStatisticCollectionEnabled)
        {
          uint64_t v6 = re::profilerThreadContext(isStatisticCollectionEnabled);
          uint64_t v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          unint64_t v8 = v7 ? *(void *)(v7 + 24) : 0;
          uint64_t v9 = *(int64x2_t **)(v6 + 152);
          if (v9)
          {
            unint64_t v10 = v9[564].u64[0];
            if (v10 >= v8) {
              unint64_t v10 = v8;
            }
            v9[564].i64[0] = v10;
            unint64_t v11 = v9[564].u64[1];
            if (v11 <= v8) {
              unint64_t v11 = v8;
            }
            v9[564].i64[1] = v11;
            int64x2_t v12 = vdupq_n_s64(1uLL);
            v12.i64[0] = v8;
            v9[565] = vaddq_s64(v9[565], v12);
            *(unsigned char *)(v6 + 184) = 0;
          }
        }
        re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 3063, v3);
        unint64_t v13 = *(void *)(*(void *)(a2 + 104) + 272);
        uint64_t v34 = *(void *)(re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 24);
        uint64_t v14 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v15 = *(void *)(v14 + 24);
        if (v15)
        {
          unint64_t v16 = v13 >> 1;
          uint64_t v17 = *(uint64_t **)(v14 + 40);
          for (uint64_t i = 8 * v15; i; i -= 8)
          {
            uint64_t v19 = *v17;
            float32x4_t v20 = *(re::ecs2::NetworkComponent **)(*(void *)(*v17 + 16) + 200);
            if (v20) {
              LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = re::ecs2::NetworkComponent::owningProcessType(v20);
            }
            if (*(void *)(v19 + 40) == v16
              && (int v21 = *(unsigned __int8 *)(v19 + 48), v21 == *(unsigned __int8 *)(v19 + 128)))
            {
              char v22 = (void *)(v19 + 32);
              if (*(void *)(v19 + 32)) {
                goto LABEL_29;
              }
            }
            else
            {
              *(void *)(v19 + 32) = 0;
              char v22 = (void *)(v19 + 32);
              *(_DWORD *)(v19 + 52) = 1065353216;
              *(_OWORD *)(v19 + 64) = xmmword_23435FD50;
              *(_OWORD *)(v19 + 8objc_initWeak(location, 0) = xmmword_23435FD60;
              *(_OWORD *)(v19 + 96) = xmmword_23435FD80;
              *(_OWORD *)(v19 + 112) = xmmword_23435FBB0;
            }
            *(void *)(v19 + 4objc_initWeak(location, 0) = -1;
            if (v20) {
              goto LABEL_39;
            }
            uint64_t v23 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 104) + 16))(*(void *)(v3 + 104), a2);
            if (v23)
            {
              uint64_t v24 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v23 + 304))(v23, v16, *(unsigned __int8 *)(v19 + 128));
              *(void *)(v19 + 32) = v24;
              if (!v24) {
                goto LABEL_39;
              }
            }
            else if (!*v22)
            {
              goto LABEL_39;
            }
            *(void *)(v19 + 4objc_initWeak(location, 0) = v16;
            int v21 = *(unsigned __int8 *)(v19 + 128);
            *(unsigned char *)(v19 + 48) = v21;
LABEL_29:
            if (v21 == 2)
            {
              uint64_t v25 = *(void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 104) + 16))(*(void *)(v3 + 104), a2);
              (*(void (**)(void))(v25 + 320))();
            }
            re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v19 + 16), (const re::ecs2::Entity *)1, &v41);
            if (*(float *)(v19 + 52) != *(float *)(v19 + 28))
            {
              float32x4_t v26 = v41;
              float32x4_t v27 = v42;
              float32x4_t v28 = v43;
              float32x4_t v29 = v44;
LABEL_35:
              if ((*(unsigned char *)(*(void *)(v19 + 16) + 288) & 1) != 0 && (v34 || *(unsigned char *)(v19 + 48) == 2))
              {
                float32x4_t v35 = v26;
                float32x4_t v36 = v27;
                float32x4_t v37 = v28;
                float32x4_t v38 = v29;
                uint64_t v30 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 104) + 16))(*(void *)(v3 + 104), a2);
                uint64_t v31 = *(void *)(v19 + 32);
                float32x4_t v41 = v35;
                float32x4_t v42 = v36;
                float32x4_t v43 = v37;
                float32x4_t v44 = v38;
                float v32 = *(float *)(v19 + 28);
                uint64_t v33 = mach_absolute_time();
                (*(void (**)(uint64_t, uint64_t, float32x4_t *, uint64_t, float))(*(void *)v30 + 328))(v30, v31, &v41, v33, v32);
                *(_DWORD *)(v19 + 52) = *(_DWORD *)(v19 + 28);
                *(float32x4_t *)(v19 + 64) = v35;
                *(float32x4_t *)(v19 + 8objc_initWeak(location, 0) = v36;
                *(float32x4_t *)(v19 + 96) = v37;
                *(float32x4_t *)(v19 + 112) = v38;
              }
              goto LABEL_39;
            }
            float32x4_t v26 = v41;
            float32x4_t v27 = v42;
            float32x4_t v28 = v43;
            float32x4_t v29 = v44;
            if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v19 + 80), v42), (int8x16_t)vceqq_f32(*(float32x4_t *)(v19 + 64), v41)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v19 + 96), v43), (int8x16_t)vceqq_f32(*(float32x4_t *)(v19 + 112), v44)))) & 0x80000000) == 0)goto LABEL_35; {
LABEL_39:
            }
            ++v17;
          }
        }
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v40);
      }
    }
  }
  return result;
}

void re::ecs2::ListenerSystem::~ListenerSystem(re::ecs2::ListenerSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ListenerSystem::typeInfo(re::ecs2::ListenerSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ListenerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ListenerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ListenerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ListenerSystem>, 0);
}

double re::make::shared::unsafelyInplace<re::ecs2::ListenerComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EC1F8;
  *(_DWORD *)(v1 + 28) = 1065353216;
  *(_OWORD *)(v1 + 32) = xmmword_234361D10;
  *(unsigned char *)(v1 + 48) = 1;
  *(_DWORD *)(v1 + 52) = 1065353216;
  *(_OWORD *)(v1 + 64) = xmmword_23435FD50;
  *(_OWORD *)(v1 + 8objc_initWeak(location, 0) = xmmword_23435FD60;
  double result = 0.0;
  *(_OWORD *)(v1 + 96) = xmmword_23435FD80;
  *(_OWORD *)(v1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = xmmword_23435FBB0;
  *(unsigned char *)(v1 + 128) = 1;
  return result;
}

id re::internal::defaultRetain<re::ecs2::ListenerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ListenerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::createSubscription<re::ecs2::ListenerSystem>(re::ecs2::ListenerSystem *,REEventHandlerResult (re::ecs2::ListenerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Slice<re::ecs2::ListenerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::Subscription const&,re::Slice<re::ecs2::ListenerComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  BOOL v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    BOOL v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void *re::ecs2::allocInfo_AdaptiveResolutionSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_260, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_260))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A0D8, "AdaptiveResolutionSystem");
    __cxa_guard_release(&_MergedGlobals_260);
  }
  return &unk_26AF8A0D8;
}

void re::ecs2::initInfo_AdaptiveResolutionSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x5E3F6A3BDCE67162;
  v5[1] = "AdaptiveResolutionSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AdaptiveResolutionSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AdaptiveResolutionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AdaptiveResolutionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 8objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  *uint64_t v3 = &unk_26E701AA8;
}

void *re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionSystem>(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *uint64_t v1 = &unk_26E701AA8;
}

void *re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

void re::ecs2::AdaptiveResolutionSystem::update(uint64_t a1, uint64_t a2)
{
  long long v4 = (re::ecs2::SceneComponentTable *)(a2 + 200);
  uint64_t v5 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    return;
  }
  uint64_t v7 = 0;
  unint64_t v8 = *(uint64_t **)(v5 + 40);
  float32x4_t v39 = &v8[v6];
  float v9 = 0.0;
  do
  {
    uint64_t v10 = *v8;
    if (v7) {
      goto LABEL_23;
    }
    uint64_t v11 = re::ecs2::SceneComponentTable::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!v11) {
      break;
    }
    uint64_t v12 = *(void *)(v11 + 24);
    if (!v12) {
      break;
    }
    unint64_t v13 = *(re::ecs2::CameraViewDescriptorsComponent ***)(v11 + 40);
    uint64_t v14 = 8 * v12;
    while (1)
    {
      uint64_t v15 = *v13;
      uint64_t v16 = *((void *)*v13 + 2);
      if (!v16 || (*(unsigned char *)(v16 + 288) & 1) == 0) {
        goto LABEL_13;
      }
      uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a2 + 56) + 32))(*(void *)(a2 + 56));
      uint64_t v18 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v17);
      uint64_t v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v19) {
        break;
      }
      uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v22)
      {
        uint64_t v30 = (float *)v22;
        uint64_t v48 = 0;
        re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(v15, v18, (float *)&v48, v23, v24);
        float v31 = 1.0;
        if (*((float *)&v48 + 1) >= 0.0001) {
          float v31 = *(float *)&v48 / *((float *)&v48 + 1);
        }
        re::ecs2::OrthographicCameraComponent::calculateProjection(v30, (uint64_t)&v41, v31);
        goto LABEL_22;
      }
      uint64_t v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v25)
      {
        uint64_t v32 = v25;
        uint64_t v48 = 0;
        re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(v15, v18, (float *)&v48, v26, v27);
        int v41 = 0;
        long long v42 = xmmword_234390F00;
        unint64_t v43 = 0xBDCCCCCD3DCCCCCDLL;
        char v44 = 0;
        long long v45 = xmmword_23435FD80;
        int v46 = 1;
        uint64_t v47 = 0;
        re::Projection::setFromMatrix4x4F((uint64_t)&v41, v32 + 256);
        goto LABEL_22;
      }
LABEL_13:
      ++v13;
      v14 -= 8;
      if (!v14) {
        return;
      }
    }
    float32x4_t v28 = (float *)v19;
    uint64_t v48 = 0;
    re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(v15, v18, (float *)&v48, v20, v21);
    float v29 = 1.0;
    if (*((float *)&v48 + 1) >= 0.0001) {
      float v29 = *(float *)&v48 / *((float *)&v48 + 1);
    }
    re::ecs2::PerspectiveCameraComponent::calculateProjection(v28, (uint64_t)&v41, v29);
LABEL_22:
    re::Projection::computeMatrix4x4F((re::Projection *)&v41, (uint64_t)v49);
    float v2 = *(float *)v49;
    uint64_t v7 = (re::ecs2::TransformComponent **)*((void *)v15 + 2);
    float v9 = *(float *)&v48;
    if (!v7) {
      return;
    }
LABEL_23:
    uint64_t v33 = *(re::ecs2::TransformComponent ***)(v10 + 16);
    uint64_t v34 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v33 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    re::ecs2::TransformComponent::worldMatrix4x4F(v33, (const re::ecs2::Entity *)1, v49);
    float32x4_t v40 = v50;
    re::ecs2::TransformComponent::worldMatrix4x4F(v7, (const re::ecs2::Entity *)1, v49);
    float32x4_t v35 = vsubq_f32(v40, v50);
    float32x4_t v36 = vmulq_f32(v35, v35);
    v36.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]);
    float v37 = v9 / (float)((float)(1.0 / v2) * (float)(v36.f32[0] + v36.f32[0]));
    float v38 = 512.0;
    if (v37 >= 512.0)
    {
      if (v37 >= 1024.0)
      {
        float v38 = 2048.0;
        if (v37 < 2048.0)
        {
          float v38 = 1024.0;
          if ((float)(v37 + -1024.0) > 512.0) {
            float v38 = 2048.0;
          }
        }
      }
      else
      {
        float v38 = 1024.0;
        if ((float)(v37 + -512.0) <= 256.0) {
          float v38 = 512.0;
        }
      }
    }
    if (v38 != *(float *)(v34 + 28))
    {
      *(float *)(v34 + 28) = v38;
      re::ecs2::Component::enqueueMarkDirty(v34);
    }
    ++v8;
  }
  while (v8 != v39);
}

void re::ecs2::AdaptiveResolutionSystem::~AdaptiveResolutionSystem(re::ecs2::AdaptiveResolutionSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AdaptiveResolutionSystem::typeInfo(re::ecs2::AdaptiveResolutionSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AdaptiveResolutionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AdaptiveResolutionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AdaptiveResolutionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AdaptiveResolutionSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::AdaptiveResolutionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AdaptiveResolutionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

BOOL re::ecs2::BlendShapeWeightsComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  unint64_t v8 = v21;
  unint64_t v9 = v22;
  unint64_t v21 = a4;
  unint64_t v22 = v8;
  unint64_t v23 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = *(re::ecs2::BlendShapeWeightsComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22);
      uint64_t v15 = *((void *)v14 + 2);
      re::ecs2::BlendShapeWeightsComponent::upgradeBlendWeightsFromBlendShapeWeights(v14);
      uint64_t v16 = (unint64_t *)(a3 + 32);
      if (*(void *)(v15 + 184))
      {
        uint64_t v17 = *(void *)(v15 + 176);
        uint64_t v16 = (unint64_t *)(a3 + 32);
        if (v17)
        {
          if (*(void *)(v17 + 40)) {
            uint64_t v16 = (unint64_t *)(a3 + 40);
          }
          else {
            uint64_t v16 = (unint64_t *)(a3 + 32);
          }
        }
      }
      unint64_t v18 = v21;
      unint64_t v19 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v18, v19, *v16);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

void re::ecs2::BlendShapeWeightsComponent::upgradeBlendWeightsFromBlendShapeWeights(re::ecs2::BlendShapeWeightsComponent *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((void *)this + 43))
  {
    if (!*((void *)this + 9))
    {
      uint64_t v2 = re::AssetHandle::loadedAsset<re::BlendShapeWeightsDefinitionAsset>((re::ecs2::BlendShapeWeightsComponent *)((char *)this + 32));
      if (v2)
      {
        uint64_t v3 = v2;
        uint64_t v4 = *((void *)this + 9);
        if (v4)
        {
          uint64_t v5 = (re::BlendShapeWeights *)*((void *)this + 11);
          uint64_t v6 = 32 * v4;
          do
          {
            re::BlendShapeWeights::deinit(v5);
            uint64_t v5 = (re::BlendShapeWeights *)((char *)v5 + 32);
            v6 -= 32;
          }
          while (v6);
        }
        if (*(void *)(v3 + 16))
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          do
          {
            re::make::shared::object<re::BlendShapeWeightsDefinition,re::FixedArray<re::StringID> const&>((const StringID **)(*(void *)(v3 + 32) + v7), (_anonymous_namespace_ **)v21);
            long long v28 = 0u;
            long long v29 = 0u;
            re::BlendShapeWeights::init((uint64_t *)&v28, (uint64_t *)v21);
            unint64_t v9 = *((void *)this + 9);
            if (v9 >= *((void *)this + 8))
            {
              re::DynamicArray<re::BlendShapeWeights>::growCapacity((void *)this + 7, v9 + 1);
              unint64_t v9 = *((void *)this + 9);
            }
            uint64_t v10 = re::FixedArray<float>::FixedArray((uint64_t *)(*((void *)this + 11) + 32 * v9), (uint64_t)&v28);
            uint64_t v11 = *((void *)&v29 + 1);
            void v10[3] = *((void *)&v29 + 1);
            if (v11) {
              id v12 = (id)(v11 + 8);
            }
            ++*((void *)this + 9);
            ++*((_DWORD *)this + 20);
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v28);
            if (*(void *)v21) {

            }
            ++v8;
            v7 += 24;
          }
          while (v8 < *(void *)(v3 + 16));
        }
        uint64_t v13 = *((void *)this + 43);
        if (v13)
        {
          unint64_t v14 = 0;
          uint64_t v15 = *((void *)this + 45);
          do
          {
            uint64_t v16 = *(void *)(v15 + 40 * v14 + 16);
            if (v16)
            {
              unint64_t v17 = *((void *)this + 9);
              if (v17 > v14)
              {
                uint64_t v18 = 0;
                uint64_t v19 = *(void *)(v15 + 40 * v14 + 32);
                uint64_t v20 = *((void *)this + 11) + 32 * v14;
                unint64_t v17 = *(void *)(v20 + 8);
                while (v17 != v18)
                {
                  *(_DWORD *)(*(void *)(v20 + 16) + 4 * v18) = *(_DWORD *)(v19 + 4 * v18);
                  if (v16 == ++v18) {
                    goto LABEL_24;
                  }
                }
                long long v31 = 0u;
                long long v32 = 0u;
                long long v29 = 0u;
                long long v30 = 0u;
                long long v28 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)unint64_t v21 = 136315906;
                *(void *)&v21[4] = "operator[]";
                __int16 v22 = 1024;
                int v23 = 468;
                __int16 v24 = 2048;
                unint64_t v25 = v17;
                __int16 v26 = 2048;
                unint64_t v27 = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              long long v31 = 0u;
              long long v32 = 0u;
              long long v29 = 0u;
              long long v30 = 0u;
              long long v28 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)unint64_t v21 = 136315906;
              *(void *)&v21[4] = "operator[]";
              __int16 v22 = 1024;
              int v23 = 789;
              __int16 v24 = 2048;
              unint64_t v25 = v14;
              __int16 v26 = 2048;
              unint64_t v27 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
LABEL_24:
            ++v14;
          }
          while (v14 != v13);
        }
      }
    }
  }
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::BlendShapeWeightsComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v51, a5, 0);
  unint64_t v7 = v51;
  unint64_t v8 = v52;
  unint64_t v51 = a4;
  unint64_t v52 = v7;
  unint64_t v53 = v8;
  uint64_t v9 = (unsigned __int16)v8;
  uint64_t v10 = v8 & 0xFFFF0000;
  uint64_t v48 = a5;
  if (v7 != a5 || v9 != 0xFFFF || v10 != 4294901760)
  {
    do
    {
      uint64_t v13 = (re::ecs2::BlendShapeWeightsComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      unint64_t v14 = *v13;
      uint64_t v15 = (void *)*((void *)*v13 + 2);
      re::ecs2::BlendShapeWeightsComponent::upgradeBlendWeightsFromBlendShapeWeights(*v13);
      uint64_t v16 = v15[22];
      uint64_t v17 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v16 + 32));
      if (v17)
      {
        uint64_t v18 = (void *)v17;
        uint64_t v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        uint64_t v20 = v18[47];
        uint64_t v49 = v18[49];
        uint64_t v50 = v20;
        if (v19)
        {
          unint64_t v21 = (re::MeshNameMap *)(v19 + 216);
          uint64_t v22 = *(void *)(v19 + 192);
          uint64_t v49 = *(void *)(v19 + 208);
          uint64_t v50 = v22;
        }
        else
        {
          unint64_t v21 = (re::MeshNameMap *)(v18 + 56);
        }
        uint64_t v27 = re::AssetHandle::loadedAsset<re::BlendShapeWeightsDefinitionAsset>((re::ecs2::BlendShapeWeightsComponent *)((char *)v14 + 32));
        if (v27)
        {
          long long v28 = (void *)v27;
          unint64_t v29 = *(void *)(v16 + 40);
          if (v29) {
            uint64_t v30 = *(void *)(v29 + 664);
          }
          else {
            uint64_t v30 = 0;
          }
          unint64_t v33 = *((void *)v14 + 5);
          if (v33) {
            uint64_t v34 = *(void *)(v33 + 664);
          }
          else {
            uint64_t v34 = 0;
          }
          unint64_t v35 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27));
          unint64_t v36 = v30 ^ (v35 >> 31) ^ v35;
          unint64_t v37 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) >> 27));
          uint64_t v38 = ((v36 << 6) + (v36 >> 2) + (v34 ^ (v37 >> 31) ^ v37) - 0x61C8864680B583E9) ^ v36;
          if (*((void *)v14 + 12))
          {
            *((void *)v14 + 12) = 0;
            re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)v14 + 104);
            re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v14 + 144);
          }
        }
        else
        {
          if (*((void *)v14 + 5)) {
            re::AssetHandle::loadAsync((re::ecs2::BlendShapeWeightsComponent *)((char *)v14 + 32));
          }
          unint64_t v31 = *(void *)(v16 + 40);
          if (v31) {
            uint64_t v32 = *(void *)(v31 + 664);
          }
          else {
            uint64_t v32 = 0;
          }
          unint64_t v39 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) >> 27));
          uint64_t v38 = v32 ^ (v39 >> 31) ^ v39;
          if (v38 != *((void *)v14 + 12))
          {
            *((void *)v14 + 12) = v38;
            re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)v14 + 104);
            re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v14 + 144);
            re::BlendShapeWeightsDefinitionAsset::init((re::ecs2::BlendShapeWeightsComponent *)((char *)v14 + 104), v18, &v49, 0);
            uint64_t v38 = *((void *)v14 + 12);
          }
          long long v28 = (void *)((char *)v14 + 104);
        }
        float32x4_t v40 = (re::ecs2::BlendShapeWeightsComponent *)((char *)v14 + 240);
        uint64_t v41 = (uint64_t)v14 + 56;
        re::BlendShapeWeightsMapping::update<re::MeshAsset>((re::ecs2::BlendShapeWeightsComponent *)((char *)v14 + 240), v28, (unint64_t)v18, v21, v38, (uint64_t)v14 + 56);
        long long v42 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        re::ecs2::BlendShapeWeightsBufferComponent::rebuildWeights((uint64_t (***)(void))v42, (uint64_t)v28, v40, (uint64_t)v18, v21, v41);
        re::ecs2::Component::markDirty(v42);
        unint64_t v43 = (re::ecs2::NetworkComponent *)v15[25];
        if (v43) {
          re::ecs2::NetworkComponent::markDirty(v43, v42);
        }
        unint64_t v44 = v51;
        unint64_t v45 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v44, v45, *(void *)(a3 + 48));
      }
      else
      {
        uint64_t v23 = *(void *)(v16 + 40);
        if (v23 && (unsigned int v24 = atomic_load((unsigned int *)(v23 + 704)), v24 == 3))
        {
          unint64_t v25 = v51;
          unint64_t v26 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v25, v26, *(void *)(a3 + 32));
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)(v16 + 32));
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != v48 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(v48 + 40) != 0;
}

uint64_t re::AssetHandle::loadedAsset<re::BlendShapeWeightsDefinitionAsset>(re::BlendShapeWeightsDefinitionAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::BlendShapeWeightsDefinitionAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::ecs2::BlendShapeWeightsSystem::removedBlendShapeWeightsBufferHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  uint64_t v17 = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 272), &v17);
  if (v6 != -1)
  {
    uint64_t v7 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 216, *(void *)(*(void *)(a1 + 280) + 16 * v6 + 8));
    uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v8)
    {
      uint64_t v9 = (re::ecs2::Component *)v8;
      uint64_t v10 = 24;
      unint64_t v11 = 0xFFFFFFFFLL;
      do
      {
        unint64_t v12 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v7 + 16), *(void *)(v7 + v10), v9);
        if (v12 != -1 && (v13 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v15 = v12;
          unint64_t v11 = v13;
          goto LABEL_13;
        }
        v10 += 8;
      }
      while (v10 != 56);
      unint64_t v15 = -1;
LABEL_13:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::setComponentState(v7, v15, v11);
    }
  }
  return 0;
}

uint64_t re::ecs2::BlendShapeWeightsSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v37[0] = a3;
  v37[1] = a4;
  uint64_t v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v36);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    unint64_t v10 = v9 ? *(void *)(v9 + 24) : 0;
    unint64_t v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      unint64_t v12 = v11[448].u64[0];
      if (v12 >= v10) {
        unint64_t v12 = v10;
      }
      v11[448].i64[0] = v12;
      unint64_t v13 = v11[448].u64[1];
      if (v13 <= v10) {
        unint64_t v13 = v10;
      }
      v11[448].i64[1] = v13;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[449] = vaddq_s64(v11[449], v14);
      *(unsigned char *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35, 3033, a1);
  uint64_t v38 = a2;
  unint64_t v15 = *(void *)(*(void *)(a1 + 280)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 272), &v38)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 384, v15);
  uint64_t v16 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 216, v15);
  uint64_t v17 = *(void *)(*v16 + 224);
  unint64_t v18 = v16[3];
  unint64_t v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v18);
  if (*(_DWORD *)(v19 + 40)) {
    int v20 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v17 + 24))(v17, v37, v16, v18, v19, 0);
  }
  else {
    int v20 = 0;
  }
  unint64_t v21 = v16[5];
  unint64_t v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v21);
  if (*(_DWORD *)(v22 + 40)) {
    v20 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v17 + 32))(v17, v37, v16, v21, v22, 0);
  }
  unint64_t v23 = v16[6];
  unint64_t v24 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v23);
  if (*(_DWORD *)(v24 + 40))
  {
    if (((v20 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v17 + 40))(v17, v37, v16, v23, v24, 0)) & 1) == 0)goto LABEL_19; {
    goto LABEL_18;
    }
  }
  if (v20) {
LABEL_18:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 384, v15);
LABEL_19:
  if (!*(unsigned char *)(a1 + 448)) {
    goto LABEL_39;
  }
  unint64_t v25 = *(void *)(a1 + 392);
  int v26 = *(_DWORD *)(a1 + 400);
  if (v25 >= 0xB)
  {
    if (v26) {
      uint64_t v27 = (void *)(a1 + 408);
    }
    else {
      uint64_t v27 = *(void **)(a1 + 416);
    }
    uint64_t v29 = 8 * v25;
    while (!*v27)
    {
      ++v27;
      v29 -= 8;
      if (!v29) {
        goto LABEL_39;
      }
    }
LABEL_37:
    unint64_t v33 = *(re::ecs2::System **)(a1 + 432);
    if (!*((unsigned char *)v33 + 86)) {
      re::ecs2::System::queueToRun(v33, 0.0);
    }
    goto LABEL_39;
  }
  if (v26)
  {
    long long v28 = (uint64_t *)(a1 + 408);
    if (!v25) {
      goto LABEL_39;
    }
  }
  else
  {
    long long v28 = *(uint64_t **)(a1 + 416);
    if (!v25) {
      goto LABEL_39;
    }
  }
  uint64_t v30 = 0;
  uint64_t v31 = 8 * v25;
  do
  {
    uint64_t v32 = *v28++;
    v30 |= v32;
    v31 -= 8;
  }
  while (v31);
  if (v30) {
    goto LABEL_37;
  }
LABEL_39:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v36);
}

uint64_t re::ecs2::BlendShapeWeightsSystem::willAddSystemToECSService(re::ecs2::BlendShapeWeightsSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 19) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v4 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v5);
  *((void *)this + 22) = v4;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = result;
  return result;
}

void *re::ecs2::BlendShapeWeightsSystem::willRemoveSystemFromECSService(void *this)
{
  this[19] = 0;
  this[22] = 0;
  this[23] = 0;
  return this;
}

void re::ecs2::BlendShapeWeightsSystem::willAddSceneToECSService(re::ecs2::BlendShapeWeightsSystem *this, re::EventBus **a2)
{
  v79[11] = *MEMORY[0x263EF8340];
  uint64_t v58 = (re::ecs2::Scene *)a2;
  uint64_t v4 = (char *)this + 216;
  v67[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::BlendShapeWeightsSystem *)((char *)this + 336);
  unint64_t v6 = *((void *)this + 43);
  int v7 = *((_DWORD *)this + 88);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)this + 360);
    }
    else {
      uint64_t v8 = (void *)*((void *)this + 46);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 360);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 46);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v59 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 336, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v59);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::BlendShapeWeightsSystem *)((char *)this + 272), v67, (uint64_t *)&v59);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v59);
    unint64_t v15 = (char *)this + 384;
    unint64_t v16 = v59;
    goto LABEL_49;
  }
LABEL_17:
  long long v66 = 0u;
  long long v59 = 0u;
  *(void *)&long long v60 = 0;
  *((void *)&v60 + 1) = -1;
  long long v61 = 0u;
  long long v62 = 0u;
  uint64_t v63 = 0;
  uint64_t v64 = 1;
  long long v65 = 0uLL;
  unint64_t v17 = *((void *)this + 32);
  *(void *)&long long v66 = 0;
  unint64_t v18 = *((void *)this + 28);
  DWORD2(v66) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 27, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 28);
  }
  if (v18 <= v17 >> 2)
  {
    v67[1] = 0;
    memset(v79, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v71 = 136315906;
    uint64_t v72 = "operator[]";
    __int16 v73 = 1024;
    int v74 = 858;
    __int16 v75 = 2048;
    unint64_t v76 = v17 >> 2;
    __int16 v77 = 2048;
    unint64_t v78 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_74;
  }
  if (*((unsigned char *)this + 232)) {
    unint64_t v19 = (char *)this + 240;
  }
  else {
    unint64_t v19 = (char *)*((void *)this + 31);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 32);
  ++*((_DWORD *)this + 66);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v59;
  long long v23 = v60;
  long long v24 = v61;
  *(void *)(v21 + 48) = v62;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v62 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v59);
  uint64_t v26 = *((void *)this + 32);
  if (!v26)
  {
LABEL_74:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::init(v27, (uint64_t)v4, v67[0]);
  v79[0] = *((void *)this + 32) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::BlendShapeWeightsSystem *)((char *)this + 272), v67, v79);
  unint64_t v28 = *((void *)this + 32);
  unint64_t v29 = *((void *)this + 47);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 47) = v28;
  *(void *)&long long v59 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v59);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 47) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 352)) {
      unint64_t v33 = (char *)this + 360;
    }
    else {
      unint64_t v33 = (char *)*((void *)this + 46);
    }
    *(void *)&v33[8 * *((void *)this + 43) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 32);
  unint64_t v35 = *((void *)this + 53);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 53) = v34;
  *(void *)&long long v59 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::BlendShapeWeightsSystem *)((char *)this + 384), v36, &v59);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 53) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 400)) {
      unint64_t v39 = (char *)this + 408;
    }
    else {
      unint64_t v39 = (char *)*((void *)this + 52);
    }
    *(void *)&v39[8 * *((void *)this + 49) - 8] &= v37;
  }
  unint64_t v16 = v79[0];
  unint64_t v15 = (char *)this + 384;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 448)) {
    goto LABEL_67;
  }
  unint64_t v40 = *((void *)this + 49);
  int v41 = *((_DWORD *)this + 100);
  if (v40 >= 0xB)
  {
    if (v41) {
      long long v42 = (void *)((char *)this + 408);
    }
    else {
      long long v42 = (void *)*((void *)this + 52);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        goto LABEL_67;
      }
    }
LABEL_65:
    uint64_t v48 = (re::ecs2::System *)*((void *)this + 54);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    goto LABEL_67;
  }
  if (v41)
  {
    unint64_t v43 = (uint64_t *)((char *)this + 408);
    if (!v40) {
      goto LABEL_67;
    }
  }
  else
  {
    unint64_t v43 = (uint64_t *)*((void *)this + 52);
    if (!v40) {
      goto LABEL_67;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
LABEL_67:
  uint64_t v49 = a2[36];
  if (v49)
  {
    *(void *)&long long v62 = 0;
    long long v59 = 0u;
    long long v60 = 1uLL;
    long long v61 = 0uLL;
    uint64_t v50 = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 104, (uint64_t *)&v58, (uint64_t)&v59);
    re::BucketArray<RESubscriptionHandle,4ul>::deinit((uint64_t)&v59);
    unint64_t v51 = (_anonymous_namespace_ *)v59;
    if ((void)v59)
    {
      if ((v60 & 1) == 0) {
        unint64_t v51 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v59 + 40))();
      }
    }
    uint64_t v69 = re::globalAllocators((re *)v52)[2];
    unint64_t v53 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v69 + 32))(v69, 32, 0);
    *unint64_t v53 = &unk_26E701C20;
    v53[1] = this;
    v53[2] = re::ecs2::BlendShapeWeightsSystem::removedBlendShapeWeightsBufferHandler;
    v53[3] = 0;
    long long v70 = v53;
    uint64_t v54 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v68, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v56 = v55;
    uint64_t v57 = (void *)re::BucketArray<RESubscriptionHandle,4ul>::addUninitialized(v50);
    *uint64_t v57 = v54;
    v57[1] = v56;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v68);
  }
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 80 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 80 * v10 + 16) != v6)
  {
    LODWORD(v1objc_initWeak(location, 0) = *(_DWORD *)(v11 + 80 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 80 * v10;
  return v12 + 24;
}

uint64_t re::ecs2::BlendShapeWeightsSystem::willRemoveSceneFromECSService(re::ecs2::BlendShapeWeightsSystem *this, re::ecs2::Scene *a2)
{
  long long v23 = a2;
  uint64_t v3 = (char *)this + 104;
  uint64_t v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v23);
  if (v4)
  {
    uint64_t v5 = *((void *)v23 + 36);
    if (v5)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(void *)(v4 + 40);
      if (v7)
      {
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v9 = re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v6, i);
          re::EventBus::unsubscribe(v5, *(void *)v9, *(void *)(v9 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v23);
  }
  long long v24 = v23;
  uint64_t v10 = (uint64_t *)((char *)this + 272);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 34, &v24);
  if (result != -1)
  {
    uint64_t v12 = *((void *)this + 35) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 336, *(void *)(v12 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 384, *(void *)(v12 + 8));
    unsigned int v13 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 216, *(void *)(v12 + 8));
    if (*v13)
    {
      uint64_t v14 = v13;
      void *v13 = 0;
      unint64_t v15 = v13 + 1;
      uint64_t v16 = *(void *)(v13[1] + 288);
      if (v16)
      {
        uint64_t v17 = v13[12];
        if (v17)
        {
          for (unint64_t j = 0; j != v17; ++j)
          {
            uint64_t v19 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v14 + 7), j);
            re::EventBus::unsubscribe(v16, *(void *)v19, *(void *)(v19 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v14 + 7));
      uint64_t v20 = 0;
      uint64_t v21 = v14 + 3;
      do
      {
        long long v22 = (re::ecs2::ComponentBucketsBase *)v14[2];
        if (*(void *)v22) {
          re::ecs2::ComponentBucketsBase::removeBucket(v22, v21[v20]);
        }
        v21[v20++] = -1;
      }
      while (v20 != 4);
      *unint64_t v15 = 0;
      v15[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v10, &v24);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(void *)(v9 + 80 * v7 + 16) != v3)
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 80 * v7 + 8);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (*(void *)(v9 + 80 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 80 * v10 + 8) = *(_DWORD *)(v9 + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 80 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 80 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + 80 * v7);
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v7 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v12 + 1;
  return 1;
}

void *re::ecs2::BlendShapeWeightsComponentVersionUtilities::downgradeBlendShapeWeightsComponentFromFall2023@<X0>(void *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = this[9];
  if (v5)
  {
    uint64_t v6 = (uint64_t)this;
    uint64_t v7 = this[11];
    uint64_t v8 = v7 + 32 * v5;
    uint64_t v9 = this + 41;
    do
    {
      uint64_t v18 = 0;
      int v17 = 0;
      memset(v16, 0, sizeof(v16));
      uint64_t v10 = *(void *)(v7 + 8);
      if (v10)
      {
        int v11 = *(int **)(v7 + 16);
        uint64_t v12 = 4 * v10;
        do
        {
          int v15 = 0;
          int v13 = *v11++;
          int v15 = v13;
          re::DynamicArray<float>::add((_anonymous_namespace_ *)v16, (float *)&v15);
          v12 -= 4;
        }
        while (v12);
      }
      unint64_t v14 = *(void *)(v6 + 344);
      if (v14 >= *(void *)(v6 + 336))
      {
        re::DynamicArray<re::DynamicArray<float>>::growCapacity(v9, v14 + 1);
        unint64_t v14 = *(void *)(v6 + 344);
      }
      re::DynamicArray<float>::DynamicArray(*(void *)(v6 + 360) + 40 * v14, v16);
      ++*(void *)(v6 + 344);
      ++*(_DWORD *)(v6 + 352);
      this = (void *)v16[0];
      if (v16[0] && v18) {
        this = (void *)(*(uint64_t (**)(void))(*(void *)v16[0] + 40))();
      }
      v7 += 32;
    }
    while (v7 != v8);
  }
  *a2 = 1;
  return this;
}

void *re::ecs2::allocInfo_BlendShapeWeightsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A160))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A228, "BlendShapeWeightsComponent");
    __cxa_guard_release(&qword_26AF8A160);
  }
  return &unk_26AF8A228;
}

void re::ecs2::initInfo_BlendShapeWeightsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  unint64_t v43 = 0x881015E46FDA48A4;
  uint64_t v44 = "BlendShapeWeightsComponent";
  re::StringID::destroyString((re::StringID *)&v43);
  *((_OWORD *)this + 2) = v38;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A158, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8A158);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8A180 = v7;
      uint64_t v9 = re::introspectionAllocator((re *)v7);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A170, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8A170))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8A1A8);
        qword_26AF8A1A8 = (uint64_t)&unk_26E701DD8;
        __cxa_guard_release(&qword_26AF8A170);
      }
      if ((_MergedGlobals_261 & 1) == 0)
      {
        uint64_t v10 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v8);
        if ((_MergedGlobals_261 & 1) == 0)
        {
          uint64_t v11 = (uint64_t)v10;
          _MergedGlobals_261 = 1;
          int v12 = *((_DWORD *)v10 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8A1A8, 0);
          qword_26AF8A1B8 = 0x2800000003;
          dword_26AF8A1C0 = v12;
          word_26AF8A1C4 = 0;
          *(void *)&xmmword_26AF8A1C8 = 0;
          *((void *)&xmmword_26AF8A1C8 + 1) = 0xFFFFFFFFLL;
          qword_26AF8A1D8 = v11;
          unk_26AF8A1E0 = 0;
          qword_26AF8A1A8 = (uint64_t)&unk_26E701DD8;
          re::IntrospectionRegistry::add(v13, v14);
          re::getPrettyTypeName((re *)&qword_26AF8A1A8, (const re::IntrospectionBase *)&v43);
          if (v44) {
            int v15 = v45;
          }
          else {
            int v15 = (char *)&v44 + 1;
          }
          if (v43 && (v44 & 1) != 0) {
            (*(void (**)(void))(*(void *)v43 + 40))();
          }
          long long v40 = *(_OWORD *)(v11 + 32);
          uint64_t v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v41);
          if (v16)
          {
            uint64_t v17 = *v16;
            *((void *)&v39 + 1) = v17;
          }
          else
          {
            long long v42 = v40;
            re::TypeBuilder::beginListType((uint64_t)&v43, v41, 1, 0x28uLL, 8uLL, &v42);
            re::TypeBuilder::setConstructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v43, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v43, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v43, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v43, v18);
          }
          xmmword_26AF8A1C8 = v39;
          re::StringID::destroyString((re::StringID *)v41);
        }
      }
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "blendShapeWeights";
      *(void *)(v19 + 16) = &qword_26AF8A1A8;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x14800000001;
      *(_DWORD *)(v19 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8A188 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      long long v22 = re::introspect_AssetHandle((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "blendShapeWeightsDefinition";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x2000000002;
      *(_DWORD *)(v23 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF8A190 = v23;
      long long v24 = re::introspectionAllocator((re *)v23);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A178, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8A178))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_26AF8A1E8);
        qword_26AF8A1E8[0] = (uint64_t)&unk_26E701E70;
        __cxa_guard_release(&qword_26AF8A178);
      }
      if ((byte_26AF8A151 & 1) == 0)
      {
        uint64_t v25 = re::introspect_BlendShapeWeights((re::IntrospectionBase **)1);
        if ((byte_26AF8A151 & 1) == 0)
        {
          uint64_t v26 = v25;
          byte_26AF8A151 = 1;
          int v27 = *(_DWORD *)(v25 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF8A1E8, 0);
          unk_26AF8A1F8 = 0x2800000003;
          unk_26AF8A200 = v27;
          unk_26AF8A204 = 0;
          *(void *)&xmmword_26AF8A208 = 0;
          *((void *)&xmmword_26AF8A208 + 1) = 0xFFFFFFFFLL;
          unk_26AF8A218 = v26;
          unk_26AF8A220 = 0;
          qword_26AF8A1E8[0] = (uint64_t)&unk_26E701E70;
          re::IntrospectionRegistry::add(v28, v29);
          re::getPrettyTypeName((re *)qword_26AF8A1E8, (const re::IntrospectionBase *)&v43);
          if (v44) {
            unint64_t v30 = v45;
          }
          else {
            unint64_t v30 = (char *)&v44 + 1;
          }
          if (v43 && (v44 & 1) != 0) {
            (*(void (**)(void))(*(void *)v43 + 40))();
          }
          long long v40 = *(_OWORD *)(v26 + 32);
          uint64_t v31 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v41);
          if (v31)
          {
            uint64_t v32 = *v31;
            *((void *)&v39 + 1) = v32;
          }
          else
          {
            long long v42 = v40;
            re::TypeBuilder::beginListType((uint64_t)&v43, v41, 1, 0x28uLL, 8uLL, &v42);
            re::TypeBuilder::setConstructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v43, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v43, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v43, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v43, v33);
          }
          xmmword_26AF8A208 = v39;
          re::StringID::destroyString((re::StringID *)v41);
        }
      }
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "blendWeights";
      *(void *)(v34 + 16) = qword_26AF8A1E8;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x3800000003;
      *(_DWORD *)(v34 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF8A198 = v34;
      unint64_t v35 = re::introspectionAllocator((re *)v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 64, 8);
      *(_DWORD *)uint64_t v36 = 6;
      *(void *)(v36 + 8) = 1;
      *(void *)(v36 + 16) = 0;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0;
      *(unsigned char *)(v36 + 4objc_initWeak(location, 0) = 1;
      *(void *)(v36 + 48) = re::ecs2::BlendShapeWeightsComponentVersionUtilities::downgradeBlendShapeWeightsComponentFromFall2023;
      *(_DWORD *)(v36 + 56) = 2;
      qword_26AF8A1A0 = v36;
      __cxa_guard_release(&qword_26AF8A158);
    }
  }
  *((void *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF8A180;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlendShapeWeightsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v37 = v38;
}

double re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::BlendShapeWeightsComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)(a3 + 41));
  re::FixedArray<CoreIKTransform>::deinit(a3 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 35);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 32);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a3 + 23));
  re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)(a3 + 18));
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)(a3 + 13));
  re::DynamicArray<re::BlendShapeWeights>::deinit((uint64_t)(a3 + 7));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsComponent>(uint64_t *a1)
{
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)(a1 + 41));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 35);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 23));
  re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)(a1 + 18));
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)(a1 + 13));
  re::DynamicArray<re::BlendShapeWeights>::deinit((uint64_t)(a1 + 7));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BlendShapeWeightsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsComponent>, this);
}

void *re::ecs2::allocInfo_BlendShapeWeightsSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A168))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A2A0, "BlendShapeWeightsSystem");
    __cxa_guard_release(&qword_26AF8A168);
  }
  return &unk_26AF8A2A0;
}

void re::ecs2::initInfo_BlendShapeWeightsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xAD07549E6AE565F4;
  v5[1] = "BlendShapeWeightsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1C800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_BlendShapeWeightsSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::BlendShapeWeightsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::BlendShapeWeightsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlendShapeWeightsSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::BlendShapeWeightsSystem *re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsSystem>(int a1, int a2, re::ecs2::BlendShapeWeightsSystem *this)
{
  return re::ecs2::BlendShapeWeightsSystem::BlendShapeWeightsSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 27);
  a3[20] = (uint64_t)&unk_26E701B30;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 24);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 13);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsSystem>(uint64_t *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 27);
  a1[20] = (uint64_t)&unk_26E701B30;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 24);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 13);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BlendShapeWeightsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsSystem>, this);
}

uint64_t re::ecs2::ComponentType<re::ecs2::BlendShapeWeightsComponent>::makeBindNode@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *uint64_t v5 = &unk_26E701F08;
  uint64_t result = re::BindPoint::BindPoint((uint64_t)(v5 + 1), a2);
  v5[7] = 0;
  *(void *)(a3 + 16) = v5;
  return result;
}

uint64_t re::ecs2::BlendShapeWeightsComponentStateImpl::dependsOnComponents(re::ecs2::BlendShapeWeightsComponentStateImpl *this)
{
  return *((void *)this + 6);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BlendShapeWeightsComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BlendShapeWeightsComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::BlendShapeWeightsSystem::~BlendShapeWeightsSystem(re::ecs2::BlendShapeWeightsSystem *this)
{
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = &unk_26E701B30;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 24);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27);
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = &unk_26E701B30;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 24);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::BlendShapeWeightsSystem::typeInfo(re::ecs2::BlendShapeWeightsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E701C20;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E701C20;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void *re::DynamicArray<re::DynamicArray<float>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    long long v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DynamicArray<float>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DynamicArray<float>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

double re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    uint64_t v2 = result + 24;
    re::BucketArray<RESubscriptionHandle,4ul>::deinit(result + 24);
    return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E701C78;
    v10[1] = a1;
    _OWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    int32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v14 = v11;
    v14[1] = v13;
    int v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E701CD0;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    uint64_t v16[3] = 0;
    unsigned int v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E701D28;
    v22[1] = a1;
    _OWORD v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    __int16 v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E701D80;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    uint64_t v28[3] = 0;
    int v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    double result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      uint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        int v71 = 0;
        long long v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *long long v37 = &unk_26E701C78;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        int v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        long long v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        unint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *unint64_t v43 = &unk_26E701CD0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        long long v65 = 0;
        uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *uint64_t v49 = &unk_26E701D28;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        _OWORD v49[3] = 0;
        long long v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        unint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *unint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E701D80;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v59 = v56;
        v59[1] = v58;
        double result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E701C78;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E701C78;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E701CD0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E701CD0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E701D28;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E701D28;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E701D80;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E701D80;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<RESubscriptionHandle,4ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<re::PipelineCompilationData,4ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 4objc_initWeak(location, 0) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 80 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v1objc_initWeak(location, 0) = a3;
  *(void *)(*(void *)(a1 + 16) + 80 * v10 + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 80 * v10;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = 0;
  v14 += 24;
  *(_DWORD *)(v14 + 16) = 1;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 4objc_initWeak(location, 0) = 0;
  *(void *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 48) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v14, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t *re::BucketArray<RESubscriptionHandle,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4objc_initWeak(location, 0) = 0;
  uint64_t result = re::BucketArray<RESubscriptionHandle,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<RESubscriptionHandle,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 64, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<RESubscriptionHandle,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<RESubscriptionHandle,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 3);
}

void *re::DynamicArray<re::BlendShapeWeights>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::BlendShapeWeights>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BlendShapeWeights>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::IntrospectionDynamicArray<re::DynamicArray<float>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DynamicArray<float>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::DynamicArray<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<float>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::DynamicArray<float>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::DynamicArray<float>>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::DynamicArray<float>>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::DynamicArray<float>>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::DynamicArray<float>>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::DynamicArray<float>>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DynamicArray<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::DynamicArray<float>>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = *((void *)this + 4) + 40 * v8;
  *(void *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)uint64_t v9 = 0;
  *(_DWORD *)(v9 + 24) = 1;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  unint64_t v11 = (re::IntrospectionBase *)(*((void *)this + 4) + 40 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::DynamicArray<float>>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 40 * v8;
      do
      {
        re::DynamicArray<unsigned long>::deinit(v9);
        v9 += 40;
        v10 -= 40;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::DynamicArray<float>>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  unint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<float>>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      int v13 = *(char **)(a1 + 32);
      uint64_t v14 = 40 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 40;
        v14 -= 40;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::BlendShapeWeights>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeights>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::BlendShapeWeights>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeights>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::BlendShapeWeights>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::BlendShapeWeights>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::BlendShapeWeights>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::BlendShapeWeights>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeights>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::BlendShapeWeights>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::BlendShapeWeights>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::BlendShapeWeights>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::BlendShapeWeights>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  long long v14 = 0u;
  long long v15 = 0u;
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::BlendShapeWeights>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = re::FixedArray<float>::FixedArray((uint64_t *)(*((void *)this + 4) + 32 * v8), (uint64_t)&v14);
  uint64_t v10 = *((void *)&v15 + 1);
  v9[3] = *((void *)&v15 + 1);
  if (v10) {
    id v11 = (id)(v10 + 8);
  }
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v14);
  uint64_t v12 = (re::IntrospectionBase *)(*((void *)this + 4) + 32 * *((void *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeights>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeights>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::BlendShapeWeights>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(re::BlendShapeWeights **)(a1 + 32);
      uint64_t v10 = 32 * v8;
      do
      {
        re::BlendShapeWeights::~BlendShapeWeights(v9);
        uint64_t v9 = (re::BlendShapeWeights *)(v11 + 32);
        v10 -= 32;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::BlendShapeWeights>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::BlendShapeWeights>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::BlendShapeWeights>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13)
    {
      long long v14 = *(char **)(a1 + 32);
      uint64_t v15 = 32 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 32;
        v15 -= 32;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 32 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::BlendShapeWeightsComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *((_OWORD *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 1objc_initWeak(location, 0) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  int v1 = (_OWORD *)((char *)a1 + 144);
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6DFBC0;
  double result = 0.0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_DWORD *)(v2 + 168) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_DWORD *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 8objc_initWeak(location, 0) = 0;
  *(void *)(v2 + 216) = 0;
  *(void *)(v2 + 224) = v2 + 104;
  *(void *)(v2 + 232) = v1;
  *(void *)(v2 + 24objc_initWeak(location, 0) = 0;
  *(void *)(v2 + 248) = -1;
  *(void *)(v2 + 36objc_initWeak(location, 0) = 0;
  *(_DWORD *)(v2 + 352) = 0;
  *(_OWORD *)(v2 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  return result;
}

id re::internal::defaultRetain<re::ecs2::BlendShapeWeightsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::BlendShapeWeightsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void re::ecs2::BlendShapeWeightsComponentBindNodeImpl::~BlendShapeWeightsComponentBindNodeImpl(re::ecs2::BlendShapeWeightsComponentBindNodeImpl *this)
{
  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindNodeImpl<re::ecs2::BlendShapeWeightsComponentBindNodeImpl>::implTypeInfo()
{
  return "@";
}

uint64_t re::internal::BindNodeImpl<re::ecs2::BlendShapeWeightsComponentBindNodeImpl>::copyInto(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *a2 = &unk_26E701F08;
  a2[1] = v3;
  uint64_t result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
  a2[7] = 0;
  return result;
}

uint64_t re::internal::BindNodeImpl<re::ecs2::BlendShapeWeightsComponentBindNodeImpl>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E701F08;
  uint64_t result = re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  a2[7] = 0;
  return result;
}

BOOL re::internal::BindNodeImpl<re::ecs2::BlendShapeWeightsComponentBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  if ((char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) != "@") {
    return 0;
  }
  return re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

double re::ecs2::BlendShapeWeightsComponentBindNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t re::ecs2::BlendShapeWeightsComponentBindNodeImpl::relativeNodeForKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v4 = *(void *)(a2 + 8);
  if (!v4
    || (v5 = result, double result = strncmp(*(const char **)a2, "blendWeights", v4), result)
    || aBlendweights[v4])
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    uint64_t v7 = *(void *)(v5 + 8);
    void *v6 = &unk_26E701FA0;
    v6[1] = v7;
    double result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(v6 + 2), (uint64_t *)(v5 + 16));
    *(void *)(a3 + 16) = v6;
  }
  return result;
}

double re::ecs2::BlendShapeWeightsComponentBindNodeImpl::bindPointForKey@<D0>(re *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v5 = *re::foundationBindingLogObjects(a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *a2;
    int v8 = 136315138;
    uint64_t v9 = v7;
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Failed to bind to blend shape index: %s", (uint8_t *)&v8, 0xCu);
  }
  *(void *)(a3 + 4objc_initWeak(location, 0) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

void re::ecs2::BlendWeightsIndexBindNodeImpl::~BlendWeightsIndexBindNodeImpl(re::ecs2::BlendWeightsIndexBindNodeImpl *this)
{
  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindNodeImpl<re::ecs2::BlendWeightsIndexBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<re::ecs2::BlendWeightsIndexBindNodeImpl>::copyInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E701FA0;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<re::ecs2::BlendWeightsIndexBindNodeImpl>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E701FA0;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<re::ecs2::BlendWeightsIndexBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  if ((char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) != "8") {
    return 0;
  }
  return re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

double re::ecs2::BlendWeightsIndexBindNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double re::ecs2::BlendWeightsIndexBindNodeImpl::relativeNodeForKey@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void re::ecs2::BlendWeightsIndexBindNodeImpl::bindPointForKey(uint64_t a1@<X0>, const char **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  size_t v4 = (size_t)a2[1];
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = *a2;
  if (*(unsigned __int8 *)*a2 - 48 > 9)
  {
    BOOL v9 = 1;
  }
  else
  {
    uint64_t v6 = 1;
    do
    {
      size_t v7 = v6;
      if (v4 == v6) {
        break;
      }
      unsigned int v8 = v5[v6++] - 48;
    }
    while (v8 < 0xA);
    BOOL v9 = v7 < v4;
  }
  uint64_t v10 = (const re::BindPoint *)(a1 + 8);
  uint64_t v11 = (_anonymous_namespace_ *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 8));
  if (!v11)
  {
LABEL_11:
    *(void *)(a3 + 4objc_initWeak(location, 0) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 0;
    return;
  }
  uint64_t v12 = v11;
  unint64_t v23 = 0;
  uint64_t v24 = "";
  LOBYTE(v22) = v9;
  uint64_t v20 = 0;
  unint64_t v21 = "";
  if (v9)
  {
    re::StringID::operator=(&v23, &v20);
LABEL_14:
    {
      {
        re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
      }
    }
    *(void *)a3 = re::introspect<re::BlendShapeWeights>(void)::info;
    *(void *)(a3 + 4objc_initWeak(location, 0) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 32) = 0;
    *(void *)(a3 + 8) = 0;
    re::BindPoint::addToBindPointStack((re::BindPoint *)a3, v10);
    long long v25 = 0u;
    long long v26 = 0u;
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a3 + 8), &v25);
    double v14 = re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v25);
    uint64_t v15 = *(void *)(a3 + 40) + 32 * *(void *)(a3 + 24);
    *(void *)(v15 - 32) = 0;
    uint64_t v17 = v22;
    unint64_t v18 = v23;
    unint64_t v19 = v24;
    uint64_t v24 = "";
    *(void *)&long long v25 = v22;
    unint64_t v23 = 0;
    *(void *)uint64_t v16 = &unk_26E702038;
    objc_initWeak((id *)(v16 + 8), (char *)v12 + 8);
    *(void *)(v16 + 16) = v17;
    *(void *)(v16 + 24) = v18;
    *(void *)(v16 + 32) = v19;
    *((void *)&v25 + 1) = 0;
    *(void *)&long long v26 = "";
    re::StringID::destroyString((re::StringID *)((char *)&v25 + 8));
    *(void *)(v15 - 16) = v16;
    goto LABEL_17;
  }
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  if (sscanf(v21, "%u", &v25) == 1)
  {
    HIDWORD(v22) = v25;
    goto LABEL_14;
  }
  *(void *)(a3 + 4objc_initWeak(location, 0) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
LABEL_17:
  re::StringID::destroyString((re::StringID *)&v20);
  re::StringID::destroyString((re::StringID *)&v23);
}

void re::ecs2::BlendWeightsIndexBindPointImpl::~BlendWeightsIndexBindPointImpl(id *this)
{
  this[1] = 0;
}

{
  uint64_t vars8;

  re::StringID::destroyString((re::StringID *)(this + 3));
  objc_destroyWeak(this + 1);
  this[1] = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindPointImpl<re::ecs2::BlendWeightsIndexBindPointImpl>::implTypeInfo()
{
  return "(";
}

re::StringID *re::internal::BindPointImpl<re::ecs2::BlendWeightsIndexBindPointImpl>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702038;
  *(void *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return re::StringID::StringID((re::StringID *)(a2 + 24), (const StringID *)(a1 + 24));
}

re::StringID *re::internal::BindPointImpl<re::ecs2::BlendWeightsIndexBindPointImpl>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702038;
  *(void *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return re::StringID::StringID((re::StringID *)(a2 + 24), (const StringID *)(a1 + 24));
}

BOOL re::internal::BindPointImpl<re::ecs2::BlendWeightsIndexBindPointImpl>::equals(uint64_t a1, uint64_t a2)
{
  if ((char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) != "(" {
    || *(void *)(a1 + 8) != *(void *)(a2 + 8)
  }
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  return re::StringID::operator==((void *)(a1 + 24), (void *)(a2 + 24));
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::hash(uint64_t a1)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained - 8;
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((unint64_t)v3 ^ ((unint64_t)v3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                         * ((unint64_t)v3 ^ ((unint64_t)v3 >> 30))) >> 27));
  unint64_t v5 = (*(unsigned __int8 *)(a1 + 16) + ((v4 ^ (v4 >> 31)) << 6) + ((v4 ^ (v4 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v4 ^ (v4 >> 31);
  unint64_t v6 = (*(unsigned int *)(a1 + 20) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  return ((*(void *)(a1 + 24) >> 1) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::isWeak()
{
  return 1;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::isAlive()
{
  return 1;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::baseValueUntyped(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained) {
    uint64_t v3 = (char *)(WeakRetained - 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (WeakRetained)
  {
    unint64_t v4 = WeakRetained;
    if (*(unsigned char *)(a1 + 16) == 1)
    {
      uint64_t v8 = re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>((re::BlendShapeWeightsDefinitionAsset *)(WeakRetained + 3));
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 96);
        if (v9)
        {
          unint64_t v5 = 0;
          uint64_t v10 = (void *)(a1 + 24);
          uint64_t v11 = *(void **)(v8 + 112);
          while (!re::StringID::operator==(v11, v10))
          {
            ++v5;
            v11 += 2;
            if (v9 == v5) {
              goto LABEL_15;
            }
          }
          if (*((void *)v3 + 9) <= v5)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          unint64_t v6 = v3 + 88;
          goto LABEL_18;
        }
      }
    }
    else if (!*(unsigned char *)(a1 + 16))
    {
      unint64_t v5 = *(unsigned int *)(a1 + 20);
      if (WeakRetained[8] > v5)
      {
        unint64_t v6 = WeakRetained + 10;
LABEL_18:
        uint64_t v7 = *v6 + 32 * v5;
        goto LABEL_19;
      }
    }
LABEL_15:
    uint64_t v7 = 0;
LABEL_19:

    return v7;
  }
  return 0;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::supportsOverrideValue()
{
  return 1;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::isOverridden()
{
  return 0;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::overrideValueUntyped()
{
  return 0;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::boundOwner()
{
  return 0;
}

uint64_t re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>(re::BlendShapeWeightsDefinitionAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::BlendShapeWeightsDefinitionAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    unint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        uint64_t v7 = (char *)v6[18];
      }
      else {
        uint64_t v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

re::ecs2::RenderCallbacksComponent *re::ecs2::RenderCallbacksComponent::RenderCallbacksComponent(re::ecs2::RenderCallbacksComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E702108;
  uint64_t v3 = v2 + 56;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(void *)(v2 + 92) = 0x7FFFFFFFLL;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0;
  *(void *)(v2 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(_DWORD *)(v2 + 128) = 0;
  *(void *)(v2 + 104) = 0;
  unint64_t v4 = (void *)(v2 + 104);
  *(unsigned char *)(v2 + 144) = 0;
  unint64_t v5 = re::globalAllocators((re *)v2);
  re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(v3, v5[2], 16);
  void *v4 = re::globalAllocators(v6)[2];
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v4, 0x10uLL);
  ++*((_DWORD *)this + 32);
  return this;
}

void re::ecs2::RenderCallbacksSystem::updateScenes(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 104);
  if (!v3 || (*(unsigned char *)(v3 + 424) & 0x10) != 0)
  {
    uint64_t v4 = a2[1];
    if (v4)
    {
      unint64_t v5 = (void **)*a2;
      uint64_t v6 = *a2 + 8 * v4;
      uint64_t v28 = v6;
      do
      {
        uint64_t v7 = *(void *)(a1 + 112);
        if (!v7)
        {
          re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 36);
          _os_crash();
          __break(1u);
        }
        int v8 = *v5;
        uint64_t v9 = *(void *)(v7 + 104);
        if (v9) {
          uint64_t v10 = (re::DynamicString **)re::RenderFrameBox::get(v9 + 344, 0xFFFFFFFFFFFFFFFuLL);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 25), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (!v11) {
          goto LABEL_25;
        }
        uint64_t v12 = *(void *)(v11 + 24);
        if (!v12) {
          goto LABEL_25;
        }
        uint64_t v13 = *(uint64_t **)(v11 + 40);
        if (v12 != 1)
        {
          double v14 = *re::graphicsLogObjects((re *)v11);
          uint64_t v11 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          if (v11)
          {
            uint64_t v15 = v14;
            uint64_t v16 = v8[5];
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = "updateSceneInternal";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v16;
            _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "%s: more than 1 RenderCallbacksComponent found on scene: %s.Only first component will be processed.\n", buf, 0x16u);
          }
        }
        uint64_t v17 = *v13;
        if (!*(unsigned char *)(v17 + 144))
        {
          long long v25 = *(void (***)(void))(v17 + 48);
          if (v25)
          {
            if (!*(void *)(a1 + 112))
            {
              uint64_t v27 = *re::graphicsLogObjects((re *)v11);
              uint64_t v6 = v28;
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = "updateSceneInternal";
                _os_log_impl(&dword_233120000, v27, OS_LOG_TYPE_DEFAULT, "%s: invalid RenderManager.\n", buf, 0xCu);
              }
              goto LABEL_25;
            }
            long long v26 = v25;
            v25[2]();

            *(unsigned char *)(v17 + 144) = 1;
            uint64_t v6 = v28;
          }
        }
        uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
        (*(void (**)(uint8_t *__return_ptr))(*(void *)v18 + 8))(buf);
        if (buf[0]) {
          unint64_t v19 = *(const re::ecs2::Scene **)&buf[8];
        }
        else {
          unint64_t v19 = 0;
        }
        re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, v19, v10, v30);
        memset(buf, 0, sizeof(buf));
        uint64_t v32 = 0x7FFFFFFFLL;
        if (*(void *)(v17 + 32))
        {
          re::ObjCObject::operator=((id *)buf, (id *)(v17 + 32));
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=((uint64_t)&buf[8], v17 + 56);
          uint64_t v20 = *(void *)(v17 + 120);
          if (v20)
          {
            unint64_t v21 = *(uint64_t **)(v17 + 136);
            uint64_t v22 = 8 * v20;
            do
            {
              uint64_t v23 = *v21++;
              uint64_t v29 = v23;
              re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&buf[8], &v29);
              v22 -= 8;
            }
            while (v22);
            *(void *)(v17 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
            ++*(_DWORD *)(v17 + 128);
          }
          uint64_t v29 = v30[0] >> 1;
          uint64_t v24 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v10 + 33), (const re::WeakStringID *)&v29)+ 48);
          (*(void (**)(void))(v24 + 1040))();
        }
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&buf[8]);

        re::StringID::destroyString((re::StringID *)v30);
LABEL_25:
        ++v5;
      }
      while (v5 != (void **)v6);
    }
  }
}

void *re::ecs2::allocInfo_RenderCallbacksComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_262, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_262))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A338, "RenderCallbacksComponent");
    __cxa_guard_release(&_MergedGlobals_262);
  }
  return &unk_26AF8A338;
}

void re::ecs2::initInfo_RenderCallbacksComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xD3BBB33D62F7084ALL;
  v9[1] = "RenderCallbacksComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A328, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8A328);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8A320 = v7;
      __cxa_guard_release(&qword_26AF8A328);
    }
  }
  *((void *)this + 2) = 0x9800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8A320;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderCallbacksComponent>;
  *((void *)this + 1objc_destroyWeak(this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::RenderCallbacksComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderCallbacksComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderCallbacksComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::ecs2::RenderCallbacksComponent *re::internal::defaultConstruct<re::ecs2::RenderCallbacksComponent>(int a1, int a2, re::ecs2::RenderCallbacksComponent *this)
{
  return re::ecs2::RenderCallbacksComponent::RenderCallbacksComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::RenderCallbacksComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RenderCallbacksComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RenderCallbacksComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderCallbacksComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderCallbacksComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderCallbacksComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderCallbacksComponent>, this);
}

void *re::ecs2::allocInfo_RenderCallbacksSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A330, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A330))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A3B0, "RenderCallbacksSystem");
    __cxa_guard_release(&qword_26AF8A330);
  }
  return &unk_26AF8A3B0;
}

void re::ecs2::initInfo_RenderCallbacksSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xD5A6B6E0F52B380ELL;
  v5[1] = "RenderCallbacksSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_RenderCallbacksSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderCallbacksSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::RenderCallbacksSystem>;
  *((void *)this + 1objc_destroyWeak(this + 1) = re::internal::defaultRetain<re::ecs2::RenderCallbacksSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::RenderCallbacksSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderCallbacksSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderCallbacksSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::RenderCallbacksSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E702160;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::RenderCallbacksSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::RenderCallbacksSystem>(_OWORD *a1)
{
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E702160;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::RenderCallbacksSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RenderCallbacksSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderCallbacksSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderCallbacksSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderCallbacksSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderCallbacksSystem>, this);
}

void re::ecs2::RenderCallbacksSystem::~RenderCallbacksSystem(re::ecs2::RenderCallbacksSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::RenderCallbacksSystem::typeInfo(re::ecs2::RenderCallbacksSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderCallbacksSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderCallbacksSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderCallbacksSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderCallbacksSystem>, 0);
}

void re::ecs2::RenderCallbacksComponent::~RenderCallbacksComponent(re::ecs2::RenderCallbacksComponent *this)
{
  *(void *)this = &unk_26E702108;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7);

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E702108;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7);

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1, v4, v5);
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, v8 + 16, (void *)(v8 + 16));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_31, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 24 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v8;
  }
}

id re::internal::defaultRetain<re::ecs2::RenderCallbacksSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RenderCallbacksSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

__n128 re::PeerVideoStreamingEncoder::operator=(long long *a1, long long *a2)
{
  if (a2 != a1)
  {
    long long v2 = *a1;
    uint64_t v3 = *((void *)a1 + 2);
    int v4 = *((_DWORD *)a2 + 4);
    *a1 = *a2;
    *((_DWORD *)a1 + 4) = v4;
    *((_DWORD *)a2 + 4) = v3;
    *a2 = v2;
    uint64_t v5 = *((void *)a1 + 3);
    *((void *)a1 + 3) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    __n128 result = (__n128)a1[2];
    uint64_t v7 = *((void *)a1 + 6);
    int v8 = *((_DWORD *)a2 + 12);
    a1[2] = a2[2];
    *((_DWORD *)a1 + 12) = v8;
    *((_DWORD *)a2 + 12) = v7;
    a2[2] = (__int128)result;
    uint64_t v9 = *((void *)a1 + 7);
    *((void *)a1 + 7) = *((void *)a2 + 7);
    *((void *)a2 + 7) = v9;
    uint64_t v10 = *((void *)a1 + 8);
    *((void *)a1 + 8) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v10;
  }
  return result;
}

void re::PeerVideoStreamingEncoder::~PeerVideoStreamingEncoder(re::PeerVideoStreamingEncoder *this)
{
  long long v2 = (const void *)*((void *)this + 3);
  if (v2)
  {
    VTCompressionSessionInvalidate(*((VTCompressionSessionRef *)this + 3));
    CFRelease(v2);
    *((void *)this + 3) = 0;
  }
  uint64_t v3 = (__CVPixelBufferPool *)*((void *)this + 7);
  if (v3)
  {
    CVPixelBufferPoolRelease(v3);
    *((void *)this + 7) = 0;
  }
}

void re::PeerVideoStreamingEncoder::createPixelBufferFromPool(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(__CVPixelBufferPool **)(a1 + 56);
  uint64_t v6 = (void *)(a1 + 32);
  if (v5)
  {
    if (*(void *)a2 == *v6
      && *(void *)(a2 + 8) == *(void *)(a1 + 40)
      && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a1 + 48))
    {
      goto LABEL_18;
    }
    long long v7 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v6 = v7;
    CVPixelBufferPoolRelease(v5);
    *(void *)(a1 + 56) = 0;
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v6 = v8;
  }
  uint64_t v9 = re::PeerVideoStreamingUtils::cvPixelFormatFromMTLPixelFormat(*(_DWORD *)(a1 + 48), a2);
  *(void *)uint64_t v35 = *MEMORY[0x263F04240];
  uint64_t v10 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 32)];
  *(void *)pixelBufferOut = v10;
  uint64_t v36 = *MEMORY[0x263F04118];
  uint64_t v11 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 40)];
  *(void *)&pixelBufferOut[8] = v11;
  uint64_t v37 = *MEMORY[0x263F04180];
  uint64_t v12 = [NSNumber numberWithUnsignedInt:v9];
  uint64_t v38 = *MEMORY[0x263F04158];
  *(void *)&pixelBufferOut[16] = v12;
  uint64_t v30 = MEMORY[0x263EFFA88];
  CFDictionaryRef v13 = [NSDictionary dictionaryWithObjects:pixelBufferOut forKeys:v35 count:4];

  CVPixelBufferPoolRef poolOut = 0;
  double v14 = (re *)CVPixelBufferPoolCreate(0, 0, v13, &poolOut);
  if (v14)
  {
    int v15 = (int)v14;
    uint64_t v16 = *re::peerVideoStreamingLogObjects(v14);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v34 = v15;
      _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Error creating pixel buffer pool. errCode: %d", buf, 8u);
    }

    *(void *)(a1 + 56) = 0;
  }
  else
  {
    uint64_t v5 = poolOut;

    *(void *)(a1 + 56) = v5;
    if (v5) {
      goto LABEL_18;
    }
  }
  uint64_t v18 = *re::peerVideoStreamingLogObjects(v17);
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  if (v19)
  {
    uint64_t v25 = *(void *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 40);
    int v27 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)pixelBufferOut = 134218752;
    *(void *)&pixelBufferOut[4] = a1;
    *(_WORD *)&pixelBufferOut[12] = 2048;
    *(void *)&pixelBufferOut[14] = v25;
    *(_WORD *)&pixelBufferOut[22] = 2048;
    uint64_t v30 = v26;
    __int16 v31 = 1024;
    int v32 = v27;
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Invalid pixel buffer pool for encoder 0x%p, w:%zu, h:%zu, format:%d", pixelBufferOut, 0x26u);
  }
  uint64_t v5 = *(__CVPixelBufferPool **)(a1 + 56);
  if (!v5)
  {
    uint64_t v20 = *re::peerVideoStreamingLogObjects((re *)v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)pixelBufferOut = 0;
      _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "Could not create pixel buffer because could not create a pixel buffer pool", pixelBufferOut, 2u);
    }
    *a3 = 0;
    return;
  }
LABEL_18:
  *(void *)pixelBufferOut = 0;
  PixelBuffer = (re *)CVPixelBufferPoolCreatePixelBuffer(0, v5, (CVPixelBufferRef *)pixelBufferOut);
  if (PixelBuffer)
  {
    int v22 = (int)PixelBuffer;
    uint64_t v23 = *re::peerVideoStreamingLogObjects(PixelBuffer);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v35 = 67109120;
      *(_DWORD *)&v35[4] = v22;
      _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "Failed to create CVPixelBuffer, errCode: %d", v35, 8u);
    }
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = *(void *)pixelBufferOut;
  }
  *a3 = v24;
}

void re::PeerVideoStreamingEncoder::encodeFrame(CMTimeValue a1, CVPixelBufferRef *a2, uint64_t a3, uint64_t a4, id *a5)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v10 = re::internal::enableSignposts(0, 0);
  if (v10)
  {
    uint64_t v10 = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if (v10) {
      uint64_t v10 = kdebug_trace();
    }
  }
  if (!*a2)
  {
    uint64_t v12 = *re::peerVideoStreamingLogObjects((re *)v10);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v73.value) = 0;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid arg to encodeFrame: pixelBuffer is nullptr", (uint8_t *)&v73, 2u);
    }
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
      goto LABEL_25;
    }
    return;
  }
  re::VideoBufferInfo::VideoBufferInfo((re::VideoBufferInfo *)&v61, *a2);
  uint64_t v11 = *(OpaqueVTCompressionSession **)(a1 + 24);
  if (v11)
  {
    if (v61 == *(_OWORD *)a1 && v62 == *(_DWORD *)(a1 + 16)) {
      goto LABEL_52;
    }
    *(_OWORD *)a1 = v61;
    *(_DWORD *)(a1 + 16) = v62;
    VTCompressionSessionInvalidate(v11);
    CFRelease(v11);
  }
  else
  {
    *(_OWORD *)a1 = v61;
    *(_DWORD *)(a1 + 16) = v62;
  }
  uint64_t v77 = *MEMORY[0x263F1ED50];
  *(void *)unint64_t v78 = MEMORY[0x263EFFA88];
  CFDictionaryRef v13 = [NSDictionary dictionaryWithObjects:v78 forKeys:&v77 count:1];
  VTSessionRef session = 0;
  double v14 = (re *)VTCompressionSessionCreate(0, *(_DWORD *)a1, *(_DWORD *)(a1 + 8), 0x6D757861u, v13, 0, 0, 0, 0, (VTCompressionSessionRef *)&session);
  int v15 = (int)v14;
  uint64_t v16 = *re::peerVideoStreamingLogObjects(v14);
  if (v15)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v57 = v16;
      re::VideoBufferInfo::debugStr((re::VideoBufferInfo *)a1, (re::DynamicString *)&v73);
      uint64_t v58 = (v73.timescale & 1) != 0 ? (CMTimeScale *)v73.epoch : (CMTimeScale *)((char *)&v73.timescale + 1);
      LODWORD(buf.value) = 67109378;
      HIDWORD(buf.value) = v15;
      LOWORD(buf.timescale) = 2080;
      *(void *)((char *)&buf.timescale + 2) = v58;
      _os_log_error_impl(&dword_233120000, v57, OS_LOG_TYPE_ERROR, "Error creating compression session, errCode: %d. Info: %s", (uint8_t *)&buf, 0x12u);

      if (v73.value)
      {
        if (v73.timescale) {
          (*(void (**)(void))(*(void *)v73.value + 40))();
        }
      }
    }

    *(void *)(a1 + 24) = 0;
  }
  else
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v21 = v16;
      re::VideoBufferInfo::debugStr((re::VideoBufferInfo *)a1, (re::DynamicString *)&v73);
      int v22 = (v73.timescale & 1) != 0 ? (CMTimeScale *)v73.epoch : (CMTimeScale *)((char *)&v73.timescale + 1);
      LODWORD(buf.value) = 136315138;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)v22;
      _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Created compression session with info: %s", (uint8_t *)&buf, 0xCu);

      if (v73.value)
      {
        if (v73.timescale) {
          (*(void (**)(void))(*(void *)v73.value + 40))();
        }
      }
    }
    uint64_t v23 = (const void *)*MEMORY[0x263EFFB38];
    uint64_t v24 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x263F1E4C8], (CFTypeRef)*MEMORY[0x263EFFB38]);
    if (v24)
    {
      int v25 = (int)v24;
      uint64_t v26 = *re::peerVideoStreamingLogObjects(v24);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v73.value) = 67109120;
        HIDWORD(v73.value) = v25;
        _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "Failed to disable frame reordering, errCode: %d", (uint8_t *)&v73, 8u);
      }
    }
    int v27 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x263F1E668], v23);
    if (v27)
    {
      int v28 = (int)v27;
      uint64_t v29 = *re::peerVideoStreamingLogObjects(v27);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v73.value) = 67109120;
        HIDWORD(v73.value) = v28;
        _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "Failed to disable throttling, errCode: %d", (uint8_t *)&v73, 8u);
      }
    }
    uint64_t v30 = (const void *)*MEMORY[0x263EFFB40];
    __int16 v31 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x263F1E650], (CFTypeRef)*MEMORY[0x263EFFB40]);
    if (v31)
    {
      int v32 = (int)v31;
      uint64_t v33 = *re::peerVideoStreamingLogObjects(v31);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v73.value) = 67109120;
        HIDWORD(v73.value) = v32;
        _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "Failed to enable real time compression, errCode: %d", (uint8_t *)&v73, 8u);
      }
    }
    int v34 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x263F1E5C8], &unk_26E749D88);
    if (v34)
    {
      int v35 = (int)v34;
      uint64_t v36 = *re::peerVideoStreamingLogObjects(v34);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v73.value) = 67109120;
        HIDWORD(v73.value) = v35;
        _os_log_error_impl(&dword_233120000, v36, OS_LOG_TYPE_ERROR, "Failed to set make keyframe interval duration, errCode: %d", (uint8_t *)&v73, 8u);
      }
    }
    uint64_t v37 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x263F1E4D0], v30);
    if (v37)
    {
      int v38 = (int)v37;
      uint64_t v39 = *re::peerVideoStreamingLogObjects(v37);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v73.value) = 67109120;
        HIDWORD(v73.value) = v38;
        _os_log_error_impl(&dword_233120000, v39, OS_LOG_TYPE_ERROR, "Failed to enable temporal compression, errCode: %d", (uint8_t *)&v73, 8u);
      }
    }
    uint64_t v40 = (re *)VTCompressionSessionPrepareToEncodeFrames((VTCompressionSessionRef)session);
    if (v40)
    {
      int v41 = (int)v40;
      long long v42 = *re::peerVideoStreamingLogObjects(v40);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v73.value) = 67109120;
        HIDWORD(v73.value) = v41;
        _os_log_error_impl(&dword_233120000, v42, OS_LOG_TYPE_ERROR, "Error preparing compression session: %d", (uint8_t *)&v73, 8u);
      }
    }
    uint64_t v11 = (OpaqueVTCompressionSession *)session;

    *(void *)(a1 + 24) = v11;
    if (v11) {
      goto LABEL_52;
    }
  }
  uint64_t v18 = *re::peerVideoStreamingLogObjects(v17);
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  if (v19)
  {
    uint64_t v54 = *(void *)a1;
    uint64_t v55 = *(void *)(a1 + 8);
    int v56 = *(_DWORD *)(a1 + 16);
    LODWORD(v73.value) = 134218752;
    *(CMTimeValue *)((char *)&v73.value + 4) = a1;
    LOWORD(v73.flags) = 2048;
    *(void *)((char *)&v73.flags + 2) = v54;
    HIWORD(v73.epoch) = 2048;
    uint64_t v74 = v55;
    __int16 v75 = 1024;
    int v76 = v56;
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Invalid compression session for encoder 0x%p, w:%zu, h:%zu, format:%d", (uint8_t *)&v73, 0x26u);
  }
  uint64_t v11 = *(OpaqueVTCompressionSession **)(a1 + 24);
  if (v11)
  {
LABEL_52:
    int64_t v43 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v43 + 1;
    uint64_t v44 = applesauce::dispatch::v1::queue::get(a5);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN2re25PeerVideoStreamingEncoder11encodeFrameERKNS_15InputVideoFrameEbNS_8FunctionIFvP20opaqueCMSampleBufferEEEN10applesauce8dispatch2v15queueE_block_invoke;
    aBlock[3] = &unk_26E702248;
    CMTimeValue v69 = a1;
    uint64_t v70 = a2;
    int64_t v71 = v43;
    id v45 = v44;
    uint64_t v46 = *(void *)(a4 + 24);
    id v68 = v45;
    v72[3] = v46;
    v72[4] = 0;
    re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::operator=<24ul>((uint64_t)v72, a4);
    uint64_t v47 = _Block_copy(aBlock);
    uint64_t v65 = *MEMORY[0x263F1E8F0];
    uint64_t v48 = [NSNumber numberWithBool:a3];
    long long v66 = v48;
    CFDictionaryRef v49 = [NSDictionary dictionaryWithObjects:&v66 forKeys:&v65 count:1];

    memset(&v73, 0, sizeof(v73));
    CMTimeMake(&v73, v43, 1);
    memset(&buf, 0, sizeof(buf));
    CMTimeMake(&buf, 1, 90);
    uint64_t v50 = *a2;
    CMTime presentationTimeStamp = v73;
    CMTime duration = buf;
    uint64_t v51 = (re *)VTCompressionSessionEncodeFrameWithOutputHandler(v11, v50, &presentationTimeStamp, &duration, v49, 0, v47);
    if (v51)
    {
      int v52 = (int)v51;
      unint64_t v53 = *re::peerVideoStreamingLogObjects(v51);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v78 = 67109120;
        *(_DWORD *)&v78[4] = v52;
        _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "Failed to encode frame, errCode %d", v78, 8u);
      }
    }

    re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::destroyCallable((uint64_t)v72);
    return;
  }
  uint64_t v20 = *re::peerVideoStreamingLogObjects((re *)v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v73.value) = 0;
    _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "Could not create compression session for encodeFrame", (uint8_t *)&v73, 2u);
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
LABEL_25:
  }
    kdebug_trace();
}

uint64_t ___ZN2re25PeerVideoStreamingEncoder11encodeFrameERKNS_15InputVideoFrameEbNS_8FunctionIFvP20opaqueCMSampleBufferEEEN10applesauce8dispatch2v15queueE_block_invoke(re *a1, int a2, char a3, CFTypeRef cf)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v6 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 67109120;
      LODWORD(v16) = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "CompressionOutputHandler. Failed with errCode: %d", buf, 8u);
    }
    uint64_t result = re::internal::enableSignposts(0, 0);
    if (result)
    {
      uint64_t result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if (result) {
        return kdebug_trace();
      }
    }
  }
  else if ((a3 & 2) != 0)
  {
    uint64_t v10 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *((void *)a1 + 7);
      *(_DWORD *)CMTime buf = 134217984;
      uint64_t v16 = v11;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Encoder dropped frame with timestamp %lld", buf, 0xCu);
    }
    uint64_t result = re::internal::enableSignposts(0, 0);
    if (result)
    {
      uint64_t result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if (result) {
        return kdebug_trace();
      }
    }
  }
  else if (cf)
  {
    CFRetain(cf);
    uint64_t v9 = *((void *)a1 + 4);
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3321888768;
    void v13[2] = ___ZN2re25PeerVideoStreamingEncoder11encodeFrameERKNS_15InputVideoFrameEbNS_8FunctionIFvP20opaqueCMSampleBufferEEEN10applesauce8dispatch2v15queueE_block_invoke_1;
    v13[3] = &__block_descriptor_80_a8_32c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE_e5_v8__0l;
    v14[3] = *((void *)a1 + 11);
    _OWORD v14[4] = 0;
    re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::operator=<24ul>((uint64_t)v14, (uint64_t)a1 + 64);
    v14[5] = cf;
    dispatch_async(v9, v13);
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0)) {
      kdebug_trace();
    }
    return (uint64_t)re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::destroyCallable((uint64_t)v14);
  }
  else
  {
    uint64_t v12 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CMTime buf = 0;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "CMSampleBuffer for encoded frame is null.", buf, 2u);
    }
    uint64_t result = re::internal::enableSignposts(0, 0);
    if (result)
    {
      uint64_t result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if (result) {
        return kdebug_trace();
      }
    }
  }
  return result;
}

void ___ZN2re25PeerVideoStreamingEncoder11encodeFrameERKNS_15InputVideoFrameEbNS_8FunctionIFvP20opaqueCMSampleBufferEEEN10applesauce8dispatch2v15queueE_block_invoke_1(uint64_t a1)
{
  uint64_t v3 = a1 + 64;
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(v3 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  CFRelease(*(CFTypeRef *)(a1 + 72));
}

uint64_t __copy_helper_block_a8_32c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = 0;
  return re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::operator=<24ul>(a1 + 32, a2 + 32);
}

uint64_t (***__destroy_helper_block_a8_32c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::destroyCallable(a1 + 32);
}

uint64_t __copy_helper_block_a8_64c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = 0;
  return re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::operator=<24ul>(a1 + 64, a2 + 64);
}

uint64_t (***__destroy_helper_block_a8_64c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(opaqueCMSampleBuffer *)>::destroyCallable(a1 + 64);
}

int32x4_t re::ecs2::MeshComponentHelper::computeEntityMeshBounds@<Q0>(uint64_t a1@<X0>, int a2@<W1>, float32x4_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a1)
  {
    char v6 = a4;
    int32x4_t result = vdupq_n_s32(0x7F800000u);
    *(void *)&long long v11 = 0x7F0000007FLL;
    *((void *)&v11 + objc_destroyWeak(this + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (!a4 || (a4 & ~*(_DWORD *)(a1 + 288)) == 0)
    {
      if (a2)
      {
        if (*(void *)(a1 + 328))
        {
        }
      }
    }
  }
  else
  {
    uint64_t v12 = *re::ecsCoreLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v14 = 0;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Null entity passed to computeEntityMeshBoundsAnchored!", v14, 2u);
    }
    int32x4_t result = vdupq_n_s32(0x7F800000u);
    *(void *)&long long v13 = 0x7F0000007FLL;
    *((void *)&v13 + objc_destroyWeak(this + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a5 = result;
    *(_OWORD *)(a5 + 16) = v13;
  }
  return result;
}

float32x4_t anonymous namespace'::extendBounds(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v6)
  {
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v10 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v6 + 32));
    if (v10)
    {
      if (v9)
      {
        do
        {
          uint64_t v11 = v5;
          uint64_t v5 = *(void *)(v5 + 24);
        }
        while (v5);
        uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v11 + 16) + 56) + 32))(*(void *)(*(void *)(v11 + 16) + 56));
        long long v13 = *(re::MeshManager **)(re::ServiceLocator::service<re::RenderManager>(v12) + 32);
        re::ecs2::MeshSceneComponent::ensureCachedDataUpToDate(v9, v13);
        uint64_t v14 = v9[24];
        if (v14)
        {
          int v15 = (void *)v9[26];
          uint64_t v16 = &v15[v14];
          uint64_t v17 = (uint64_t)v13 + 72;
          float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
          uint64_t v19 = (uint64_t)v13 + 8;
          v20.i64[0] = 0x7F0000007FLL;
          v20.i64[1] = 0x7F0000007FLL;
          do
          {
            float32x4_t v37 = v20;
            float32x4_t v38 = v18;
            uint64_t v21 = re::DataArray<re::MeshInstance>::get(v17, *v15);
            int v22 = (float32x4_t *)re::DataArray<re::MeshModel>::get(v19, *(void *)(v21 + 16));
            unint64_t v23 = 0;
            float32x4_t v24 = *a2;
            float32x4_t v25 = a2[1];
            float32x4_t v26 = a2[2];
            float32x4_t v27 = a2[3];
            float32x4_t v28 = *(float32x4_t *)(v21 + 48);
            long long v29 = *(_OWORD *)(v21 + 64);
            long long v30 = *(_OWORD *)(v21 + 80);
            float32x4_t v39 = *(float32x4_t *)(v21 + 32);
            float32x4_t v40 = v28;
            long long v41 = v29;
            long long v42 = v30;
            do
            {
              v43[v23 / 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(_OWORD *)((char *)&v39 + v23 * 4))), v25, *(float32x2_t *)&v39.f32[v23], 1), v26, *(float32x4_t *)((char *)&v39 + v23 * 4), 2), v27, *(float32x4_t *)((char *)&v39 + v23 * 4), 3);
              v23 += 4;
            }
            while (v23 != 16);
            re::AABB::transform(v22 + 1, v43, (uint64_t)&v39);
            float32x4_t v32 = v38;
            float32x4_t v31 = v39;
            v32.i32[3] = 0;
            float32x4_t v33 = v40;
            v31.i32[3] = 0;
            float32x4_t v34 = v37;
            v34.i32[3] = 0;
            float32x4_t v18 = vminnmq_f32(v32, v31);
            v33.i32[3] = 0;
            float32x4_t v20 = vmaxnmq_f32(v34, v33);
            ++v15;
          }
          while (v15 != v16);
        }
        else
        {
          float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
          v20.i64[0] = 0x7F0000007FLL;
          v20.i32[2] = 127;
        }
        float32x4_t v36 = *a3;
        float32x4_t v35 = a3[1];
        v36.i32[3] = 0;
      }
      else
      {
        re::MeshAsset::aabbFromMesh(v10, a2, (uint64_t)v43);
        float32x4_t v36 = *a3;
        float32x4_t v35 = a3[1];
        v36.i32[3] = 0;
        float32x4_t v18 = v43[0];
        float32x4_t v20 = v43[1];
      }
      v18.i32[3] = 0;
      v35.i32[3] = 0;
      float32x4_t result = vminnmq_f32(v36, v18);
      v20.i32[3] = 0;
      *a3 = result;
      a3[1] = vmaxnmq_f32(v35, v20);
    }
  }
  return result;
}

uint64_t anonymous namespace'::extendChildBounds(uint64_t result, float32x4_t *a2, char a3, float32x4_t *a4)
{
  uint64_t v4 = *(void *)(result + 328);
  if (v4)
  {
    long long v8 = *(uint64_t **)(result + 344);
    uint64_t v9 = &v8[v4];
    do
    {
      float32x4_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!result)
      {
        float32x4_t result = *v8;
        if ((a3 & 1) != 0 || (~*(_DWORD *)(result + 288) & 0x2008) == 0)
        {
          uint64_t v10 = *(void *)(result + 240);
          if (v10)
          {
            uint64_t v11 = 0;
            float v12 = *(float *)(v10 + 48);
            float v13 = *(float *)(v10 + 52);
            float v14 = *(float *)(v10 + 56);
            float v15 = *(float *)(v10 + 60);
            float32x4_t v16 = *(float32x4_t *)(v10 + 32);
            long long v17 = *(_OWORD *)(v10 + 64);
            float v18 = v12 + v12;
            float v19 = v13 + v13;
            float v20 = v14 + v14;
            float v21 = v12 * (float)(v12 + v12);
            float v22 = v13 * (float)(v13 + v13);
            float v23 = v14 * (float)(v14 + v14);
            float v24 = v18 * v13;
            float v25 = v18 * v14;
            float v26 = v19 * v14;
            float v27 = v18 * v15;
            float v28 = v19 * v15;
            float v29 = v20 * v15;
            v30.i32[3] = 0;
            v30.f32[0] = 1.0 - (float)(v22 + v23);
            v30.f32[1] = v24 + v29;
            v30.f32[2] = v25 - v28;
            v31.i32[3] = 0;
            v31.f32[0] = v24 - v29;
            v31.f32[1] = 1.0 - (float)(v21 + v23);
            v31.f32[2] = v26 + v27;
            float32_t v32 = v26 - v27;
            v33.i32[3] = 0;
            v33.f32[0] = v25 + v28;
            v33.f32[1] = v32;
            v33.f32[2] = 1.0 - (float)(v21 + v22);
            HIDWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 1.0;
            float32x4_t v34 = *a2;
            float32x4_t v35 = a2[1];
            float32x4_t v36 = a2[2];
            float32x4_t v37 = a2[3];
            v41[0] = vmulq_n_f32(v30, v16.f32[0]);
            v41[1] = vmulq_n_f32(v31, *(float *)vshrq_n_u64((uint64x2_t)v16, 0x20uLL).i32);
            uint64_t v41[2] = vmulq_laneq_f32(v33, v16, 2);
            v41[3] = v17;
            do
            {
              v42[v11] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(v41[v11])), v35, *(float32x2_t *)&v41[v11], 1), v36, (float32x4_t)v41[v11], 2), v37, (float32x4_t)v41[v11], 3);
              ++v11;
            }
            while (v11 != 4);
          }
          else
          {
            float32x4_t v38 = a2[1];
            v42[0] = *a2;
            v42[1] = v38;
            float32x4_t v39 = a2[3];
            void v42[2] = a2[2];
            v42[3] = v39;
          }
          float32x4_t result = *v8;
          if (*(void *)(*v8 + 328)) {
        }
          }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  return result;
}

int32x4_t re::ecs2::MeshComponentHelper::computeEntityMeshTightBounds@<Q0>(uint64_t a1@<X0>, int a2@<W1>, float32x4_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a1)
  {
    char v6 = a4;
    int32x4_t result = vdupq_n_s32(0x7F800000u);
    *(void *)&long long v11 = 0x7F0000007FLL;
    *((void *)&v11 + objc_destroyWeak(this + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (!a4 || (a4 & ~*(_DWORD *)(a1 + 288)) == 0)
    {
      if (a2)
      {
        if (*(void *)(a1 + 328))
        {
        }
      }
    }
  }
  else
  {
    float v12 = *re::ecsCoreLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)float v14 = 0;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Null entity passed to computeEntityMeshTightBounds!", v14, 2u);
    }
    int32x4_t result = vdupq_n_s32(0x7F800000u);
    *(void *)&long long v13 = 0x7F0000007FLL;
    *((void *)&v13 + objc_destroyWeak(this + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a5 = result;
    *(_OWORD *)(a5 + 16) = v13;
  }
  return result;
}

float32x4_t anonymous namespace'::extendTightBounds(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  if (a1)
  {
    uint64_t v5 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(a1 + 32));
    if (v5)
    {
      re::MeshAsset::tightAABBFromMesh(v5, a2, v11);
      float32x4_t v7 = *a3;
      float32x4_t v8 = a3[1];
      v7.i32[3] = 0;
      float32x4_t v9 = v11[0];
      float32x4_t v10 = v11[1];
      v9.i32[3] = 0;
      v8.i32[3] = 0;
      float32x4_t result = vminnmq_f32(v7, v9);
      v10.i32[3] = 0;
      *a3 = result;
      a3[1] = vmaxnmq_f32(v8, v10);
    }
  }
  return result;
}

uint64_t anonymous namespace'::extendChildTightBounds(uint64_t result, float32x4_t *a2, char a3, float32x4_t *a4)
{
  uint64_t v4 = *(void *)(result + 328);
  if (v4)
  {
    float32x4_t v8 = *(uint64_t **)(result + 344);
    float32x4_t v9 = &v8[v4];
    do
    {
      float32x4_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!result)
      {
        uint64_t v10 = *v8;
        if ((a3 & 1) != 0 || (~*(_DWORD *)(v10 + 288) & 0x2008) == 0)
        {
          uint64_t v11 = *(void *)(v10 + 240);
          if (v11)
          {
            uint64_t v12 = 0;
            float v13 = *(float *)(v11 + 48);
            float v14 = *(float *)(v11 + 52);
            float v15 = *(float *)(v11 + 56);
            float v16 = *(float *)(v11 + 60);
            float32x4_t v17 = *(float32x4_t *)(v11 + 32);
            long long v18 = *(_OWORD *)(v11 + 64);
            float v19 = v13 + v13;
            float v20 = v14 + v14;
            float v21 = v15 + v15;
            float v22 = v13 * (float)(v13 + v13);
            float v23 = v14 * (float)(v14 + v14);
            float v24 = v15 * (float)(v15 + v15);
            float v25 = v19 * v14;
            float v26 = v19 * v15;
            float v27 = v20 * v15;
            float v28 = v19 * v16;
            float v29 = v20 * v16;
            float v30 = v21 * v16;
            v31.i32[3] = 0;
            v31.f32[0] = 1.0 - (float)(v23 + v24);
            v31.f32[1] = v25 + v30;
            v31.f32[2] = v26 - v29;
            v32.i32[3] = 0;
            v32.f32[0] = v25 - v30;
            v32.f32[1] = 1.0 - (float)(v22 + v24);
            v32.f32[2] = v27 + v28;
            float32_t v33 = v27 - v28;
            v34.i32[3] = 0;
            v34.f32[0] = v26 + v29;
            v34.f32[1] = v33;
            v34.f32[2] = 1.0 - (float)(v22 + v23);
            HIDWORD(v18) = 1.0;
            float32x4_t v35 = *a2;
            float32x4_t v36 = a2[1];
            float32x4_t v37 = a2[2];
            float32x4_t v38 = a2[3];
            v42[0] = vmulq_n_f32(v31, v17.f32[0]);
            v42[1] = vmulq_n_f32(v32, *(float *)vshrq_n_u64((uint64x2_t)v17, 0x20uLL).i32);
            void v42[2] = vmulq_laneq_f32(v34, v17, 2);
            v42[3] = v18;
            do
            {
              v43[v12] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(v42[v12])), v36, *(float32x2_t *)&v42[v12], 1), v37, (float32x4_t)v42[v12], 2), v38, (float32x4_t)v42[v12], 3);
              ++v12;
            }
            while (v12 != 4);
          }
          else
          {
            float32x4_t v39 = a2[1];
            v43[0] = *a2;
            v43[1] = v39;
            float32x4_t v40 = a2[3];
            float32x4_t v43[2] = a2[2];
            v43[3] = v40;
          }
          float32x4_t result = *v8;
          if (*(void *)(*v8 + 328)) {
        }
          }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  return result;
}

void *re::ecs2::MeshComponentHelper::repairedMaterialHandles@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, re::AssetHandle *a3@<X2>, re::AssetHandle *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  MaxMaterialIndex = (_anonymous_namespace_ *)re::MeshManager::findMaxMaterialIndex(a2, (void *)(a1 + 360));
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(_DWORD *)(a6 + 24) = 0;
  unint64_t v11 = (int)MaxMaterialIndex + 1;
  float32x4_t result = re::DynamicArray<re::AssetHandle>::setCapacity((void *)a6, v11);
  ++*(_DWORD *)(a6 + 24);
  if (a5)
  {
    uint64_t v13 = 24 * a5;
    do
    {
      uint64_t v14 = *((void *)a4 + 1);
      float v15 = a3;
      if (v14)
      {
        unsigned int v16 = atomic_load((unsigned int *)(v14 + 704));
        if (v16 == 2) {
          float v15 = a4;
        }
        else {
          float v15 = a3;
        }
      }
      float32x4_t result = re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a6, v15);
      a4 = (re::AssetHandle *)((char *)a4 + 24);
      v13 -= 24;
    }
    while (v13);
  }
  while (*(void *)(a6 + 16) < v11)
    float32x4_t result = re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a6, a3);
  return result;
}

void re::ecs2::MeshComponentHelper::overrideMaterials(uint64_t a1, uint64_t a2, re::MaterialAsset *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  MaxMaterialIndex = (_anonymous_namespace_ *)re::MeshManager::findMaxMaterialIndex(a2, (void *)(a1 + 360));
  uint64_t v12 = (MaxMaterialIndex + 1);
  if (!*a4)
  {
  }
  if (!*a5)
  {
  }
  if (*a6)
  {
    if (!v12) {
      return;
    }
    goto LABEL_9;
  }
  if (v12)
  {
LABEL_9:
    for (unint64_t i = 0; v12 != i; ++i)
    {
      uint64_t v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>(a3);
      unint64_t v15 = a4[1];
      if (v15 <= i)
      {
        uint64_t v21 = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        float v23 = "operator[]";
        __int16 v24 = 1024;
        int v25 = 468;
        __int16 v26 = 2048;
        unint64_t v27 = i;
        __int16 v28 = 2048;
        unint64_t v29 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_22:
        uint64_t v21 = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        float v23 = "operator[]";
        __int16 v24 = 1024;
        int v25 = 468;
        __int16 v26 = 2048;
        unint64_t v27 = i;
        __int16 v28 = 2048;
        unint64_t v29 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_23:
        uint64_t v21 = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        float v23 = "operator[]";
        __int16 v24 = 1024;
        int v25 = 468;
        __int16 v26 = 2048;
        unint64_t v27 = i;
        __int16 v28 = 2048;
        unint64_t v29 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(a4[2] + 8 * i) = *(void *)(v14 + 1664);
      unsigned int v16 = *(re::MaterialParameterBlock **)(v14 + 1672);
      if (re::MaterialParameterBlock::isEmpty(v16))
      {
        unint64_t v15 = a5[1];
        if (v15 <= i) {
          goto LABEL_22;
        }
      }
      else
      {
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v16, &v20);
        float32x4_t v17 = (void *)re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized((uint64_t)a6);
        uint64_t v18 = v20;
        void *v17 = v20;
        if (v18)
        {
          id v19 = (id)(v18 + 8);
          unint64_t v6 = a5[1];
          if (v6 <= i) {
            goto LABEL_23;
          }
          *(void *)(a5[2] + 8 * i) = v18;

          continue;
        }
        unint64_t v6 = a5[1];
        if (v6 <= i) {
          goto LABEL_23;
        }
      }
      *(void *)(a5[2] + 8 * i) = 0;
    }
  }
}

uint64_t re::ecs2::MeshComponentHelper::areRequiredAssetsLoaded(re::ecs2::MeshComponentHelper *this, const re::ecs2::MeshComponent *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3 && (unsigned int v4 = atomic_load((unsigned int *)(v3 + 704)), v4 == 2))
  {
    char v5 = 1;
  }
  else
  {
    re::AssetHandle::loadAsync((re::ecs2::MeshComponentHelper *)((char *)this + 32));
    char v5 = 0;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6 && *(void *)(v6 + 24))
  {
    uint64_t v7 = *((void *)this + 9);
    if (v7)
    {
      float32x4_t v8 = (re::MaterialAsset *)*((void *)this + 11);
      uint64_t v9 = 24 * v7;
      do
      {
        uint64_t v10 = *((void *)v8 + 1);
        if (v10)
        {
          unsigned int v11 = atomic_load((unsigned int *)(v10 + 704));
          if (v11 != 3)
          {
            if (*((void *)v8 + 1))
            {
              uint64_t v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v8);
              if (!v12 || *(unsigned char *)(v12 + 1656))
              {
                re::AssetHandle::loadAsync(v8);
                char v5 = 0;
              }
            }
          }
        }
        float32x4_t v8 = (re::MaterialAsset *)((char *)v8 + 24);
        v9 -= 24;
      }
      while (v9);
    }
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t re::ecs2::MeshComponentHelper::computeTriangleCount(re::ecs2::MeshComponentHelper *this, const re::ecs2::MeshComponent *a2)
{
  uint64_t v2 = *((void *)this + 2);
  do
  {
    uint64_t v3 = v2;
    uint64_t v2 = *(void *)(v2 + 24);
  }
  while (v2);
  if (!*(void *)(v3 + 16)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *((void *)this + 5);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = atomic_load((unsigned int *)(v4 + 704));
  if (v5 != 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = (re::ecs2::MeshComponentHelper *)((char *)this + 32);
  uint64_t v7 = *((void *)this + 2);
  do
  {
    uint64_t v8 = v7;
    uint64_t v7 = *(void *)(v7 + 24);
  }
  while (v7);
  uint64_t v9 = (*(uint64_t (**)(void, const re::ecs2::MeshComponent *))(**(void **)(*(void *)(v8 + 16) + 56)
                                                                          + 32))(*(void *)(*(void *)(v8 + 16) + 56), a2);
  uint64_t v10 = *(void *)(re::ServiceLocator::service<re::RenderManager>(v9) + 32);
  uint64_t v11 = re::AssetHandle::loadedAsset<re::MeshAsset>(v6);
  uint64_t v12 = *(void *)(v11 + 376);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = 0;
  uint64_t v14 = *(uint64_t **)(v11 + 392);
  unint64_t v15 = &v14[v12];
  uint64_t v16 = v10 + 72;
  uint64_t v17 = v10 + 8;
  do
  {
    uint64_t v18 = re::DataArray<re::MeshInstance>::tryGet(v16, *v14);
    uint64_t v19 = re::DataArray<re::MeshModel>::tryGet(v17, *(void *)(v18 + 16));
    uint64_t v20 = *(void *)(v19 + 56);
    if (v20)
    {
      uint64_t v21 = *(re::MeshPart **)(v19 + 64);
      uint64_t v22 = 560 * v20;
      do
      {
        uint64_t v13 = re::MeshPart::computeTriangleCount(v21) + v13;
        uint64_t v21 = (re::MeshPart *)((char *)v21 + 560);
        v22 -= 560;
      }
      while (v22);
    }
    ++v14;
  }
  while (v14 != v15);
  return v13;
}

uint64_t re::ecs2::MeshComponentHelper::isMappedToOcclusionPass(re::ecs2::MeshComponentHelper *this, const re::ecs2::MeshComponent *a2)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = 24 * v2;
    for (unint64_t i = (const re::AssetHandle *)*((void *)this + 11); ; unint64_t i = (const re::AssetHandle *)((char *)i + 24))
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v11, i);
      uint64_t v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v11);
      if (!v5) {
        break;
      }
      uint64_t v6 = *(void *)(v5 + 1664);
      if (!v6) {
        break;
      }
      {
        if (v8)
        {
          re::ecs2::MeshComponentHelper::isMappedToOcclusionPass(re::ecs2::MeshComponent const&)::occlusionKey = re::hashString(v8, v9);
        }
      }
      uint64_t v7 = re::ecs2::MeshComponentHelper::isMappedToOcclusionPass(re::ecs2::MeshComponent const&)::occlusionKey;
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      if (!re::MaterialParameterTable::tryGetPassTechniqueMapping((re::MaterialParameterTable *)(v6 + 224), v7, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))break; {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
      }
      v3 -= 24;
      if (!v3) {
        return 1;
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  }
  return 0;
}

void re::ecs2::MeshComponentHelper::fixLegacyParametersColorGamut(re::RenderManager *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unint64_t v6 = a3[11];
  unint64_t v7 = a3[6];
  if (v6 < v7)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)(a3 + 9), a3[6]);
    do
    {
      uint64_t v9 = re::globalAllocators(v8);
      uint64_t v10 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 1008, 8);
      uint64_t v8 = re::MaterialParameterBlock::MaterialParameterBlock(v10, a1);
      if (a3[11] <= v6)
      {
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)long long v31 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)long long v31 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v11 = a3[13];
      uint64_t v12 = *(void *)(v11 + 8 * v6);
      *(void *)(v11 + 8 * v6) = v8;
      if (v12) {

      }
      ++v6;
    }
    while (v7 != v6);
  }
  if (*(void *)(a2 + 16))
  {
    unint64_t v13 = 0;
    while (1)
    {
      if (a3[6] <= v13) {
        return;
      }
      uint64_t v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(void *)(a2 + 32) + 24 * v13));
      uint64_t v15 = re::AssetHandle::loadedAsset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v14 + 40));
      if (a3[6] <= v13) {
        goto LABEL_41;
      }
      unint64_t v16 = a3[8];
      uint64_t v17 = *(void *)(v16 + 24 * v13);
      if (!v17) {
        uint64_t v17 = *(void *)(v16 + 24 * v13 + 8);
      }
      uint64_t v18 = *(unsigned int *)(v17 + 336);
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(_DWORD **)(v17 + 320);
        while ((*v20 & 0x80000000) == 0)
        {
          v20 += 80;
          if (v18 == ++v19)
          {
            LODWORD(v19) = *(_DWORD *)(v17 + 336);
            break;
          }
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
      if (v18 != v19) {
        break;
      }
LABEL_20:
      if (++v13 >= *(void *)(a2 + 16)) {
        return;
      }
    }
    uint64_t v21 = v19;
    uint64_t v22 = v14 + 1680;
    uint64_t v23 = v15 + 2272;
    while (1)
    {
      uint64_t v24 = *(void *)(v17 + 320);
      if (!*(unsigned char *)(v24 + 320 * v21 + 280))
      {
        *(void *)long long v31 = *(void *)(v24 + 320 * v21 + 8) >> 1;
        uint64_t v28 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v22, (uint64_t *)v31);
        if (!v28 || (char v29 = *(unsigned char *)(v28 + 20)) == 0)
        {
          *(void *)long long v31 = *(void *)(*(void *)(v17 + 320) + 320 * v21 + 8) >> 1;
          uint64_t v30 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v23, (uint64_t *)v31);
          if (!v30) {
            goto LABEL_24;
          }
          char v29 = *(unsigned char *)(v30 + 20);
        }
        if ((v29 & 0xFE) == 0x14)
        {
          *(unsigned char *)(*(void *)(v17 + 320) + 320 * v21 + 28objc_initWeak(location, 0) = 1;
          re::ecs2::MaterialParameterBlockArrayComponent::updateParameterBlockValue((re::ecs2::MaterialParameterBlockArrayComponent *)a3, a1, (const char **)(*(void *)(v17 + 320) + 320 * v21 + 8), (re::ecs2::SerializedMaterialParameter *)(*(void *)(v17 + 320) + 320 * v21 + 32), (re::MaterialParameterBlock *)v13, 0, v31);
        }
      }
LABEL_24:
      unsigned int v25 = *(_DWORD *)(v17 + 336);
      if (v25 <= (int)v19 + 1) {
        int v26 = v19 + 1;
      }
      else {
        int v26 = *(_DWORD *)(v17 + 336);
      }
      while (1)
      {
        uint64_t v21 = (v19 + 1);
        if (v26 - 1 == v19) {
          break;
        }
        LODWORD(v19) = v19 + 1;
        int v27 = v21;
        if ((*(_DWORD *)(*(void *)(v17 + 320) + 320 * v21) & 0x80000000) != 0) {
          goto LABEL_31;
        }
      }
      int v27 = v26;
LABEL_31:
      LODWORD(v19) = v27;
      if (v25 == v27) {
        goto LABEL_20;
      }
    }
  }
}

float32x4_t re::ecs2::MeshComponentHelper::addRenderPassGroupBoundsTable(uint64_t a1)
{
  uint64_t v2 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(*(void *)a1, (uint64_t *)(a1 + 8));
  if (v2)
  {
    uint64_t v4 = v2;
    re::AABB::transform(*(float32x4_t **)(a1 + 16), *(float32x4_t **)(a1 + 24), (uint64_t)&v17);
    if (*(void *)(a1 + 40))
    {
      uint64_t v5 = re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<>(v4, (uint64_t *)(a1 + 40));
      float32x4_t v6 = *(float32x4_t *)v5;
      float32x4_t v7 = *(float32x4_t *)(v5 + 16);
      v6.i32[3] = 0;
      float32x4_t v8 = v17;
      float32x4_t v9 = v18;
      v8.i32[3] = 0;
      float32x4_t result = vminnmq_f32(v6, v8);
      v7.i32[3] = 0;
      v9.i32[3] = 0;
      *(float32x4_t *)uint64_t v5 = result;
      *(float32x4_t *)(v5 + 16) = vmaxnmq_f32(v7, v9);
      *(unsigned char *)(v5 + 32) |= *(unsigned char *)(a1 + 49);
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v10 = (uint64_t *)(a1 + 32);
    if (v11)
    {
      uint64_t v12 = (float32x4_t *)re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<>(v4, v10);
      float32x4_t v13 = *v12;
      float32x4_t v14 = v12[1];
      v13.i32[3] = 0;
      float32x4_t v15 = v17;
      float32x4_t v16 = v18;
      v15.i32[3] = 0;
      v14.i32[3] = 0;
      float32x4_t result = vminnmq_f32(v13, v15);
      v16.i32[3] = 0;
      float32x4_t *v12 = result;
      v12[1] = vmaxnmq_f32(v14, v16);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<>(a1, v7, v6, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 16) + 80 * v11;
    return v10 + 32;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 80 * v8 + 16) != v4)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 80 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 80 * v8;
  return v10 + 32;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4)
{
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    uint64_t v9 = *(void *)(a1 + 16);
    int v10 = *(_DWORD *)(v9 + 80 * v7 + 8);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    int v10 = *(_DWORD *)(v9 + 80 * v7 + 8);
    *(_DWORD *)(a1 + 36) = v10 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v9 + 80 * v7 + 8) = v10 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v7 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v7) = a3;
  *(void *)(*(void *)(a1 + 16) + 80 * v7 + 16) = *a4;
  uint64_t v11 = *(void *)(a1 + 16) + 80 * v7;
  *(void *)&long long v12 = 0x7F0000007FLL;
  *((void *)&v12 + objc_destroyWeak(this + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v11 + 32) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(v11 + 48) = v12;
  *(unsigned char *)(v11 + 64) = 0;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

re::ecs2::ClippingParametersRegistry *re::ecs2::ClippingParametersRegistry::ClippingParametersRegistry(re::ecs2::ClippingParametersRegistry *this)
{
  *(void *)this = 0;
  *((void *)this + objc_destroyWeak(this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicArray<re::ClippingParametersEntry>::setCapacity(this, 0x400uLL);
  ++*((_DWORD *)this + 6);
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicArray<int>::setCapacity((void *)this + 5, 0x400uLL);
  ++*((_DWORD *)this + 16);
  re::DynamicArray<unsigned short>::setCapacity((void *)this + 10, 0x400uLL);
  ++*((_DWORD *)this + 26);
  return this;
}

void re::ecs2::ClippingParametersRegistry::~ClippingParametersRegistry(re::ecs2::ClippingParametersRegistry *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (v2)
  {

    *((void *)this + 15) = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this);
}

uint64_t re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v12[5] = *MEMORY[0x263EF8340];
  if (!*((void *)a1 + 15))
  {
    re::make::shared::object<re::ecs2::ShareableClippingParameters>(a1, v12);
    uint64_t v4 = *((void *)v3 + 15);
    uint64_t v5 = v12[0];
    *((void *)v3 + 15) = v12[0];
    v12[0] = v4;
    if (v4)
    {

      uint64_t v5 = *((void *)v3 + 15);
    }
    uint64_t v6 = *((void *)v3 + 2);
    v12[0] = *((void *)v3 + 4);
    v12[1] = v6;
    a1 = re::FixedArray<re::ClippingParametersEntry>::operator=((_anonymous_namespace_ *)(v5 + 24), (uint64_t)v12);
  }
  re::globalAllocators(a1);
  uint64_t v7 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8, 8);
  int v8 = v7;
  uint64_t v9 = *((void *)v3 + 15);
  *(void *)uint64_t v7 = v9;
  if (v9) {
    uint64_t v7 = (re *)(id)(v9 + 8);
  }
  uint64_t v10 = re::globalAllocators(v7)[2];
  v12[0] = (uint64_t)&unk_26E702288;
  v12[3] = v10;
  v12[4] = (uint64_t)v12;
  (*(void (**)(uint64_t, re *, uint64_t *))(*(void *)a2 + 16))(a2, v8, v12);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v12);
  return *(void *)(*((void *)v3 + 15) + 40);
}

_anonymous_namespace_ *re::FixedArray<re::ClippingParametersEntry>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  if (*(void *)a1) {
    goto LABEL_4;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::ClippingParametersEntry>::copy(a1, (const void **)a2);
  }
  return a1;
}

void re::ecs2::ClippingParametersRegistry::add(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 96);
  if (v6)
  {
    uint64_t v7 = v6 - 1;
    unint64_t v8 = *(unsigned __int16 *)(*(void *)(a1 + 112) + 2 * v7);
    *(void *)(a1 + 96) = v7;
    ++*(_DWORD *)(a1 + 104);
    if (*(void *)(a1 + 16) <= v8)
    {
      memset(v27, 0, sizeof(v27));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = (_OWORD *)(*(void *)(a1 + 32) + (v8 << 6));
    long long v10 = *a2;
    long long v11 = a2[1];
    long long v12 = a2[3];
    void v9[2] = a2[2];
    v9[3] = v12;
    _OWORD *v9 = v10;
    v9[1] = v11;
    float32x4_t v14 = (void *)(a1 + 120);
    uint64_t v13 = *(void *)(a1 + 120);
    if (!v13) {
      goto LABEL_20;
    }

    goto LABEL_19;
  }
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 > 0x3FF)
  {
    *(unsigned char *)a3 = 0;
    return;
  }
  unint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 16);
  if (v8 >= v15)
  {
    if (*(void *)a1)
    {
      uint64_t v17 = 2 * v15;
      BOOL v18 = v15 == 0;
      unint64_t v19 = 8;
      if (!v18) {
        unint64_t v19 = v17;
      }
      if (v19 <= v8 + 1) {
        unint64_t v20 = v8 + 1;
      }
      else {
        unint64_t v20 = v19;
      }
      re::DynamicArray<re::ClippingParametersEntry>::setCapacity((void *)a1, v20);
    }
    else
    {
      re::DynamicArray<re::ClippingParametersEntry>::setCapacity((void *)a1, v8 + 1);
      ++*(_DWORD *)(a1 + 24);
    }
    uint64_t v16 = *(void *)(a1 + 16);
  }
  uint64_t v21 = (_OWORD *)(*(void *)(a1 + 32) + (v16 << 6));
  long long v22 = *a2;
  long long v23 = a2[1];
  long long v24 = a2[3];
  void v21[2] = a2[2];
  v21[3] = v24;
  _OWORD *v21 = v22;
  v21[1] = v23;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  LODWORD(v27[0]) = 0;
  re::DynamicArray<int>::add((void *)(a1 + 40), v27);
  uint64_t v26 = *(void *)(a1 + 120);
  float32x4_t v14 = (void *)(a1 + 120);
  uint64_t v25 = v26;
  if (v26)
  {

LABEL_19:
    *float32x4_t v14 = 0;
  }
LABEL_20:
  *(unsigned char *)a3 = 1;
  *(_WORD *)(a3 + 2) = v8;
}

uint64_t re::ecs2::ClippingParametersRegistry::registerClippingParameterDataRefs(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 152);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = *(void *)(result + 56);
    do
    {
      uint64_t v5 = *(void *)(a2 + 176);
      if (*(unsigned char *)(a2 + 160)) {
        uint64_t v5 = a2 + 168;
      }
      unint64_t v6 = *(unsigned __int16 *)(v5 + 2 * v3);
      if (v4 <= v6)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      ++*(_DWORD *)(*(void *)(result + 72) + 4 * v6);
      ++v3;
    }
    while (v2 != v3);
  }
  return result;
}

void re::ecs2::ClippingParametersRegistry::unregisterClippingParameterDataRefs(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 152);
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2 + 168;
    do
    {
      unsigned __int16 v13 = 0;
      if (*(_DWORD *)(a2 + 160)) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = *(void *)(a2 + 176);
      }
      unsigned __int16 v13 = *(_WORD *)(v7 + 2 * v5);
      uint64_t v8 = v13;
      unint64_t v9 = *(void *)(a1 + 56);
      if (v9 <= v13)
      {
        uint64_t v14 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v15 = 136315906;
        uint64_t v16 = "operator[]";
        __int16 v17 = 1024;
        int v18 = 789;
        __int16 v19 = 2048;
        uint64_t v20 = v8;
        __int16 v21 = 2048;
        unint64_t v22 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = *(void *)(a1 + 72);
      int v11 = *(_DWORD *)(v10 + 4 * v13) - 1;
      *(_DWORD *)(v10 + 4 * v13) = v11;
      if (!v11) {
        re::DynamicArray<unsigned short>::add((void *)(a1 + 80), &v13);
      }
      ++v5;
    }
    while (v3 != v5);
  }
  if (*(void *)(a1 + 96) == *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = 0;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 56) = 0;
    ++*(_DWORD *)(a1 + 64);
    *(void *)(a1 + 96) = 0;
    ++*(_DWORD *)(a1 + 104);
    uint64_t v12 = *(void *)(a1 + 120);
    if (v12)
    {

      *(void *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
    }
  }
}

void re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = **a2;
  if (v3)
  {

    uint64_t *v2 = 0;
  }
}

void *re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  float32x4_t result = a2;
  *a2 = &unk_26E702288;
  return result;
}

void *re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  float32x4_t result = a2;
  *a2 = &unk_26E702288;
  return result;
}

uint64_t re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::size()
{
  return 16;
}

void *re::DynamicArray<re::ClippingParametersEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      float32x4_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          float32x4_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              void v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 6);
            float32x4_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        float32x4_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        float32x4_t result = (void *)re::DynamicArray<re::ClippingParametersEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::make::shared::object<re::ecs2::ShareableClippingParameters>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 48, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E7022E0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 4objc_initWeak(location, 0) = 0;
  *a2 = v4;
}

void re::ecs2::ShareableClippingParameters::~ShareableClippingParameters(re::ecs2::ShareableClippingParameters *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::FixedArray<re::ClippingParametersEntry>::copy(void *result, const void **a2)
{
  unint64_t v2 = (const void *)result[1];
  if (v2 == a2[1])
  {
    if (v2)
    {
      uint64_t v3 = *a2;
      uint64_t v4 = (void *)result[2];
      return memmove(v4, v3, (void)v2 << 6);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    float32x4_t result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::FixedArray<re::ClippingParametersEntry>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v5 = a3 << 6;
  uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 << 6, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 64);
    uint64_t v8 = (_OWORD *)((char *)v8 + v5 - 64);
  }
  void v8[2] = 0u;
  v8[3] = 0u;
  *uint64_t v8 = 0u;
  v8[1] = 0u;
}

uint64_t re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(re::ecs2::IntrospectedNetworkTypeHelper *this, const re::ecs2::ComponentTypeBase *a2, const re::IntrospectionBase *a3)
{
  uint64_t result = (*(uint64_t (**)(re::ecs2::IntrospectedNetworkTypeHelper *, const re::ecs2::ComponentTypeBase *, const re::IntrospectionBase *))(*(void *)this + 8))(this, a2, a3);
  if (result)
  {
    if (result)
    {
      if (*((_DWORD *)a2 + 4) != 8) {
        return 0;
      }
      uint64_t v6 = *((unsigned int *)a2 + 14);
      if (!v6) {
        return 0;
      }
      for (unint64_t i = (const char ***)*((void *)a2 + 8); ; ++i)
      {
        uint64_t v8 = *i;
        if (*(_DWORD *)*i == 1) {
          break;
        }
        if (!--v6) {
          return 0;
        }
      }
      if (!*((_DWORD *)v8 + 10)
        && !strcmp("object", v8[1])
        && (unint64_t v9 = v8[2]) != 0
        && *((_DWORD *)v9 + 4) == 1
        && (uint64_t v10 = *((void *)v9 + 6)) != 0
        && *(_DWORD *)(v10 + 16) == 8
        && ((int v11 = re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(re::ecs2::ComponentTypeBase const&,re::IntrospectionBase const&)::$_0::__invoke(v10),
             *(_DWORD *)(v10 + 56))
          ? (BOOL v12 = v11 == 0)
          : (BOOL v12 = 0),
            !v12))
      {
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void re::ecs2::IntrospectedNetworkTypeHelper::registerSwiftComponent(re::ecs2::IntrospectedNetworkTypeHelper *this, const char *a2)
{
  unint64_t v2 = (const char *)this;
  {
  }
  uint64_t v3 = (_anonymous_namespace_ *)strncmp(v2, "CustomComponent", 0xFuLL);
  if (!v3) {
    v2 += 15;
  }
  v4[0] = 0;
  v4[1] = (uint64_t)"";
  re::StringID::destroyString((re::StringID *)v4);
}

uint64_t re::ecs2::IntrospectedNetworkTypeHelper::serialize()
{
  uint64_t SyncObjectContextEntry = RESyncGetSyncObjectContextEntry();
  memset(&v2[1], 0, 24);
  *(void *)(SyncObjectContextEntry + 464) = v2;
  uint64_t result = RESyncCommitCaptureSnapshot();
  *(void *)(SyncObjectContextEntry + 464) = 0;
  return result;
}

uint64_t anonymous namespace'::encodeEntity(_anonymous_namespace_ *this, const re::ecs2::Entity *a2, re::DynamicString *a3)
{
  return 1;
}

uint64_t re::ecs2::IntrospectedNetworkTypeHelper::deserialize()
{
  uint64_t SyncObjectContextEntry = RESyncGetSyncObjectContextEntry();
  v2[2] = 0;
  v2[3] = 0;
  v2[0] = 0;
  *(void *)(SyncObjectContextEntry + 464) = v2;
  uint64_t result = RESyncableReadState();
  *(void *)(SyncObjectContextEntry + 464) = 0;
  return result;
}

void anonymous namespace'::decodeEntity(_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  objc_initWeak((id *)a2, 0);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)a2);
  if (this && *(unsigned char *)this)
  {
    uint64_t v6 = 0;
    if (sscanf((const char *)this, "%llu", &v6) == 1)
    {
      uint64_t v5 = v6;
      re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)a2);
      *(void *)(a2 + 8) = v5;
    }
  }
}

uint64_t re::ecs2::IntrospectedNetworkTypeHelper::makeTypeInfo@<X0>(const re::IntrospectionBase *a1@<X2>, const re::ecs2::ComponentTypeBase *a2@<X3>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  if (a1
    && (*(uint64_t (**)(const re::IntrospectionBase *, uint64_t, const re::IntrospectionBase *, const re::ecs2::ComponentTypeBase *))(*(void *)a1 + 64))(a1, a3, a1, a2))
  {
    uint64_t v8 = (*(uint64_t (**)(const re::IntrospectionBase *))(*(void *)a1 + 64))(a1);
    RESyncSyncableTypeInfoSetTypeId();
    uint64_t result = RESyncSyncableTypeInfoSupportsNetworkSync();
    if (result)
    {
      uint64_t v10 = (re::NetworkSystemFeatureFlags *)RESyncRetain();
      uint64_t result = re::NetworkSystemFeatureFlags::enableAltSharedApp(v10);
      *a4 = v8;
      if (result)
      {
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke;
        aBlock[3] = &__block_descriptor_tmp_16;
        void aBlock[4] = a1;
        aBlock[5] = v8;
        a4[1] = (uint64_t)_Block_copy(aBlock);
        v86[0] = MEMORY[0x263EF8330];
        v86[1] = 0x40000000;
        v86[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4;
        v86[3] = &__block_descriptor_tmp_6_0;
        v86[4] = a1;
        v86[5] = v8;
        uint64_t result = (uint64_t)_Block_copy(v86);
        a4[2] = result;
      }
      else
      {
        a4[1] = 0;
        a4[2] = 0;
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    return result;
  }
  uint64_t v85 = 0;
  memset(v83, 0, sizeof(v83));
  int v84 = 0;
  if (*(_DWORD *)(a3 + 16) != 8) {
    goto LABEL_15;
  }
  re::getDowngradeFunctions(a3, 2u, (uint64_t)buf);
  re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::operator=((uint64_t)v83, (uint64_t)buf);
  int v11 = *(re **)buf;
  if (*(void *)buf && v89) {
    int v11 = (re *)(*(uint64_t (**)(void))(**(void **)buf + 40))(*(void *)buf);
  }
  if (*(_DWORD *)(a3 + 16) == 8 && (uint64_t v12 = re::snapshot::Registry::list(void)::s_head) != 0)
  {
    uint64_t v13 = *(void *)(a3 + 48);
    while (*(void *)(v12 + 40) != a3)
    {
      uint64_t v12 = *(void *)(v12 + 32);
      if (!v12) {
        goto LABEL_15;
      }
    }
    long long v27 = *re::ecsNetworkLogObjects(v11);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)CMTime buf = 136380675;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_233120000, v27, OS_LOG_TYPE_INFO, "Found static snapshot entry for '%{private}s'", buf, 0xCu);
    }
    uint64_t v16 = v82;
    v82[0] = MEMORY[0x263EF8330];
    v82[1] = 0x40000000;
    _OWORD v82[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_7;
    v82[3] = &__block_descriptor_tmp_9_0;
    v82[4] = v12;
    v82[5] = v13;
    uint64_t v14 = v81;
    v81[0] = MEMORY[0x263EF8330];
    v81[1] = 0x40000000;
    v81[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_10;
    v81[3] = &__block_descriptor_tmp_11;
    v81[4] = v12;
    v81[5] = v13;
    __int16 v17 = v80;
    v80[0] = MEMORY[0x263EF8330];
    v80[1] = 0x40000000;
    v80[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_12;
    v80[3] = &__block_descriptor_tmp_14;
    v80[4] = v12;
    v80[5] = v13;
    int v15 = v79;
    v79[0] = MEMORY[0x263EF8330];
    v79[1] = 0x40000000;
    v79[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_15;
    v79[3] = &__block_descriptor_tmp_16_0;
    v79[4] = v12;
    v79[5] = v13;
  }
  else
  {
LABEL_15:
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = v78;
    v78[0] = MEMORY[0x263EF8330];
    v78[1] = 0x40000000;
    v78[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_17;
    v78[3] = &__block_descriptor_tmp_18;
    v78[4] = a3;
    __int16 v17 = v77;
    v77[0] = MEMORY[0x263EF8330];
    v77[1] = 0x40000000;
    v77[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_19;
    v77[3] = &__block_descriptor_tmp_20_0;
    v77[4] = a3;
  }
  uint64_t v18 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetTypeId();
  re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)buf);
  RESyncSyncableTypeInfoSetDebugName();
  __int16 v19 = *(re::NetworkSystemFeatureFlags **)buf;
  if (*(void *)buf && (buf[8] & 1) != 0) {
    __int16 v19 = (re::NetworkSystemFeatureFlags *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
  }
  a4[1] = 0;
  a4[2] = 0;
  *a4 = v18;
  if (re::NetworkSystemFeatureFlags::enableAltSharedApp(v19))
  {
    uint64_t v20 = (void **)re::snapshot::Registry::list(void)::s_head;
    if (re::snapshot::Registry::list(void)::s_head)
    {
      do
      {
        if (v20[5] == (void *)a3) {
          break;
        }
        uint64_t v20 = (void **)v20[4];
      }
      while (v20);
    }
    if (a1 && (*(unsigned int (**)(const re::IntrospectionBase *))(*(void *)a1 + 8))(a1))
    {
      if (v20)
      {
        v76[0] = MEMORY[0x263EF8330];
        v76[1] = 0x40000000;
        v76[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_21;
        v76[3] = &__block_descriptor_tmp_22_0;
        v76[4] = v20;
        a4[1] = (uint64_t)_Block_copy(v76);
        v75[0] = MEMORY[0x263EF8330];
        v75[1] = 0x40000000;
        v75[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2;
        v75[3] = &__block_descriptor_tmp_23_0;
        v75[4] = v20;
        unint64_t v22 = v75;
      }
      else
      {
        uint64_t v28 = (void *)*((void *)a1 + 12);
        float32x4_t v38 = (void *)*((void *)a1 + 13);
        if (re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(a1, (const re::ecs2::ComponentTypeBase *)a3, v21))
        {
          char v29 = re::ecs2::g_encodeComponent;
          if (v28) {
            char v29 = v28;
          }
          v74[0] = MEMORY[0x263EF8330];
          v74[1] = 0x40000000;
          v74[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3;
          v74[3] = &__block_descriptor_tmp_25;
          if (v38) {
            uint64_t v30 = v38;
          }
          else {
            uint64_t v30 = re::ecs2::g_decodeComponent;
          }
          v74[4] = v29;
          v74[5] = a1;
          a4[1] = (uint64_t)_Block_copy(v74);
          v73[0] = MEMORY[0x263EF8330];
          v73[1] = 0x40000000;
          v73[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_26;
          v73[3] = &__block_descriptor_tmp_27_0;
          v73[4] = v30;
          v73[5] = a1;
          unint64_t v22 = v73;
        }
        else
        {
          v72[0] = MEMORY[0x263EF8330];
          v72[1] = 0x40000000;
          v72[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_28;
          v72[3] = &__block_descriptor_tmp_29;
          v72[4] = a3;
          a4[1] = (uint64_t)_Block_copy(v72);
          v71[0] = MEMORY[0x263EF8330];
          v71[1] = 0x40000000;
          v71[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_30;
          v71[3] = &__block_descriptor_tmp_31;
          v71[4] = a3;
          unint64_t v22 = v71;
        }
      }
      a4[2] = (uint64_t)_Block_copy(v22);
      goto LABEL_47;
    }
    if (v20)
    {
      long long v23 = *v20;
      long long v24 = v70;
      v70[0] = MEMORY[0x263EF8330];
      v70[1] = 0x40000000;
      long long v25 = &__block_descriptor_tmp_32;
      long long v26 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4;
    }
    else
    {
      v69[0] = MEMORY[0x263EF8330];
      v69[1] = 0x40000000;
      v69[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_5;
      v69[3] = &__block_descriptor_tmp_33;
      v69[4] = a3;
      long long v23 = _Block_copy(v69);
      long long v24 = v68;
      v68[0] = MEMORY[0x263EF8330];
      v68[1] = 0x40000000;
      long long v25 = &__block_descriptor_tmp_34;
      long long v26 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_6;
      uint64_t v20 = (void **)a3;
    }
    a4[1] = (uint64_t)v23;
    v24[2] = v26;
    v24[3] = v25;
    v24[4] = v20;
    a4[2] = (uint64_t)_Block_copy(v24);
  }
  if (!a1)
  {
LABEL_58:
    if (!v14)
    {
      uint64_t v14 = v65;
      v65[0] = MEMORY[0x263EF8330];
      v65[1] = 0x40000000;
      v65[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_57;
      v65[3] = &__block_descriptor_tmp_58;
      uint8_t v65[4] = a3;
    }
    char v37 = 0;
    if (!v15)
    {
      int v15 = v64;
      v64[0] = MEMORY[0x263EF8330];
      v64[1] = 0x40000000;
      v64[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_59;
      v64[3] = &__block_descriptor_tmp_60;
      v64[4] = a3;
    }
    goto LABEL_67;
  }
LABEL_47:
  shouldSerializeAsJson = (re *)(*(uint64_t (**)(const re::IntrospectionBase *))(*(void *)a1 + 8))(a1);
  if (!shouldSerializeAsJson) {
    goto LABEL_58;
  }
  long long v34 = (void *)*((void *)a1 + 12);
  long long v33 = (void *)*((void *)a1 + 13);
  if (*((_OWORD *)a1 + 6) == 0)
  {
    shouldSerializeAsJson = (re *)re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(a1, (const re::ecs2::ComponentTypeBase *)a3, v32);
    if (!shouldSerializeAsJson)
    {
      char v37 = 1;
      goto LABEL_63;
    }
    long long v34 = re::ecs2::g_encodeComponent;
    long long v33 = re::ecs2::g_decodeComponent;
  }
  if ((!v34 || v33) && (v34 || !v33))
  {
    char v37 = 1;
    if (v34)
    {
      uint64_t v14 = v16;
      int v15 = v17;
      if (v33)
      {
        uint64_t v14 = v67;
        v67[0] = MEMORY[0x263EF8330];
        v67[1] = 0x40000000;
        uint64_t v67[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_5_53;
        v67[3] = &__block_descriptor_tmp_54;
        v67[4] = v34;
        v67[5] = a1;
        __int16 v17 = v66;
        v66[0] = MEMORY[0x263EF8330];
        v66[1] = 0x40000000;
        v66[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_55;
        v66[3] = &__block_descriptor_tmp_56;
        v66[4] = v33;
        _OWORD v66[5] = a1;
        int v15 = v66;
      }
      goto LABEL_67;
    }
LABEL_63:
    uint64_t v14 = v16;
    int v15 = v17;
LABEL_67:
    uint64_t v59 = MEMORY[0x263EF8330];
    uint64_t v60 = 0x40000000;
    long long v61 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_61;
    int v62 = &unk_264BE4F60;
    uint64_t v63 = v15;
    RESyncSyncableTypeInfoSetReadSnapshotCb();
    uint64_t v54 = MEMORY[0x263EF8330];
    uint64_t v55 = 0x40000000;
    int v56 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_63;
    uint64_t v57 = &unk_264BE4F88;
    uint64_t v58 = v14;
    RESyncSyncableTypeInfoSetWriteSnapshotCb();
    uint64_t v44 = MEMORY[0x263EF8330];
    uint64_t v45 = 0x40000000;
    uint64_t v46 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_65;
    uint64_t v47 = &unk_264BE4FB0;
    char v53 = v37;
    uint64_t v50 = a3;
    uint64_t v51 = v18;
    uint64_t v52 = a3;
    uint64_t v48 = v17;
    CFDictionaryRef v49 = v14;
    RESyncSyncableTypeInfoSetReadPayloadCb();
    char v43 = v37;
    re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)v39, v83);
    uint64_t v42 = a3;
    RESyncSyncableTypeInfoSetWritePayloadCb();
    if (v39[0])
    {
      if (v41) {
        (*(void (**)(void))(*(void *)v39[0] + 40))();
      }
      uint64_t v41 = 0;
      memset(v39, 0, sizeof(v39));
      ++v40;
    }
    goto LABEL_71;
  }
  long long v35 = *re::ecsNetworkLogObjects(shouldSerializeAsJson);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = *((void *)a1 + 4);
    *(_DWORD *)CMTime buf = 136315138;
    *(void *)&uint8_t buf[4] = v36;
    _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "Custom Component %s has an encode or decode function, but not both.  This is incompatible with RESync.  Treating as opaque type.", buf, 0xCu);
  }
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
LABEL_71:
  uint64_t result = v83[0];
  if (v83[0] && v85) {
    return (*(uint64_t (**)(void))(*(void *)v83[0] + 40))();
  }
  return result;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[1] = *MEMORY[0x263EF8340];
  size_t v5 = RESyncBitWriterBackedRequiredSize();
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  bzero((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = RESyncBitWriterConstructBackedNoAlloc();
  uint64_t v9 = RESyncSyncableTypeInfoGetWriteSnapshotCb();
  uint64_t SyncObjectContext = RESyncCreateSyncObjectContext();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(v9, v8, a3, SyncObjectContext);
  *(_DWORD *)(a2 + 8) = RESyncBitWriterSize() + v7;
  RESyncDestroySyncObjectContext();
  RESyncBitWriterDestructNoDealloc();
  return v11;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  v14[1] = *MEMORY[0x263EF8340];
  size_t RequiredSize = RESyncBitReaderGetRequiredSize();
  uint64_t v8 = MEMORY[0x270FA5388](RequiredSize);
  bzero((char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), RequiredSize);
  uint64_t v9 = RESyncBitReaderConstructNoAlloc();
  uint64_t SnapshotCb = RESyncSyncableTypeInfoGetReadSnapshotCb();
  uint64_t SyncObjectContext = RESyncCreateSyncObjectContext();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(SnapshotCb + 16))(SnapshotCb, v9, a4, SyncObjectContext);
  *(void *)(a2 + 16) += a3;
  RESyncDestroySyncObjectContext();
  RESyncBitReaderDestructNoDealloc();
  return v12;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *(void *)CMTime buf = 0;
  __int16 v19 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  int v20 = 0;
  int v21 = 0;
  uint64_t v22 = a2;
  uint64_t v25 = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  re::DynamicString::setCapacity(&v24, 0);
  int v28 = a5;
  uint64_t v29 = a4;
  uint64_t v11 = (*(uint64_t (**)(void, _anonymous_namespace_ **, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32)
                                                                                                  + 16)
                                                                                      + 16))(*(void *)(*(void *)(a1 + 32) + 16), &v19, a3, v10);
  uint64_t v12 = (re *)RESyncBitWriterCloseBuffer();
  if ((v11 & 1) == 0)
  {
    int v15 = *re::ecsNetworkLogObjects(v12);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      if (v25) {
        uint64_t v18 = v26;
      }
      else {
        uint64_t v18 = (char *)&v25 + 1;
      }
      *(_DWORD *)CMTime buf = 136380931;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v31 = 2081;
      long long v32 = v18;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Failed to write OPACK payload of type %{private}s: %{private}s", buf, 0x16u);
    }
  }
  if (v24 && (v25 & 1) != 0) {
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*v24 + 40))(v24, v26, v13, v14);
  }
  return v11;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *(void *)CMTime buf = 0;
  __int16 v19 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  int v20 = 0;
  int v21 = 0;
  uint64_t v22 = a2;
  uint64_t v25 = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  re::DynamicString::setCapacity(&v24, 0);
  int v28 = a5;
  uint64_t v29 = a4;
  uint64_t v11 = (*(uint64_t (**)(void, _anonymous_namespace_ **, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(**(void **)(a1 + 32), &v19, a3, v10);
  uint64_t v12 = (re *)RESyncBitWriterCloseBuffer();
  if ((v11 & 1) == 0)
  {
    int v15 = *re::ecsNetworkLogObjects(v12);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      if (v25) {
        uint64_t v18 = v26;
      }
      else {
        uint64_t v18 = (char *)&v25 + 1;
      }
      *(_DWORD *)CMTime buf = 136380931;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v31 = 2081;
      long long v32 = v18;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Failed to write raw snapshot of type %{private}s: %{private}s", buf, 0x16u);
    }
  }
  if (v24 && (v25 & 1) != 0) {
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*v24 + 40))(v24, v26, v13, v14);
  }
  return v11;
}

re *___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  v14[0] = a2;
  v14[1] = a3;
  int v15 = -1;
  char v16 = 0;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = 0;
  void v14[2] = a2;
  v14[3] = a2 + a3;
  uint64_t v9 = (re *)(*(uint64_t (**)(void, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) + 24) + 16))(*(void *)(*(void *)(a1 + 32) + 24), v14, a4, a4, a5, a6, a7, a8);
  uint64_t v10 = v9;
  if ((v9 & 1) == 0)
  {
    uint64_t v11 = *re::ecsNetworkLogObjects(v9);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)CMTime buf = 136380675;
      uint64_t v21 = v13;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Failed to read OPACK payload of type %{private}s", buf, 0xCu);
    }
  }
  return v10;
}

re *___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  v14[0] = a2;
  v14[1] = a3;
  int v15 = -1;
  char v16 = 0;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = 0;
  void v14[2] = a2;
  v14[3] = a2 + a3;
  uint64_t v9 = (re *)(*(uint64_t (**)(void, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) + 8) + 16))(*(void *)(*(void *)(a1 + 32) + 8), v14, a4, a4, a5, a6, a7, a8);
  uint64_t v10 = v9;
  if ((v9 & 1) == 0)
  {
    uint64_t v11 = *re::ecsNetworkLogObjects(v9);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)CMTime buf = 136380675;
      uint64_t v21 = v13;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Failed to read raw snapshot of type %{private}s", buf, 0xCu);
    }
  }
  return v10;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  *(void *)CMTime buf = 0;
  uint64_t v18 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  int v19 = 0;
  int v20 = 0;
  uint64_t v21 = a2;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  int v27 = a5;
  uint64_t v28 = a4;
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)&v18, a3, *(void *)(a1 + 32));
  if (v24) {
    unint64_t v10 = v24 >> 1;
  }
  else {
    unint64_t v10 = v24 >> 1;
  }
  uint64_t v11 = (re *)RESyncBitWriterCloseBuffer();
  if (v10)
  {
    uint64_t v14 = *re::ecsNetworkLogObjects(v11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 48);
      if (v24) {
        uint64_t v17 = v25;
      }
      else {
        uint64_t v17 = (char *)&v24 + 1;
      }
      *(_DWORD *)CMTime buf = 136380931;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v30 = 2081;
      __int16 v31 = v17;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Failed to write OPACK payload of type %{private}s: %{private}s", buf, 0x16u);
    }
  }
  if (v23 && (v24 & 1) != 0) {
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*v23 + 40))(v23, v25, v12, v13);
  }
  return v10 == 0;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_19(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v12[0] = a2;
  v12[1] = a3;
  int v13 = -1;
  char v14 = 0;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = 0;
  uint64_t v12[2] = a2;
  v12[3] = a2 + a3;
  BOOL v7 = re::snapshot::Reader<re::snapshot::DecoderOPACK>::apply((uint64_t)v12, a4, *(void *)(a1 + 32));
  BOOL v8 = v7;
  if (!v7)
  {
    uint64_t v9 = *re::ecsNetworkLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 48);
      *(_DWORD *)CMTime buf = 136380675;
      uint64_t v19 = v11;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to read OPACK payload of type %{private}s", buf, 0xCu);
    }
  }
  return v8;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_21(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 16) + 16))();
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2(uint64_t a1, long long *a2, unsigned int a3)
{
  long long v8 = *a2;
  uint64_t v9 = re::Slice<unsigned char>::range(&v8, *((void *)a2 + 2) - v8, *((void *)a2 + 2) - v8 + a3);
  uint64_t v10 = v6;
  int v13 = -1;
  char v14 = 0;
  long long v15 = *(long long *)((char *)a2 + 40);
  uint64_t v16 = 0;
  uint64_t v11 = v9;
  uint64_t v12 = v9 + v6;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 24) + 16))();
  *((void *)a2 + 2) += a3;
  return result;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  Length = (re *)(*(uint64_t (**)(uint64_t, void, const char *))(a1 + 32))(a3, *(void *)(a1 + 40), "json");
  uint64_t v6 = Length;
  if (!Length || (Length = (re *)CFDataGetLength(Length)) == 0)
  {
    uint64_t v12 = *re::ecsNetworkLogObjects(Length);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 32);
      int v14 = 136380675;
      uint64_t v15 = v13;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Failed to encode custom component of type %{private}s.", (uint8_t *)&v14, 0xCu);
      if (!v6) {
        return 0;
      }
    }
    else if (!v6)
    {
      return 0;
    }
    CFRelease(v6);
    return 0;
  }
  size_t v7 = (size_t)Length;
  BytePtr = (UInt8 *)CFDataGetBytePtr(v6);
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)a2, BytePtr, v7);
  CFRelease(v6);
  unint64_t v9 = *(void *)(a2 + 40);
  if (v9) {
    unint64_t v10 = v9 >> 1;
  }
  else {
    unint64_t v10 = v9 >> 1;
  }
  return v10 == 0;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_26(uint64_t a1, uint64_t a2, CFIndex length, uint64_t a4)
{
  unsigned int v5 = length;
  CFDataRef v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], *(const UInt8 **)(a2 + 16), length, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void, CFDataRef, const char *))(a1 + 32))(a4, *(void *)(a1 + 40), v8, "json");
  CFRelease(v8);
  *(void *)(a2 + 16) += v5;
  return v9;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)a2, a3, *(void *)(a1 + 32));
  unint64_t v4 = *(void *)(a2 + 40);
  if (v4) {
    unint64_t v5 = v4 >> 1;
  }
  else {
    unint64_t v5 = v4 >> 1;
  }
  return v5 == 0;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_30(uint64_t a1, long long *a2, unsigned int a3, float *a4)
{
  long long v10 = *a2;
  v11[0] = re::Slice<unsigned char>::range(&v10, *((void *)a2 + 2) - v10, *((void *)a2 + 2) - v10 + a3);
  v11[1] = v8;
  int v12 = -1;
  char v13 = 0;
  long long v14 = *(long long *)((char *)a2 + 40);
  uint64_t v15 = 0;
  float32x4_t v11[2] = v11[0];
  v11[3] = v11[0] + v8;
  BOOL result = re::snapshot::Reader<re::snapshot::DecoderOPACK>::apply((uint64_t)v11, a4, *(void *)(a1 + 32));
  *((void *)a2 + 2) += a3;
  return result;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4(uint64_t a1, long long *a2, unsigned int a3)
{
  long long v8 = *a2;
  uint64_t v9 = re::Slice<unsigned char>::range(&v8, *((void *)a2 + 2) - v8, *((void *)a2 + 2) - v8 + a3);
  uint64_t v10 = v6;
  int v13 = -1;
  char v14 = 0;
  long long v15 = *(long long *)((char *)a2 + 40);
  uint64_t v16 = 0;
  uint64_t v11 = v9;
  uint64_t v12 = v9 + v6;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 8) + 16))();
  *((void *)a2 + 2) += a3;
  return result;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write((unsigned int *)a2, a3, *(void *)(a1 + 32));
  unint64_t v4 = *(void *)(a2 + 40);
  if (v4) {
    unint64_t v5 = v4 >> 1;
  }
  else {
    unint64_t v5 = v4 >> 1;
  }
  return v5 == 0;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_6(uint64_t a1, long long *a2, unsigned int a3, unsigned char *a4)
{
  long long v10 = *a2;
  v11[0] = re::Slice<unsigned char>::range(&v10, *((void *)a2 + 2) - v10, *((void *)a2 + 2) - v10 + a3);
  v11[1] = v8;
  int v12 = -1;
  char v13 = 0;
  long long v14 = *(long long *)((char *)a2 + 40);
  uint64_t v15 = 0;
  float32x4_t v11[2] = v11[0];
  v11[3] = v11[0] + v8;
  BOOL result = re::snapshot::Reader<re::snapshot::DecoderRaw>::apply((uint64_t)v11, a4, *(void *)(a1 + 32));
  *((void *)a2 + 2) += a3;
  return result;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_35()
{
  return 0;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_38()
{
  return 0;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_43(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = RESyncBitReaderDataPtr();
  uint64_t v5 = RESyncBitReaderBytesLeft();
  MEMORY[0x237DBB060](a3, v4, v5);
  RESyncBitReaderBytesLeft();
  RESyncBitReaderSkipData();
  return RESyncBitWriterIsOverflow() ^ 1;
}

void ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4_48()
{
  RESyncBitReaderDataPtr();
  RESyncBitReaderBytesLeft();
  JUMPOUT(0x237DBB060);
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_5_53(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  Length = (re *)(*(uint64_t (**)(uint64_t, void, const char *))(a1 + 32))(a3, *(void *)(a1 + 40), "json");
  uint64_t v6 = Length;
  if (!Length || (Length = (re *)CFDataGetLength(Length)) == 0)
  {
    char v13 = *re::ecsNetworkLogObjects(Length);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 32);
      int v15 = 136380675;
      uint64_t v16 = v14;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Failed to encode custom component of type %{private}s.", (uint8_t *)&v15, 0xCu);
      if (!v6) {
        return 0;
      }
    }
    else if (!v6)
    {
      return 0;
    }
    CFRelease(v6);
    return 0;
  }
  size_t v7 = Length;
  BytePtr = CFDataGetBytePtr(v6);
  MEMORY[0x237DBB060](a2, BytePtr, v7);
  CFRelease(v6);
  IsOverflow = (re *)RESyncBitWriterIsOverflow();
  if (!IsOverflow) {
    return 1;
  }
  long long v10 = *re::ecsNetworkLogObjects(IsOverflow);
  BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 32);
    int v15 = 136380675;
    uint64_t v16 = v12;
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Failed to write data payload of type %{private}s", (uint8_t *)&v15, 0xCu);
    return 0;
  }
  return result;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_55(uint64_t a1, const UInt8 *a2, CFIndex a3, uint64_t a4)
{
  CFDataRef v6 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, CFDataRef, const char *))(a1 + 32))(a4, *(void *)(a1 + 40), v6, "json");
  CFRelease(v6);
  return v7;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_57(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  *(void *)CMTime buf = 0;
  uint64_t v18 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  int v19 = 0;
  int v20 = 0;
  uint64_t v21 = a2;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  int v27 = a5;
  uint64_t v28 = a4;
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write((unsigned int *)&v18, a3, *(void *)(a1 + 32));
  if (v24) {
    unint64_t v10 = v24 >> 1;
  }
  else {
    unint64_t v10 = v24 >> 1;
  }
  uint64_t v11 = (re *)RESyncBitWriterCloseBuffer();
  if (v10)
  {
    uint64_t v14 = *re::ecsNetworkLogObjects(v11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 48);
      if (v24) {
        uint64_t v17 = v25;
      }
      else {
        uint64_t v17 = (char *)&v24 + 1;
      }
      *(_DWORD *)CMTime buf = 136380931;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v30 = 2081;
      __int16 v31 = v17;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Failed to write raw snapshot of type %{private}s: %{private}s", buf, 0x16u);
    }
  }
  if (v23 && (v24 & 1) != 0) {
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*v23 + 40))(v23, v25, v12, v13);
  }
  return v10 == 0;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_59(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v12[0] = a2;
  v12[1] = a3;
  int v13 = -1;
  char v14 = 0;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = 0;
  uint64_t v12[2] = a2;
  v12[3] = a2 + a3;
  BOOL v7 = re::snapshot::Reader<re::snapshot::DecoderRaw>::apply((uint64_t)v12, a4, *(void *)(a1 + 32));
  BOOL v8 = v7;
  if (!v7)
  {
    uint64_t v9 = *re::ecsNetworkLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 48);
      *(_DWORD *)CMTime buf = 136380675;
      uint64_t v19 = v11;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to read raw snapshot of type %{private}s", buf, 0xCu);
    }
  }
  return v8;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_61(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SyncObjectContextEntry = RESyncGetSyncObjectContextEntry();
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = RESyncBitReaderDataPtr();
  unsigned int v8 = RESyncBitReaderSize();
  uint64_t v9 = (_anonymous_namespace_ *)RESyncBitReaderSkipData();
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *))(v6 + 16);
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_63(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SyncObjectContextEntry = RESyncGetSyncObjectContextEntry();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16);
  uint64_t v8 = SyncObjectContextEntry + 456;
  uint64_t v9 = *(void *)(a1 + 32);
  return v7(v9, a2, a3, v8, 6);
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_65(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v43[5] = *MEMORY[0x263EF8340];
  int ContextSupportsProtocolLevelWalnut = RESyncObjectReadContextSupportsProtocolLevelWalnut();
  *(void *)uint64_t v36 = RESyncBitReaderBytesLeft();
  if ((ContextSupportsProtocolLevelWalnut & 1) == 0) {
    RESyncBiasedVLQRead();
  }
  uint64_t v6 = (const char *)RESyncBitReaderDataPtr();
  RESyncBitReaderSkipData();
  if ((RESyncBitReaderIsOverflow() & 1) == 0)
  {
    uint64_t IsLocalSession = RESyncObjectReadContextIsLocalSession();
    if ((IsLocalSession & 1) != 0 || *(unsigned char *)(a1 + 72))
    {
      MEMORY[0x237DBB060](a3, v6, v36[0]);
      return 1;
    }
    memset(&v35[1], 0, 24);
    v34[0] = re::PassthroughAssetSerialization::instance(void)::instance;
    v34[1] = v35;
    v34[2] = 0;
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = operator new(0x20uLL);
    void *v12 = &unk_26E7023E0;
    v12[1] = v11;
    uint64_t v12[2] = v34;
    v43[0] = (uint64_t)v10;
    float32x4_t v43[4] = (uint64_t)v12;
    *(void *)((char *)&v42[2] + 4) = 0;
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](buf);
    if (ContextSupportsProtocolLevelWalnut)
    {
      int v13 = (re *)(*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
      if ((v13 & 1) == 0)
      {
        char v14 = *re::ecsNetworkLogObjects(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          uint64_t DebugName = RESyncSyncableTypeInfoGetDebugName();
          *(_DWORD *)CMTime buf = 136315138;
          v42[0] = DebugName;
          _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Failed to deserialize OPACK payload of type \"%s\".", buf, 0xCu);
        }
        goto LABEL_24;
      }
    }
    else if (RESyncObjectReadContextSupportsProtocolLevelAlmond())
    {
      re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
      re::TypeInfo::TypeInfo((uint64_t)v32, (uint64_t)v42 + 4);
      uint64_t v16 = re::TypeInfo::name((re::TypeInfo *)v32);
      if (v30[0])
      {
        re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)buf, v6, v36[0], -1);
        v29[0] = &unk_26E6CA748;
        v29[1] = RESyncGetSyncObjectReadContextEntry();
        uint64_t v29[2] = 0;
        ContextEntry = (re *)RESyncGetSyncObjectReadContextEntry();
        *((void *)ContextEntry + 55) = v29;
        uint64_t v19 = re::deserializeObject(ContextEntry, (re::NetworkCompatDeserializer *)buf, v10, v32, (const re::TypeInfo *)&v31, (uint64_t)v25);
        if (v25[0])
        {
          re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)buf);
          re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
          goto LABEL_17;
        }
        uint64_t v22 = *re::ecsNetworkLogObjects(v19);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = re::TypeInfo::name((re::TypeInfo *)v32)[1];
          if (v27) {
            unint64_t v24 = *(unsigned char **)&v28[7];
          }
          else {
            unint64_t v24 = v28;
          }
          *(_DWORD *)char v37 = 136380931;
          uint64_t v38 = v23;
          __int16 v39 = 2080;
          int v40 = v24;
          _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Failed to deserialize payload of type \"%{private}s\". Details: %s", v37, 0x16u);
        }
        if (!v25[0] && v26 && (v27 & 1) != 0) {
          (*(void (**)(void))(*(void *)v26 + 40))();
        }
        re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)buf);
      }
      else
      {
        uint64_t v20 = *re::ecsNetworkLogObjects((re *)v17);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = re::TypeInfo::name((re::TypeInfo *)v32)[1];
          *(_DWORD *)CMTime buf = 136380675;
          v42[0] = v21;
          _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "Failed to read payload in backward compatible format. Type \"%{private}s\" does not exist in previous RealityKit version.", buf, 0xCu);
        }
      }
      re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
LABEL_24:
      uint64_t v7 = 0;
      goto LABEL_25;
    }
LABEL_17:
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_25:
    std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v43);
    return v7;
  }
  return 0;
}

uint64_t *___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *(**v17)(uint8_t *__return_ptr, re::IntrospectionBase *, uint64_t);
  re *v18;
  uint64_t *v19;
  uint64_t *v20;
  re *v21;
  _anonymous_namespace_ *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v27;
  uint64_t v28;
  unsigned char *v29;
  uint64_t DebugName;
  unsigned char *v31;
  void v32[3];
  void v33[2];
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37[8];
  uint64_t v38;
  unsigned char v39[39];
  char v40;
  void v41[3];
  void v42[4];
  uint8_t v43[4];
  uint64_t v44;
  __int16 v45;
  unsigned char *v46;
  uint8_t v47[4];
  uint64_t v48;
  __int16 v49;
  unsigned char *v50;
  uint64_t v51;
  char v52;
  unsigned char v53[31];
  uint8_t buf[4];
  unsigned char v55[12];
  char v56;
  unsigned char v57[7];
  unsigned char *v58;
  uint64_t v59;
  uint64_t v60[8];
  uint64_t vars8;

  v60[5] = *MEMORY[0x263EF8340];
  char v5 = RESyncObjectWriteContextSupportsProtocolLevelWalnut();
  RESyncBitReaderBytesLeft();
  RESyncBitReaderDataPtr();
  uint64_t v6 = RESyncObjectWriteContextIsLocalSession();
  if ((v6 & 1) != 0 || *(unsigned char *)(a1 + 112))
  {
    JUMPOUT(0x237DBB060);
  }
  memset(&v42[1], 0, 24);
  v41[0] = re::PassthroughAssetSerialization::instance(void)::instance;
  v41[1] = v42;
  uint64_t v41[2] = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_26E702460;
  v9[1] = v8;
  void v9[2] = v41;
  v60[0] = (uint64_t)v7;
  v60[4] = (uint64_t)v9;
  uint64_t v58 = 0;
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](buf);
  unint64_t v10 = (re *)(*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v10)
  {
    if (RESyncObjectWriteContextSupportsProtocolLevelPistachio())
    {
      if ((v5 & 1) == 0)
      {
        if ((RESyncObjectWriteContextSupportsProtocolLevelAlmond() & 1) == 0) {
          return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v60);
        }
LABEL_21:
        re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v40);
        re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v55[4]);
        uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v39);
        if (v37[0])
        {
          uint64_t v36 = 0;
          v33[1] = 0;
          long long v34 = 0;
          long long v35 = 0;
          re::DynamicArray<char>::setCapacity(v33, 0x400uLL);
          ++v35;
          re::DynamicArrayBufferedOutputStream::DynamicArrayBufferedOutputStream((uint64_t)buf, (uint64_t)v33, -1);
          v32[0] = &unk_26E6CA778;
          v32[1] = RESyncGetSyncObjectWriteContextEntry();
          void v32[2] = 0;
          uint64_t v21 = (re *)RESyncGetSyncObjectWriteContextEntry();
          *((void *)v21 + 55) = v32;
          uint64_t v22 = re::serializeObject(v21, (re::NetworkCompatSerializer *)buf, v7, v39, (const re::TypeInfo *)&v38, (uint64_t)v47);
          if (v47[0])
          {
            v55[4] = 0;
            google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v59);
            RESyncBiasedVLQWrite();
            MEMORY[0x237DBB060](a3, v36, v34);
          }
          else
          {
            uint64_t v25 = *re::ecsNetworkLogObjects(v22);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              uint64_t v28 = re::TypeInfo::name((re::TypeInfo *)v39)[1];
              if (v52) {
                uint64_t v29 = *(unsigned char **)&v53[7];
              }
              else {
                uint64_t v29 = v53;
              }
              *(_DWORD *)char v43 = 136380931;
              uint64_t v44 = v28;
              uint64_t v45 = 2081;
              uint64_t v46 = v29;
              _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "Failed to write payload in backward compatible format. Type: \"%{private}s\". Details: %{private}s", v43, 0x16u);
            }
          }
          if (!v47[0] && v51 && (v52 & 1) != 0) {
            (*(void (**)(void))(*(void *)v51 + 40))();
          }
          re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)buf);
          if (v33[0] && v36) {
            (*(void (**)(void))(*(void *)v33[0] + 40))();
          }
        }
        else
        {
          uint64_t v23 = *re::ecsNetworkLogObjects((re *)v20);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            unint64_t v24 = re::TypeInfo::name((re::TypeInfo *)v39)[1];
            *(_DWORD *)CMTime buf = 136380675;
            *(void *)uint64_t v55 = v24;
            _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "Failed to write payload in backward compatible format. Type \"%{private}s\" does not exist in previous RealityKit version.", buf, 0xCu);
          }
        }
        re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v40);
        return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v60);
      }
LABEL_14:
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v60);
    }
    if (v5) {
      goto LABEL_14;
    }
    uint64_t v13 = *(void *)(a1 + 80);
    int v14 = RESyncObjectWriteContextSupportsProtocolLevelAlmond();
    if (!v13 || (uint64_t v15 = RESyncGetSyncObjectWriteContextEntry(), !*(void *)(a1 + 80)))
    {
LABEL_20:
      if (!v14) {
        return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v60);
      }
      goto LABEL_21;
    }
    uint64_t v16 = v15;
    uint64_t v17 = *(void *(***)(uint8_t *__return_ptr, re::IntrospectionBase *, uint64_t))(a1 + 96);
    while (1)
    {
      uint64_t v18 = (re *)(*v17)(buf, v7, v16);
      if (!buf[0]) {
        break;
      }
      if (++v17 == (void *(**)(uint8_t *__return_ptr, re::IntrospectionBase *, uint64_t))(*(void *)(a1 + 96) + 8 * *(void *)(a1 + 80))) {
        goto LABEL_20;
      }
    }
    char v27 = *re::ecsNetworkLogObjects(v18);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t DebugName = RESyncSyncableTypeInfoGetDebugName();
      if (v56) {
        uint64_t v31 = v58;
      }
      else {
        uint64_t v31 = v57;
      }
      *(_DWORD *)uint64_t v47 = 136380931;
      uint64_t v48 = DebugName;
      CFDictionaryRef v49 = 2080;
      uint64_t v50 = v31;
      _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, "Downgrade function failed for type \"%{private}s\": %s", v47, 0x16u);
    }
    if (!buf[0] && *(void *)&v55[4] && (v56 & 1) != 0) {
      (*(void (**)(void))(**(void **)&v55[4] + 40))();
    }
  }
  else
  {
    uint64_t v11 = *re::ecsNetworkLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = RESyncSyncableTypeInfoGetDebugName();
      *(_DWORD *)CMTime buf = 136380675;
      *(void *)uint64_t v55 = v12;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Failed to deserialize payload of type \"%{private}s\".", buf, 0xCu);
    }
  }
  return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v60);
}

uint64_t __copy_helper_block_8_64c74_ZTSN2re12DynamicArrayIPFNS_6ResultINS_4UnitENS_13DynamicStringEEEPvS5_EEE(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray(a1 + 64, (uint64_t *)(a2 + 64));
}

uint64_t __destroy_helper_block_8_64c74_ZTSN2re12DynamicArrayIPFNS_6ResultINS_4UnitENS_13DynamicStringEEEPvS5_EEE(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 64);
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    if (*(void *)(a1 + 96)) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
    *(void *)(a1 + 96) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *uint64_t v3 = 0;
    ++*(_DWORD *)(a1 + 88);
  }
  return result;
}

const char **re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(re::ecs2::ComponentTypeBase const&,re::IntrospectionBase const&)::$_0::__invoke(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) != 8) {
    return 0;
  }
  uint64_t v1 = *(unsigned int *)(a1 + 56);
  if (!v1) {
    return 0;
  }
  for (unint64_t i = *(const char ****)(a1 + 64); ; ++i)
  {
    uint64_t v3 = *i;
    if (*(_DWORD *)*i == 1) {
      break;
    }
    if (!--v1) {
      return 0;
    }
  }
  if (*((_DWORD *)v3 + 10) || strcmp("__JSON__", v3[1])) {
    return 0;
  }
  return v3;
}

uint64_t _ZZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb_EN3__18__invokeEPvPhjPj(re::snapshot::Encoder *this, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  unint64_t v7 = *((unsigned int *)this + 3);
  unint64_t v8 = v6 + *a4;
  if (v8 <= v7) {
    goto LABEL_2;
  }
  uint64_t v11 = (re *)re::snapshot::Encoder::grow(this, v8);
  if (v11)
  {
    LODWORD(v6) = *((_DWORD *)this + 2);
    LODWORD(v7) = *((_DWORD *)this + 3);
LABEL_2:
    uint64_t v9 = *(void *)this;
    *a4 = v7 - v6;
    return v9 + *((unsigned int *)this + 2);
  }
  uint64_t v12 = *re::ecsNetworkLogObjects(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "[NetworkSystem] failed to grow snapshot buffer for BitWriter.", v13, 2u);
  }
  return 0;
}

uint64_t anonymous namespace'::bitWriterGrowFn(_anonymous_namespace_ *this, void *a2, unsigned __int8 *a3)
{
  return RESyncBitWriterGrowBuffer();
}

void _ZNSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEE7__cloneEv(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26E7023E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEE7__cloneEPNS0_6__baseISF_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7023E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEEclEOSE_(uint64_t *a1, re::DynamicString **a2)
{
}

uint64_t _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb0_E3__2))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEE11target_typeEv()
{
  return &_ZTIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb0_E3__2;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEE7__cloneEv(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26E702460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEE7__cloneEPNS0_6__baseISF_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEEclEOSE_(uint64_t *a1, re::DynamicString **a2)
{
}

uint64_t _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb1_E3__3))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEE11target_typeEv()
{
  return &_ZTIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb1_E3__3;
}

uint64_t re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<float *>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    unint64_t v6 = a2[2];
    if (v6 >= *(void *)(a1 + 16))
    {
      re::DynamicArray<float *>::setCapacity((void *)a1, a2[2]);
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7)
      {
        memmove(*(void **)(a1 + 32), (const void *)a2[4], 8 * v7);
        uint64_t v7 = *(void *)(a1 + 16);
      }
      memcpy((void *)(*(void *)(a1 + 32) + 8 * v7), (const void *)(a2[4] + 8 * v7), 8 * v6 - 8 * v7);
    }
    else if (v6)
    {
      memmove(*(void **)(a1 + 32), (const void *)a2[4], 8 * v6);
    }
    *(void *)(a1 + 16) = v6;
  }
  return a1;
}

void re::ecs2::ImageBasedLightReceiverManager::updateIBLData(re::ecs2::ImageBasedLightReceiverManager *this, const re::ecs2::Scene *a2, re::RenderManager *a3)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v4 = (unsigned __int8 *)*((void *)a3 + 19);
  if (v4) {
    unsigned int v72 = *v4;
  }
  else {
    unsigned int v72 = 0;
  }
  unint64_t v5 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*((void *)a2 + 28) > v5)
  {
    uint64_t v6 = *(void *)(*((void *)a2 + 30) + 8 * v5);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 24);
      if (v7)
      {
        unint64_t v8 = *(uint64_t **)(v6 + 40);
        CMTime v73 = &v8[v7];
        uint64_t v69 = 1065353216;
        uint64_t v68 = 0x3F80000000000000;
        while (1)
        {
          uint64_t v9 = *v8;
          if (*(void *)(*v8 + 1304)) {
            break;
          }
LABEL_36:
          if (++v8 == v73) {
            goto LABEL_37;
          }
        }
        if (!*(unsigned char *)(v9 + 152))
        {
          re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)&v85, a3);
          LOBYTE(v9objc_initWeak(location, 0) = 1;
          re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)&v91, (const re::MaterialParameterBlock *)&v85);
          re::Optional<re::MaterialParameterBlock>::operator=((unsigned __int8 *)(v9 + 152), (unsigned __int8 *)&v90);
          if ((_BYTE)v90) {
            (*v91)(&v91);
          }
          re::MaterialParameterBlock::~MaterialParameterBlock((re::MaterialParameterBlock *)&v85);
        }
        float v96 = exp2f(*(float *)(v9 + 28));
        if (*(unsigned char *)(v9 + 1208))
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v9 + 16), (const re::ecs2::Entity *)1, &v85);
          buf[0] = 0u;
          v115[0] = xmmword_23435FBB0;
          long long v114 = 0u;
          unint64_t v10 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)&v85, buf, v115, &v114);
          uint64_t v11 = 0;
          LODWORD(v2objc_destroyWeak(this + 1) = v115[0];
          float v12 = *((float *)v115 + 2);
          float v13 = v12 + v12;
          float v14 = *(float *)&v21 * (float)(*(float *)&v21 + *(float *)&v21);
          float v15 = *((float *)v115 + 1) * (float)(*((float *)v115 + 1) + *((float *)v115 + 1));
          float v16 = v12 * (float)(v12 + v12);
          float v17 = (float)(*(float *)&v21 + *(float *)&v21) * *((float *)v115 + 1);
          float v18 = (float)(*(float *)&v21 + *(float *)&v21) * *((float *)v115 + 2);
          float v19 = (float)(*((float *)v115 + 1) + *((float *)v115 + 1)) * *((float *)v115 + 2);
          float v20 = (float)(*(float *)&v21 + *(float *)&v21) * *((float *)v115 + 3);
          v25.f32[0] = (float)(*((float *)v115 + 1) + *((float *)v115 + 1)) * *((float *)v115 + 3);
          *(float *)&long long v21 = 1.0 - (float)(v15 + v16);
          float32x4_t v23 = (float32x4_t)v21;
          v23.f32[1] = v17 + (float)(v13 * *((float *)v115 + 3));
          *(float *)&long long v28 = v18 - v25.f32[0];
          v29.f32[0] = v17 - (float)(v13 * *((float *)v115 + 3));
          v25.f32[0] = v18 + v25.f32[0];
          *((float *)&v21 + objc_destroyWeak(this + 1) = v29.f32[0];
          DWORD2(v2objc_destroyWeak(this + 1) = v25.i32[0];
          v25.f32[1] = v19 - v20;
          int32x4_t v22 = vzip1q_s32((int32x4_t)v23, (int32x4_t)v25);
          v23.i32[2] = v28;
          *(float *)v24.i32 = 1.0 - (float)(v14 + v16);
          v25.f32[2] = 1.0 - (float)(v14 + v15);
          *(float *)v26.i32 = v19 + v20;
          int32x4_t v27 = vzip2q_s32(v22, vdupq_lane_s32(v24, 0));
          DWORD1(v28) = v26.i32[0];
          DWORD2(v28) = v25.i32[2];
          v115[0] = vzip1q_s32(v22, (int32x4_t)v29);
          v115[1] = v27;
          v115[2] = vzip1q_s32(vzip2q_s32((int32x4_t)v23, (int32x4_t)v25), v26);
          v29.i32[1] = v24.i32[0];
          v29.i32[2] = v26.i32[0];
          do
          {
            buf[v11] = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(v115[v11])), v29, *(float32x2_t *)&v115[v11], 1), v25, (float32x4_t)v115[v11], 2);
            ++v11;
          }
          while (v11 != 3);
          float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
          uint32x4_t v31 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v30, vabdq_f32((float32x4_t)xmmword_23435FD60, (float32x4_t)buf[1])), (int8x16_t)vcgeq_f32(v30, vabdq_f32((float32x4_t)xmmword_23435FD50, (float32x4_t)buf[0]))), (int8x16_t)vcgeq_f32(v30, vabdq_f32((float32x4_t)xmmword_23435FD80, (float32x4_t)buf[2])));
          v31.i32[3] = v31.i32[2];
          if ((vminvq_u32(v31) & 0x80000000) == 0)
          {
            uint64_t v32 = *re::ecsComponentsLogObjects(v10);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v33 = *(void *)(*(void *)(v9 + 16) + 280);
              buf[0].i32[0] = 136315138;
              *(uint64_t *)((char *)buf[0].i64 + 4) = v33;
              _os_log_impl(&dword_233120000, v32, OS_LOG_TYPE_DEFAULT, "The world transform of the entity [%s] includes non-uniform scaling.                                     Set the rotation of its IBL component to identity.", (uint8_t *)buf, 0xCu);
            }
            int32x4_t v27 = (int32x4_t)xmmword_23435FD60;
            long long v21 = xmmword_23435FD50;
            long long v28 = xmmword_23435FD80;
          }
          LODWORD(v9objc_destroyWeak(this + 1) = DWORD2(v21);
          __int32 v93 = v27.i32[2];
          uint64_t v90 = v21;
          uint64_t v92 = v27.i64[0];
          int v95 = DWORD2(v28);
          uint64_t v94 = v28;
        }
        else
        {
          LODWORD(v9objc_destroyWeak(this + 1) = 0;
          uint64_t v90 = v69;
          __int32 v93 = 0;
          uint64_t v92 = v68;
          int v95 = 1065353216;
          uint64_t v94 = 0;
        }
        int v97 = *(_DWORD *)(v9 + 1200);
        unint64_t v34 = *(unsigned int *)(v9 + 1288) | ((unint64_t)*(unsigned __int8 *)(v9 + 1296) << 32);
        *(void *)&long long v85 = *(void *)(v9 + 1280);
        *((void *)&v85 + objc_destroyWeak(this + 1) = v34;
        *(void *)&long long v35 = re::ColorGamut3F::as((uint64_t *)&v85, v72, 1);
        DWORD2(v35) = v36;
        long long v98 = v35;
        re::ColorManager::computeWPCMatrix((float32x4_t *)(*((void *)a3 + 14) + 2032), *((void *)a3 + 11), (uint64_t)&v85);
        int v100 = DWORD2(v85);
        int v102 = v87;
        uint64_t v99 = v85;
        uint64_t v101 = v86;
        int v104 = v89;
        uint64_t v103 = v88;
        int v105 = *(_DWORD *)(v9 + 1204);
        if (*(unsigned char *)(v9 + 1209))
        {
          long long v38 = *(_OWORD *)(v9 + 1216);
          long long v37 = *(_OWORD *)(v9 + 1232);
          long long v39 = *(_OWORD *)(v9 + 1248);
        }
        else
        {
          long long v37 = xmmword_2343A0A80;
          long long v39 = unk_2343A0A90;
          long long v38 = _PromotedConst;
        }
        int v107 = DWORD2(v38);
        int v109 = DWORD2(v37);
        uint64_t v106 = v38;
        uint64_t v108 = v37;
        int v111 = DWORD2(v39);
        uint64_t v110 = v39;
        if (*(unsigned char *)(v9 + 136))
        {
          int v112 = *(_DWORD *)(v9 + 140);
          if (*(unsigned char *)(v9 + 137))
          {
            int v40 = *(_DWORD *)(v9 + 144);
LABEL_30:
            int v113 = v40;
            id v41 = objc_msgSend(*((id *)a3 + 23), sel_newBufferWithBytes_length_options_, &v90, 208, 0, v68, v69);
            id v42 = v41;
            uint64_t v43 = (void)objc_msgSend(v41, sel_length) << 32;
            uint64_t v83 = 0x262DF9A294ABAC1CLL;
            id v44 = v42;
            v82[0] = v44;
            v82[1] = v43;
            re::MaterialParameterBlock::setBuffer((re::MaterialParameterBlock *)(v9 + 160), &v83, (uint64_t)v82, (uint64_t)v84);
            v84[0] = 0;
            if (v44)
            {

              v82[0] = 0;
            }
            uint64_t v83 = 0;
            if (v42) {

            }
            if (v41) {
            goto LABEL_36;
            }
          }
        }
        else
        {
          int v112 = 0;
        }
        int v40 = 0;
        goto LABEL_30;
      }
    }
  }
LABEL_37:
  LODWORD(v45) = 0x7FFFFFFF;
  if (*((void *)this + 7))
  {
    unint64_t v46 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    uint64_t v47 = *(unsigned int *)(*((void *)this + 8) + 4 * ((v46 ^ (v46 >> 31)) % *((unsigned int *)this + 20)));
    if (v47 != 0x7FFFFFFF)
    {
      uint64_t v48 = *((void *)this + 9);
      if (*(const re::ecs2::Scene **)(v48 + 80 * v47 + 16) == a2)
      {
        LODWORD(v45) = v47;
      }
      else
      {
        uint64_t v45 = v47;
        while (1)
        {
          LODWORD(v45) = *(_DWORD *)(v48 + 80 * v45 + 8) & 0x7FFFFFFF;
          if (v45 == 0x7FFFFFFF) {
            break;
          }
          if (*(const re::ecs2::Scene **)(v48 + 80 * v45 + 16) == a2) {
            goto LABEL_46;
          }
        }
        LODWORD(v45) = 0x7FFFFFFF;
      }
    }
  }
LABEL_46:
  uint64_t v49 = *((void *)this + 9) + 80 * v45;
  uint64_t v51 = *(void *)(v49 + 64);
  uint64_t v50 = (unint64_t *)(v49 + 64);
  if (v51)
  {
    unint64_t v52 = 0;
    do
    {
      uint64_t v53 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)(v50 - 5), v52);
      uint64_t v54 = (unsigned __int8 *)(v53 + 152);
      if (!*v54)
      {
        re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)&v85, a3);
        LOBYTE(v9objc_initWeak(location, 0) = 1;
        re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)&v91, (const re::MaterialParameterBlock *)&v85);
        re::Optional<re::MaterialParameterBlock>::operator=(v54, (unsigned __int8 *)&v90);
        if ((_BYTE)v90) {
          (*v91)(&v91);
        }
        re::MaterialParameterBlock::~MaterialParameterBlock((re::MaterialParameterBlock *)&v85);
      }
      if (*(void *)(v53 + 96))
      {
        uint64_t v55 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)(v53 + 88));
        if (!v55)
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)(v53 + 88));
          int v61 = 1;
          goto LABEL_58;
        }
        uint64_t v56 = v55;
        uint64_t v57 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v55 + 24));
        uint64_t v58 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v56 + 48));
        uint64_t v91 = 0;
        uint64_t v90 = 0;
        long long v85 = 0uLL;
        re::TextureHandle::operator=((re::TextureHandle *)&v90, (re::TextureHandle *)(v57 + 48));
        re::TextureHandle::operator=((re::TextureHandle *)&v85, (re::TextureHandle *)(v58 + 48));
        re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredDiffuse", (const re::TextureHandle *)&v90, (uint64_t)v81);
        v81[0] = 0;
        re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredSpecular", (const re::TextureHandle *)&v85, (uint64_t)v80);
        v80[0] = 0;
      }
      else
      {
        uint64_t v59 = *((void *)a3 + 8);
        uint64_t v60 = (void **)(v59 + 88);
        uint64_t v91 = 0;
        uint64_t v90 = 0;
        re::TextureManager::registerTexture((os_unfair_lock_s *)v59, (void **)(v59 + 88), (os_unfair_lock_s **)&v85);
        re::TextureHandle::operator=((re::TextureHandle *)&v90, (re::TextureHandle *)&v85);
        re::TextureHandle::invalidate((re::TextureHandle *)&v85);
        long long v85 = 0uLL;
        re::TextureManager::registerTexture(*((os_unfair_lock_s **)a3 + 8), v60, (os_unfair_lock_s **)buf);
        re::TextureHandle::operator=((re::TextureHandle *)&v85, (re::TextureHandle *)buf);
        re::TextureHandle::invalidate((re::TextureHandle *)buf);
        re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredDiffuse", (const re::TextureHandle *)&v90, (uint64_t)v79);
        v79[0] = 0;
        re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredSpecular", (const re::TextureHandle *)&v85, (uint64_t)v78);
        v78[0] = 0;
      }
      re::TextureHandle::invalidate((re::TextureHandle *)&v85);
      re::TextureHandle::invalidate((re::TextureHandle *)&v90);
      int v61 = 0;
LABEL_58:
      if (*(unsigned char *)(v53 + 136) || *(unsigned char *)(v53 + 1208))
      {
        if (*(void *)(v53 + 120))
        {
          uint64_t v62 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)(v53 + 112));
          if (!v62)
          {
            re::AssetHandle::loadAsync((re::AssetHandle *)(v53 + 112));
LABEL_68:
            ++v52;
            continue;
          }
          uint64_t v63 = v62;
          uint64_t v64 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v62 + 24));
          uint64_t v65 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v63 + 48));
          uint64_t v91 = 0;
          uint64_t v90 = 0;
          long long v85 = 0uLL;
          re::TextureHandle::operator=((re::TextureHandle *)&v90, (re::TextureHandle *)(v64 + 48));
          re::TextureHandle::operator=((re::TextureHandle *)&v85, (re::TextureHandle *)(v65 + 48));
          re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredBlendDiffuse", (const re::TextureHandle *)&v90, (uint64_t)v77);
          v77[0] = 0;
          re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredBlendSpecular", (const re::TextureHandle *)&v85, (uint64_t)v76);
          v76[0] = 0;
        }
        else
        {
          uint64_t v66 = *((void *)a3 + 8);
          uint64_t v67 = (void **)(v66 + 88);
          uint64_t v91 = 0;
          uint64_t v90 = 0;
          re::TextureManager::registerTexture((os_unfair_lock_s *)v66, (void **)(v66 + 88), (os_unfair_lock_s **)&v85);
          re::TextureHandle::operator=((re::TextureHandle *)&v90, (re::TextureHandle *)&v85);
          re::TextureHandle::invalidate((re::TextureHandle *)&v85);
          long long v85 = 0uLL;
          re::TextureManager::registerTexture(*((os_unfair_lock_s **)a3 + 8), v67, (os_unfair_lock_s **)buf);
          re::TextureHandle::operator=((re::TextureHandle *)&v85, (re::TextureHandle *)buf);
          re::TextureHandle::invalidate((re::TextureHandle *)buf);
          re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredBlendDiffuse", (const re::TextureHandle *)&v90, (uint64_t)v75);
          v75[0] = 0;
          re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredBlendSpecular", (const re::TextureHandle *)&v85, (uint64_t)v74);
          v74[0] = 0;
        }
        re::TextureHandle::invalidate((re::TextureHandle *)&v85);
        re::TextureHandle::invalidate((re::TextureHandle *)&v90);
      }
      if (v61) {
        goto LABEL_68;
      }
      re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::removeAt((uint64_t)(v50 - 5), v52);
    }
    while (v52 < *v50);
  }
}

unsigned __int8 *re::Optional<re::MaterialParameterBlock>::operator=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    if (*a1) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      (**((void (***)(void))a1 + 1))();
      *a1 = 0;
    }
    else
    {
      uint64_t v7 = (re::MaterialParameterBlock *)(a1 + 8);
      if (v3) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v4 == 0;
      }
      if (v8)
      {
        re::MaterialParameterBlock::operator=((uint64_t)v7, (uint64_t)(a2 + 8));
      }
      else
      {
        *a1 = 1;
        re::MaterialParameterBlock::MaterialParameterBlock(v7, (const re::MaterialParameterBlock *)(a2 + 8));
      }
    }
  }
  return a1;
}

uint64_t re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 848, a2, v3);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    unint64_t v5 = v3 - 1;
    if (v3 - 1 > a2)
    {
      uint64_t v6 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, v5);
      *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, a2) = v6;
      unint64_t v5 = *(void *)(a1 + 40) - 1;
    }
    uint64_t result = re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, v5);
    --*(void *)(a1 + 40);
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::getEntityToImageBasedLightReceiverComponentMap(uint64_t a1, unint64_t a2)
{
  LODWORD(v2) = 0x7FFFFFFF;
  if (*(void *)(a1 + 8))
  {
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 32)));
    if (v4 != 0x7FFFFFFF)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      if (*(void *)(v5 + 72 * v4 + 16) == a2)
      {
        LODWORD(v2) = v4;
      }
      else
      {
        uint64_t v2 = v4;
        while (1)
        {
          LODWORD(v2) = *(_DWORD *)(v5 + 72 * v2 + 8) & 0x7FFFFFFF;
          if (v2 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v5 + 72 * v2 + 16) == a2) {
            return *(void *)(a1 + 24) + 72 * v2 + 24;
          }
        }
        LODWORD(v2) = 0x7FFFFFFF;
      }
    }
  }
  return *(void *)(a1 + 24) + 72 * v2 + 24;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::registerScene(re::ecs2::ImageBasedLightReceiverManager *this, unint64_t a2)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  unint64_t v89 = a2;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v4 = (char *)this + 8;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v85 = 0u;
  DWORD1(v87) = 0x7FFFFFFF;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (v5)
  {
    unint64_t v8 = v7 % *((unsigned int *)this + 8);
    uint64_t v9 = *(unsigned int *)(*((void *)this + 2) + 4 * v8);
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *((void *)this + 3);
      if (*(void *)(v10 + 72 * v9 + 16) == a2) {
        goto LABEL_9;
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v10 + 72 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v10 + 72 * v9 + 16) == a2) {
          goto LABEL_9;
        }
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)v4, v8, v7, &v89, (uint64_t)&v85);
  ++*((_DWORD *)this + 12);
LABEL_9:
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v85);
  uint64_t v11 = *((void *)this + 7);
  uint64_t v88 = 0;
  long long v85 = 0u;
  long long v86 = 1uLL;
  long long v87 = 0uLL;
  if (!v11)
  {
    LODWORD(v12) = 0;
    goto LABEL_16;
  }
  unint64_t v12 = v7 % *((unsigned int *)this + 20);
  uint64_t v13 = *(unsigned int *)(*((void *)this + 8) + 4 * v12);
  if (v13 == 0x7FFFFFFF)
  {
LABEL_16:
    re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)this + 56, v12, v7, &v89, (uint64_t)&v85);
    ++*((_DWORD *)this + 24);
    goto LABEL_17;
  }
  uint64_t v14 = *((void *)this + 9);
  while (*(void *)(v14 + 80 * v13 + 16) != a2)
  {
    LODWORD(v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v14 + 80 * v13 + 8) & 0x7FFFFFFF;
    if (v13 == 0x7FFFFFFF) {
      goto LABEL_16;
    }
  }
LABEL_17:
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)&v85);
  float v15 = (_anonymous_namespace_ *)v85;
  if ((void)v85 && (v86 & 1) == 0) {
    float v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v85 + 40))();
  }
  long long v85 = 0uLL;
  LODWORD(v86) = 1;
  long long v87 = 0uLL;
  *((void *)&v86 + objc_destroyWeak(this + 1) = 0;
  LODWORD(v88) = 0;
  float v18 = *(re::EventBus **)(a2 + 288);
  if (!v18)
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track IBL parameter changes.", "eventBus", "registerScene", 271);
    _os_crash();
    __break(1u);
  }
  uint64_t v121 = re::globalAllocators((re *)v16)[2];
  float v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v121 + 32))(v121, 32, 0);
  void *v19 = &unk_26E702548;
  v19[1] = this;
  void v19[2] = re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentDidActivateEventHandler;
  v19[3] = 0;
  char v122 = v19;
  uint64_t v20 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v18, (uint64_t)v120, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v22 = v21;
  float32x4_t v23 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *float32x4_t v23 = v20;
  v23[1] = v22;
  int32x2_t v24 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v120);
  uint64_t v118 = re::globalAllocators(v24)[2];
  float32x4_t v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v118 + 32))(v118, 32, 0);
  *float32x4_t v25 = &unk_26E7025A0;
  v25[1] = this;
  void v25[2] = re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentWillDeactivateEventHandler;
  v25[3] = 0;
  uint64_t v119 = v25;
  uint64_t v26 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v18, (uint64_t)v117, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v28 = v27;
  float32x4_t v29 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *float32x4_t v29 = v26;
  v29[1] = v28;
  float32x4_t v30 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v117);
  uint64_t v115 = re::globalAllocators(v30)[2];
  uint32x4_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v115 + 32))(v115, 32, 0);
  *uint32x4_t v31 = &unk_26E7025F8;
  v31[1] = this;
  void v31[2] = re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentWillDeactivateEventHandlerSceneEntityEvent;
  void v31[3] = 0;
  char v116 = v31;
  uint64_t v32 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v18, (uint64_t)v114, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v34 = v33;
  long long v35 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *long long v35 = v32;
  v35[1] = v34;
  int v36 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v114);
  uint64_t v112 = re::globalAllocators(v36)[2];
  long long v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v112 + 32))(v112, 32, 0);
  *long long v37 = &unk_26E702650;
  v37[1] = this;
  void v37[2] = re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentDidChangeEventHandler;
  v37[3] = 0;
  int v113 = v37;
  uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v18, (uint64_t)v111, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v40 = v39;
  id v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *id v41 = v38;
  v41[1] = v40;
  id v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v111);
  uint64_t v109 = re::globalAllocators(v42)[2];
  uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v109 + 32))(v109, 32, 0);
  *uint64_t v43 = &unk_26E7026A8;
  v43[1] = this;
  float32x4_t v43[2] = re::ecs2::ImageBasedLightReceiverManager::entityAddEventHandler;
  v43[3] = 0;
  uint64_t v110 = v43;
  uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(v18, (uint64_t)v108, 0, 0);
  uint64_t v46 = v45;
  uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *uint64_t v47 = v44;
  v47[1] = v46;
  uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)v108);
  uint64_t v106 = re::globalAllocators(v48)[2];
  uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v106 + 32))(v106, 32, 0);
  *uint64_t v49 = &unk_26E702700;
  v49[1] = this;
  v49[2] = re::ecs2::ImageBasedLightReceiverManager::entityRemoveEventHandler;
  _OWORD v49[3] = 0;
  int v107 = v49;
  uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v18, (uint64_t)v105, 0, 0);
  uint64_t v52 = v51;
  uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *uint64_t v53 = v50;
  v53[1] = v52;
  uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)v105);
  uint64_t v103 = re::globalAllocators(v54)[2];
  uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v103 + 32))(v103, 32, 0);
  *uint64_t v55 = &unk_26E702758;
  v55[1] = this;
  uint64_t v55[2] = re::ecs2::ImageBasedLightReceiverManager::entityReparentEventHandler;
  v55[3] = 0;
  int v104 = v55;
  uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v18, (uint64_t)v102, 0, 0);
  uint64_t v58 = v57;
  uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *uint64_t v59 = v56;
  v59[1] = v58;
  uint64_t v60 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v102);
  uint64_t v100 = re::globalAllocators(v60)[2];
  int v61 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v100 + 32))(v100, 32, 0);
  *int v61 = &unk_26E702548;
  v61[1] = this;
  v61[2] = re::ecs2::ImageBasedLightReceiverManager::iblComponentDidActivateEventHandler;
  v61[3] = 0;
  uint64_t v101 = v61;
  uint64_t v62 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v18, (uint64_t)v99, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v64 = v63;
  uint64_t v65 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *uint64_t v65 = v62;
  v65[1] = v64;
  uint64_t v66 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v99);
  uint64_t v97 = re::globalAllocators(v66)[2];
  uint64_t v67 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v97 + 32))(v97, 32, 0);
  *uint64_t v67 = &unk_26E7025A0;
  v67[1] = this;
  uint64_t v67[2] = re::ecs2::ImageBasedLightReceiverManager::iblComponentWillDeactivateEventHandler;
  v67[3] = 0;
  long long v98 = v67;
  uint64_t v68 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v18, (uint64_t)v96, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v70 = v69;
  int64_t v71 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *int64_t v71 = v68;
  v71[1] = v70;
  unsigned int v72 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v96);
  uint64_t v94 = re::globalAllocators(v72)[2];
  CMTime v73 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v94 + 32))(v94, 32, 0);
  *CMTime v73 = &unk_26E7025F8;
  v73[1] = this;
  v73[2] = re::ecs2::ImageBasedLightReceiverManager::iblComponentWillDeactivateEventHandlerSceneEntityEvent;
  v73[3] = 0;
  int v95 = v73;
  uint64_t v74 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v18, (uint64_t)v93, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v76 = v75;
  uint64_t v77 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *uint64_t v77 = v74;
  v77[1] = v76;
  unint64_t v78 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v93);
  uint64_t v91 = re::globalAllocators(v78)[2];
  uint64_t v79 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v91 + 32))(v91, 32, 0);
  *uint64_t v79 = &unk_26E702650;
  v79[1] = this;
  v79[2] = re::ecs2::ImageBasedLightReceiverManager::iblComponentDidChangeEventHandler;
  v79[3] = 0;
  uint64_t v92 = v79;
  uint64_t v80 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v18, (uint64_t)v90, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v82 = v81;
  uint64_t v83 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *uint64_t v83 = v80;
  v83[1] = v82;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v90);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 104, (uint64_t *)&v89, (uint64_t)&v85);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v85);
  uint64_t result = v85;
  if ((void)v85)
  {
    if ((v86 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v85 + 40))();
    }
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentDidActivateEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, uint64_t a2)
{
  uint64_t v4 = (id *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!re::ecs2::EntityHandle::isNull(v4 + 4)) {
    re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLReceiverComponentCache(a1, v4, (re::ecs2::Entity *)a2);
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentWillDeactivateEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, uint64_t a2)
{
  uint64_t v4 = (re::ecs2::ImageBasedLightReceiverComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = v5;
    uint64_t v5 = *(void *)(v5 + 24);
  }
  while (v5);
  re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, v4, (re::ecs2::Entity *)a2, *(re::ecs2::Scene **)(v6 + 16));
  *((void *)v4 + 7) = 0;
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentWillDeactivateEventHandlerSceneEntityEvent(re::ecs2::ImageBasedLightReceiverManager *a1, uint64_t a2)
{
  uint64_t v4 = (re::ecs2::ImageBasedLightReceiverComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = v5;
    uint64_t v5 = *(void *)(v5 + 24);
  }
  while (v5);
  re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, v4, (re::ecs2::Entity *)a2, *(re::ecs2::Scene **)(v6 + 16));
  *((void *)v4 + 7) = 0;
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentDidChangeEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::entityAddEventHandler(uint64_t a1, unint64_t a2)
{
  unint64_t v22 = a2;
  unint64_t v3 = a2;
  do
  {
    unint64_t v4 = v3;
    unint64_t v3 = *(void *)(v3 + 24);
  }
  while (v3);
  LODWORD(v5) = 0x7FFFFFFF;
  if (*(void *)(a1 + 8))
  {
    unint64_t v6 = *(void *)(v4 + 16);
    unint64_t v7 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(a1 + 32)));
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      if (*(void *)(v9 + 72 * v8 + 16) == v6)
      {
        LODWORD(v5) = v8;
      }
      else
      {
        uint64_t v5 = v8;
        while (1)
        {
          LODWORD(v5) = *(_DWORD *)(v9 + 72 * v5 + 8) & 0x7FFFFFFF;
          if (v5 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v9 + 72 * v5 + 16) == v6) {
            goto LABEL_12;
          }
        }
        LODWORD(v5) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11)
  {
    if ((*(unsigned char *)(v11 + 288) & 0x80) != 0) {
      unint64_t v12 = 0;
    }
    else {
      unint64_t v12 = *(void *)(a2 + 24);
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v13 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v10 + 72 * v5 + 24, v12);
  if (!v13) {
    return 0;
  }
  uint64_t v21 = *v13;
  unint64_t v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v15 = v14 ^ (v14 >> 31);
  if (!*(void *)(v10 + 72 * v5 + 24))
  {
    LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 0;
    goto LABEL_25;
  }
  uint64_t v16 = v10 + 72 * v5;
  unint64_t v17 = v15 % *(unsigned int *)(v16 + 48);
  uint64_t v18 = *(unsigned int *)(*(void *)(v16 + 32) + 4 * v17);
  if (v18 == 0x7FFFFFFF)
  {
LABEL_25:
    re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<re::ecs2::ImageBasedLightReceiverComponent *&>(v10 + 72 * v5 + 24, v17, v15, &v22, &v21);
    ++*(_DWORD *)(v10 + 72 * v5 + 64);
    return 0;
  }
  uint64_t v19 = *(void *)(v10 + 72 * v5 + 40);
  if (*(void *)(v19 + 32 * v18 + 16) != a2)
  {
    while (1)
    {
      uint64_t v18 = *(_DWORD *)(v19 + 32 * v18 + 8) & 0x7FFFFFFF;
      if (v18 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v19 + 32 * v18 + 16) == a2) {
        return 0;
      }
    }
    goto LABEL_25;
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::entityRemoveEventHandler(uint64_t a1, re::ecs2::Entity *a2)
{
  unint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    unint64_t v4 = (re::ecs2::Entity *)*((void *)v4 + 3);
  }
  while (v4);
  LODWORD(v6) = 0x7FFFFFFF;
  if (*(void *)(a1 + 8))
  {
    unint64_t v7 = *((void *)v5 + 2);
    unint64_t v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
    uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(a1 + 32)));
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *(void *)(a1 + 24);
      if (*(void *)(v10 + 72 * v9 + 16) == v7)
      {
        LODWORD(v6) = v9;
      }
      else
      {
        uint64_t v6 = v9;
        while (1)
        {
          LODWORD(v6) = *(_DWORD *)(v10 + 72 * v6 + 8) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v10 + 72 * v6 + 16) == v7) {
            goto LABEL_12;
          }
        }
        LODWORD(v6) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  uint64_t v11 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(*(void *)(a1 + 24) + 72 * v6 + 24, (unint64_t)a2);
  if (v11) {
    re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap((re::ecs2::ImageBasedLightReceiverManager *)a1, a2, *v11, 0);
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::entityReparentEventHandler(uint64_t a1, re::ecs2::Entity *a2, unint64_t *a3)
{
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = v5;
    uint64_t v5 = (re::ecs2::Entity *)*((void *)v5 + 3);
  }
  while (v5);
  LODWORD(v7) = 0x7FFFFFFF;
  if (*(void *)(a1 + 8))
  {
    unint64_t v8 = *((void *)v6 + 2);
    unint64_t v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(a1 + 32)));
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(a1 + 24);
      if (*(void *)(v11 + 72 * v10 + 16) == v8)
      {
        LODWORD(v7) = v10;
      }
      else
      {
        uint64_t v7 = v10;
        while (1)
        {
          LODWORD(v7) = *(_DWORD *)(v11 + 72 * v7 + 8) & 0x7FFFFFFF;
          if (v7 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v11 + 72 * v7 + 16) == v8) {
            goto LABEL_12;
          }
        }
        LODWORD(v7) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  uint64_t v12 = *(void *)(a1 + 24) + 72 * v7 + 24;
  unint64_t v13 = *a3;
  uint64_t v14 = *((void *)a2 + 3);
  if (v14)
  {
    if ((*(unsigned char *)(v14 + 288) & 0x80) != 0) {
      unint64_t v15 = 0;
    }
    else {
      unint64_t v15 = (re::ecs2::ImageBasedLightReceiverComponent *)*((void *)a2 + 3);
    }
    if (!v13) {
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v15 = 0;
    if (!v13) {
      goto LABEL_22;
    }
  }
  uint64_t v16 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v12, v13);
  if (v16)
  {
    unint64_t v17 = *v16;
    if (v15) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
LABEL_22:
  unint64_t v17 = 0;
  if (v15)
  {
LABEL_23:
    uint64_t v18 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v12, (unint64_t)v15);
    if (v18) {
      unint64_t v15 = *v18;
    }
    else {
      unint64_t v15 = 0;
    }
  }
LABEL_26:
  uint64_t v19 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v12, (unint64_t)a2);
  if (v19) {
    uint64_t v20 = *v19;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20 == v17) {
    re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap((re::ecs2::ImageBasedLightReceiverManager *)a1, a2, v17, v15);
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblComponentDidActivateEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, char *a2)
{
  unint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    unint64_t v4 = (char *)*((void *)v4 + 3);
  }
  while (v4);
  uint64_t v6 = *((void *)v5 + 2);
  uint64_t v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v6 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8)
    {
      unint64_t v9 = *(uint64_t **)(v7 + 40);
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v9;
        if (re::ecs2::EntityHandle::resolve((id *)(*v9 + 32), v6) == a2) {
          re::ecs2::ImageBasedLightReceiverManager::processIBLReceiverComponentDidChange(a1, *(re::ecs2::Entity **)(v11 + 16));
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblComponentWillDeactivateEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = *(void *)(v3 + 24);
  }
  while (v3);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v5 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8)
    {
      unint64_t v9 = *(re::ecs2::ImageBasedLightReceiverComponent ***)(v7 + 40);
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v9;
        if (*((void *)*v9 + 7) == v6)
        {
          re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, *v9, *((re::ecs2::Entity **)v11 + 2), (re::ecs2::Scene *)v5);
          *((void *)v11 + 7) = 0;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblComponentWillDeactivateEventHandlerSceneEntityEvent(re::ecs2::ImageBasedLightReceiverManager *a1, char *a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = (char *)*((void *)v4 + 3);
  }
  while (v4);
  uint64_t v6 = *((void *)v5 + 2);
  uint64_t v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v8 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v6 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 24);
    if (v9)
    {
      uint64_t v10 = *(re::ecs2::ImageBasedLightReceiverComponent ***)(v8 + 40);
      uint64_t v11 = 8 * v9;
      do
      {
        uint64_t v12 = *v10;
        if (*((void *)*v10 + 7) == v7)
        {
          re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, *v10, *((re::ecs2::Entity **)v12 + 2), (re::ecs2::Scene *)v6);
          *((void *)v12 + 7) = 0;
        }
        if (re::ecs2::EntityHandle::resolve((id *)v12 + 4, v6) == a2)
        {
          re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, v12, *((re::ecs2::Entity **)v12 + 2), (re::ecs2::Scene *)v6);
          re::ecs2::EntityHandle::reset((re::ecs2::ImageBasedLightReceiverComponent *)((char *)v12 + 32));
          objc_destroyWeak((id *)v12 + 4);
          *((void *)v12 + 4) = 0;
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblComponentDidChangeEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v5 = v4;
  do
  {
    uint64_t v6 = v2;
    uint64_t v2 = *(void *)(v2 + 24);
  }
  while (v2);
  if (*(void *)(v4 + 1304))
  {
    unint64_t v7 = *(void *)(v6 + 16);
    LODWORD(v6) = 0x7FFFFFFF;
    if (*(void *)(a1 + 56))
    {
      unint64_t v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
      uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(a1 + 80)));
      if (v9 != 0x7FFFFFFF)
      {
        uint64_t v10 = *(void *)(a1 + 72);
        if (*(void *)(v10 + 80 * v9 + 16) == v7)
        {
          LODWORD(v6) = v9;
        }
        else
        {
          uint64_t v6 = v9;
          while (1)
          {
            LODWORD(v6) = *(_DWORD *)(v10 + 80 * v6 + 8) & 0x7FFFFFFF;
            if (v6 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v10 + 80 * v6 + 16) == v7) {
              goto LABEL_13;
            }
          }
          LODWORD(v6) = 0x7FFFFFFF;
        }
      }
    }
LABEL_13:
    re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::indexOf((uint64_t)v17, *(void *)(a1 + 72) + 80 * v6 + 24, v4);
    if (!v17[0])
    {
      if (*(void *)(a1 + 56))
      {
        unint64_t v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
        unint64_t v12 = (v11 ^ (v11 >> 31)) % *(unsigned int *)(a1 + 80);
        uint64_t v13 = *(void *)(a1 + 72);
        uint64_t v14 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v12);
        unsigned int v15 = 0x7FFFFFFF;
        if (v14 != 0x7FFFFFFF)
        {
          if (*(void *)(v13 + 80 * v14 + 16) == v7)
          {
LABEL_19:
            unsigned int v15 = v14;
          }
          else
          {
            while (1)
            {
              LODWORD(v14) = *(_DWORD *)(v13 + 80 * v14 + 8) & 0x7FFFFFFF;
              unsigned int v15 = 0x7FFFFFFF;
              if (v14 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v13 + 80 * v14 + 16) == v7) {
                goto LABEL_19;
              }
            }
          }
        }
      }
      else
      {
        uint64_t v13 = *(void *)(a1 + 72);
        unsigned int v15 = 0x7FFFFFFF;
      }
      *(void *)re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::addUninitialized(v13 + 80 * v15 + 24) = v5;
    }
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::unregisterScene(re::ecs2::ImageBasedLightReceiverManager *this, unint64_t a2)
{
  unint64_t v34 = a2;
  unint64_t v4 = a2 ^ (a2 >> 30);
  if (*((void *)this + 1))
  {
    unint64_t v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
    unint64_t v6 = (v5 ^ (v5 >> 31)) % *((unsigned int *)this + 8);
    uint64_t v7 = *((void *)this + 2);
    uint64_t v8 = *(unsigned int *)(v7 + 4 * v6);
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *((void *)this + 3);
      if (*(void *)(v9 + 72 * v8 + 16) == a2)
      {
        *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v9 + 72 * v8 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v12 = *((void *)this + 3);
        uint64_t v13 = v12 + 72 * v8;
        int v16 = *(_DWORD *)(v13 + 8);
        unsigned int v15 = (int *)(v13 + 8);
        int v14 = v16;
        if (v16 < 0)
        {
          *unsigned int v15 = v14 & 0x7FFFFFFF;
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v12 + 72 * v8 + 24));
          uint64_t v12 = *((void *)this + 3);
          int v14 = *(_DWORD *)(v12 + 72 * v8 + 8);
        }
        int v17 = *((_DWORD *)this + 12);
        *(_DWORD *)(v12 + 72 * v8 + 8) = *((_DWORD *)this + 11) | v14 & 0x80000000;
        --*((_DWORD *)this + 9);
        *((_DWORD *)this + 1objc_destroyWeak(this + 1) = v8;
        *((_DWORD *)this + 12) = v17 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v10 = v8;
          int v11 = *(_DWORD *)(v9 + 72 * v8 + 8);
          uint64_t v8 = v11 & 0x7FFFFFFF;
          if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v9 + 72 * v8 + 16) == a2)
          {
            *(_DWORD *)(v9 + 72 * v10 + 8) = *(_DWORD *)(v9 + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 72 * v8 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  if (*((void *)this + 7))
  {
    unint64_t v18 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
    unint64_t v19 = (v18 ^ (v18 >> 31)) % *((unsigned int *)this + 20);
    uint64_t v20 = *((void *)this + 8);
    uint64_t v21 = *(unsigned int *)(v20 + 4 * v19);
    if (v21 != 0x7FFFFFFF)
    {
      uint64_t v22 = *((void *)this + 9);
      if (*(void *)(v22 + 80 * v21 + 16) == a2)
      {
        *(_DWORD *)(v20 + 4 * v19) = *(_DWORD *)(v22 + 80 * v21 + 8) & 0x7FFFFFFF;
LABEL_18:
        re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(*((void *)this + 9) + 80 * v21);
        int v25 = *((_DWORD *)this + 24);
        *(_DWORD *)(*((void *)this + 9) + 80 * v21 + 8) = *(_DWORD *)(*((void *)this + 9) + 80 * v21 + 8) & 0x80000000 | *((_DWORD *)this + 23);
        --*((_DWORD *)this + 21);
        *((_DWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = v21;
        *((_DWORD *)this + 24) = v25 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v23 = v21;
          int v24 = *(_DWORD *)(v22 + 80 * v21 + 8);
          uint64_t v21 = v24 & 0x7FFFFFFF;
          if ((v24 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v22 + 80 * v21 + 16) == a2)
          {
            *(_DWORD *)(v22 + 80 * v23 + 8) = *(_DWORD *)(v22 + 80 * v23 + 8) & 0x80000000 | *(_DWORD *)(v22 + 80 * v21 + 8) & 0x7FFFFFFF;
            goto LABEL_18;
          }
        }
      }
    }
  }
  uint64_t v26 = *(void *)(a2 + 288);
  uint64_t v27 = (char *)this + 104;
  uint64_t v28 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v34);
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)(v28 + 40);
    if (v30)
    {
      for (unint64_t i = 0; i != v30; ++i)
      {
        uint64_t v32 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v29, i);
        re::EventBus::unsubscribe(v26, *(void *)v32, *(void *)(v32 + 8));
      }
    }
  }
  return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v27, (uint64_t *)&v34);
}

void re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLReceiverComponentCache(re::ecs2::ImageBasedLightReceiverManager *this, id *a2, re::ecs2::Entity *a3)
{
  unint64_t v6 = a3;
  do
  {
    uint64_t v7 = v6;
    unint64_t v6 = (re::ecs2::Entity *)*((void *)v6 + 3);
  }
  while (v6);
  uint64_t v8 = (re::ecs2::ImageBasedLightReceiverComponent *)*((void *)v7 + 2);
  if (!a2[7])
  {
    if (ResolvedIBLComponent) {
      re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLComponentCache((uint64_t)this, (re::ecs2::ImageBasedLightComponent *)ResolvedIBLComponent, (re::ecs2::ImageBasedLightReceiverComponent *)a2, v8);
    }
  }
  if (*((unsigned char *)a3 + 288))
  {
    LODWORD(v1objc_initWeak(location, 0) = 0x7FFFFFFF;
    if (*((void *)this + 1))
    {
      unint64_t v11 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)v8 ^ ((unint64_t)v8 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)v8 ^ ((unint64_t)v8 >> 30))) >> 27));
      uint64_t v12 = *(unsigned int *)(*((void *)this + 2) + 4 * ((v11 ^ (v11 >> 31)) % *((unsigned int *)this + 8)));
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v13 = *((void *)this + 3);
        if (*(re::ecs2::ImageBasedLightReceiverComponent **)(v13 + 72 * v12 + 16) == v8)
        {
          LODWORD(v1objc_initWeak(location, 0) = v12;
        }
        else
        {
          uint64_t v10 = v12;
          while (1)
          {
            LODWORD(v1objc_initWeak(location, 0) = *(_DWORD *)(v13 + 72 * v10 + 8) & 0x7FFFFFFF;
            if (v10 == 0x7FFFFFFF) {
              break;
            }
            if (*(re::ecs2::ImageBasedLightReceiverComponent **)(v13 + 72 * v10 + 16) == v8) {
              goto LABEL_16;
            }
          }
          LODWORD(v1objc_initWeak(location, 0) = 0x7FFFFFFF;
        }
      }
    }
LABEL_16:
    unint64_t v14 = *((void *)a3 + 3);
    if (v14
      && (*(unsigned char *)(v14 + 288) & 0x80) == 0
      && (unsigned int v15 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(*((void *)this + 3) + 72 * v10 + 24, v14)) != 0)
    {
      int v16 = *v15;
    }
    else
    {
      int v16 = 0;
    }
    re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap(this, a3, v16, (re::ecs2::ImageBasedLightReceiverComponent *)a2);
  }
}

void re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(re::ecs2::ImageBasedLightReceiverManager *this, re::ecs2::ImageBasedLightReceiverComponent *a2, re::ecs2::Entity *a3, re::ecs2::Scene *a4)
{
  uint64_t v8 = (re::ecs2::ImageBasedLightComponent *)*((void *)a2 + 7);
  if (v8) {
    re::ecs2::ImageBasedLightReceiverManager::removeIBLComponentCache((uint64_t)this, v8, a4);
  }
  LODWORD(v9) = 0x7FFFFFFF;
  if (*((void *)this + 1))
  {
    unint64_t v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) >> 27));
    uint64_t v11 = *(unsigned int *)(*((void *)this + 2) + 4 * ((v10 ^ (v10 >> 31)) % *((unsigned int *)this + 8)));
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = *((void *)this + 3);
      if (*(re::ecs2::Scene **)(v12 + 72 * v11 + 16) == a4)
      {
        LODWORD(v9) = v11;
      }
      else
      {
        uint64_t v9 = v11;
        while (1)
        {
          LODWORD(v9) = *(_DWORD *)(v12 + 72 * v9 + 8) & 0x7FFFFFFF;
          if (v9 == 0x7FFFFFFF) {
            break;
          }
          if (*(re::ecs2::Scene **)(v12 + 72 * v9 + 16) == a4) {
            goto LABEL_12;
          }
        }
        LODWORD(v9) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  unint64_t v13 = *((void *)a3 + 3);
  if (v13
    && (*(unsigned char *)(v13 + 288) & 0x80) == 0
    && (unint64_t v14 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(*((void *)this + 3) + 72 * v9 + 24, v13)) != 0)
  {
    unsigned int v15 = *v14;
  }
  else
  {
    unsigned int v15 = 0;
  }
  re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap(this, a3, a2, v15);
}

void re::ecs2::ImageBasedLightReceiverManager::processIBLReceiverComponentDidChange(re::ecs2::ImageBasedLightReceiverManager *this, re::ecs2::Entity *a2)
{
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  unint64_t v5 = (re::ecs2::ImageBasedLightReceiverComponent *)v4;
  unint64_t v6 = a2;
  do
  {
    uint64_t v7 = v6;
    unint64_t v6 = (re::ecs2::Entity *)*((void *)v6 + 3);
  }
  while (v6);
  uint64_t v8 = (re::ecs2::Scene *)*((void *)v7 + 2);
  BOOL isNull = re::ecs2::EntityHandle::isNull((id *)(v4 + 32));
  uint64_t v11 = *((void *)v5 + 7);
  if (isNull)
  {
    if (v11)
    {
      re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(this, v5, a2, v8);
      *((void *)v5 + 7) = 0;
    }
  }
  else if (v11)
  {
    unint64_t v13 = (re::ecs2::ImageBasedLightComponent *)*((void *)v5 + 7);
    if (ResolvedIBLComponent != (char *)v13)
    {
      unint64_t v14 = (re::ecs2::ImageBasedLightComponent *)ResolvedIBLComponent;
      re::ecs2::ImageBasedLightReceiverManager::removeIBLComponentCache((uint64_t)this, v13, v8);
      if (v14)
      {
        re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLComponentCache((uint64_t)this, v14, v5, v8);
      }
    }
  }
  else
  {
    re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLReceiverComponentCache(this, (id *)v5, a2);
  }
}

void re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap(re::ecs2::ImageBasedLightReceiverManager *this, re::ecs2::Entity *a2, re::ecs2::ImageBasedLightReceiverComponent *a3, re::ecs2::ImageBasedLightReceiverComponent *a4)
{
  uint64_t v48 = a4;
  uint64_t v49 = a2;
  uint64_t v8 = a2;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = (re::ecs2::Entity *)*((void *)v8 + 3);
  }
  while (v8);
  LODWORD(v1objc_initWeak(location, 0) = 0x7FFFFFFF;
  if (*((void *)this + 1))
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v12 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
    uint64_t v13 = *(unsigned int *)(*((void *)this + 2) + 4 * ((v12 ^ (v12 >> 31)) % *((unsigned int *)this + 8)));
    if (v13 != 0x7FFFFFFF)
    {
      uint64_t v14 = *((void *)this + 3);
      if (*(void *)(v14 + 72 * v13 + 16) == v11)
      {
        LODWORD(v1objc_initWeak(location, 0) = v13;
      }
      else
      {
        uint64_t v10 = v13;
        while (1)
        {
          LODWORD(v1objc_initWeak(location, 0) = *(_DWORD *)(v14 + 72 * v10 + 8) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v14 + 72 * v10 + 16) == v11) {
            goto LABEL_12;
          }
        }
        LODWORD(v1objc_initWeak(location, 0) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  uint64_t v15 = *((void *)this + 3);
  unsigned int v16 = v10;
  int v17 = (void *)(v15 + 72 * v10 + 24);
  if (a4)
  {
    unint64_t v18 = (0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27);
    unint64_t v19 = (0x94D049BB133111EBLL * v18) ^ ((0x94D049BB133111EBLL * v18) >> 31);
    if (*v17)
    {
      uint64_t v20 = v15 + 72 * v10;
      unint64_t v21 = v19 % *(unsigned int *)(v20 + 48);
      uint64_t v22 = *(unsigned int *)(*(void *)(v20 + 32) + 4 * v21);
      if (v22 != 0x7FFFFFFF)
      {
        uint64_t v23 = *(void *)(v15 + 72 * v10 + 40);
        if (*(re::ecs2::Entity **)(v23 + 32 * v22 + 16) == a2)
        {
LABEL_18:
          *(void *)(v23 + 32 * v22 + 24) = a4;
LABEL_27:
          ++*(_DWORD *)(v15 + 72 * v16 + 64);
          goto LABEL_28;
        }
        while (1)
        {
          uint64_t v22 = *(_DWORD *)(v23 + 32 * v22 + 8) & 0x7FFFFFFF;
          if (v22 == 0x7FFFFFFF) {
            break;
          }
          if (*(re::ecs2::Entity **)(v23 + 32 * v22 + 16) == a2) {
            goto LABEL_18;
          }
        }
      }
    }
    else
    {
      LODWORD(v2objc_destroyWeak(this + 1) = 0;
    }
    re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<re::ecs2::ImageBasedLightReceiverComponent *&>((uint64_t)v17, v21, v19, &v49, &v48);
    goto LABEL_27;
  }
  if (*v17)
  {
    unint64_t v24 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    uint64_t v25 = v15 + 72 * v10;
    unint64_t v26 = (v24 ^ (v24 >> 31)) % *(unsigned int *)(v25 + 48);
    uint64_t v27 = *(void *)(v25 + 32);
    uint64_t v28 = *(unsigned int *)(v27 + 4 * v26);
    if (v28 != 0x7FFFFFFF)
    {
      uint64_t v29 = v15 + 72 * v16;
      uint64_t v32 = *(void *)(v29 + 40);
      uint64_t v30 = (uint64_t *)(v29 + 40);
      uint64_t v31 = v32;
      uint64_t v33 = v32 + 32 * v28;
      if (*(re::ecs2::Entity **)(v33 + 16) == a2)
      {
        *(_DWORD *)(v27 + 4 * v26) = *(_DWORD *)(v33 + 8) & 0x7FFFFFFF;
LABEL_40:
        uint64_t v42 = *v30;
        uint64_t v43 = *v30 + 32 * v28;
        int v46 = *(_DWORD *)(v43 + 8);
        uint64_t v45 = (int *)(v43 + 8);
        int v44 = v46;
        if (v46 < 0)
        {
          *uint64_t v45 = v44 & 0x7FFFFFFF;
          uint64_t v42 = *v30;
          int v44 = *(_DWORD *)(*v30 + 32 * v28 + 8);
        }
        uint64_t v47 = v15 + 72 * v16;
        *(_DWORD *)(v42 + 32 * v28 + 8) = *(_DWORD *)(v47 + 60) | v44 & 0x80000000;
        *(_DWORD *)(v47 + 6objc_initWeak(location, 0) = v28;
        --*(_DWORD *)(v47 + 52);
        goto LABEL_27;
      }
      while (1)
      {
        unsigned int v34 = v28;
        uint64_t v28 = *(_DWORD *)(v31 + 32 * v28 + 8) & 0x7FFFFFFF;
        if (v28 == 0x7FFFFFFF) {
          break;
        }
        uint64_t v35 = v31 + 32 * v28;
        if (*(re::ecs2::Entity **)(v35 + 16) == a2)
        {
          *(_DWORD *)(v31 + 32 * v34 + 8) = *(_DWORD *)(v31 + 32 * v34 + 8) & 0x80000000 | *(_DWORD *)(v35 + 8) & 0x7FFFFFFF;
          goto LABEL_40;
        }
      }
    }
  }
LABEL_28:
  uint64_t v36 = *((void *)a2 + 41);
  if (v36)
  {
    long long v37 = (unint64_t *)*((void *)a2 + 43);
    uint64_t v38 = 8 * v36;
    do
    {
      unint64_t v39 = *v37;
      if (*v37) {
        id v40 = (id)(v39 + 8);
      }
      id v41 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v17, v39);
      if (!v41 || *v41 == a3) {
        re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap(this, (re::ecs2::Entity *)v39, a3, a4);
      }
      if (v39) {

      }
      ++v37;
      v38 -= 8;
    }
    while (v38);
  }
}

char *anonymous namespace'::getResolvedIBLComponent(id *this, re::ecs2::ImageBasedLightReceiverComponent *a2, const re::ecs2::Scene *a3)
{
  uint64_t result = re::ecs2::EntityHandle::resolve(this + 4, (uint64_t)a2);
  if (result)
  {
    if (result[288]) {
      return (char *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLComponentCache(uint64_t this, re::ecs2::ImageBasedLightComponent *a2, re::ecs2::ImageBasedLightReceiverComponent *a3, re::ecs2::Scene *a4)
{
  if (!*((void *)a2 + 163))
  {
    uint64_t v7 = this;
    LODWORD(v8) = 0x7FFFFFFF;
    if (*(void *)(this + 56))
    {
      unint64_t v9 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                             * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) >> 27));
      uint64_t v10 = *(unsigned int *)(*(void *)(this + 64) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(this + 80)));
      if (v10 != 0x7FFFFFFF)
      {
        uint64_t v11 = *(void *)(this + 72);
        if (*(re::ecs2::Scene **)(v11 + 80 * v10 + 16) == a4)
        {
          LODWORD(v8) = v10;
        }
        else
        {
          uint64_t v8 = v10;
          while (1)
          {
            LODWORD(v8) = *(_DWORD *)(v11 + 80 * v8 + 8) & 0x7FFFFFFF;
            if (v8 == 0x7FFFFFFF) {
              break;
            }
            if (*(re::ecs2::Scene **)(v11 + 80 * v8 + 16) == a4) {
              goto LABEL_11;
            }
          }
          LODWORD(v8) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    this = re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::indexOf((uint64_t)v17, *(void *)(this + 72) + 80 * v8 + 24, (uint64_t)a2);
    if (!v17[0])
    {
      if (*(void *)(v7 + 56))
      {
        unint64_t v12 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) >> 27));
        unint64_t v13 = (v12 ^ (v12 >> 31)) % *(unsigned int *)(v7 + 80);
        uint64_t v14 = *(void *)(v7 + 72);
        uint64_t v15 = *(unsigned int *)(*(void *)(v7 + 64) + 4 * v13);
        unsigned int v16 = 0x7FFFFFFF;
        if (v15 != 0x7FFFFFFF)
        {
          if (*(re::ecs2::Scene **)(v14 + 80 * v15 + 16) == a4)
          {
LABEL_17:
            unsigned int v16 = v15;
          }
          else
          {
            while (1)
            {
              LODWORD(v15) = *(_DWORD *)(v14 + 80 * v15 + 8) & 0x7FFFFFFF;
              unsigned int v16 = 0x7FFFFFFF;
              if (v15 == 0x7FFFFFFF) {
                break;
              }
              if (*(re::ecs2::Scene **)(v14 + 80 * v15 + 16) == a4) {
                goto LABEL_17;
              }
            }
          }
        }
      }
      else
      {
        uint64_t v14 = *(void *)(v7 + 72);
        unsigned int v16 = 0x7FFFFFFF;
      }
      this = re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::addUninitialized(v14 + 80 * v16 + 24);
      *(void *)this = a2;
    }
  }
  ++*((void *)a2 + 163);
  *((void *)a3 + 7) = a2;
  return this;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::removeIBLComponentCache(uint64_t this, re::ecs2::ImageBasedLightComponent *a2, re::ecs2::Scene *a3)
{
  uint64_t v3 = *((void *)a2 + 163) - 1;
  *((void *)a2 + 16re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v3;
  if (!v3)
  {
    uint64_t v6 = this;
    v12[0] = 0;
    re::Optional<re::MaterialParameterBlock>::operator=((unsigned __int8 *)a2 + 152, v12);
    if (v12[0]) {
      (*v13)();
    }
    LODWORD(v7) = 0x7FFFFFFF;
    if (*(void *)(v6 + 56))
    {
      unint64_t v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                             * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
      uint64_t v9 = *(unsigned int *)(*(void *)(v6 + 64) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(v6 + 80)));
      if (v9 != 0x7FFFFFFF)
      {
        uint64_t v10 = *(void *)(v6 + 72);
        if (*(re::ecs2::Scene **)(v10 + 80 * v9 + 16) == a3)
        {
          LODWORD(v7) = v9;
        }
        else
        {
          uint64_t v7 = v9;
          while (1)
          {
            LODWORD(v7) = *(_DWORD *)(v10 + 80 * v7 + 8) & 0x7FFFFFFF;
            if (v7 == 0x7FFFFFFF) {
              break;
            }
            if (*(re::ecs2::Scene **)(v10 + 80 * v7 + 16) == a3) {
              goto LABEL_13;
            }
          }
          LODWORD(v7) = 0x7FFFFFFF;
        }
      }
    }
LABEL_13:
    uint64_t v11 = *(void *)(v6 + 72) + 80 * v7 + 24;
    this = re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::indexOf((uint64_t)v12, v11, (uint64_t)a2);
    if (v12[0]) {
      return re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::removeAt(v11, (unint64_t)v13);
    }
  }
  return this;
}

void re::ecs2::ImageBasedLightReceiverManager::~ImageBasedLightReceiverManager(re::ecs2::ImageBasedLightReceiverManager *this)
{
}

{
  uint64_t vars8;

  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::MaterialParameterBlock::~MaterialParameterBlock(re::MaterialParameterBlock *this)
{
  *(void *)this = &unk_26E7027B0;
  re::MaterialParameterBlock::deinit(this);
  uint64_t v2 = *((void *)this + 124);
  if (v2)
  {

    *((void *)this + 124) = 0;
  }
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 111);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 824);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 760);
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 696);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 632);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 568);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 504);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 440);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 376);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 312);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 248);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 184);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 144);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::TextureHandle>::deinit((uint64_t)this + 64);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::MaterialParameterBlock::~MaterialParameterBlock(this);
  JUMPOUT(0x237DBCBD0);
}

double re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702548;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702548;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7025A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7025A0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7025F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7025F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702650;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702650;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7026A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7026A8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702700;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702700;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702758;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702758;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

double re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    uint64_t v2 = result + 24;
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit(result + 24);
    return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  }
  return result;
}

double re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)uint64_t v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 72;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 72 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + 72 * v9;
  *(_DWORD *)(v25 + 56) = 0;
  *(_OWORD *)(v25 + 4objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v25 + 6objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  uint64_t v27 = *(void *)(v25 + 32);
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = v27;
  uint64_t v28 = *(void *)(v25 + 40);
  *(void *)(v25 + 4objc_initWeak(location, 0) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v28;
  LODWORD(v28) = *(_DWORD *)(v25 + 48);
  *(_DWORD *)(v25 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v28;
  LODWORD(v28) = *(_DWORD *)(v25 + 52);
  *(_DWORD *)(v25 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v28;
  LODWORD(v28) = *(_DWORD *)(v25 + 56);
  *(_DWORD *)(v25 + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v28;
  LODWORD(v28) = *(_DWORD *)(v25 + 60);
  *(_DWORD *)(v25 + 6objc_initWeak(location, 0) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v28;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)int v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        BOOL v14 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 2);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 32 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 32 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 32 * v18 + 16) = *v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v18 + 24) = v14[1];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

uint64_t re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v31, v13, v12);
          long long v15 = *(_OWORD *)v31;
          *(_OWORD *)uint64_t v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v31[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&BOOL v31[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 80;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 80 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 80 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = v25 + 80 * v9;
  *(void *)(v26 + 24) = 0;
  *(void *)(v26 + 32) = 0;
  v26 += 24;
  *(void *)(v26 + 32) = 0;
  *(void *)(v26 + 4objc_initWeak(location, 0) = 0;
  uint64_t v27 = a2;
  *(void *)(v26 + 24) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  *(void *)&v31[24] = 0;
  *(void *)&v31[32] = 0;
  *(_OWORD *)uint64_t v31 = 0uLL;
  *(_DWORD *)(v26 + 16) = 3;
  *(_DWORD *)&BOOL v31[16] = 3;
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v26, a5);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5, (uint64_t)v31);
  uint64_t result = *(void *)v31;
  if (*(void *)v31 && (v31[16] & 1) == 0) {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v31 + 40))();
  }
  uint64_t v29 = v25 + 80 * v9;
  uint64_t v30 = *(void *)(v29 + 64);
  *(void *)(v29 + 64) = *(void *)(a5 + 40);
  *(void *)(a5 + 4objc_initWeak(location, 0) = v30;
  ++*(_DWORD *)(v29 + 72);
  ++*(_DWORD *)(a5 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<re::ecs2::ImageBasedLightReceiverComponent *&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::indexOf(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3)
  {
    unint64_t v4 = 0;
    while (1)
    {
      if (*(void *)(a2 + 8) <= v4 >> 5)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = a2 + 24;
      if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
        uint64_t v5 = *(void *)(a2 + 32);
      }
      if (*(void *)(*(void *)(v5 + 8 * (v4 >> 5)) + 8 * (v4 & 0x1F)) == a3) {
        break;
      }
      if (v3 == ++v4) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  if (v4 == v3)
  {
LABEL_11:
    char v6 = 0;
  }
  else
  {
    *(void *)(result + 8) = v4;
    char v6 = 1;
  }
  *(unsigned char *)uint64_t result = v6;
  return result;
}

uint64_t re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::setBucketsCapacity((void *)a1, (v2 + 32) >> 5);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x1F);
}

void *re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 256, 0);
          char v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          long long v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            long long v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    uint64_t result = (void *)re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

re::ecs2::ShadowPlaneTracking *re::ecs2::ShadowPlaneTracking::ShadowPlaneTracking(re::ecs2::ShadowPlaneTracking *this)
{
  void v5[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = (char *)this + 32;
  *(void *)this = 0;
  *((void *)this + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = 0u;
  *(void *)((char *)this + 132) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1objc_initWeak(location, 0) = 0u;
  *((_DWORD *)this + 44) = 0;
  *(void *)((char *)this + 18objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[3] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 4;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(this, (uint64_t)v4);
  return this;
}

double re::DataArray<re::ecs2::ShadowPlaneInfo>::clear(void *a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  BOOL v11 = a1;
  if (*((_DWORD *)a1 + 10))
  {
    LODWORD(v12) = 0;
    if (!a1[2]) {
      goto LABEL_27;
    }
    unint64_t v3 = a1;
    if (!**(_DWORD **)(a1[4] + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      unint64_t v3 = v11;
    }
  }
  else
  {
    LODWORD(v12) = -1;
    unint64_t v3 = a1;
  }
  BOOL v11 = v3;
  uint64_t v4 = (unsigned __int16)v12;
  if (v3 != a1 || ((unsigned __int16)v12 == 0xFFFFLL ? (BOOL v5 = (v12 & 0xFFFF0000) == 4294901760) : (BOOL v5 = 0), !v5))
  {
    unint64_t v6 = WORD1(v12);
    do
    {
      unint64_t v7 = v3[2];
      if (v7 <= v6) {
        goto LABEL_26;
      }
      re::DataArray<re::ecs2::ShadowPlaneInfo>::destroy((uint64_t)a1, ((unint64_t)(*(_DWORD *)(*(void *)(v3[4] + 16 * v6 + 8) + 4 * v4) & 0xFFFFFF) << 32) | (v6 << 16) | v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      unint64_t v3 = v11;
      uint64_t v4 = (unsigned __int16)v12;
      unint64_t v6 = WORD1(v12);
    }
    while (v11 != a1 || (unsigned __int16)v12 != 0xFFFFLL || WORD1(v12) != 0xFFFFLL);
  }
  unint64_t v8 = a1[2];
  unint64_t v6 = v8 - 1;
  if (v8 != 1)
  {
    unint64_t v7 = 16 * v8 - 16;
    while (v8 > v6)
    {
      unint64_t v9 = (void *)(a1[4] + v7);
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *v9);
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, v9[1]);
      unint64_t v1 = a1[2];
      if (v1 <= v6) {
        goto LABEL_25;
      }
      unint64_t v8 = v1 - 1;
      if (v1 - 1 > v6)
      {
        *(_OWORD *)(a1[4] + vre::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = *(_OWORD *)(a1[4] + 16 * v1 - 16);
        unint64_t v8 = a1[2] - 1;
      }
      a1[2] = v8;
      ++*((_DWORD *)a1 + 6);
      v7 -= 16;
      if (!--v6) {
        goto LABEL_23;
      }
    }
    BOOL v11 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    long long v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 789;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    __int16 v20 = 2048;
    unint64_t v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_25:
    BOOL v11 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    long long v15 = "removeAt";
    __int16 v16 = 1024;
    int v17 = 931;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    __int16 v20 = 2048;
    unint64_t v21 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    uint64_t v13 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    long long v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    __int16 v20 = 2048;
    unint64_t v21 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    uint64_t v13 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    long long v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = 0;
    __int16 v20 = 2048;
    unint64_t v21 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_23:
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

BOOL re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 40 * v3 + 16) == a2) {
    return 1;
  }
  do
  {
    LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v5 + 40 * v3 + 8) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(void *)(v5 + 40 * v3 + 16) != a2);
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 40 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v5 + 40 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 40 * v3 + 16) == a2) {
        return v5 + 40 * v3 + 24;
      }
    }
    return 0;
  }
  return v5 + 40 * v3 + 24;
}

void re::ecs2::ShadowPlaneTracking::invalidatePlanesForSubtree(re::ecs2::ShadowPlaneTracking *this, const re::ecs2::Entity *a2)
{
  if (*((_DWORD *)this + 43))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v56);
    v50[0] = 0;
    v50[1] = 0;
    int v51 = 1;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    int v55 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v50, (uint64_t)v56, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v5objc_initWeak(location, 0) = a2;
    uint64_t v4 = v54;
    if (v54)
    {
      while (1)
      {
        unint64_t v5 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v50, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v50, --v54);
        ++v55;
        uint64_t v6 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 144, v5);
        if (v6) {
          break;
        }
LABEL_41:
        uint64_t v46 = *(void *)(v5 + 328);
        if (v46)
        {
          uint64_t v47 = *(uint64_t **)(v5 + 344);
          uint64_t v48 = 8 * v46;
          do
          {
            uint64_t v49 = *v47++;
            *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v5objc_initWeak(location, 0) = v49;
            v48 -= 8;
          }
          while (v48);
        }
        uint64_t v4 = v54;
        if (!v54) {
          goto LABEL_45;
        }
      }
      uint64_t v7 = v6;
      if ((*(_DWORD *)(v6 + 4) & 0xFFFFFF) == 0) {
        goto LABEL_31;
      }
      unint64_t v8 = re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet((uint64_t)this + 32, *(void *)v6);
      if (!v8) {
        goto LABEL_31;
      }
      int v9 = *(_DWORD *)(v8 + 112);
      if (*(unsigned char *)(v7 + 8)) {
        *(_DWORD *)(v8 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = --v9;
      }
      if (v9)
      {
LABEL_31:
        if (*((void *)this + 18))
        {
          unint64_t v34 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
          unint64_t v35 = (v34 ^ (v34 >> 31)) % *((unsigned int *)this + 42);
          uint64_t v36 = *((void *)this + 19);
          uint64_t v37 = *(unsigned int *)(v36 + 4 * v35);
          if (v37 != 0x7FFFFFFF)
          {
            uint64_t v38 = *((void *)this + 20);
            if (*(void *)(v38 + 40 * v37 + 16) == v5)
            {
              *(_DWORD *)(v36 + 4 * v35) = *(_DWORD *)(v38 + 40 * v37 + 8) & 0x7FFFFFFF;
LABEL_38:
              uint64_t v40 = *((void *)this + 20);
              uint64_t v41 = v40 + 40 * v37;
              int v44 = *(_DWORD *)(v41 + 8);
              uint64_t v43 = (int *)(v41 + 8);
              int v42 = v44;
              if (v44 < 0)
              {
                *uint64_t v43 = v42 & 0x7FFFFFFF;
                uint64_t v40 = *((void *)this + 20);
                int v42 = *(_DWORD *)(v40 + 40 * v37 + 8);
              }
              *(_DWORD *)(v40 + 40 * v37 + 8) = *((_DWORD *)this + 45) | v42 & 0x80000000;
              --*((_DWORD *)this + 43);
              int v45 = *((_DWORD *)this + 46) + 1;
              *((_DWORD *)this + 45) = v37;
              *((_DWORD *)this + 46) = v45;
            }
            else
            {
              while (1)
              {
                uint64_t v39 = v37;
                uint64_t v37 = *(_DWORD *)(v38 + 40 * v37 + 8) & 0x7FFFFFFF;
                if (v37 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v38 + 40 * v37 + 16) == v5)
                {
                  *(_DWORD *)(v38 + 40 * v39 + 8) = *(_DWORD *)(v38 + 40 * v39 + 8) & 0x80000000 | *(_DWORD *)(v38 + 40 * v37 + 8) & 0x7FFFFFFF;
                  goto LABEL_38;
                }
              }
            }
          }
        }
        goto LABEL_41;
      }
      if (*((void *)this + 12))
      {
        unint64_t v10 = 0xBF58476D1CE4E5B9 * (*(void *)v8 ^ (*(void *)v8 >> 30));
        unint64_t v11 = ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31))
            % *((unsigned int *)this + 30);
        uint64_t v12 = *((void *)this + 14);
        uint64_t v13 = *(unsigned int *)(*((void *)this + 13) + 4 * v11);
        if (v13 != 0x7FFFFFFF)
        {
          while (*(void *)(v12 + 72 * v13 + 16) != *(void *)v8)
          {
            uint64_t v13 = *(_DWORD *)(v12 + 72 * v13 + 8) & 0x7FFFFFFF;
            if (v13 == 0x7FFFFFFF) {
              goto LABEL_15;
            }
          }
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v12 = *((void *)this + 14);
      }
LABEL_15:
      LODWORD(v1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0x7FFFFFFF;
LABEL_16:
      uint64_t v14 = v12 + 72 * v13;
      unint64_t v15 = *(void *)v7;
      unint64_t v16 = *(unsigned int *)(v14 + 48);
      if (v16)
      {
        uint64_t v17 = v14 + 24;
        unint64_t v18 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v15 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v15 & 0xFFFFFF)) >> 27));
        unint64_t v19 = (v18 ^ (v18 >> 31)) % v16;
        uint64_t v20 = *(void *)(v17 + 8);
        uint64_t v21 = *(unsigned int *)(v20 + 4 * v19);
        if (v21 != 0x7FFFFFFF)
        {
          uint64_t v22 = *(void *)(v17 + 16);
          uint64_t v23 = 0x7FFFFFFFLL;
          while (1)
          {
            uint64_t v24 = v22 + 24 * v21;
            int v26 = *(unsigned __int16 *)(v24 + 16);
            uint64_t v25 = v24 + 16;
            if (v26 == (unsigned __int16)v15
              && *(unsigned __int16 *)(v25 + 2) == WORD1(v15)
              && ((*(_DWORD *)(v22 + 24 * v21 + 20) ^ HIDWORD(v15)) & 0xFFFFFF) == 0)
            {
              break;
            }
            uint64_t v23 = v21;
            uint64_t v21 = *(_DWORD *)(v22 + 24 * v21 + 8) & 0x7FFFFFFF;
            if (v21 == 0x7FFFFFFF) {
              goto LABEL_30;
            }
          }
          int v27 = *(_DWORD *)(v22 + 24 * v21 + 8) & 0x7FFFFFFF;
          if (v23 == 0x7FFFFFFF) {
            *(_DWORD *)(v20 + 4 * v19) = v27;
          }
          else {
            *(_DWORD *)(v22 + 24 * v23 + 8) = *(_DWORD *)(v22 + 24 * v23 + 8) & 0x80000000 | v27;
          }
          uint64_t v28 = *(void *)(v17 + 16);
          uint64_t v29 = v28 + 24 * v21;
          int v32 = *(_DWORD *)(v29 + 8);
          uint64_t v31 = (int *)(v29 + 8);
          int v30 = v32;
          if (v32 < 0)
          {
            *uint64_t v31 = v30 & 0x7FFFFFFF;
            uint64_t v28 = *(void *)(v17 + 16);
            int v30 = *(_DWORD *)(v28 + 24 * v21 + 8);
          }
          *(_DWORD *)(v28 + 24 * v21 + 8) = *(_DWORD *)(v17 + 36) | v30 & 0x80000000;
          --*(_DWORD *)(v17 + 28);
          int v33 = *(_DWORD *)(v17 + 40) + 1;
          *(_DWORD *)(v17 + 36) = v21;
          *(_DWORD *)(v17 + 4objc_initWeak(location, 0) = v33;
          unint64_t v15 = *(void *)v7;
        }
      }
LABEL_30:
      re::DataArray<re::ecs2::ShadowPlaneInfo>::destroy((uint64_t)this + 32, v15);
      goto LABEL_31;
    }
LABEL_45:
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v50);
    if (v50[0])
    {
      if ((v51 & 1) == 0) {
        (*(void (**)(void))(*(void *)v50[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v56);
  }
}

unint64_t re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (unsigned int v3 = *(_DWORD *)(a1 + 44)) : (unsigned int v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((uint64_t v4 = *(void *)(a1 + 32),
          (int v5 = *(_DWORD *)(*(void *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (BOOL v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (BOOL v6 = 0),
         v6)))
  {
    return *(void *)(v4 + 16 * WORD1(a2)) + ((unint64_t)(unsigned __int16)a2 << 7);
  }
  else
  {
    return 0;
  }
}

void re::DataArray<re::ecs2::ShadowPlaneInfo>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (v5)
  {
    BOOL v6 = (_DWORD *)v5;
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v5 + 64));
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    _DWORD *v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
}

void re::ecs2::ProjectiveShadowClusterTracking::removeFromCluster(re::ecs2::ProjectiveShadowClusterTracking *this, const re::ecs2::Entity *a2)
{
  unint64_t v4 = (void *)((char *)this + 112);
  uint64_t v5 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 112, (unint64_t)a2);
  if (v5)
  {
    BOOL v6 = (uint64_t *)v5;
    unint64_t v7 = re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    uint64_t v8 = re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::get((uint64_t)this, *v6);
    if (*(void *)(v8 + 32))
    {
      unint64_t v9 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
      unint64_t v10 = (v9 ^ (v9 >> 31)) % *(unsigned int *)(v8 + 56);
      uint64_t v11 = *(void *)(v8 + 40);
      uint64_t v12 = *(unsigned int *)(v11 + 4 * v10);
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v13 = *(void *)(v8 + 48);
        if (*(void *)(v13 + 48 * v12 + 16) == v7)
        {
          *(_DWORD *)(v11 + 4 * v1objc_initWeak(location, 0) = *(_DWORD *)(v13 + 48 * v12 + 8) & 0x7FFFFFFF;
LABEL_9:
          uint64_t v15 = *(void *)(v8 + 48);
          uint64_t v16 = v15 + 48 * v12;
          int v19 = *(_DWORD *)(v16 + 8);
          unint64_t v18 = (int *)(v16 + 8);
          int v17 = v19;
          if (v19 < 0)
          {
            *unint64_t v18 = v17 & 0x7FFFFFFF;
            uint64_t v15 = *(void *)(v8 + 48);
            int v17 = *(_DWORD *)(v15 + 48 * v12 + 8);
          }
          int v20 = *(_DWORD *)(v8 + 72);
          *(_DWORD *)(v15 + 48 * v12 + 8) = *(_DWORD *)(v8 + 68) | v17 & 0x80000000;
          --*(_DWORD *)(v8 + 60);
          *(_DWORD *)(v8 + 68) = v12;
          *(_DWORD *)(v8 + 72) = v20 + 1;
        }
        else
        {
          while (1)
          {
            unsigned int v14 = v12;
            LODWORD(v12) = *(_DWORD *)(v13 + 48 * v12 + 8) & 0x7FFFFFFF;
            if (v12 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v13 + 48 * v12 + 16) == v7)
            {
              *(_DWORD *)(v13 + 48 * v14 + 8) = *(_DWORD *)(v13 + 48 * v14 + 8) & 0x80000000 | *(_DWORD *)(v13 + 48 * v12 + 8) & 0x7FFFFFFF;
              goto LABEL_9;
            }
          }
        }
      }
    }
    if (*v4)
    {
      unint64_t v21 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
      unint64_t v22 = (v21 ^ (v21 >> 31)) % *((unsigned int *)this + 34);
      uint64_t v23 = *((void *)this + 15);
      uint64_t v24 = *(unsigned int *)(v23 + 4 * v22);
      if (v24 != 0x7FFFFFFF)
      {
        uint64_t v25 = *((void *)this + 16);
        uint64_t v26 = v25 + 32 * v24;
        if (*(const re::ecs2::Entity **)(v26 + 16) == a2)
        {
          *(_DWORD *)(v23 + 4 * v22) = *(_DWORD *)(v26 + 8) & 0x7FFFFFFF;
LABEL_19:
          uint64_t v29 = *((void *)this + 16);
          uint64_t v30 = v29 + 32 * v24;
          int v33 = *(_DWORD *)(v30 + 8);
          int v32 = (int *)(v30 + 8);
          int v31 = v33;
          if (v33 < 0)
          {
            *int v32 = v31 & 0x7FFFFFFF;
            uint64_t v29 = *((void *)this + 16);
            int v31 = *(_DWORD *)(v29 + 32 * v24 + 8);
          }
          int v34 = *((_DWORD *)this + 38);
          *(_DWORD *)(v29 + 32 * v24 + 8) = *((_DWORD *)this + 37) | v31 & 0x80000000;
          --*((_DWORD *)this + 35);
          *((_DWORD *)this + 3re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = v24;
          *((_DWORD *)this + 38) = v34 + 1;
        }
        else
        {
          while (1)
          {
            unsigned int v27 = v24;
            uint64_t v24 = *(_DWORD *)(v25 + 32 * v24 + 8) & 0x7FFFFFFF;
            if (v24 == 0x7FFFFFFF) {
              break;
            }
            uint64_t v28 = v25 + 32 * v24;
            if (*(const re::ecs2::Entity **)(v28 + 16) == a2)
            {
              *(_DWORD *)(v25 + 32 * v27 + 8) = *(_DWORD *)(v25 + 32 * v27 + 8) & 0x80000000 | *(_DWORD *)(v28 + 8) & 0x7FFFFFFF;
              goto LABEL_19;
            }
          }
        }
      }
    }
    if (!*(_DWORD *)(v8 + 60))
    {
      LODWORD(v35) = 0x7FFFFFFF;
      if (*((void *)this + 20))
      {
        uint64_t v36 = *(void *)v8;
        unint64_t v37 = 0xBF58476D1CE4E5B9 * (*(void *)v8 ^ (*(void *)v8 >> 30));
        uint64_t v38 = *(unsigned int *)(*((void *)this + 21)
                              + 4
                              * (((0x94D049BB133111EBLL * (v37 ^ (v37 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                 * (v37 ^ (v37 >> 27))) >> 31))
                               % *((unsigned int *)this + 46)));
        if (v38 != 0x7FFFFFFF)
        {
          uint64_t v39 = *((void *)this + 22);
          LODWORD(v35) = v38;
          if (*(void *)(v39 + 72 * v38 + 16) != v36)
          {
            uint64_t v35 = v38;
            while (1)
            {
              LODWORD(v35) = *(_DWORD *)(v39 + 72 * v35 + 8) & 0x7FFFFFFF;
              if (v35 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v39 + 72 * v35 + 16) == v36) {
                goto LABEL_32;
              }
            }
            LODWORD(v35) = 0x7FFFFFFF;
          }
        }
      }
LABEL_32:
      uint64_t v40 = *((void *)this + 22) + 72 * v35;
      unint64_t v41 = *(unsigned int *)(v40 + 48);
      if (v41)
      {
        uint64_t v42 = v40 + 24;
        unint64_t v43 = *v6;
        unint64_t v44 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (*v6 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (*v6 & 0xFFFFFF)) >> 27));
        unint64_t v45 = (v44 ^ (v44 >> 31)) % v41;
        uint64_t v46 = *(void *)(v42 + 8);
        uint64_t v47 = *(unsigned int *)(v46 + 4 * v45);
        if (v47 != 0x7FFFFFFF)
        {
          unint64_t v48 = HIDWORD(v43);
          uint64_t v49 = *(void *)(v42 + 16);
          int v50 = WORD1(v43);
          uint64_t v51 = 0x7FFFFFFFLL;
          while (1)
          {
            uint64_t v52 = v49 + 24 * v47;
            int v54 = *(unsigned __int16 *)(v52 + 16);
            uint64_t v53 = v52 + 16;
            if (v54 == (unsigned __int16)*v6
              && *(unsigned __int16 *)(v53 + 2) == v50
              && ((*(_DWORD *)(v49 + 24 * v47 + 20) ^ v48) & 0xFFFFFF) == 0)
            {
              break;
            }
            uint64_t v51 = v47;
            uint64_t v47 = *(_DWORD *)(v49 + 24 * v47 + 8) & 0x7FFFFFFF;
            if (v47 == 0x7FFFFFFF) {
              goto LABEL_46;
            }
          }
          int v55 = *(_DWORD *)(v49 + 24 * v47 + 8) & 0x7FFFFFFF;
          if (v51 == 0x7FFFFFFF) {
            *(_DWORD *)(v46 + 4 * v45) = v55;
          }
          else {
            *(_DWORD *)(v49 + 24 * v51 + 8) = *(_DWORD *)(v49 + 24 * v51 + 8) & 0x80000000 | v55;
          }
          uint64_t v56 = *(void *)(v42 + 16);
          uint64_t v57 = v56 + 24 * v47;
          int v60 = *(_DWORD *)(v57 + 8);
          uint64_t v59 = (int *)(v57 + 8);
          int v58 = v60;
          if (v60 < 0)
          {
            *uint64_t v59 = v58 & 0x7FFFFFFF;
            uint64_t v56 = *(void *)(v42 + 16);
            int v58 = *(_DWORD *)(v56 + 24 * v47 + 8);
          }
          int v61 = *(_DWORD *)(v42 + 40);
          *(_DWORD *)(v56 + 24 * v47 + 8) = *(_DWORD *)(v42 + 36) | v58 & 0x80000000;
          --*(_DWORD *)(v42 + 28);
          *(_DWORD *)(v42 + 36) = v47;
          *(_DWORD *)(v42 + 4objc_initWeak(location, 0) = v61 + 1;
        }
      }
LABEL_46:
      unint64_t v62 = *(void *)(v8 + 8);
      if (v62)
      {
        uint64_t v63 = 0x7FFFFFFFLL;
        if (*((void *)this + 8))
        {
          unint64_t v64 = *(void *)(v8 + 16);
          unint64_t v65 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v64 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v64 & 0xFFFFFF)) >> 27));
          uint64_t v66 = *(unsigned int *)(*((void *)this + 9) + 4 * ((v65 ^ (v65 >> 31)) % *((unsigned int *)this + 22)));
          if (v66 != 0x7FFFFFFF)
          {
            uint64_t v67 = *((void *)this + 10);
            unint64_t v68 = HIDWORD(v64);
            int v69 = WORD1(v64);
            uint64_t v63 = 0x7FFFFFFFLL;
            while (1)
            {
              uint64_t v70 = v67 + 72 * v66;
              int v72 = *(unsigned __int16 *)(v70 + 16);
              uint64_t v71 = v70 + 16;
              if (v72 == (unsigned __int16)*(void *)(v8 + 16)
                && *(unsigned __int16 *)(v71 + 2) == v69
                && ((*(_DWORD *)(v67 + 72 * v66 + 20) ^ v68) & 0xFFFFFF) == 0)
              {
                break;
              }
              uint64_t v66 = *(_DWORD *)(v67 + 72 * v66 + 8) & 0x7FFFFFFF;
              if (v66 == 0x7FFFFFFF) {
                goto LABEL_56;
              }
            }
            uint64_t v63 = v66;
          }
        }
LABEL_56:
        uint64_t v73 = *((void *)this + 10);
        if (*(void *)(v73 + 72 * v63 + 24))
        {
          unint64_t v74 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v62 ^ (v62 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v62 ^ (v62 >> 30))) >> 27));
          uint64_t v75 = v73 + 72 * v63;
          unint64_t v76 = (v74 ^ (v74 >> 31)) % *(unsigned int *)(v75 + 48);
          uint64_t v77 = *(void *)(v75 + 32);
          uint64_t v78 = *(unsigned int *)(v77 + 4 * v76);
          if (v78 != 0x7FFFFFFF)
          {
            uint64_t v79 = v73 + 72 * v63;
            uint64_t v82 = *(void *)(v79 + 40);
            uint64_t v80 = (uint64_t *)(v79 + 40);
            uint64_t v81 = v82;
            uint64_t v83 = v82 + 32 * v78;
            if (*(void *)(v83 + 16) == v62)
            {
              *(_DWORD *)(v77 + 4 * v76) = *(_DWORD *)(v83 + 8) & 0x7FFFFFFF;
LABEL_63:
              uint64_t v86 = *v80;
              uint64_t v87 = *v80 + 32 * v78;
              int v90 = *(_DWORD *)(v87 + 8);
              unint64_t v89 = (int *)(v87 + 8);
              int v88 = v90;
              if (v90 < 0)
              {
                int *v89 = v88 & 0x7FFFFFFF;
                uint64_t v86 = *v80;
                int v88 = *(_DWORD *)(*v80 + 32 * v78 + 8);
              }
              uint64_t v91 = (_DWORD *)(v73 + 72 * v63);
              unsigned int v92 = v88 & 0x80000000;
              int v93 = v91[16];
              *(_DWORD *)(v86 + 32 * v78 + 8) = v91[15] | v92;
              --v91[13];
              v91[15] = v78;
              v91[16] = v93 + 1;
            }
            else
            {
              while (1)
              {
                unsigned int v84 = v78;
                uint64_t v78 = *(_DWORD *)(v81 + 32 * v78 + 8) & 0x7FFFFFFF;
                if (v78 == 0x7FFFFFFF) {
                  break;
                }
                uint64_t v85 = v81 + 32 * v78;
                if (*(void *)(v85 + 16) == v62)
                {
                  *(_DWORD *)(v81 + 32 * v84 + 8) = *(_DWORD *)(v81 + 32 * v84 + 8) & 0x80000000 | *(_DWORD *)(v85 + 8) & 0x7FFFFFFF;
                  goto LABEL_63;
                }
              }
            }
          }
        }
      }
      uint64_t v94 = *v6;
      re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::destroy((uint64_t)this, v94);
    }
  }
}

void re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::destroy(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = WORD1(a2);
  unint64_t v3 = *(void *)(a1 + 16);
  if (WORD1(a2) < v3)
  {
    int v4 = a2;
    unsigned int v6 = (unsigned __int16)(v3 - 1) == WORD1(a2) ? *(_DWORD *)(a1 + 48) : *(_DWORD *)(a1 + 44);
    if ((unsigned __int16)a2 < v6)
    {
      uint64_t v7 = (unsigned __int16)a2;
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(_DWORD *)(*(void *)(v8 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2);
      if (v9 && v9 == (HIDWORD(a2) & 0xFFFFFF))
      {
        uint64_t v11 = *(void *)(v8 + 16 * WORD1(a2));
        if (v11)
        {
          _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)(v11 + 80 * (unsigned __int16)a2 + 32));
          if (*(void *)(a1 + 16) <= v2)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * v2 + 8) + 4 * vre::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = 0;
          *(_DWORD *)(v11 + 80 * vre::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(a1 + 52);
          *(_DWORD *)(a1 + 52) = v4;
          --*(_DWORD *)(a1 + 40);
        }
      }
    }
  }
}

void re::HashTable<re::ecs2::Entity const*,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addNew<re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>&>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      if (*(void *)(v15 + 32 * v10 + 16) == v6) {
        return;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v15 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v15 + 32 * v10 + 16) == v6) {
          return;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 32 * v1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v8;
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 16) = v6;
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::ProjectiveShadowReceiverManager::setShadowAnchorPrioritization(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 32) != a2)
  {
    *(_DWORD *)(a1 + 32) = a2;
    if (*(_DWORD *)(a1 + 180))
    {
      uint64_t v3 = *(unsigned int *)(a1 + 176);
      if (v3) {
        memset_pattern16(*(void **)(a1 + 160), &unk_2343655D0, 4 * v3);
      }
      uint64_t v4 = *(unsigned int *)(a1 + 184);
      if (v4)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 40 * v4;
        do
        {
          uint64_t v7 = *(void *)(a1 + 168) + v5;
          int v8 = *(_DWORD *)(v7 + 8);
          if (v8 < 0) {
            *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          }
          v5 += 40;
        }
        while (v6 != v5);
      }
      *(_DWORD *)(a1 + 18objc_initWeak(location, 0) = 0;
      *(_DWORD *)(a1 + 184) = 0;
      int v9 = *(_DWORD *)(a1 + 192) + 1;
      *(_DWORD *)(a1 + 188) = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 192) = v9;
    }
    re::DataArray<re::ecs2::ShadowPlaneInfo>::clear((void *)(a1 + 40));
    if (*(_DWORD *)(a1 + 132))
    {
      uint64_t v10 = *(unsigned int *)(a1 + 128);
      if (v10) {
        memset_pattern16(*(void **)(a1 + 112), &unk_2343655D0, 4 * v10);
      }
      unint64_t v11 = *(unsigned int *)(a1 + 136);
      if (v11)
      {
        uint64_t v12 = 0;
        for (unint64_t i = 0; i < v11; ++i)
        {
          uint64_t v14 = *(void *)(a1 + 120) + v12;
          int v15 = *(_DWORD *)(v14 + 8);
          if (v15 < 0)
          {
            *(_DWORD *)(v14 + 8) = v15 & 0x7FFFFFFF;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v14 + 24));
            unint64_t v11 = *(unsigned int *)(a1 + 136);
          }
          v12 += 72;
        }
      }
      *(_DWORD *)(a1 + 132) = 0;
      *(_DWORD *)(a1 + 136) = 0;
      int v16 = *(_DWORD *)(a1 + 144) + 1;
      *(_DWORD *)(a1 + 14objc_initWeak(location, 0) = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 144) = v16;
    }
    uint64_t v17 = *(unsigned int *)(a1 + 440);
    if (v17)
    {
      uint64_t v18 = 0;
      int v19 = (int *)(*(void *)(a1 + 424) + 8);
      while (1)
      {
        int v20 = *v19;
        v19 += 30;
        if (v20 < 0) {
          break;
        }
        if (v17 == ++v18)
        {
          LODWORD(v18) = *(_DWORD *)(a1 + 440);
          break;
        }
      }
    }
    else
    {
      LODWORD(v18) = 0;
    }
    if (v17 != v18)
    {
      uint64_t v21 = v18;
      unsigned int v22 = *(_DWORD *)(a1 + 440);
      do
      {
        uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 424) + 120 * v21 + 16) + 104);
        uint64_t v24 = *(void *)(v23 + 328);
        if (v24)
        {
          uint64_t v25 = *(const re::ecs2::Entity ***)(v23 + 344);
          uint64_t v26 = 8 * v24;
          do
          {
            unsigned int v27 = *v25++;
            re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane((re::ecs2::ProjectiveShadowReceiverManager *)a1, v27);
            v26 -= 8;
          }
          while (v26);
          unsigned int v22 = *(_DWORD *)(a1 + 440);
        }
        if (v22 <= (int)v18 + 1) {
          unsigned int v28 = v18 + 1;
        }
        else {
          unsigned int v28 = v22;
        }
        while (1)
        {
          uint64_t v21 = (v18 + 1);
          if (v28 - 1 == v18) {
            break;
          }
          LODWORD(v18) = v18 + 1;
          unsigned int v29 = v21;
          if ((*(_DWORD *)(*(void *)(a1 + 424) + 120 * v21 + 8) & 0x80000000) != 0) {
            goto LABEL_39;
          }
        }
        unsigned int v29 = v28;
LABEL_39:
        LODWORD(v18) = v29;
      }
      while (v17 != v29);
    }
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(re::ecs2::ProjectiveShadowReceiverManager *this, const re::ecs2::Entity *a2)
{
  uint64_t v7 = a2;
  if ((*((unsigned char *)a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)this + 504, (uint64_t *)&v7))
  {
    uint64_t v3 = v7;
    if (re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)this + 152, (unint64_t)v7))
    {
      re::ecs2::ProjectiveShadowReceiverManager::markReceiversInSubtreeDirty(this, v3);
      re::ecs2::ShadowPlaneTracking::invalidatePlanesForSubtree((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 8), v7);
      uint64_t v3 = v7;
    }
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = (re::ecs2::Entity *)*((void *)v3 + 3);
    }
    while (v3);
    unint64_t v5 = *((void *)v4 + 2);
    if (v5)
    {
      uint64_t v6 = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 408, v5);
      if (v6) {
        re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v6 + 48, (uint64_t *)&v7);
      }
    }
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::updateProjectiveShadowReceiversState(re::ecs2::ProjectiveShadowReceiverManager *this, const re::ecs2::WorldRootProvider *a2)
{
  uint64_t v325 = *MEMORY[0x263EF8340];
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear((uint64_t)this + 504);
  uint64_t v4 = this;
  uint64_t v5 = *((unsigned int *)this + 122);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (int *)(*((void *)v4 + 59) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 6;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = v5;
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  unsigned int v9 = v5;
  long long v291 = v4;
  if (v5 != v6)
  {
    uint64_t v10 = v6;
    do
    {
      unint64_t v11 = (id *)(*((void *)v4 + 59) + 24 * v10 + 16);
      to.n128_u64[0] = 0;
      objc_copyWeak((id *)&to, v11);
      id WeakRetained = (char *)objc_loadWeakRetained((id *)&to);
      if (WeakRetained)
      {
        uint64_t v14 = WeakRetained;
        re::ecs2::ProjectiveShadowReceiverManager::automaticallyRemoveReceiver((re::ecs2::ProjectiveShadowReceiverManager *)(WeakRetained - 8), v13);
      }
      objc_destroyWeak((id *)&to);
      unsigned int v9 = *((_DWORD *)v291 + 122);
      if (v9 <= (int)v6 + 1) {
        int v15 = v6 + 1;
      }
      else {
        int v15 = *((_DWORD *)v291 + 122);
      }
      while (1)
      {
        uint64_t v10 = (v6 + 1);
        if (v15 - 1 == v6) {
          break;
        }
        LODWORD(v6) = v6 + 1;
        int v16 = v10;
        if ((*(_DWORD *)(*((void *)v291 + 59) + 24 * v10 + 8) & 0x80000000) != 0) {
          goto LABEL_18;
        }
      }
      int v16 = v15;
LABEL_18:
      LODWORD(v6) = v16;
      uint64_t v4 = v291;
    }
    while (v5 != v16);
  }
  if (*((_DWORD *)v4 + 121))
  {
    uint64_t v17 = *((unsigned int *)v4 + 120);
    if (v17)
    {
      memset_pattern16(*((void **)v4 + 58), &unk_2343655D0, 4 * v17);
      uint64_t v4 = v291;
      unsigned int v9 = *((_DWORD *)v291 + 122);
    }
    uint64_t v18 = (void *)((char *)v4 + 484);
    if (v9)
    {
      uint64_t v19 = 0;
      for (unint64_t i = 0; i < v9; ++i)
      {
        uint64_t v21 = *((void *)v4 + 59) + v19;
        int v22 = *(_DWORD *)(v21 + 8);
        if (v22 < 0)
        {
          *(_DWORD *)(v21 + 8) = v22 & 0x7FFFFFFF;
          objc_destroyWeak((id *)(v21 + 16));
          uint64_t v4 = v291;
          *(void *)(v21 + 16) = 0;
          unsigned int v9 = *((_DWORD *)v291 + 122);
        }
        v19 += 24;
      }
    }
    *((_DWORD *)v4 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = 0x7FFFFFFF;
    *uint64_t v18 = 0;
    ++*((_DWORD *)v4 + 124);
  }
  uint64_t v23 = *((unsigned int *)v4 + 110);
  if (v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = (int *)(*((void *)v4 + 53) + 8);
    while (1)
    {
      int v26 = *v25;
      v25 += 30;
      if (v26 < 0) {
        break;
      }
      if (v23 == ++v24)
      {
        LODWORD(v24) = *((_DWORD *)v4 + 110);
        break;
      }
    }
  }
  else
  {
    LODWORD(v24) = 0;
  }
  if (v23 != v24)
  {
    uint64_t v27 = v24;
    long long v285 = (unint64_t *)((char *)v4 + 152);
    long long v290 = (void *)((char *)v4 + 40);
    uint64_t v282 = (void *)((char *)v4 + 104);
    uint64_t v279 = (uint64_t)v4 + 312;
    int v274 = *((_DWORD *)v4 + 110);
    v275 = (void *)((char *)v4 + 264);
    v273 = (void *)((char *)v4 + 360);
    uint64_t v276 = (void *)((char *)v4 + 200);
    while (1)
    {
      uint64_t v28 = *((void *)v4 + 53) + 120 * v27;
      uint64_t v29 = v28 + 72;
      uint64_t v278 = v28;
      uint64_t v30 = *(unsigned int *)(v28 + 104);
      if (v30)
      {
        uint64_t v31 = 0;
        int v32 = (int *)(*(void *)(v28 + 88) + 8);
        while (1)
        {
          int v33 = *v32;
          v32 += 6;
          if (v33 < 0) {
            break;
          }
          if (v30 == ++v31)
          {
            LODWORD(v3re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v30;
            break;
          }
        }
      }
      else
      {
        LODWORD(v3re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
      }
      int v277 = v24;
      if (v30 != v31) {
        break;
      }
LABEL_43:
      uint64_t v34 = v278 + 24;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v29);
      uint64_t v35 = *(unsigned int *)(v278 + 56);
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = (int *)(*(void *)(v278 + 40) + 8);
        while (1)
        {
          int v38 = *v37;
          v37 += 6;
          if (v38 < 0) {
            break;
          }
          if (v35 == ++v36)
          {
            LODWORD(v36) = *(_DWORD *)(v278 + 56);
            break;
          }
        }
      }
      else
      {
        LODWORD(v36) = 0;
      }
      if (v35 != v36)
      {
        uint64_t v170 = v36;
        uint64_t v171 = *(void *)(v278 + 40);
        unsigned int v172 = *(_DWORD *)(v278 + 56);
        unsigned int v289 = v172;
        while (1)
        {
          unint64_t v173 = *(void *)(v171 + 24 * v170 + 16);
          if (*(unsigned char *)(v173 + 288)) {
            break;
          }
LABEL_316:
          if (v172 <= (int)v36 + 1) {
            unsigned int v271 = v36 + 1;
          }
          else {
            unsigned int v271 = v172;
          }
          while (1)
          {
            uint64_t v170 = (v36 + 1);
            if (v271 - 1 == v36) {
              break;
            }
            LODWORD(v36) = v36 + 1;
            unsigned int v272 = v170;
            if ((*(_DWORD *)(v171 + 24 * v170 + 8) & 0x80000000) != 0) {
              goto LABEL_323;
            }
          }
          unsigned int v272 = v271;
LABEL_323:
          LODWORD(v36) = v272;
          if (v35 == v272) {
            goto LABEL_201;
          }
        }
        uint64_t v174 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v173 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (!v174) {
          goto LABEL_315;
        }
        unint64_t v175 = v174;
        uint64_t v176 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v285, v173);
        if (!v176) {
          goto LABEL_315;
        }
        uint64_t v177 = v176;
        uint64_t v178 = *v176;
        unint64_t v179 = re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet((uint64_t)v290, *v176);
        if (!v179) {
          goto LABEL_315;
        }
        unint64_t v180 = v179;
        unint64_t v181 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v175 ^ (v175 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v175 ^ (v175 >> 30))) >> 27));
        unint64_t v182 = v181 ^ (v181 >> 31);
        unint64_t v183 = *(unsigned int *)(v179 + 88);
        if (v183)
        {
          unint64_t v184 = v182 % v183;
          uint64_t v185 = *(unsigned int *)(*(void *)(v179 + 72) + 4 * (v182 % v183));
          if (v185 != 0x7FFFFFFF)
          {
            uint64_t v186 = *(void *)(v179 + 80);
            while (*(void *)(v186 + 24 * v185 + 16) != v175)
            {
              LODWORD(v185) = *(_DWORD *)(v186 + 24 * v185 + 8) & 0x7FFFFFFF;
              if (v185 == 0x7FFFFFFF) {
                goto LABEL_222;
              }
            }
LABEL_228:
            unint64_t v192 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v173 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            uint64_t v193 = *(void *)(v173 + 224);
            if (v193 && !*(void *)(v193 + 64)) {
              goto LABEL_315;
            }
            uint64_t v295 = v178;
            *(void *)v315 = v173;
            long long v194 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v279, v173);
            if (v194) {
              goto LABEL_302;
            }
            long long v311 = 0u;
            long long v312 = 0u;
            __n128 to = 0u;
            DWORD1(v312) = 0x7FFFFFFF;
            unint64_t v195 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v178 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v178 & 0xFFFFFF)) >> 27));
            unint64_t v196 = v195 ^ (v195 >> 31);
            if (*v275)
            {
              unint64_t v197 = v196 % *((unsigned int *)v291 + 72);
              uint64_t v198 = *(unsigned int *)(*((void *)v291 + 34) + 4 * v197);
              if (v198 != 0x7FFFFFFF)
              {
                uint64_t v199 = *((void *)v291 + 35);
                while (1)
                {
                  uint64_t v200 = v199 + 72 * v198;
                  int v202 = *(unsigned __int16 *)(v200 + 16);
                  uint64_t v201 = v200 + 16;
                  if (v202 == (unsigned __int16)v178
                    && *(unsigned __int16 *)(v201 + 2) == WORD1(v178)
                    && ((*(_DWORD *)(v199 + 72 * v198 + 20) ^ HIDWORD(v178)) & 0xFFFFFF) == 0)
                  {
                    break;
                  }
                  uint64_t v198 = *(_DWORD *)(v199 + 72 * v198 + 8) & 0x7FFFFFFF;
                  if (v198 == 0x7FFFFFFF) {
                    goto LABEL_240;
                  }
                }
                uint64_t v204 = v199 + 72 * v198;
LABEL_241:
                uint64_t v205 = v204 + 24;
                v206.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&to);
                if (v193)
                {
                  unint64_t v207 = *(void *)(v193 + 64);
                  if (*(void *)v205)
                  {
                    unint64_t v208 = 0x94D049BB133111EBLL
                         * ((0xBF58476D1CE4E5B9 * (v207 ^ (v207 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                             * (v207 ^ (v207 >> 30))) >> 27));
                    uint64_t v209 = *(unsigned int *)(*(void *)(v205 + 8)
                                           + 4 * ((v208 ^ (v208 >> 31)) % *(unsigned int *)(v205 + 24)));
                    if (v209 != 0x7FFFFFFF)
                    {
                      uint64_t v210 = *(void *)(v205 + 16);
                      while (*(void *)(v210 + 32 * v209 + 16) != v207)
                      {
                        uint64_t v209 = *(_DWORD *)(v210 + 32 * v209 + 8) & 0x7FFFFFFF;
                        if (v209 == 0x7FFFFFFF) {
                          goto LABEL_247;
                        }
                      }
                      long long v194 = (uint64_t *)(v210 + 32 * v209 + 24);
                      uint64_t v258 = v279;
                      uint64_t v257 = v194;
LABEL_301:
                      re::HashTable<re::ecs2::Entity const*,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addNew<re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>&>(v258, (uint64_t *)v315, v257);
LABEL_302:
                      uint64_t v259 = re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::get((uint64_t)v276, *v194);
                      uint64_t v260 = v259;
                      v322[0] = v192;
                      uint64_t v261 = *(void *)(v192 + 16);
                      uint64_t v262 = *(void *)(v261 + 224);
                      to.n128_u64[0] = *(void *)(v261 + 296);
                      to.n128_u64[1] = *(void *)(v192 + 28);
                      LODWORD(v31re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v192 + 36);
                      if (v262)
                      {
                        if (*(unsigned char *)(v262 + 76)) {
                          BOOL v263 = *(void *)(v262 + 64) != 0;
                        }
                        else {
                          BOOL v263 = 0;
                        }
                      }
                      else
                      {
                        BOOL v263 = 1;
                      }
                      uint64_t v264 = v259 + 32;
                      uint64_t v265 = *(void *)(v260 + 32);
                      BYTE4(v31re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v263;
                      unint64_t v266 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (v192 ^ (v192 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v192 ^ (v192 >> 30))) >> 27));
                      unint64_t v267 = v266 ^ (v266 >> 31);
                      if (v265)
                      {
                        unint64_t v268 = v267 % *(unsigned int *)(v260 + 56);
                        uint64_t v269 = *(unsigned int *)(*(void *)(v260 + 40) + 4 * v268);
                        if (v269 != 0x7FFFFFFF)
                        {
                          uint64_t v270 = *(void *)(v260 + 48);
                          while (*(void *)(v270 + 48 * v269 + 16) != v192)
                          {
                            LODWORD(v269) = *(_DWORD *)(v270 + 48 * v269 + 8) & 0x7FFFFFFF;
                            if (v269 == 0x7FFFFFFF) {
                              goto LABEL_314;
                            }
                          }
                          goto LABEL_315;
                        }
                      }
                      else
                      {
                        LODWORD(v268) = 0;
                      }
LABEL_314:
                      re::HashTable<unsigned long,re::ecs2::VFXSceneComponent::BindingRuntimeData,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(v264, v268, v267, v322, &to);
                      ++*(_DWORD *)(v260 + 72);
LABEL_315:
                      uint64_t v34 = v278 + 24;
                      unsigned int v172 = *(_DWORD *)(v278 + 56);
                      uint64_t v171 = *(void *)(v278 + 40);
                      LODWORD(v35) = v289;
                      goto LABEL_316;
                    }
                  }
LABEL_247:
                  long long v286 = *(re::ecs2::EntityComponentCollection **)(v193 + 64);
                  int v211 = *(_DWORD *)(v193 + 72);
                }
                else
                {
                  long long v286 = 0;
                  int v211 = 0;
                }
                (*(void (**)(__n128 *__return_ptr, __n128))(**(void **)a2 + 8))(&to, v206);
                if (to.n128_u8[0]) {
                  unint64_t v213 = to.n128_u64[1];
                }
                else {
                  unint64_t v213 = 0;
                }
                unint64_t v309 = v213;
                v214 = v291;
                int v215 = *((_DWORD *)v291 + 64);
                if ((v215 + 1) >> 24) {
                  int v216 = 1;
                }
                else {
                  int v216 = v215 + 1;
                }
                *((_DWORD *)v291 + 64) = v216;
                unint64_t v52 = *((unsigned __int16 *)v291 + 126);
                unint64_t v49 = *((unsigned __int16 *)v291 + 127);
                if (v52 == 0xFFFF && v49 == 0xFFFF)
                {
                  if (*((_DWORD *)v291 + 62) >= *((_DWORD *)v291 + 61))
                  {
                    unint64_t v217 = v213;
                    re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::allocBlock(v276);
                    unint64_t v213 = v217;
                    v214 = v291;
                  }
                  uint64_t v218 = *((void *)v214 + 27);
                  unint64_t v49 = (unsigned __int16)(v218 - 1);
                  if (!v218) {
                    goto LABEL_331;
                  }
                  unint64_t v52 = *((unsigned int *)v214 + 62);
                  if (v52 >= 0x10000) {
                    goto LABEL_333;
                  }
                  v219 = (void *)(*((void *)v214 + 29) + 16 * v49);
                  *((_DWORD *)v214 + 62) = v52 + 1;
                  *(_DWORD *)(v219[1] + 4 * v52) = *((_DWORD *)v214 + 64);
                  uint64_t v220 = *v219 + 80 * v52;
                }
                else
                {
                  v221 = (__n128 *)*((void *)v291 + 27);
                  if ((unint64_t)v221 <= v49) {
                    goto LABEL_332;
                  }
                  v222 = (void *)(*((void *)v291 + 29) + 16 * v49);
                  *(_DWORD *)(v222[1] + 4 * v52) = v216;
                  uint64_t v220 = *v222 + 80 * v52;
                  *((_DWORD *)v291 + 6re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)v220;
                }
                ++*((_DWORD *)v214 + 60);
                *(void *)uint64_t v220 = v213;
                *(void *)(v220 + 8) = v286;
                *(void *)(v220 + 16) = v178;
                *(_DWORD *)(v220 + 24) = v211;
                *(_OWORD *)(v220 + 48) = 0u;
                *(_OWORD *)(v220 + 64) = 0u;
                *(_OWORD *)(v220 + 32) = 0u;
                *(_DWORD *)(v220 + 68) = 0x7FFFFFFF;
                int v223 = *((_DWORD *)v214 + 64);
                unint64_t v224 = (v49 << 16) | ((unint64_t)(v223 & 0xFFFFFF) << 32) | v52;
                v322[0] = v224;
                if (v286)
                {
                  unint64_t v225 = *(void *)(v193 + 64);
                  unint64_t v226 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (v225 ^ (v225 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v225 ^ (v225 >> 30))) >> 27));
                  unint64_t v227 = v226 ^ (v226 >> 31);
                  unint64_t v228 = *(void *)v205;
                  if (!*(void *)v205
                    || (unint64_t v228 = v227 % *(unsigned int *)(v205 + 24),
                        uint64_t v229 = *(unsigned int *)(*(void *)(v205 + 8) + 4 * v228),
                        v229 == 0x7FFFFFFF))
                  {
LABEL_270:
                    uint64_t v231 = *(unsigned int *)(v205 + 36);
                    if (v231 == 0x7FFFFFFF)
                    {
                      uint64_t v231 = *(unsigned int *)(v205 + 32);
                      int v232 = v231;
                      if (v231 == *(_DWORD *)(v205 + 24))
                      {
                        long long v287 = (re::ecs2::EntityComponentCollection *)v213;
                        int v284 = v223;
                        re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v205, 2 * *(_DWORD *)(v205 + 28));
                        int v223 = v284;
                        unint64_t v213 = (unint64_t)v287;
                        v214 = v291;
                        unint64_t v228 = v227 % *(unsigned int *)(v205 + 24);
                        int v232 = *(_DWORD *)(v205 + 32);
                      }
                      *(_DWORD *)(v205 + 32) = v232 + 1;
                      uint64_t v233 = *(void *)(v205 + 16);
                      int v234 = *(_DWORD *)(v233 + 32 * v231 + 8);
                    }
                    else
                    {
                      uint64_t v233 = *(void *)(v205 + 16);
                      int v234 = *(_DWORD *)(v233 + 32 * v231 + 8);
                      *(_DWORD *)(v205 + 36) = v234 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v233 + 32 * v231 + 8) = v234 | 0x80000000;
                    *(_DWORD *)(*(void *)(v205 + 16) + 32 * v231 + 8) = *(_DWORD *)(*(void *)(v205 + 16)
                                                                                    + 32 * v231
                                                                                    + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v205 + 8) + 4 * v228);
                    *(void *)(*(void *)(v205 + 16) + 32 * v23re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v227;
                    *(void *)(*(void *)(v205 + 16) + 32 * v231 + 16) = v225;
                    *(void *)(*(void *)(v205 + 16) + 32 * v231 + 24) = v224;
                    *(_DWORD *)(*(void *)(v205 + 8) + 4 * v228) = v231;
                    ++*(_DWORD *)(v205 + 28);
                    ++*(_DWORD *)(v205 + 40);
                  }
                  else
                  {
                    uint64_t v230 = *(void *)(v205 + 16);
                    while (*(void *)(v230 + 32 * v229 + 16) != v225)
                    {
                      uint64_t v229 = *(_DWORD *)(v230 + 32 * v229 + 8) & 0x7FFFFFFF;
                      if (v229 == 0x7FFFFFFF) {
                        goto LABEL_270;
                      }
                    }
                  }
                }
                long long v311 = 0u;
                long long v312 = 0u;
                __n128 to = 0u;
                DWORD1(v312) = 0x7FFFFFFF;
                unint64_t v235 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v213 ^ (v213 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v213 ^ (v213 >> 30))) >> 27));
                unint64_t v236 = v235 ^ (v235 >> 31);
                if (*v273)
                {
                  unint64_t v237 = v236 % *((unsigned int *)v214 + 96);
                  uint64_t v238 = *(unsigned int *)(*((void *)v214 + 46) + 4 * v237);
                  if (v238 != 0x7FFFFFFF)
                  {
                    uint64_t v239 = *((void *)v214 + 47);
                    while (*(void *)(v239 + 72 * v238 + 16) != v213)
                    {
                      LODWORD(v238) = *(_DWORD *)(v239 + 72 * v238 + 8) & 0x7FFFFFFF;
                      if (v238 == 0x7FFFFFFF) {
                        goto LABEL_281;
                      }
                    }
                    int v240 = v223;
                    uint64_t v242 = v239 + 72 * v238;
LABEL_285:
                    uint64_t v243 = v242 + 24;
                    unint64_t v244 = 0x94D049BB133111EBLL
                         * ((0xBF58476D1CE4E5B9 * (v224 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v224 & 0xFFFFFF)) >> 27));
                    unint64_t v245 = v244 ^ (v244 >> 31);
                    unint64_t v246 = *(unsigned int *)(v243 + 24);
                    if (v246)
                    {
                      unint64_t v247 = v245 % v246;
                      uint64_t v248 = *(unsigned int *)(*(void *)(v243 + 8) + 4 * (v245 % v246));
                      if (v248 != 0x7FFFFFFF)
                      {
                        uint64_t v249 = *(void *)(v243 + 16);
                        do
                        {
                          uint64_t v250 = v249 + 24 * v248;
                          int v252 = *(unsigned __int16 *)(v250 + 16);
                          uint64_t v251 = v250 + 16;
                          if (v252 == (unsigned __int16)v52
                            && *(unsigned __int16 *)(v251 + 2) == WORD1(v224)
                            && ((*(_DWORD *)(v249 + 24 * v248 + 20) ^ v240) & 0xFFFFFF) == 0)
                          {
                            goto LABEL_300;
                          }
                          uint64_t v248 = *(_DWORD *)(v249 + 24 * v248 + 8) & 0x7FFFFFFF;
                        }
                        while (v248 != 0x7FFFFFFF);
                      }
                    }
                    else
                    {
                      unint64_t v247 = 0;
                    }
                    uint64_t v253 = *(unsigned int *)(v243 + 36);
                    if (v253 == 0x7FFFFFFF)
                    {
                      uint64_t v253 = *(unsigned int *)(v243 + 32);
                      int v254 = v253;
                      if (v253 == v246)
                      {
                        re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::setCapacity(v243, 2 * *(_DWORD *)(v243 + 28));
                        unint64_t v247 = v245 % *(unsigned int *)(v243 + 24);
                        int v254 = *(_DWORD *)(v243 + 32);
                      }
                      *(_DWORD *)(v243 + 32) = v254 + 1;
                      uint64_t v255 = *(void *)(v243 + 16);
                      int v256 = *(_DWORD *)(v255 + 24 * v253 + 8);
                    }
                    else
                    {
                      uint64_t v255 = *(void *)(v243 + 16);
                      int v256 = *(_DWORD *)(v255 + 24 * v253 + 8);
                      *(_DWORD *)(v243 + 36) = v256 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v255 + 24 * v253 + 8) = v256 | 0x80000000;
                    *(_DWORD *)(*(void *)(v243 + 16) + 24 * v253 + 8) = *(_DWORD *)(*(void *)(v243 + 16)
                                                                                    + 24 * v253
                                                                                    + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v243 + 8) + 4 * v247);
                    *(void *)(*(void *)(v243 + 16) + 24 * v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 53) = v245;
                    *(void *)(*(void *)(v243 + 16) + 24 * v253 + 16) = v224;
                    *(_DWORD *)(*(void *)(v243 + 8) + 4 * v24re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = v253;
                    ++*(_DWORD *)(v243 + 28);
                    ++*(_DWORD *)(v243 + 40);
LABEL_300:
                    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&to);
                    long long v194 = v322;
                    uint64_t v257 = v322;
                    uint64_t v258 = v279;
                    goto LABEL_301;
                  }
LABEL_281:
                  int v240 = v223;
                }
                else
                {
                  int v240 = v223;
                  LODWORD(v23re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = 0;
                }
                unsigned int v241 = re::HashTable<unsigned long long,re::HashSet<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v273, v237, v236, &v309, (uint64_t)&to);
                ++*((_DWORD *)v291 + 100);
                uint64_t v242 = *((void *)v291 + 47) + 72 * v241;
                goto LABEL_285;
              }
            }
            else
            {
              LODWORD(v19re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = 0;
            }
LABEL_240:
            unsigned int v203 = re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::HashTable<unsigned long long,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove((uint64_t)v275, v197, v196, &v295, (uint64_t)&to);
            ++*((_DWORD *)v291 + 76);
            uint64_t v204 = *((void *)v291 + 35) + 72 * v203;
            goto LABEL_241;
          }
        }
        else
        {
          unint64_t v184 = 0;
        }
LABEL_222:
        uint64_t v187 = *(unsigned int *)(v179 + 100);
        if (v187 == 0x7FFFFFFF)
        {
          uint64_t v187 = *(unsigned int *)(v179 + 96);
          int v188 = v187;
          if (v187 == v183)
          {
            unint64_t v189 = v182;
            re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::setCapacity(v179 + 64, 2 * *(_DWORD *)(v179 + 92));
            unint64_t v182 = v189;
            unint64_t v184 = v189 % *(unsigned int *)(v180 + 88);
            int v188 = *(_DWORD *)(v180 + 96);
          }
          *(_DWORD *)(v180 + 96) = v188 + 1;
          uint64_t v190 = *(void *)(v180 + 80);
          int v191 = *(_DWORD *)(v190 + 24 * v187 + 8);
        }
        else
        {
          uint64_t v190 = *(void *)(v179 + 80);
          int v191 = *(_DWORD *)(v190 + 24 * v187 + 8);
          *(_DWORD *)(v179 + 10objc_initWeak(location, 0) = v191 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v190 + 24 * v187 + 8) = v191 | 0x80000000;
        *(_DWORD *)(*(void *)(v180 + 80) + 24 * v187 + 8) = *(_DWORD *)(*(void *)(v180 + 80) + 24 * v187 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v180 + 72) + 4 * v184);
        *(void *)(*(void *)(v180 + 80) + 24 * v18re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = v182;
        *(void *)(*(void *)(v180 + 80) + 24 * v187 + 16) = v175;
        *(_DWORD *)(*(void *)(v180 + 72) + 4 * v184) = v187;
        ++*(_DWORD *)(v180 + 92);
        ++*(_DWORD *)(v180 + 104);
        uint64_t v178 = *v177;
        goto LABEL_228;
      }
LABEL_201:
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v34);
      uint64_t v4 = v291;
      int v167 = v277;
      if (*((_DWORD *)v291 + 110) <= (v277 + 1)) {
        int v168 = v277 + 1;
      }
      else {
        int v168 = *((_DWORD *)v291 + 110);
      }
      while (1)
      {
        uint64_t v27 = (v167 + 1);
        if (v168 - 1 == v167) {
          break;
        }
        ++v167;
        int v169 = v27;
        if ((*(_DWORD *)(*((void *)v291 + 53) + 120 * v27 + 8) & 0x80000000) != 0) {
          goto LABEL_208;
        }
      }
      int v169 = v168;
LABEL_208:
      LODWORD(v24) = v169;
      if (v274 == v169) {
        return;
      }
    }
    uint64_t v39 = v31;
    uint64_t v40 = *(void *)(v29 + 16);
    unsigned int v41 = v30;
    int v280 = v30;
    uint64_t v281 = v29;
    while (1)
    {
      unint64_t v42 = *(void *)(v40 + 24 * v39 + 16);
      if (!re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)v285, v42))
      {
        (*(void (**)(__n128 *__return_ptr))(**(void **)a2 + 8))(&to);
        if (to.n128_u8[0]) {
          unint64_t v43 = to.n128_u64[1];
        }
        else {
          unint64_t v43 = 0;
        }
        unint64_t v44 = *(void *)(v42 + 24);
        if (v44 && (*(unsigned char *)(v44 + 288) & 0x80) == 0)
        {
          while (1)
          {
            unint64_t v45 = v44;
            (*(void (**)(__n128 *__return_ptr))(**(void **)a2 + 8))(&to);
            unint64_t v46 = to.n128_u8[0] ? to.n128_u64[1] : 0;
            if (v43 != v46) {
              break;
            }
            uint64_t v47 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v285, v45);
            if (v47)
            {
              uint64_t v48 = *v47;
              goto LABEL_64;
            }
            unint64_t v44 = *(void *)(v45 + 24);
            if (v44)
            {
              unint64_t v42 = v45;
              if ((*(unsigned char *)(v44 + 288) & 0x80) == 0) {
                continue;
              }
            }
            unint64_t v42 = v45;
            break;
          }
        }
        uint64_t v48 = 0xFFFFFFFFLL;
LABEL_64:
        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&to);
        v302[0] = 0;
        v302[1] = 0;
        unint64_t v49 = 1;
        int v303 = 1;
        uint64_t v305 = 0;
        uint64_t v306 = 0;
        uint64_t v304 = 0;
        int v307 = 0;
        re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v302, (uint64_t)&to, 1uLL);
        uint64_t v295 = 0;
        uint64_t v296 = 0;
        int v297 = 1;
        uint64_t v299 = 0;
        unint64_t v300 = 0;
        uint64_t v298 = 0;
        int v301 = 0;
        re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::init((uint64_t)&v295, (uint64_t)&to, 1uLL);
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v302) = v42;
        uint64_t v50 = re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::addUninitialized((uint64_t)&v295);
        *(void *)uint64_t v50 = v48;
        *(unsigned char *)(v50 + 8) = 0;
        unint64_t v52 = v300;
        if (v300)
        {
          while (1)
          {
            if (!v306)
            {
              re::internal::assertLog((re::internal *)4, v51, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
              _os_crash();
              __break(1u);
LABEL_328:
              unint64_t v309 = 0;
              p___n128 to = &to;
              long long v323 = 0u;
              long long v324 = 0u;
              memset(v322, 0, sizeof(v322));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v315 = 136315906;
              *(void *)&v315[4] = "operator[]";
              __int16 v316 = 1024;
              int v317 = 789;
              __int16 v318 = 2048;
              unint64_t v319 = v42;
              __int16 v320 = 2048;
              v321 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_329:
              unint64_t v309 = 0;
              long long v323 = 0u;
              long long v324 = 0u;
              memset(v322, 0, sizeof(v322));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v315 = 136315906;
              *(void *)&v315[4] = "operator[]";
              __int16 v316 = 1024;
              int v317 = 789;
              __int16 v318 = 2048;
              unint64_t v319 = v42;
              __int16 v320 = 2048;
              v321 = p_to;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_330:
              re::internal::assertLog((re::internal *)5, v90, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v122);
              _os_crash();
              __break(1u);
LABEL_331:
              v302[0] = 0;
              v221 = &to;
              long long v313 = 0u;
              long long v314 = 0u;
              long long v311 = 0u;
              long long v312 = 0u;
              __n128 to = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v322[0]) = 136315906;
              *(uint64_t *)((char *)v322 + 4) = (uint64_t)"operator[]";
              WORD2(v322[1]) = 1024;
              *(_DWORD *)((char *)&v322[1] + 6) = 789;
              WORD1(v322[2]) = 2048;
              *(uint64_t *)((char *)&v322[2] + 4) = v49;
              WORD2(v322[3]) = 2048;
              *(uint64_t *)((char *)&v322[3] + 6) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_332:
              v302[0] = 0;
              long long v313 = 0u;
              long long v314 = 0u;
              long long v311 = 0u;
              long long v312 = 0u;
              __n128 to = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v322[0]) = 136315906;
              *(uint64_t *)((char *)v322 + 4) = (uint64_t)"operator[]";
              WORD2(v322[1]) = 1024;
              *(_DWORD *)((char *)&v322[1] + 6) = 789;
              WORD1(v322[2]) = 2048;
              *(uint64_t *)((char *)&v322[2] + 4) = v49;
              WORD2(v322[3]) = 2048;
              *(uint64_t *)((char *)&v322[3] + 6) = (uint64_t)v221;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_333:
              re::internal::assertLog((re::internal *)5, v212, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v52);
              _os_crash();
              __break(1u);
            }
            unint64_t v53 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v302, v306 - 1);
            re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v302, --v306);
            ++v307;
            uint64_t v54 = re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v295, --v52);
            unint64_t v55 = *(void *)v54;
            char v56 = *(unsigned char *)(v54 + 8);
            *(_DWORD *)v294 = *(_DWORD *)(v54 + 9);
            *(_DWORD *)&v294[3] = *(_DWORD *)(v54 + 12);
            re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v295, v52);
            unint64_t v300 = v52;
            ++v301;
            if (*(unsigned char *)(v53 + 288)) {
              break;
            }
LABEL_179:
            if (!v52) {
              goto LABEL_180;
            }
          }
          (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 8))(v322);
          if (LOBYTE(v322[0])) {
            unint64_t v49 = v322[1];
          }
          else {
            unint64_t v49 = 0;
          }
          uint64_t v57 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v53 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          int v58 = *(float32x4_t **)(v53 + 128);
          uint64_t v59 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v53 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v58) {
            BOOL v60 = v59 == 0;
          }
          else {
            BOOL v60 = 1;
          }
          if (v60)
          {
            BOOL v61 = 0;
            unint64_t v62 = v291;
          }
          else
          {
            unint64_t v62 = v291;
            if (v58[2].i8[9]) {
              BOOL v61 = 1;
            }
            else {
              BOOL v61 = (*(_DWORD *)(v59 + 32) - 3) < 2;
            }
          }
          char v63 = v56;
          if (!v57 || !*(unsigned char *)(v57 + 25) || (!*((_DWORD *)v62 + 8) ? (BOOL v64 = v61) : (BOOL v64 = 0), v64))
          {
            if (v61)
            {
              unint64_t v65 = v55;
              if (*((_DWORD *)v62 + 8) != 2)
              {
                float32x4_t v66 = v58[3];
                float32x4_t v67 = v58[4];
                int32x4_t v68 = (int32x4_t)vmulq_f32(v66, v66);
                v68.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v68, 2), vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.i8, 1))).u32[0];
                float32x2_t v69 = vrsqrte_f32((float32x2_t)v68.u32[0]);
                float32x2_t v70 = vmul_f32(v69, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v69, v69)));
                float32x4_t v71 = vmulq_n_f32(v66, vmul_f32(v70, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v70, v70))).f32[0]);
                float32x4_t v72 = vmulq_f32(v67, v71);
                float32x4_t v73 = vmulq_f32(v71, v71);
                float32x4_t v74 = vsubq_f32(v67, vmulq_n_f32(v71, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1))).f32[0]));
                int32x4_t v75 = (int32x4_t)vmulq_f32(v74, v74);
                v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
                *(float32x2_t *)v72.f32 = vrsqrte_f32((float32x2_t)v75.u32[0]);
                *(float32x2_t *)v72.f32 = vmul_f32(*(float32x2_t *)v72.f32, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32)));
                float32x4_t v76 = vmulq_n_f32(v74, vmul_f32(*(float32x2_t *)v72.f32, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32))).f32[0]);
                uint64_t v77 = v58 + 6;
                unint64_t v62 = v291;
                goto LABEL_90;
              }
            }
            else
            {
              unint64_t v65 = v55;
            }
LABEL_155:
            uint64_t v144 = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v53 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v144) {
              re::ecs2::Component::markDirty(v144);
            }
            unint64_t v145 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v53 ^ (v53 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v53 ^ (v53 >> 30))) >> 27));
            unint64_t v42 = v145 ^ (v145 >> 31);
            unint64_t v146 = *v285;
            int v147 = v291;
            if (!*v285
              || (unint64_t v146 = v42 % *((unsigned int *)v291 + 44),
                  uint64_t v148 = *(unsigned int *)(*((void *)v291 + 20) + 4 * v146),
                  v148 == 0x7FFFFFFF))
            {
LABEL_162:
              uint64_t v150 = *((unsigned int *)v291 + 47);
              if (v150 == 0x7FFFFFFF)
              {
                uint64_t v150 = *((unsigned int *)v291 + 46);
                int v151 = v150;
                if (v150 == *((_DWORD *)v291 + 44))
                {
                  re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v285, 2 * *((_DWORD *)v291 + 45));
                  int v147 = v291;
                  unint64_t v146 = v42 % *((unsigned int *)v291 + 44);
                  int v151 = *((_DWORD *)v291 + 46);
                }
                *((_DWORD *)v147 + 46) = v151 + 1;
                uint64_t v152 = *((void *)v147 + 21);
                int v153 = *(_DWORD *)(v152 + 40 * v150 + 8);
              }
              else
              {
                uint64_t v152 = *((void *)v291 + 21);
                int v153 = *(_DWORD *)(v152 + 40 * v150 + 8);
                *((_DWORD *)v291 + 4re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = v153 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v152 + 40 * v150 + 8) = v153 | 0x80000000;
              *(_DWORD *)(*((void *)v147 + 21) + 40 * v150 + 8) = *(_DWORD *)(*((void *)v147 + 21) + 40 * v150 + 8) & 0x80000000 | *(_DWORD *)(*((void *)v147 + 20) + 4 * v146);
              *(void *)(*((void *)v147 + 21) + 40 * v15objc_initWeak(location, 0) = v42;
              *(void *)(*((void *)v147 + 21) + 40 * v150 + 16) = v53;
              uint64_t v154 = *((void *)v147 + 21) + 40 * v150;
              *(void *)(v154 + 24) = v65;
              *(unsigned char *)(v154 + 32) = v63;
              *(_DWORD *)(v154 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)v294;
              *(_DWORD *)(v154 + 36) = *(_DWORD *)&v294[3];
              *(_DWORD *)(*((void *)v147 + 20) + 4 * v146) = v150;
              ++*((_DWORD *)v147 + 45);
              ++*((_DWORD *)v147 + 48);
              uint64_t v155 = *((void *)v147 + 21) + 40 * v150;
            }
            else
            {
              uint64_t v149 = *((void *)v291 + 21);
              while (*(void *)(v149 + 40 * v148 + 16) != v53)
              {
                LODWORD(v148) = *(_DWORD *)(v149 + 40 * v148 + 8) & 0x7FFFFFFF;
                if (v148 == 0x7FFFFFFF) {
                  goto LABEL_162;
                }
              }
              uint64_t v155 = v149 + 40 * v148;
            }
            uint64_t v156 = (uint64_t *)(v155 + 24);
            uint64_t v157 = *(void *)(v53 + 328);
            if (v157)
            {
              uint64_t v158 = *v156;
              int v159 = *(unint64_t **)(v53 + 344);
              uint64_t v160 = 8 * v157;
              do
              {
                unint64_t v161 = *v159++;
                unint64_t v42 = v161;
                (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 8))(v322);
                if (LOBYTE(v322[0])) {
                  uint64_t v162 = v322[1];
                }
                else {
                  uint64_t v162 = 0;
                }
                if (v49 == v162) {
                  uint64_t v163 = v158;
                }
                else {
                  uint64_t v163 = 0xFFFFFFFFLL;
                }
                *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v302) = v42;
                uint64_t v164 = re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::addUninitialized((uint64_t)&v295);
                *(void *)uint64_t v164 = v163;
                *(unsigned char *)(v164 + 8) = 0;
                v160 -= 8;
              }
              while (v160);
              unint64_t v52 = v300;
            }
            goto LABEL_179;
          }
          float32x4_t v78 = *(float32x4_t *)(v57 + 32);
          int32x4_t v79 = (int32x4_t)vmulq_f32(v78, v78);
          v79.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v79, 2), vadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 1))).u32[0];
          float32x2_t v80 = vrsqrte_f32((float32x2_t)v79.u32[0]);
          float32x2_t v81 = vmul_f32(v80, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v80, v80)));
          float32x4_t v76 = vmulq_n_f32(v78, vmul_f32(v81, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v81, v81))).f32[0]);
          uint64_t v77 = (float32x4_t *)(v57 + 48);
LABEL_90:
          float32x4_t v283 = *v77;
          unint64_t v308 = v49;
          memset(v322, 0, sizeof(v322));
          HIDWORD(v322[4]) = 0x7FFFFFFF;
          unint64_t v82 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v49 ^ (v49 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v49 ^ (v49 >> 30))) >> 27));
          unint64_t v83 = v82 ^ (v82 >> 31);
          float32x4_t v292 = v76;
          if (*v282)
          {
            unint64_t v84 = v83 % *((unsigned int *)v62 + 32);
            uint64_t v85 = *(unsigned int *)(*((void *)v62 + 14) + 4 * v84);
            if (v85 != 0x7FFFFFFF)
            {
              uint64_t v86 = *((void *)v62 + 15);
              while (*(void *)(v86 + 72 * v85 + 16) != v49)
              {
                LODWORD(v85) = *(_DWORD *)(v86 + 72 * v85 + 8) & 0x7FFFFFFF;
                if (v85 == 0x7FFFFFFF) {
                  goto LABEL_97;
                }
              }
              uint64_t v88 = v86 + 72 * v85;
LABEL_99:
              uint64_t v89 = v88 + 24;
              re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v322);
              uint64_t v91 = *(unsigned int *)(v89 + 32);
              if (v91)
              {
                uint64_t v92 = 0;
                int v93 = (int *)(*(void *)(v89 + 16) + 8);
                float32x4_t v94 = v292;
                while (1)
                {
                  int v95 = *v93;
                  v93 += 6;
                  if (v95 < 0) {
                    break;
                  }
                  if (v91 == ++v92)
                  {
                    LODWORD(v92) = *(_DWORD *)(v89 + 32);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v92) = 0;
                float32x4_t v94 = v292;
              }
              int32x4_t v96 = (int32x4_t)vmulq_f32(v94, v94);
              v96.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v96, 2), vadd_f32(*(float32x2_t *)v96.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v96.i8, 1))).u32[0];
              float32x2_t v97 = vrsqrte_f32((float32x2_t)v96.u32[0]);
              float32x2_t v98 = vmul_f32(v97, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v97, v97)));
              float32x4_t v99 = vmulq_n_f32(v94, vmul_f32(v98, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v98, v98))).f32[0]);
              float32x4_t v293 = v99;
              float32x4_t v100 = vmulq_f32(v99, v283);
              float v288 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 2), vaddq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v100.f32, 1))).f32[0];
              if (v91 != v92)
              {
                uint64_t v101 = v92;
                uint64_t v102 = *(void *)(v89 + 16);
                float v103 = fabsf(v99.f32[0]);
                float v104 = fabsf(v99.f32[1]);
                float v105 = fabsf(v99.f32[2]);
                float v106 = fabsf(-v288);
                while (1)
                {
                  uint64_t v107 = v102 + 24 * v101;
                  uint64_t v109 = *(void *)(v107 + 16);
                  uint64_t v108 = (unint64_t *)(v107 + 16);
                  uint64_t v110 = (float *)re::DataArray<re::ecs2::ShadowPlaneInfo>::get((uint64_t)v290, v109);
                  float v111 = v110[4];
                  if (v111 == v293.f32[0]
                    || vabds_f32(v111, v293.f32[0]) < (float)((float)((float)(v103 + fabsf(v111)) + 1.0) * 0.00001))
                  {
                    float v112 = v110[5];
                    if (v112 == v293.f32[1]
                      || vabds_f32(v112, v293.f32[1]) < (float)((float)((float)(v104 + fabsf(v112)) + 1.0) * 0.00001))
                    {
                      float v113 = v110[6];
                      if (v113 == v293.f32[2]
                        || vabds_f32(v113, v293.f32[2]) < (float)((float)((float)(v105 + fabsf(v113)) + 1.0) * 0.00001))
                      {
                        float v114 = v110[15];
                        float v115 = fabsf(v114);
                        float v116 = v115 >= v106 ? v115 : v106;
                        if (v116 < 0.00001 || fabsf((float)(v288 + v114) / v116) < 0.00001) {
                          break;
                        }
                      }
                    }
                  }
                  uint64_t v102 = *(void *)(v89 + 16);
                  if (*(_DWORD *)(v89 + 32) <= (v92 + 1)) {
                    int v117 = v92 + 1;
                  }
                  else {
                    int v117 = *(_DWORD *)(v89 + 32);
                  }
                  while (1)
                  {
                    uint64_t v101 = (v92 + 1);
                    if (v117 - 1 == v92) {
                      break;
                    }
                    LODWORD(v92) = v92 + 1;
                    int v118 = v101;
                    if ((*(_DWORD *)(v102 + 24 * v101 + 8) & 0x80000000) != 0) {
                      goto LABEL_125;
                    }
                  }
                  int v118 = v117;
LABEL_125:
                  LODWORD(v92) = v118;
                  if (v91 == v118) {
                    goto LABEL_126;
                  }
                }
                unint64_t v65 = *v108;
                goto LABEL_154;
              }
LABEL_126:
              uint64_t v119 = v291;
              int v120 = *((_DWORD *)v291 + 24);
              if ((v120 + 1) >> 24) {
                int v121 = 1;
              }
              else {
                int v121 = v120 + 1;
              }
              *((_DWORD *)v291 + 24) = v121;
              uint64_t v122 = *((unsigned __int16 *)v291 + 46);
              unint64_t v42 = *((unsigned __int16 *)v291 + 47);
              if (v122 == 0xFFFF && v42 == 0xFFFF)
              {
                if (*((_DWORD *)v291 + 22) >= *((_DWORD *)v291 + 21))
                {
                  re::DataArray<re::ecs2::ShadowPlaneInfo>::allocBlock(v290);
                  uint64_t v119 = v291;
                }
                uint64_t v123 = *((void *)v119 + 7);
                unint64_t v42 = (unsigned __int16)(v123 - 1);
                if (!v123) {
                  goto LABEL_328;
                }
                uint64_t v122 = *((unsigned int *)v119 + 22);
                if (v122 >= 0x10000) {
                  goto LABEL_330;
                }
                uint64_t v124 = (void *)(*((void *)v119 + 9) + 16 * v42);
                *((_DWORD *)v119 + 22) = v122 + 1;
                *(_DWORD *)(v124[1] + 4 * v122) = *((_DWORD *)v119 + 24);
                uint64_t v125 = *v124 + (v122 << 7);
              }
              else
              {
                p___n128 to = (__n128 *)*((void *)v291 + 7);
                if ((unint64_t)p_to <= v42) {
                  goto LABEL_329;
                }
                uint64_t v127 = (void *)(*((void *)v291 + 9) + 16 * v42);
                *(_DWORD *)(v127[1] + 4 * v122) = v121;
                uint64_t v125 = *v127 + (v122 << 7);
                *((_DWORD *)v291 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = *(_DWORD *)v125;
              }
              float32x4_t v128 = v293;
              v128.f32[3] = -v288;
              ++*((_DWORD *)v119 + 20);
              *(void *)uint64_t v125 = v49;
              *(float32x4_t *)(v125 + 16) = v293;
              *(float32x4_t *)(v125 + 32) = v283;
              *(_OWORD *)(v125 + 8objc_initWeak(location, 0) = 0u;
              *(_OWORD *)(v125 + 96) = 0u;
              *(float32x4_t *)(v125 + 48) = v128;
              *(_OWORD *)(v125 + 64) = 0u;
              *(_DWORD *)(v125 + 10objc_initWeak(location, 0) = 0x7FFFFFFF;
              *(_DWORD *)(v125 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0;
              int v129 = *((_DWORD *)v119 + 24);
              unint64_t v65 = (v42 << 16) | ((unint64_t)(v129 & 0xFFFFFF) << 32) | v122;
              unint64_t v130 = 0xBF58476D1CE4E5B9 * ((v42 << 16) & 0xFFFFFF | v122 & 0xFFFFFF);
              unint64_t v131 = (0x94D049BB133111EBLL * (v130 ^ (v130 >> 27))) ^ ((0x94D049BB133111EBLL * (v130 ^ (v130 >> 27))) >> 31);
              unint64_t v132 = *(unsigned int *)(v89 + 24);
              if (v132)
              {
                unint64_t v133 = v131 % v132;
                uint64_t v134 = *(unsigned int *)(*(void *)(v89 + 8) + 4 * (v131 % v132));
                if (v134 != 0x7FFFFFFF)
                {
                  uint64_t v135 = *(void *)(v89 + 16);
                  do
                  {
                    uint64_t v136 = v135 + 24 * v134;
                    int v138 = *(unsigned __int16 *)(v136 + 16);
                    uint64_t v137 = v136 + 16;
                    if (v138 == (unsigned __int16)v122
                      && *(unsigned __int16 *)(v137 + 2) == WORD1(v65)
                      && ((*(_DWORD *)(v135 + 24 * v134 + 20) ^ v129) & 0xFFFFFF) == 0)
                    {
                      goto LABEL_154;
                    }
                    uint64_t v134 = *(_DWORD *)(v135 + 24 * v134 + 8) & 0x7FFFFFFF;
                  }
                  while (v134 != 0x7FFFFFFF);
                }
              }
              else
              {
                unint64_t v133 = 0;
              }
              uint64_t v139 = *(unsigned int *)(v89 + 36);
              if (v139 == 0x7FFFFFFF)
              {
                uint64_t v139 = *(unsigned int *)(v89 + 32);
                int v140 = v139;
                if (v139 == v132)
                {
                  re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::setCapacity(v89, 2 * *(_DWORD *)(v89 + 28));
                  unint64_t v133 = v131 % *(unsigned int *)(v89 + 24);
                  int v140 = *(_DWORD *)(v89 + 32);
                }
                *(_DWORD *)(v89 + 32) = v140 + 1;
                uint64_t v141 = *(void *)(v89 + 16);
                int v142 = *(_DWORD *)(v141 + 24 * v139 + 8);
              }
              else
              {
                uint64_t v141 = *(void *)(v89 + 16);
                int v142 = *(_DWORD *)(v141 + 24 * v139 + 8);
                *(_DWORD *)(v89 + 36) = v142 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v141 + 24 * v139 + 8) = v142 | 0x80000000;
              *(_DWORD *)(*(void *)(v89 + 16) + 24 * v139 + 8) = *(_DWORD *)(*(void *)(v89 + 16) + 24 * v139 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v89 + 8) + 4 * v133);
              *(void *)(*(void *)(v89 + 16) + 24 * v139) = v131;
              *(void *)(*(void *)(v89 + 16) + 24 * v139 + 16) = v65;
              *(_DWORD *)(*(void *)(v89 + 8) + 4 * v13re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v139;
              ++*(_DWORD *)(v89 + 28);
              ++*(_DWORD *)(v89 + 40);
LABEL_154:
              unint64_t v143 = re::DataArray<re::ecs2::ShadowPlaneInfo>::get((uint64_t)v290, v65);
              ++*(_DWORD *)(v143 + 112);
              char v63 = 1;
              goto LABEL_155;
            }
          }
          else
          {
            LODWORD(v84) = 0;
          }
LABEL_97:
          unsigned int v87 = re::HashTable<unsigned long long,re::HashSet<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v282, v84, v83, &v308, (uint64_t)v322);
          ++*((_DWORD *)v291 + 36);
          uint64_t v88 = *((void *)v291 + 15) + 72 * v87;
          goto LABEL_99;
        }
LABEL_180:
        uint64_t v29 = v281;
        while (v296)
          re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(&v295);
        LODWORD(v3objc_initWeak(location, 0) = v280;
        if (v295 && (v297 & 1) == 0) {
          (*(void (**)(void))(*(void *)v295 + 40))();
        }
        re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v302);
        if (v302[0] && (v303 & 1) == 0) {
          (*(void (**)(void))(*(void *)v302[0] + 40))();
        }
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&to);
        unsigned int v41 = *(_DWORD *)(v281 + 32);
        uint64_t v40 = *(void *)(v281 + 16);
      }
      if (v41 <= (int)v31 + 1) {
        unsigned int v165 = v31 + 1;
      }
      else {
        unsigned int v165 = v41;
      }
      while (1)
      {
        uint64_t v39 = (v31 + 1);
        if (v165 - 1 == v31) {
          break;
        }
        LODWORD(v3re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v31 + 1;
        unsigned int v166 = v39;
        if ((*(_DWORD *)(v40 + 24 * v39 + 8) & 0x80000000) != 0) {
          goto LABEL_196;
        }
      }
      unsigned int v166 = v165;
LABEL_196:
      LODWORD(v3re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v166;
      if (v30 == v166) {
        goto LABEL_43;
      }
    }
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::automaticallyRemoveReceiver(re::ecs2::ProjectiveShadowReceiverManager *this, re::ecs2::Entity *a2)
{
  unint64_t v2 = (re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 32);
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v3 && *(unsigned char *)(v3 + 41))
  {
    uint64_t v4 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    re::ecs2::EntityComponentCollection::remove(v2, v4);
  }
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::registerScene(re::ecs2::ProjectiveShadowReceiverManager *this, unint64_t a2)
{
  uint64_t v164 = *MEMORY[0x263EF8340];
  unint64_t v113 = a2;
  uint64_t v4 = (void *)((char *)this + 408);
  uint64_t result = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey((uint64_t)this + 408, a2);
  if (result) {
    return result;
  }
  long long v163 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  memset(v162, 0, sizeof(v162));
  DWORD1(v16re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0x7FFFFFFF;
  *(void *)&long long v163 = 0x7FFFFFFF00000000;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (!*v4)
  {
    LODWORD(v8) = 0;
    goto LABEL_9;
  }
  unint64_t v8 = v7 % *((unsigned int *)this + 108);
  uint64_t v9 = *(unsigned int *)(*((void *)this + 52) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_9:
    re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)v4, v8, v7, &v113, (uint64_t *)&v159);
    ++*((_DWORD *)this + 112);
    goto LABEL_10;
  }
  uint64_t v10 = *((void *)this + 53);
  while (*(void *)(v10 + 120 * v9 + 16) != a2)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 120 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_9;
    }
  }
LABEL_10:
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v162);
  double v12 = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v159);
  uint64_t v13 = *(re::EventBus **)(a2 + 288);
  if (!v13)
  {
    re::internal::assertLog((re::internal *)4, v11, v12, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 368);
    _os_crash();
    __break(1u);
  }
  long long v160 = 1uLL;
  *(void *)&v162[0] = 0;
  long long v159 = 0u;
  long long v161 = 0uLL;
  uint64_t v14 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 552, (uint64_t *)&v113, (uint64_t)&v159);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v159);
  int v15 = (re *)v159;
  if ((void)v159 && (v160 & 1) == 0) {
    int v15 = (re *)(*(uint64_t (**)(void))(*(void *)v159 + 40))();
  }
  uint64_t v16 = re::globalAllocators(v15)[2];
  *((void *)&v160 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v16;
  uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v16 + 32))(v16, 32, 0);
  void *v17 = &unk_26E702890;
  v17[1] = this;
  void v17[2] = re::ecs2::ProjectiveShadowReceiverManager::entityDidActivate;
  float32x4_t v17[3] = 0;
  *(void *)&long long v161 = v17;
  uint64_t v157 = v16;
  uint64_t v158 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator=<24ul>((uint64_t)v156, (uint64_t)&v159);
  uint64_t v18 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v13, (uint64_t)v156, 0, 0);
  uint64_t v20 = v19;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)v156);
  uint64_t v21 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  void *v21 = v18;
  v21[1] = v20;
  int v22 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)&v159);
  uint64_t v23 = re::globalAllocators(v22)[2];
  *((void *)&v160 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v23;
  uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v23 + 32))(v23, 32, 0);
  *uint64_t v24 = &unk_26E7028E8;
  v24[1] = this;
  v24[2] = re::ecs2::ProjectiveShadowReceiverManager::entityDidReparent;
  v24[3] = 0;
  *(void *)&long long v161 = v24;
  uint64_t v154 = v23;
  uint64_t v155 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator=<24ul>((uint64_t)v153, (uint64_t)&v159);
  uint64_t v25 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v13, (uint64_t)v153, 0, 0);
  uint64_t v27 = v26;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v153);
  uint64_t v28 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *uint64_t v28 = v25;
  v28[1] = v27;
  uint64_t v29 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)&v159);
  uint64_t v30 = re::globalAllocators(v29)[2];
  *((void *)&v160 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v30;
  uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v30 + 32))(v30, 32, 0);
  *uint64_t v31 = &unk_26E702940;
  v31[1] = this;
  void v31[2] = re::ecs2::ProjectiveShadowReceiverManager::entityWillDeactivate;
  void v31[3] = 0;
  *(void *)&long long v161 = v31;
  uint64_t v151 = v30;
  uint64_t v152 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator=<24ul>((uint64_t)v150, (uint64_t)&v159);
  uint64_t v32 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v13, (uint64_t)v150, 0, 0);
  uint64_t v34 = v33;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v150);
  uint64_t v35 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *uint64_t v35 = v32;
  v35[1] = v34;
  uint64_t v36 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)&v159);
  uint64_t v37 = re::globalAllocators(v36)[2];
  *((void *)&v160 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v37;
  int v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v37 + 32))(v37, 32, 0);
  *int v38 = &unk_26E702998;
  v38[1] = this;
  uint64_t v38[2] = re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentDidChangeHandler<REComponentDidActivateEvent>;
  v38[3] = 0;
  *(void *)&long long v161 = v38;
  uint64_t v148 = v37;
  uint64_t v149 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator=<24ul>((uint64_t)v147, (uint64_t)&v159);
  uint64_t v39 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v13, (uint64_t)v147, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v41 = v40;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v147);
  unint64_t v42 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *unint64_t v42 = v39;
  v42[1] = v41;
  uint64_t v145 = *((void *)&v160 + 1);
  uint64_t v146 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator=<24ul>((uint64_t)v144, (uint64_t)&v159);
  uint64_t v43 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v13, (uint64_t)v144, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v45 = v44;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v144);
  unint64_t v46 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *unint64_t v46 = v43;
  v46[1] = v45;
  uint64_t v47 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)&v159);
  uint64_t v48 = re::globalAllocators(v47)[2];
  *((void *)&v160 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v48;
  unint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v48 + 32))(v48, 32, 0);
  *unint64_t v49 = &unk_26E7029F0;
  v49[1] = this;
  v49[2] = re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentDidChangeHandler<REComponentDidChangeEvent>;
  _OWORD v49[3] = 0;
  *(void *)&long long v161 = v49;
  uint64_t v142 = v48;
  uint64_t v143 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator=<24ul>((uint64_t)v141, (uint64_t)&v159);
  uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v13, (uint64_t)v141, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v52 = v51;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v141);
  unint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *unint64_t v53 = v50;
  v53[1] = v52;
  uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)&v159);
  uint64_t v55 = re::globalAllocators(v54)[2];
  *((void *)&v160 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v55;
  char v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v55 + 32))(v55, 32, 0);
  *char v56 = &unk_26E702A48;
  v56[1] = this;
  uint64_t v56[2] = re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentWillDeactivateHandler;
  v56[3] = 0;
  *(void *)&long long v161 = v56;
  uint64_t v139 = v55;
  uint64_t v140 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator=<24ul>((uint64_t)v138, (uint64_t)&v159);
  uint64_t v57 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v13, (uint64_t)v138, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v59 = v58;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v138);
  BOOL v60 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *BOOL v60 = v57;
  v60[1] = v59;
  uint64_t v136 = *((void *)&v160 + 1);
  uint64_t v137 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator=<24ul>((uint64_t)v135, (uint64_t)&v159);
  uint64_t v61 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v13, (uint64_t)v135, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v63 = v62;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v135);
  BOOL v64 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *BOOL v64 = v61;
  v64[1] = v63;
  unint64_t v65 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)&v159);
  uint64_t v66 = *((void *)this + 2);
  if (v66)
  {
    float32x4_t v67 = (uint64_t *)*((void *)this + 3);
    uint64_t v68 = 8 * v66;
    do
    {
      uint64_t v69 = *v67++;
      *((void *)&v160 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::globalAllocators(v65)[2];
      *(void *)&long long v161 = 0;
      float32x2_t v70 = (void *)(*(uint64_t (**)(void, uint64_t, void))(**((void **)&v160 + 1) + 32))(*((void *)&v160 + 1), 32, 0);
      *float32x2_t v70 = &unk_26E702998;
      v70[1] = this;
      v70[2] = re::ecs2::ProjectiveShadowReceiverManager::planeDidChangeHandler<REComponentDidActivateEvent>;
      v70[3] = 0;
      *(void *)&long long v161 = v70;
      uint64_t v133 = *((void *)&v160 + 1);
      uint64_t v134 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator=<24ul>((uint64_t)v132, (uint64_t)&v159);
      uint64_t v71 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v13, (uint64_t)v132, v69, 0);
      uint64_t v73 = v72;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v132);
      float32x4_t v74 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *float32x4_t v74 = v71;
      v74[1] = v73;
      int32x4_t v75 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)&v159);
      *((void *)&v160 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::globalAllocators(v75)[2];
      *(void *)&long long v161 = 0;
      float32x4_t v76 = (void *)(*(uint64_t (**)(void, uint64_t, void))(**((void **)&v160 + 1) + 32))(*((void *)&v160 + 1), 32, 0);
      *float32x4_t v76 = &unk_26E7029F0;
      v76[1] = this;
      v76[2] = re::ecs2::ProjectiveShadowReceiverManager::planeDidChangeHandler<REComponentDidChangeEvent>;
      v76[3] = 0;
      *(void *)&long long v161 = v76;
      uint64_t v130 = *((void *)&v160 + 1);
      uint64_t v131 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator=<24ul>((uint64_t)v129, (uint64_t)&v159);
      uint64_t v77 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v13, (uint64_t)v129, v69, 0);
      uint64_t v79 = v78;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v129);
      float32x2_t v80 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *float32x2_t v80 = v77;
      v80[1] = v79;
      float32x2_t v81 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)&v159);
      *((void *)&v160 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::globalAllocators(v81)[2];
      *(void *)&long long v161 = 0;
      unint64_t v82 = (void *)(*(uint64_t (**)(void, uint64_t, void))(**((void **)&v160 + 1) + 32))(*((void *)&v160 + 1), 32, 0);
      *unint64_t v82 = &unk_26E702A48;
      v82[1] = this;
      void v82[2] = re::ecs2::ProjectiveShadowReceiverManager::planeWillDeactivateHandler;
      v82[3] = 0;
      *(void *)&long long v161 = v82;
      uint64_t v127 = *((void *)&v160 + 1);
      uint64_t v128 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator=<24ul>((uint64_t)v126, (uint64_t)&v159);
      uint64_t v83 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v13, (uint64_t)v126, v69, 0);
      uint64_t v85 = v84;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v126);
      uint64_t v86 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      void *v86 = v83;
      v86[1] = v85;
      unint64_t v65 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)&v159);
      v68 -= 8;
    }
    while (v68);
  }
  v123[0] = re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v123[1] = re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  unsigned int v87 = (re *)re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)&v159, (char *)v123, 2uLL);
  if ((void)v160)
  {
    uint64_t v88 = (uint64_t *)v161;
    uint64_t v89 = 8 * v160;
    do
    {
      uint64_t v90 = *v88++;
      uint64_t v124 = re::globalAllocators(v87)[2];
      uint64_t v125 = 0;
      uint64_t v91 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v124 + 32))(v124, 32, 0);
      *uint64_t v91 = &unk_26E702998;
      v91[1] = this;
      v91[2] = re::ecs2::ProjectiveShadowReceiverManager::receiverDidChangeHandler<REComponentDidActivateEvent>;
      _OWORD v91[3] = 0;
      uint64_t v125 = v91;
      uint64_t v121 = v124;
      uint64_t v122 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator=<24ul>((uint64_t)v120, (uint64_t)v123);
      uint64_t v92 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v13, (uint64_t)v120, v90, 0);
      uint64_t v94 = v93;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v120);
      int v95 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *int v95 = v92;
      v95[1] = v94;
      int32x4_t v96 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v123);
      uint64_t v124 = re::globalAllocators(v96)[2];
      uint64_t v125 = 0;
      float32x2_t v97 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v124 + 32))(v124, 32, 0);
      void *v97 = &unk_26E7029F0;
      v97[1] = this;
      v97[2] = re::ecs2::ProjectiveShadowReceiverManager::receiverDidChangeHandler<REComponentDidChangeEvent>;
      v97[3] = 0;
      uint64_t v125 = v97;
      uint64_t v118 = v124;
      uint64_t v119 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator=<24ul>((uint64_t)v117, (uint64_t)v123);
      uint64_t v98 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v13, (uint64_t)v117, v90, 0);
      uint64_t v100 = v99;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v117);
      uint64_t v101 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *uint64_t v101 = v98;
      v101[1] = v100;
      uint64_t v102 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v123);
      uint64_t v124 = re::globalAllocators(v102)[2];
      uint64_t v125 = 0;
      float v103 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v124 + 32))(v124, 32, 0);
      *float v103 = &unk_26E702A48;
      v103[1] = this;
      v103[2] = re::ecs2::ProjectiveShadowReceiverManager::receiverWillDeactivateHandler;
      v103[3] = 0;
      uint64_t v125 = v103;
      uint64_t v115 = v124;
      uint64_t v116 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator=<24ul>((uint64_t)v114, (uint64_t)v123);
      uint64_t v104 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v13, (uint64_t)v114, v90, 0);
      uint64_t v106 = v105;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v114);
      uint64_t v107 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      void *v107 = v104;
      v107[1] = v106;
      unsigned int v87 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v123);
      v89 -= 8;
    }
    while (v89);
  }
  uint64_t v108 = *(void *)(v113 + 104);
  uint64_t v109 = *(void *)(v108 + 328);
  if (v109)
  {
    uint64_t v110 = *(const re::ecs2::Entity ***)(v108 + 344);
    uint64_t v111 = 8 * v109;
    do
    {
      float v112 = *v110++;
      re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(this, v112);
      re::ecs2::ProjectiveShadowReceiverManager::automaticallyAddOrRemoveReceiverRecursive(v112, (re::ecs2::Entity *)1);
      v111 -= 8;
    }
    while (v111);
  }
  uint64_t result = v159;
  if ((void)v159)
  {
    if ((void)v161) {
      return (*(uint64_t (**)(void))(*(void *)v159 + 40))();
    }
  }
  return result;
}

BOOL re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 120 * v3 + 16) == a2) {
    return 1;
  }
  do
  {
    LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v5 + 120 * v3 + 8) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(void *)(v5 + 120 * v3 + 16) != a2);
  return result;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::entityDidActivate(re::ecs2::ProjectiveShadowReceiverManager *a1, re::ecs2::Entity *a2)
{
  uint64_t v4 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)a1 + 504, (uint64_t *)&v4);
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(a1, v4);
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyReceiver((uint64_t)a1, v4);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::entityDidReparent(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::entityWillDeactivate(uint64_t a1, re::ecs2::Entity *a2)
{
  unint64_t v8 = a2;
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 504, (uint64_t *)&v8);
  re::ecs2::ProjectiveShadowReceiverManager::removeDirtyReceiver((re::ecs2::ProjectiveShadowReceiverManager *)a1, v8);
  uint64_t v3 = v8;
  uint64_t v9 = v8;
  re::ecs2::ProjectiveShadowReceiverManager::markReceiversInSubtreeDirty((re::ecs2::ProjectiveShadowReceiverManager *)a1, v8);
  re::ecs2::ShadowPlaneTracking::invalidatePlanesForSubtree((re::ecs2::ShadowPlaneTracking *)(a1 + 8), v3);
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = (re::ecs2::Entity *)*((void *)v3 + 3);
  }
  while (v3);
  unint64_t v5 = *((void *)v4 + 2);
  if (v5)
  {
    uint64_t v6 = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(a1 + 408, v5);
    if (v6) {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v6 + 48, (uint64_t *)&v9);
    }
  }
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentDidChangeHandler<REComponentDidActivateEvent>(uint64_t a1, re::ecs2::ProjectiveShadowReceiverManager *a2)
{
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentDidChangeHandler<REComponentDidChangeEvent>(uint64_t a1, re::ecs2::ProjectiveShadowReceiverManager *a2)
{
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentWillDeactivateHandler(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = (void *)(a2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  objc_initWeak(&location, v3);
  unint64_t v4 = (unint64_t)location - 8;
  if (!location) {
    unint64_t v4 = 0;
  }
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
  unint64_t v6 = v5 ^ (v5 >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 480);
  if (!v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_13;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 464) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_13:
    re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::addAsMove(a1 + 456, v8, v6, &location);
    ++*(_DWORD *)(a1 + 496);
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(a1 + 472);
  while (*(id *)(v10 + 24 * v9 + 16) != location)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_13;
    }
  }
LABEL_14:
  objc_destroyWeak(&location);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::planeDidChangeHandler<REComponentDidActivateEvent>(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::planeDidChangeHandler<REComponentDidChangeEvent>(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::planeWillDeactivateHandler(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::receiverDidChangeHandler<REComponentDidActivateEvent>(uint64_t a1, const re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::receiverDidChangeHandler<REComponentDidChangeEvent>(uint64_t a1, const re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::receiverWillDeactivateHandler(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  return 0;
}

void re::ecs2::ProjectiveShadowReceiverManager::automaticallyAddOrRemoveReceiverRecursive(re::ecs2::ProjectiveShadowReceiverManager *this, re::ecs2::Entity *a2)
{
  int v2 = (int)a2;
  unint64_t v4 = (re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 32);
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (*((void *)this + 22)) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || !*(unsigned char *)(v5 + 27))
  {
    re::ecs2::ProjectiveShadowReceiverManager::automaticallyRemoveReceiver(this, v6);
  }
  else
  {
    uint64_t v8 = *((unsigned __int16 *)this + 41);
    if (!*((_WORD *)this + 41)) {
      goto LABEL_13;
    }
    uint64_t v9 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                         + 16);
    uint64_t v10 = (int16x8_t *)*((void *)this + 11);
    int16x8_t v11 = vld1q_dup_s16(v9);
    int v12 = 1;
    while (1)
    {
      uint16x8_t v13 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v11, *v10), (int8x16_t)xmmword_23436BBD0);
      v13.i16[0] = vmaxvq_u16(v13);
      if (v13.i32[0]) {
        break;
      }
      v12 -= 8;
      ++v10;
      if (!--v8) {
        goto LABEL_13;
      }
    }
    if (v13.u16[0] - v12 >= *((unsigned __int16 *)this + 40)) {
LABEL_13:
    }
      *(unsigned char *)(re::ecs2::EntityComponentCollection::add(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 4re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 1;
  }
  if (v2)
  {
    uint64_t v14 = *((void *)this + 41);
    if (v14)
    {
      int v15 = (uint64_t *)*((void *)this + 43);
      uint64_t v16 = 8 * v14;
      do
      {
        uint64_t v17 = *v15;
        if (*v15)
        {
          id v18 = (id)(v17 + 8);
          re::ecs2::ProjectiveShadowReceiverManager::automaticallyAddOrRemoveReceiverRecursive((re::ecs2::ProjectiveShadowReceiverManager *)v17, (re::ecs2::Entity *)1, v19);
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::unregisterScene(re::ecs2::ProjectiveShadowReceiverManager *this, re::ecs2::Scene *a2)
{
  unint64_t v36 = (unint64_t)a2;
  uint64_t v3 = (void *)((char *)this + 408);
  if (re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey((uint64_t)this + 408, (unint64_t)a2))
  {
    uint64_t v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 552, (uint64_t *)&v36);
    if (v4)
    {
      uint64_t v5 = *(void *)(v36 + 288);
      if (v5)
      {
        uint64_t v6 = v4;
        uint64_t v7 = *(void *)(v4 + 40);
        if (v7)
        {
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v9 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v6, i);
            re::EventBus::unsubscribe(v5, *(void *)v9, *(void *)(v9 + 8));
          }
        }
      }
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 552, (uint64_t *)&v36);
    }
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v35);
    v29[0] = 0;
    v29[1] = 0;
    int v30 = 1;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    int v34 = 0;
    re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v29, (uint64_t)v35, 1uLL);
    uint64_t v10 = *(void *)(v36 + 104);
    uint64_t v11 = *(void *)(v10 + 328);
    if (v11)
    {
      int v12 = *(uint64_t **)(v10 + 344);
      uint64_t v13 = 8 * v11;
      do
      {
        uint64_t v14 = *v12++;
        *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v29) = v14;
        v13 -= 8;
      }
      while (v13);
    }
    for (uint64_t j = v33; v33; uint64_t j = v33)
    {
      uint64_t v16 = *(const re::ecs2::Entity **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v29, j - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v29, --v33);
      ++v34;
      re::ecs2::ProjectiveShadowClusterTracking::removeFromCluster((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 200), v16);
      re::ecs2::ShadowPlaneTracking::invalidatePlanesForSubtree((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 8), v16);
      re::ecs2::ProjectiveShadowReceiverManager::automaticallyRemoveReceiver(v16, v17);
      uint64_t v18 = *((void *)v16 + 41);
      if (v18)
      {
        BOOL v19 = (uint64_t *)*((void *)v16 + 43);
        uint64_t v20 = 8 * v18;
        do
        {
          uint64_t v21 = *v19++;
          *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v29) = v21;
          v20 -= 8;
        }
        while (v20);
      }
    }
    if (*v3)
    {
      unint64_t v22 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) >> 27));
      unint64_t v23 = (v22 ^ (v22 >> 31)) % *((unsigned int *)this + 108);
      uint64_t v24 = *((void *)this + 52);
      uint64_t v25 = *(unsigned int *)(v24 + 4 * v23);
      if (v25 != 0x7FFFFFFF)
      {
        uint64_t v26 = *((void *)this + 53);
        if (*(void *)(v26 + 120 * v25 + 16) == v36)
        {
          *(_DWORD *)(v24 + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = *(_DWORD *)(v26 + 120 * v25 + 8) & 0x7FFFFFFF;
LABEL_23:
          re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(*((void *)this + 53) + 120 * v25);
          *(_DWORD *)(*((void *)this + 53) + 120 * v25 + 8) = *(_DWORD *)(*((void *)this + 53) + 120 * v25 + 8) & 0x80000000 | *((_DWORD *)this + 111);
          *((_DWORD *)this + 11re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v25;
          --*((_DWORD *)this + 109);
          ++*((_DWORD *)this + 112);
        }
        else
        {
          while (1)
          {
            unsigned int v27 = v25;
            int v28 = *(_DWORD *)(v26 + 120 * v25 + 8);
            uint64_t v25 = v28 & 0x7FFFFFFF;
            if ((v28 & 0x7FFFFFFF) == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v26 + 120 * v25 + 16) == v36)
            {
              *(_DWORD *)(v26 + 120 * v27 + 8) = *(_DWORD *)(v26 + 120 * v27 + 8) & 0x80000000 | *(_DWORD *)(v26 + 120 * v25 + 8) & 0x7FFFFFFF;
              goto LABEL_23;
            }
          }
        }
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v29);
    if (v29[0])
    {
      if ((v30 & 1) == 0) {
        (*(void (**)(void))(*(void *)v29[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v35);
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::markReceiversInSubtreeDirty(re::ecs2::ProjectiveShadowReceiverManager *this, const re::ecs2::Entity *a2)
{
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v15);
  v9[0] = 0;
  v9[1] = 0;
  int v10 = 1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  int v14 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v9, (uint64_t)v15, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v9) = a2;
  while (v13)
  {
    uint64_t v4 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v9, v13 - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v9, --v13);
    ++v14;
    if (*(unsigned char *)(v4 + 288))
    {
      re::ecs2::ProjectiveShadowReceiverManager::addDirtyReceiver((uint64_t)this, (const re::ecs2::Entity *)v4);
      uint64_t v5 = *(void *)(v4 + 328);
      if (v5)
      {
        uint64_t v6 = *(uint64_t **)(v4 + 344);
        uint64_t v7 = 8 * v5;
        do
        {
          uint64_t v8 = *v6++;
          *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v9) = v8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v9);
  if (v9[0] && (v10 & 1) == 0) {
    (*(void (**)(void))(*(void *)v9[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v15);
}

uint64_t re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 120 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v5 + 120 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 120 * v3 + 16) == a2) {
        return v5 + 120 * v3 + 24;
      }
    }
    return 0;
  }
  return v5 + 120 * v3 + 24;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::addDirtyReceiver(uint64_t this, const re::ecs2::Entity *a2)
{
  uint64_t v6 = a2;
  if (*((unsigned char *)a2 + 288))
  {
    uint64_t v2 = this;
    this = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(this + 504, (uint64_t *)&v6);
    if ((this & 1) == 0)
    {
      this = re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (this)
      {
        this = re::ecs2::ProjectiveShadowReceiverManager::invalidateReceiver(v2, this);
        uint64_t v3 = (uint64_t)v6;
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = *(void *)(v3 + 24);
        }
        while (v3);
        unint64_t v5 = *(void *)(v4 + 16);
        if (v5)
        {
          this = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(v2 + 408, v5);
          if (this) {
            return re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(this, (uint64_t *)&v6);
          }
        }
      }
    }
  }
  return this;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::invalidateReceiver(uint64_t this, unint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v4 = this;
    re::ecs2::ProjectiveShadowClusterTracking::removeFromCluster((re::ecs2::ProjectiveShadowClusterTracking *)(this + 200), *(const re::ecs2::Entity **)(a2 + 16));
    this = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v4 + 152, v2);
    if (this)
    {
      this = re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet(v4 + 40, *(void *)this);
      if (this)
      {
        unint64_t v5 = *(unsigned int *)(this + 88);
        if (v5)
        {
          unint64_t v6 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
          unint64_t v7 = (v6 ^ (v6 >> 31)) % v5;
          uint64_t v8 = *(void *)(this + 72);
          uint64_t v9 = *(unsigned int *)(v8 + 4 * v7);
          if (v9 != 0x7FFFFFFF)
          {
            uint64_t v10 = *(void *)(this + 80);
            if (*(void *)(v10 + 24 * v9 + 16) == a2)
            {
              *(_DWORD *)(v8 + 4 * vre::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
LABEL_11:
              uint64_t v12 = *(void *)(this + 80);
              uint64_t v13 = v12 + 24 * v9;
              int v16 = *(_DWORD *)(v13 + 8);
              int v15 = (int *)(v13 + 8);
              int v14 = v16;
              if (v16 < 0)
              {
                *int v15 = v14 & 0x7FFFFFFF;
                uint64_t v12 = *(void *)(this + 80);
                int v14 = *(_DWORD *)(v12 + 24 * v9 + 8);
              }
              int v17 = *(_DWORD *)(this + 104);
              *(_DWORD *)(v12 + 24 * v9 + 8) = *(_DWORD *)(this + 100) | v14 & 0x80000000;
              --*(_DWORD *)(this + 92);
              *(_DWORD *)(this + 10objc_initWeak(location, 0) = v9;
              *(_DWORD *)(this + 104) = v17 + 1;
            }
            else
            {
              while (1)
              {
                unsigned int v11 = v9;
                LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
                if (v9 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v10 + 24 * v9 + 16) == a2)
                {
                  *(_DWORD *)(v10 + 24 * v11 + 8) = *(_DWORD *)(v10 + 24 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
                  goto LABEL_11;
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::removeDirtyReceiver(re::ecs2::ProjectiveShadowReceiverManager *this, const re::ecs2::Entity *a2)
{
  unint64_t v2 = a2;
  unint64_t v7 = a2;
  uint64_t result = re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result) {
    uint64_t result = re::ecs2::ProjectiveShadowReceiverManager::invalidateReceiver((uint64_t)this, result);
  }
  do
  {
    unint64_t v5 = v2;
    unint64_t v2 = (const re::ecs2::Entity *)*((void *)v2 + 3);
  }
  while (v2);
  unint64_t v6 = *((void *)v5 + 2);
  if (v6)
  {
    uint64_t result = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 408, v6);
    if (result) {
      return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(result, (uint64_t *)&v7);
    }
  }
  return result;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::perEntityShadowPlanes(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 152;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::shadowPlanes(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 40;
}

void re::ecs2::ProjectiveShadowReceiverManager::~ProjectiveShadowReceiverManager(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  re::ecs2::ProjectiveShadowReceiverManager::~ProjectiveShadowReceiverManager(this);
  JUMPOUT(0x237DBCBD0);
}

{
  unint64_t v1;
  re::ecs2::ProjectiveShadowReceiverManager *v2;
  uint64_t v3;
  __n128 v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  double v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;

  unint64_t v2 = this;
  uint64_t v31 = *MEMORY[0x263EF8340];
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 69);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 63);
  re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)v2 + 57);
  re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v2 + 51);
  uint64_t v3 = (uint64_t)v2 + 200;
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v2 + 45);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v2 + 39);
  v4.n128_f64[0] = re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v2 + 33);
  if (!*((_DWORD *)v2 + 61)) {
    goto LABEL_26;
  }
  int v15 = (char *)v2 + 200;
  if (*((_DWORD *)v2 + 60))
  {
    LODWORD(v16) = 0;
    if (!*((void *)v2 + 27)) {
      goto LABEL_34;
    }
    unint64_t v5 = (char *)v2 + 200;
    if (!**(_DWORD **)(*((void *)v2 + 29) + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v15);
      unint64_t v5 = v15;
    }
  }
  else
  {
    LODWORD(v16) = -1;
    unint64_t v5 = (char *)v2 + 200;
  }
  int v15 = v5;
  unint64_t v6 = (unsigned __int16)v16;
  if ((char *)v3 != v5 || (unsigned __int16)v16 != 0xFFFFLL || (v16 & 0xFFFF0000) != 0xFFFF0000)
  {
    unint64_t v7 = WORD1(v16);
    while (1)
    {
      uint64_t v8 = *((void *)v5 + 2);
      if (v8 <= v7) {
        break;
      }
      re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::destroy((uint64_t)v2 + 200, ((unint64_t)(*(_DWORD *)(*(void *)(*((void *)v5 + 4) + 16 * v7 + 8) + 4 * v6) & 0xFFFFFF) << 32) | (v7 << 16) | v6);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v15);
      unint64_t v5 = v15;
      unint64_t v6 = (unsigned __int16)v16;
      unint64_t v7 = WORD1(v16);
      if (v15 == (char *)v3 && (unsigned __int16)v16 == 0xFFFFLL && WORD1(v16) == 0xFFFFLL) {
        goto LABEL_15;
      }
    }
LABEL_32:
    int v17 = 0;
    int v30 = 0u;
    int v28 = 0u;
    uint64_t v29 = 0u;
    uint64_t v26 = 0u;
    unsigned int v27 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    uint64_t v18 = 136315906;
    BOOL v19 = "operator[]";
    uint64_t v20 = 1024;
    uint64_t v21 = 797;
    unint64_t v22 = 2048;
    unint64_t v23 = v7;
    uint64_t v24 = 2048;
    uint64_t v25 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_33;
  }
LABEL_15:
  uint64_t v9 = *((void *)v2 + 27);
  unint64_t v7 = v9 - 1;
  if (v9 == 1) {
    goto LABEL_24;
  }
  uint64_t v8 = 16 * v9 - 16;
  do
  {
    if (v9 <= v7)
    {
      int v15 = 0;
      int v30 = 0u;
      int v28 = 0u;
      uint64_t v29 = 0u;
      uint64_t v26 = 0u;
      unsigned int v27 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      uint64_t v18 = 136315906;
      BOOL v19 = "operator[]";
      uint64_t v20 = 1024;
      uint64_t v21 = 789;
      unint64_t v22 = 2048;
      unint64_t v23 = v7;
      uint64_t v24 = 2048;
      uint64_t v25 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      int v15 = 0;
      int v30 = 0u;
      int v28 = 0u;
      uint64_t v29 = 0u;
      uint64_t v26 = 0u;
      unsigned int v27 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      uint64_t v18 = 136315906;
      BOOL v19 = "removeAt";
      uint64_t v20 = 1024;
      uint64_t v21 = 931;
      unint64_t v22 = 2048;
      unint64_t v23 = v7;
      uint64_t v24 = 2048;
      uint64_t v25 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_32;
    }
    uint64_t v10 = (void *)(*((void *)v2 + 29) + v8);
    (*(void (**)(void, void, __n128))(**((void **)v2 + 25) + 40))(*((void *)v2 + 25), *v10, v4);
    (*(void (**)(void, void))(**((void **)v2 + 25) + 40))(*((void *)v2 + 25), v10[1]);
    unint64_t v1 = *((void *)v2 + 27);
    if (v1 <= v7) {
      goto LABEL_31;
    }
    uint64_t v9 = v1 - 1;
    if (v1 - 1 > v7)
    {
      unsigned int v11 = *((void *)v2 + 29);
      uint64_t v4 = *(__n128 *)(v11 + 16 * v1 - 16);
      *(__n128 *)(v11 + v8) = v4;
      uint64_t v9 = *((void *)v2 + 27) - 1;
    }
    *((void *)v2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = v9;
    ++*((_DWORD *)v2 + 56);
    v8 -= 16;
    --v7;
  }
  while (v7);
  *((void *)v2 + 3re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFF00000000;
  if (!v9)
  {
    int v15 = 0;
    int v30 = 0u;
    int v28 = 0u;
    uint64_t v29 = 0u;
    uint64_t v26 = 0u;
    unsigned int v27 = 0u;
    unint64_t v2 = (re::ecs2::ProjectiveShadowReceiverManager *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    uint64_t v18 = 136315906;
    BOOL v19 = "operator[]";
    uint64_t v20 = 1024;
    uint64_t v21 = 789;
    unint64_t v22 = 2048;
    unint64_t v23 = 0;
    uint64_t v24 = 2048;
    uint64_t v25 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    *((void *)v2 + 3re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFF00000000;
  }
  uint64_t v12 = (void *)*((void *)v2 + 29);
  (*(void (**)(void, void))(**((void **)v2 + 25) + 40))(*((void *)v2 + 25), *v12);
  (*(void (**)(void, void))(**((void **)v2 + 25) + 40))(*((void *)v2 + 25), v12[1]);
  re::DynamicArray<unsigned long>::deinit(v3);
  *((_DWORD *)v2 + 6re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
LABEL_26:
  re::DynamicArray<unsigned long>::deinit(v3);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v2 + 19);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v2 + 13);
  if (*((_DWORD *)v2 + 21))
  {
    uint64_t v13 = re::DataArray<re::ecs2::ShadowPlaneInfo>::clear((void *)v2 + 5);
    if (*((void *)v2 + 7))
    {
      int v14 = (void *)*((void *)v2 + 9);
      (*(void (**)(void, void, double))(**((void **)v2 + 5) + 40))(*((void *)v2 + 5), *v14, v13);
      (*(void (**)(void, void))(**((void **)v2 + 5) + 40))(*((void *)v2 + 5), v14[1]);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v2 + 40);
      *((_DWORD *)v2 + 2re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
      goto LABEL_29;
    }
LABEL_33:
    int v15 = 0;
    int v30 = 0u;
    int v28 = 0u;
    uint64_t v29 = 0u;
    uint64_t v26 = 0u;
    unsigned int v27 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    uint64_t v18 = 136315906;
    BOOL v19 = "operator[]";
    uint64_t v20 = 1024;
    uint64_t v21 = 789;
    unint64_t v22 = 2048;
    unint64_t v23 = 0;
    uint64_t v24 = 2048;
    uint64_t v25 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    int v17 = 0;
    int v30 = 0u;
    int v28 = 0u;
    uint64_t v29 = 0u;
    uint64_t v26 = 0u;
    unsigned int v27 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    uint64_t v18 = 136315906;
    BOOL v19 = "operator[]";
    uint64_t v20 = 1024;
    uint64_t v21 = 797;
    unint64_t v22 = 2048;
    unint64_t v23 = 0;
    uint64_t v24 = 2048;
    uint64_t v25 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_29:
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2 + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v2 + 1);
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::perWorldShadowPlanes(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 104;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::perWorldShadowClusters(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 360;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::shadowClusters(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 200;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::perEntityShadowClusters(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 312;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702890;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702890;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7028E8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7028E8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702940;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702940;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702998;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702998;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7029F0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7029F0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, id *a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      int v10 = *(_DWORD *)(a1 + 28);
      signed int v11 = 2 * v10;
      uint64_t v12 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v11) {
          BOOL v13 = v8 == v11;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13 && (v10 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(void *)&v25[36] = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v25, v12, v11);
          long long v14 = *(_OWORD *)v25;
          *(_OWORD *)uint64_t v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v14;
          uint64_t v15 = *(void *)&v25[16];
          uint64_t v16 = *(void *)(a1 + 16);
          *(void *)&unsigned char v25[16] = v16;
          *(void *)(a1 + 16) = v15;
          long long v18 = *(_OWORD *)&v25[24];
          *(_OWORD *)&unsigned char v25[24] = *(_OWORD *)(a1 + 24);
          unsigned int v17 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v18;
          uint64_t v19 = v17;
          if (v17)
          {
            uint64_t v20 = v16 + 16;
            do
            {
              if ((*(_DWORD *)(v20 - 8) & 0x80000000) != 0) {
                re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::addAsMove(a1, *(void *)(v20 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v20 - 16), v20);
              }
              v20 += 24;
              --v19;
            }
            while (v19);
          }
          re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)v25);
        }
      }
      else
      {
        if (v11) {
          signed int v23 = v11;
        }
        else {
          signed int v23 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v21 = *(void *)(a1 + 16);
    int v22 = *(_DWORD *)(v21 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 16);
    int v22 = *(_DWORD *)(v21 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v21 + 24 * v8 + 8) = v22 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8) = a3;
  uint64_t v24 = *(void *)(a1 + 16) + 24 * v8;
  *(void *)(v24 + 16) = 0;
  objc_moveWeak((id *)(v24 + 16), a4);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
}

double re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          objc_destroyWeak((id *)(v6 + 16));
          *(void *)(v6 + 16) = 0;
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 24;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702A48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702A48;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

double re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 120;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    uint64_t v2 = (uint64_t *)(a1 + 24);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 72));
    return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
  }
  return result;
}

uint64_t re::DataArray<re::ecs2::ShadowPlaneInfo>::DataArray(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4objc_initWeak(location, 0) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 52) = 0x1FFFFFFFFLL;
  *(void *)a1 = a2;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = a3;
  re::DataArray<re::ecs2::ShadowPlaneInfo>::allocBlock((void *)a1);
  return a1;
}

_anonymous_namespace_ *re::DataArray<re::ecs2::ShadowPlaneInfo>::allocBlock(void *a1)
{
  unint64_t v3 = (unint64_t)*((unsigned int *)a1 + 11) << 7;
  uint64_t v4 = (*(uint64_t (**)(void, unint64_t, void))(*(void *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(void *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4;
  uint64_t v1 = 4 * *((unsigned int *)a1 + 11);
  double result = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(void *)(*a1 + 8));
    double result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  int v9 = result;
  unint64_t v11 = a1[1];
  unint64_t v10 = a1[2];
  if (v10 >= v11)
  {
    unint64_t v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        unint64_t v13 = 2 * v11;
        if (!v11) {
          unint64_t v13 = 8;
        }
        if (v13 <= v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = v13;
        }
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    unint64_t v10 = a1[2];
  }
  uint64_t v15 = (uint64_t *)(a1[4] + 16 * v10);
  *uint64_t v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

void *re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4objc_initWeak(location, 0) = 0;
  double result = re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 512, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::setBucketsCapacity((void *)a1, (v2 + 32) >> 5);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 0x1F);
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)int v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 40 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 40 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 40 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 40 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 40 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = v14;
            *(void *)(*(void *)(a1 + 16) + 40 * v17 + 16) = *(void *)v13;
            *(_OWORD *)(*(void *)(a1 + 16) + 40 * v17 + 24) = *(_OWORD *)(v13 + 8);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 40;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::HashSet<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)uint64_t v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::HashSet<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 72;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 72 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + 72 * v9;
  *(_OWORD *)(v25 + 4objc_initWeak(location, 0) = 0u;
  *(_DWORD *)(v25 + 56) = 0;
  *(_OWORD *)(v25 + 24) = 0u;
  *(void *)(v25 + 6objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  uint64_t v26 = *(void *)(v25 + 32);
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = v26;
  uint64_t v27 = *(void *)(v25 + 40);
  *(void *)(v25 + 4objc_initWeak(location, 0) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v27;
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *(_DWORD *)(v25 + 48);
  *(_DWORD *)(v25 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v27;
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *(_DWORD *)(v25 + 52);
  *(_DWORD *)(v25 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v27;
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *(_DWORD *)(v25 + 56);
  *(_DWORD *)(v25 + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v27;
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *(_DWORD *)(v25 + 60);
  *(_DWORD *)(v25 + 6objc_initWeak(location, 0) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v27;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::DataArray(uint64_t a1, int a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4objc_initWeak(location, 0) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 52) = 0x1FFFFFFFFLL;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = a2;
  re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::allocBlock((void *)a1);
  return a1;
}

_anonymous_namespace_ *re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::allocBlock(void *a1)
{
  uint64_t v3 = 80 * *((unsigned int *)a1 + 11);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(void *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4;
  uint64_t v1 = 4 * *((unsigned int *)a1 + 11);
  double result = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(void *)(*a1 + 8));
    double result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v9 = result;
  unint64_t v11 = a1[1];
  unint64_t v10 = a1[2];
  if (v10 >= v11)
  {
    unint64_t v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        unint64_t v13 = 2 * v11;
        if (!v11) {
          unint64_t v13 = 8;
        }
        if (v13 <= v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = v13;
        }
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    unint64_t v10 = a1[2];
  }
  long long v15 = (uint64_t *)(a1[4] + 16 * v10);
  *long long v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::HashTable<unsigned long long,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)uint64_t v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::HashTable<unsigned long long,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 72;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 72 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + 72 * v9;
  *(_DWORD *)(v25 + 56) = 0;
  *(_OWORD *)(v25 + 4objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(void *)(v25 + 6objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  uint64_t v26 = *(void *)(v25 + 32);
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = v26;
  uint64_t v27 = *(void *)(v25 + 40);
  *(void *)(v25 + 4objc_initWeak(location, 0) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v27;
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *(_DWORD *)(v25 + 48);
  *(_DWORD *)(v25 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v27;
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *(_DWORD *)(v25 + 52);
  *(_DWORD *)(v25 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v27;
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *(_DWORD *)(v25 + 56);
  *(_DWORD *)(v25 + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v27;
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *(_DWORD *)(v25 + 60);
  *(_DWORD *)(v25 + 6objc_initWeak(location, 0) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v27;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t *re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v28, v14, v13);
          long long v16 = *(_OWORD *)v28;
          *(_OWORD *)int v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v28[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 8);
              }
              v22 += 120;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 120 * v10 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 120 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 120 * v10 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 120 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 120 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 120 * v1objc_initWeak(location, 0) = a3;
  *(void *)(*(void *)(a1 + 16) + 120 * v10 + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 120 * v10;
  *(_DWORD *)(v26 + 56) = 0;
  *(_OWORD *)(v26 + 4objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  *(void *)(v26 + 6objc_initWeak(location, 0) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v26 + 24), a5);
  *(_OWORD *)(v26 + 72) = 0u;
  v26 += 72;
  *(_DWORD *)(v26 + 32) = 0;
  *(_OWORD *)(v26 + 16) = 0u;
  *(void *)(v26 + 36) = 0x7FFFFFFFLL;
  double result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v26, a5 + 6);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray(uint64_t a1, char *a2, unint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (a3)
  {
    re::DynamicArray<float *>::setCapacity((void *)a1, a3);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<char const*>::copy((void *)a1, 0, a2, a3);
  }
  return a1;
}

float32x2_t re::poseFromOriginAndXYAxes@<D0>(uint64_t *a1@<X0>, float32x4_t *a2@<X1>, int32x4_t *a3@<X2>, uint64_t a4@<X8>)
{
  int32x4_t v4 = (int32x4_t)vmulq_f32(*a2, *a2);
  v4.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v4, 2), vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1))).u32[0];
  float32x2_t v5 = vrsqrte_f32((float32x2_t)v4.u32[0]);
  float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
  float32x4_t v7 = vmulq_n_f32(*a2, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]);
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  float32x4_t v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*a3, *a3), *(int8x16_t *)a3, 0xCuLL), vnegq_f32(v7)), *(float32x4_t *)a3, v8);
  float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  int32x4_t v11 = (int32x4_t)vmulq_f32(v9, v9);
  v11.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), *(float32x2_t *)v11.i8)).u32[0];
  float32x2_t v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
  float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
  float32x4_t v14 = vmulq_n_f32(v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
  float32x4_t v15 = vmlaq_f32(vmulq_f32(v8, vnegq_f32(v14)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL));
  float32x4_t v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL);
  int32x4_t v17 = (int32x4_t)vmulq_f32(v15, v15);
  v17.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), *(float32x2_t *)v17.i8)).u32[0];
  float32x2_t v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
  float32x2_t v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  v23[0] = (int32x4_t)v7;
  v23[1] = (int32x4_t)vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
  void v23[2] = (int32x4_t)v14;
  return re::Pose<float>::Pose(a4, v20, v21, v23);
}

id *re::ecs2::VertexCacheComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v15[5] = *MEMORY[0x263EF8340];
  float32x4_t v8 = (id *)(a1 + 192);
  if (a2) {
    float32x4_t v9 = (void *)(a2 + 8);
  }
  else {
    float32x4_t v9 = 0;
  }
  inited = (re *)objc_initWeak(&location, v9);
  memset(v15, 0, 24);
  v15[3] = re::globalAllocators(inited)[2];
  v15[4] = 0;
  re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v15);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v15);
  objc_destroyWeak(&location);
  if (a5)
  {
    uint64_t v11 = 168 * a5;
    float32x2_t v12 = (void *)(a4 + 152);
    do
    {
      ++*((unsigned char *)v12 - 136);
      void *v12 = 0;
      v12 += 21;
      v11 -= 168;
    }
    while (v11);
  }
  return v8;
}

double re::ecs2::VertexCacheComponent::initializeBindPoint(re::ecs2::VertexCacheComponent *this, unint64_t a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)this + 21);
  unint64_t v5 = *((void *)this + 11);
  if (v4 >= v5)
  {
    unint64_t v5 = *((void *)this + 21);
  }
  else
  {
    if (*((void *)this + 20) < v5)
    {
      re::DynamicArray<re::BindPoint>::setCapacity((void *)this + 19, v5);
      unint64_t v4 = *((void *)this + 21);
    }
    unint64_t v7 = v5 - v4;
    if (v5 > v4)
    {
      uint64_t v8 = 48 * v4;
      long long v6 = 0uLL;
      do
      {
        uint64_t v9 = *((void *)this + 23) + v8;
        *(void *)(v9 + 4objc_initWeak(location, 0) = 0;
        *(_OWORD *)uint64_t v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        *(_DWORD *)(v9 + 32) = 0;
        v8 += 48;
        --v7;
      }
      while (v7);
    }
    *((void *)this + 2re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v5;
    ++*((_DWORD *)this + 44);
  }
  if (v5 <= a2)
  {
    *(void *)uint64_t v26 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x2_t v18 = 136315906;
    *(void *)&v18[4] = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  if (*(void *)(*((void *)this + 23) + 48 * a2 + 24)) {
    return *(double *)&v6;
  }
  float32x4_t v10 = (re *)*((void *)this + 2);
  if (!v10 || !*((void *)v10 + 21)) {
    return *(double *)&v6;
  }
  re::makeBindNode(v10, (uint64_t)v25);
  re::DynamicString::format((re::DynamicString *)"VertexCache.vertexCacheTimes[%zu]", (re::DynamicString *)&v16, a2);
  uint64_t v11 = (char *)v17[1];
  if ((v17[0] & 1) == 0) {
    uint64_t v11 = (char *)v17 + 1;
  }
  uint64_t v12 = LOBYTE(v17[0]) >> 1;
  if (v17[0]) {
    uint64_t v12 = v17[0] >> 1;
  }
  v15[0] = (uint64_t)v11;
  v15[1] = v12;
  re::BindNode::bindPointWithOverride<float>(v25, v15, (uint64_t)v18);
  unint64_t v5 = *((void *)this + 21);
  if (v5 <= a2)
  {
LABEL_24:
    float32x4_t v17[3] = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v26 = 136315906;
    *(void *)&v26[4] = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = a2;
    __int16 v31 = 2048;
    unint64_t v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float32x2_t v13 = (void *)(*((void *)this + 23) + 48 * a2);
  void *v13 = *(void *)v18;
  re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v13 + 1), (uint64_t)&v18[8]);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v18[8]);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v18[8]);
  if (v16 && (v17[0] & 1) != 0) {
    (*(void (**)(void))(*(void *)v16 + 40))();
  }
  *(double *)&long long v6 = re::BindNode::deinit((re::BindNode *)v25);
  return *(double *)&v6;
}

re::ecs2::VertexCacheComponentStateImpl *re::ecs2::VertexCacheComponentStateImpl::VertexCacheComponentStateImpl(re::ecs2::VertexCacheComponentStateImpl *this, re::ecs2::VertexCacheSystem *a2)
{
  v5[3] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E702AA0;
  *((void *)this + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = a2;
  *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::VertexCacheComponentStateImpl *)((char *)this + 16), (uint64_t)v4);
  return this;
}

BOOL re::ecs2::VertexCacheComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v26, a5, 0);
  unint64_t v9 = v26;
  unint64_t v10 = v27;
  unint64_t v26 = a4;
  unint64_t v27 = v9;
  unint64_t v28 = v10;
  uint64_t v11 = (unsigned __int16)v10;
  uint64_t v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      uint64_t v15 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v27);
      uint64_t v16 = *(void *)v15;
      uint64_t v18 = *(void *)(*(void *)(*(void *)v15 + 16) + 176);
      uint64_t v17 = *(void *)(*(void *)(*(void *)v15 + 16) + 184);
      if (v17) {
        BOOL v19 = v18 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (!v19
        && *(void *)(v18 + 40)
        && *(void *)(v17 + 240)
        && (v25[0] = v17 + 232,
            v25[1] = 16,
            !re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v25)))
      {
        unint64_t v22 = v26;
        unint64_t v23 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v27);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v22, v23, *(void *)(a3 + 40));
      }
      else
      {
        unint64_t v20 = v26;
        unint64_t v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v27);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(void *)(a3 + 32));
        re::ecs2::VertexCacheComponent::resetDeformerInputs(v16, *(void *)(*(void *)(*(void *)(a1 + 8) + 112) + 136), 0, 0, 0);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
    }
    while (v27 != a5 || (unsigned __int16)v28 != 0xFFFF || WORD1(v28) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    unint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::VertexCacheComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 160);
  if (v6) {
    uint64_t v94 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 104))(v6);
  }
  else {
    uint64_t v94 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v111, a5, 0);
  unint64_t v103 = a4;
  long long v104 = v111;
  if ((void)v111 != a5 || WORD4(v111) != 0xFFFFLL || (DWORD2(v111) & 0xFFFF0000) != 4294901760)
  {
    unint64_t v9 = (unint64_t)&v104;
    int32x4_t v91 = vdupq_n_s32(0x7F800000u);
    while (1)
    {
      uint64_t v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v104);
      uint64_t v11 = *(void **)v10;
      uint64_t v12 = *(void **)(*(void *)v10 + 16);
      uint64_t v13 = v12[23];
      uint64_t v99 = *(void *)(*(void *)(v13 + 392) + 96);
      unint64_t v100 = *(void *)(*(void *)(v13 + 392) + 88);
      uint64_t v96 = v13;
      uint64_t v14 = *(void *)(v13 + 248);
      uint64_t v15 = *(void **)(*(void *)v10 + 200);
      if (v15)
      {
        BOOL v16 = v14 != *v15 || v94 == 0;
        if (!v16 && v94 == v15[1]) {
          goto LABEL_88;
        }
        re::ecs2::VertexCacheComponent::resetDeformerInputs((uint64_t)v11, *(void *)(*(void *)(*(void *)(a1 + 8) + 112) + 136), 0, v99, v100);
      }
      uint64_t v17 = v12[22];
      uint64_t v18 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v17 + 32));
      if (v18) {
        break;
      }
      uint64_t v77 = *(void *)(v17 + 40);
      if (v77)
      {
        unsigned int v78 = atomic_load((unsigned int *)(v77 + 704));
        if (v78 == 3)
        {
          unint64_t v79 = v103;
          unint64_t v80 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v104);
          float32x2_t v81 = (re::ecs2::ComponentBucketsBase *)a3[2];
          unint64_t v82 = a3[4];
          goto LABEL_87;
        }
      }
      re::AssetHandle::loadAsync((re::AssetHandle *)(v17 + 32));
LABEL_88:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v104);
      if ((void)v104 == a5 && WORD4(v104) == 0xFFFF && WORD5(v104) == 0xFFFF) {
        return *(_DWORD *)(a5 + 40) != 0;
      }
    }
    uint64_t v19 = v18;
    uint64_t v98 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v12 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    unint64_t v20 = (re::MeshNameMap *)(v19 + 448);
    unint64_t v21 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v12 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v21) {
      unint64_t v20 = (re *)((char *)v21 + 216);
    }
    unint64_t v22 = v11[6];
    unint64_t v23 = *(void *)(*(void *)(a1 + 8) + 112);
    unint64_t v24 = re::globalAllocators(v21);
    signed int v25 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 40, 8);
    *(void *)signed int v25 = v14;
    *((void *)v25 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v94;
    *((void *)v25 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v22;
    *((void *)v25 + 4) = 0;
    if (!v22)
    {
      re::ecs2::VertexCacheComponent::resetDeformerInputs((uint64_t)v11, *(void *)(v23 + 136), v25, v99, v100);
      goto LABEL_86;
    }
    if (v22 >= 0x666666666666667)
    {
LABEL_96:
      re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v22);
      _os_crash();
      __break(1u);
    }
    else
    {
      *((void *)v25 + 4) = v27;
      if (v27)
      {
        __int16 v29 = v27;
        unint64_t v95 = v22;
        if (v22 != 1)
        {
          bzero(v27, 40 * v22 - 40);
          v29 += 40 * v22 - 40;
        }
        *((void *)v29 + 4) = 0;
        *(_OWORD *)__int16 v29 = 0u;
        *((_OWORD *)v29 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
        uint64_t v30 = (uint64_t)re::ecs2::VertexCacheComponent::resetDeformerInputs((uint64_t)v11, *(void *)(v23 + 136), v25, v99, v100);
        uint64_t v93 = v30;
        char v31 = 0;
        unint64_t v32 = 0;
        unint64_t v23 = v22;
        while (1)
        {
          char v90 = v31;
          while (1)
          {
            unint64_t v33 = v11[6];
            if (v33 <= v32)
            {
              v101.i64[0] = 0;
              long long v114 = 0u;
              long long v115 = 0u;
              long long v112 = 0u;
              long long v113 = 0u;
              long long v111 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v106 = 136315906;
              *(void *)&v106[4] = "operator[]";
              *(_WORD *)&v106[12] = 1024;
              *(_DWORD *)&v106[14] = 789;
              __int16 v107 = 2048;
              unint64_t v108 = v32;
              __int16 v109 = 2048;
              unint64_t v110 = v33;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_93:
              re::internal::assertLog((re::internal *)6, v75, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v22, v100);
              _os_crash();
              __break(1u);
LABEL_94:
              v101.i64[0] = 0;
              long long v114 = 0u;
              long long v115 = 0u;
              long long v112 = 0u;
              long long v113 = 0u;
              long long v111 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v106 = 136315906;
              *(void *)&v106[4] = "operator[]";
              *(_WORD *)&v106[12] = 1024;
              *(_DWORD *)&v106[14] = 468;
              __int16 v107 = 2048;
              unint64_t v108 = v32;
              __int16 v109 = 2048;
              unint64_t v110 = v33;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_95:
              uint64_t v105 = 0;
              long long v114 = 0u;
              long long v115 = 0u;
              long long v112 = 0u;
              long long v113 = 0u;
              long long v111 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v106 = 136315906;
              *(void *)&v106[4] = "operator[]";
              *(_WORD *)&v106[12] = 1024;
              *(_DWORD *)&v106[14] = 476;
              __int16 v107 = 2048;
              unint64_t v108 = 0;
              __int16 v109 = 2048;
              unint64_t v110 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_96;
            }
            long long v34 = (re::AssetHandle *)(v11[8] + 24 * v32);
            unint64_t v22 = (unint64_t)v34 + 8;
            if (!*((void *)v34 + 1)) {
              goto LABEL_75;
            }
            long long v35 = re::VertexCacheAsset::assetType((re::VertexCacheAsset *)v30);
            uint64_t v30 = re::AssetHandle::assetWithType(v34, (const re::AssetType *)v35, 1);
            if (!v30) {
              break;
            }
            uint64_t v36 = v30;
            if (*(unsigned char *)(v30 + 49) == 30 && v32 < v11[11])
            {
              int v37 = *(unsigned __int8 *)(v30 + 48);
              if (v32 >= v11[16])
              {
                unint64_t v9 = 40;
              }
              else
              {
                uint64_t v38 = v11[18];
                unint64_t v9 = 40;
                if (*(unsigned char *)(v38 + 2 * v32)) {
                  int v37 = *(unsigned __int8 *)(v38 + 2 * v32 + 1);
                }
              }
              uint64_t v40 = *(void *)(v93 + 8);
              unint64_t v33 = *(void *)(v40 + 24);
              if (v33 <= v32) {
                goto LABEL_94;
              }
              float v41 = *(float *)(v11[13] + 4 * v32);
              unint64_t v23 = *(void *)(v40 + 32);
              unint64_t v33 = v23 + 40 * v32;
              v42.i64[0] = 0x7F0000007FLL;
              v42.i64[1] = 0x7F0000007FLL;
              float32x4_t v101 = (float32x4_t)v91;
              float32x4_t v102 = v42;
              uint64_t v43 = *(void *)(v30 + 72) * *(void *)(v30 + 80);
              float v44 = *(float *)(v30 + 56);
              if (v41 <= v44)
              {
                *(void *)&long long v111 = *(id *)(v30 + 112);
                DWORD2(v11re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
                HIDWORD(v11re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v43;
                unint64_t v22 = v23 + 40 * v32;
                *(_DWORD *)(v22 + 36) = 0;
                NS::SharedPtr<MTL::Texture>::operator=((void **)v22, (void **)&v111);
                *(void *)(v33 + 8) = *((void *)&v111 + 1);

                *(void *)(v22 + 16) = 0;
                *(void *)(v22 + 24) = 0;
                *(_DWORD *)(v22 + 32) = 0;
                if ((void)v111) {

                }
                if (!*(void *)(v36 + 96)) {
                  goto LABEL_95;
                }
                BOOL v64 = *(float32x4_t **)(v36 + 104);
              }
              else
              {
                float v45 = *(float *)(v30 + 52);
                unint64_t v46 = *(void *)(v30 + 64);
                if (v41 >= (float)(v44 + (float)(v45 * (float)v46)))
                {
                  unint64_t v87 = v46 - 1;
                  unsigned int v65 = (v46 - 1) * v43;
                  *(void *)&long long v111 = *(id *)(v30 + 112);
                  *((void *)&v111 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = __PAIR64__(v43, v65);
                  unint64_t v66 = v23 + 40 * v32;
                  *(_DWORD *)(v66 + 36) = 0;
                  NS::SharedPtr<MTL::Texture>::operator=((void **)v66, (void **)&v111);
                  *(void *)(v33 + 8) = *((void *)&v111 + 1);

                  *(void *)(v66 + 16) = 0;
                  *(void *)(v66 + 24) = 0;
                  *(_DWORD *)(v66 + 32) = 0;
                  if ((void)v111) {

                  }
                  unint64_t v9 = *(void *)(v36 + 96);
                  unint64_t v22 = v87;
                  if (v9 <= v87) {
                    goto LABEL_98;
                  }
                }
                else
                {
                  float v47 = (float)(v41 - v44) / v45;
                  float v48 = floorf(v47);
                  float v49 = v48 + ceilf(v47 - v48);
                  unint64_t v50 = (unint64_t)(float)(v49 + 0.5);
                  if (v37 && v46 != v50)
                  {
                    float v51 = v47 - (float)(v49 + -1.0);
                    unint64_t v85 = (unint64_t)(float)(v49 + 0.5);
                    unint64_t v86 = v50 - 1;
                    unsigned int v52 = (v50 - 1) * v43;
                    unint64_t v9 = (v43 * v50);
                    *(void *)&long long v111 = *(id *)(v30 + 112);
                    *((void *)&v111 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = __PAIR64__(v43, v52);
                    *(void *)uint64_t v106 = *(id *)(v36 + 112);
                    *(void *)&v106[8] = __PAIR64__(v43, v9);
                    NS::SharedPtr<MTL::Texture>::operator=((void **)(v23 + 40 * v32), (void **)&v111);
                    *(void *)(v33 + 8) = *((void *)&v111 + 1);
                    unint64_t v53 = v23 + 40 * v32;
                    NS::SharedPtr<MTL::Texture>::operator=((void **)(v53 + 16), (void **)v106);
                    *(void *)(v53 + 24) = *(void *)&v106[8];
                    *(float *)(v53 + 32) = v51;
                    *(_DWORD *)(v53 + 36) = 0;
                    if (*(void *)v106) {

                    }
                    if ((void)v111) {
                    unint64_t v23 = *(void *)(v36 + 96);
                    }
                    unint64_t v22 = v86;
                    if (v23 <= v86) {
                      goto LABEL_99;
                    }
                    uint64_t v54 = *(void *)(v36 + 104);
                    uint64_t v55 = (float32x4_t *)(v54 + 32 * v86);
                    float32x4_t v56 = v55[1];
                    float32x4_t v101 = *v55;
                    float32x4_t v102 = v56;
                    unint64_t v57 = v85;
                    if (v23 <= v85) {
                      goto LABEL_101;
                    }
                    uint64_t v58 = (float32x4_t *)(v54 + 32 * v85);
                    float32x4_t v59 = v101;
                    float32x4_t v60 = v102;
                    v59.i32[3] = 0;
                    float32x4_t v61 = *v58;
                    v61.i32[3] = 0;
                    float32x4_t v101 = vminnmq_f32(v59, v61);
                    float32x4_t v62 = v58[1];
                    v60.i32[3] = 0;
                    v62.i32[3] = 0;
                    float32x4_t v63 = vmaxnmq_f32(v60, v62);
                    goto LABEL_68;
                  }
                  unint64_t v67 = v46 - 1;
                  if (v46 > v50) {
                    unint64_t v67 = (unint64_t)(float)(v49 + 0.5);
                  }
                  unint64_t v88 = v67;
                  unsigned int v68 = v67 * v43;
                  *(void *)&long long v111 = *(id *)(v30 + 112);
                  *((void *)&v111 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = __PAIR64__(v43, v68);
                  unint64_t v69 = v23 + 40 * v32;
                  *(_DWORD *)(v69 + 36) = 0;
                  NS::SharedPtr<MTL::Texture>::operator=((void **)v69, (void **)&v111);
                  *(void *)(v33 + 8) = *((void *)&v111 + 1);

                  *(void *)(v69 + 16) = 0;
                  *(void *)(v69 + 24) = 0;
                  *(_DWORD *)(v69 + 32) = 0;
                  if ((void)v111) {

                  }
                  unint64_t v9 = *(void *)(v36 + 96);
                  unint64_t v22 = v88;
                  if (v9 <= v88) {
                    goto LABEL_100;
                  }
                }
                BOOL v64 = (float32x4_t *)(*(void *)(v36 + 104) + 32 * v22);
              }
              float32x4_t v63 = v64[1];
              float32x4_t v101 = *v64;
LABEL_68:
              float32x4_t v102 = v63;
              unint64_t v23 = *(void *)(v96 + 256);
              re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v20, (unsigned __int8 *)(v36 + 8), &v111);
              uint64_t v70 = v111;
              if ((void)v111)
              {
                unint64_t v9 = 0;
                do
                {
                  *(void *)uint64_t v106 = v9;
                  uint64_t v71 = (*(uint64_t (**)(void, unsigned char *))(**((void **)&v113 + 1) + 16))(*((void *)&v113 + 1), v106);
                  unsigned int v72 = re::MeshNameMap::meshPartStartIndexForInstance(v20, v71) + WORD2(v71);
                  unsigned int v73 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData *)(v96 + 232), v72);
                  if (v23 > v73)
                  {
                    unint64_t v22 = v73;
                    uint64_t v74 = *(void *)(*(void *)(*(void *)(a1 + 8) + 112) + 136);
                    re::ecs2::DynamicBoundingBoxComponent::setMeshPartEstimatedBoundingBox(v98, *(void *)(v74 + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(v74 + 16) << 60), v72, &v101);
                    if (v100 <= v22) {
                      goto LABEL_93;
                    }
                    uint64_t v76 = v99 + 168 * v22;
                    ++*(unsigned char *)(v76 + 16);
                    *(void *)(v76 + 152) = v33;
                  }
                  ++v9;
                }
                while (v70 != v9);
              }
              re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v111 + 8);
              uint64_t v30 = (uint64_t)re::ecs2::Component::markDirty(v98);
              unint64_t v9 = (unint64_t)&v104;
              unint64_t v23 = v95;
            }
LABEL_75:
            if (++v32 == v23)
            {
              if (v90) {
                goto LABEL_88;
              }
LABEL_86:
              unint64_t v79 = v103;
              unint64_t v80 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v104);
              float32x2_t v81 = (re::ecs2::ComponentBucketsBase *)a3[2];
              unint64_t v82 = a3[6];
LABEL_87:
              re::ecs2::ComponentBucketsBase::moveComponent(v81, v79, v80, v82);
              goto LABEL_88;
            }
          }
          if (*(void *)v22)
          {
            unsigned int v39 = atomic_load((unsigned int *)(*(void *)v22 + 704));
            if (v39 == 3) {
              goto LABEL_75;
            }
          }
          re::AssetHandle::loadAsync(v34);
          ++v32;
          char v31 = 1;
          if (v32 == v23) {
            goto LABEL_88;
          }
        }
      }
    }
    re::internal::assertLog((re::internal *)4, v28, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_98:
    uint64_t v105 = 0;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v111 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v106 = 136315906;
    *(void *)&v106[4] = "operator[]";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 476;
    __int16 v107 = 2048;
    unint64_t v108 = v22;
    __int16 v109 = 2048;
    unint64_t v110 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_99:
    uint64_t v105 = 0;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v111 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v106 = 136315906;
    *(void *)&v106[4] = "operator[]";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 476;
    __int16 v107 = 2048;
    unint64_t v108 = v22;
    __int16 v109 = 2048;
    unint64_t v110 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_100:
    uint64_t v105 = 0;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v111 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v106 = 136315906;
    *(void *)&v106[4] = "operator[]";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 476;
    __int16 v107 = 2048;
    unint64_t v108 = v22;
    __int16 v109 = 2048;
    unint64_t v110 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_101:
    uint64_t v105 = 0;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v111 = 0u;
    unint64_t v84 = v57;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v106 = 136315906;
    *(void *)&v106[4] = "operator[]";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 476;
    __int16 v107 = 2048;
    unint64_t v108 = v84;
    __int16 v109 = 2048;
    unint64_t v110 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::VertexCacheSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v30[0] = a3;
  v30[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v29);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)a2;
    uint64_t v28 = *(void *)a2 + 8 * v6;
    while (1)
    {
      uint64_t v31 = *v7;
      unint64_t v8 = *(void *)(*(void *)(a1 + 272)
                     + 16
                     * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 264), &v31)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 376, v8);
      unint64_t v9 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 208, v8);
      uint64_t v10 = *(void *)(*v9 + 224);
      unint64_t v11 = v9[3];
      unint64_t v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v11);
      if (*(_DWORD *)(v12 + 40)) {
        int v13 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 24))(v10, v30, v9, v11, v12, 0);
      }
      else {
        int v13 = 0;
      }
      unint64_t v14 = v9[5];
      unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v14);
      if (*(_DWORD *)(v15 + 40)) {
        v13 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 32))(v10, v30, v9, v14, v15, 0);
      }
      unint64_t v16 = v9[6];
      unint64_t v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v16);
      if (*(_DWORD *)(v17 + 40)) {
        break;
      }
      if (v13) {
        goto LABEL_10;
      }
LABEL_11:
      if (*(unsigned char *)(a1 + 440))
      {
        unint64_t v18 = *(void *)(a1 + 384);
        int v19 = *(_DWORD *)(a1 + 392);
        if (v18 < 0xB)
        {
          unint64_t v22 = (uint64_t *)(a1 + 400);
          if ((v19 & 1) == 0) {
            unint64_t v22 = *(uint64_t **)(a1 + 408);
          }
          if (!v18) {
            goto LABEL_29;
          }
          uint64_t v23 = 0;
          uint64_t v24 = 8 * v18;
          do
          {
            uint64_t v25 = *v22++;
            v23 |= v25;
            v24 -= 8;
          }
          while (v24);
          if (!v23) {
            goto LABEL_29;
          }
        }
        else
        {
          unint64_t v20 = (void *)(a1 + 400);
          if ((v19 & 1) == 0) {
            unint64_t v20 = *(void **)(a1 + 408);
          }
          uint64_t v21 = 8 * v18;
          while (!*v20)
          {
            ++v20;
            v21 -= 8;
            if (!v21) {
              goto LABEL_29;
            }
          }
        }
        uint64_t v26 = *(re::ecs2::System **)(a1 + 424);
        if (!*((unsigned char *)v26 + 86)) {
          re::ecs2::System::queueToRun(v26, 0.0);
        }
      }
LABEL_29:
      if (++v7 == (uint64_t *)v28) {
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
      }
    }
    if (((v13 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 40))(v10, v30, v9, v16, v17, 0)) & 1) == 0)goto LABEL_11; {
LABEL_10:
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 376, v8);
    goto LABEL_11;
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
}

uint64_t re::ecs2::VertexCacheSystem::willAddSystemToECSService(re::ecs2::VertexCacheSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v2);
  return re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
}

double re::ecs2::VertexCacheSystem::willRemoveSystemFromECSService(re::ecs2::VertexCacheSystem *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::VertexCacheSystem::willAddSceneToECSService(re::ecs2::VertexCacheSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  unint64_t v4 = (char *)this + 208;
  v57[0] = (uint64_t)a2;
  unint64_t v5 = (re::ecs2::VertexCacheSystem *)((char *)this + 328);
  unint64_t v6 = *((void *)this + 42);
  int v7 = *((_DWORD *)this + 86);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)this + 352);
    }
    else {
      unint64_t v8 = (void *)*((void *)this + 45);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)this + 352);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)this + 45);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 328, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VertexCacheSystem *)((char *)this + 264), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    unint64_t v15 = (char *)this + 376;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 31);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 27);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 26, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 27);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    float32x4_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 224)) {
    int v19 = (char *)this + 232;
  }
  else {
    int v19 = (char *)*((void *)this + 30);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 31);
  ++*((_DWORD *)this + 64);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 31);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 31) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VertexCacheSystem *)((char *)this + 264), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 31);
  unint64_t v29 = *((void *)this + 46);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 46) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 46) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 344)) {
      unint64_t v33 = (char *)this + 352;
    }
    else {
      unint64_t v33 = (char *)*((void *)this + 45);
    }
    *(void *)&v33[8 * *((void *)this + 42) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 31);
  unint64_t v35 = *((void *)this + 52);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 52) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::VertexCacheSystem *)((char *)this + 376), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 52) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 392)) {
      unsigned int v39 = (char *)this + 400;
    }
    else {
      unsigned int v39 = (char *)*((void *)this + 51);
    }
    *(void *)&v39[8 * *((void *)this + 48) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  unint64_t v15 = (char *)this + 376;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 440)) {
    return;
  }
  unint64_t v40 = *((void *)this + 48);
  int v41 = *((_DWORD *)this + 98);
  if (v40 >= 0xB)
  {
    if (v41) {
      float32x4_t v42 = (void *)((char *)this + 400);
    }
    else {
      float32x4_t v42 = (void *)*((void *)this + 51);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    float v48 = (re::ecs2::System *)*((void *)this + 53);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 400);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 51);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::VertexCacheSystem::willRemoveSceneFromECSService(re::ecs2::VertexCacheSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 264);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 33, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 34) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 328, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 376, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 208, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        unint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_VertexCacheComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A430, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A430))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A4B0, "VertexCacheComponent");
    __cxa_guard_release(&qword_26AF8A430);
  }
  return &unk_26AF8A4B0;
}

void re::ecs2::initInfo_VertexCacheComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xF2B611314067C4FELL;
  v20[1] = "VertexCacheComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A438, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8A438);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8A450 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "vertexCaches";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8A458 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "vertexCacheTimes";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x4800000002;
      *(_DWORD *)(v15 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8A460 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      re::IntrospectionInfo<re::DynamicArray<re::Optional<BOOL>>>::get((uint64_t)v16, v17);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "interpolationOverride";
      *(void *)(v18 + 16) = &qword_26AF8A470;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x7000000003;
      *(_DWORD *)(v18 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8A468 = v18;
      __cxa_guard_release(&qword_26AF8A438);
    }
  }
  *((void *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8A450;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VertexCacheComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::VertexCacheComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::VertexCacheComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VertexCacheComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

void re::IntrospectionInfo<re::DynamicArray<re::Optional<BOOL>>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A448))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8A470);
    qword_26AF8A470 = (uint64_t)&unk_26E702CF8;
    __cxa_guard_release(&qword_26AF8A448);
  }
  if ((_MergedGlobals_263 & 1) == 0)
  {
    uint64_t v2 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, a2);
    if ((_MergedGlobals_263 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      _MergedGlobals_263 = 1;
      int v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8A470, 0);
      qword_26AF8A480 = 0x2800000003;
      dword_26AF8A488 = v4;
      word_26AF8A48C = 0;
      *(void *)&xmmword_26AF8A490 = 0;
      *((void *)&xmmword_26AF8A490 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      qword_26AF8A4A0 = v3;
      unk_26AF8A4A8 = 0;
      qword_26AF8A470 = (uint64_t)&unk_26E702CF8;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF8A470, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      unint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF8A490 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::ecs2::VertexCacheComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::VertexCacheComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VertexCacheComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::~FramePersistentPtr((id *)(a3 + 192));
  re::DynamicArray<re::BindPoint>::deinit(a3 + 152);
  re::DynamicArray<unsigned long>::deinit(a3 + 112);
  re::DynamicArray<unsigned long>::deinit(a3 + 72);
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 32);
  *(void *)a3 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::VertexCacheComponent>(uint64_t a1)
{
  re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::~FramePersistentPtr((id *)(a1 + 192));
  re::DynamicArray<re::BindPoint>::deinit(a1 + 152);
  re::DynamicArray<unsigned long>::deinit(a1 + 112);
  re::DynamicArray<unsigned long>::deinit(a1 + 72);
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 32);
  *(void *)a1 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_VertexCacheComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VertexCacheComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VertexCacheComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VertexCacheComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VertexCacheComponent>, this);
}

void *re::ecs2::allocInfo_VertexCacheSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A440, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A440))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A528, "VertexCacheSystem");
    __cxa_guard_release(&qword_26AF8A440);
  }
  return &unk_26AF8A528;
}

void re::ecs2::initInfo_VertexCacheSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xDE383D715B7ED7DALL;
  v5[1] = "VertexCacheSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1C000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_VertexCacheSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VertexCacheSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::VertexCacheSystem>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::VertexCacheSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::VertexCacheSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::VertexCacheSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VertexCacheSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::VertexCacheSystem *re::internal::defaultConstruct<re::ecs2::VertexCacheSystem>(int a1, int a2, re::ecs2::VertexCacheSystem *this)
{
  return re::ecs2::VertexCacheSystem::VertexCacheSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::VertexCacheSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 26);
  a3[21] = &unk_26E702AA0;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 23);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::VertexCacheSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 26);
  a1[21] = &unk_26E702AA0;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 23);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VertexCacheSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VertexCacheSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VertexCacheSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VertexCacheSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VertexCacheSystem>, this);
}

uint64_t re::ecs2::VertexCacheComponentStateImpl::dependsOnComponents(re::ecs2::VertexCacheComponentStateImpl *this)
{
  return *((void *)this + 4);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VertexCacheComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VertexCacheComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::VertexCacheSystem::~VertexCacheSystem(re::ecs2::VertexCacheSystem *this)
{
  *((void *)this + 2re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = &unk_26E702AA0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 23);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 26);
  *((void *)this + 2re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = &unk_26E702AA0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 23);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::VertexCacheSystem::typeInfo(re::ecs2::VertexCacheSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VertexCacheSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VertexCacheSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VertexCacheSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VertexCacheSystem>, 0);
}

void *re::DynamicArray<re::BindPoint>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::BindPoint>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 48 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::BindPoint::BindPoint(v11, v8);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)(v8 + 1));
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)(v8 + 1));
          v8 += 6;
          v11 += 48;
          v10 -= 48;
        }
        while (v10);
        unint64_t v8 = (uint64_t *)v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E702B98;
    v10[1] = a1;
    _OWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    long long v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    char v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E702BF0;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    uint64_t v16[3] = 0;
    unint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    long long v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E702C48;
    v22[1] = a1;
    _OWORD v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E702CA0;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidAddEvent>;
    uint64_t v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E702B98;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        unsigned int v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E702BF0;
        v43[1] = a1;
        float32x4_t v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        unsigned int v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        float v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E702C48;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        _OWORD v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E702CA0;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        float32x4_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    char v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    char v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    char v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    char v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    char v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    char v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    char v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    char v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702B98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702B98;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702BF0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702BF0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702C48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702C48;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E702CA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E702CA0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::IntrospectionInfo<re::Optional<BOOL>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info = (uint64_t)&unk_26E702D90;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = (re *)re::introspect_BOOL((re *)1, a2);
  if (re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info, 0);
    qword_268774C98 = 0x20000000DLL;
    dword_268774CA0 = v10;
    word_268774CA4 = 0;
    *(void *)&xmmword_268774CA8 = 0;
    *((void *)&xmmword_268774CA8 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
    qword_268774CB8 = v9;
    unk_268774CC0 = 0;
    re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info = (uint64_t)&unk_26E702D90;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      uint64_t v13 = v16;
    }
    else {
      uint64_t v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_268774CA8 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info;
}

void *re::IntrospectionDynamicArray<re::Optional<BOOL>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::Optional<BOOL>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::Optional<BOOL>>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::Optional<BOOL>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::Optional<BOOL>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  unint64_t result = re::DynamicArray<re::Optional<BOOL>>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::Optional<BOOL>>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    unint64_t result = re::DynamicArray<re::Optional<BOOL>>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::Optional<BOOL>>::resize((void *)a4, a5);
    }
  }
  else
  {
    unint64_t result = re::DynamicArray<re::Optional<BOOL>>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      unint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::Optional<BOOL>>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::Optional<BOOL>>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::Optional<BOOL>>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v13 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 2 * v8);
  *(unsigned char *)uint64_t v13 = 0;
  *(void *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::Optional<BOOL>>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::Optional<BOOL>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 2 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 2 * a3;
}

void *re::DynamicArray<re::Optional<BOOL>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::Optional<BOOL>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if ((a2 & 0x8000000000000000) != 0)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 2, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 2 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 2 * a2, 1);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_17;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_17:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = (char *)v7 + 1;
        uint64_t v11 = 2 * v9;
        unint64_t v12 = (unsigned char *)(v8 + 1);
        do
        {
          int v13 = *(v12 - 1);
          *(v10 - re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v13;
          if (v13) {
            *unint64_t v10 = *v12;
          }
          v10 += 2;
          v12 += 2;
          v11 -= 2;
        }
        while (v11);
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_17;
    }
  }
  return result;
}

void *re::DynamicArray<re::Optional<BOOL>>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      unint64_t result = re::DynamicArray<re::Optional<BOOL>>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = (unsigned char *)(v3[4] + 2 * v4);
      do
      {
        unsigned char *v6 = 0;
        v6 += 2;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 2uLL, 1uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionOptional<BOOL>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<BOOL>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<BOOL>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<BOOL>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<BOOL>::setHasValue(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3)
  {
    if (!*a2) {
      *a2 = 1;
    }
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<BOOL>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  unint64_t result = a1 + 1;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned char *re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned char *result, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*result) {
      *unint64_t result = 1;
    }
    result[1] = v2;
  }
  else if (*result)
  {
    *unint64_t result = 0;
  }
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  unint64_t result = re::DynamicArray<re::Optional<BOOL>>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::Optional<BOOL>>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<BOOL>>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 2 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 2 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 2 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::VertexCacheComponent>(uint64_t a1)
{
  *(void *)(a1 + 24objc_initWeak(location, 0) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 16objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  uint64_t v2 = (id *)(a1 + 192);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E08B0;
  *(void *)(v3 + 4objc_initWeak(location, 0) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)(v3 + 184) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 8objc_initWeak(location, 0) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 16objc_initWeak(location, 0) = 0u;
  *(_DWORD *)(v3 + 176) = 0;
  inited = (re *)objc_initWeak(v2, 0);
  *(void *)(a1 + 20objc_initWeak(location, 0) = 0;
  *(void *)(a1 + 232) = re::globalAllocators(inited)[2];
  *(void *)(a1 + 24objc_initWeak(location, 0) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::VertexCacheSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VertexCacheSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void re::ecs2::accessibility::introspect_Importance(re::ecs2::accessibility *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A5A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF8A5A8);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v26 + 2) = "Default";
      qword_26AF8A5C8 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + 16) = "High";
      qword_26AF8A5D0 = v28;
      __cxa_guard_release(&qword_26AF8A5A8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A5B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A5B0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF8A5F0, "Importance", 1, 1, 1, 1);
    qword_26AF8A5F0 = (uint64_t)&unk_26E715E00;
    qword_26AF8A630 = (uint64_t)&re::ecs2::accessibility::introspect_Importance(BOOL)::enumTable;
    dword_26AF8A600 = 9;
    __cxa_guard_release(&qword_26AF8A5B0);
  }
  if ((_MergedGlobals_264 & 1) == 0)
  {
    _MergedGlobals_264 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF8A5F0, a2);
    uint64_t v30 = 0xE65B5EB096D28;
    uint64_t v31 = "Importance";
    v34[0] = 0x31CD534126;
    v34[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      unint64_t v4 = (unsigned int *)qword_26AF8A630;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF8A610 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "Importance", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::accessibility::allocInfo_CustomContent(re::ecs2::accessibility *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A5B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A5B8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A638, "CustomContent");
    __cxa_guard_release(&qword_26AF8A5B8);
  }
  return &unk_26AF8A638;
}

void re::ecs2::accessibility::initInfo_CustomContent(re::ecs2::accessibility *this, re::IntrospectionBase *a2)
{
  v17[0] = 0xDF8C99149F5BF50;
  v17[1] = "CustomContent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A5C0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8A5C0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "label";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF8A5D8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "value";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF8A5E0 = v12;
      int v13 = (re::ecs2::accessibility *)re::introspectionAllocator((re *)v12);
      re::ecs2::accessibility::introspect_Importance(v13, v14);
      uint64_t v15 = (*(uint64_t (**)(re::ecs2::accessibility *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "importance";
      *(void *)(v15 + 16) = &qword_26AF8A5F0;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x4000000003;
      *(_DWORD *)(v15 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8A5E8 = v15;
      __cxa_guard_release(&qword_26AF8A5C0);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8A5D8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::accessibility::CustomContent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::accessibility::CustomContent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::accessibility::CustomContent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::accessibility::CustomContent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void *re::internal::defaultConstruct<re::ecs2::accessibility::CustomContent>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  unint64_t v5 = (void *)(a3 + 32);
  return re::DynamicString::setCapacity(v5, 0);
}

double re::internal::defaultDestruct<re::ecs2::accessibility::CustomContent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

void *re::internal::defaultConstructV2<re::ecs2::accessibility::CustomContent>(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1, 0);
  a1[2] = 0u;
  a1[3] = 0u;
  uint64_t v3 = a1 + 2;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestructV2<re::ecs2::accessibility::CustomContent>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::ecs2::accessibility::introspect_CustomContent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomContent", (uint64_t (*)(re::internal *))re::ecs2::accessibility::allocInfo_CustomContent, (re::IntrospectionBase *(*)(void))re::ecs2::accessibility::initInfo_CustomContent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::accessibility::CustomContent>, this);
}

uint64_t re::audio::anonymous namespace'::AttributesNeededForTheseModes(int a1, int a2)
{
  if ((a1 - 2) >= 7) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = 0x10010101080204uLL >> (8 * (a1 - 2));
  }
  switch(a2)
  {
    case 2:
      v2 |= 4u;
      break;
    case 3:
      v2 |= 2u;
      break;
    case 4:
      v2 |= 8u;
      break;
    case 5:
      v2 |= 1u;
      break;
    case 8:
      v2 |= 0x10u;
      break;
    default:
      return v2;
  }
  return v2;
}

void re::audio::MeshVisualizer::setupMaterials(re::audio::MeshVisualizer *this, re::AssetManager *a2, re::RenderManager *a3)
{
  int v5 = *((_DWORD *)this + 26);
  if (v5 != 1)
  {
    if (v5) {
      return;
    }
    int v6 = 1;
    re::AssetManager::assetHandle(a2, "engine:AudioMeshDebugVisualization.rematerialdefinition", 1, 0, (uint64_t *)&v15);
    long long v7 = *((_OWORD *)this + 3);
    *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v15;
    long long v15 = v7;
    uint64_t v8 = *((void *)this + 8);
    *((void *)this + 8) = v16;
    uint64_t v16 = v8;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
    re::AssetHandle::loadAsync((re::audio::MeshVisualizer *)((char *)this + 48));
    goto LABEL_7;
  }
  uint64_t v9 = *((void *)this + 7);
  if (v9)
  {
    unsigned int v10 = atomic_load((unsigned int *)(v9 + 704));
    if (v10 == 2)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (re::audio::MeshVisualizer *)((char *)this + 48));
      re::MaterialAsset::makeMaterialMemoryAsset((uint64_t)a2, (uint64_t)a3, (re::AssetHandle *)v14, 0, 0);
      long long v12 = *(_OWORD *)((char *)this + 72);
      *(_OWORD *)((char *)this + 72) = v15;
      long long v15 = v12;
      uint64_t v13 = *((void *)this + 11);
      *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v16;
      uint64_t v16 = v13;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
      int v6 = 2;
LABEL_7:
      *((_DWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 26) = v6;
    }
  }
}

void re::audio::MeshVisualizer::setMaterial(re::audio::MeshVisualizer *this, re::RenderManager *a2, re::PrimitiveRenderingContext *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 26) == 2)
  {
    *((void *)a3 + 14objc_initWeak(location, 0) = *(void *)(re::AssetHandle::asset<re::MaterialAsset>((re::audio::MeshVisualizer *)((char *)this + 72))
                                      + 1664);
    if (*((_DWORD *)this + 24))
    {
      MurmurHash3_x64_128((uint64_t)"Transparent", 11, 0, &v12);
      v11.n128_u64[0] = (v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
      size_t v6 = strlen(re::audio::MeshVisualizer::setMaterial(re::RenderManager *,re::PrimitiveRenderingContext *)::solidTechniqueNames[*((int *)this + 24) - 1]);
      if (v6)
      {
        MurmurHash3_x64_128((uint64_t)re::audio::MeshVisualizer::setMaterial(re::RenderManager *,re::PrimitiveRenderingContext *)::solidTechniqueNames[*((int *)this + 24) - 1], v6, 0, &v12);
        unint64_t v7 = (v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
      }
      else
      {
        unint64_t v7 = 0;
      }
      v11.n128_u64[1] = v7;
      re::DynamicArray<re::RigNodeConstraint>::add((re::PrimitiveRenderingContext *)((char *)a3 + 1136), &v11);
    }
    if (*((_DWORD *)this + 25))
    {
      uint64_t v8 = (re::PrimitiveRenderingContext *)((char *)a3 + 1136);
      MurmurHash3_x64_128((uint64_t)"PrimitiveRendererWireframe", 26, 0, &v12);
      v11.n128_u64[0] = (v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
      size_t v9 = strlen(re::audio::MeshVisualizer::setMaterial(re::RenderManager *,re::PrimitiveRenderingContext *)::wireTechniqueNames[*((int *)this + 25) - 1]);
      if (v9)
      {
        MurmurHash3_x64_128((uint64_t)re::audio::MeshVisualizer::setMaterial(re::RenderManager *,re::PrimitiveRenderingContext *)::wireTechniqueNames[*((int *)this + 25) - 1], v9, 0, &v12);
        unint64_t v10 = (v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
      }
      else
      {
        unint64_t v10 = 0;
      }
      v11.n128_u64[1] = v10;
      re::DynamicArray<re::RigNodeConstraint>::add(v8, &v11);
    }
    *((void *)this + 14) = a2;
  }
}

void re::audio::MeshVisualizer::addDebugVisMesh(uint64_t a1, const re::AssetHandle *a2, unint64_t a3)
{
  if (!re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a1, (uint64_t)a2))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v6, a2);
    re::audio::MeshVisualizer::updateDebugVisMesh(a1, (const re::AssetHandle *)v6, a3);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  }
}

BOOL re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    unint64_t v2 = *(void *)(a2 + 8);
    if (v2) {
      uint64_t v3 = *(void *)(v2 + 664);
    }
    else {
      uint64_t v3 = 0;
    }
    unint64_t v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v3 ^ (v5 >> 31) ^ v5) % *(unsigned int *)(a1 + 24)));
    uint64_t v4 = 0x7FFFFFFFLL;
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v4 = 0x7FFFFFFFLL;
      while (*(void *)(v7 + 56 * v6 + 24) != v2)
      {
        uint64_t v6 = *(_DWORD *)(v7 + 56 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return v4 != 0x7FFFFFFF;
        }
      }
      uint64_t v4 = v6;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFLL;
  }
  return v4 != 0x7FFFFFFF;
}

void re::audio::MeshVisualizer::updateDebugVisMesh(uint64_t a1, const re::AssetHandle *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  uint64_t v6 = a1;
  uint64_t v226 = *MEMORY[0x263EF8340];
  int v7 = *(_DWORD *)(a1 + 96);
  if (!__PAIR64__(*(_DWORD *)(v6 + 100), v7)) {
    return;
  }
  if (!*(_DWORD *)(a3 + 40)) {
    return;
  }
  if (v9)
  {
    uint64_t v16 = (unsigned char *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), "vertexNormal");
    if (!v16
      || v16[16] != 1
      || (*(unsigned int (**)(unsigned char *))(*(void *)v16 + 16))(v16) != *(_DWORD *)(v4 + 16))
    {
      return;
    }
  }
  if ((v9 & 2) != 0)
  {
    uint64_t v17 = (unsigned char *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), "classification");
    if (!v17
      || v17[16] != 2
      || (*(unsigned int (**)(unsigned char *))(*(void *)v17 + 16))(v17) != *(_DWORD *)(v4 + 40))
    {
      return;
    }
  }
  if ((v9 & 4) != 0)
  {
    long long v18 = (unsigned char *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), "vertexColor");
    if (!v18
      || v18[16] != 1
      || (*(unsigned int (**)(unsigned char *))(*(void *)v18 + 16))(v18) != *(_DWORD *)(v4 + 16))
    {
      return;
    }
  }
  if ((v9 & 8) != 0 {
    || v9 >= 0x10
  }
  {
    return;
  }
  uint64_t v10 = *(unsigned int *)(v6 + 120);
  unint64_t v12 = (void *)*(unsigned int *)(v4 + 40);
  if ((v11 & 2) != 0
    && (uint64_t v13 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), "classification")) != 0)
  {
    uint64_t v14 = v13;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 16))(v13))
    {
      uint64_t v189 = re::internal::GeomTypedAttribute<int>::operator[](v14, 0);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
    }
    else
    {
      uint64_t v189 = 0;
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v189 = 0;
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  unint64_t v19 = v10 << 32;
  unint64_t v181 = v4;
  unsigned int v170 = v10;
  if (v11 < 8)
  {
    uint64_t v194 = 0;
    LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = -1;
    if ((v11 & 2) == 0) {
      goto LABEL_38;
    }
LABEL_37:
    if (!*(unsigned char *)(v6 + 400)) {
      goto LABEL_49;
    }
    goto LABEL_38;
  }
  uint64_t v21 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), (const char *)re::AcousticMeshAsset::kMaterialAttributeName);
  if (v21)
  {
    uint64_t v22 = v21;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 16))(v21))
    {
      uint64_t v194 = re::internal::GeomTypedAttribute<int>::operator[](v22, 0);
      LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
    }
    else
    {
      uint64_t v194 = 0;
      LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
    }
  }
  else
  {
    uint64_t v194 = 0;
    LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = -1;
  }
  unint64_t v4 = v181;
  if ((v11 & 2) != 0) {
    goto LABEL_37;
  }
LABEL_38:
  if (((v11 & 8) == 0 || *(unsigned char *)(v6 + 401)) && (v11 < 0x10 || *(unsigned char *)(v6 + 402)))
  {
    uint64_t v23 = *(unsigned int *)(v4 + 40);
    if (*(_DWORD *)(v4 + 40))
    {
      uint64_t v24 = 0;
      uint64_t v25 = (int *)(*(void *)(v4 + 56) + 12);
      do
      {
        int v26 = *v25;
        v25 += 4;
        if (v26 == -1) {
          uint64_t v27 = 1;
        }
        else {
          uint64_t v27 = 2;
        }
        v24 += v27;
        --v23;
      }
      while (v23);
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v31 = 3 * v24;
    unsigned int v183 = 1;
    goto LABEL_83;
  }
LABEL_49:
  if (!v12)
  {
    unint64_t v43 = v19;
    int v44 = 0;
    unint64_t v173 = 0;
    goto LABEL_261;
  }
  uint64_t v28 = a2;
  unint64_t v29 = v4;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = v20;
  unint64_t v3 = v15;
  unint64_t v33 = *(void *)(v29 + 40);
  unint64_t v34 = (_DWORD *)(*(void *)(v29 + 56) + 12);
  do
  {
    if ((v11 & 2) != 0)
    {
      if (v30 >= v15) {
        goto LABEL_414;
      }
      unint64_t v35 = *(int *)(v189 + 4 * v30);
      BOOL v36 = (int)v35 >= 1 && *(void *)(v6 + 376) > v35;
      if (v36 && ((*(void *)(*(void *)(v6 + 368) + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) != 0) {
        goto LABEL_75;
      }
    }
    if ((v11 & 8) != 0)
    {
      if (v30 >= v20) {
        goto LABEL_420;
      }
      unint64_t v37 = *(int *)(v194 + 4 * v30);
      BOOL v38 = (int)v37 >= 1 && *(void *)(v6 + 296) > v37;
      if (v38 && ((*(void *)(*(void *)(v6 + 288) + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v37) & 1) != 0) {
        goto LABEL_75;
      }
    }
    if (v11 >= 0x10)
    {
      if (v30 >= v20) {
        goto LABEL_422;
      }
      unint64_t v39 = *(int *)(v194 + 4 * v30);
      BOOL v40 = (int)v39 >= 1 && *(void *)(v6 + 216) > v39;
      if (v40 && ((*(void *)(*(void *)(v6 + 208) + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
      {
LABEL_75:
        if (v33 <= v30) {
          goto LABEL_421;
        }
        if (*v34 == -1) {
          v31 += 3;
        }
        else {
          v31 += 6;
        }
      }
    }
    ++v30;
    v34 += 4;
  }
  while (v12 != (void *)v30);
  unsigned int v183 = 0;
  a2 = v28;
LABEL_83:
  if (!v31)
  {
    unint64_t v43 = v19;
    int v44 = 0;
    unint64_t v173 = 0;
    unint64_t v12 = 0;
LABEL_261:
    int v174 = 0;
    int v172 = 0;
    unint64_t v175 = 0;
    uint64_t v176 = 0;
    int v102 = 0;
    uint64_t v177 = 0;
    int v178 = 0;
    unint64_t v103 = 0;
    long long v104 = 0;
    goto LABEL_373;
  }
  unint64_t v171 = v31;
  uint64_t v41 = *(void *)(v6 + 112);
  if (v41) {
    id v42 = *(id *)(v41 + 184);
  }
  else {
    id v42 = MTLCreateSystemDefaultDevice();
  }
  int v168 = a2;
  uint64_t v185 = (void *)v6;
  id v45 = v42;

  int v169 = v45;
  int v167 = (void *)[v45 newBufferWithLength:4 * v171 options:0];
  uint64_t v32 = [v167 contents];
  *(_OWORD *)uint64_t v200 = 0u;
  *(_OWORD *)uint64_t v201 = 0u;
  float v202 = 1.0;
  size_t v46 = (unint64_t)(float)v171;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v200, v46);
  *(_OWORD *)unint64_t v197 = 0u;
  *(_OWORD *)__p = 0u;
  float v199 = 1.0;
  unint64_t v47 = (unint64_t)v197;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v197, v46);
  unint64_t v30 = v181;
  unsigned int v48 = *(_DWORD *)(v181 + 40);
  if (v48)
  {
    uint64_t v49 = 0;
    uint64_t v184 = 0;
    unint64_t v33 = 0x9E3779B97F4A7C17;
    uint64_t v179 = v32;
    unint64_t v188 = v15;
    unint64_t v193 = v20;
    unint64_t v20 = 0;
    while (1)
    {
      if (v183) {
        goto LABEL_91;
      }
      if ((v11 & 2) != 0)
      {
        if (v20 >= v188) {
          goto LABEL_424;
        }
        unint64_t v86 = *(int *)(v189 + 4 * v20);
        BOOL v87 = (int)v86 >= 1 && v185[47] > v86;
        if (v87 && ((*(void *)(v185[46] + ((v86 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v86) & 1) != 0) {
          goto LABEL_91;
        }
      }
      if ((v11 & 8) != 0)
      {
        if (v20 >= v193) {
          goto LABEL_425;
        }
        unint64_t v88 = *(int *)(v194 + 4 * v20);
        if ((int)v88 >= 1 && v185[37] > v88)
        {
          uint64_t v95 = *(void *)(v185[36] + ((v88 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v88);
          if (v11 < 0x10 || v95)
          {
            if (!v95) {
              goto LABEL_251;
            }
            goto LABEL_91;
          }
        }
        else if (v11 <= 0xF)
        {
          goto LABEL_251;
        }
      }
      else if (v11 < 0x10)
      {
        goto LABEL_251;
      }
      if (v20 >= v193) {
        goto LABEL_426;
      }
      unint64_t v96 = *(int *)(v194 + 4 * v20);
      if ((int)v96 < 1
        || v185[27] <= v96
        || ((*(void *)(v185[26] + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
      {
LABEL_251:
        uint64_t v93 = v184;
        uint64_t v32 = v49;
        goto LABEL_252;
      }
LABEL_91:
      *(void *)&v212[2] = 0;
      memset(v210, 0, sizeof(v210));
      unint64_t v50 = re::internal::GeomBaseTopology::faceVertices(v181 + 16, v20, (uint64_t)v210);
      unint64_t v208 = 0;
      v205[1] = 0;
      unint64_t v206 = 0;
      int v207 = 0;
      uint64_t v195 = v50;
      re::DynamicArray<int>::setCapacity(v205, v50);
      ++v207;
      if (v50)
      {
        unint64_t v51 = 0;
        unint64_t v191 = v20;
        while (1)
        {
          int v204 = 0;
          unint64_t v30 = *(void *)&v210[16];
          if (*(void *)&v210[16] <= v51)
          {
            uint64_t v209 = 0;
            long long v224 = 0u;
            long long v225 = 0u;
            long long v222 = 0u;
            long long v223 = 0u;
            __n128 v221 = 0u;
            unint64_t v50 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v213 = 136315906;
            v214 = "operator[]";
            __int16 v215 = 1024;
            int v216 = 789;
            __int16 v217 = 2048;
            uint64_t v218 = v51;
            __int16 v219 = 2048;
            uint64_t v220 = v30;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_410:
            uint64_t v209 = 0;
            long long v224 = 0u;
            long long v225 = 0u;
            long long v222 = 0u;
            long long v223 = 0u;
            __n128 v221 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v213 = 136315906;
            v214 = "operator[]";
            __int16 v215 = 1024;
            int v216 = 601;
            __int16 v217 = 2048;
            uint64_t v218 = v20;
            __int16 v219 = 2048;
            uint64_t v220 = v188;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_411:
            uint64_t v209 = 0;
            long long v224 = 0u;
            long long v225 = 0u;
            long long v222 = 0u;
            long long v223 = 0u;
            __n128 v221 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v213 = 136315906;
            v214 = "operator[]";
            __int16 v215 = 1024;
            int v216 = 601;
            __int16 v217 = 2048;
            uint64_t v218 = v20;
            __int16 v219 = 2048;
            uint64_t v220 = v193;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_412:
            uint64_t v209 = 0;
            long long v224 = 0u;
            long long v225 = 0u;
            long long v222 = 0u;
            long long v223 = 0u;
            __n128 v221 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v213 = 136315906;
            v214 = "operator[]";
            __int16 v215 = 1024;
            int v216 = 601;
            __int16 v217 = 2048;
            uint64_t v218 = v20;
            __int16 v219 = 2048;
            uint64_t v220 = v193;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_413:
            v205[0] = 0;
            long long v224 = 0u;
            long long v225 = 0u;
            long long v222 = 0u;
            long long v223 = 0u;
            __n128 v221 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v210 = 136315906;
            *(void *)&v210[4] = "operator[]";
            *(_WORD *)&v210[12] = 1024;
            *(_DWORD *)&v210[14] = 601;
            *(_WORD *)&v210[18] = 2048;
            *(void *)&v210[20] = v50;
            __int16 v211 = 2048;
            *(void *)uint64_t v212 = v194;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_414:
            v205[0] = 0;
            long long v224 = 0u;
            long long v225 = 0u;
            long long v222 = 0u;
            long long v223 = 0u;
            __n128 v221 = 0u;
            unint64_t v50 = (unint64_t)v210;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v210 = 136315906;
            *(void *)&v210[4] = "operator[]";
            *(_WORD *)&v210[12] = 1024;
            *(_DWORD *)&v210[14] = 601;
            *(_WORD *)&v210[18] = 2048;
            *(void *)&v210[20] = v30;
            __int16 v211 = 2048;
            *(void *)uint64_t v212 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_415:
            *(void *)&long long v203 = 0;
            long long v224 = 0u;
            long long v225 = 0u;
            long long v222 = 0u;
            long long v223 = 0u;
            __n128 v221 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v213 = 136315906;
            v214 = "operator[]";
            __int16 v215 = 1024;
            int v216 = 789;
            __int16 v217 = 2048;
            uint64_t v218 = 0;
            __int16 v219 = 2048;
            uint64_t v220 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_416;
          }
          uint64_t v52 = *(unsigned int *)(*(void *)&v212[2] + 4 * v51);
          LODWORD(v20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)(*(void *)&v212[2] + 4 * v51);
          if ((v11 & 2) != 0)
          {
            if (v20 >= v188) {
              goto LABEL_410;
            }
            int v53 = *(_DWORD *)(v189 + 4 * v20);
          }
          else
          {
            int v53 = -1;
          }
          DWORD1(v20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v53;
          if ((v11 & 8) == 0) {
            break;
          }
          if (v20 >= v193) {
            goto LABEL_411;
          }
          int v54 = *(_DWORD *)(v194 + 4 * v20);
          DWORD2(v20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v54;
          if (v11 > 0xF)
          {
            int v55 = v54;
LABEL_105:
            int v56 = v54;
            int v54 = v55;
            goto LABEL_107;
          }
          int v56 = -1;
LABEL_107:
          HIDWORD(v20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v56;
          LOBYTE(v204) = v11;
          unint64_t v57 = v52 - 0x61C8864680B583E9;
          v221.n128_u32[0] = 0;
          if ((v11 & 2) != 0) {
            v57 ^= (v57 << 6) - 0x61C8864680B583E9 + (v57 >> 2) + v53;
          }
          if ((v11 & 8) != 0) {
            v57 ^= v54 - 0x61C8864680B583E9 + (v57 << 6) + (v57 >> 2);
          }
          if (v11 >= 0x10) {
            unint64_t v30 = (v56 - 0x61C8864680B583E9 + (v57 << 6) + (v57 >> 2)) ^ v57;
          }
          else {
            unint64_t v30 = v57;
          }
          unint64_t v3 = (unint64_t)v200[1];
          if (v200[1])
          {
            uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v200[1]);
            v58.i16[0] = vaddlv_u8(v58);
            unint64_t v50 = v58.u32[0];
            if (v58.u32[0] > 1uLL)
            {
              unint64_t v47 = v30;
              if ((void *)v30 >= v200[1]) {
                unint64_t v47 = v30 % (unint64_t)v200[1];
              }
            }
            else
            {
              unint64_t v47 = ((unint64_t)v200[1] - 1) & v30;
            }
            float32x4_t v59 = v200[0];
            __int16 v60 = (uint64_t **)*((void *)v200[0] + v47);
            if (!v60 || (uint64_t v61 = *v60) == 0)
            {
LABEL_131:
              v221.n128_u32[0] = v49;
              if (v50 > 1)
              {
                unint64_t v47 = v30;
                unint64_t v33 = 0x9E3779B97F4A7C17;
                if (v30 >= v3) {
                  unint64_t v47 = v30 % v3;
                }
              }
              else
              {
                unint64_t v47 = (v3 - 1) & v30;
                unint64_t v33 = 0x9E3779B97F4A7C17;
              }
              uint64_t v32 = (v49 + 1);
              unint64_t v63 = (void *)v59[v47];
              if (!v63 || (uint64_t v64 = (void *)*v63) == 0)
              {
                unint64_t v20 = v191;
                goto LABEL_148;
              }
              while (1)
              {
                unint64_t v65 = v64[1];
                if (v65 == v30)
                {
                  {
                    unint64_t v20 = v191;
                    unint64_t v33 = 0x9E3779B97F4A7C17;
                    goto LABEL_171;
                  }
                }
                else
                {
                  if (v50 > 1)
                  {
                    if (v65 >= v3) {
                      v65 %= v3;
                    }
                  }
                  else
                  {
                    v65 &= v3 - 1;
                  }
                  if (v65 != v47)
                  {
LABEL_146:
                    unint64_t v20 = v191;
                    unint64_t v33 = 0x9E3779B97F4A7C17;
                    goto LABEL_148;
                  }
                }
                uint64_t v64 = (void *)*v64;
                if (!v64) {
                  goto LABEL_146;
                }
              }
            }
            while (1)
            {
              unint64_t v62 = v61[1];
              if (v62 == v30)
              {
                {
                  v221.n128_u32[0] = *((_DWORD *)v61 + 9);
                  uint64_t v32 = v49;
                  unint64_t v20 = v191;
                  unint64_t v33 = 0x9E3779B97F4A7C17;
                  goto LABEL_209;
                }
              }
              else
              {
                if (v50 > 1)
                {
                  if (v62 >= v3) {
                    v62 %= v3;
                  }
                }
                else
                {
                  v62 &= v3 - 1;
                }
                if (v62 != v47) {
                  goto LABEL_131;
                }
              }
              uint64_t v61 = (uint64_t *)*v61;
              if (!v61) {
                goto LABEL_131;
              }
            }
          }
          uint64_t v32 = (v49 + 1);
          v221.n128_u32[0] = v49;
LABEL_148:
          unint64_t v50 = (unint64_t)operator new(0x28uLL);
          *(void *)unint64_t v50 = 0;
          *(void *)(v50 + 8) = v30;
          *(_OWORD *)(v50 + 16) = v203;
          *(_DWORD *)(v50 + 32) = v204;
          *(_DWORD *)(v50 + 36) = v49;
          float v66 = (float)((unint64_t)v201[1] + 1);
          if (!v3 || (float)(v202 * (float)v3) < v66)
          {
            BOOL v67 = v3 < 3 || (v3 & (v3 - 1)) != 0;
            unint64_t v68 = v67 | (2 * v3);
            unint64_t v69 = vcvtps_u32_f32(v66 / v202);
            if (v68 <= v69) {
              size_t v70 = v69;
            }
            else {
              size_t v70 = v68;
            }
            std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v200, v70);
            unint64_t v3 = (unint64_t)v200[1];
            if (((unint64_t)v200[1] & ((unint64_t)v200[1] - 1)) != 0)
            {
              if ((void *)v30 >= v200[1]) {
                unint64_t v47 = v30 % (unint64_t)v200[1];
              }
              else {
                unint64_t v47 = v30;
              }
            }
            else
            {
              unint64_t v47 = ((unint64_t)v200[1] - 1) & v30;
            }
          }
          uint64_t v71 = v200[0];
          unsigned int v72 = (unint64_t *)*((void *)v200[0] + v47);
          if (v72)
          {
            *(void *)unint64_t v50 = *v72;
LABEL_169:
            unint64_t *v72 = v50;
            goto LABEL_170;
          }
          *(void **)unint64_t v50 = v201[0];
          v201[0] = (void *)v50;
          v71[v47] = v201;
          if (*(void *)v50)
          {
            unint64_t v73 = *(void *)(*(void *)v50 + 8);
            if ((v3 & (v3 - 1)) != 0)
            {
              if (v73 >= v3) {
                v73 %= v3;
              }
            }
            else
            {
              v73 &= v3 - 1;
            }
            unsigned int v72 = (unint64_t *)((char *)v200[0] + 8 * v73);
            goto LABEL_169;
          }
LABEL_170:
          ++v201[1];
          LODWORD(v49) = v221.n128_u32[0];
LABEL_171:
          unint64_t v3 = v49;
          unint64_t v30 = (unint64_t)v197[1];
          if (v197[1])
          {
            uint8x8_t v74 = (uint8x8_t)vcnt_s8((int8x8_t)v197[1]);
            v74.i16[0] = vaddlv_u8(v74);
            if (v74.u32[0] > 1uLL)
            {
              unint64_t v47 = v49;
              if (v197[1] <= (void *)v49) {
                unint64_t v47 = v49 % (unint64_t)v197[1];
              }
            }
            else
            {
              unint64_t v47 = (LODWORD(v197[1]) - 1) & v49;
            }
            uint64_t v75 = (uint64_t **)*((void *)v197[0] + v47);
            if (v75)
            {
              for (unint64_t i = *v75; i; unint64_t i = (uint64_t *)*i)
              {
                unint64_t v77 = i[1];
                if (v77 == v49)
                {
                  if (*((_DWORD *)i + 4) == v49) {
                    goto LABEL_209;
                  }
                }
                else
                {
                  if (v74.u32[0] > 1uLL)
                  {
                    if ((void *)v77 >= v197[1]) {
                      v77 %= (unint64_t)v197[1];
                    }
                  }
                  else
                  {
                    v77 &= (unint64_t)v197[1] - 1;
                  }
                  if (v77 != v47) {
                    break;
                  }
                }
              }
            }
          }
          unint64_t v50 = (unint64_t)operator new(0x28uLL);
          *(void *)unint64_t v50 = 0;
          *(void *)(v50 + 8) = v49;
          *(_DWORD *)(v50 + 16) = v49;
          *(_OWORD *)(v50 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v203;
          *(_DWORD *)(v50 + 36) = v204;
          float v78 = (float)((unint64_t)__p[1] + 1);
          if (!v30 || (float)(v199 * (float)v30) < v78)
          {
            BOOL v79 = (v30 & (v30 - 1)) != 0;
            if (v30 < 3) {
              BOOL v79 = 1;
            }
            unint64_t v80 = v79 | (2 * v30);
            unint64_t v81 = vcvtps_u32_f32(v78 / v199);
            if (v80 <= v81) {
              size_t v82 = v81;
            }
            else {
              size_t v82 = v80;
            }
            std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v197, v82);
            unint64_t v30 = (unint64_t)v197[1];
            if (((unint64_t)v197[1] & ((unint64_t)v197[1] - 1)) != 0)
            {
              if (v197[1] <= (void *)v49) {
                unint64_t v47 = v49 % (unint64_t)v197[1];
              }
              else {
                unint64_t v47 = v49;
              }
            }
            else
            {
              unint64_t v47 = (LODWORD(v197[1]) - 1) & v49;
            }
          }
          uint64_t v83 = v197[0];
          uint64_t v84 = (unint64_t *)*((void *)v197[0] + v47);
          if (v84)
          {
            *(void *)unint64_t v50 = *v84;
          }
          else
          {
            *(void **)unint64_t v50 = __p[0];
            __p[0] = (void *)v50;
            v83[v47] = __p;
            if (!*(void *)v50) {
              goto LABEL_208;
            }
            unint64_t v85 = *(void *)(*(void *)v50 + 8);
            if ((v30 & (v30 - 1)) != 0)
            {
              if (v85 >= v30) {
                v85 %= v30;
              }
            }
            else
            {
              v85 &= v30 - 1;
            }
            uint64_t v84 = (unint64_t *)((char *)v197[0] + 8 * v85);
          }
          unint64_t *v84 = v50;
LABEL_208:
          ++__p[1];
LABEL_209:
          re::DynamicArray<int>::add(v205, &v221);
          ++v51;
          uint64_t v49 = v32;
          if (v51 == v195) {
            goto LABEL_228;
          }
        }
        int v54 = -1;
        DWORD2(v20re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = -1;
        int v56 = -1;
        if (v11 <= 0xF) {
          goto LABEL_107;
        }
        if (v20 >= v193) {
          goto LABEL_412;
        }
        int v54 = *(_DWORD *)(v194 + 4 * v20);
        int v55 = -1;
        goto LABEL_105;
      }
      uint64_t v32 = v49;
LABEL_228:
      unint64_t v90 = v206;
      if (!v206) {
        goto LABEL_415;
      }
      int32x4_t v91 = v208;
      *(_DWORD *)(v179 + 4 * v184) = *v208;
      if (v90 == 1)
      {
LABEL_416:
        *(void *)&long long v203 = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v213 = 136315906;
        v214 = "operator[]";
        __int16 v215 = 1024;
        int v216 = 789;
        __int16 v217 = 2048;
        uint64_t v218 = 1;
        __int16 v219 = 2048;
        uint64_t v220 = 1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_417:
        *(void *)&long long v203 = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v213 = 136315906;
        v214 = "operator[]";
        __int16 v215 = 1024;
        int v216 = 789;
        __int16 v217 = 2048;
        uint64_t v218 = 2;
        __int16 v219 = 2048;
        uint64_t v220 = 2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_418:
        v205[0] = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v210 = 136315906;
        *(void *)&v210[4] = "operator[]";
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = 601;
        *(_WORD *)&v210[18] = 2048;
        *(void *)&v210[20] = v50;
        __int16 v211 = 2048;
        *(void *)uint64_t v212 = v184;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_419:
        v205[0] = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v210 = 136315906;
        *(void *)&v210[4] = "operator[]";
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = 601;
        *(_WORD *)&v210[18] = 2048;
        *(void *)&v210[20] = v50;
        __int16 v211 = 2048;
        *(void *)uint64_t v212 = v183;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_420:
        v205[0] = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v210 = 136315906;
        *(void *)&v210[4] = "operator[]";
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = 601;
        *(_WORD *)&v210[18] = 2048;
        *(void *)&v210[20] = v30;
        __int16 v211 = 2048;
        *(void *)uint64_t v212 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_421:
        v205[0] = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v210 = 136315906;
        *(void *)&v210[4] = "operator[]";
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = 797;
        *(_WORD *)&v210[18] = 2048;
        *(void *)&v210[20] = v30;
        __int16 v211 = 2048;
        *(void *)uint64_t v212 = v33;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_422:
        v205[0] = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v210 = 136315906;
        *(void *)&v210[4] = "operator[]";
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = 601;
        *(_WORD *)&v210[18] = 2048;
        *(void *)&v210[20] = v30;
        __int16 v211 = 2048;
        *(void *)uint64_t v212 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_423:
        *(void *)&long long v203 = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v213 = 136315906;
        v214 = "operator[]";
        __int16 v215 = 1024;
        int v216 = 789;
        __int16 v217 = 2048;
        uint64_t v218 = 3;
        __int16 v219 = 2048;
        uint64_t v220 = 3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_424:
        v205[0] = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v210 = 136315906;
        *(void *)&v210[4] = "operator[]";
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = 601;
        *(_WORD *)&v210[18] = 2048;
        *(void *)&v210[20] = v20;
        __int16 v211 = 2048;
        *(void *)uint64_t v212 = v188;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_425:
        v205[0] = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v210 = 136315906;
        *(void *)&v210[4] = "operator[]";
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = 601;
        *(_WORD *)&v210[18] = 2048;
        *(void *)&v210[20] = v20;
        __int16 v211 = 2048;
        *(void *)uint64_t v212 = v193;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_426:
        v205[0] = 0;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        __n128 v221 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v210 = 136315906;
        *(void *)&v210[4] = "operator[]";
        *(_WORD *)&v210[12] = 1024;
        *(_DWORD *)&v210[14] = 601;
        *(_WORD *)&v210[18] = 2048;
        *(void *)&v210[20] = v20;
        __int16 v211 = 2048;
        *(void *)uint64_t v212 = v193;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v92 = v179 + 4 * v184;
      *(_DWORD *)(v92 + 4) = v91[1];
      if (v90 <= 2) {
        goto LABEL_417;
      }
      uint64_t v93 = v184 + 3;
      *(_DWORD *)(v92 + 8) = v91[2];
      if (v195 == 4)
      {
        *(_DWORD *)(v179 + 4 * v9re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v91[2];
        unint64_t v30 = v181;
        if (v90 <= 3) {
          goto LABEL_423;
        }
        uint64_t v94 = v179 + 4 * v184;
        *(_DWORD *)(v94 + 16) = v91[3];
        uint64_t v93 = v184 + 6;
        *(_DWORD *)(v94 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *v91;
      }
      else
      {
        unint64_t v30 = v181;
      }
      if (v205[0]) {
        (*(void (**)(void))(*(void *)v205[0] + 40))(v205[0]);
      }
      if (*(void *)v210 && *(void *)&v212[2]) {
        (*(void (**)(void))(**(void **)v210 + 40))();
      }
      unsigned int v48 = *(_DWORD *)(v30 + 40);
LABEL_252:
      ++v20;
      uint64_t v49 = v32;
      uint64_t v184 = v93;
      if (v20 >= v48) {
        goto LABEL_255;
      }
    }
  }
  LODWORD(v32) = 0;
LABEL_255:
  unint64_t v196 = v32;
  unint64_t v50 = 12 * v32;
  float32x2_t v97 = (void *)[v169 newBufferWithLength:v50 options:0];
  unint64_t v193 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v30);
  LODWORD(v194) = v98;
  unint64_t v3 = [v97 contents];
  if (v11)
  {
    uint64_t v99 = (void *)[v169 newBufferWithLength:v50 options:0];
    uint64_t v100 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v30 + 64), "vertexNormal");
    if (v100)
    {
      uint64_t v101 = v100;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v100 + 16))(v100))
      {
        uint64_t v180 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v101, 0);
        LODWORD(v184) = (*(uint64_t (**)(uint64_t))(*(void *)v101 + 16))(v101);
      }
      else
      {
        LODWORD(v184) = 0;
        uint64_t v180 = 0;
      }
      unint64_t v30 = v181;
      uint64_t v186 = [v99 contents];
      int v164 = 1;
    }
    else
    {
      uint64_t v180 = 0;
      uint64_t v186 = 0;
      LODWORD(v184) = -1;
      int v164 = 1;
      unint64_t v30 = v181;
    }
  }
  else
  {
    int v164 = 0;
    uint64_t v99 = 0;
    uint64_t v180 = 0;
    uint64_t v186 = 0;
    LODWORD(v184) = -1;
  }
  uint64_t v177 = v99;
  unsigned int v165 = v97;
  if ((v11 & 4) != 0)
  {
    uint64_t v105 = (void *)[v169 newBufferWithLength:v50 options:0];
    uint64_t v106 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v30 + 64), "vertexColor");
    unsigned int v166 = v105;
    if (v106)
    {
      unint64_t v50 = v106;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v106 + 16))(v106))
      {
        uint64_t v182 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v50, 0);
        unsigned int v183 = (*(uint64_t (**)(unint64_t))(*(void *)v50 + 16))(v50);
      }
      else
      {
        unsigned int v183 = 0;
        uint64_t v182 = 0;
      }
      unint64_t v33 = [v105 contents];
    }
    else
    {
      uint64_t v182 = 0;
      unint64_t v33 = 0;
      unsigned int v183 = -1;
    }
    int v163 = 1;
  }
  else
  {
    int v163 = 0;
    unsigned int v166 = 0;
    uint64_t v182 = 0;
    unint64_t v33 = 0;
    unsigned int v183 = -1;
  }
  uint64_t v107 = 16 * v196;
  if ((v11 & 2) != 0)
  {
    unint64_t v175 = (void *)[v169 newBufferWithLength:16 * v196 options:0];
    uint64_t v190 = [v175 contents];
    int v174 = 1;
  }
  else
  {
    int v174 = 0;
    unint64_t v175 = 0;
    uint64_t v190 = 0;
  }
  if ((v11 & 8) != 0)
  {
    unint64_t v173 = (void *)[v169 newBufferWithLength:v107 options:0];
    unint64_t v188 = [v173 contents];
    int v172 = 1;
  }
  else
  {
    unint64_t v173 = 0;
    int v172 = 0;
    unint64_t v188 = 0;
  }
  if (v11 < 0x10)
  {
    uint64_t v176 = 0;
    int v178 = 0;
    uint64_t v187 = 0;
  }
  else
  {
    uint64_t v176 = (void *)[v169 newBufferWithLength:v107 options:0];
    uint64_t v187 = [v176 contents];
    int v178 = 1;
  }
  unint64_t v108 = (void *)v196;
  if (v196)
  {
    unint64_t v109 = 0;
    int v192 = v11 & (v186 != 0);
    unint64_t v30 = (v33 != 0) & (v11 >> 2);
    LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = (v190 != 0) & (v11 >> 1);
    uint64_t v32 = (v188 != 0) & (v11 >> 3);
    BOOL v111 = v11 > 0xF && v187 != 0;
    unint64_t v112 = (unint64_t)v197[1];
    while (1)
    {
      if (v112)
      {
        uint8x8_t v113 = (uint8x8_t)vcnt_s8((int8x8_t)v112);
        v113.i16[0] = vaddlv_u8(v113);
        if (v113.u32[0] > 1uLL)
        {
          unint64_t v50 = v109;
          if (v112 <= v109) {
            unint64_t v50 = v109 % v112;
          }
        }
        else
        {
          unint64_t v50 = (v112 + 0xFFFFFFFF) & v109;
        }
        long long v114 = (void **)*((void *)v197[0] + v50);
        if (v114)
        {
          long long v115 = *v114;
          if (*v114)
          {
            do
            {
              unint64_t v116 = v115[1];
              if (v116 == v109)
              {
                if (v109 == *((_DWORD *)v115 + 4)) {
                  goto LABEL_330;
                }
              }
              else
              {
                if (v113.u32[0] > 1uLL)
                {
                  if (v116 >= v112) {
                    v116 %= v112;
                  }
                }
                else
                {
                  v116 &= v112 - 1;
                }
                if (v116 != v50) {
                  break;
                }
              }
              long long v115 = (void *)*v115;
            }
            while (v115);
          }
        }
      }
      long long v115 = operator new(0x28uLL);
      v115[1] = v109;
      *((_DWORD *)v115 + 4) = v109;
      *(void *)((char *)v115 + 28) = 0;
      *(void *)((char *)v115 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
      *((_DWORD *)v115 + 9) = 0;
      float v117 = (float)((unint64_t)__p[1] + 1);
      if (v112 && (float)(v199 * (float)v112) >= v117) {
        goto LABEL_316;
      }
      BOOL v118 = (v112 & (v112 - 1)) != 0;
      if (v112 < 3) {
        BOOL v118 = 1;
      }
      unint64_t v119 = v118 | (2 * v112);
      unint64_t v120 = vcvtps_u32_f32(v117 / v199);
      size_t v121 = v119 <= v120 ? v120 : v119;
      std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v197, v121);
      unint64_t v112 = (unint64_t)v197[1];
      if (((unint64_t)v197[1] & ((unint64_t)v197[1] - 1)) == 0) {
        break;
      }
      unint64_t v108 = (void *)v196;
      if (v197[1] <= (void *)v109) {
        unint64_t v50 = v109 % (unint64_t)v197[1];
      }
      else {
        unint64_t v50 = v109;
      }
LABEL_317:
      uint64_t v122 = v197[0];
      uint64_t v123 = (void *)*((void *)v197[0] + v50);
      if (v123)
      {
        *long long v115 = *v123;
LABEL_328:
        void *v123 = v115;
        goto LABEL_329;
      }
      uint64_t v124 = __p[0];
      *long long v115 = __p[0];
      __p[0] = v115;
      v122[v50] = __p;
      if (v124)
      {
        unint64_t v125 = v124[1];
        if ((v112 & (v112 - 1)) != 0)
        {
          if (v125 >= v112) {
            v125 %= v112;
          }
        }
        else
        {
          v125 &= v112 - 1;
        }
        uint64_t v123 = (char *)v197[0] + 8 * v125;
        goto LABEL_328;
      }
LABEL_329:
      ++__p[1];
LABEL_330:
      unint64_t v50 = *((unsigned int *)v115 + 5);
      if (v50 >= v194) {
        goto LABEL_413;
      }
      int v126 = (_DWORD *)(v193 + 16 * v50);
      uint64_t v127 = (3 * v109);
      *(_DWORD *)(v3 + 4 * v1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *v126;
      uint64_t v128 = (v127 + 1);
      *(_DWORD *)(v3 + 4 * v128) = v126[1];
      int v129 = v126[2];
      uint64_t v130 = (v127 + 2);
      *(_DWORD *)(v3 + 4 * v13objc_initWeak(location, 0) = v129;
      if (v192)
      {
        if (v184 <= v50) {
          goto LABEL_418;
        }
        uint64_t v131 = (_DWORD *)(v180 + 16 * v50);
        *(_DWORD *)(v186 + 4 * v1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *v131;
        *(_DWORD *)(v186 + 4 * v128) = v131[1];
        *(_DWORD *)(v186 + 4 * v13objc_initWeak(location, 0) = v131[2];
      }
      if (v30)
      {
        if (v183 <= v50) {
          goto LABEL_419;
        }
        unint64_t v132 = (_DWORD *)(v182 + 16 * v50);
        *(_DWORD *)(v33 + 4 * v1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = *v132;
        *(_DWORD *)(v33 + 4 * v128) = v132[1];
        *(_DWORD *)(v33 + 4 * v13objc_initWeak(location, 0) = v132[2];
      }
      if (v20)
      {
        unint64_t v137 = *((int *)v115 + 6);
        uint64_t v138 = v185[40];
        BOOL v139 = (v185[41] - v138) >> 4 <= v137 || (uint64_t)v137 <= 0;
        uint64_t v140 = (_OWORD *)(v138 + 16 * v137);
        if (v139) {
          uint64_t v140 = v185 + 44;
        }
        *(_OWORD *)(v190 + 4 * (4 * v109)) = *v140;
        if (v32)
        {
LABEL_356:
          unint64_t v141 = *((int *)v115 + 7);
          uint64_t v142 = v185[30];
          BOOL v143 = (v185[31] - v142) >> 4 <= v141 || (uint64_t)v141 <= 0;
          uint64_t v144 = (_OWORD *)(v142 + 16 * v141);
          if (v143) {
            uint64_t v144 = v185 + 34;
          }
          *(_OWORD *)(v188 + 4 * (4 * v109)) = *v144;
          if (!v111) {
            goto LABEL_347;
          }
LABEL_340:
          unint64_t v133 = *((int *)v115 + 8);
          uint64_t v134 = v185[20];
          BOOL v135 = (v185[21] - v134) >> 4 <= v133 || (uint64_t)v133 <= 0;
          uint64_t v136 = (_OWORD *)(v134 + 16 * v133);
          if (v135) {
            uint64_t v136 = v185 + 24;
          }
          *(_OWORD *)(v187 + 4 * (4 * v109)) = *v136;
          goto LABEL_347;
        }
      }
      else if (v32)
      {
        goto LABEL_356;
      }
      if (v111) {
        goto LABEL_340;
      }
LABEL_347:
      if ((void *)++v109 == v108) {
        goto LABEL_364;
      }
    }
    unint64_t v50 = ((unint64_t)v197[1] + 0xFFFFFFFF) & v109;
LABEL_316:
    unint64_t v108 = (void *)v196;
    goto LABEL_317;
  }
LABEL_364:
  uint64_t v145 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v146 = (void *)*v145;
      operator delete(v145);
      uint64_t v145 = v146;
    }
    while (v146);
  }
  int v147 = v197[0];
  v197[0] = 0;
  uint64_t v6 = (uint64_t)v185;
  a2 = v168;
  int v44 = v163;
  int v102 = v164;
  unint64_t v12 = v166;
  if (v147) {
    operator delete(v147);
  }
  uint64_t v148 = v201[0];
  if (v201[0])
  {
    do
    {
      uint64_t v149 = (void *)*v148;
      operator delete(v148);
      uint64_t v148 = v149;
    }
    while (v149);
  }
  unint64_t v43 = ((unint64_t)v170 << 32) | 1;
  uint64_t v150 = v200[0];
  v200[0] = 0;
  if (v150) {
    operator delete(v150);
  }

  uint64_t v15 = v171;
  unint64_t v103 = v167;
  unint64_t v3 = v196;
  long long v104 = v165;
LABEL_373:
  uint64_t v151 = operator new(0xF0uLL);
  v151[1] = 0;
  v151[2] = 0;
  *uint64_t v151 = &unk_26E702E10;
  v151[3] = v104;
  v151[4] = 30;
  v151[5] = v3;
  v151[6] = v103;
  v151[7] = 36;
  v151[8] = v15;
  *((unsigned char *)v151 + 72) = 0;
  *((unsigned char *)v151 + 96) = 0;
  if (v102)
  {
    v151[9] = v177;
    v151[10] = 30;
    v151[11] = v3;
    *((unsigned char *)v151 + 96) = 1;
    uint64_t v177 = 0;
  }
  uint64_t v152 = v175;
  int v153 = v173;
  *((unsigned char *)v151 + 104) = 0;
  *((unsigned char *)v151 + 128) = 0;
  if (v174)
  {
    v151[13] = v175;
    v151[14] = 31;
    v151[15] = v3;
    *((unsigned char *)v151 + 128) = 1;
    uint64_t v152 = 0;
  }
  *((unsigned char *)v151 + 136) = 0;
  *((unsigned char *)v151 + 16objc_initWeak(location, 0) = 0;
  if (v44)
  {
    v151[17] = v12;
    v151[18] = 30;
    v151[19] = v3;
    *((unsigned char *)v151 + 16objc_initWeak(location, 0) = 1;
    unint64_t v12 = 0;
  }
  *((unsigned char *)v151 + 168) = 0;
  *((unsigned char *)v151 + 192) = 0;
  if (v172)
  {
    v151[21] = v173;
    v151[22] = 31;
    v151[23] = v3;
    *((unsigned char *)v151 + 192) = 1;
    int v153 = 0;
  }
  *((unsigned char *)v151 + 20objc_initWeak(location, 0) = 0;
  *((unsigned char *)v151 + 224) = 0;
  if (v178)
  {
    v151[25] = v176;
    v151[26] = 31;
    v151[27] = v3;
    *((unsigned char *)v151 + 224) = 1;
    uint64_t v176 = 0;
  }
  v151[29] = v43;
  v221.n128_u64[0] = (unint64_t)(v151 + 3);
  v221.n128_u64[1] = (unint64_t)v151;
  unint64_t v154 = *((void *)a2 + 1);
  if (v154) {
    uint64_t v155 = *(void *)(v154 + 664);
  }
  else {
    uint64_t v155 = 0;
  }
  unint64_t v156 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v154 ^ (v154 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v154 ^ (v154 >> 30))) >> 27));
  unint64_t v157 = v155 ^ (v156 >> 31) ^ v156;
  if (*(void *)v6)
  {
    unint64_t v158 = v157 % *(unsigned int *)(v6 + 24);
    uint64_t v159 = *(unsigned int *)(*(void *)(v6 + 8) + 4 * v158);
    if (v159 != 0x7FFFFFFF)
    {
      uint64_t v160 = *(void *)(v6 + 16);
      while (*(void *)(v160 + 56 * v159 + 24) != v154)
      {
        uint64_t v159 = *(_DWORD *)(v160 + 56 * v159 + 8) & 0x7FFFFFFF;
        if (v159 == 0x7FFFFFFF) {
          goto LABEL_393;
        }
      }
      uint64_t v161 = v160 + 56 * v159;
      __n128 v221 = 0uLL;
      uint64_t v162 = *(std::__shared_weak_count **)(v161 + 48);
      *(void *)(v161 + 4objc_initWeak(location, 0) = v151 + 3;
      *(void *)(v161 + 48) = v151;
      if (v162) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v162);
      }
      ++*(_DWORD *)(v6 + 40);
      goto LABEL_398;
    }
  }
  else
  {
    LODWORD(v158) = 0;
  }
LABEL_393:
  re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(v6, v158, v157, a2, &v221);
  ++*(_DWORD *)(v6 + 40);
  if (v221.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v221.n128_u64[1]);
  }
LABEL_398:
  if (v178) {

  }
  if (v172) {
  if (v44)
  }

  if (v174) {
  if (v102)
  }
}

double re::audio::MeshVisualizer::removeDebugVisMeshesNotInUse(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 28)) {
    return result;
  }
  if (!*(_DWORD *)(a2 + 28))
  {
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v8);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v10);
        ++v11;
        v10 += 56;
      }
      while (v11 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v12 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v12;
    return result;
  }
  unsigned int v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v38 = 0x7FFFFFFFLL;
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 14;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 == v5)
  {
    unsigned int v13 = 0;
  }
  else
  {
    uint64_t v14 = v5;
    do
    {
      if (!re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a2, *(void *)(a1 + 16) + 56 * v14 + 16))re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add((uint64_t)&v35, (re::AssetHandle *)(*(void *)(a1 + 16) + 56 * v14 + 16)); {
      unsigned int v15 = *(_DWORD *)(a1 + 32);
      }
      if (v15 <= (int)v5 + 1) {
        int v16 = v5 + 1;
      }
      else {
        int v16 = *(_DWORD *)(a1 + 32);
      }
      while (1)
      {
        uint64_t v14 = (v5 + 1);
        if (v16 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v17 = v14;
        if ((*(_DWORD *)(*(void *)(a1 + 16) + 56 * v14 + 8) & 0x80000000) != 0) {
          goto LABEL_27;
        }
      }
      int v17 = v16;
LABEL_27:
      LODWORD(v5) = v17;
    }
    while (v15 != v17);
    unsigned int v13 = v37;
    if (v37)
    {
      uint64_t v18 = 0;
      unint64_t v19 = (int *)(v36 + 8);
      while (1)
      {
        int v20 = *v19;
        v19 += 10;
        if (v20 < 0) {
          goto LABEL_34;
        }
        if (v37 == ++v18)
        {
          LODWORD(v18) = v37;
          goto LABEL_34;
        }
      }
    }
  }
  LODWORD(v18) = 0;
LABEL_34:
  if (v13 != v18)
  {
    uint64_t v21 = v18;
    uint64_t v22 = v36;
    do
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)(v22 + 40 * v21 + 16));
      if (*(void *)a1)
      {
        uint64_t v23 = v34 ? *(void *)(v34 + 664) : 0;
        unint64_t v24 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
        unint64_t v25 = (v23 ^ (v24 >> 31) ^ v24) % *(unsigned int *)(a1 + 24);
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = *(unsigned int *)(v26 + 4 * v25);
        if (v27 != 0x7FFFFFFF)
        {
          uint64_t v28 = *(void *)(a1 + 16);
          if (*(void *)(v28 + 56 * v27 + 24) == v34)
          {
            *(_DWORD *)(v26 + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = *(_DWORD *)(v28 + 56 * v27 + 8) & 0x7FFFFFFF;
LABEL_46:
            re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + 56 * v27);
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v27 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v27 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
            --*(_DWORD *)(a1 + 28);
            int v30 = *(_DWORD *)(a1 + 40) + 1;
            *(_DWORD *)(a1 + 36) = v27;
            *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v30;
          }
          else
          {
            while (1)
            {
              uint64_t v29 = v27;
              uint64_t v27 = *(_DWORD *)(v28 + 56 * v27 + 8) & 0x7FFFFFFF;
              if (v27 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v28 + 56 * v27 + 24) == v34)
              {
                *(_DWORD *)(v28 + 56 * v29 + 8) = *(_DWORD *)(v28 + 56 * v29 + 8) & 0x80000000 | *(_DWORD *)(v28 + 56 * v27 + 8) & 0x7FFFFFFF;
                goto LABEL_46;
              }
            }
          }
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
      uint64_t v22 = v36;
      if (v37 <= (int)v18 + 1) {
        unsigned int v31 = v18 + 1;
      }
      else {
        unsigned int v31 = v37;
      }
      while (1)
      {
        uint64_t v21 = (v18 + 1);
        if (v31 - 1 == v18) {
          break;
        }
        LODWORD(v18) = v18 + 1;
        unsigned int v32 = v21;
        if ((*(_DWORD *)(v36 + 40 * v21 + 8) & 0x80000000) != 0) {
          goto LABEL_54;
        }
      }
      unsigned int v32 = v31;
LABEL_54:
      LODWORD(v18) = v32;
    }
    while (v13 != v32);
  }
  return re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)&v35);
}

void re::audio::MeshVisualizer::addMeshAttributes(uint64_t a1, id **a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  v107.n128_u64[0] = 0;
  v107.n128_u64[1] = (unint64_t)"";
  unint64_t v110 = 0;
  LODWORD(v11re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  LODWORD(vstd::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0;
  uint64_t v96 = 0;
  float32x2_t v97 = "";
  id v8 = (*a2)[1];
  id v95 = **a2;
  id v9 = v95;
  unint64_t v100 = 0;
  uint64_t v101 = "";
  id v104 = 0;
  LODWORD(v105) = 0;
  LODWORD(v106) = 0;
  re::StringID::operator=(&v100, &v96);
  __int16 v102 = 1;
  char v103 = (char)v8;
  NS::SharedPtr<MTL::Texture>::operator=(&v104, &v95);
  unint64_t v10 = v100;
  unint64_t v11 = (unint64_t)v101;
  unint64_t v100 = 0;
  uint64_t v101 = "";
  unsigned __int8 v12 = v107.n128_u8[0];
  unint64_t v13 = v107.n128_u64[1];
  v107.n128_u64[0] = v10;
  v107.n128_u64[1] = v11;
  unint64_t v98 = v10 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  unint64_t v99 = v13;
  re::StringID::destroyString((re::StringID *)&v98);
  __int16 v108 = v102;
  char v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  long long v111 = v105;
  long long v112 = v106;
  if (v104)
  {

    id v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  if (v95)
  {

    id v95 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  uint64_t v96 = 0;
  float32x2_t v97 = "";
  id v15 = (*a2)[4];
  id v94 = (*a2)[3];
  id v16 = v94;
  unint64_t v100 = 0;
  uint64_t v101 = "";
  id v104 = 0;
  LODWORD(v105) = 0;
  LODWORD(v106) = 0;
  re::StringID::operator=(&v100, &v96);
  __int16 v102 = 1;
  char v103 = (char)v15;
  NS::SharedPtr<MTL::Texture>::operator=(&v104, &v94);
  unint64_t v17 = v100;
  unint64_t v18 = (unint64_t)v101;
  unint64_t v100 = 0;
  uint64_t v101 = "";
  unsigned __int8 v19 = v107.n128_u8[0];
  unint64_t v20 = v107.n128_u64[1];
  v107.n128_u64[0] = v17;
  v107.n128_u64[1] = v18;
  unint64_t v98 = v17 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
  unint64_t v99 = v20;
  re::StringID::destroyString((re::StringID *)&v98);
  __int16 v108 = v102;
  char v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  long long v111 = v105;
  long long v112 = v106;
  if (v104)
  {

    id v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  if (v94)
  {

    id v94 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  uint64_t v22 = *a2;
  if (*((unsigned char *)*a2 + 72))
  {
    uint64_t v96 = 0;
    float32x2_t v97 = "";
    id v23 = (*a2)[7];
    id v93 = (*a2)[6];
    id v24 = v93;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    id v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    __int16 v102 = 1;
    char v103 = (char)v23;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v93);
    unint64_t v25 = v100;
    unint64_t v26 = (unint64_t)v101;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    unsigned __int8 v27 = v107.n128_u8[0];
    unint64_t v28 = v107.n128_u64[1];
    v107.n128_u64[0] = v25;
    v107.n128_u64[1] = v26;
    unint64_t v98 = v25 & 0xFFFFFFFFFFFFFFFELL | v27 & 1;
    unint64_t v99 = v28;
    re::StringID::destroyString((re::StringID *)&v98);
    __int16 v108 = v102;
    char v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    long long v111 = v105;
    long long v112 = v106;
    if (v104)
    {

      id v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v93)
    {

      id v93 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    uint64_t v22 = *a2;
  }
  if (*((unsigned char *)v22 + 136))
  {
    uint64_t v96 = 0;
    float32x2_t v97 = "";
    id v29 = (*a2)[15];
    id v92 = (*a2)[14];
    id v30 = v92;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    id v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    __int16 v102 = 1;
    char v103 = (char)v29;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v92);
    unint64_t v31 = v100;
    unint64_t v32 = (unint64_t)v101;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    unsigned __int8 v33 = v107.n128_u8[0];
    unint64_t v34 = v107.n128_u64[1];
    v107.n128_u64[0] = v31;
    v107.n128_u64[1] = v32;
    unint64_t v98 = v31 & 0xFFFFFFFFFFFFFFFELL | v33 & 1;
    unint64_t v99 = v34;
    re::StringID::destroyString((re::StringID *)&v98);
    __int16 v108 = v102;
    char v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    long long v111 = v105;
    long long v112 = v106;
    if (v104)
    {

      id v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v92)
    {

      id v92 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    uint64_t v22 = *a2;
  }
  if (*((unsigned char *)v22 + 104))
  {
    uint64_t v96 = 0;
    float32x2_t v97 = "";
    id v35 = (*a2)[11];
    id v91 = (*a2)[10];
    id v36 = v91;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    id v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    __int16 v102 = 1;
    char v103 = (char)v35;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v91);
    unint64_t v37 = v100;
    unint64_t v38 = (unint64_t)v101;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    unsigned __int8 v39 = v107.n128_u8[0];
    unint64_t v40 = v107.n128_u64[1];
    v107.n128_u64[0] = v37;
    v107.n128_u64[1] = v38;
    unint64_t v98 = v37 & 0xFFFFFFFFFFFFFFFELL | v39 & 1;
    unint64_t v99 = v40;
    re::StringID::destroyString((re::StringID *)&v98);
    __int16 v108 = v102;
    char v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    long long v111 = v105;
    long long v112 = v106;
    if (v104)
    {

      id v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v91)
    {

      id v91 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    uint64_t v22 = *a2;
  }
  if (*((unsigned char *)v22 + 168))
  {
    uint64_t v96 = 0;
    float32x2_t v97 = "";
    id v41 = (*a2)[19];
    id v90 = (*a2)[18];
    id v42 = v90;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    id v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    __int16 v102 = 1;
    char v103 = (char)v41;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v90);
    unint64_t v43 = v100;
    unint64_t v44 = (unint64_t)v101;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    unsigned __int8 v45 = v107.n128_u8[0];
    unint64_t v46 = v107.n128_u64[1];
    v107.n128_u64[0] = v43;
    v107.n128_u64[1] = v44;
    unint64_t v98 = v43 & 0xFFFFFFFFFFFFFFFELL | v45 & 1;
    unint64_t v99 = v46;
    re::StringID::destroyString((re::StringID *)&v98);
    __int16 v108 = v102;
    char v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    long long v111 = v105;
    long long v112 = v106;
    if (v104)
    {

      id v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v90)
    {

      id v90 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    uint64_t v22 = *a2;
  }
  if (*((unsigned char *)v22 + 200))
  {
    uint64_t v96 = 0;
    float32x2_t v97 = "";
    id v47 = (*a2)[23];
    id v89 = (*a2)[22];
    id v48 = v89;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    id v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    __int16 v102 = 1;
    char v103 = (char)v47;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v89);
    unint64_t v49 = v100;
    unint64_t v50 = (unint64_t)v101;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    unsigned __int8 v51 = v107.n128_u8[0];
    unint64_t v52 = v107.n128_u64[1];
    v107.n128_u64[0] = v49;
    v107.n128_u64[1] = v50;
    unint64_t v98 = v49 & 0xFFFFFFFFFFFFFFFELL | v51 & 1;
    unint64_t v99 = v52;
    re::StringID::destroyString((re::StringID *)&v98);
    __int16 v108 = v102;
    char v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    long long v111 = v105;
    long long v112 = v106;
    if (v104)
    {

      id v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v89)
    {

      id v89 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  }
  uint64_t v96 = 0;
  float32x2_t v97 = "";
  *(_OWORD *)unint64_t v88 = a4[2];
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector3<float>>(&v96, v88, (uint64_t)&v100);
  unint64_t v53 = v100;
  unint64_t v54 = (unint64_t)v101;
  unint64_t v100 = 0;
  uint64_t v101 = "";
  unsigned __int8 v55 = v107.n128_u8[0];
  unint64_t v56 = v107.n128_u64[1];
  v107.n128_u64[0] = v53;
  v107.n128_u64[1] = v54;
  unint64_t v98 = v53 & 0xFFFFFFFFFFFFFFFELL | v55 & 1;
  unint64_t v99 = v56;
  re::StringID::destroyString((re::StringID *)&v98);
  __int16 v108 = v102;
  char v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  long long v111 = v105;
  long long v112 = v106;
  if (v104)
  {

    id v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  uint64_t v96 = 0;
  float32x2_t v97 = "";
  *(_OWORD *)unint64_t v88 = a4[1];
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>(&v96, v88, (uint64_t)&v100);
  unint64_t v58 = v100;
  unint64_t v59 = (unint64_t)v101;
  unint64_t v100 = 0;
  uint64_t v101 = "";
  unsigned __int8 v60 = v107.n128_u8[0];
  unint64_t v61 = v107.n128_u64[1];
  v107.n128_u64[0] = v58;
  v107.n128_u64[1] = v59;
  unint64_t v98 = v58 & 0xFFFFFFFFFFFFFFFELL | v60 & 1;
  unint64_t v99 = v61;
  re::StringID::destroyString((re::StringID *)&v98);
  __int16 v108 = v102;
  char v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  long long v111 = v105;
  long long v112 = v106;
  if (v104)
  {

    id v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  uint64_t v96 = 0;
  float32x2_t v97 = "";
  *(_OWORD *)unint64_t v88 = *a4;
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector3<float>>(&v96, v88, (uint64_t)&v100);
  unint64_t v63 = v100;
  unint64_t v64 = (unint64_t)v101;
  unint64_t v100 = 0;
  uint64_t v101 = "";
  unsigned __int8 v65 = v107.n128_u8[0];
  unint64_t v66 = v107.n128_u64[1];
  v107.n128_u64[0] = v63;
  v107.n128_u64[1] = v64;
  unint64_t v98 = v63 & 0xFFFFFFFFFFFFFFFELL | v65 & 1;
  unint64_t v99 = v66;
  re::StringID::destroyString((re::StringID *)&v98);
  __int16 v108 = v102;
  char v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  long long v111 = v105;
  long long v112 = v106;
  if (v104)
  {

    id v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  int v68 = *(_DWORD *)(a1 + 96);
  if (v68 == 6 || *(_DWORD *)(a1 + 100) == 6)
  {
    v88[0] = 1.0 / (float)((float)((float)(*(_DWORD *)(a1 + 120) - *((_DWORD *)*a2 + 53)) / 50.0) + 1.0);
    uint64_t v96 = 0;
    float32x2_t v97 = "";
    re::PrimitiveMeshAttribute::uniformCustomAttribute<float>(&v96, (int *)v88, (uint64_t)&v100);
    unint64_t v69 = v100;
    unint64_t v70 = (unint64_t)v101;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    unsigned __int8 v71 = v107.n128_u8[0];
    unint64_t v72 = v107.n128_u64[1];
    v107.n128_u64[0] = v69;
    v107.n128_u64[1] = v70;
    unint64_t v98 = v69 & 0xFFFFFFFFFFFFFFFELL | v71 & 1;
    unint64_t v99 = v72;
    re::StringID::destroyString((re::StringID *)&v98);
    __int16 v108 = v102;
    char v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    long long v111 = v105;
    long long v112 = v106;
    if (v104)
    {

      id v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    int v68 = *(_DWORD *)(a1 + 96);
  }
  if (v68 == 7)
  {
    uint64_t v96 = 0;
    float32x2_t v97 = "";
    *(_OWORD *)unint64_t v88 = *(_OWORD *)(a1 + 128);
    re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>(&v96, v88, (uint64_t)&v100);
    unint64_t v73 = v100;
    unint64_t v74 = (unint64_t)v101;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    unsigned __int8 v75 = v107.n128_u8[0];
    unint64_t v76 = v107.n128_u64[1];
    v107.n128_u64[0] = v73;
    v107.n128_u64[1] = v74;
    unint64_t v98 = v73 & 0xFFFFFFFFFFFFFFFELL | v75 & 1;
    unint64_t v99 = v76;
    re::StringID::destroyString((re::StringID *)&v98);
    __int16 v108 = v102;
    char v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    long long v111 = v105;
    long long v112 = v106;
    if (v104)
    {

      id v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  }
  if (*(_DWORD *)(a1 + 100) == 7)
  {
    uint64_t v96 = 0;
    float32x2_t v97 = "";
    *(_OWORD *)unint64_t v88 = *(_OWORD *)(a1 + 144);
    re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>(&v96, v88, (uint64_t)&v100);
    unint64_t v77 = v100;
    unint64_t v78 = (unint64_t)v101;
    unint64_t v100 = 0;
    uint64_t v101 = "";
    unsigned __int8 v79 = v107.n128_u8[0];
    unint64_t v80 = v107.n128_u64[1];
    v107.n128_u64[0] = v77;
    v107.n128_u64[1] = v78;
    unint64_t v98 = v77 & 0xFFFFFFFFFFFFFFFELL | v79 & 1;
    unint64_t v99 = v80;
    re::StringID::destroyString((re::StringID *)&v98);
    __int16 v108 = v102;
    char v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    long long v111 = v105;
    long long v112 = v106;
    if (v104)
    {

      id v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  }
  unint64_t v81 = *a2;
  *(void *)(a3 + 8objc_initWeak(location, 0) = (*a2)[2];
  *(void *)(a3 + 88) = v81[5];
  __asm
  {
    FMOV            V0.4S, #-25.0
    FMOV            V1.4S, #25.0
  }
  *(_OWORD *)(a3 + 48) = _Q0;
  *(_OWORD *)(a3 + 64) = _Q1;
  if (v110)
  {

    unint64_t v110 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v107);
}

__n128 re::DynamicArray<re::PrimitiveMeshAttribute>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::PrimitiveMeshAttribute>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + (v4 << 6);
  unint64_t v6 = a2->n128_u64[0];
  *(void *)uint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL | a2->n128_u64[0] & 1;
  *(void *)uint64_t v5 = a2->n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = a2->n128_u64[1];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = (unint64_t)"";
  LOWORD(v6) = a2[1].n128_u16[0];
  *(unsigned char *)(v5 + 18) = a2[1].n128_u8[2];
  *(_WORD *)(v5 + 16) = v6;
  *(void *)(v5 + 24) = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = 0;
  __n128 result = a2[2];
  __n128 v8 = a2[3];
  *(__n128 *)(v5 + 32) = result;
  *(__n128 *)(v5 + 48) = v8;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::audio::MeshVisualizer::drawDebugVisMesh(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  if ((*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 100))
    && re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a1, a2))
  {
    if (*(void *)a1)
    {
      unint64_t v8 = *(void *)(a2 + 8);
      if (v8) {
        uint64_t v9 = *(void *)(v8 + 664);
      }
      else {
        uint64_t v9 = 0;
      }
      unint64_t v11 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
      uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v9 ^ (v11 >> 31) ^ v11) % *(unsigned int *)(a1 + 24)));
      uint64_t v10 = 0x7FFFFFFFLL;
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v13 = *(void *)(a1 + 16);
        uint64_t v10 = 0x7FFFFFFFLL;
        while (*(void *)(v13 + 56 * v12 + 24) != v8)
        {
          uint64_t v12 = *(_DWORD *)(v13 + 56 * v12 + 8) & 0x7FFFFFFF;
          if (v12 == 0x7FFFFFFF) {
            goto LABEL_15;
          }
        }
        uint64_t v10 = v12;
      }
    }
    else
    {
      uint64_t v10 = 0x7FFFFFFFLL;
    }
LABEL_15:
    uint64_t v14 = *(void *)(a1 + 16) + 56 * v10;
    uint64_t v16 = *(void *)(v14 + 40);
    id v15 = *(std::__shared_weak_count **)(v14 + 48);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(unsigned char *)(v16 + 208))
    {
      if (*(void *)(v16 + 16) && *(void *)(v16 + 40) != 0)
      {
        if (((v18 & 1) == 0 || *(unsigned char *)(v16 + 72))
          && ((v18 & 2) == 0 || *(unsigned char *)(v16 + 104))
          && ((v18 & 4) == 0 || *(unsigned char *)(v16 + 136))
          && ((v18 & 8) == 0 || *(unsigned char *)(v16 + 168))
          && (v18 < 0x10 || *(unsigned char *)(v16 + 200)))
        {
          uint64_t v23 = 0;
          v20[1] = (id *)&v15->__vftable;
          memset(v21, 0, sizeof(v21));
          int v22 = 0;
          *(void *)&long long v19 = 0x7F0000007FLL;
          *((void *)&v19 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0x7F0000007FLL;
          int32x4_t v24 = vdupq_n_s32(0x7F800000u);
          long long v25 = v19;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          v20[0] = (id *)v16;
          if (v15)
          {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            re::audio::MeshVisualizer::addMeshAttributes(a1, v20, (uint64_t)v21, a3);
            std::__shared_weak_count::__release_shared[abi:nn180100](v15);
          }
          else
          {
            re::audio::MeshVisualizer::addMeshAttributes(a1, v20, (uint64_t)v21, a3);
          }
          re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::add((_anonymous_namespace_ *)(a4 + 1056), (uint64_t)v21);
          re::DynamicArray<re::PrimitiveMeshAttribute>::deinit((uint64_t)v21);
        }
      }
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v15);
    }
  }
}

__n128 re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 96 * v4;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 24) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)uint64_t v5 = *(void *)a2;
  *(void *)(v5 + 8) = v6;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v7;
  uint64_t v8 = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v8;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  __n128 result = *(__n128 *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 8objc_initWeak(location, 0) = v10;
  *(__n128 *)(v5 + 48) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

BOOL std::__unordered_map_equal<re::audio::anonymous namespace'::DebugVertexForHashing,std::__hash_value_type<re::audio::anonymous namespace'::DebugVertexForHashing,unsigned int>,re::audio::anonymous namespace'::DebugVertexForHashing::Equality,re::audio::anonymous namespace'::DebugVertexForHashing::Hash,true>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != *(unsigned __int8 *)(a2 + 16) || (v2 & 2) != 0 && *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if ((v2 & 8) != 0 && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  if ((v2 & 0x10) != 0) {
    return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return 1;
}

unsigned char *re::audio::anonymous namespace'::meshHasMaterials(re::audio::_anonymous_namespace_ *this, const re::GeomMesh *a2)
{
  __n128 result = (unsigned char *)re::internal::GeomAttributeManager::attributeByName((re::audio::_anonymous_namespace_ *)((char *)this + 64), (const char *)re::AcousticMeshAsset::kMaterialAttributeName);
  if (result)
  {
    if (result[16] == 2) {
      return (unsigned char *)((*(unsigned int (**)(unsigned char *))(*(void *)result + 16))(result) == *((_DWORD *)this + 10));
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<int>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + 4 * a2;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + 16 * a2;
}

{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + 16 * a2;
}

void std::__shared_ptr_emplace<re::audio::DebugVisMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E702E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::audio::DebugVisMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E702E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_emplace<re::audio::DebugVisMesh>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 224)) {

  }
  if (*(unsigned char *)(a1 + 192)) {
  if (*(unsigned char *)(a1 + 160))
  }

  if (*(unsigned char *)(a1 + 128)) {
  if (*(unsigned char *)(a1 + 96))
  }

  int v2 = *(void **)(a1 + 24);
}

__n128 re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::AssetHandle *a4, __n128 *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v28, v14, v13);
          long long v16 = *(_OWORD *)v28;
          *(_OWORD *)unint64_t v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v28[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 40;
            do
            {
              if ((*(_DWORD *)(v23 - 32) & 0x80000000) != 0) {
                re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(a1, *(void *)(v23 - 40) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v23 - 40), v23 - 24, v23);
              }
              ++v22;
              v23 += 56;
            }
            while (v22 < v21);
          }
          re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13) {
          signed int v26 = 2 * v12;
        }
        else {
          signed int v26 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 56 * v10 + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * v1objc_initWeak(location, 0) = a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 56 * v10 + 16), a4);
  __n128 result = *a5;
  *(__n128 *)(*(void *)(a1 + 16) + 56 * v10 + 4objc_initWeak(location, 0) = *a5;
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void *re::DynamicArray<re::PrimitiveMeshAttribute>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PrimitiveMeshAttribute>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PrimitiveMeshAttribute>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::PrimitiveMeshAttribute>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::PrimitiveMeshAttribute>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v9 << 6;
        int v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *int v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *int v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *uint64_t v8 = 0;
          v8[1] = (uint64_t)"";
          LOWORD(v12) = *((_WORD *)v8 + 8);
          *((unsigned char *)v11 + 18) = *((unsigned char *)v8 + 18);
          *((_WORD *)v11 + 8) = v12;
          v11[3] = v8[3];
          v8[3] = 0;
          long long v13 = *((_OWORD *)v8 + 3);
          *((_OWORD *)v11 + 2) = *((_OWORD *)v8 + 2);
          *((_OWORD *)v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v13;
          uint64_t v14 = (void *)v8[3];
          if (v14)
          {

            v8[3] = 0;
          }
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 8;
          v11 += 8;
          v10 -= 64;
        }
        while (v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          uint64_t v2 = 96 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 96 * v9;
        int v11 = v7 + 3;
        do
        {
          v11[1] = 0;
          *(v11 - 2) = 0;
          *(v11 - re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
          *(v11 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
          *(_DWORD *)int v11 = 0;
          uint64_t v12 = *(void *)(v8 + 8);
          *(v11 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(void *)v8;
          *(v11 - 2) = v12;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v13 = *(v11 - 1);
          *(v11 - re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = v13;
          uint64_t v14 = v11[1];
          v11[1] = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*(_DWORD *)v11;
          long long v15 = *(_OWORD *)(v8 + 48);
          long long v16 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)(v11 + re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = *(_OWORD *)(v8 + 80);
          *(_OWORD *)(v11 + 5) = v16;
          *(_OWORD *)(v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v15;
          re::DynamicArray<re::PrimitiveMeshAttribute>::deinit(v8);
          v11 += 12;
          v8 += 96;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::ecs2::allocInfo_ConstraintListComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_265, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_265))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A6C8, "ConstraintListComponent");
    __cxa_guard_release(&_MergedGlobals_265);
  }
  return &unk_26AF8A6C8;
}

void re::ecs2::initInfo_ConstraintListComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x4DF95D33529CFE04;
  v9[1] = "ConstraintListComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A6C0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8A6C0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8A6B8 = v7;
      __cxa_guard_release(&qword_26AF8A6C0);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8A6B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ConstraintListComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::ConstraintListComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::ConstraintListComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ConstraintListComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

double re::internal::defaultConstruct<re::ecs2::ConstraintListComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E9608;
  *(void *)(v3 + 4objc_initWeak(location, 0) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)(v3 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 8objc_initWeak(location, 0) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ConstraintListComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)(a3 + 9));
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ConstraintListComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E9608;
  *(void *)(v1 + 4objc_initWeak(location, 0) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(void *)(v1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 8objc_initWeak(location, 0) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ConstraintListComponent>(void *a1)
{
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ConstraintListComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ConstraintListComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ConstraintListComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ConstraintListComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ConstraintListComponent>, this);
}

void *re::ecs2::allocInfo_LightService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_266, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_266))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A748, "LightService");
    __cxa_guard_release(&_MergedGlobals_266);
  }
  return &unk_26AF8A748;
}

void re::ecs2::initInfo_LightService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x381065EB96D171BELL;
  v5[1] = "LightService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_LightService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_LightService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightService>, this);
}

void *re::ecs2::allocInfo_ClientAnchorSyncComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_267, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_267))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A7F0, "ClientAnchorSyncComponent");
    __cxa_guard_release(&_MergedGlobals_267);
  }
  return &unk_26AF8A7F0;
}

void re::ecs2::initInfo_ClientAnchorSyncComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x876CF2DECCC0DC04;
  v20[1] = "ClientAnchorSyncComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A7C8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8A7C8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8A7D0 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "isAnchored";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8A7D8 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "isExternal";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1A00000002;
      *(_DWORD *)(v15 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8A7E0 = v15;
      long long v16 = re::introspectionAllocator((re *)v15);
      uint64_t v17 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "anchorTransform";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2000000003;
      *(_DWORD *)(v18 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8A7E8 = v18;
      __cxa_guard_release(&qword_26AF8A7C8);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8A7D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClientAnchorSyncComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::ClientAnchorSyncComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::ClientAnchorSyncComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClientAnchorSyncComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::ClientAnchorSyncComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F5D88;
  *(_WORD *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *(_OWORD *)(v3 + 32) = xmmword_23435FD50;
  *(_OWORD *)(v3 + 48) = xmmword_23435FD60;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = xmmword_23435FD80;
  *(_OWORD *)(v3 + 8objc_initWeak(location, 0) = xmmword_23435FBB0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ClientAnchorSyncComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ClientAnchorSyncComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F5D88;
  *(_WORD *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *(_OWORD *)(v1 + 32) = xmmword_23435FD50;
  *(_OWORD *)(v1 + 48) = xmmword_23435FD60;
  double result = 0.0;
  *(_OWORD *)(v1 + 64) = xmmword_23435FD80;
  *(_OWORD *)(v1 + 8objc_initWeak(location, 0) = xmmword_23435FBB0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ClientAnchorSyncComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClientAnchorSyncComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClientAnchorSyncComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClientAnchorSyncComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClientAnchorSyncComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClientAnchorSyncComponent>, this);
}

void *re::ecs2::allocInfo_SelectableSceneContentIdentifierComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A870, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A870))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A888, "SelectableSceneContentIdentifierComponent");
    __cxa_guard_release(&qword_26AF8A870);
  }
  return &unk_26AF8A888;
}

void re::ecs2::initInfo_SelectableSceneContentIdentifierComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x7D285A8B2F4746E2;
  v13[1] = "SelectableSceneContentIdentifierComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_268, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_268);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8A878 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_uint32_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_displayListItemIdentifier";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8A880 = v11;
      __cxa_guard_release(&_MergedGlobals_268);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8A878;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SelectableSceneContentIdentifierComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::SelectableSceneContentIdentifierComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::SelectableSceneContentIdentifierComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SelectableSceneContentIdentifierComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::SelectableSceneContentIdentifierComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F60C8;
}

void *re::internal::defaultDestruct<re::ecs2::SelectableSceneContentIdentifierComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::SelectableSceneContentIdentifierComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F60C8;
}

void *re::internal::defaultDestructV2<re::ecs2::SelectableSceneContentIdentifierComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SelectableSceneContentIdentifierComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SelectableSceneContentIdentifierComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SelectableSceneContentIdentifierComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SelectableSceneContentIdentifierComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SelectableSceneContentIdentifierComponent>, this);
}

void *re::ecs2::allocInfo_RenderOptionsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_269, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_269))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A928, "RenderOptionsComponent");
    __cxa_guard_release(&_MergedGlobals_269);
  }
  return &unk_26AF8A928;
}

void re::ecs2::initInfo_RenderOptionsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v16[0] = 0x2852AFBB60071BAALL;
  v16[1] = "RenderOptionsComponent";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A908, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8A908);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8A910 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = introspect_REVisibilityMode(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "mode";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8A918 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_HierarchicalMeshOverrideFlags((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "overrideFlags";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1A00000002;
      *(_DWORD *)(v14 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8A920 = v14;
      __cxa_guard_release(&qword_26AF8A908);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8A910;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderOptionsComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::RenderOptionsComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::RenderOptionsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderOptionsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

void re::internal::defaultConstruct<re::ecs2::RenderOptionsComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t re::internal::defaultDestruct<re::ecs2::RenderOptionsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RenderOptionsComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RenderOptionsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderOptionsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderOptionsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderOptionsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderOptionsComponent>, this);
}

BOOL re::ecs2::RenderOptionsComponent::calculateVisibilityAgainstHierarchy(re::ecs2::RenderOptionsComponent *this, const re::ecs2::Entity *a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  BOOL v11 = 1;
  if (re::ecs2::RenderOptionsComponent::mixVisibility(this, (const re::ecs2::Entity *)1, &v11, 0, a5))
  {
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      if ((*(unsigned char *)(v7 + 288) & 0x80) == 0)
      {
        do
        {
          char v8 = re::ecs2::RenderOptionsComponent::mixVisibility((re::ecs2::RenderOptionsComponent *)v7, (const re::ecs2::Entity *)1, 0, &v11, v6);
          uint64_t v7 = *(void *)(v7 + 24);
          if (!v7) {
            break;
          }
          char v9 = (*(unsigned char *)(v7 + 288) & 0x80) != 0 ? 0 : v8;
        }
        while ((v9 & 1) != 0);
      }
    }
  }
  return v11;
}

uint64_t re::ecs2::RenderOptionsComponent::mixVisibility(re::ecs2::RenderOptionsComponent *this, const re::ecs2::Entity *a2, unsigned char *a3, BOOL *a4, BOOL *a5)
{
  char v8 = (char *)*((void *)this + 27);
  if (v8)
  {
    if (v8[36] && !v8[37])
    {
      if (v8[48])
      {
        if (a4)
        {
          char v15 = 0;
          uint64_t result = 0;
          *a4 = 0;
          goto LABEL_36;
        }
        goto LABEL_25;
      }
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
    }
    int v10 = v8[25];
    if (v10 == 2)
    {
      uint64_t v16 = *((void *)this + 25);
      if (v16 && *(void *)(v16 + 32))
      {
        LODWORD(a2) = RESyncableIsAuthoritative() ^ 1;
        goto LABEL_22;
      }
    }
    else if (v10 != 1)
    {
      if (v10)
      {
        LOBYTE(a2) = 0;
        uint64_t v12 = 0;
        if (v9) {
          goto LABEL_25;
        }
LABEL_27:
        int v17 = *((_DWORD *)this + 72) & 0x41;
        if (v17) {
          char v15 = (char)a2;
        }
        else {
          char v15 = 0;
        }
        if ((*((_DWORD *)this + 72) & 0x41) != 0) {
          uint64_t result = v12;
        }
        else {
          uint64_t result = 0;
        }
        if (a4 && v17)
        {
          char v15 = *a4;
          uint64_t result = v12;
        }
        goto LABEL_36;
      }
      uint64_t v11 = 1;
      uint64_t v12 = 1;
      if (!a4)
      {
LABEL_24:
        if (v9)
        {
LABEL_25:
          char v15 = 0;
          uint64_t result = 0;
          goto LABEL_36;
        }
        goto LABEL_27;
      }
LABEL_23:
      *a4 = (char)a2;
      uint64_t v12 = v11;
      LOBYTE(a2) = 0;
      goto LABEL_24;
    }
    LOBYTE(a2) = 0;
LABEL_22:
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (!a4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (a4) {
    *a4 = (char)a2;
  }
  char v13 = *((unsigned char *)this + 288);
  uint64_t result = (v13 & 0x41) != 0;
  if ((v13 & 0x41) != 0) {
    char v15 = (char)a2;
  }
  else {
    char v15 = 0;
  }
LABEL_36:
  if (a3) {
    *a3 = v15;
  }
  return result;
}

uint64_t re::ecs2::RenderOptionsComponent::mixMeshFlags(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  uint64_t v13 = *(void *)(result + 216);
  if (v13)
  {
    int v14 = *(unsigned __int8 *)(v13 + 26);
    if (*(unsigned char *)(v13 + 26)) {
      unsigned __int8 v12 = *(unsigned char *)(v13 + 27);
    }
    int v23 = *(unsigned __int8 *)(v13 + 28);
    if (*(unsigned char *)(v13 + 28)) {
      unsigned __int8 v11 = *(unsigned char *)(v13 + 29);
    }
    int v22 = *(unsigned __int8 *)(v13 + 30);
    if (*(unsigned char *)(v13 + 30)) {
      unsigned __int8 v8 = *(unsigned char *)(v13 + 31);
    }
    unsigned __int8 v21 = *(unsigned char *)(v13 + 32);
    __int16 v46 = *(_WORD *)(v13 + 33);
    __int16 v15 = *(unsigned __int8 *)(v13 + 35);
    unsigned __int8 v47 = *(unsigned char *)(v13 + 35);
    int v20 = *(unsigned __int8 *)(v13 + 36);
    if (*(unsigned char *)(v13 + 36)) {
      a8 = *(unsigned char *)(v13 + 37);
    }
    int v19 = *(unsigned __int8 *)(v13 + 38);
    if (*(unsigned char *)(v13 + 38)) {
      a5 = *(unsigned char *)(v13 + 39);
    }
    int v18 = *(unsigned __int8 *)(v13 + 40);
    if (*(unsigned char *)(v13 + 40)) {
      unsigned __int8 v10 = *(unsigned char *)(v13 + 41);
    }
    int v17 = *(unsigned __int8 *)(v13 + 42);
    if (*(unsigned char *)(v13 + 42)) {
      unsigned __int8 v9 = *(unsigned char *)(v13 + 43);
    }
    int v16 = *(unsigned __int8 *)(v13 + 44);
    if (*(unsigned char *)(v13 + 44)) {
      __int16 v15 = *(_WORD *)(v13 + 46);
    }
    int v44 = *(_DWORD *)(v13 + 48);
    unsigned __int8 v45 = *(unsigned char *)(v13 + 52);
  }
  else
  {
    __int16 v15 = 0;
    int v16 = 0;
    unsigned __int8 v9 = 0;
    int v17 = 0;
    unsigned __int8 v10 = 0;
    int v18 = 0;
    a5 = 0;
    int v19 = 0;
    a8 = 0;
    int v20 = 0;
    unsigned __int8 v21 = 0;
    unsigned __int8 v8 = 0;
    int v22 = 0;
    unsigned __int8 v11 = 0;
    int v23 = 0;
    unsigned __int8 v12 = 0;
    int v14 = 0;
    unsigned __int8 v47 = 0;
    __int16 v46 = 0;
    int v44 = 0;
    unsigned __int8 v45 = 0;
  }
  int v24 = *a4;
  if (v24 | v14)
  {
    if (v14 || !*a4)
    {
      if (v14 && !*a4)
      {
        int v24 = 1;
        *a4 = 1;
      }
      a4[1] = v12;
    }
    else
    {
      int v24 = 0;
      *a4 = 0;
    }
  }
  int v25 = a4[2];
  if (v25 | v23)
  {
    if (v23 || !a4[2])
    {
      if (v23 && !a4[2])
      {
        int v25 = 1;
        a4[2] = 1;
      }
      a4[3] = v11;
    }
    else
    {
      int v25 = 0;
      a4[2] = 0;
    }
  }
  int v26 = a4[4];
  if (v26 | v22)
  {
    if (v22 || !a4[4])
    {
      if (v22 && !a4[4])
      {
        int v26 = 1;
        a4[4] = 1;
      }
      a4[5] = v8;
    }
    else
    {
      int v26 = 0;
      a4[4] = 0;
    }
  }
  *(_WORD *)(a4 + re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = v46;
  uint64_t v27 = a4 + 7;
  a4[6] = v21;
  a4[9] = v47;
  int v28 = a4[10];
  if (v28 | v20)
  {
    if (v20 || !a4[10])
    {
      if (v20 && !a4[10])
      {
        int v28 = 1;
        a4[10] = 1;
      }
      a4[11] = a8;
    }
    else
    {
      int v28 = 0;
      a4[10] = 0;
    }
  }
  int v29 = a4[12];
  if (v29 | v19)
  {
    if (v19 || !a4[12])
    {
      if (v19 && !a4[12])
      {
        int v29 = 1;
        a4[12] = 1;
      }
      a4[13] = a5;
    }
    else
    {
      int v29 = 0;
      a4[12] = 0;
    }
  }
  int v30 = a4[14];
  if (v30 | v18)
  {
    if (v18 || !a4[14])
    {
      if (v18 && !a4[14])
      {
        int v30 = 1;
        a4[14] = 1;
      }
      a4[15] = v10;
    }
    else
    {
      int v30 = 0;
      a4[14] = 0;
    }
  }
  int v31 = a4[16];
  if (v31 | v17)
  {
    if (v17 || !a4[16])
    {
      if (v17 && !a4[16])
      {
        int v31 = 1;
        a4[16] = 1;
      }
      a4[17] = v9;
    }
    else
    {
      int v31 = 0;
      a4[16] = 0;
    }
  }
  int v32 = a4[18];
  if (v32 | v16)
  {
    if (v16 || !a4[18])
    {
      if (v16 && !a4[18])
      {
        int v32 = 1;
        a4[18] = 1;
      }
      *((_WORD *)a4 + 1objc_initWeak(location, 0) = v15;
    }
    else
    {
      int v32 = 0;
      a4[18] = 0;
    }
  }
  *(_DWORD *)(a4 + 22) = v44;
  unsigned __int8 v33 = a4 + 22;
  a4[26] = v45;
  if (*(unsigned char *)(a2 + 8))
  {
    if (*(unsigned char *)(a2 + 6))
    {
      a4[8] = 1;
      a4[6] = 1;
      if (v25) {
        a4[2] = 0;
      }
    }
    else if (*(unsigned char *)(a2 + 2))
    {
      a4[8] = 1;
      a4[6] = 0;
      unsigned __int8 v34 = *(unsigned char *)(a2 + 3);
      if (!v25) {
        a4[2] = 1;
      }
      a4[3] = v34;
    }
  }
  if (*(unsigned char *)a2 && *(unsigned char *)(a2 + 7))
  {
    *uint64_t v27 = 1;
    unsigned __int8 v35 = *(unsigned char *)(a2 + 1);
    if (!v24) {
      *a4 = 1;
    }
    a4[1] = v35;
    int v24 = 1;
  }
  if (*(unsigned char *)(a2 + 4) && *(unsigned char *)(a2 + 9))
  {
    a4[9] = 1;
    unsigned __int8 v36 = *(unsigned char *)(a2 + 5);
    if (!v26) {
      a4[4] = 1;
    }
    a4[5] = v36;
  }
  if (*(unsigned char *)(a2 + 10) && *(unsigned char *)(a2 + 22))
  {
    *unsigned __int8 v33 = 1;
    unsigned __int8 v37 = *(unsigned char *)(a2 + 11);
    if (!v28) {
      a4[10] = 1;
    }
    a4[11] = v37;
  }
  if (*(unsigned char *)(a2 + 12) && *(unsigned char *)(a2 + 23))
  {
    a4[23] = 1;
    unsigned __int8 v38 = *(unsigned char *)(a2 + 13);
    if (!v29) {
      a4[12] = 1;
    }
    a4[13] = v38;
  }
  if (*(unsigned char *)(a2 + 14) && *(unsigned char *)(a2 + 24))
  {
    a4[24] = 1;
    unsigned __int8 v39 = *(unsigned char *)(a2 + 15);
    if (!v30) {
      a4[14] = 1;
    }
    a4[15] = v39;
  }
  if (*(unsigned char *)(a2 + 16) && *(unsigned char *)(a2 + 25))
  {
    a4[25] = 1;
    unsigned __int8 v40 = *(unsigned char *)(a2 + 17);
    if (!v31) {
      a4[16] = 1;
    }
    a4[17] = v40;
  }
  if (*(unsigned char *)(a2 + 18) && *(unsigned char *)(a2 + 26))
  {
    a4[26] = 1;
    __int16 v41 = *(_WORD *)(a2 + 20);
    if (!v32) {
      a4[18] = 1;
    }
    *((_WORD *)a4 + 1objc_initWeak(location, 0) = v41;
  }
  if ((*(unsigned char *)(result + 288) & 0x41) != 0)
  {
    if (*a3 | v24)
    {
      if (!*a3 || v24)
      {
        if (!*a3 && v24) {
          *a3 = 1;
        }
        a3[1] = a4[1];
      }
      else
      {
        *a3 = 0;
      }
    }
    if (a3[2] || a4[2])
    {
      if (!a3[2] || a4[2])
      {
        if (!a3[2] && a4[2]) {
          a3[2] = 1;
        }
        a3[3] = a4[3];
      }
      else
      {
        a3[2] = 0;
      }
    }
    if (a3[4] || a4[4])
    {
      if (!a3[4] || a4[4])
      {
        if (!a3[4] && a4[4]) {
          a3[4] = 1;
        }
        a3[5] = a4[5];
      }
      else
      {
        a3[4] = 0;
      }
    }
    a3[6] = a4[6];
    __int16 v42 = *(_WORD *)v27;
    a3[9] = a4[9];
    *(_WORD *)(a3 + re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = v42;
    if (a3[10] || a4[10])
    {
      if (!a3[10] || a4[10])
      {
        if (!a3[10] && a4[10]) {
          a3[10] = 1;
        }
        a3[11] = a4[11];
      }
      else
      {
        a3[10] = 0;
      }
    }
    if (a3[12] || a4[12])
    {
      if (!a3[12] || a4[12])
      {
        if (!a3[12] && a4[12]) {
          a3[12] = 1;
        }
        a3[13] = a4[13];
      }
      else
      {
        a3[12] = 0;
      }
    }
    if (a3[14] || a4[14])
    {
      if (!a3[14] || a4[14])
      {
        if (!a3[14] && a4[14]) {
          a3[14] = 1;
        }
        a3[15] = a4[15];
      }
      else
      {
        a3[14] = 0;
      }
    }
    if (a3[16] || a4[16])
    {
      if (!a3[16] || a4[16])
      {
        if (!a3[16] && a4[16]) {
          a3[16] = 1;
        }
        a3[17] = a4[17];
      }
      else
      {
        a3[16] = 0;
      }
    }
    if (a3[18] || a4[18])
    {
      if (!a3[18] || a4[18])
      {
        if (!a3[18])
        {
          if (a4[18]) {
            a3[18] = 1;
          }
        }
        *((_WORD *)a3 + 1objc_initWeak(location, 0) = *((_WORD *)a4 + 10);
      }
      else
      {
        a3[18] = 0;
      }
    }
    int v43 = *(_DWORD *)v33;
    a3[26] = a4[26];
    *(_DWORD *)(a3 + 22) = v43;
  }
  else
  {
    if (*a3) {
      *a3 = 0;
    }
    if (a3[2]) {
      a3[2] = 0;
    }
    if (a3[4]) {
      a3[4] = 0;
    }
    *(_DWORD *)(a3 + 6) = 0;
    if (!a3[10]) {
      a3[10] = 1;
    }
    a3[11] = 0;
    if (a3[12]) {
      a3[12] = 0;
    }
    if (a3[14]) {
      a3[14] = 0;
    }
    if (a3[16]) {
      a3[16] = 0;
    }
    if (a3[18]) {
      a3[18] = 0;
    }
    a3[26] = 0;
    *(_DWORD *)(a3 + 22) = 0;
  }
  return result;
}

void re::make::shared::unsafelyInplace<re::ecs2::RenderOptionsComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EFFF0;
  *(_WORD *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *(unsigned char *)(v1 + 28) = 0;
  *(unsigned char *)(v1 + 3objc_initWeak(location, 0) = 0;
  *(unsigned char *)(v1 + 38) = 0;
  *(unsigned char *)(v1 + 4objc_initWeak(location, 0) = 0;
  *(unsigned char *)(v1 + 42) = 0;
  *(unsigned char *)(v1 + 44) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 36) = 0;
  *(_DWORD *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 52) = 0;
}

uint64_t re::ecs2::DynamicBoundingBoxComponent::setMeshPartEstimatedBoundingBox(_anonymous_namespace_ *a1, uint64_t a2, unsigned int a3, _OWORD *a4)
{
  re::ecs2::DynamicBoundingBoxComponent::ensureMeshPartCount(a1, a3 + 1);
  if (*((void *)a1 + 27) <= (unint64_t)a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned __int8 v8 = (_OWORD *)(*((void *)a1 + 29) + 32 * a3);
  long long v9 = a4[1];
  *unsigned __int8 v8 = *a4;
  v8[1] = v9;
  if (*((void *)a1 + 32) <= (unint64_t)a3) {
    goto LABEL_7;
  }
  *(void *)(*((void *)a1 + 34) + 8 * are::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = a2;
  return re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)a1 + 280, a3);
}

_anonymous_namespace_ *re::ecs2::DynamicBoundingBoxComponent::ensureMeshPartCount(_anonymous_namespace_ *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 27);
  if (v2 >= a2) {
    return this;
  }
  long long v4 = this;
  if (*((void *)this + 26) < a2)
  {
    re::DynamicArray<re::AABB>::setCapacity((void *)this + 25, a2);
    unint64_t v2 = *((void *)v4 + 27);
  }
  if (v2 < a2)
  {
    uint64_t v5 = *((void *)v4 + 29);
    uint64_t v6 = (int32x4_t *)(v5 + 32 * v2);
    uint64_t v7 = v5 + 32 * a2 - (void)v6;
    if (v7 >= 1)
    {
      unint64_t v8 = ((unint64_t)v7 >> 5) + 1;
      int32x4_t v9 = vdupq_n_s32(0x7F800000u);
      v10.i64[0] = 0x7F0000007FLL;
      v10.i64[1] = 0x7F0000007FLL;
      do
      {
        int32x4_t *v6 = v9;
        v6[1] = v10;
        v6 += 2;
        --v8;
      }
      while (v8 > 1);
    }
  }
  *((void *)v4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = a2;
  ++*((_DWORD *)v4 + 56);
  unint64_t v11 = *((void *)v4 + 32);
  if (v11 >= a2)
  {
    if (v11 <= a2) {
      goto LABEL_16;
    }
  }
  else
  {
    if (*((void *)v4 + 31) < a2)
    {
      re::DynamicArray<float *>::setCapacity((void *)v4 + 30, a2);
      unint64_t v11 = *((void *)v4 + 32);
    }
    if (v11 < a2)
    {
      unsigned __int8 v12 = (void *)(*((void *)v4 + 34) + 8 * v11);
      uint64_t v13 = 8 * a2 - 8 * v11;
      if (v13 >= 1) {
        memset_pattern16(v12, &unk_234386D00, 8 * (((unint64_t)v13 >> 3) - ((unint64_t)v13 > 7)) + 8);
      }
    }
  }
  *((void *)v4 + 32) = a2;
  ++*((_DWORD *)v4 + 66);
LABEL_16:
  unint64_t v14 = *((void *)v4 + 41);
  if ((a2 & 0x3F) != 0) {
    unint64_t v15 = (a2 >> 6) + 1;
  }
  else {
    unint64_t v15 = a2 >> 6;
  }
  *((void *)v4 + 4re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = a2;
  uint64_t v21 = 0;
  this = re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)((char *)v4 + 280), v15, &v21);
  if (v14 > a2)
  {
    uint64_t v16 = 63;
    uint64_t v17 = *((void *)v4 + 41) & 0x3FLL;
    if (v17)
    {
      BOOL v18 = v17 == 63;
      uint64_t v19 = -1 << v17;
      if (!v18) {
        uint64_t v16 = ~v19;
      }
    }
    if (*((unsigned char *)v4 + 296)) {
      int v20 = (char *)v4 + 304;
    }
    else {
      int v20 = (char *)*((void *)v4 + 39);
    }
    *(void *)&v20[8 * *((void *)v4 + 36) - 8] &= v16;
  }
  return this;
}

void re::ecs2::DynamicBoundingBoxComponent::resetDynamicBoundingBoxData(re::ecs2::DynamicBoundingBoxComponent *this)
{
  v4[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = (id *)((char *)this + 88);
  inited = (re *)objc_initWeak(&location, 0);
  memset(v4, 0, 24);
  v4[3] = re::globalAllocators(inited)[2];
  v4[4] = 0;
  re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::DynamicBoundingBoxData,re::FrameManager>::reset(v1, &location, 0, (uint64_t)v4);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v4);
  objc_destroyWeak(&location);
}

void *re::ecs2::DynamicBoundingBoxComponentStateImpl::DynamicBoundingBoxComponentStateImpl(void *a1, uint64_t a2)
{
  v5[3] = *MEMORY[0x263EF8340];
  *a1 = &unk_26E702E60;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
  v4[0] = v5;
  v4[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(a1 + 2), (uint64_t)v4);
  return a1;
}

void re::ecs2::DynamicBoundingBoxComponentStateImpl::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3, void *a4)
{
  uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (v8)
  {
    if (re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4
      || re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a4)
    {
      *(void *)(v8 + 216) = 0;
      ++*(_DWORD *)(v8 + 224);
      int v10 = *(_DWORD *)(v8 + 296);
      if (v10) {
        unint64_t v11 = (void *)(v8 + 304);
      }
      else {
        unint64_t v11 = *(void **)(v8 + 312);
      }
      uint64_t v12 = *(void *)(v8 + 288);
      while (1)
      {
        uint64_t v13 = v8 + 304;
        if ((v10 & 1) == 0) {
          uint64_t v13 = *(void *)(v8 + 312);
        }
        if (v11 == (void *)(v13 + 8 * v12)) {
          break;
        }
        *v11++ = 0;
        int v10 = *(_DWORD *)(v8 + 296);
      }
    }
  }
  re::ecs2::BasicComponentStateImpl<re::ecs2::MeshDeformationComponent>::didDependentComponentChange(a1, a2, a3);
}

BOOL re::ecs2::DynamicBoundingBoxComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v27, a5, 0);
  unint64_t v8 = v27;
  unint64_t v9 = v28;
  unint64_t v27 = a4;
  unint64_t v28 = v8;
  unint64_t v29 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(*(void *)v14 + 16);
      uint64_t v17 = (re::ecs2::DynamicBoundingBoxComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      BOOL v18 = v17;
      if (v17) {
        re::ecs2::DynamicBoundingBoxComponent::resetDynamicBoundingBoxData(v17);
      }
      uint64_t v19 = *(void *)(v16 + 176);
      if (*(void *)(v15 + 240)) {
        BOOL v20 = *(void *)(v15 + 392) == 0;
      }
      else {
        BOOL v20 = 1;
      }
      BOOL v21 = v20 || v19 == 0;
      int v22 = (unint64_t *)(a3 + 32);
      if (!v21)
      {
        int v22 = (unint64_t *)(a3 + 32);
        if (*(void *)(v19 + 40))
        {
          if (v18
            || (v26[0] = v15 + 232,
                v26[1] = 4,
                int v22 = (unint64_t *)(a3 + 32),
                !re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v26)))
          {
            int v22 = (unint64_t *)(a3 + 40);
          }
        }
      }
      unint64_t v23 = v27;
      unint64_t v24 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v23, v24, *v22);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
    }
    while (v28 != a5 || (unsigned __int16)v29 != 0xFFFF || WORD1(v29) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::DynamicBoundingBoxComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v76 = *(void *)(*(void *)(a1 + 8) + 112);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v96, a5, 0);
  unint64_t v81 = a4;
  long long v82 = v96;
  if ((void)v96 != a5 || WORD4(v96) != 0xFFFFLL || (DWORD2(v96) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v9 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v82);
      uint64_t v10 = *(void **)v9;
      uint64_t v11 = *(void *)(*(void *)v9 + 16);
      uint64_t v12 = *(void *)(v11 + 176);
      uint64_t v13 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v12 + 32));
      if (!v13)
      {
        uint64_t v28 = *(void *)(v12 + 40);
        if (v28 && (unsigned int v29 = atomic_load((unsigned int *)(v28 + 704)), v29 == 3))
        {
          unint64_t v30 = v81;
          unint64_t v31 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v82);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v30, v31, *(void *)(a3 + 32));
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)(v12 + 32));
        }
        goto LABEL_46;
      }
      uint64_t v14 = v13;
      uint64_t v15 = v10[31];
      uint64_t v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      uint64_t v17 = v10;
      if (v16)
      {
        BOOL v18 = *(void **)(v16 + 40);
        if (v18)
        {
          if (v15 != *v18)
          {
            uint64_t v19 = (id *)(v16 + 32);
            inited = (re *)objc_initWeak(&location, 0);
            *(void *)&long long v98 = 0;
            long long v96 = 0u;
            long long v97 = 0u;
            *((void *)&v97 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::globalAllocators(inited)[2];
            *(void *)&long long v98 = 0;
            re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::BoundingBoxBufferInputs,re::FrameManager>::reset(v19, &location, 0, (uint64_t)&v96);
            re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v96);
            objc_destroyWeak(&location);
            id location = 0;
          }
        }
      }
      unint64_t v78 = v10 + 29;
      uint64_t v79 = 4;
      if (re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)&v78))
      {
        uint64_t v21 = *(unsigned __int16 *)(v11 + 82);
        int v22 = (unint64_t *)(a3 + 32);
        if (!*(_WORD *)(v11 + 82)) {
          goto LABEL_45;
        }
        unint64_t v23 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType
                              + 16);
        unint64_t v24 = *(int16x8_t **)(v11 + 88);
        int16x8_t v25 = vld1q_dup_s16(v23);
        int v26 = 1;
        while (1)
        {
          uint16x8_t v27 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v25, *v24), (int8x16_t)xmmword_23436BBD0);
          v27.i16[0] = vmaxvq_u16(v27);
          if (v27.i32[0]) {
            break;
          }
          v26 -= 8;
          ++v24;
          if (!--v21)
          {
            int v22 = (unint64_t *)(a3 + 32);
            goto LABEL_45;
          }
        }
        int v22 = (unint64_t *)(a3 + 32);
        if (v27.u16[0] - v26 >= *(unsigned __int16 *)(v11 + 80)) {
          goto LABEL_45;
        }
      }
      else
      {
        unint64_t v74 = v10;
        uint64_t v32 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
        if (!*(void *)(v32 + 40))
        {
          uint64_t v33 = v32;
          uint64_t v34 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v34) {
            unsigned __int8 v35 = (re::MeshNameMap *)(v34 + 216);
          }
          else {
            unsigned __int8 v35 = (re::MeshNameMap *)(v14 + 448);
          }
          uint64_t v36 = *(void *)(v76 + 136);
          if (v36) {
            unsigned __int8 v37 = (void *)(v36 + 8);
          }
          else {
            unsigned __int8 v37 = 0;
          }
          unsigned __int8 v38 = (re *)objc_initWeak(&v77, v37);
          unsigned __int8 v39 = re::globalAllocators(v38);
          unsigned __int8 v40 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39[2] + 32))(v39[2], 56, 8);
          *(void *)unsigned __int8 v40 = v10[31];
          long long v41 = 0uLL;
          *(_OWORD *)(v40 + 1objc_initWeak(location, 0) = 0u;
          *(_OWORD *)(v40 + 6) = 0u;
          *(_OWORD *)(v40 + 2) = 0u;
          v86[0] = v10 + 29;
          v86[1] = 4;
          unint64_t v42 = v10[46];
          if (v42 <= 4) {
            goto LABEL_77;
          }
          int v43 = v40;
          unint64_t v42 = *(void *)(v10[47] + 440);
          if (!v42) {
            goto LABEL_65;
          }
          *((void *)v43 + 2) = v42;
          if (v42 >> 61)
          {
LABEL_78:
            re::internal::assertLog((re::internal *)6, v44, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v42);
            _os_crash();
            __break(1u);
          }
          else
          {
            *((void *)v43 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v45;
            if (v45)
            {
              unsigned __int8 v47 = v45;
              if (v42 != 1)
              {
                bzero(v45, 8 * v42 - 8);
                v47 += v42 - 1;
              }
              *unsigned __int8 v47 = 0;
              uint64_t v48 = *((void *)v35 + 42);
              if (v48)
              {
                uint64_t v49 = *(unsigned int *)(*((void *)v35 + 43) + 4 * v48 - 4);
                *((void *)v43 + 5) = v49;
                if (v49)
                {
                  *((void *)v43 + 6) = v50;
                  if (v50)
                  {
                    uint64_t v52 = v50;
                    uint64_t v53 = v49 - 1;
                    if (v53)
                    {
                      long long v54 = 0uLL;
                      do
                      {
                        *(void *)(v52 + 64) = 0;
                        *(_OWORD *)(v52 + 32) = v54;
                        *(_OWORD *)(v52 + 48) = v54;
                        *(_OWORD *)uint64_t v52 = v54;
                        *(_OWORD *)(v52 + 16) = v54;
                        memset_pattern16((void *)(v52 + 8), &unk_234386D00, 0x40uLL);
                        long long v54 = 0uLL;
                        *(_OWORD *)(v52 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
                        *(_OWORD *)(v52 + 104) = 0u;
                        *(_OWORD *)(v52 + 88) = 0u;
                        *(_OWORD *)(v52 + 72) = 0u;
                        v52 += 136;
                        --v53;
                      }
                      while (v53);
                    }
                    *(void *)uint64_t v52 = 0;
                    memset_pattern16((void *)(v52 + 8), &unk_234386D00, 0x40uLL);
                    *(_OWORD *)(v52 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
                    *(_OWORD *)(v52 + 104) = 0u;
                    *(_OWORD *)(v52 + 88) = 0u;
                    *(_OWORD *)(v52 + 72) = 0u;
                    goto LABEL_52;
                  }
LABEL_80:
                  re::internal::assertLog((re::internal *)4, v51, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
                  _os_crash();
                  __break(1u);
                }
              }
              else
              {
                *((void *)v43 + 5) = 0;
              }
LABEL_52:
              unsigned int v57 = 0;
              uint64_t v83 = v17 + 29;
              uint64_t v84 = 4;
              unsigned __int16 v85 = 0;
              while (1)
              {
                unsigned __int8 v40 = re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v86, (uint64_t)&v96);
                if (HIDWORD(v84) == HIDWORD(v96) && v85 == (unsigned __int16)v97) {
                  break;
                }
                unint64_t v58 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v83);
                unint64_t v59 = re::MeshNameMap::meshPartStartIndexForInstance(v35, v58) + WORD2(v58);
                unint64_t v60 = *((void *)v43 + 5);
                if (v60 <= v59) {
                  goto LABEL_74;
                }
                uint64_t v61 = v33;
                unint64_t v62 = v35;
                uint64_t v63 = *((void *)v43 + 6);
                id v64 = *(id *)(v76 + 184);
                uint64_t v65 = 0;
                unsigned __int8 v35 = (re::MeshNameMap *)(v63 + 136 * v59 + 72);
                do
                {
                  if (objc_msgSend(*(id *)((char *)v35 + v65), sel_length) != (id)32)
                  {
                    *(void *)&long long v96 = objc_msgSend(v64, sel_newBufferWithLength_options_, 32, 0);
                    NS::SharedPtr<MTL::Texture>::operator=((void **)((char *)v35 + v65), (void **)&v96);
                    if ((void)v96) {
                  }
                    }
                  v65 += 8;
                }
                while (v65 != 64);

                unint64_t v60 = *((void *)v43 + 5);
                if (v60 <= v59) {
                  goto LABEL_75;
                }
                unint64_t v60 = v57;
                unsigned __int8 v35 = (re::MeshNameMap *)*((void *)v43 + 2);
                if ((unint64_t)v35 <= v57) {
                  goto LABEL_76;
                }
                *(void *)(*((void *)v43 + 3) + 8 * v5re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = *((void *)v43 + 6) + 136 * v59;
                re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v83);
                ++v57;
                unsigned __int8 v35 = v62;
                uint64_t v33 = v61;
              }
              long long v41 = 0uLL;
LABEL_65:
              *(void *)&long long v98 = 0;
              long long v96 = v41;
              long long v97 = v41;
              *((void *)&v97 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::globalAllocators((re *)v40)[2];
              *(void *)&long long v98 = 0;
              re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::BoundingBoxBufferInputs,re::FrameManager>::reset((id *)(v33 + 32), &v77, v43, (uint64_t)&v96);
              re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v96);
              objc_destroyWeak(&v77);
              unint64_t v59 = 0;
              unint64_t v66 = 0;
              id v77 = 0;
              uint64_t v67 = v74[49];
              unint64_t v60 = *(void *)(v67 + 88);
              unsigned __int8 v35 = *(re::MeshNameMap **)(v67 + 96);
              uint64_t v83 = v78;
              uint64_t v84 = v79;
              unsigned __int16 v85 = 0;
              while (1)
              {
                re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)&v78, (uint64_t)&v96);
                if (HIDWORD(v84) == HIDWORD(v96) && v85 == (unsigned __int16)v97) {
                  goto LABEL_44;
                }
                unsigned int v68 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v83);
                if (v60 <= v68) {
                  break;
                }
                uint64_t v70 = *(void *)(v33 + 40);
                int v43 = *(unsigned int **)(v70 + 16);
                if ((unint64_t)v43 <= v66) {
                  goto LABEL_73;
                }
                unint64_t v71 = *(void *)(v70 + 24) + v59;
                unint64_t v72 = (void *)((char *)v35 + 168 * v68);
                ++*((unsigned char *)v72 + 4);
                v72[7] = v71;
                re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v83);
                ++v66;
                v59 += 8;
              }
              re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v68, v60);
              _os_crash();
              __break(1u);
LABEL_73:
              v86[0] = 0;
              long long v99 = 0u;
              long long v100 = 0u;
              long long v97 = 0u;
              long long v98 = 0u;
              long long v96 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v88 = 136315906;
              id v89 = "operator[]";
              __int16 v90 = 1024;
              int v91 = 468;
              __int16 v92 = 2048;
              uint64_t v93 = v66;
              __int16 v94 = 2048;
              id v95 = v43;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_74:
              uint64_t v87 = 0;
              long long v99 = 0u;
              long long v100 = 0u;
              long long v97 = 0u;
              long long v98 = 0u;
              long long v96 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v88 = 136315906;
              id v89 = "operator[]";
              __int16 v90 = 1024;
              int v91 = 468;
              __int16 v92 = 2048;
              uint64_t v93 = v59;
              __int16 v94 = 2048;
              id v95 = (unsigned int *)v60;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_75:
              uint64_t v87 = 0;
              long long v99 = 0u;
              long long v100 = 0u;
              long long v97 = 0u;
              long long v98 = 0u;
              long long v96 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v88 = 136315906;
              id v89 = "operator[]";
              __int16 v90 = 1024;
              int v91 = 468;
              __int16 v92 = 2048;
              uint64_t v93 = v59;
              __int16 v94 = 2048;
              id v95 = (unsigned int *)v60;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_76:
              uint64_t v87 = 0;
              unint64_t v42 = (unint64_t)&v88;
              long long v99 = 0u;
              long long v100 = 0u;
              long long v97 = 0u;
              long long v98 = 0u;
              long long v96 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v88 = 136315906;
              id v89 = "operator[]";
              __int16 v90 = 1024;
              int v91 = 468;
              __int16 v92 = 2048;
              uint64_t v93 = v60;
              __int16 v94 = 2048;
              id v95 = (unsigned int *)v35;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_77:
              uint64_t v83 = 0;
              long long v99 = v41;
              long long v100 = v41;
              long long v97 = v41;
              long long v98 = v41;
              long long v96 = v41;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v88 = 136315906;
              id v89 = "operator[]";
              __int16 v90 = 1024;
              int v91 = 476;
              __int16 v92 = 2048;
              uint64_t v93 = 4;
              __int16 v94 = 2048;
              id v95 = (unsigned int *)v42;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_78;
            }
          }
          re::internal::assertLog((re::internal *)4, v46, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
          goto LABEL_80;
        }
      }
LABEL_44:
      int v22 = (unint64_t *)(a3 + 48);
LABEL_45:
      unint64_t v55 = v81;
      unint64_t v56 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v82);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v55, v56, *v22);
LABEL_46:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v82);
    }
    while ((void)v82 != a5 || WORD4(v82) != 0xFFFF || WORD5(v82) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::DynamicBoundingBoxComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v187 = *MEMORY[0x263EF8340];
  uint64_t v156 = *(void *)(*(void *)(a1 + 8) + 112);
  uint64_t v7 = *(void *)(*(void *)(v156 + 136) + 32);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v182, a5, 0);
  unint64_t v164 = a4;
  float32x4_t v165 = v182;
  if (v182.i64[0] == v5 && v182.u16[4] == 0xFFFFLL && (v182.i32[2] & 0xFFFF0000) == 4294901760) {
    return *(_DWORD *)(v5 + 40) != 0;
  }
  unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v145 = v7 & 0xFFFFFFFFFFFFFFFLL;
  int32x4_t v150 = vdupq_n_s32(0x7F800000u);
  uint64_t v142 = v5;
  do
  {
    uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v165);
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(*(void *)v11 + 16);
    uint64_t v14 = (re::ecs2::EntityComponentCollection *)(v13 + 32);
    uint64_t v15 = *(void *)(v13 + 176);
    uint64_t v16 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v15 + 32));
    uint64_t v17 = *(void **)(v16 + 392);
    uint64_t v18 = *(void *)(v16 + 376);
    uint64_t v19 = re::ecs2::EntityComponentCollection::get(v14, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v19)
    {
      uint64_t v20 = v19 + 216;
      uint64_t v148 = *(void **)(v19 + 208);
      uint64_t v153 = *(void *)(v19 + 192);
    }
    else
    {
      uint64_t v153 = v18;
      uint64_t v148 = v17;
      uint64_t v20 = v16 + 448;
    }
    uint64_t v21 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::getOrAdd(v14, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    uint64_t v22 = (uint64_t)v21;
    uint64_t v162 = v12 + 232;
    uint64_t v163 = 4;
    uint64_t v23 = *((void *)v21 + 5);
    if (v23)
    {
      uint64_t v24 = *(void *)(v20 + 336);
      if (v24) {
        unint64_t v25 = *(unsigned int *)(*(void *)(v20 + 344) + 4 * v24 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
      re::ecs2::DynamicBoundingBoxComponent::ensureMeshPartCount(v21, v25);
      char v27 = 0;
      *(void *)uint64_t v177 = v162;
      *(void *)&v177[8] = v163;
      *(_WORD *)&v177[16] = 0;
      while (1)
      {
        re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)&v162, (uint64_t)&v182);
        if (*(_DWORD *)&v177[12] == v182.i32[3] && *(unsigned __int16 *)&v177[16] == v183.u16[0]) {
          break;
        }
        unint64_t v28 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)v177);
        unint64_t v29 = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, v28) + WORD2(v28);
        if (*(void *)(v23 + 40) <= v29) {
          break;
        }
        uint64_t v30 = *(void *)(v23 + 48);
        uint64_t v31 = *(void *)(v30 + 136 * v29);
        uint64_t v32 = 8;
        if (v31 > 8) {
          uint64_t v32 = *(void *)(v30 + 136 * v29);
        }
        uint64_t v33 = v32 - 8;
        do
        {
          if (v31 <= v33) {
            goto LABEL_34;
          }
          uint64_t v34 = --v31 & 7;
        }
        while ((*(void *)(v30 + 136 * v29 + 8 * v34 + 8) & 0xFFFFFFFFFFFFFFFuLL) > v10);
        unint64_t started = *(void *)(v22 + 256);
        if (started <= v29) {
          goto LABEL_132;
        }
        unint64_t v36 = *(void *)(*(void *)(v22 + 272) + 8 * v29) & 0xFFFFFFFFFFFFFFFLL;
        if (v36 == 0xFFFFFFFFFFFFFFFLL || v10 >= v36)
        {
          unsigned __int8 v38 = objc_msgSend(*(id *)(v30 + 136 * v29 + 8 * v34 + 72), sel_contents);
          unint64_t started = *(void *)(v22 + 216);
          if (started <= v29) {
            goto LABEL_133;
          }
          unsigned __int8 v39 = (_OWORD *)(*(void *)(v22 + 232) + 32 * v29);
          long long v40 = v38[1];
          *unsigned __int8 v39 = *v38;
          v39[1] = v40;
          re::DynamicBitset<unsigned long long,256ul>::setBit(v22 + 280, v29);
        }
        else
        {
          char v27 = 1;
        }
LABEL_34:
        re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)v177);
      }
      char v26 = v27 & 1;
    }
    else
    {
      char v26 = 1;
    }
    re::ecs2::MeshComponent::updateStaticBoundingBoxData((void *)v15, *(const re::ecs2::Entity **)(v15 + 16), 0);
    uint64_t v41 = *(void *)(v15 + 288);
    if (v41) {
      unint64_t v42 = (uint64_t *)(v41 + 80);
    }
    else {
      unint64_t v42 = 0;
    }
    re::ecs2::MeshComponent::updateStaticBoundingBoxData((void *)v15, *(const re::ecs2::Entity **)(v15 + 16), 0);
    uint64_t v44 = *(void *)(v15 + 288);
    if (v44) {
      unsigned __int8 v45 = (uint64_t *)(v44 + 152);
    }
    else {
      unsigned __int8 v45 = 0;
    }
    unint64_t v46 = v42[3];
    uint64_t v47 = *v45;
    uint64_t v48 = v45[3];
    v43.i32[0] = *(_DWORD *)(v15 + 96);
    int32x2_t v159 = v43;
    uint64_t v171 = *v42;
    unint64_t v172 = v46;
    v170[0] = v47;
    v170[1] = v48;
    if (!*(_DWORD *)(v20 + 216))
    {
      re::ecs2::DynamicBoundingBoxComponent::resetDynamicBoundingBoxData((re::ecs2::DynamicBoundingBoxComponent *)v22);
      inited = (re *)objc_initWeak((id *)v174, 0);
      float32x4_t v182 = 0uLL;
      v183.i64[0] = 0;
      v183.i64[1] = re::globalAllocators(inited)[2];
      *(void *)&long long v184 = 0;
      re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::PersistentDynamicBoundingBoxData,re::FrameManager>::reset((id *)(v22 + 144), (id *)v174, 0, (uint64_t)&v182);
      re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v182);
      objc_destroyWeak((id *)v174);
      if ((v26 & 1) == 0) {
        goto LABEL_121;
      }
      goto LABEL_122;
    }
    char v144 = v26;
    uint64_t v157 = *(void *)(v22 + 152);
    uint64_t v49 = *(void *)(v156 + 136);
    if (v49) {
      uint64_t v50 = (void *)(v49 + 8);
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t v51 = (re *)objc_initWeak(&location, v50);
    uint64_t v52 = re::globalAllocators(v51);
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52[2] + 32))(v52[2], 224, 8);
    *(_OWORD *)(v53 + 16objc_initWeak(location, 0) = 0u;
    *(_OWORD *)(v53 + 176) = 0u;
    *(_OWORD *)(v53 + 128) = 0u;
    *(_OWORD *)(v53 + 144) = 0u;
    *(_OWORD *)uint64_t v53 = 0u;
    *(_OWORD *)(v53 + 16) = 0u;
    *(_OWORD *)(v53 + 32) = 0u;
    *(_OWORD *)(v53 + 48) = 0u;
    *(_OWORD *)(v53 + 64) = 0u;
    *(_OWORD *)(v53 + 8objc_initWeak(location, 0) = 0u;
    *(_OWORD *)(v53 + 96) = 0u;
    *(_OWORD *)(v53 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0u;
    *(_OWORD *)(v53 + 192) = 0u;
    *(_OWORD *)(v53 + 208) = 0u;
    *(_DWORD *)(v53 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 1;
    *(void *)(v53 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
    *(void *)(v53 + 128) = 0;
    *(_OWORD *)(v53 + 168) = 0u;
    *(_OWORD *)(v53 + 152) = 0u;
    *(_DWORD *)(v53 + 184) = 1;
    *(void *)(v53 + 192) = 0;
    *(void *)(v53 + 20objc_initWeak(location, 0) = 0;
    *(void *)&long long v184 = 0;
    float32x4_t v182 = 0u;
    float32x4_t v183 = 0u;
    v183.i64[1] = re::globalAllocators((re *)v53)[2];
    *(void *)&long long v184 = 0;
    re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::DynamicBoundingBoxData,re::FrameManager>::reset((id *)(v22 + 88), &location, (void *)v53, (uint64_t)&v182);
    re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v182);
    objc_destroyWeak(&location);
    id location = 0;
    uint64_t v54 = *(void *)(v22 + 96);
    unint64_t v55 = v172;
    unsigned int v57 = (_anonymous_namespace_ *)re::DynamicArray<re::AABB>::setCapacity((void *)v54, v55);
    ++*(_DWORD *)(v54 + 24);
    *(void *)(v54 + 88) = *(void *)(v54 + 32);
    unint64_t v59 = *(void *)(v22 + 216);
    unint64_t v60 = (_anonymous_namespace_ *)re::DynamicArray<re::AABB>::setCapacity((void *)(v54 + 40), v59);
    ++*(_DWORD *)(v54 + 64);
    *(void *)(v54 + 16objc_initWeak(location, 0) = *(void *)(v54 + 72);
    uint64_t v61 = *(void *)(v156 + 136);
    if (v61) {
      unint64_t v62 = (void *)(v61 + 8);
    }
    else {
      unint64_t v62 = 0;
    }
    uint64_t v63 = (re *)objc_initWeak(&v168, v62);
    id v64 = re::globalAllocators(v63);
    uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v64[2] + 32))(v64[2], 112, 8);
    *(_OWORD *)(v65 + 64) = 0u;
    *(_OWORD *)(v65 + 8objc_initWeak(location, 0) = 0u;
    *(_OWORD *)uint64_t v65 = 0u;
    *(_OWORD *)(v65 + 16) = 0u;
    *(_OWORD *)(v65 + 32) = 0u;
    *(_OWORD *)(v65 + 48) = 0u;
    *(_OWORD *)(v65 + 96) = 0u;
    *(_DWORD *)(v65 + 72) = 1;
    *(void *)(v65 + 8objc_initWeak(location, 0) = 0;
    *(void *)(v65 + 88) = 0;
    *(void *)&long long v184 = 0;
    float32x4_t v182 = 0u;
    float32x4_t v183 = 0u;
    v183.i64[1] = re::globalAllocators((re *)v65)[2];
    *(void *)&long long v184 = 0;
    re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::PersistentDynamicBoundingBoxData,re::FrameManager>::reset((id *)(v22 + 144), &v168, (void *)v65, (uint64_t)&v182);
    re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v182);
    objc_destroyWeak(&v168);
    id v168 = 0;
    uint64_t v66 = *(void *)(v22 + 152);
    *(void *)int v174 = 0;
    *(void *)&v174[8] = 0;
    *(_DWORD *)&v174[16] = 1;
    *(void *)&v175[4] = 0;
    *(void *)&v175[12] = 0;
    if ((v172 & 0x3F) != 0) {
      unint64_t v67 = (v172 >> 6) + 1;
    }
    else {
      unint64_t v67 = v172 >> 6;
    }
    unint64_t v176 = v172;
    v182.i64[0] = 0;
    re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)v174, v67, &v182);
    unint64_t started = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, 1u);
    uint64_t v155 = v22;
    unint64_t FirstBitSet = (_anonymous_namespace_ *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v22 + 280, 0);
    if (FirstBitSet != (_anonymous_namespace_ *)-1)
    {
      unint64_t v29 = (unint64_t)FirstBitSet;
      unsigned int v69 = 0;
      while (1)
      {
        if (v29 >= started)
        {
          do
          {
            unsigned int v70 = v69 + 2;
            ++v69;
            uint64_t v71 = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, v70);
          }
          while (v29 >= v71);
          unint64_t started = v71;
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v174, v69);
        unint64_t v72 = *(float32x4_t **)(v54 + 176);
        if ((unint64_t)v72 <= v29) {
          break;
        }
        uint64_t v73 = v54 + 192;
        if ((*(unsigned char *)(v54 + 184) & 1) == 0) {
          uint64_t v73 = *(void *)(v54 + 200);
        }
        *(_DWORD *)(v73 + 4 * v29) = (2 * *(_DWORD *)(v54 + 56)) | 1;
        unint64_t v72 = *(float32x4_t **)(v22 + 216);
        if ((unint64_t)v72 <= v29) {
          goto LABEL_131;
        }
        re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)(v54 + 40), *(void *)(v22 + 232) + 32 * v29);
        unint64_t FirstBitSet = (_anonymous_namespace_ *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v22 + 280, v29 + 1);
        unint64_t v29 = (unint64_t)FirstBitSet;
        if (FirstBitSet == (_anonymous_namespace_ *)-1) {
          goto LABEL_62;
        }
      }
LABEL_130:
      v166.i64[0] = 0;
      long long v185 = 0u;
      long long v186 = 0u;
      float32x4_t v183 = 0u;
      long long v184 = 0u;
      float32x4_t v182 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v177 = 136315906;
      *(void *)&v177[4] = "operator[]";
      *(_WORD *)&v177[12] = 1024;
      *(_DWORD *)&v177[14] = 858;
      __int16 v178 = 2048;
      unint64_t v179 = v29;
      __int16 v180 = 2048;
      unint64_t v181 = (unint64_t)v72;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_131:
      v166.i64[0] = 0;
      long long v185 = 0u;
      long long v186 = 0u;
      float32x4_t v183 = 0u;
      long long v184 = 0u;
      float32x4_t v182 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v177 = 136315906;
      *(void *)&v177[4] = "operator[]";
      *(_WORD *)&v177[12] = 1024;
      *(_DWORD *)&v177[14] = 789;
      __int16 v178 = 2048;
      unint64_t v179 = v29;
      __int16 v180 = 2048;
      unint64_t v181 = (unint64_t)v72;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_132:
      v166.i64[0] = 0;
      long long v185 = 0u;
      long long v186 = 0u;
      float32x4_t v183 = 0u;
      long long v184 = 0u;
      float32x4_t v182 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v174 = 136315906;
      *(void *)&v174[4] = "operator[]";
      *(_WORD *)&v174[12] = 1024;
      *(_DWORD *)&v174[14] = 789;
      *(_WORD *)&v174[18] = 2048;
      *(void *)unint64_t v175 = v29;
      *(_WORD *)&v175[8] = 2048;
      *(void *)&v175[10] = started;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_133:
      v166.i64[0] = 0;
      long long v185 = 0u;
      long long v186 = 0u;
      float32x4_t v183 = 0u;
      long long v184 = 0u;
      float32x4_t v182 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v174 = 136315906;
      *(void *)&v174[4] = "operator[]";
      *(_WORD *)&v174[12] = 1024;
      *(_DWORD *)&v174[14] = 789;
      *(_WORD *)&v174[18] = 2048;
      *(void *)unint64_t v175 = v29;
      *(_WORD *)&v175[8] = 2048;
      *(void *)&v175[10] = started;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_134:
      uint64_t v173 = 0;
      long long v185 = 0u;
      long long v186 = 0u;
      float32x4_t v183 = 0u;
      long long v184 = 0u;
      float32x4_t v182 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v177 = 136315906;
      *(void *)&v177[4] = "operator[]";
      *(_WORD *)&v177[12] = 1024;
      *(_DWORD *)&v177[14] = 858;
      __int16 v178 = 2048;
      unint64_t v179 = v29;
      __int16 v180 = 2048;
      unint64_t v181 = started;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_62:
    unint64_t v74 = *(unint64_t **)&v175[12];
    unint64_t v10 = v145;
    if (v174[16]) {
      unint64_t v74 = (unint64_t *)&v175[4];
    }
    uint64_t v75 = *(void *)&v174[8];
    if ((*(void *)&v174[8] & 0x3FFFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v76 = 0;
      while (1)
      {
        unint64_t v78 = *v74++;
        unint64_t v77 = v78;
        if (v78) {
          break;
        }
        v76 -= 64;
        if (!--v75) {
          goto LABEL_80;
        }
      }
      unint64_t v80 = __clz(__rbit64(v77));
      if (v80 + 1 != v76)
      {
        unint64_t v29 = v80 - v76;
        do
        {
          LODWORD(v8re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, v29);
          unsigned int v82 = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, (int)v29 + 1);
          v83.i64[0] = 0x7F0000007FLL;
          v83.i64[1] = 0x7F0000007FLL;
          float32x4_t v166 = (float32x4_t)v150;
          float32x4_t v167 = v83;
          if (v81 < v82)
          {
            unint64_t v81 = v81;
            uint64_t v84 = v82;
            do
            {
              unsigned __int16 v85 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox((re::MeshBoundingBoxes *)(v54 + 152), v81);
              float32x4_t v86 = v166;
              float32x4_t v87 = v167;
              v86.i32[3] = 0;
              float32x4_t v88 = *v85;
              float32x4_t v89 = v85[1];
              v88.i32[3] = 0;
              v87.i32[3] = 0;
              v89.i32[3] = 0;
              float32x4_t v166 = vminnmq_f32(v86, v88);
              float32x4_t v167 = vmaxnmq_f32(v87, v89);
              ++v81;
            }
            while (v84 != v81);
          }
          unint64_t started = *(void *)(v54 + 104);
          if (started <= v29) {
            goto LABEL_134;
          }
          uint64_t v90 = v54 + 120;
          if ((*(unsigned char *)(v54 + 112) & 1) == 0) {
            uint64_t v90 = *(void *)(v54 + 128);
          }
          *(_DWORD *)(v90 + 4 * v29) = (2 * *(_DWORD *)(v54 + 16)) | 1;
          re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v54, (uint64_t)&v166);
          unint64_t FirstBitSet = (_anonymous_namespace_ *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v174, v29 + 1);
          unint64_t v29 = (unint64_t)FirstBitSet;
        }
        while (FirstBitSet != (_anonymous_namespace_ *)-1);
      }
    }
LABEL_80:
    int v91 = v148;
    if (fabsf(*(float *)v159.i32) > 0.00000011921)
    {
      uint64_t v92 = *(void *)(v54 + 16);
      if (v92)
      {
        uint64_t v93 = *(float32x4_t **)(v54 + 32);
        __int16 v94 = &v93[2 * v92];
        float32x4_t v95 = (float32x4_t)vdupq_lane_s32(v159, 0);
        do
        {
          float32x4_t v96 = vaddq_f32(v95, v93[1]);
          *uint64_t v93 = vsubq_f32(*v93, v95);
          v93[1] = v96;
          v93 += 2;
        }
        while (v93 != v94);
      }
      uint64_t v97 = *(void *)(v54 + 56);
      if (v97)
      {
        long long v98 = *(float32x4_t **)(v54 + 72);
        long long v99 = &v98[2 * v97];
        float32x4_t v100 = (float32x4_t)vdupq_lane_s32(v159, 0);
        do
        {
          float32x4_t v101 = vaddq_f32(v100, v98[1]);
          *long long v98 = vsubq_f32(*v98, v100);
          v98[1] = v101;
          v98 += 2;
        }
        while (v98 != v99);
      }
    }
    unint64_t v102 = *(void *)(v22 + 216);
    char v103 = (_anonymous_namespace_ *)re::DynamicArray<re::AABB>::setCapacity((void *)v66, v102);
    ++*(_DWORD *)(v66 + 24);
    *(void *)(v66 + 48) = *(void *)(v66 + 32);
    if (v157)
    {
      if (*(void *)(v157 + 64) == *(void *)(v22 + 216)) {
        uint64_t v104 = v157 + 40;
      }
      else {
        uint64_t v104 = 0;
      }
    }
    else
    {
      uint64_t v104 = 0;
    }
    if (!v153)
    {
      v105.i64[0] = 0x7F0000007FLL;
      v105.i64[1] = 0x7F0000007FLL;
      float32x4_t v106 = (float32x4_t)v150;
      goto LABEL_117;
    }
    uint64_t v158 = 0;
    v105.i64[0] = 0x7F0000007FLL;
    v105.i64[1] = 0x7F0000007FLL;
    float32x4_t v106 = (float32x4_t)v150;
    uint64_t v146 = &v148[v153];
    do
    {
      float32x4_t v152 = v106;
      float32x4_t v154 = v105;
      __n128 v107 = (float32x4_t *)re::DataArray<re::MeshInstance>::get(*(void *)(v156 + 32) + 72, *v91);
      uint64_t v108 = re::DataArray<re::MeshModel>::get(*(void *)(v156 + 32) + 8, v107[1].i64[0]);
      uint64_t v109 = *(void *)(v108 + 56);
      v110.i64[0] = 0x7F0000007FLL;
      v110.i64[1] = 0x7F0000007FLL;
      float32x4_t v166 = (float32x4_t)v150;
      float32x4_t v167 = v110;
      if (!v109) {
        goto LABEL_114;
      }
      uint64_t v151 = v108;
      int v147 = v107;
      uint64_t v149 = v91;
      unint64_t v111 = 0;
      unint64_t v72 = v107 + 2;
      uint64_t v112 = 4 * v158;
      float32x4_t v160 = (float32x4_t)v150;
      float32x4_t v161 = v110;
      unint64_t started = 448;
      do
      {
        unint64_t v113 = v158 + v111;
        long long v114 = (float32x4_t *)re::ecs2::DynamicBoundingBoxComponent::boundingBoxForMeshPartForFrame(v22, *(void *)(*(void *)(v156 + 136) + 32) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(v156 + 136) + 16) << 60), v158 + v111);
        if (v114)
        {
          unint64_t v115 = *(void *)(v66 + 64);
          if (v115 <= v113)
          {
            uint64_t v173 = 0;
            unint64_t v29 = (unint64_t)v174;
            long long v185 = 0u;
            long long v186 = 0u;
            float32x4_t v183 = 0u;
            long long v184 = 0u;
            float32x4_t v182 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v177 = 136315906;
            *(void *)&v177[4] = "operator[]";
            *(_WORD *)&v177[12] = 1024;
            *(_DWORD *)&v177[14] = 858;
            __int16 v178 = 2048;
            unint64_t v179 = v158 + v111;
            __int16 v180 = 2048;
            unint64_t v181 = v115;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_127:
            uint64_t v173 = 0;
            long long v185 = 0u;
            long long v186 = 0u;
            float32x4_t v183 = 0u;
            long long v184 = 0u;
            float32x4_t v182 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v177 = 136315906;
            *(void *)&v177[4] = "operator[]";
            *(_WORD *)&v177[12] = 1024;
            *(_DWORD *)&v177[14] = 476;
            __int16 v178 = 2048;
            unint64_t v179 = v111;
            __int16 v180 = 2048;
            unint64_t v181 = v29;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_128:
            uint64_t v173 = 0;
            long long v185 = 0u;
            long long v186 = 0u;
            float32x4_t v183 = 0u;
            long long v184 = 0u;
            float32x4_t v182 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v177 = 136315906;
            *(void *)&v177[4] = "operator[]";
            *(_WORD *)&v177[12] = 1024;
            *(_DWORD *)&v177[14] = 866;
            __int16 v178 = 2048;
            unint64_t v179 = v158 + v111;
            __int16 v180 = 2048;
            unint64_t v181 = v29;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_129:
            uint64_t v173 = 0;
            long long v185 = 0u;
            long long v186 = 0u;
            float32x4_t v183 = 0u;
            long long v184 = 0u;
            float32x4_t v182 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v177 = 136315906;
            *(void *)&v177[4] = "operator[]";
            *(_WORD *)&v177[12] = 1024;
            *(_DWORD *)&v177[14] = 858;
            __int16 v178 = 2048;
            unint64_t v179 = v158 + v111;
            __int16 v180 = 2048;
            unint64_t v181 = v29;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_130;
          }
          unint64_t v116 = v114;
          uint64_t v117 = v66 + 80;
          if ((*(unsigned char *)(v66 + 72) & 1) == 0) {
            uint64_t v117 = *(void *)(v66 + 88);
          }
          *(_DWORD *)(v117 + v112 + 4 * v11re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = (2 * *(_DWORD *)(v66 + 16)) | 1;
          re::AABB::transform(v114, v72, (uint64_t)&v182);
          re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v66, (uint64_t)&v182);
          float32x4_t v119 = v160;
          float32x4_t v118 = v161;
          v119.i32[3] = 0;
          float32x4_t v120 = *v116;
          float32x4_t v121 = v116[1];
          v120.i32[3] = 0;
          v118.i32[3] = 0;
          v121.i32[3] = 0;
          float32x4_t v160 = vminnmq_f32(v119, v120);
          float32x4_t v161 = vmaxnmq_f32(v118, v121);
          float32x4_t v166 = v160;
          float32x4_t v167 = v161;
          uint64_t v22 = v155;
        }
        else
        {
          if (!v104) {
            goto LABEL_106;
          }
          unint64_t v29 = *(void *)(v104 + 24);
          if (v29 <= v113) {
            goto LABEL_128;
          }
          uint64_t v122 = v104 + 40;
          if ((*(unsigned char *)(v104 + 32) & 1) == 0) {
            uint64_t v122 = *(void *)(v104 + 48);
          }
          if (*(_DWORD *)(v122 + v112 + 4 * v111))
          {
            uint64_t v128 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox((re::MeshBoundingBoxes *)v104, v113);
            unint64_t v29 = *(void *)(v66 + 64);
            if (v29 <= v113) {
              goto LABEL_129;
            }
            uint64_t v129 = v66 + 80;
            if ((*(unsigned char *)(v66 + 72) & 1) == 0) {
              uint64_t v129 = *(void *)(v66 + 88);
            }
            float32x4_t v130 = v152;
            v130.i32[3] = 0;
            float32x4_t v131 = *v128;
            float32x4_t v132 = v128[1];
            v131.i32[3] = 0;
            float32x4_t v133 = vminnmq_f32(v130, v131);
            float32x4_t v134 = v154;
            v134.i32[3] = 0;
            v132.i32[3] = 0;
            float32x4_t v152 = v133;
            float32x4_t v154 = vmaxnmq_f32(v134, v132);
            *(_DWORD *)(v129 + v112 + 4 * v11re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = (2 * *(_DWORD *)(v66 + 16)) | 1;
            re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v66, (uint64_t)v128);
          }
          else
          {
LABEL_106:
            unint64_t v29 = *(void *)(v151 + 56);
            if (v29 <= v111) {
              goto LABEL_127;
            }
            uint64_t v123 = (float32x4_t *)(*(void *)(v151 + 64) + started);
            float32x4_t v124 = v160;
            v124.i32[3] = 0;
            float32x4_t v125 = v123[-1];
            v125.i32[3] = 0;
            float32x4_t v160 = vminnmq_f32(v124, v125);
            float32x4_t v166 = v160;
            float32x4_t v126 = *v123;
            float32x4_t v127 = v161;
            v127.i32[3] = 0;
            v126.i32[3] = 0;
            float32x4_t v161 = vmaxnmq_f32(v127, v126);
            float32x4_t v167 = v161;
          }
        }
        ++v111;
        started += 560;
      }
      while (v109 != v111);
      v158 += v111;
      unint64_t v10 = v145;
      __n128 v107 = v147;
      int v91 = v149;
LABEL_114:
      re::AABB::transform(&v166, v107 + 2, (uint64_t)&v182);
      float32x4_t v136 = v152;
      float32x4_t v135 = v154;
      v136.i32[3] = 0;
      float32x4_t v137 = v182;
      float32x4_t v138 = v183;
      v137.i32[3] = 0;
      v135.i32[3] = 0;
      float32x4_t v106 = vminnmq_f32(v136, v137);
      v138.i32[3] = 0;
      float32x4_t v105 = vmaxnmq_f32(v135, v138);
      ++v91;
    }
    while (v91 != v146);
LABEL_117:
    *(float32x4_t *)(v22 + 336) = v106;
    *(float32x4_t *)(v22 + 352) = v105;
    if (*(void *)v174 && (v174[16] & 1) == 0) {
      (*(void (**)(void))(**(void **)v174 + 40))();
    }
    uint64_t v5 = v142;
    if ((v144 & 1) == 0)
    {
LABEL_121:
      unint64_t v139 = v164;
      unint64_t v140 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v165);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v139, v140, *(void *)(a3 + 32));
    }
LABEL_122:
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v165);
  }
  while (v165.i64[0] != v5 || v165.u16[4] != 0xFFFF || v165.u16[5] != 0xFFFF);
  return *(_DWORD *)(v5 + 40) != 0;
}

uint64_t re::ecs2::DynamicBoundingBoxSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v12);
  if (*(void *)(a1 + 112))
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6)
    {
      uint64_t v7 = *(uint64_t **)a2;
      uint64_t v8 = a1 + 200;
      uint64_t v9 = 8 * v6;
      do
      {
        uint64_t v10 = *v7++;
        re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::updateForScene(v8, v10, (uint64_t)v13, 0);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v12);
}

void re::ecs2::DynamicBoundingBoxSystem::willAddSceneToECSService(re::ecs2::DynamicBoundingBoxSystem *this, re::EventBus **a2)
{
  uint64_t v6 = (re::ecs2::Scene *)a2;
  uint64_t v3 = a2[36];
  if (v3)
  {
    *((void *)&v5 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v4;
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 440, (uint64_t *)&v6, &v5);
    a2 = (re::EventBus **)v6;
  }
  re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::addScene((uint64_t)this + 200, (uint64_t)a2);
}

uint64_t re::ecs2::anonymous namespace'::meshDeformationComponentWillDeactivateHandler(uint64_t a1)
{
  return 0;
}

uint64_t re::ecs2::DynamicBoundingBoxSystem::willRemoveSceneFromECSService(re::ecs2::DynamicBoundingBoxSystem *this, re::ecs2::Scene *a2)
{
  long long v5 = a2;
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 200, (uint64_t)a2);
  uint64_t v3 = (char *)this + 440;
  uint64_t result = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v3, (uint64_t *)&v5);
  if (result)
  {
    if (*((void *)v5 + 36)) {
      re::EventBus::unsubscribe(*((void *)v5 + 36), *(void *)result, *(void *)(result + 8));
    }
    return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v5);
  }
  return result;
}

void *re::ecs2::allocInfo_DynamicBoundingBoxComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_270, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_270))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8A9C0, "DynamicBoundingBoxComponent");
    __cxa_guard_release(&_MergedGlobals_270);
  }
  return &unk_26AF8A9C0;
}

void re::ecs2::initInfo_DynamicBoundingBoxComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xB01568A72EB9FBEALL;
  v9[1] = "DynamicBoundingBoxComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A9B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8A9B0);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8A9A8 = v7;
      __cxa_guard_release(&qword_26AF8A9B0);
    }
  }
  *((void *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8A9A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicBoundingBoxComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::DynamicBoundingBoxComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::DynamicBoundingBoxComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicBoundingBoxComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

uint64_t re::internal::defaultConstruct<re::ecs2::DynamicBoundingBoxComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::DynamicBoundingBoxComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::DynamicBoundingBoxComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DynamicBoundingBoxComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DynamicBoundingBoxComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicBoundingBoxComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicBoundingBoxComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicBoundingBoxComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicBoundingBoxComponent>, this);
}

void *re::ecs2::allocInfo_DynamicBoundingBoxSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8A9B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8A9B8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8AA38, "DynamicBoundingBoxSystem");
    __cxa_guard_release(&qword_26AF8A9B8);
  }
  return &unk_26AF8AA38;
}

void re::ecs2::initInfo_DynamicBoundingBoxSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xFA9333C51155E86ELL;
  v5[1] = "DynamicBoundingBoxSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1E800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_DynamicBoundingBoxSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicBoundingBoxSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::DynamicBoundingBoxSystem>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::DynamicBoundingBoxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::DynamicBoundingBoxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::DynamicBoundingBoxSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicBoundingBoxSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::DynamicBoundingBoxSystem *re::internal::defaultConstruct<re::ecs2::DynamicBoundingBoxSystem>(int a1, int a2, re::ecs2::DynamicBoundingBoxSystem *this)
{
  return re::ecs2::DynamicBoundingBoxSystem::DynamicBoundingBoxSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::DynamicBoundingBoxSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 55);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = (uint64_t)&unk_26E702E60;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 22);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::DynamicBoundingBoxSystem>(uint64_t *a1)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 55);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = (uint64_t)&unk_26E702E60;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 22);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DynamicBoundingBoxSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicBoundingBoxSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicBoundingBoxSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicBoundingBoxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicBoundingBoxSystem>, this);
}

uint64_t re::ecs2::DynamicBoundingBoxComponentStateImpl::dependsOnComponents(re::ecs2::DynamicBoundingBoxComponentStateImpl *this)
{
  return *((void *)this + 4);
}

void re::ecs2::DynamicBoundingBoxSystem::~DynamicBoundingBoxSystem(re::ecs2::DynamicBoundingBoxSystem *this)
{
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = &unk_26E702E60;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 55);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25);
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = &unk_26E702E60;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::DynamicBoundingBoxSystem::typeInfo(re::ecs2::DynamicBoundingBoxSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicBoundingBoxSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicBoundingBoxSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicBoundingBoxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicBoundingBoxSystem>, 0);
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*a2, a3);
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E702F48;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E702F48;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 16;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::DynamicBoundingBoxComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 24objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 16objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 8objc_initWeak(location, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v2 = (id *)(a1 + 144);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v3 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E6E9DA8;
  inited = (re *)objc_initWeak(v3, 0);
  *(void *)(a1 + 4objc_initWeak(location, 0) = 0;
  *(void *)(a1 + 72) = re::globalAllocators(inited)[2];
  *(void *)(a1 + 8objc_initWeak(location, 0) = 0;
  long long v6 = (re *)objc_initWeak((id *)(a1 + 88), 0);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 128) = re::globalAllocators(v6)[2];
  *(void *)(a1 + 136) = 0;
  uint64_t v7 = (re *)objc_initWeak(v2, 0);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 184) = re::globalAllocators(v7)[2];
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 28objc_initWeak(location, 0) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 296) = 1;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)&long long v8 = 0x7F0000007FLL;
  *((void *)&v8 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 336) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 352) = v8;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::DynamicBoundingBoxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DynamicBoundingBoxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_PhysicsSimulationComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8AAB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8AAB8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8AAF8, "PhysicsSimulationComponent");
    __cxa_guard_release(&qword_26AF8AAB8);
  }
  return &unk_26AF8AAF8;
}

void re::ecs2::initInfo_PhysicsSimulationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v31[0] = 0x3A8A6133E7C4421ELL;
  v31[1] = "PhysicsSimulationComponent";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_271, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_271);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8AAC0 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "reportKinematicStaticCollisions";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8AAC8 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "reportKinematicKinematicCollisions";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1A00000002;
      *(_DWORD *)(v15 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8AAD0 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v17 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "gravity";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2000000003;
      *(_DWORD *)(v18 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8AAD8 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      uint64_t v21 = re::IntrospectionInfo<re::Optional<float>>::get(1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "fixedTimeStep";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x4000000004;
      *(_DWORD *)(v22 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF8AAE0 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      unint64_t v25 = re::introspect_uint64_t((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "m_parentTimebaseID";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x5800000005;
      *(_DWORD *)(v26 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF8AAE8 = v26;
      char v27 = re::introspectionAllocator((re *)v26);
      uint64_t v28 = re::introspect_PhysicsSolverIterations((re::IntrospectionBase **)1);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "solverIterations";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x4800000006;
      *(_DWORD *)(v29 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF8AAF0 = v29;
      __cxa_guard_release(&_MergedGlobals_271);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF8AAC0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsSimulationComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::PhysicsSimulationComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::PhysicsSimulationComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsSimulationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v30 = v32;
}

uint64_t re::internal::defaultConstruct<re::ecs2::PhysicsSimulationComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PhysicsSimulationComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsSimulationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsSimulationComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsSimulationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsSimulationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSimulationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSimulationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSimulationComponent>, this);
}

void re::ecs2::PhysicsSimulationComponent::~PhysicsSimulationComponent(re::ecs2::PhysicsSimulationComponent *this)
{
  *(void *)this = &unk_26E702FA0;
  uint64_t v2 = (const void *)*((void *)this + 12);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 12) = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 13);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  }
  objc_destroyWeak((id *)this + 10);
  *((void *)this + 1objc_initWeak(location, 0) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::PhysicsSimulationComponent::~PhysicsSimulationComponent(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::PhysicsSimulationComponent::removeFromSimulation(re::ecs2::PhysicsSimulationComponent *this)
{
  uint64_t v2 = (id *)((char *)this + 80);
  id WeakRetained = objc_loadWeakRetained((id *)this + 10);
  if (WeakRetained)
  {
    uint64_t v4 = WeakRetained;
    (*(void (**)(void, void))(*(void *)WeakRetained[6] + 144))(WeakRetained[6], 0);
    if (*((void *)this + 13) && *((void *)this + 11))
    {
      uint64_t v5 = (*(uint64_t (**)(void))(*(v4 - 1) + 56))();
      uint64_t v6 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v5);
      if (v6)
      {
        uint64_t v7 = *((void *)this + 2);
        if (v7)
        {
          uint64_t v8 = v6;
          do
          {
            uint64_t v9 = v7;
            uint64_t v7 = *(void *)(v7 + 24);
          }
          while (v7);
          uint64_t v10 = *(void *)(v9 + 16);
          if (v10)
          {
            v13[0] = 0;
            SceneDataEntity = makeSceneDataEntity(v10, (uint64_t)v13, 0, re::ecs2::Scene::kSharedSceneDataEntityID, 1);
            if (SceneDataEntity)
            {
              uint64_t v12 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v12) {
                (*(void (**)(uint64_t, void, uint64_t))(*(void *)v8 + 72))(v8, *((void *)this + 13), v12 + 32);
              }
            }
          }
        }
      }
      *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
      CFRelease(*((CFTypeRef *)this + 13));
      *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    }
    objc_destroyWeak(v2);
    id *v2 = 0;
  }
}

void re::ecs2::PhysicsSimulationComponent::setLocallyManagedParentTimebase(re::ecs2::PhysicsSimulationComponent *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 12);
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      *((void *)this + 12) = 0;
    }
    if (cf)
    {
      CFRetain(cf);
      *((void *)this + 12) = cf;
    }
    id WeakRetained = (char *)objc_loadWeakRetained((id *)this + 10);
    if (WeakRetained)
    {
      uint64_t v6 = WeakRetained;
      re::PhysicsSimulation::setParentClockOrTimebase((re::PhysicsSimulation *)(WeakRetained - 8), *((void **)this + 12));
    }
  }
}

BOOL re::ecs2::PhysicsSimulationComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v53, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (uint64_t v10 = v9,
        uint64_t v11 = *(void *)(a3 + 8),
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9),
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11),
        v52[0] = v12,
        (v52[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v49, a5, 0);
    unint64_t v15 = v49;
    unint64_t v14 = v50;
    unint64_t v49 = a4;
    unint64_t v50 = v15;
    unint64_t v51 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      while (1)
      {
        uint64_t v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v50);
        uint64_t v17 = *(void *)v16;
        uint64_t v18 = *(void *)(*(void *)v16 + 16);
        uint64_t v19 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v52, v18);
        if ((*(unsigned char *)(v18 + 288) & 1) == 0 || (uint64_t v20 = (uint64_t)v19) == 0)
        {
          unint64_t v35 = v49;
          unint64_t v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v50);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v35, v36, *(void *)(a3 + 32));
          re::ecs2::PhysicsSimulationComponent::removeFromSimulation((re::ecs2::PhysicsSimulationComponent *)v17);
          goto LABEL_43;
        }
        uint64_t v21 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v19);
        id WeakRetained = (char *)objc_loadWeakRetained((id *)(v17 + 80));
        if (WeakRetained) {
          uint64_t v23 = WeakRetained - 8;
        }
        else {
          uint64_t v23 = 0;
        }
        if (WeakRetained) {

        }
        if (v23 != (char *)v21) {
          re::ecs2::PhysicsSimulationComponent::removeFromSimulation((re::ecs2::PhysicsSimulationComponent *)v17);
        }
        uint64_t v24 = *(unsigned char *)(v17 + 26) ? *(unsigned __int8 *)(v17 + 25) | 2u : *(unsigned __int8 *)(v17 + 25);
        (*(void (**)(void, uint64_t))(**(void **)(v21 + 56) + 144))(*(void *)(v21 + 56), v24);
        re::ecs2::PhysicsSimulationData::setGravityOverride(v20, (unsigned __int8 *)(v17 + 32));
        re::ecs2::PhysicsSimulationData::setFixedTimeStepOverride(v20, (unsigned __int8 *)(v17 + 64));
        re::RigidBodyCollection::setSolverIterations(v21 + 80, v17 + 72);
        uint64_t v25 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v8);
        if (v25) {
          break;
        }
LABEL_42:
        objc_storeWeak((id *)(v17 + 80), (id)(v21 + 8));
        unint64_t v44 = v49;
        unint64_t v45 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v50);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v44, v45, *(void *)(a3 + 48));
LABEL_43:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v50);
        if (v50 == a5 && (unsigned __int16)v51 == 0xFFFF && WORD1(v51) == 0xFFFF) {
          goto LABEL_46;
        }
      }
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)(v17 + 16);
      if (v27)
      {
        uint64_t v28 = *(void *)(v17 + 16);
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = *(void *)(v28 + 24);
        }
        while (v28);
        uint64_t v30 = *(void *)(v29 + 16);
        if (v30)
        {
          v54[0] = 0;
          SceneDataEntity = makeSceneDataEntity(v30, (uint64_t)v54, 1, re::ecs2::Scene::kSharedSceneDataEntityID, 1);
          uint64_t v32 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          uint64_t v33 = *(void *)(v17 + 96);
          uint64_t v34 = *(void *)(v17 + 104);
          if (v33 != v34)
          {
            uint64_t v48 = (re::ecs2::Component *)v32;
            if (v34)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 72))(v26, v34, v32 + 32);
              CFRelease(*(CFTypeRef *)(v17 + 104));
              *(void *)(v17 + 104) = 0;
              if (!*(void *)(v17 + 96))
              {
LABEL_31:
                unsigned __int8 v39 = (re::ecs2::NetworkComponent *)*((void *)SceneDataEntity + 25);
                if (!v39) {
                  unsigned __int8 v39 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                }
                re::ecs2::NetworkComponent::markDirty(v39, v48);
                goto LABEL_34;
              }
LABEL_29:
              *(void *)(v17 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 64))(v26);
              unsigned __int8 v37 = *(const void **)(v17 + 96);
              *(void *)(v17 + 104) = v37;
              CFRetain(v37);
              unsigned __int8 v38 = *(re::ecs2::NetworkComponent **)(v27 + 200);
              if (v38) {
                re::ecs2::NetworkComponent::markDirty(v38, (const re::ecs2::Component *)v17);
              }
              goto LABEL_31;
            }
            if (v33) {
              goto LABEL_29;
            }
          }
        }
      }
LABEL_34:
      long long v40 = *(void **)(v17 + 96);
      if (v40)
      {
        if (*(void **)(v21 + 872) != v40) {
          re::PhysicsSimulation::setParentClockOrTimebase((re::PhysicsSimulation *)v21, v40);
        }
      }
      else if (*(void *)(v17 + 88))
      {
        uint64_t v41 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 96))(v26);
        if (v41)
        {
          unint64_t v42 = v41;
          re::PhysicsSimulation::setParentClockOrTimebase((re::PhysicsSimulation *)v21, v41);
          CFRelease(v42);
        }
      }
      else
      {
        int32x2_t v43 = *(const void **)(v21 + 872);
        if (v43)
        {
          CFRelease(v43);
          *(void *)(v21 + 872) = 0;
        }
      }
      goto LABEL_42;
    }
LABEL_46:
    BOOL v46 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v46 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v53);
  return v46;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsSimulationComponent>::dependsOnComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsSimulationComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsSimulationComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsSimulationComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::PhysicsSimulationComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 8objc_initWeak(location, 0) = 0u;
  uint64_t v2 = (id *)(a1 + 80);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E702FA0;
  *(_WORD *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *(unsigned char *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0x100000006;
  objc_initWeak(v2, 0);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void re::ecs2::Pin::~Pin(re::ecs2::Pin *this)
{
  *(void *)this = &unk_26E703090;
  if (*((unsigned char *)this + 176)) {
    re::StringID::destroyString((re::ecs2::Pin *)((char *)this + 184));
  }
  re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)this + 96);
  re::StringID::destroyString((re::ecs2::Pin *)((char *)this + 8));
}

{
  uint64_t vars8;

  re::ecs2::Pin::~Pin(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::Pin::Pin(uint64_t a1, const StringID *a2, _OWORD *a3, _OWORD *a4, unsigned __int8 *a5, _OWORD *a6, uint64_t *a7)
{
  *(void *)a1 = &unk_26E703090;
  re::StringID::StringID((re::StringID *)(a1 + 8), a2);
  long long v13 = a3[1];
  *(_OWORD *)(a1 + 32) = *a3;
  *(_OWORD *)(a1 + 48) = v13;
  long long v14 = a6[1];
  *(_OWORD *)(a1 + 64) = *a6;
  *(_OWORD *)(a1 + 8objc_initWeak(location, 0) = v14;
  re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(a1 + 96, a7);
  long long v15 = a4[1];
  *(_OWORD *)(a1 + 144) = *a4;
  *(_OWORD *)(a1 + 16objc_initWeak(location, 0) = v15;
  int v16 = *a5;
  *(unsigned char *)(a1 + 176) = v16;
  if (v16) {
    re::StringID::StringID((re::StringID *)(a1 + 184), (const StringID *)(a5 + 8));
  }
  return a1;
}

void *re::ecs2::allocInfo_Pin(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8AB80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8AB80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8AC48, "Pin");
    __cxa_guard_release(&qword_26AF8AB80);
  }
  return &unk_26AF8AC48;
}

void re::ecs2::initInfo_Pin(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v47 = 160490;
  uint64_t v48 = "Pin";
  re::StringID::destroyString((re::StringID *)&v47);
  *((_OWORD *)this + 2) = v42;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8AB78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8AB78);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF8AB98 = v8;
      unint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v10 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_pose";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000002;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8ABA0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_AABB((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "m_box";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x4000000003;
      *(_DWORD *)(v14 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8ABA8 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8AB88, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8AB88))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8ABC8);
        qword_26AF8ABC8 = (uint64_t)&unk_26E7030C0;
        __cxa_guard_release(&qword_26AF8AB88);
      }
      if ((_MergedGlobals_272 & 1) == 0)
      {
        uint64_t v16 = re::ecs2::introspect_PinAlignment((re::IntrospectionBase **)1);
        if ((_MergedGlobals_272 & 1) == 0)
        {
          uint64_t v17 = v16;
          _MergedGlobals_272 = 1;
          int v18 = *(_DWORD *)(v16 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8ABC8, 0);
          qword_26AF8ABD8 = 0x2800000003;
          dword_26AF8ABE0 = v18;
          word_26AF8ABE4 = 0;
          *(void *)&xmmword_26AF8ABE8 = 0;
          *((void *)&xmmword_26AF8ABE8 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
          qword_26AF8ABF8 = v17;
          unk_26AF8AC00 = 0;
          qword_26AF8ABC8 = (uint64_t)&unk_26E7030C0;
          re::IntrospectionRegistry::add(v19, v20);
          re::getPrettyTypeName((re *)&qword_26AF8ABC8, (const re::IntrospectionBase *)&v47);
          if (v48) {
            unint64_t v21 = v49;
          }
          else {
            unint64_t v21 = (char *)&v48 + 1;
          }
          if (v47 && (v48 & 1) != 0) {
            (*(void (**)(void))(*(void *)v47 + 40))();
          }
          long long v44 = *(_OWORD *)(v17 + 32);
          uint64_t v22 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v45);
          if (v22)
          {
            uint64_t v23 = *v22;
            *((void *)&v43 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v23;
          }
          else
          {
            long long v46 = v44;
            re::TypeBuilder::beginListType((uint64_t)&v47, v45, 1, 0x28uLL, 8uLL, &v46);
            re::TypeBuilder::setConstructor((uint64_t)&v47, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v47, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v47, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v47, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v47, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v47, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v47, v24);
          }
          xmmword_26AF8ABE8 = v43;
          re::StringID::destroyString((re::StringID *)v45);
        }
      }
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "m_alignments";
      *(void *)(v25 + 16) = &qword_26AF8ABC8;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x6000000004;
      *(_DWORD *)(v25 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF8ABB0 = v25;
      uint64_t v26 = re::introspectionAllocator((re *)v25);
      uint64_t v27 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "m_userOffset";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x9000000005;
      *(_DWORD *)(v28 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF8ABB8 = v28;
      uint64_t v30 = re::introspectionAllocator((re *)v28);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8AB90, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8AB90))
      {
        re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)qword_26AF8AC08);
        qword_26AF8AC08[0] = (uint64_t)&unk_26E703158;
        __cxa_guard_release(&qword_26AF8AB90);
      }
      if ((byte_26AF8AB71 & 1) == 0)
      {
        uint64_t v31 = re::IntrospectionInfo<re::StringID>::get(1, v29);
        if ((byte_26AF8AB71 & 1) == 0)
        {
          uint64_t v32 = v31;
          byte_26AF8AB71 = 1;
          int v33 = v31[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF8AC08, 0);
          unk_26AF8AC18 = 0x180000000DLL;
          unk_26AF8AC20 = v33;
          unk_26AF8AC24 = 0;
          *(void *)&xmmword_26AF8AC28 = 0;
          *((void *)&xmmword_26AF8AC28 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
          unk_26AF8AC38 = v32;
          unk_26AF8AC40 = 0;
          qword_26AF8AC08[0] = (uint64_t)&unk_26E703158;
          re::IntrospectionRegistry::add(v34, v35);
          re::getPrettyTypeName((re *)qword_26AF8AC08, (const re::IntrospectionBase *)&v47);
          if (v48) {
            unint64_t v36 = v49;
          }
          else {
            unint64_t v36 = (char *)&v48 + 1;
          }
          if (v47 && (v48 & 1) != 0) {
            (*(void (**)(void))(*(void *)v47 + 40))();
          }
          long long v44 = *((_OWORD *)v32 + 2);
          unsigned __int8 v37 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v45);
          if (v37)
          {
            uint64_t v38 = *v37;
            *((void *)&v43 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v38;
          }
          else
          {
            long long v46 = v44;
            re::TypeBuilder::beginOptionalType((uint64_t)&v47, v45, 0x18uLL, 8uLL, &v46);
            re::TypeBuilder::setOptionalAccessors((uint64_t)&v47, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v47, v39);
          }
          xmmword_26AF8AC28 = v43;
          re::StringID::destroyString((re::StringID *)v45);
        }
      }
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "m_skeletalJointName";
      *(void *)(v40 + 16) = qword_26AF8AC08;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0xB000000006;
      *(_DWORD *)(v40 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF8ABC0 = v40;
      __cxa_guard_release(&qword_26AF8AB78);
    }
  }
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF8AB98;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::Pin>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::Pin>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::Pin>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::Pin>;
  re::IntrospectionRegistry::add(this, v3);
  long long v41 = v42;
}

double re::internal::defaultConstruct<re::ecs2::Pin>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E703090;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = "";
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0x3F80000000000000;
  *(void *)&long long v4 = 0x7F0000007FLL;
  *((void *)&v4 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a3 + 64) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a3 + 8objc_initWeak(location, 0) = v4;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0;
  *(void *)(a3 + 96) = 0;
  *(_DWORD *)(a3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(_OWORD *)(a3 + 144) = 0u;
  *(void *)(a3 + 16objc_initWeak(location, 0) = 0;
  *(void *)(a3 + 168) = 0x3F80000000000000;
  *(unsigned char *)(a3 + 176) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::Pin>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::Pin>(uint64_t a1)
{
  *(void *)a1 = &unk_26E703090;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "";
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0x3F80000000000000;
  *(void *)&long long v2 = 0x7F0000007FLL;
  *((void *)&v2 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 64) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 8objc_initWeak(location, 0) = v2;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 16objc_initWeak(location, 0) = 0;
  *(void *)(a1 + 168) = 0x3F80000000000000;
  *(unsigned char *)(a1 + 176) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::Pin>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_Pin(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Pin", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Pin, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Pin, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Pin>, this);
}

void *re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::PinAlignment>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::PinAlignment>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    double result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::ecs2::PinAlignment>::resize((void *)a4, a5);
    }
  }
  else
  {
    double result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      double result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::PinAlignment>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = *((void *)this + 4) + (v8 << 7);
  *(unsigned char *)uint64_t v9 = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 4objc_initWeak(location, 0) = 0x3F80000000000000;
  *(_OWORD *)(v9 + 48) = 0u;
  *(void *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0x3F80000000000000;
  *(unsigned char *)(v9 + 8objc_initWeak(location, 0) = 1;
  *(void *)(v9 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(_DWORD *)(v9 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0;
  *(void *)(v9 + 96) = 0;
  *(void *)(v9 + 104) = 0;
  *(void *)(v9 + 88) = 0;
  *(_DWORD *)(v9 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 1;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  uint64_t v11 = (re::IntrospectionBase *)(*((void *)this + 4) + (v10 << 7));
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 7);
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 7);
}

void *re::DynamicArray<re::ecs2::PinAlignment>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = (a2 << 7) | 0x58;
    unint64_t v9 = a2;
    do
    {
      double result = (void *)re::DynamicArray<unsigned long>::deinit(v3[4] + v8);
      ++v9;
      v8 += 128;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      double result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = (v4 << 7) | 0x78;
      do
      {
        unint64_t v7 = (void *)(v3[4] + v6);
        *((unsigned char *)v7 - 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
        *(_OWORD *)(v7 - 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0uLL;
        *(v7 - 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
        *(v7 - 1objc_initWeak(location, 0) = 0x3F80000000000000;
        *(_OWORD *)(v7 - 9) = 0uLL;
        *(v7 - re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = 0;
        *(v7 - 6) = 0x3F80000000000000;
        *((unsigned char *)v7 - 4objc_initWeak(location, 0) = 1;
        void *v7 = 0;
        *(v7 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
        *(v7 - 2) = 0;
        *(v7 - 4) = 0;
        v6 += 128;
        *((_DWORD *)v7 - 2) = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<re::ecs2::PinAlignment>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::PinAlignment>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::PinAlignment>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::PinAlignment>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = v9 << 7;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 128;
        v11 -= 128;
      }
      while (v11);
    }
  }
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = v2 << 7;
    uint64_t v4 = *(void *)(result + 32) + 88;
    do
    {
      double result = re::DynamicArray<unsigned long>::deinit(v4);
      v4 += 128;
      v3 -= 128;
    }
    while (v3);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + (a2 << 7);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + ((uint64_t)v3 << 7);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionOptional<re::StringID>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::StringID>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::StringID>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::StringID>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::StringID>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    v5[0] = 1;
    v6[0] = 0;
    v6[1] = "";
    v4[0] = 0;
    v4[1] = "";
    re::Optional<re::StringID>::operator=(a2, v5);
    if (v5[0]) {
      re::StringID::destroyString((re::StringID *)v6);
    }
    int v3 = (re::StringID *)v4;
  }
  else
  {
    v5[0] = 0;
    re::Optional<re::StringID>::operator=(a2, v5);
    if (!v5[0]) {
      return;
    }
    int v3 = (re::StringID *)v6;
  }
  re::StringID::destroyString(v3);
}

uint64_t re::IntrospectionOptional<re::StringID>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

uint64_t re::Optional<re::StringID>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      re::StringID::destroyString((re::StringID *)(a1 + 8));
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (v6)
      {
        uint64_t v7 = *((void *)a2 + 1);
        uint64_t v8 = *((void *)a2 + 2);
        *((void *)a2 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
        *((void *)a2 + 2) = "";
        uint64_t v9 = *(void *)(a1 + 8);
        uint64_t v10 = *(void *)(a1 + 16);
        *(void *)(a1 + 8) = v7;
        *(void *)(a1 + 16) = v8;
        v13[0] = v7 & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
        v13[1] = v10;
        re::StringID::destroyString((re::StringID *)v13);
      }
      else
      {
        *(unsigned char *)a1 = 1;
        uint64_t v11 = *((void *)a2 + 1);
        *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
        *(void *)(a1 + 8) = *((void *)a2 + 1) & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *((void *)a2 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
        *((void *)a2 + 2) = "";
      }
    }
  }
  return a1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

void re::TypeBuilderHelper::registerOptional<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, const StringID *a2)
{
  if (a2)
  {
    v3[0] = 1;
    re::StringID::StringID((re::StringID *)v4, a2);
    re::Optional<re::StringID>::operator=(a1, v3);
    if (!v3[0]) {
      return;
    }
  }
  else
  {
    v3[0] = 0;
    re::Optional<re::StringID>::operator=(a1, v3);
    if (!v3[0]) {
      return;
    }
  }
  re::StringID::destroyString((re::StringID *)v4);
}

void re::ecs2::VideoComponent::applyVideoAttachmentToParameterBlock(uint64_t a1, char **this, re::TextureHandle *a3, re::MaterialParameterBlock *a4, int a5, int a6)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  isTextureAttachment = (re *)re::ecs2::VideoMaterialAttachment::isTextureAttachment((re::ecs2::VideoMaterialAttachment *)this, (const re::StringID *)this);
  unint64_t v13 = (unint64_t)*this >> 1;
  if (!isTextureAttachment)
  {
    if (v13 == 0x32970A2E88169C84)
    {
      uint64_t v17 = this[1];
      if (v17 == "REVideoAttachmentConstantImageFunction"
        || (isTextureAttachment = (re *)strcmp(v17, "REVideoAttachmentConstantImageFunction"),
            !isTextureAttachment))
      {
        if (a6 == -1) {
          return;
        }
        int v64 = a6;
        *(void *)CMTime buf = 0x3D3952D14E0320A8;
        long long v15 = &v42;
LABEL_38:
        re::MaterialParameterBlock::setConstant(a4, (uint64_t *)buf, 4uLL, &v64, 1, (uint64_t)v15);
        return;
      }
    }
    else if (v13 == 0x41C03F11B6A8BA59)
    {
      uint64_t v14 = this[1];
      if (v14 == "REVideoAttachmentConstantYCbCrMatrix"
        || (isTextureAttachment = (re *)strcmp(v14, "REVideoAttachmentConstantYCbCrMatrix"), !isTextureAttachment))
      {
        if (a5 == -1) {
          return;
        }
        int v64 = a5;
        *(void *)CMTime buf = 0x3C8C0FE134EC625DLL;
        long long v15 = &v43;
        goto LABEL_38;
      }
    }
    if ((atomic_exchange((atomic_uchar *volatile)&re::ecs2::VideoComponent::applyVideoAttachmentToParameterBlock(re::ecs2::Entity *,re::ecs2::VideoMaterialAttachment const&,re::VideoTextureHandles &,re::MaterialParameterBlock &,unsigned int,unsigned int)::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      int v18 = *re::graphicsLogObjects(isTextureAttachment);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_22;
      }
    }
    return;
  }
  if ((unint64_t)*this >> 1 > 0x52B9782D83821E50)
  {
    if ((unint64_t)*this >> 1 <= 0x7FDCEB30A1A454B0)
    {
      switch(v13)
      {
        case 0x52B9782D83821E51uLL:
          uint64_t v38 = *((void *)a3 + 20);
          uint64_t v39 = *((void *)a3 + 21);
          a3 = (re::TextureHandle *)((char *)a3 + 160);
          if (!v39 || !v38) {
            return;
          }
          unint64_t v52 = (unint64_t)this[2] >> 1;
          uint64_t v24 = &v53;
          uint64_t v25 = (uint64_t *)&v52;
          break;
        case 0x52B9782D83821E52uLL:
          uint64_t v40 = *((void *)a3 + 22);
          uint64_t v41 = *((void *)a3 + 23);
          a3 = (re::TextureHandle *)((char *)a3 + 176);
          if (!v41 || !v40) {
            return;
          }
          unint64_t v50 = (unint64_t)this[2] >> 1;
          uint64_t v24 = &v51;
          uint64_t v25 = (uint64_t *)&v50;
          break;
        case 0x624E48A54CCAF812uLL:
          uint64_t v26 = *((void *)a3 + 10);
          uint64_t v27 = *((void *)a3 + 11);
          a3 = (re::TextureHandle *)((char *)a3 + 80);
          if (!v27 || !v26) {
            return;
          }
          unint64_t v62 = (unint64_t)this[2] >> 1;
          uint64_t v24 = &v63;
          uint64_t v25 = (uint64_t *)&v62;
          break;
        default:
          goto LABEL_69;
      }
      goto LABEL_67;
    }
    if ((unint64_t)*this >> 1 > 0x7FDCEB30A1A454B2)
    {
      if (v13 == 0x7FDCEB30A1A454B3)
      {
LABEL_52:
        uint64_t v32 = *((void *)a3 + 4);
        uint64_t v33 = *((void *)a3 + 5);
        a3 = (re::TextureHandle *)((char *)a3 + 32);
        if (!v33 || !v32) {
          return;
        }
        unint64_t v56 = (unint64_t)this[2] >> 1;
        uint64_t v24 = &v57;
        uint64_t v25 = (uint64_t *)&v56;
        goto LABEL_67;
      }
      if (v13 != 0x7FFEDE4BE45ACD2FLL) {
        goto LABEL_69;
      }
      goto LABEL_46;
    }
    if (v13 == 0x7FDCEB30A1A454B1)
    {
LABEL_49:
      if (!*((void *)a3 + 1) || !*(void *)a3) {
        return;
      }
      unint64_t v60 = (unint64_t)this[2] >> 1;
      uint64_t v24 = &v61;
      uint64_t v25 = (uint64_t *)&v60;
      goto LABEL_67;
    }
    uint64_t v16 = 0x7FDCEB30A1A454B2;
LABEL_26:
    if (v13 != v16) {
      goto LABEL_69;
    }
    uint64_t v22 = *((void *)a3 + 2);
    uint64_t v23 = *((void *)a3 + 3);
    a3 = (re::TextureHandle *)((char *)a3 + 16);
    if (!v23 || !v22) {
      return;
    }
    unint64_t v58 = (unint64_t)this[2] >> 1;
    uint64_t v24 = &v59;
    uint64_t v25 = (uint64_t *)&v58;
    goto LABEL_67;
  }
  if ((unint64_t)*this >> 1 <= 0x489DE5C589B580C7)
  {
    if (v13 == 0x3B652FEC02A9004)
    {
      uint64_t v34 = *((void *)a3 + 8);
      uint64_t v35 = *((void *)a3 + 9);
      a3 = (re::TextureHandle *)((char *)a3 + 64);
      if (!v35 || !v34) {
        return;
      }
      unint64_t v44 = (unint64_t)this[2] >> 1;
      uint64_t v24 = &v45;
      uint64_t v25 = (uint64_t *)&v44;
      goto LABEL_67;
    }
    if (v13 == 0xAED356CD2DDD3B0)
    {
      uint64_t v36 = *((void *)a3 + 24);
      uint64_t v37 = *((void *)a3 + 25);
      a3 = (re::TextureHandle *)((char *)a3 + 192);
      if (!v37 || !v36) {
        return;
      }
      unint64_t v46 = (unint64_t)this[2] >> 1;
      uint64_t v24 = &v47;
      uint64_t v25 = (uint64_t *)&v46;
      goto LABEL_67;
    }
    uint64_t v16 = 0x18BB8A89E24827A1;
    goto LABEL_26;
  }
  if ((unint64_t)*this >> 1 > 0x4B1ED2EBAD5AE9A0)
  {
    if (v13 != 0x4B1ED2EBAD5AE9A1)
    {
      if (v13 != 0x52B9782D83821E50) {
        goto LABEL_69;
      }
      uint64_t v28 = *((void *)a3 + 18);
      uint64_t v29 = *((void *)a3 + 19);
      a3 = (re::TextureHandle *)((char *)a3 + 144);
      if (!v29 || !v28) {
        return;
      }
      unint64_t v54 = (unint64_t)this[2] >> 1;
      uint64_t v24 = &v55;
      uint64_t v25 = (uint64_t *)&v54;
LABEL_67:
      re::MaterialParameterBlock::setTextureHandle(a4, v25, a3, (uint64_t)v24);
      return;
    }
LABEL_46:
    uint64_t v30 = *((void *)a3 + 6);
    uint64_t v31 = *((void *)a3 + 7);
    a3 = (re::TextureHandle *)((char *)a3 + 48);
    if (!v31 || !v30) {
      return;
    }
    unint64_t v48 = (unint64_t)this[2] >> 1;
    uint64_t v24 = &v49;
    uint64_t v25 = (uint64_t *)&v48;
    goto LABEL_67;
  }
  if (v13 == 0x489DE5C589B580C8) {
    goto LABEL_49;
  }
  if (v13 == 0x4B1ED2EBAC5B8AD3) {
    goto LABEL_52;
  }
LABEL_69:
  int v18 = *re::graphicsLogObjects(isTextureAttachment);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
LABEL_22:
    unint64_t v19 = v18;
    uint64_t v20 = *(void *)(a1 + 280);
    unint64_t v21 = this[1];
    *(_DWORD *)CMTime buf = 136315394;
    *(void *)&uint8_t buf[4] = v20;
    __int16 v66 = 2080;
    unint64_t v67 = v21;
    _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "(%s) Unknown video component attachment \"%s\" encountered; skipping...",
      buf,
      0x16u);
  }
}

double re::ecs2::VideoComponent::applyVideoTextureArrayAttachmentToParameterBlock(uint64_t a1, void *a2, re::TextureHandle *a3, re::MaterialParameterBlock *a4)
{
  unint64_t v4 = *a2 >> 1;
  if (v4 > 0x52B9782D83821E51)
  {
    if (*a2 >> 1 <= 0x7FDCEB30A1A454B0uLL)
    {
      if (v4 == 0x52B9782D83821E52)
      {
        uint64_t v19 = *((void *)a3 + 22);
        uint64_t v20 = *((void *)a3 + 23);
        a3 = (re::TextureHandle *)((char *)a3 + 176);
        if (v20) {
          BOOL v21 = v19 == 0;
        }
        else {
          BOOL v21 = 1;
        }
        if (!v21)
        {
          uint64_t v23 = 0x434F49B340653E91;
          uint64_t v7 = &v24;
          uint64_t v8 = &v23;
          return re::MaterialParameterBlock::setTextureHandle(a4, v8, a3, (uint64_t)v7);
        }
      }
      else if (v4 == 0x624E48A54CCAF812)
      {
        uint64_t v12 = *((void *)a3 + 10);
        uint64_t v13 = *((void *)a3 + 11);
        a3 = (re::TextureHandle *)((char *)a3 + 80);
        if (v13)
        {
          if (v12)
          {
            uint64_t v35 = 0x5E3E4F6B0382;
            uint64_t v7 = &v36;
            uint64_t v8 = &v35;
            return re::MaterialParameterBlock::setTextureHandle(a4, v8, a3, (uint64_t)v7);
          }
        }
      }
      return result;
    }
    if (v4 == 0x7FDCEB30A1A454B1) {
      goto LABEL_20;
    }
    if (v4 != 0x7FDCEB30A1A454B2)
    {
      if (v4 != 0x7FDCEB30A1A454B3) {
        return result;
      }
      goto LABEL_13;
    }
    goto LABEL_28;
  }
  if (*a2 >> 1 <= 0x4B1ED2EBAC5B8AD2uLL)
  {
    if (v4 != 0x18BB8A89E24827A1)
    {
      if (v4 != 0x489DE5C589B580C8) {
        return result;
      }
LABEL_20:
      if (*((void *)a3 + 1) && *(void *)a3)
      {
        uint64_t v33 = 0x434F49B3406455B4;
        uint64_t v7 = &v34;
        uint64_t v8 = &v33;
        return re::MaterialParameterBlock::setTextureHandle(a4, v8, a3, (uint64_t)v7);
      }
      return result;
    }
LABEL_28:
    uint64_t v14 = *((void *)a3 + 2);
    uint64_t v15 = *((void *)a3 + 3);
    a3 = (re::TextureHandle *)((char *)a3 + 16);
    if (v15) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16)
    {
      uint64_t v31 = 0x434F49B34064CA13;
      uint64_t v7 = &v32;
      uint64_t v8 = &v31;
      return re::MaterialParameterBlock::setTextureHandle(a4, v8, a3, (uint64_t)v7);
    }
    return result;
  }
  if (v4 != 0x4B1ED2EBAC5B8AD3)
  {
    if (v4 == 0x52B9782D83821E50)
    {
      uint64_t v17 = *((void *)a3 + 18);
      uint64_t v18 = *((void *)a3 + 19);
      a3 = (re::TextureHandle *)((char *)a3 + 144);
      if (v18 && v17)
      {
        uint64_t v27 = 0x434F49B3406455D3;
        uint64_t v7 = &v28;
        uint64_t v8 = &v27;
        return re::MaterialParameterBlock::setTextureHandle(a4, v8, a3, (uint64_t)v7);
      }
    }
    else if (v4 == 0x52B9782D83821E51)
    {
      uint64_t v5 = *((void *)a3 + 20);
      uint64_t v6 = *((void *)a3 + 21);
      a3 = (re::TextureHandle *)((char *)a3 + 160);
      if (v6)
      {
        if (v5)
        {
          uint64_t v25 = 0x434F49B34064CA32;
          uint64_t v7 = &v26;
          uint64_t v8 = &v25;
          return re::MaterialParameterBlock::setTextureHandle(a4, v8, a3, (uint64_t)v7);
        }
      }
    }
    return result;
  }
LABEL_13:
  uint64_t v9 = *((void *)a3 + 4);
  uint64_t v10 = *((void *)a3 + 5);
  a3 = (re::TextureHandle *)((char *)a3 + 32);
  if (v10) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v29 = 0x434F49B340653E72;
    uint64_t v7 = &v30;
    uint64_t v8 = &v29;
    return re::MaterialParameterBlock::setTextureHandle(a4, v8, a3, (uint64_t)v7);
  }
  return result;
}

void re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock(char **this, const re::ecs2::VideoMaterialAttachment *a2, re::MaterialParameterBlock *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  isTextureAttachment = (re *)re::ecs2::VideoMaterialAttachment::isTextureAttachment((re::ecs2::VideoMaterialAttachment *)this, a2);
  if (isTextureAttachment)
  {
    unint64_t v13 = (unint64_t)this[2] >> 1;
    re::MaterialParameterBlock::removeTexture((uint64_t)a2, (uint64_t *)&v13);
    return;
  }
  unint64_t v6 = (unint64_t)*this >> 1;
  if (v6 == 0x32970A2E88169C84)
  {
    uint64_t v9 = this[1];
    if (v9 == "REVideoAttachmentConstantImageFunction"
      || (isTextureAttachment = (re *)strcmp(v9, "REVideoAttachmentConstantImageFunction"), !isTextureAttachment))
    {
      uint64_t v8 = 0x3D3952D14E0320A8;
      goto LABEL_14;
    }
  }
  else if (v6 == 0x41C03F11B6A8BA59)
  {
    uint64_t v7 = this[1];
    if (v7 == "REVideoAttachmentConstantYCbCrMatrix"
      || (isTextureAttachment = (re *)strcmp(v7, "REVideoAttachmentConstantYCbCrMatrix"), !isTextureAttachment))
    {
      uint64_t v8 = 0x3C8C0FE134EC625DLL;
LABEL_14:
      *(void *)CMTime buf = v8;
      re::MaterialParameterBlock::removeConstant((uint64_t *)a2, (uint64_t *)buf, 4);
      return;
    }
  }
  if ((atomic_exchange(re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock(re::ecs2::VideoMaterialAttachment const&,re::MaterialParameterBlock &)::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v10 = *re::graphicsLogObjects(isTextureAttachment);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v11 = v10;
      uint64_t v12 = this[1];
      *(_DWORD *)CMTime buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "removeVideoAttachmentFromParameterBlock: Unknown video component attachment \"%s\" encountered; skipping...",
        buf,
        0xCu);
    }
  }
}

uint64_t re::ecs2::RemoteEffectsSystemEnabled(re::ecs2 *this)
{
  if (qword_26AF8ACC8 != -1) {
    dispatch_once(&qword_26AF8ACC8, &__block_literal_global_22);
  }
  return _MergedGlobals_273;
}

void ___ZN2re4ecs226RemoteEffectsSystemEnabledEv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::BOOLValue((re::Defaults *)"RemoteEffectsSystemEnabled", a2, v3);
  if (v3[0]) {
    char v2 = v3[1];
  }
  else {
    char v2 = 1;
  }
  _MergedGlobals_273 = v2;
}

void *re::ecs2::RemoteEffectsService::cleanUpHoverEffectData(re::ecs2::RemoteEffectsService *this, re::ecs2::Entity *a2)
{
  void v5[2] = *MEMORY[0x263EF8340];
  double result = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::RemoteEffectsService *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    int v3 = result;
    uint64_t v4 = (uint64_t)(result + 4);
    MurmurHash3_x64_128((uint64_t)"EnableGlow", 10, 0, (unint64_t *)v5);
    v5[0] ^= v5[1] + (v5[0] << 6) + ((unint64_t)v5[0] >> 2) - 0x61C8864680B583E9;
    re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v4, v5);
    return re::ecs2::Component::markDirty(v3);
  }
  return result;
}

void re::ecs2::RemoteEffectsService::updateAutoFade(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, double a5)
{
  if (*(unsigned __int8 *)(a2 + 129) != a3)
  {
    char v7 = a3;
    re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)(a1 + 40), a4);
    *(double *)(*a4 + 32) = a5;
    double v9 = 0.0;
    if (*(unsigned char *)(a2 + 129)) {
      double v10 = 0.0;
    }
    else {
      double v10 = 1.0;
    }
    if (*(unsigned char *)(a2 + 129)) {
      double v9 = 1.0;
    }
    re::ecs2::addAnimation(a4, a2 + 136, v10, v9);
    *(unsigned char *)(a2 + 129) = v7;
  }
}

void re::ecs2::addAnimation(uint64_t *a1, uint64_t a2, double a3, double a4)
{
  double v7 = a4 - a3 + *(double *)(a2 + 8);
  *(double *)(a2 + 8) = v7;
  uint64_t v8 = *a1;
  *(double *)(v8 + 64) = v7;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 8objc_initWeak(location, 0) = 0;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24), *(void *)a2);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)a2, *a1);
  *(double *)(a2 + 24) = a4;
}

double re::ecs2::RemoteEffectsService::updateAnimator(re::ecs2::RemoteEffectsService *a1, double *a2, double a3)
{
  uint64_t v4 = *(re::ecs2::RemoteEffectAnimationNode **)a2;
  if (v4)
  {
    BOOL updated = re::ecs2::RemoteEffectsService::updateAnimationNode(a1, a3, v4);
    uint64_t v7 = *(void *)a2;
    double result = a2[3] + *(double *)(*(void *)a2 + 80) - a2[1];
    a2[2] = result;
    if (!updated)
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove((uint64_t)a1 + 40, v7);
      if (*(void *)a2)
      {

        *a2 = 0.0;
      }
      uint64_t v7 = 0;
      a2[1] = 0.0;
    }
    *((unsigned char *)a2 + 32) = v7 != 0;
  }
  else
  {
    double result = a2[3];
    a2[2] = result;
  }
  return result;
}

BOOL re::ecs2::RemoteEffectsService::updateAnimationNode(re::ecs2::RemoteEffectsService *this, double a2, re::ecs2::RemoteEffectAnimationNode *a3)
{
  uint64_t v5 = (re::ecs2::RemoteEffectAnimationNode *)*((void *)a3 + 3);
  if (v5)
  {
    char updated = re::ecs2::RemoteEffectsService::updateAnimationNode(this, a2, v5);
    uint64_t v8 = *((void *)a3 + 3);
    *((void *)a3 + re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = *(void *)(v8 + 80);
    if ((updated & 1) == 0)
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove((uint64_t)this + 40, v8);
      uint64_t v9 = *((void *)a3 + 3);
      if (v9)
      {

        *((void *)a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
      }
    }
  }
  double v10 = a2 - *((double *)a3 + 4) - *((double *)a3 + 5);
  double v11 = *((double *)a3 + 8);
  double v12 = *((double *)a3 + 6);
  if (v10 <= v12)
  {
    double v13 = v10 / v12;
    if (v10 / v12 < 1.0)
    {
      double v14 = *((double *)a3 + 7);
      if (v13 <= 0.0)
      {
        double v11 = *((double *)a3 + 7);
      }
      else
      {
        float v15 = re::internal::evaluateCubicBezierEase<double>(**((void **)a3 + 9), *(void *)(*((void *)a3 + 9) + 8), *(void *)(*((void *)a3 + 9) + 16), *(void *)(*((void *)a3 + 9) + 24), v13, 0.00001);
        double v11 = v11 * v15 + v14 * (float)(1.0 - v15);
      }
    }
  }
  BOOL result = v10 <= v12;
  *((double *)a3 + 1objc_initWeak(location, 0) = v11;
  return result;
}

void re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = &v3[v4];
  unint64_t v6 = v3;
  if (v4)
  {
    uint64_t v7 = 8 * v4;
    unint64_t v6 = *(void **)(a1 + 32);
    while (*v6 != a2)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
      {
        unint64_t v6 = &v3[v4];
        break;
      }
    }
  }
  unint64_t v8 = v6 - v3;
  if (v8 != v4)
  {
    if (v4 <= v8)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = v4 - 1;
    if (v4 - 1 > v8)
    {
      uint64_t v10 = v3[v8];
      v3[v8] = *(v5 - 1);
      *(v5 - re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v10;
      int v3 = *(void **)(a1 + 32);
    }
    double v11 = &v3[v4];
    uint64_t v12 = *(v11 - 1);
    if (v12)
    {

      *(v11 - re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
      uint64_t v9 = *(void *)(a1 + 16) - 1;
    }
    *(void *)(a1 + 16) = v9;
    ++*(_DWORD *)(a1 + 24);
  }
}

void re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(uint64_t a1, unint64_t a2)
{
  if (*(void *)a1)
  {
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      if (*(void *)(v7 + 1536 * v6 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 1536 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v10 = *(void *)(a1 + 16);
        uint64_t v11 = v10 + 1536 * v6;
        int v14 = *(_DWORD *)(v11 + 8);
        uint64_t v12 = (int *)(v11 + 8);
        int v13 = v14;
        if (v14 < 0)
        {
          int *v12 = v13 & 0x7FFFFFFF;
          uint64_t v15 = v10 + 1536 * v6;
          uint64_t v18 = *(void *)(v15 + 16);
          uint64_t v17 = (void *)(v15 + 16);
          uint64_t v16 = v18;
          if (v18)
          {

            void *v17 = 0;
          }
        }
        uint64_t v19 = *(void *)(a1 + 16) + 1536 * v6;
        int v20 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(v19 + 8) = *(_DWORD *)(v19 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v6;
        *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v20 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v8 = v6;
          int v9 = *(_DWORD *)(v7 + 1536 * v6 + 8);
          uint64_t v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v7 + 1536 * v6 + 16) == a2)
          {
            *(_DWORD *)(v7 + 1536 * v8 + 8) = *(_DWORD *)(v7 + 1536 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 1536 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

void ___ZN2re4ecs220RemoteEffectsService20setUpHoverEffectDataERNS0_22RemoteEffectHoverStateE_block_invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 176)) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 208);
  unint64_t v61 = a2;
  uint64_t v5 = (void *)(a2 + 8);
  id v6 = (id)(a2 + 8);
  uint64_t v7 = *(void *)(v4 + 80);
  unint64_t v8 = a2 ^ (a2 >> 30);
  if (v7)
  {
    unint64_t v9 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27));
    uint64_t v10 = *(unsigned int *)(*(void *)(v4 + 88) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(v4 + 104)));
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v24 = *(void *)(v4 + 96);
      uint64_t v25 = *(void *)(v24 + 1536 * v10 + 16);
      if (v25 == a2)
      {
LABEL_31:
        uint64_t v31 = v24 + 1536 * v10 + 32;
        goto LABEL_32;
      }
      uint64_t v26 = v10;
      while (1)
      {
        LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 26) = *(_DWORD *)(v24 + 1536 * v26 + 8) & 0x7FFFFFFF;
        if (v26 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v24 + 1536 * v26 + 16) == a2)
        {
          if (v25 != a2)
          {
            while (1)
            {
              LODWORD(v1objc_initWeak(location, 0) = *(_DWORD *)(v24 + 1536 * v10 + 8) & 0x7FFFFFFF;
              if (v10 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v24 + 1536 * v10 + 16) == a2) {
                goto LABEL_31;
              }
            }
            LODWORD(v1objc_initWeak(location, 0) = 0x7FFFFFFF;
          }
          goto LABEL_31;
        }
      }
    }
  }
  int v11 = *(_DWORD *)(*(void *)(a1 + 216) + 488);
  bzero(v62, 0x5E0uLL);
  for (uint64_t i = 0; i != 1408; i += 176)
  {
    int v13 = &v62[i];
    *((_DWORD *)v13 + 16) = 0;
    *((_OWORD *)v13 + re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = xmmword_2343A1520;
    v13[128] = 0;
    *((_DWORD *)v13 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    v13[136] = 0;
    v13[160] = 0;
  }
  int v63 = 0;
  char v64 = 1;
  int v65 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  long long v66 = _Q0;
  uint64_t v67 = 0;
  int v68 = 0;
  __int16 v69 = 1;
  char v70 = 0;
  int v71 = v11;
  char v72 = 0;
  unint64_t v19 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27));
  unint64_t v20 = v19 ^ (v19 >> 31);
  if (v7)
  {
    unint64_t v21 = v20 % *(unsigned int *)(v4 + 104);
    uint64_t v22 = *(unsigned int *)(*(void *)(v4 + 88) + 4 * v21);
    if (v22 != 0x7FFFFFFF)
    {
      uint64_t v23 = *(void *)(v4 + 96);
      if (*(void *)(v23 + 1536 * v22 + 16) == a2) {
        goto LABEL_22;
      }
      while (1)
      {
        LODWORD(v22) = *(_DWORD *)(v23 + 1536 * v22 + 8) & 0x7FFFFFFF;
        if (v22 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v23 + 1536 * v22 + 16) == a2) {
          goto LABEL_22;
        }
      }
    }
  }
  else
  {
    LODWORD(v2re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  }
  re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsMove(v4 + 80, v21, v20, (uint64_t *)&v61, v62);
  ++*(_DWORD *)(v4 + 120);
  if (!*(void *)(v4 + 80))
  {
LABEL_27:
    unsigned int v28 = 0x7FFFFFFF;
    goto LABEL_29;
  }
LABEL_22:
  unsigned int v27 = *(_DWORD *)(*(void *)(v4 + 88) + 4 * (v20 % *(unsigned int *)(v4 + 104)));
  unsigned int v28 = 0x7FFFFFFF;
  if (v27 != 0x7FFFFFFF)
  {
    uint64_t v29 = *(void *)(v4 + 96);
    if (*(void *)(v29 + 1536 * v27 + 16) == a2)
    {
      unsigned int v28 = *(_DWORD *)(*(void *)(v4 + 88) + 4 * (v20 % *(unsigned int *)(v4 + 104)));
      goto LABEL_29;
    }
    do
    {
      unsigned int v28 = *(_DWORD *)(v29
                      + 1536 * *(unsigned int *)(*(void *)(v4 + 88) + 4 * (v20 % *(unsigned int *)(v4 + 104)))
                      + 8) & 0x7FFFFFFF;
      if (v28 == 0x7FFFFFFF) {
        goto LABEL_27;
      }
    }
    while (*(void *)(v29 + 1536 * v28 + 16) != a2);
  }
LABEL_29:
  uint64_t v30 = *(void *)(v4 + 96) + 1536 * v28;
  uint64_t v31 = v30 + 32;
  *(unsigned char *)(v30 + 1468) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v30 + 1456) = _D0;
  *(_OWORD *)(v30 + 144objc_initWeak(location, 0) = xmmword_2343854A0;
LABEL_32:
  if (!*(unsigned char *)(v31 + 1492)) {
    *(_DWORD *)(v31 + 1432) = 0;
  }
  uint64_t v33 = *(void *)(a1 + 216);
  float v34 = *(double *)(v33 + 112) * *(float *)(v33 + 492);
  *(float *)(v31 + 144objc_initWeak(location, 0) = v34;
  uint64_t v35 = (const double *)(v4 + 184);
  float64x2_t v36 = vld1q_dup_f64(v35);
  float64x2_t v37 = vsubq_f64(v36, *(float64x2_t *)(v33 + 72));
  *(float32x2_t *)(v31 + 1472) = vcvt_f32_f64(v37);
  v37.f64[0] = *(float64_t *)(v33 + 320);
  LODWORD(v37.f64[1]) = *(_DWORD *)(v33 + 328);
  *(float64x2_t *)(v31 + 1456) = v37;
  uint64_t v38 = *(void *)(a1 + 216);
  int v39 = *(_DWORD *)(v38 + 488);
  float v40 = v34 * 0.1;
  if (v39 != 2) {
    float v40 = 0.0;
  }
  *(float *)(v31 + 148objc_initWeak(location, 0) = v40;
  *(unsigned char *)(v31 + 1484) = v39 != 1;
  int v41 = *(unsigned __int8 *)(v38 + 512);
  if (v41 == 2) {
    char v42 = 2;
  }
  else {
    char v42 = v41 == 1;
  }
  *(unsigned char *)(v31 + 1486) = v42;
  if (*(_DWORD *)(v31 + 1488) == 1)
  {
    long long v43 = *(_OWORD *)(a1 + 32);
    long long v44 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v31 + 32) = v44;
    *(_OWORD *)uint64_t v31 = v43;
    long long v45 = *(_OWORD *)(a1 + 80);
    long long v46 = *(_OWORD *)(a1 + 96);
    long long v47 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v31 + 8objc_initWeak(location, 0) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v31 + 96) = v47;
    *(_OWORD *)(v31 + 48) = v45;
    *(_OWORD *)(v31 + 64) = v46;
    long long v48 = *(_OWORD *)(a1 + 144);
    long long v49 = *(_OWORD *)(a1 + 160);
    long long v50 = *(_OWORD *)(a1 + 176);
    *(unsigned char *)(v31 + 16objc_initWeak(location, 0) = *(unsigned char *)(a1 + 192);
    *(_OWORD *)(v31 + 128) = v49;
    *(_OWORD *)(v31 + 144) = v50;
    *(_OWORD *)(v31 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = v48;
    *(_DWORD *)(v31 + 1432) = 1;
  }
  else
  {
    int v51 = *(_DWORD *)(v31 + 1432);
    if (v51 <= 7)
    {
      *(_DWORD *)(v31 + 1432) = v51 + 1;
      uint64_t v52 = v31 + 176 * v51;
      long long v53 = *(_OWORD *)(a1 + 32);
      long long v54 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v52 + 16) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v52 + 32) = v54;
      *(_OWORD *)uint64_t v52 = v53;
      long long v55 = *(_OWORD *)(a1 + 80);
      long long v56 = *(_OWORD *)(a1 + 96);
      long long v57 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v52 + 8objc_initWeak(location, 0) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v52 + 96) = v57;
      *(_OWORD *)(v52 + 48) = v55;
      *(_OWORD *)(v52 + 64) = v56;
      long long v58 = *(_OWORD *)(a1 + 144);
      long long v59 = *(_OWORD *)(a1 + 160);
      long long v60 = *(_OWORD *)(a1 + 176);
      *(unsigned char *)(v52 + 16objc_initWeak(location, 0) = *(unsigned char *)(a1 + 192);
      *(_OWORD *)(v52 + 128) = v59;
      *(_OWORD *)(v52 + 144) = v60;
      *(_OWORD *)(v52 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = v58;
    }
  }
  *(unsigned char *)(v31 + 1492) = 1;
  if (a2) {
}
  }

void re::ecs2::RemoteEffectsService::applyHitTestData(re *a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 16)) {
    goto LABEL_14;
  }
  if (qword_26AF8ACC8 != -1) {
    dispatch_once(&qword_26AF8ACC8, &__block_literal_global_22);
  }
  if (!_MergedGlobals_273)
  {
LABEL_14:
    if (qword_26AF8ACE0 != -1) {
      dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
    }
    if (!byte_26AF8ACC1) {
      return;
    }
    if (qword_26AF8ACC8 != -1) {
      dispatch_once(&qword_26AF8ACC8, &__block_literal_global_22);
    }
    int v10 = _MergedGlobals_273;
    int v11 = *re::remoteEffectsLogObjects(a1);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (!v12) {
        return;
      }
      *(_WORD *)CMTime buf = 0;
      int v13 = "applyHitTestData() early out - targetEntity is null";
    }
    else
    {
      if (!v12) {
        return;
      }
      *(_WORD *)CMTime buf = 0;
      int v13 = "applyHitTestData() early out - RemoteEffectsSystem disabled";
    }
LABEL_63:
    _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, v13, buf, 2u);
    return;
  }
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(a2 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (!v4) {
    goto LABEL_22;
  }
  uint64_t v5 = v4;
  if (qword_26AF8ACE0 != -1) {
    dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
  }
  if (byte_26AF8ACC1)
  {
    id v6 = *re::remoteEffectsLogObjects((re *)v4);
    uint64_t v4 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      uint64_t v7 = v6;
      int v8 = *(_DWORD *)(v5 + 104);
      *(_DWORD *)CMTime buf = 67109120;
      LODWORD(v54) = v8;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "applyHitTestData() - component version: %d", buf, 8u);
    }
  }
  if (!*(_DWORD *)(v5 + 104))
  {
LABEL_22:
    uint64_t v14 = *(void *)(a2 + 16);
    if (v14)
    {
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v14 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v4)
        {
          if (*(unsigned char *)(v4 + 46)) {
            uint64_t v9 = v14;
          }
          if (*(_DWORD *)(v4 + 104) && v9 != 0) {
            goto LABEL_35;
          }
        }
        uint64_t v14 = *(void *)(v14 + 24);
        if (!v14 || (*(unsigned char *)(v14 + 288) & 0x80) != 0) {
          goto LABEL_34;
        }
      }
    }
    goto LABEL_56;
  }
  if (!*(unsigned char *)(v5 + 46)) {
    goto LABEL_56;
  }
  uint64_t v9 = *(void *)(a2 + 16);
LABEL_34:
  if (!v9)
  {
LABEL_56:
    if (qword_26AF8ACE0 != -1) {
      dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
    }
    if (!byte_26AF8ACC1) {
      return;
    }
    int v11 = *re::remoteEffectsLogObjects((re *)v4);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)CMTime buf = 0;
    int v13 = "applyHitTestData() early out - did not find activeEntity";
    goto LABEL_63;
  }
LABEL_35:
  if (qword_26AF8ACE0 != -1) {
    dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
  }
  if (byte_26AF8ACC1)
  {
    uint64_t v16 = *re::remoteEffectsLogObjects((re *)v4);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void **)(v9 + 296);
      double v18 = *(float *)a2;
      double v19 = *(float *)(a2 + 4);
      double v20 = *(float *)(a2 + 8);
      *(_DWORD *)CMTime buf = 134218752;
      long long v54 = v17;
      __int16 v55 = 2048;
      double v56 = v18;
      __int16 v57 = 2048;
      double v58 = v19;
      __int16 v59 = 2048;
      double v60 = v20;
      _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "applyHitTestData() - found activeEntity %llu - position: %f, %f, %f", buf, 0x2Au);
    }
  }
  unint64_t v21 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v22 = *((void *)a1 + 2);
  if (v22)
  {
    uint64_t v23 = *((void *)a1 + 4);
    while (1)
    {
      uint64_t v24 = *(void **)v23;
      if (*(void *)(*(void *)v23 + 480) == v9
        && (*((unsigned __int8 *)v24 + 513) == *(unsigned __int8 *)(a2 + 96) || !*((unsigned char *)v21 + 48)))
      {
        break;
      }
      v23 += 8;
      if (!--v22) {
        goto LABEL_46;
      }
    }
    if (qword_26AF8ACE0 != -1) {
      dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
    }
    if (byte_26AF8ACC1)
    {
      long long v49 = *re::remoteEffectsLogObjects(v21);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        double v50 = *(double *)(v9 + 296);
        int v51 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)CMTime buf = 134218496;
        long long v54 = v24;
        __int16 v55 = 2048;
        double v56 = v50;
        __int16 v57 = 1024;
        LODWORD(v58) = v51;
        _os_log_impl(&dword_233120000, v49, OS_LOG_TYPE_DEFAULT, "findOrCreateHoverStateAndUpdateHitTestData() - found existing state %p for entity: %llu; source: %d",
          buf,
          0x1Cu);
      }
    }
    if (*((unsigned __int8 *)v24 + 513) != *(unsigned __int8 *)(a2 + 96)) {
      *((unsigned char *)v24 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 1;
    }
  }
  else
  {
LABEL_46:
    uint64_t v25 = re::globalAllocators(v21);
    uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25[2] + 32))(v25[2], 528, 16);
    bzero(v24, 0x210uLL);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v24, 0);
    *uint64_t v24 = &unk_26E703340;
    v24[6] = 0;
    v24[7] = 0;
    *((unsigned char *)v24 + 64) = 0;
    v24[9] = 0;
    v24[10] = 0;
    *((_OWORD *)v24 + 6) = 0u;
    *((_WORD *)v24 + 64) = 0;
    *((unsigned char *)v24 + 13objc_initWeak(location, 0) = 0;
    v24[17] = 0;
    *((unsigned char *)v24 + 168) = 0;
    v24[22] = 0;
    *((unsigned char *)v24 + 208) = 0;
    *((unsigned char *)v24 + 216) = 0;
    *((unsigned char *)v24 + 224) = 0;
    *((unsigned char *)v24 + 232) = 0;
    *((unsigned char *)v24 + 24objc_initWeak(location, 0) = 0;
    *((unsigned char *)v24 + 31re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
    *(void *)((char *)v24 + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
    v24[40] = 0;
    *(void *)&long long v27 = 0x7F0000007FLL;
    *((void *)&v27 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0x7F0000007FLL;
    *((int32x4_t *)v24 + 2re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = vdupq_n_s32(0x7F800000u);
    *((_OWORD *)v24 + 22) = v27;
    *((_OWORD *)v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = 0u;
    *((unsigned char *)v24 + 45re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = 0;
    *((unsigned char *)v24 + 465) = 0;
    uint64_t v52 = v24;
    re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add(a1, (uint64_t *)&v52);
    char v28 = *(unsigned char *)(a2 + 96);
    v24[60] = v9;
    *((unsigned char *)v24 + 51re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v28;
    *((unsigned char *)v24 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 1;
    *((_DWORD *)v24 + 122) = 0;
    *(_WORD *)((char *)v24 + 129) = 0;
    v24[24] = 0;
    v24[25] = 0;
    uint64_t v29 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v29)
    {
      int v30 = *(_DWORD *)(v29 + 40);
      *((_DWORD *)v24 + 122) = v30;
      *((_DWORD *)v24 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = *(_DWORD *)(v29 + 68);
      __asm { FMOV            V0.2S, #1.0 }
      v24[40] = _D0;
      *((_DWORD *)v24 + 82) = 1065353216;
      *((unsigned char *)v24 + 332) = 0;
      *((unsigned char *)v24 + 496) = *(unsigned char *)(v29 + 45);
      *((unsigned char *)v24 + 512) = *(unsigned char *)(v29 + 44);
      *((unsigned char *)v24 + 128) = *(unsigned char *)(v29 + 47);
      uint64_t v35 = *(void *)(v29 + 80);
      v24[27] = *(void *)(v29 + 72);
      *((unsigned char *)v24 + 224) = v35;
      uint64_t v36 = *(void *)(v29 + 96);
      v24[29] = *(void *)(v29 + 88);
      *((unsigned char *)v24 + 24objc_initWeak(location, 0) = v36;
      if ((v30 | 2) == 2)
      {
        uint64_t v37 = *(void *)(v29 + 60);
        v24[40] = *(void *)(v29 + 52);
        *((_DWORD *)v24 + 82) = v37;
        *((unsigned char *)v24 + 332) = BYTE4(v37);
      }
    }
    if (qword_26AF8ACE0 != -1) {
      dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
    }
    if (byte_26AF8ACC1)
    {
      uint64_t v38 = *re::remoteEffectsLogObjects((re *)v29);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        double v39 = *(double *)(v9 + 296);
        int v40 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)CMTime buf = 134218496;
        long long v54 = v24;
        __int16 v55 = 2048;
        double v56 = v39;
        __int16 v57 = 1024;
        LODWORD(v58) = v40;
        _os_log_impl(&dword_233120000, v38, OS_LOG_TYPE_DEFAULT, "findOrCreateHoverStateAndUpdateHitTestData() - initializing new state %p for entity: %llu; source: %d",
          buf,
          0x1Cu);
      }
    }
  }
  long long v41 = *(_OWORD *)(a2 + 48);
  long long v42 = *(_OWORD *)(a2 + 64);
  long long v43 = *(_OWORD *)(a2 + 80);
  *((_WORD *)v24 + 232) = *(_WORD *)(a2 + 96);
  long long v44 = *(_OWORD *)(a2 + 16);
  long long v45 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = *(_OWORD *)a2;
  *((_OWORD *)v24 + 24) = v44;
  *((_OWORD *)v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = v42;
  *((_OWORD *)v24 + 28) = v43;
  *((_OWORD *)v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = v45;
  *((_OWORD *)v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 26) = v41;
  *((unsigned char *)v24 + 465) = 1;
  *((unsigned char *)v24 + 51re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(unsigned char *)(a2 + 96);
  long long v46 = *(_OWORD *)(a2 + 32);
  long long v47 = *(_OWORD *)(a2 + 48);
  long long v48 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)((char *)v24 + 298) = *(_OWORD *)(a2 + 74);
  *((_OWORD *)v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = v47;
  *((_OWORD *)v24 + 18) = v48;
  *((_OWORD *)v24 + 16) = v46;
}

void re::ecs2::RemoteEffectsService::invalidateHitTestData(re::ecs2::RemoteEffectsService *this)
{
  if (qword_26AF8ACC8 != -1) {
    dispatch_once(&qword_26AF8ACC8, &__block_literal_global_22);
  }
  if (_MergedGlobals_273)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      unint64_t v3 = (uint64_t *)*((void *)this + 4);
      do
      {
        uint64_t v4 = *v3++;
        *(unsigned char *)(v4 + 465) = 0;
        --v2;
      }
      while (v2);
    }
  }
}

uint64_t re::ecs2::RemoteEffectsService::onEntityRemoved(uint64_t a1, unint64_t a2)
{
  double v20 = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v17[0] = 0;
  int v19 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(a1 + 32);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v16 = v7;
      id v8 = (id)(v7 + 8);
      if (*(void *)(v7 + 480) == a2) {
        re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)v17, &v16);
      }

      ++v5;
      v6 -= 8;
    }
    while (v6);
    if (v18)
    {
      uint64_t v9 = v20;
      uint64_t v10 = 8 * v18;
      do
      {
        uint64_t v11 = *v9;
        if (*v9)
        {
          id v12 = (id)(v11 + 8);
          re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(a1, v11);
        }
        else
        {
          re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(a1, 0);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  uint64_t v13 = a1 + 80;
  if (a2)
  {
    id v14 = (id)(a2 + 8);
    re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v13, a2);
  }
  else
  {
    re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v13, 0);
  }
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v17);
  return 0;
}

uint64_t re::ecs2::RemoteEffectsSystem::willAddSystemToECSService(re::ecs2::RemoteEffectsSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::RemoteEffectsService>(v2);
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = result;
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::RemoteEffectsService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::RemoteEffectsService>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsService>, 0);
  }
  uint64_t v2 = re::introspect<re::ecs2::RemoteEffectsService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void re::ecs2::RemoteEffectsSystem::willRemoveSystemFromECSService(re::ecs2::RemoteEffectsSystem *this, re::ecs2::Entity *a2)
{
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    uint64_t v4 = *(unsigned int *)(v2 + 112);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (_DWORD *)(*(void *)(v2 + 96) + 8);
      while ((*v6 & 0x80000000) == 0)
      {
        v6 += 384;
        if (v4 == ++v5)
        {
          LODWORD(v5) = *(_DWORD *)(v2 + 112);
          break;
        }
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if (v4 != v5)
    {
      uint64_t v7 = v5;
      do
      {
        re::ecs2::RemoteEffectsService::cleanUpHoverEffectData(*(re::ecs2::RemoteEffectsService **)(*(void *)(v2 + 96) + 1536 * v7 + 16), a2);
        unsigned int v8 = *(_DWORD *)(v2 + 112);
        if (v8 <= (int)v5 + 1) {
          int v9 = v5 + 1;
        }
        else {
          int v9 = *(_DWORD *)(v2 + 112);
        }
        int v10 = v5;
        while (1)
        {
          uint64_t v7 = (v10 + 1);
          if (v9 - 1 == v10) {
            break;
          }
          ++v10;
          LODWORD(v5) = v7;
          if ((*(_DWORD *)(*(void *)(v2 + 96) + 1536 * v7 + 8) & 0x80000000) != 0) {
            goto LABEL_18;
          }
        }
        LODWORD(v5) = v9;
LABEL_18:
        ;
      }
      while (v8 != v5);
    }
    uint64_t v11 = *(void *)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    if (v11)
    {
      uint64_t v12 = *(void *)(v2 + 72);
      uint64_t v13 = 8 * v11;
      do
      {
        if (*(void *)v12)
        {

          *(void *)uint64_t v12 = 0;
        }
        v12 += 8;
        v13 -= 8;
      }
      while (v13);
    }
    ++*(_DWORD *)(v2 + 64);
    *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  }
}

_anonymous_namespace_ *re::ecs2::RemoteEffectsSystem::willAddSceneToECSService(_anonymous_namespace_ *this, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return this;
  }
  uint64_t v16 = 0;
  unint64_t v17 = a2;
  uint64_t v4 = *(re::EventBus **)(a2 + 288);
  v14[1] = 0;
  void v14[2] = 0;
  int v15 = 0;
  uint64_t v5 = (re *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(v14, 8uLL);
  ++v15;
  uint64_t v19 = re::globalAllocators(v5)[2];
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v19 + 32))(v19, 32, 0);
  void *v6 = &unk_26E7032A0;
  v6[1] = v2;
  void v6[2] = re::ecs2::RemoteEffectsService::onEntityRemoved;
  v6[3] = 0;
  double v20 = v6;
  v13.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v4, (uint64_t)v18, 0, 0);
  v13.n128_u64[1] = v7;
  re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v14, &v13);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)v18);
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  if (*(void *)(v2 + 128))
  {
    unint64_t v10 = v9 % *(unsigned int *)(v2 + 152);
    uint64_t v11 = *(unsigned int *)(*(void *)(v2 + 136) + 4 * v10);
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = *(void *)(v2 + 144);
      if (*(void *)(v12 + (v11 << 6) + 16) == a2) {
        goto LABEL_10;
      }
      while (1)
      {
        uint64_t v11 = *(_DWORD *)(v12 + (v11 << 6) + 8) & 0x7FFFFFFF;
        if (v11 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v12 + (v11 << 6) + 16) == a2) {
          goto LABEL_10;
        }
      }
    }
  }
  else
  {
    LODWORD(v1objc_initWeak(location, 0) = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(v2 + 128, v10, v9, &v17, (uint64_t)v14);
  ++*(_DWORD *)(v2 + 168);
LABEL_10:
  this = (_anonymous_namespace_ *)v14[0];
  if (v14[0])
  {
    if (v16) {
      return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v14[0] + 40))();
    }
  }
  return this;
}

uint64_t re::ecs2::RemoteEffectsSystem::willRemoveSceneFromECSService(uint64_t this, unint64_t a2)
{
  uint64_t v2 = *(void *)(this + 104);
  if (v2)
  {
    unint64_t v14 = a2;
    uint64_t v3 = v2 + 128;
    if (*(void *)(v2 + 128))
    {
      unint64_t v4 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      uint64_t v5 = *(unsigned int *)(*(void *)(v2 + 136) + 4 * ((v4 ^ (v4 >> 31)) % *(unsigned int *)(v2 + 152)));
      if (v5 != 0x7FFFFFFF)
      {
        uint64_t v6 = *(void *)(a2 + 288);
        uint64_t v7 = *(void *)(v2 + 144);
        if (*(void *)(v7 + (v5 << 6) + 16) == a2)
        {
LABEL_7:
          uint64_t v8 = v7 + (v5 << 6);
          uint64_t v9 = *(void *)(v8 + 40);
          if (v9)
          {
            unint64_t v10 = *(uint64_t **)(v8 + 56);
            uint64_t v11 = &v10[2 * v9];
            do
            {
              uint64_t v12 = *v10;
              unint64_t v13 = v10[1];
              v10 += 2;
              re::EventBus::unsubscribe(v6, v12, v13);
            }
            while (v10 != v11);
          }
          return re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v3, (uint64_t *)&v14);
        }
        else
        {
          while (1)
          {
            uint64_t v5 = *(_DWORD *)(v7 + (v5 << 6) + 8) & 0x7FFFFFFF;
            if (v5 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v7 + (v5 << 6) + 16) == a2) {
              goto LABEL_7;
            }
          }
        }
      }
    }
  }
  return this;
}

void re::ecs2::RemoteEffectsSystem::update(_anonymous_namespace_ *a1, uint64_t a2, int a3)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  if (qword_26AF8ACC8 != -1) {
    dispatch_once(&qword_26AF8ACC8, &__block_literal_global_22);
  }
  if (_MergedGlobals_273)
  {
    uint64_t v5 = *((void *)a1 + 13);
    if (v5)
    {
      *(double *)(v5 + 184) = *(double *)(v5 + 184) + *(float *)&a3;
      uint64_t v6 = *(unsigned int *)(v5 + 112);
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (_DWORD *)(*(void *)(v5 + 96) + 8);
        while ((*v8 & 0x80000000) == 0)
        {
          v8 += 384;
          if (v6 == ++v7)
          {
            LODWORD(vre::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(v5 + 112);
            break;
          }
        }
      }
      else
      {
        LODWORD(vre::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = 0;
      }
      if (v6 != v7)
      {
        uint64_t v9 = v7;
        do
        {
          *(unsigned char *)(*(void *)(v5 + 96) + 1536 * v9 + 1524) = 0;
          if (v6 <= (int)v7 + 1) {
            int v10 = v7 + 1;
          }
          else {
            int v10 = v6;
          }
          int v11 = v7;
          while (1)
          {
            uint64_t v9 = (v11 + 1);
            if (v10 - 1 == v11) {
              break;
            }
            ++v11;
            LODWORD(vre::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = v9;
            if ((*(_DWORD *)(*(void *)(v5 + 96) + 1536 * v9 + 8) & 0x80000000) != 0) {
              goto LABEL_21;
            }
          }
          LODWORD(vre::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = v10;
LABEL_21:
          ;
        }
        while (v6 != v7);
      }
      unint64_t v12 = *(void *)(v5 + 16);
      float32x4_t v110 = 0;
      v107[1] = 0;
      uint64_t v108 = 0;
      int v109 = 0;
      unint64_t v13 = (re *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v107, v12);
      ++v109;
      uint64_t v14 = *(void *)(v5 + 16);
      if (v14)
      {
        int v15 = *(uint64_t **)(v5 + 32);
        uint64_t v16 = 8 * v14;
        __asm { FMOV            V12.2S, #1.0 }
        do
        {
          if (qword_26AF8ACE0 != -1) {
            dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
          }
          if (byte_26AF8ACC1)
          {
            uint64_t v21 = *re::remoteEffectsLogObjects(v13);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v22 = *v15;
              uint64_t v23 = *(void *)(*v15 + 480);
              if (v23) {
                uint64_t v23 = *(void *)(v23 + 296);
              }
              __int32 v24 = *(unsigned __int8 *)(v22 + 465);
              buf[0].i32[0] = 134218496;
              *(uint64_t *)((char *)buf[0].i64 + 4) = v22;
              buf[0].i16[6] = 2048;
              *(uint64_t *)((char *)&buf[0].i64[1] + 6) = v23;
              buf[1].i16[3] = 1024;
              buf[1].i32[2] = v24;
              _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "HoverState %p - updating for entity %llu - hitTestData.valid: %d", (uint8_t *)buf, 0x1Cu);
            }
          }
          uint64_t v25 = *v15;
          double v26 = *(double *)(v5 + 184);
          if (v26 - *(double *)(*v15 + 72) > 3600.0) {
            *(double *)(v25 + 72) = v26;
          }
          int v27 = *(unsigned __int8 *)(v25 + 465);
          if (*(unsigned __int8 *)(v25 + 64) != v27)
          {
            if (*(unsigned char *)(v25 + 465)) {
              *(double *)(v25 + 72) = v26;
            }
            else {
              *(double *)(v25 + 8objc_initWeak(location, 0) = v26;
            }
          }
          *(unsigned char *)(v25 + 64) = v27;
          if (*(unsigned __int8 *)(v25 + 497) != v27 && *(unsigned char *)(v25 + 272) != 0)
          {
            re::make::shared::object<re::ecs2::RemoteEffectAnimationNode>((re *)buf);
            re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)(v5 + 40), (uint64_t *)buf);
            if (v27)
            {
              uint64_t v29 = (uint64_t *)(v25 + 280);
              if (*(unsigned char *)(v25 + 224)) {
                uint64_t v29 = (uint64_t *)(v25 + 216);
              }
              uint64_t v30 = *v29;
            }
            else
            {
              char v32 = (uint64_t *)(v25 + 288);
              if (*(unsigned char *)(v25 + 240)) {
                char v32 = (uint64_t *)(v25 + 232);
              }
              uint64_t v30 = *v32;
            }
            uint64_t v33 = buf[0].i64[0];
            *(void *)(buf[0].i64[0] + 48) = v30;
            *(void *)(v33 + 72) = v31;
            *(double *)(v33 + 32) = v26;
            if (*(unsigned char *)(v25 + 497)) {
              double v34 = 0.0;
            }
            else {
              double v34 = 1.0;
            }
            re::ecs2::addAnimation((uint64_t *)buf, v25 + 176, (double)*(unsigned __int8 *)(v25 + 497), v34);
            *(double *)(v25 + 504) = v26;
            if (v27)
            {
              re::make::shared::object<re::ecs2::RemoteEffectAnimationNode>((re *)__dst);
              uint64_t v35 = *(void **)&__dst[0];
              *(void *)(*(void *)&__dst[0] + 48) = *(void *)(v33 + 48);
              v35[9] = *(void *)(v33 + 72);
              void v35[4] = *(void *)(v33 + 32);
              re::ecs2::RemoteEffectsService::updateAutoFade(v5, v25, 0, (uint64_t *)__dst, v26);
            }
          }
          *(unsigned char *)(v25 + 49re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = v27;
          if (v27) {
            BOOL v36 = *(unsigned char *)(v25 + 129) == 0;
          }
          else {
            BOOL v36 = 0;
          }
          BOOL v37 = !v36 || *(unsigned char *)(v25 + 128) == 0;
          if (!v37 && v26 - *(double *)(v25 + 504) >= 0.5)
          {
            re::make::shared::object<re::ecs2::RemoteEffectAnimationNode>((re *)buf);
            uint64_t v38 = buf[0].i64[0];
            *(void *)(buf[0].i64[0] + 48) = 0x3FF8000000000000;
            re::ecs2::RemoteEffectsService::updateAutoFade(v5, v25, 1, (uint64_t *)buf, v26);
            *(unsigned char *)(v25 + 13objc_initWeak(location, 0) = 1;
          }
          re::ecs2::RemoteEffectsService::updateAnimator((re::ecs2::RemoteEffectsService *)v5, (double *)(v25 + 176), v26);
          re::ecs2::RemoteEffectsService::updateAnimator((re::ecs2::RemoteEffectsService *)v5, (double *)(v25 + 136), v26);
          if (*(void *)(v25 + 176) || *(void *)(v25 + 136) || *(unsigned char *)(v25 + 497))
          {
            double v40 = *(double *)(v25 + 192);
            *(double *)(v25 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = v40;
            if (*(unsigned char *)(v25 + 130)) {
              *(double *)(v25 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = v40 * *(double *)(v25 + 152);
            }
            if (*(unsigned char *)(v25 + 465))
            {
              if (*(unsigned char *)(v25 + 496))
              {
                re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v25 + 480), (const re::ecs2::Entity *)1, buf);
                v117.columns[0] = (simd_float4)buf[0];
                v117.columns[1] = (simd_float4)buf[1];
                float32x4_t v98 = buf[0];
                float32x4_t v99 = buf[1];
                v117.columns[2] = (simd_float4)buf[2];
                v117.columns[3] = (simd_float4)buf[3];
                float32x4_t v100 = buf[3];
                float32x4_t v101 = buf[2];
                simd_float4x4 v118 = __invert_f4(v117);
                v118.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v118.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v118.columns[0], COERCE_FLOAT(*(_OWORD *)(v25 + 368))), (float32x4_t)v118.columns[1], *(float32x2_t *)(v25 + 368), 1), (float32x4_t)v118.columns[2], *(float32x4_t *)(v25 + 368), 2));
                v118.columns[0].i64[0] = vdivq_f32((float32x4_t)v118.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v118.columns[0], 3)).u64[0];
                v118.columns[0] = (simd_float4)vaddq_f32(v100, vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, v118.columns[0].f32[0]), v99, *(float32x2_t *)v118.columns[0].f32, 1), (float32x4_t)0, v101));
                float32x4_t v41 = vdivq_f32((float32x4_t)v118.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v118.columns[0], 3));
              }
              else
              {
                float32x4_t v41 = *(float32x4_t *)(v25 + 368);
              }
              *(float32x4_t *)(v25 + 48) = v41;
            }
            if (*(unsigned char *)(v25 + 120))
            {
              *(_OWORD *)(v25 + 96) = *(_OWORD *)(v25 + 48);
              *(unsigned char *)(v25 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
            }
            else
            {
              *(float32x4_t *)(v25 + 96) = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 48), *(float *)(v25 + 308)), *(float32x4_t *)(v25 + 96), 1.0 - *(float *)(v25 + 308));
            }
            uint64_t v46 = *(void *)(v25 + 480);
            buf[0] = (float32x4_t)xmmword_23435FD50;
            buf[1] = (float32x4_t)xmmword_23435FD60;
            buf[2] = (float32x4_t)xmmword_23435FD80;
            int32x4_t buf[3] = (float32x4_t)xmmword_23435FBB0;
            re::ecs2::MeshComponentHelper::computeEntityMeshBounds(v46, 1, buf, 0, (uint64_t)__dst);
            long long v48 = __dst[1];
            *(_OWORD *)(v25 + 336) = __dst[0];
            *(_OWORD *)(v25 + 352) = v48;
            if (qword_26AF8ACE0 != -1) {
              dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
            }
            if (byte_26AF8ACC1)
            {
              long long v49 = *re::remoteEffectsLogObjects(v47);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v50 = *v15;
                uint64_t v51 = *(void *)(*v15 + 112);
                buf[0].i32[0] = 134218240;
                *(uint64_t *)((char *)buf[0].i64 + 4) = v50;
                buf[0].i16[6] = 2048;
                *(uint64_t *)((char *)&buf[0].i64[1] + 6) = v51;
                _os_log_impl(&dword_233120000, v49, OS_LOG_TYPE_DEFAULT, "HoverState %p - progress: %f", (uint8_t *)buf, 0x16u);
              }
            }
            uint64_t v52 = *v15;
            float32x4_t v53 = *(float32x4_t *)(*v15 + 96);
            double v54 = *(double *)(*v15 + 112);
            *(float *)&unsigned int v55 = (*(float *)(*v15 + 276) + v54 * (float)(1.0 - *(float *)(*v15 + 276)))
                           * *(float *)(*v15 + 296);
            *(float *)&unsigned int v56 = *(float *)(*v15 + 304) * *(float *)&v55;
            memset(&buf[2], 0, 56);
            *(float *)&double v54 = v54;
            float32x4_t v57 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(v52 + 256), *(float *)&v54), COERCE_FLOAT(*(_OWORD *)(v52 + 492)));
            LODWORD(v54) = *(_DWORD *)(v52 + 300);
            uint64_t v58 = *(void *)(v52 + 480);
            buf[0].i64[0] = MEMORY[0x263EF8330];
            buf[0].i64[1] = 3221225472;
            buf[1].i64[0] = (uint64_t)___ZN2re4ecs220RemoteEffectsService20setUpHoverEffectDataERNS0_22RemoteEffectHoverStateE_block_invoke;
            buf[1].i64[1] = (uint64_t)&__block_descriptor_224_e13_v24__0_v8_B16l;
            buf[13].i64[0] = v5;
            buf[13].i64[1] = v52;
            buf[5].i64[1] = _D12;
            buf[6].i32[0] = 0;
            buf[7] = v57;
            uint8_t buf[8] = v53;
            buf[9].i64[0] = v55;
            buf[9].i64[1] = __PAIR64__(v56, LODWORD(v54));
            buf[10].i8[0] = 1;
            buf[10].i32[1] = 0;
            buf[10].i8[8] = 0;
            buf[11].i64[0] = 0;
            buf[11].i64[1] = _D12;
            buf[12].i8[0] = 0;
            LOBYTE(v103[0]) = 0;
            *(void *)&__dst[0] = 0;
            re::ecs2::entityAndDescendantsRecurse(v58, (unint64_t *)__dst, v103, buf);
          }
          else
          {
            if (qword_26AF8ACE0 != -1) {
              dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
            }
            if (byte_26AF8ACC1)
            {
              long long v42 = *re::remoteEffectsLogObjects((re *)v39);
              BOOL v39 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
              if (v39)
              {
                buf[0].i32[0] = 134217984;
                *(uint64_t *)((char *)buf[0].i64 + 4) = v25;
                _os_log_impl(&dword_233120000, v42, OS_LOG_TYPE_DEFAULT, "HoverState %p - updateGlowState returning false", (uint8_t *)buf, 0xCu);
              }
              if (qword_26AF8ACE0 != -1) {
                dispatch_once(&qword_26AF8ACE0, &__block_literal_global_12_0);
              }
            }
            if (byte_26AF8ACC1)
            {
              long long v43 = *re::remoteEffectsLogObjects((re *)v39);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v44 = *v15;
                uint64_t v45 = *(void *)(*v15 + 480);
                if (v45) {
                  uint64_t v45 = *(void *)(v45 + 296);
                }
                buf[0].i32[0] = 134218240;
                *(uint64_t *)((char *)buf[0].i64 + 4) = v44;
                buf[0].i16[6] = 2048;
                *(uint64_t *)((char *)&buf[0].i64[1] + 6) = v45;
                _os_log_impl(&dword_233120000, v43, OS_LOG_TYPE_DEFAULT, "HoverState %p - Removing for entity %llu", (uint8_t *)buf, 0x16u);
              }
            }
            unint64_t v13 = re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)v107, v15);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
      if (v108)
      {
        __int16 v59 = v110;
        uint64_t v60 = 8 * v108;
        do
        {
          uint64_t v61 = *v59;
          if (*v59)
          {
            id v62 = (id)(v61 + 8);
            re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(v5, v61);
          }
          else
          {
            re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(v5, 0);
          }
          ++v59;
          v60 -= 8;
        }
        while (v60);
      }
      float32x4_t v106 = 0;
      v103[1] = 0;
      uint64_t v104 = 0;
      v103[0] = 0;
      int v105 = 0;
      uint64_t v63 = *(unsigned int *)(v5 + 112);
      if (v63)
      {
        uint64_t v64 = 0;
        int v65 = (_DWORD *)(*(void *)(v5 + 96) + 8);
        while ((*v65 & 0x80000000) == 0)
        {
          v65 += 384;
          if (v63 == ++v64)
          {
            LODWORD(v64) = *(_DWORD *)(v5 + 112);
            break;
          }
        }
      }
      else
      {
        LODWORD(v64) = 0;
      }
      if (v63 != v64)
      {
        uint64_t v102 = v5 + 80;
        uint64_t v66 = v64;
        uint64_t v67 = &off_268773000;
        int v68 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        do
        {
          uint64_t v69 = *(void *)(v5 + 96) + 1536 * v66;
          char v70 = (void **)(v69 + 16);
          memcpy(buf, (const void *)(v69 + 32), 0x5D4uLL);
          if (*(unsigned char *)(v69 + 1524))
          {
            int v71 = *v70;
            uint64_t v72 = (*v70)[22];
            uint64_t v73 = re::CAREUtil::GetOrAddCAREComponent(*v70, (re::ecs2::ComponentTypeBase *)v67[321], 0, 0, 0);
            unint64_t v74 = re::CAREUtil::GetOrAddCAREComponent(v71, (re::ecs2::ComponentTypeBase *)v68[123], 0, 0, 0);
            if (v72) {
              BOOL v76 = v73 == 0;
            }
            else {
              BOOL v76 = 1;
            }
            if (!v76 && v74 != 0)
            {
              uint64_t v78 = (uint64_t)v74 + 32;
              MurmurHash3_x64_128((uint64_t)"EnableGlow", 10, 0, (unint64_t *)__dst);
              *(void *)&__dst[0] ^= *((void *)&__dst[0] + 1)
                                    + (*(void *)&__dst[0] << 6)
                                    + (*(void *)&__dst[0] >> 2)
                                    - 0x61C8864680B583E9;
              LODWORD(v112[0]) = 1;
              re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(v78, (uint64_t *)__dst, v112);
              memcpy(__dst, buf, sizeof(__dst));
              uint64_t v79 = *(void *)(v72 + 72);
              if (v79)
              {
                for (unint64_t i = 0; i != v79; ++i)
                {
                  if (i >= *((void *)v73 + 11)
                    || (unint64_t v81 = *(re::MaterialParameterBlock **)(*((void *)v73 + 13) + 8 * i)) == 0)
                  {
                    unsigned int v82 = re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)(v5 + 176), &v113);
                    unint64_t v84 = *((void *)v73 + 10);
                    unint64_t v83 = *((void *)v73 + 11);
                    if (v83 >= v84)
                    {
                      unint64_t v85 = v83 + 1;
                      if (v84 < v83 + 1)
                      {
                        if (*((void *)v73 + 9))
                        {
                          unint64_t v86 = 2 * v84;
                          if (!v84) {
                            unint64_t v86 = 8;
                          }
                          if (v86 <= v85) {
                            unint64_t v87 = v85;
                          }
                          else {
                            unint64_t v87 = v86;
                          }
                          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v73 + 9, v87);
                        }
                        else
                        {
                          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v73 + 9, v85);
                          ++*((_DWORD *)v73 + 24);
                        }
                      }
                      unint64_t v83 = *((void *)v73 + 11);
                    }
                    float32x4_t v88 = v113;
                    *(void *)(*((void *)v73 + 13) + 8 * v8re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v113;
                    if (v88)
                    {
                      float32x4_t v89 = (char *)v88 + 8;
                      unint64_t v83 = *((void *)v73 + 11);
                    }
                    *((void *)v73 + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v83 + 1;
                    ++*((_DWORD *)v73 + 24);
                    unint64_t v81 = v113;
                    if (v113) {
                  }
                    }
                  uint64_t v111 = 0x1366B488040B2B5;
                  re::MaterialParameterBlock::setBufferWithBytes(v81, &v111, (uint64_t)__dst, 1488, (uint64_t)v112);
                  uint64_t v111 = 0;
                  v112[0] = 0;
                }
              }
              re::ecs2::Component::markDirty(v73);
              uint64_t v67 = &off_268773000;
              int v68 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
            }
          }
          else
          {
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v103, (uint64_t *)(v69 + 16));
          }
          unsigned int v90 = *(_DWORD *)(v5 + 112);
          if (v90 <= (int)v64 + 1) {
            int v91 = v64 + 1;
          }
          else {
            int v91 = *(_DWORD *)(v5 + 112);
          }
          while (1)
          {
            uint64_t v66 = (v64 + 1);
            if (v91 - 1 == v64) {
              break;
            }
            LODWORD(v64) = v64 + 1;
            int v92 = v66;
            if ((*(_DWORD *)(*(void *)(v5 + 96) + 1536 * v66 + 8) & 0x80000000) != 0) {
              goto LABEL_147;
            }
          }
          int v92 = v91;
LABEL_147:
          LODWORD(v64) = v92;
        }
        while (v90 != v92);
        if (v104)
        {
          uint64_t v93 = v106;
          uint64_t v94 = 8 * v104;
          do
          {
            unint64_t v95 = *v93;
            if (*v93)
            {
              id v96 = (id)(v95 + 8);
              re::ecs2::RemoteEffectsService::cleanUpHoverEffectData((re::ecs2::RemoteEffectsService *)v95, v97);
              re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v102, v95);
            }
            else
            {
              re::ecs2::RemoteEffectsService::cleanUpHoverEffectData(0, v75);
              re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v102, 0);
            }
            ++v93;
            v94 -= 8;
          }
          while (v94);
        }
      }
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v103);
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v107);
    }
  }
}

void *re::ecs2::allocInfo_RemoteEffectsService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8ACD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8ACD0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8ACE8, "RemoteEffectsService");
    __cxa_guard_release(&qword_26AF8ACD0);
  }
  return &unk_26AF8ACE8;
}

void re::ecs2::initInfo_RemoteEffectsService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x1E3DEFFD1D104AB2;
  v5[1] = "RemoteEffectsService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_RemoteEffectsService(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RemoteEffectsService>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::RemoteEffectsService>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::RemoteEffectsService>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RemoteEffectsService>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::RemoteEffectsService>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 10objc_initWeak(location, 0) = 0u;
  *(void *)(a3 + 116) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_DWORD *)(a3 + 16objc_initWeak(location, 0) = 0;
  *(void *)(a3 + 164) = 0x7FFFFFFFLL;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::RemoteEffectsService>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)(a3 + 128));
  re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)(a3 + 80));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a3 + 40);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a3);
}

double re::internal::defaultConstructV2<re::ecs2::RemoteEffectsService>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 10objc_initWeak(location, 0) = 0u;
  *(void *)(a1 + 116) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 16objc_initWeak(location, 0) = 0;
  *(void *)(a1 + 164) = 0x7FFFFFFFLL;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RemoteEffectsService>(uint64_t a1)
{
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)(a1 + 128));
  re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)(a1 + 80));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1 + 40);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1);
}

uint64_t re::ecs2::introspect_RemoteEffectsService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsService>, this);
}

void *re::ecs2::allocInfo_RemoteEffectsSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8ACD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8ACD8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8AD60, "RemoteEffectsSystem");
    __cxa_guard_release(&qword_26AF8ACD8);
  }
  return &unk_26AF8AD60;
}

void re::ecs2::initInfo_RemoteEffectsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x4B4C52106E7F5E16;
  v5[1] = "RemoteEffectsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_RemoteEffectsSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RemoteEffectsSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::RemoteEffectsSystem>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::RemoteEffectsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::RemoteEffectsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::RemoteEffectsSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RemoteEffectsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::RemoteEffectsSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1, 1);
  *uint64_t v3 = &unk_26E7031F8;
  v3[13] = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::RemoteEffectsSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::RemoteEffectsSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1, 1);
  *uint64_t v1 = &unk_26E7031F8;
  v1[13] = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RemoteEffectsSystem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RemoteEffectsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsSystem>, this);
}

void re::ecs2::RemoteEffectsSystem::~RemoteEffectsSystem(re::ecs2::RemoteEffectsSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::RemoteEffectsSystem::typeInfo(re::ecs2::RemoteEffectsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsSystem>, 0);
}

void ___ZN12_GLOBAL__N_131remoteEffectsSystemDebugEnabledEv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::BOOLValue((re::Defaults *)"RemoteEffectsDebugEnabled", a2, v3);
  if (v3[0]) {
    char v2 = v3[1];
  }
  else {
    char v2 = 0;
  }
  byte_26AF8ACC1 = v2;
}

void re::ecs2::entityAndDescendantsRecurse(uint64_t a1, unint64_t *a2, unsigned char *a3, void *a4)
{
  int v15 = a4;
  if (a1)
  {
    v15[2](v15, a1, a3);
    unint64_t v7 = *a2 + 1;
    *a2 = v7;
    if (!*a3 && v7 <= 0x80)
    {
      uint64_t v8 = *(void *)(a1 + 328);
      if (v8)
      {
        unint64_t v9 = 0;
        uint64_t v10 = a1 + 304;
        do
        {
          uint64_t v11 = *(void *)re::ecs2::EntityComponentCollection::operator[](v10, v9);
          if (v11)
          {
            unint64_t v12 = (void *)(v11 + 8);
            id v13 = (id)(v11 + 8);
            re::ecs2::entityAndDescendantsRecurse(v11, a2, a3, v15);
            int v14 = *a3;

            if (v14) {
              break;
            }
          }
          else
          {

            if (*a3) {
              break;
            }
          }
          ++v9;
        }
        while (v8 != v9);
      }
    }
  }
}

void re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  char v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    char v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7032A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7032A0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::make::shared::object<re::ecs2::RemoteEffectAnimationNode>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 88, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(void *)(v3 + 8objc_initWeak(location, 0) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E7032F8;
  *(void *)a1 = v3;
}

void re::ecs2::RemoteEffectAnimationNode::~RemoteEffectAnimationNode(re::ecs2::RemoteEffectAnimationNode *this)
{
  *(void *)this = &unk_26E7032F8;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E7032F8;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t *a4, const void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::init((uint64_t)v30, v13, v12);
          long long v15 = *(_OWORD *)v30;
          *(_OWORD *)uint64_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v30[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v30[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 16);
              }
              ++v21;
              v22 += 1536;
            }
            while (v21 < v20);
          }
          re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 1536 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 1536 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 1536 * v9 + 8) = v24 | 0x80000000;
  uint64_t v26 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + 1536 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 1536 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 1536 * v9) = a3;
  uint64_t v27 = *a4;
  *(void *)(*(void *)(a1 + 16) + 1536 * v9 + 16) = *a4;
  if (v27) {
    id v28 = (id)(v27 + 8);
  }
  double result = memcpy((void *)(*(void *)(a1 + 16) + 1536 * v9 + 32), a5, 0x5E0uLL);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 26) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 1536 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

re::MaterialParameterBlock *re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>@<X0>(re *a1@<X0>, re::MaterialParameterBlock **a2@<X8>)
{
  unint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 1008, 8);
  double result = re::MaterialParameterBlock::MaterialParameterBlock(v5, *(re::RenderManager **)a1);
  *a2 = result;
  return result;
}

void re::ecs2::RemoteEffectHoverState::~RemoteEffectHoverState(re::ecs2::RemoteEffectHoverState *this)
{
  *(void *)this = &unk_26E703340;
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {

    *((void *)this + 22) = 0;
  }
  uint64_t v3 = *((void *)this + 17);
  if (v3)
  {

    *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26E703340;
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {

    *((void *)this + 22) = 0;
  }
  uint64_t v3 = *((void *)this + 17);
  if (v3)
  {

    *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 17) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

id re::internal::defaultRetain<re::ecs2::RemoteEffectsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RemoteEffectsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_DeferredActivationComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_274, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_274))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8ADF0, "DeferredActivationComponent");
    __cxa_guard_release(&_MergedGlobals_274);
  }
  return &unk_26AF8ADF0;
}

void re::ecs2::initInfo_DeferredActivationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x1A4B35CD4BE33410;
  v9[1] = "DeferredActivationComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8ADE8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8ADE8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8ADE0 = v7;
      __cxa_guard_release(&qword_26AF8ADE8);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8ADE0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DeferredActivationComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::DeferredActivationComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::DeferredActivationComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DeferredActivationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::DeferredActivationComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F3AF0;
  *(void *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::DeferredActivationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::DeferredActivationComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F3AF0;
  *(void *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DeferredActivationComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DeferredActivationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DeferredActivationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DeferredActivationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DeferredActivationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DeferredActivationComponent>, this);
}

void *re::ecs2::allocInfo_RayCastSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_275, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_275))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8AE70, "RayCastSystem");
    __cxa_guard_release(&_MergedGlobals_275);
  }
  return &unk_26AF8AE70;
}

void re::ecs2::initInfo_RayCastSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x47E5E3E009048BF0;
  v5[1] = "RayCastSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_RayCastSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayCastSystem>;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::RayCastSystem>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::RayCastSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::RayCastSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::RayCastSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RayCastSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::RayCastSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  re::ecs2::System::System((uint64_t)a3, 1);
  *uint64_t v3 = &unk_26E703388;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::RayCastSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::RayCastSystem>(_OWORD *a1)
{
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  re::ecs2::System::System((uint64_t)a1, 1);
  *uint64_t v1 = &unk_26E703388;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::RayCastSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RayCastSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayCastSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayCastSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayCastSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayCastSystem>, this);
}

uint64_t re::ecs2::RayCastSystem::willAddSystemToECSService(re::ecs2::RayCastSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v2);
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = result;
  return result;
}

uint64_t re::ecs2::RayCastSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  return this;
}

uint64_t re::ecs2::RayCastSystem::update(uint64_t result, uint64_t a2)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v85);
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    long long v4 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v84, 3049, v3);
    uint64_t v57 = v3;
    if (*(void *)(v3 + 104))
    {
      uint64_t v5 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6)
        {
          uint64_t v7 = *(float32x4_t ***)(v5 + 40);
          long long v8 = &v7[v6];
          uint64_t v56 = v2;
          uint64_t v58 = v8;
          do
          {
            signed int v9 = *v7;
            uint64_t v10 = (*v7)[1].i64[0];
            if ((*(unsigned char *)(v10 + 288) & 1) != 0 && v9[5].i32[0])
            {
              re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)(*v7)[1].i64[0], (const re::ecs2::Entity *)1, &v80);
              float32x4_t v11 = v9[2];
              float32x4_t v12 = vaddq_f32(v83, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v80, v11.f32[0]), v81, *(float32x2_t *)v11.f32, 1), v82, v11, 2));
              float32x4_t v64 = vdivq_f32(v12, (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3));
              float32x4_t v13 = vaddq_f32(v11, vmulq_n_f32(v9[3], v9[4].f32[0]));
              float32x4_t v14 = vaddq_f32(v83, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v80, v13.f32[0]), v81, *(float32x2_t *)v13.f32, 1), v82, v13, 2));
              float32x4_t v63 = vdivq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3));
              v74[0] = 0;
              v74[1] = 0;
              int v75 = 1;
              uint64_t v77 = 0;
              uint64_t v78 = 0;
              uint64_t v76 = 0;
              int v79 = 0;
              float32x4_t v15 = vsubq_f32(v63, v64);
              float32x4_t v16 = vmulq_f32(v15, v15);
              if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]) >= 0.00001)
              {
                uint64_t v17 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v57 + 104) + 32))(*(void *)(v57 + 104), v2);
                if (v17)
                {
                  uint64_t v18 = v17;
                  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v65, v17, 0);
                  uint64_t v72 = v65;
                  uint64_t v73 = v66;
                  if (v18 != v65 || (unsigned __int16)v66 != 0xFFFFLL || (v66 & 0xFFFF0000) != 0xFFFF0000)
                  {
                    float32x4_t v61 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2);
                    float32x4_t v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1);
                    float32x4_t v59 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2);
                    float32x4_t v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1);
                    do
                    {
                      uint64_t v19 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v72);
                      if (*(void *)(v19 + 8))
                      {
                        unint64_t v20 = (float32x4_t *)v19;
                        float32x4_t v21 = *(float32x4_t *)(v19 + 176);
                        float32x4_t v22 = *(float32x4_t *)(v19 + 192);
                        float32x4_t v23 = *(float32x4_t *)(v19 + 208);
                        float32x4_t v24 = *(float32x4_t *)(v19 + 224);
                        float32x4_t v25 = vaddq_f32(v24, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, v64.f32[0]), v62, v22), v61, v23));
                        float32x4_t v26 = vdivq_f32(v25, (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 3));
                        float32x4_t v27 = vaddq_f32(v24, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, v63.f32[0]), v60, v22), v59, v23));
                        float32x4_t v28 = vsubq_f32(vdivq_f32(v27, (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3)), v26);
                        float32x4_t v29 = vmulq_f32(v28, v28);
                        v29.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u32[0];
                        *(float32x2_t *)v24.f32 = vrsqrte_f32((float32x2_t)v29.u32[0]);
                        *(float32x2_t *)v24.f32 = vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32)));
                        v86[0] = v26;
                        v86[1] = vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32))).f32[0]);
                        float v87 = sqrtf(v29.f32[0]);
                        uint64_t v65 = 0;
                        uint64_t v66 = 0;
                        int v67 = 1;
                        uint64_t v69 = 0;
                        uint64_t v70 = 0;
                        uint64_t v68 = 0;
                        int v71 = 0;
                        (*(void (**)(void, _OWORD *, float32x4_t *, uint64_t *))(**(void **)(v20->i64[1] + 56)
                                                                                           + 56))(*(void *)(v20->i64[1] + 56), v86, v9 + 6, &v65);
                        uint64_t v30 = v70;
                        if (v70)
                        {
                          unint64_t v31 = 0;
                          do
                          {
                            unint64_t v32 = re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)&v65, v31);
                            float32x4_t v33 = vaddq_f32(v20[10], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20[7], COERCE_FLOAT(*(_OWORD *)(v32 + 16))), v20[8], *(float32x2_t *)(v32 + 16), 1), v20[9], *(float32x4_t *)(v32 + 16), 2));
                            *(float32x4_t *)(v32 + 16) = vdivq_f32(v33, (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 3));
                            simd_float3x3 v89 = __invert_f3(*(simd_float3x3 *)v20[7].f32);
                            int32x4_t v34 = vzip2q_s32((int32x4_t)v89.columns[0], (int32x4_t)v89.columns[2]);
                            float32x4_t v35 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v89.columns[0], (int32x4_t)v89.columns[2]), (int32x4_t)v89.columns[1]);
                            v89.columns[0] = (simd_float3)vtrn2q_s32((int32x4_t)v89.columns[0], (int32x4_t)v89.columns[1]);
                            v89.columns[0].i32[2] = v89.columns[2].i32[1];
                            *(float32x4_t *)(v32 + 32) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(*(_OWORD *)(v32 + 32))), (float32x4_t)v89.columns[0], *(float32x2_t *)(v32 + 32), 1), (float32x4_t)vzip1q_s32(v34, vdupq_laneq_s32((int32x4_t)v89.columns[1], 2)), *(float32x4_t *)(v32 + 32), 2);
                            BOOL v36 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::addUninitialized((uint64_t)v74);
                            *BOOL v36 = *(_OWORD *)v32;
                            long long v37 = *(_OWORD *)(v32 + 64);
                            long long v39 = *(_OWORD *)(v32 + 16);
                            long long v38 = *(_OWORD *)(v32 + 32);
                            uint64_t v36[3] = *(_OWORD *)(v32 + 48);
                            v36[4] = v37;
                            v36[1] = v39;
                            int v36[2] = v38;
                            ++v31;
                          }
                          while (v30 != v31);
                        }
                        re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)&v65);
                        if (v65 && (v67 & 1) == 0) {
                          (*(void (**)(void))(*(void *)v65 + 40))();
                        }
                      }
                      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v72);
                    }
                    while (v72 != v18 || (unsigned __int16)v73 != 0xFFFF || WORD1(v73) != 0xFFFF);
                  }
                  uint64_t v2 = v56;
                }
              }
              uint64_t v42 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
              long long v43 = (float32x4_t *)v42;
              if (v78)
              {
                unint64_t v44 = re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)v74, 0);
                uint64_t v45 = *(void *)(*(void *)v44 + 40);
                uint32x4_t v46 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v43[2], *(float32x4_t *)(v44 + 16)));
                v46.i32[3] = v46.i32[2];
                if ((vmaxvq_u32(v46) & 0x80000000) != 0)
                {
                  float32x4_t v43[2] = *(float32x4_t *)(v44 + 16);
                  int v47 = 1;
                }
                else
                {
                  int v47 = 0;
                }
                float32x4_t v51 = *(float32x4_t *)(v44 + 32);
                uint64_t v50 = (float32x4_t *)(v44 + 32);
                uint32x4_t v52 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v43[3], v51));
                v52.i32[3] = v52.i32[2];
                if ((vmaxvq_u32(v52) & 0x80000000) != 0)
                {
                  v43[3] = *v50;
                  int v47 = 1;
                }
                uint64_t v53 = v43[4].i64[0];
                if (!v53) {
                  goto LABEL_42;
                }
                uint64_t v54 = v45 + 8;
                if (!v45) {
                  uint64_t v54 = 0;
                }
                if (v53 != v54)
                {
LABEL_42:
                  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)&v43[4], v45);
                  int v47 = 1;
                }
                BOOL v48 = v47 != 0;
              }
              else
              {
                *(void *)(v42 + 32) = 0x7FC000007FC00000;
                *(void *)(v42 + 4objc_initWeak(location, 0) = 2143289344;
                *(void *)(v42 + 48) = 0x7FC000007FC00000;
                *(void *)(v42 + 56) = 2143289344;
                BOOL v48 = 1;
                long long v49 = (void *)(v42 + 64);
                if (!re::ecs2::EntityHandle::isNull((id *)(v42 + 64)))
                {
                  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)&v43[4]);
                  objc_destroyWeak((id *)&v43[4]);
                  *long long v49 = 0;
                  BOOL v48 = 1;
                }
              }
              unsigned int v55 = *(re::ecs2::NetworkComponent **)(v10 + 200);
              if (v48 && v55) {
                re::ecs2::NetworkComponent::markDirty(v55, (const re::ecs2::Component *)v43);
              }
              if (v9[5].i32[0] == 1)
              {
                v9[5].i32[0] = 0;
                if (v55) {
                  re::ecs2::NetworkComponent::markDirty(v55, (const re::ecs2::Component *)v43);
                }
              }
              re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v74);
              if (v74[0])
              {
                if ((v75 & 1) == 0) {
                  (*(void (**)(void))(*(void *)v74[0] + 40))();
                }
              }
              long long v8 = v58;
            }
            ++v7;
          }
          while (v7 != v8);
        }
      }
    }
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v84);
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)121>::end((uint64_t)v85);
  }
  return result;
}

void re::ecs2::RayCastSystem::~RayCastSystem(re::ecs2::RayCastSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::RayCastSystem::typeInfo(re::ecs2::RayCastSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayCastSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayCastSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayCastSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayCastSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::RayCastSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RayCastSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_AudioLibraryComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8AEF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8AEF0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8AF68, "AudioLibraryComponent");
    __cxa_guard_release(&qword_26AF8AEF0);
  }
  return &unk_26AF8AF68;
}

void re::ecs2::initInfo_AudioLibraryComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v12[0] = 0xFBB6D340A487FCB0;
  v12[1] = "AudioLibraryComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8AEF8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8AEF8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8AF08 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v8, v9);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "resources";
      *(void *)(v10 + 16) = &qword_26AF8AF18;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8AF10 = v10;
      __cxa_guard_release(&qword_26AF8AEF8);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8AF08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioLibraryComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::AudioLibraryComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::AudioLibraryComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioLibraryComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8AF00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8AF00))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF8AF18);
    qword_26AF8AF18 = (uint64_t)&unk_26E703410;
    __cxa_guard_release(&qword_26AF8AF00);
  }
  if ((_MergedGlobals_276 & 1) == 0)
  {
    uint64_t v2 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    long long v4 = re::introspect_AssetHandle((re *)1, v3);
    if ((_MergedGlobals_276 & 1) == 0)
    {
      uint64_t v5 = (uint64_t)v4;
      _MergedGlobals_276 = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8AF18, 0);
      qword_26AF8AF28 = 0x3000000007;
      dword_26AF8AF30 = v6;
      word_26AF8AF34 = 0;
      *(void *)&xmmword_26AF8AF38 = 0;
      *((void *)&xmmword_26AF8AF38 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      qword_26AF8AF48 = (uint64_t)v2;
      unk_26AF8AF50 = 0;
      qword_26AF8AF58 = v5;
      unk_26AF8AF60 = 0;
      qword_26AF8AF18 = (uint64_t)&unk_26E703410;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF8AF18, (const re::IntrospectionBase *)&v25);
      if (v26) {
        signed int v9 = v27;
      }
      else {
        signed int v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = v2[2];
      long long v20 = *(_OWORD *)(v5 + 32);
      long long v21 = v10;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        float32x4_t v26 = "_CompareFunc";
        long long v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          float32x4_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15 {
          || (float32x4_t v16 = *v31,
        }
              uint64_t v25 = v14,
              float32x4_t v26 = v16,
              LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = -1,
              (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF8AF38 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::AudioLibraryComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E8160;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 68) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioLibraryComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AudioLibraryComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E8160;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 68) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioLibraryComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioLibraryComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioLibraryComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioLibraryComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioLibraryComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioLibraryComponent>, this);
}

void re::ecs2::AudioLibraryComponent::registerAudioAsset(uint64_t a1, const re::AssetHandle *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v22, a3);
  unint64_t v7 = v6;
  if (!*(void *)(a1 + 32))
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 56);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 40) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v11 = *(unsigned int *)(a1 + 68);
    if (v11 == 0x7FFFFFFF)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 64);
      int v12 = v11;
      if (v11 == *(_DWORD *)(a1 + 56))
      {
        re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1 + 32, 2 * *(_DWORD *)(a1 + 60));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 56);
        int v12 = *(_DWORD *)(a1 + 64);
      }
      *(_DWORD *)(a1 + 64) = v12 + 1;
      uint64_t v13 = *(void *)(a1 + 48);
      int v14 = *(_DWORD *)(v13 + 72 * v11 + 8);
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 48);
      int v14 = *(_DWORD *)(v13 + 72 * v11 + 8);
      *(_DWORD *)(a1 + 68) = v14 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 72 * v11 + 8) = v14 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 48) + 72 * v11 + 8) = *(_DWORD *)(*(void *)(a1 + 48) + 72 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 40) + 4 * v8);
    *(void *)(*(void *)(a1 + 48) + 72 * v1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 48) + 72 * v11 + 16), (const re::DynamicString *)a3);
    float32x4_t v15 = re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 48) + 72 * v11 + 48), a2);
    *(_DWORD *)(*(void *)(a1 + 40) + 4 * v8) = v11;
    ++*(_DWORD *)(a1 + 60);
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  while (!re::DynamicString::operator==(v10 + 72 * v9 + 16, a3))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 72 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 72 * v9 + 48));
  float32x4_t v15 = re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 48) + 72 * v9 + 48), a2);
LABEL_14:
  ++*(_DWORD *)(a1 + 72);
  float32x4_t v16 = *re::audioLogObjects(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = v16;
    uint64_t v18 = re::AssetHandle::assetInfo(a2);
    long long v19 = (char *)v18[18];
    if ((v18[17] & 1) == 0) {
      long long v19 = (char *)v18 + 137;
    }
    if (*(unsigned char *)(a3 + 8)) {
      uint64_t v20 = *(void *)(a3 + 16);
    }
    else {
      uint64_t v20 = a3 + 9;
    }
    uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 296);
    int v22 = 136315650;
    long long v23 = v19;
    __int16 v24 = 2080;
    uint64_t v25 = v20;
    __int16 v26 = 2048;
    uint64_t v27 = v21;
    _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_INFO, "[CoreRE] [AudioLibraryComponent] registered asset='%s' with name %s (entityID=%llu).", (uint8_t *)&v22, 0x20u);
  }
}

void re::ecs2::AudioLibraryComponent::unregisterAudioAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, a2);
  if (*(void *)(a1 + 32))
  {
    unint64_t v5 = v4 % *(unsigned int *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      unint64_t v4 = re::DynamicString::operator==(v8 + 72 * v7 + 16, a2);
      if (v4)
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 72 * v7 + 8) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 48) + 72 * v7));
        *(_DWORD *)(*(void *)(a1 + 48) + 72 * v7 + 8) = *(_DWORD *)(*(void *)(a1 + 48) + 72 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 68);
        --*(_DWORD *)(a1 + 60);
        int v11 = *(_DWORD *)(a1 + 72) + 1;
        *(_DWORD *)(a1 + 68) = v7;
        *(_DWORD *)(a1 + 72) = v11;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v7;
          int v10 = *(_DWORD *)(v8 + 72 * v7 + 8);
          uint64_t v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          unint64_t v4 = re::DynamicString::operator==(v8 + 72 * v7 + 16, a2);
          if (v4)
          {
            *(_DWORD *)(v8 + 72 * v9 + 8) = *(_DWORD *)(v8 + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 72 * v7 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  int v12 = *re::audioLogObjects((re *)v4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(a2 + 8)) {
      uint64_t v13 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v13 = a2 + 9;
    }
    uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 296);
    int v15 = 136315394;
    uint64_t v16 = v13;
    __int16 v17 = 2048;
    uint64_t v18 = v14;
    _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_INFO, "[CoreRE] [AudioLibraryComponent] unregistered asset with name %s (entityID=%llu).", (uint8_t *)&v15, 0x16u);
  }
}

const re::AssetHandle *re::ecs2::AudioLibraryComponent::getAsset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, re::AssetHandle *a3@<X8>)
{
  double result = (const re::AssetHandle *)re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a1 + 32, a2);
  if (result)
  {
    double result = re::AssetHandle::AssetHandle(a3, result);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(unsigned char *)a3 = 0;
  }
  *((unsigned char *)a3 + 24) = v5;
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 72 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 72 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 72 * v5 + 48;
}

void *re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  memset(v10, 0, sizeof(v10));
  char v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 18;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 72 * v10 + 16, *(void *)(a2 + 16) + 72 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 72 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&char v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v1objc_initWeak(location, 0) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 72 * v10 + 16), a4);
  uint64_t v14 = (void *)(*(void *)(a1 + 16) + 72 * v10);
  void v14[6] = 0;
  v14[7] = 0;
  v14[8] = 0;
  v14[7] = a5[1];
  a5[1] = 0;
  uint64_t v15 = v14[6];
  void v14[6] = 0;
  void v14[6] = *a5;
  *a5 = v15;
  uint64_t v16 = v14[8];
  v14[8] = a5[2];
  a5[2] = v16;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 72;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4objc_initWeak(location, 0) = v5;
  }
}

uint64_t re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, void *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v18, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 72 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 72 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 72 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v14 = (void *)(v10 + 72 * v9);
  uint64_t v15 = v14[7];
  v14[7] = a3[1];
  a3[1] = v15;
  uint64_t v16 = v14[6];
  void v14[6] = 0;
  void v14[6] = *a3;
  *a3 = v16;
  uint64_t v17 = v14[8];
  v14[8] = a3[2];
  a3[2] = v17;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 72 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 72 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 18;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(vre::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 72 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 72 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::ecs2::allocInfo_SpatialSceneClassificationComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8AFE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8AFE8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B008, "SpatialSceneClassificationComponent");
    __cxa_guard_release(&qword_26AF8AFE8);
  }
  return &unk_26AF8B008;
}

void re::ecs2::initInfo_SpatialSceneClassificationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x70160EC3AACD711ELL;
  v17[1] = "SpatialSceneClassificationComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_277, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_277);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4objc_initWeak(location, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8AFF0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      unsigned int v10 = re::introspect_SpatialSceneClassificationType((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_spatialSceneClassification";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000002;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8AFF8 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::IntrospectionInfo<unsigned char [16]>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "m_spatialSceneRoomIdentifier";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1A00000003;
      *(_DWORD *)(v15 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8B000 = v15;
      __cxa_guard_release(&_MergedGlobals_277);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8AFF0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SpatialSceneClassificationComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::SpatialSceneClassificationComponent>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::SpatialSceneClassificationComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SpatialSceneClassificationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::internal::defaultConstruct<re::ecs2::SpatialSceneClassificationComponent>(int a1, int a2, ArcSharedObject *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E7034B0;
  *(void *)(v3 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *(_DWORD *)(v3 + 4objc_initWeak(location, 0) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SpatialSceneClassificationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SpatialSceneClassificationComponent>(ArcSharedObject *a1)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E7034B0;
  *(void *)(v1 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *(_DWORD *)(v1 + 4objc_initWeak(location, 0) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SpatialSceneClassificationComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SpatialSceneClassificationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SpatialSceneClassificationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SpatialSceneClassificationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SpatialSceneClassificationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SpatialSceneClassificationComponent>, this);
}

void re::ecs2::SpatialSceneClassificationComponent::setSpatialSceneClassification(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 25);
    v5[0] = 67109376;
    v5[1] = v4;
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl(&dword_233120000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [SpatialScene] SpatialSceneClassificationComponent: Classification changed from [%hhu] -> [%hhu].", (uint8_t *)v5, 0xEu);
  }
  *(unsigned char *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = a2;
  *(unsigned char *)(a1 + 42) = 0;
}

void re::ecs2::SpatialSceneClassificationComponent::setSpatialSceneRoomIdentifier(re::ecs2::SpatialSceneClassificationComponent *this, const unsigned __int8 *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  memset(out, 0, 37);
  int v4 = (const unsigned __int8 *)this + 26;
  uuid_unparse((const unsigned __int8 *)this + 26, out);
  *(_OWORD *)((char *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 26) = *(_OWORD *)a2;
  memset(v9, 0, 37);
  uuid_unparse(v4, v9);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    __int16 v6 = out;
    __int16 v7 = 2080;
    uint64_t v8 = v9;
    _os_log_impl(&dword_233120000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [SpatialScene] SpatialSceneClassificationComponent: Room UUID changed from [%s] -> [%s]", (uint8_t *)&v5, 0x16u);
  }
  *((unsigned char *)this + 4re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0;
}

void re::ecs2::SpatialSceneClassificationComponent::~SpatialSceneClassificationComponent(re::ecs2::SpatialSceneClassificationComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::ecs2::MeshOffsetsAttributes::add(re::ecs2::MeshOffsetsAttributes *this, const re::MeshAsset *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *((void *)a2 + 55);
  if (v4)
  {
    if (*((void *)a2 + 47) <= (unint64_t)a3)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      uint64_t v8 = re::DataArray<re::MeshInstance>::get(v4 + 72, *(void *)(*((void *)a2 + 49) + 8 * a3));
      uint64_t v9 = re::DataArray<re::MeshModel>::get(*((void *)a2 + 55) + 8, *(void *)(v8 + 16));
      if (*(void *)(v9 + 56) > (unint64_t)a4)
      {
        int v10 = *(_DWORD *)(*(void *)(v9 + 64) + 560 * a4 + 468);
        re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize(this, *((void *)this + 2) + 1);
        uint64_t v11 = *((void *)this + 4) + 192 * *((void *)this + 2);
        re::DynamicArray<float>::resize(v11 - 192, (3 * v10));
        *(_DWORD *)(v11 - 16) = 0;
        *(void *)&double result = 1065353216;
        *(_OWORD *)(v11 - 144) = xmmword_23435FD50;
        *(_OWORD *)(v11 - 128) = xmmword_23435FD60;
        *(_OWORD *)(v11 - std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = xmmword_23435FD80;
        *(_OWORD *)(v11 - 96) = xmmword_23435FBB0;
        *(_OWORD *)(v11 - 8objc_initWeak(location, 0) = xmmword_23435FD50;
        *(_OWORD *)(v11 - 64) = xmmword_23435FD60;
        *(_OWORD *)(v11 - 48) = xmmword_23435FD80;
        *(_OWORD *)(v11 - 32) = xmmword_23435FBB0;
        return result;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void *re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 192 * a2;
    unint64_t v9 = a2;
    do
    {
      double result = (void *)re::DynamicArray<unsigned long>::deinit(v3[4] + v8);
      ++v9;
      v8 += 192;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      double result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 192 * v4 + 176;
      do
      {
        __int16 v7 = (_DWORD *)(v3[4] + v6);
        *((void *)v7 - 18) = 0;
        *((void *)v7 - 2re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
        *((void *)v7 - re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
        *((void *)v7 - 22) = 0;
        *(v7 - 38) = 0;
        *((_OWORD *)v7 - 8) = xmmword_23435FD50;
        *((_OWORD *)v7 - re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = xmmword_23435FD60;
        *((_OWORD *)v7 - 6) = xmmword_23435FD80;
        *((_OWORD *)v7 - 5) = xmmword_23435FBB0;
        *((_OWORD *)v7 - 4) = xmmword_23435FD50;
        *((_OWORD *)v7 - re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = xmmword_23435FD60;
        *((_OWORD *)v7 - 2) = xmmword_23435FD80;
        *((_OWORD *)v7 - re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = xmmword_23435FBB0;
        v6 += 192;
        _DWORD *v7 = 0;
        --v5;
      }
      while (v5);
    }
  }
  char v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(re::AssetHandle *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    unint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        __int16 v7 = (char *)v6[18];
      }
      else {
        __int16 v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      unint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

void re::ecs2::MeshOffsetsComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v14[5] = *MEMORY[0x263EF8340];
  int v8 = (id *)(a1 + 160);
  if (a2) {
    unint64_t v9 = (void *)(a2 + 8);
  }
  else {
    unint64_t v9 = 0;
  }
  inited = (re *)objc_initWeak(&location, v9);
  memset(v14, 0, 24);
  void v14[3] = re::globalAllocators(inited)[2];
  void v14[4] = 0;
  re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v14);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v14);
  objc_destroyWeak(&location);
  if (a5)
  {
    uint64_t v11 = 168 * a5;
    uint64_t v12 = (void *)(a4 + 104);
    do
    {
      ++*((unsigned char *)v12 - 94);
      void *v12 = 0;
      v12 += 21;
      v11 -= 168;
    }
    while (v11);
  }
}

re::ecs2::MeshOffsetsComponentStateImpl *re::ecs2::MeshOffsetsComponentStateImpl::MeshOffsetsComponentStateImpl(re::ecs2::MeshOffsetsComponentStateImpl *this)
{
  v6[3] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E703538;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = 0;
  *(_OWORD *)((char *)this + 4objc_initWeak(location, 0) = 0u;
  uint64_t v2 = (uint64_t *)((char *)this + 40);
  v6[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[1] = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v6[2] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[0] = v6;
  v5[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::FixedArray((_anonymous_namespace_ *)v4, (uint64_t)v5);
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(v2, v4);
  if (v4[0] && v4[1]) {
    (*(void (**)(void))(*(void *)v4[0] + 40))();
  }
  return this;
}

uint64_t re::ecs2::MeshOffsetsComponentStateImpl::dependsOnComponents(re::ecs2::MeshOffsetsComponentStateImpl *this)
{
  return *((void *)this + 7);
}

BOOL re::ecs2::MeshOffsetsComponentStateImpl::processDirtyComponents(void *a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1[1];
  if (v9) {
    BOOL v10 = (*(unsigned char *)(v9 + 424) & 0x10) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = a1[4];
  if (v11) {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 104))(v11);
  }
  else {
    uint64_t v12 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v44, a5, 0);
  unint64_t v13 = v44;
  unint64_t v14 = v45;
  unint64_t v44 = a4;
  unint64_t v45 = v13;
  unint64_t v46 = v14;
  uint64_t v15 = (unsigned __int16)v14;
  uint64_t v16 = v14 & 0xFFFF0000;
  if (v13 != a5 || v15 != 0xFFFF || v16 != 4294901760)
  {
    while (1)
    {
      uint64_t v19 = (uint64_t *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v45);
      uint64_t v20 = *v19;
      uint64_t v21 = *(void *)(*v19 + 16);
      uint64_t v22 = *(void *)(v21 + 184);
      long long v23 = *(void **)(*v19 + 168);
      if (v23)
      {
        if (v22)
        {
          BOOL v24 = *(void *)(v22 + 248) != *v23 || v12 == 0;
          if (!v24 && v23[1] == v12) {
            goto LABEL_40;
          }
          uint64_t v25 = *(void *)(v22 + 392);
          uint64_t v27 = *(void *)(v25 + 88);
          uint64_t v26 = *(void *)(v25 + 96);
        }
        else
        {
          uint64_t v27 = 0;
          uint64_t v26 = 0;
        }
        re::ecs2::MeshOffsetsComponent::resetDeformerInputs(*v19, *(void *)(a1[2] + 136), 0, v26, v27);
      }
      uint64_t v28 = *(void *)(v21 + 176);
      BOOL v29 = !v28 || v22 == 0;
      if (v29 || !*(void *)(v28 + 40)) {
        break;
      }
      if (!*(void *)(v20 + 80) && a1[3])
      {
        StringID v30 = re::globalAllocators((re *)v19);
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30[2] + 32))(v30[2], 40, 8);
        *(_OWORD *)uint64_t v31 = 0u;
        *(_OWORD *)(v31 + 16) = 0u;
        *(void *)(v31 + 32) = 0;
        re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((void *)v31, 0);
        ++*(_DWORD *)(v31 + 24);
        uint64_t v32 = a1[3];
        float32x4_t v33 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)v32 + 416))(&v42, v32, v31, v33, 0, 0, 0);
        long long v34 = *(_OWORD *)(v20 + 72);
        *(_OWORD *)(v20 + 72) = v42;
        long long v42 = v34;
        uint64_t v35 = *(void *)(v20 + 88);
        *(void *)(v20 + 88) = v43;
        uint64_t v43 = v35;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v42);
      }
      if (a1[2]) {
        int v36 = v10;
      }
      else {
        int v36 = 1;
      }
      unint64_t v37 = v44;
      unint64_t v38 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v45);
      long long v39 = (re::ecs2::ComponentBucketsBase *)a3[2];
      if (v36 == 1) {
        goto LABEL_38;
      }
      unint64_t v40 = a3[5];
LABEL_39:
      re::ecs2::ComponentBucketsBase::moveComponent(v39, v37, v38, v40);
LABEL_40:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v45);
      if (v45 == a5 && (unsigned __int16)v46 == 0xFFFF && WORD1(v46) == 0xFFFF) {
        return *(_DWORD *)(a5 + 40) != 0;
      }
    }
    unint64_t v37 = v44;
    unint64_t v38 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v45);
    long long v39 = (re::ecs2::ComponentBucketsBase *)a3[2];
LABEL_38:
    unint64_t v40 = a3[4];
    goto LABEL_39;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    BOOL v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::MeshOffsetsComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  uint64_t v108 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8);
  }
  else {
    uint64_t v100 = 0;
  }
  unint64_t v9 = a5;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  unint64_t v115 = a4;
  uint64_t v116 = *(void *)buf;
  uint64_t v117 = *(void *)&buf[8];
  if (*(void *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    unint64_t i = buf;
    do
    {
      uint64_t v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v116);
      unint64_t v14 = *(uint64_t **)v13;
      __n128 v107 = *(void **)(*(void *)v13 + 16);
      if (!*(void *)(*(void *)v13 + 80)) {
        goto LABEL_36;
      }
      uint64_t v15 = re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)(v14 + 9));
      if (!v15) {
        goto LABEL_36;
      }
      uint64_t v16 = v14[2];
      if (!v16) {
        goto LABEL_36;
      }
      uint64_t v17 = *(void *)(v16 + 176);
      if (!v17) {
        goto LABEL_36;
      }
      unint64_t v18 = v15;
      uint64_t v19 = (void *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v17 + 32));
      if (!v19) {
        goto LABEL_36;
      }
      uint64_t v20 = v19;
      if (!v19[55]) {
        goto LABEL_36;
      }
      unint64_t v6 = v19[49];
      unint64_t j = (uint8_t *)v19[47];
      uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v22)
      {
        uint64_t v23 = v22 + 216;
        unint64_t v6 = *(void *)(v22 + 208);
        unint64_t j = *(uint8_t **)(v22 + 192);
      }
      else
      {
        uint64_t v23 = (uint64_t)(v20 + 56);
      }
      uint64_t v24 = *(void *)(v18 + 16);
      float32x4_t v106 = (re::MeshNameMap *)v23;
      if (v24)
      {
        LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
        uint64_t v26 = *(unsigned __int8 **)(v18 + 32);
        unint64_t v9 = 40 * v24;
        unint64_t v5 = (unint64_t)&buf[8];
        do
        {
          re::MeshNameMap::meshInstancePartsForIdentifier(v23, v26, buf);
          unint64_t v25 = (v25 + *(_DWORD *)buf);
          re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&buf[8]);
          uint64_t v23 = (uint64_t)v106;
          v26 += 40;
          v9 -= 40;
        }
        while (v9);
      }
      else
      {
        unint64_t v25 = 0;
      }
      re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize(v14 + 4, v25);
      uint64_t v27 = *(void *)(v18 + 16);
      if (!v27) {
        goto LABEL_36;
      }
      int v109 = 0;
      uint64_t v28 = *(unsigned __int8 **)(v18 + 32);
      char v103 = &v28[40 * v27];
      do
      {
        uint64_t v104 = v28;
        re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v106, v28, &v129);
        if (!v129) {
          goto LABEL_35;
        }
        for (unint64_t i = 0; i != v129; ++i)
        {
          *(void *)CMTime buf = i;
          unint64_t v30 = (*(unsigned int (**)(uint64_t, uint8_t *))(*(void *)v134 + 16))(v134, buf);
          if ((unint64_t)j <= v30) {
            goto LABEL_101;
          }
          uint64_t v31 = j;
          unint64_t v18 = (unint64_t)&i[(void)v109];
          unint64_t v32 = v6;
          uint64_t v33 = re::DataArray<re::MeshInstance>::tryGet(v20[55] + 72, *(void *)(v6 + 8 * v30));
          uint64_t v34 = re::DataArray<re::MeshModel>::tryGet(v20[55] + 8, *(void *)(v33 + 16));
          unint64_t v9 = (v109 + i);
          unint64_t v6 = v14[6];
          if (v6 <= v9)
          {
LABEL_102:
            uint64_t v111 = 0;
            long long v122 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v135 = 136315906;
            *(void *)&v135[4] = "operator[]";
            __int16 v136 = 1024;
            int v137 = 789;
            __int16 v138 = 2048;
            unint64_t v139 = v9;
            __int16 v140 = 2048;
            unint64_t v141 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_103:
            uint64_t v111 = 0;
            long long v122 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            memset(buf, 0, sizeof(buf));
            unint64_t v51 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v135 = 136315906;
            *(void *)&v135[4] = "operator[]";
            __int16 v136 = 1024;
            int v137 = 476;
            __int16 v138 = 2048;
            unint64_t v139 = v6;
            __int16 v140 = 2048;
            unint64_t v141 = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_104:
            *(void *)float32x4_t v135 = 0;
            *((_OWORD *)i + 4) = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v129) = 136315906;
            *(void *)(i + 164) = "operator[]";
            __int16 v131 = 1024;
            *(_DWORD *)(i + 174) = 468;
            __int16 v132 = 2048;
            *(void *)(i + 18objc_initWeak(location, 0) = v51;
            __int16 v133 = 2048;
            *(void *)(i + 19objc_initWeak(location, 0) = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_105:
            re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v18);
            _os_crash();
            __break(1u);
LABEL_106:
            uint64_t v118 = 0;
            *((_OWORD *)i + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = 0u;
            *((_OWORD *)i + 14) = 0u;
            *((_OWORD *)i + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0u;
            *((_OWORD *)i + 12) = 0u;
            *((_OWORD *)i + 1objc_initWeak(location, 0) = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v135 = 136315906;
            *(void *)&v135[4] = "operator[]";
            __int16 v136 = 1024;
            int v137 = 468;
            __int16 v138 = 2048;
            unint64_t v139 = v5;
            __int16 v140 = 2048;
            unint64_t v141 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_107:
            *(void *)float32x4_t v135 = 0;
            *((_OWORD *)i + 4) = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            memset(buf, 0, sizeof(buf));
            unint64_t v66 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v129) = 136315906;
            *(void *)(i + 164) = "operator[]";
            __int16 v131 = 1024;
            *(_DWORD *)(i + 174) = 468;
            __int16 v132 = 2048;
            *(void *)(i + 18objc_initWeak(location, 0) = v5;
            __int16 v133 = 2048;
            *(void *)(i + 19objc_initWeak(location, 0) = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_108;
          }
          uint64_t v35 = v34;
          unint64_t v5 = v14[8];
          *(void *)CMTime buf = i;
          unint64_t v6 = (unsigned __int16)((unint64_t)(*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v134
                                                                                                  + 16))(v134, buf) >> 32);
          unint64_t v18 = *(void *)(v35 + 56);
          if (v18 <= v6) {
            goto LABEL_103;
          }
          re::DynamicArray<float>::resize(v5 + 192 * v9, (3 * *(_DWORD *)(*(void *)(v35 + 64) + 560 * v6 + 468)));
          unint64_t v6 = v32;
          unint64_t j = v31;
        }
        int v109 = (re::ecs2::MeshComponent *)(v109 + i);
        unint64_t i = buf;
LABEL_35:
        re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)v130);
        uint64_t v28 = v104 + 40;
      }
      while (v104 + 40 != v103);
LABEL_36:
      uint64_t v36 = re::AssetHandle::loadedAsset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)(v14 + 9));
      if (v36)
      {
        unint64_t v18 = v36;
        unint64_t v37 = (void *)v107[22];
        uint64_t v38 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v37 + 4)) + 448;
        long long v39 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v107 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v39) {
          uint64_t v40 = (uint64_t)v39 + 216;
        }
        else {
          uint64_t v40 = v38;
        }
        unint64_t v41 = v37[5];
        if (v41) {
          uint64_t v42 = *(void *)(v41 + 664);
        }
        else {
          uint64_t v42 = 0;
        }
        unint64_t v43 = v14[10];
        float32x4_t v110 = (re::ecs2::MeshComponent *)v37;
        if (v43) {
          uint64_t v44 = *(void *)(v43 + 664);
        }
        else {
          uint64_t v44 = 0;
        }
        unint64_t v45 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) >> 27));
        unint64_t v46 = v42 ^ (v45 >> 31) ^ v45;
        unint64_t v47 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27));
        uint64_t v48 = ((v46 << 6)
             - 0x61C8864680B583E9
             + (v46 >> 2)
             + ((*(void *)(v40 + 8)
               - 0x61C8864680B583E9
               + ((v44 ^ (v47 >> 31) ^ v47) << 6)
               + ((v44 ^ (v47 >> 31) ^ v47) >> 2)) ^ v44 ^ (v47 >> 31) ^ v47)) ^ v46;
        unint64_t v9 = (unint64_t)(v14 + 12);
        if (v14[13] != v48)
        {
          v14[13] = -1;
          re::FixedArray<CoreIKTransform>::deinit(v14 + 14);
          long long v49 = (_anonymous_namespace_ *)re::FixedArray<CoreIKTransform>::deinit(v14 + 17);
          uint64_t v50 = (uint64_t *)v14[12];
          if (!v50)
          {
            v14[13] = -1;
          }
          re::FixedArray<int>::init<>(v14 + 17, (uint64_t)v50, *(unsigned int *)(v40 + 216));
          if (!*(_DWORD *)(v40 + 216))
          {
LABEL_54:
            uint64_t v52 = *(void *)(v40 + 336);
            if (v52) {
              unint64_t v53 = *(unsigned int *)(*(void *)(v40 + 344) + 4 * v52 - 4);
            }
            else {
              unint64_t v53 = 0;
            }
            uint64_t v54 = *(void *)v9;
            *(_DWORD *)CMTime buf = -1;
            long long v39 = (re *)re::FixedArray<unsigned int>::init<int>(v14 + 14, v54, v53, buf);
            if (!*(void *)(v18 + 16)) {
              goto LABEL_65;
            }
            unint64_t v5 = 0;
            unint64_t i = 0;
            while (1)
            {
              re::MeshNameMap::meshInstancePartsForIdentifier(v40, (unsigned __int8 *)(*(void *)(v18 + 32) + 40 * i), &v129);
              if (!v129) {
                goto LABEL_64;
              }
              for (unint64_t j = 0; j != v129; ++j)
              {
                *(void *)CMTime buf = j;
                unsigned int v55 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v134 + 16))(v134, buf);
                int started = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v40, v55);
                *(void *)CMTime buf = j;
                unint64_t v6 = started
                   + (unsigned __int16)((unint64_t)(*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v134 + 16))(v134, buf) >> 32);
                unint64_t v57 = v14[15];
                if (v57 <= v6)
                {
                  uint64_t v111 = 0;
                  long long v122 = 0u;
                  long long v120 = 0u;
                  long long v121 = 0u;
                  memset(buf, 0, sizeof(buf));
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)float32x4_t v135 = 136315906;
                  *(void *)&v135[4] = "operator[]";
                  __int16 v136 = 1024;
                  int v137 = 468;
                  __int16 v138 = 2048;
                  unint64_t v139 = v6;
                  __int16 v140 = 2048;
                  unint64_t v141 = v57;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_101:
                  re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v30, j);
                  _os_crash();
                  __break(1u);
                  goto LABEL_102;
                }
                *(_DWORD *)(v14[16] + 4 * v6) = v5 + j;
              }
              unint64_t v5 = (v5 + j);
LABEL_64:
              long long v39 = (re *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)v130);
              if ((unint64_t)++i >= *(void *)(v18 + 16))
              {
LABEL_65:
                v14[13] = v48;
                unint64_t i = buf;
                goto LABEL_66;
              }
            }
          }
          unint64_t v6 = 0;
          unint64_t v51 = 0;
          while (1)
          {
            unint64_t v5 = v14[18];
            if (v5 <= v51) {
              goto LABEL_104;
            }
            *(_DWORD *)(v14[19] + 4 * v5re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v6;
            unint64_t v6 = re::MeshNameMap::meshPartInstanceCount((re::MeshNameMap *)v40, v51++) + v6;
            if (v51 >= *(unsigned int *)(v40 + 216)) {
              goto LABEL_54;
            }
          }
        }
LABEL_66:
        uint64_t v58 = (re::ecs2::MeshDeformationComponent *)v107[23];
        if (*((void *)v58 + 30))
        {
          if (v14[6])
          {
            float32x4_t v59 = (void *)v14[21];
            if (!v59 || *v59 != *((void *)v58 + 31))
            {
              uint64_t v60 = *((void *)v58 + 49);
              unint64_t v18 = *(void *)(v60 + 88);
              uint64_t v61 = *(void *)(v60 + 96);
              uint64_t v62 = *(void *)(a1 + 16);
              float32x4_t v63 = re::globalAllocators(v39);
              float32x4_t v64 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v63[2] + 32))(v63[2], 40, 8);
              *float32x4_t v64 = *((void *)v58 + 31);
              v64[1] = v100;
              v64[3] = 0;
              v64[4] = 0;
              v64[2] = 0;
              re::ecs2::MeshOffsetsComponent::resetDeformerInputs((uint64_t)v14, *(void *)(v62 + 136), v64, v61, v18);
              uint64_t v65 = (void *)v14[21];
              unint64_t v66 = *((void *)v58 + 32);
              v65[3] = v66;
              if (v66)
              {
                if (v66 < 0x19999999999999ALL)
                {
                  uint8_t v65[4] = v69;
                  if (v69)
                  {
                    unint64_t v71 = v66 - 1;
                    if (v66 != 1)
                    {
                      do
                      {
                        *(_DWORD *)(v69 + 128) = 0;
                        *(_OWORD *)(v69 + 96) = 0uLL;
                        *(_OWORD *)(v69 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0uLL;
                        *(_OWORD *)(v69 + 64) = 0uLL;
                        *(_OWORD *)(v69 + 8objc_initWeak(location, 0) = 0uLL;
                        *(_OWORD *)(v69 + 32) = 0uLL;
                        *(_OWORD *)(v69 + 48) = 0uLL;
                        *(_OWORD *)uint64_t v69 = 0uLL;
                        *(_OWORD *)(v69 + 16) = 0uLL;
                        *(void *)(v69 + 136) = 0;
                        *(void *)(v69 + 144) = 0;
                        v69 += 160;
                        --v71;
                      }
                      while (v71);
                    }
                    *(_DWORD *)(v69 + 128) = 0;
                    *(_OWORD *)(v69 + 96) = 0uLL;
                    *(_OWORD *)(v69 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = 0uLL;
                    *(_OWORD *)(v69 + 64) = 0uLL;
                    *(_OWORD *)(v69 + 8objc_initWeak(location, 0) = 0uLL;
                    *(_OWORD *)(v69 + 32) = 0uLL;
                    *(_OWORD *)(v69 + 48) = 0uLL;
                    *(_OWORD *)uint64_t v69 = 0uLL;
                    *(_OWORD *)(v69 + 16) = 0uLL;
                    *(void *)(v69 + 136) = 0;
                    *(void *)(v69 + 144) = 0;
                    goto LABEL_76;
                  }
LABEL_109:
                  re::internal::assertLog((re::internal *)4, v70, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
                  _os_crash();
                  __break(1u);
                }
LABEL_108:
                re::internal::assertLog((re::internal *)6, v68, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 160, v66);
                _os_crash();
                __break(1u);
                goto LABEL_109;
              }
LABEL_76:
              v114[0] = (char *)v58 + 232;
              v114[1] = 10;
              uint64_t v111 = (void *)((char *)v58 + 232);
              uint64_t v112 = 10;
              unsigned __int16 v113 = 0;
              while (1)
              {
                re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v114, (uint64_t)buf);
                if (HIDWORD(v112) == *(_DWORD *)&buf[12] && v113 == *(unsigned __int16 *)&buf[16]) {
                  break;
                }
                unint64_t v72 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v111);
                unsigned int v73 = re::DeformedMeshAssetsMap::deformedIndex((re::DeformedMeshAssetsMap *)(v14 + 12), v72, WORD2(v72));
                if (v73 != -1)
                {
                  unsigned int v74 = v73;
                  int v75 = (re *)re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v111);
                  unint64_t v5 = v75;
                  if (v18 <= v75) {
                    goto LABEL_105;
                  }
                  if (v14[6] <= (unint64_t)v74)
                  {
                    unint64_t v5 = *re::graphicsLogObjects(v75);
                    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v94 = v14[6];
                      *(_DWORD *)CMTime buf = 67109376;
                      *(_DWORD *)&uint8_t buf[4] = v74;
                      *(_WORD *)&uint8_t buf[8] = 2048;
                      *(void *)&buf[10] = v94;
                      _os_log_impl(&dword_233120000, (os_log_t)v5, OS_LOG_TYPE_DEFAULT, "Missing attributes for some parts of assigned mesh (deformed index %u, but only %zu attributes have been added). Skipping.", buf, 0x12u);
                    }
                  }
                  else
                  {
                    uint64_t v77 = v14[8] + 192 * v74;
                    long long v78 = *(_OWORD *)(v77 + 48);
                    long long v79 = *(_OWORD *)(v77 + 64);
                    long long v80 = *(_OWORD *)(v77 + 96);
                    long long v120 = *(_OWORD *)(v77 + 80);
                    long long v121 = v80;
                    *(_OWORD *)CMTime buf = v78;
                    *(_OWORD *)&buf[16] = v79;
                    long long v81 = *(_OWORD *)(v77 + 112);
                    long long v82 = *(_OWORD *)(v77 + 128);
                    long long v83 = *(_OWORD *)(v77 + 160);
                    long long v124 = *(_OWORD *)(v77 + 144);
                    long long v125 = v83;
                    long long v122 = v81;
                    long long v123 = v82;
                    int v126 = *(_DWORD *)(v77 + 176);
                    id v84 = objc_msgSend(*(id *)(v108 + 184), sel_newBufferWithBytes_length_options_, *(void *)(v77 + 32), 4 * *(void *)(v77 + 16), 0);
                    id v127 = v84;
                    LODWORD(v128) = 0;
                    HIDWORD(v128) = objc_msgSend(v84, sel_length);
                    unint64_t v6 = v65[3];
                    if (v6 <= v5) {
                      goto LABEL_106;
                    }
                    uint64_t v85 = v65[4] + 160 * v5;
                    *(_OWORD *)uint64_t v85 = *(_OWORD *)buf;
                    long long v86 = *(_OWORD *)&buf[16];
                    long long v87 = v120;
                    long long v88 = v122;
                    *(_OWORD *)(v85 + 48) = v121;
                    *(_OWORD *)(v85 + 64) = v88;
                    *(_OWORD *)(v85 + 16) = v86;
                    *(_OWORD *)(v85 + 32) = v87;
                    long long v89 = v123;
                    long long v90 = v124;
                    long long v91 = v125;
                    *(_DWORD *)(v85 + 128) = v126;
                    *(_OWORD *)(v85 + 96) = v90;
                    *(_OWORD *)(v85 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = v91;
                    *(_OWORD *)(v85 + 8objc_initWeak(location, 0) = v89;
                    NS::SharedPtr<MTL::Texture>::operator=((void **)(v85 + 136), &v127);
                    *(void *)(v85 + 144) = v128;
                    if (v127)
                    {

                      id v127 = 0;
                    }
                    if (v84) {

                    }
                    unint64_t v6 = v65[3];
                    if (v6 <= v5) {
                      goto LABEL_107;
                    }
                    uint64_t v92 = v65[4] + 160 * v5;
                    uint64_t v93 = v61 + 168 * v5;
                    ++*(unsigned char *)(v93 + 10);
                    *(void *)(v93 + 104) = v92;
                  }
                }
                re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v111);
              }
            }
            if (!re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(v58, v110)) {
              goto LABEL_96;
            }
            unint64_t v95 = v115;
            unint64_t v96 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v116);
            uint64_t v97 = (re::ecs2::ComponentBucketsBase *)a3[2];
            unint64_t v98 = a3[6];
          }
          else
          {
            unint64_t v95 = v115;
            unint64_t v96 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v116);
            uint64_t v97 = (re::ecs2::ComponentBucketsBase *)a3[2];
            unint64_t v98 = a3[4];
          }
          re::ecs2::ComponentBucketsBase::moveComponent(v97, v95, v96, v98);
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v14 + 9));
      }
LABEL_96:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v116);
    }
    while (v116 != a5 || (unsigned __int16)v117 != 0xFFFF || WORD1(v117) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::MeshOffsetsSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v44[0] = a2;
  v44[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v43);
  id WeakRetained = (id *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40));
  if (v5)
  {
    unint64_t v6 = WeakRetained;
    unint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    do
    {
      id WeakRetained = (id *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        unint64_t v9 = WeakRetained;
        uint64_t v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v10) {
          uint64_t v11 = *(void *)(v10 + 24);
        }
        else {
          uint64_t v11 = 0;
        }
        v7 += v11;
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    unint64_t v7 = 0;
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)WeakRetained);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v13 = re::profilerThreadContext(isStatisticCollectionEnabled);
    unint64_t v14 = *(int64x2_t **)(v13 + 152);
    if (v14)
    {
      unint64_t v15 = v14[456].u64[0];
      if (v15 >= v7) {
        unint64_t v15 = v7;
      }
      v14[456].i64[0] = v15;
      unint64_t v16 = v14[456].u64[1];
      if (v16 <= v7) {
        unint64_t v16 = v7;
      }
      v14[456].i64[1] = v16;
      int64x2_t v17 = vdupq_n_s64(1uLL);
      v17.i64[0] = v7;
      v14[457] = vaddq_s64(v14[457], v17);
      *(unsigned char *)(v13 + 184) = 0;
    }
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v42, 3069, a1);
  unint64_t v18 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v50, (uint64_t *)(a1 + 272));
  v53[2] = *(void *)(a1 + 312);
  int v46 = 1;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  v45[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v45, 0);
  v46 += 2;
  unint64_t v19 = *(void *)(a1 + 312);
  if ((v19 & 0x3F) != 0) {
    unint64_t v20 = (v19 >> 6) + 1;
  }
  else {
    unint64_t v20 = v19 >> 6;
  }
  uint64_t v49 = *(void *)(a1 + 312);
  uint64_t v54 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v45, v20, &v54);
  int v21 = *(_DWORD *)(a1 + 288);
  if (v21) {
    uint64_t v22 = (void *)(a1 + 296);
  }
  else {
    uint64_t v22 = *(void **)(a1 + 304);
  }
  uint64_t v23 = *(void *)(a1 + 280);
  uint64_t v24 = (uint64_t *)(a1 + 296);
  while (1)
  {
    uint64_t v25 = a1 + 296;
    if ((v21 & 1) == 0) {
      uint64_t v25 = *(void *)(a1 + 304);
    }
    if (v22 == (void *)(v25 + 8 * v23)) {
      break;
    }
    *v22++ = 0;
    int v21 = *(_DWORD *)(a1 + 288);
  }
  uint64_t v26 = v53;
  if ((v52 & 1) == 0) {
    uint64_t v26 = (unint64_t *)v53[1];
  }
  uint64_t v27 = v51;
  if ((v51 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v28 = 0;
    while (1)
    {
      unint64_t v30 = *v26++;
      unint64_t v29 = v30;
      if (v30) {
        break;
      }
      v28 -= 64;
      if (!--v27) {
        goto LABEL_42;
      }
    }
    unint64_t v31 = __clz(__rbit64(v29));
    if (v31 + 1 != v28)
    {
      unint64_t FirstBitSet = v31 - v28;
      do
      {
        uint64_t v33 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, FirstBitSet);
        if (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::update(v33, (uint64_t)v44))re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v45, FirstBitSet); {
        else
        }
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v45, FirstBitSet);
        unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v50, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_42:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 272, (uint64_t)v45);
  if (*(unsigned char *)(a1 + 336))
  {
    unint64_t v34 = *(void *)(a1 + 280);
    int v35 = *(_DWORD *)(a1 + 288);
    if (v34 >= 0xB)
    {
      if ((v35 & 1) == 0) {
        uint64_t v24 = *(uint64_t **)(a1 + 304);
      }
      uint64_t v36 = 8 * v34;
      while (!*v24)
      {
        ++v24;
        v36 -= 8;
        if (!v36) {
          goto LABEL_58;
        }
      }
      goto LABEL_56;
    }
    if ((v35 & 1) == 0) {
      uint64_t v24 = *(uint64_t **)(a1 + 304);
    }
    if (v34)
    {
      uint64_t v37 = 0;
      uint64_t v38 = 8 * v34;
      do
      {
        uint64_t v39 = *v24++;
        v37 |= v39;
        v38 -= 8;
      }
      while (v38);
      if (v37)
      {
LABEL_56:
        uint64_t v40 = *(re::ecs2::System **)(a1 + 320);
        if (!*((unsigned char *)v40 + 86)) {
          re::ecs2::System::queueToRun(v40, 0.0);
        }
      }
    }
  }
LABEL_58:
  if (v45[0] && (v46 & 1) == 0) {
    (*(void (**)(void))(*(void *)v45[0] + 40))();
  }
  if (v50 && (v52 & 1) == 0) {
    (*(void (**)(void))(*(void *)v50 + 40))();
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v42);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v43);
}

uint64_t re::ecs2::MeshOffsetsSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v29[0] = a3;
  v29[1] = a4;
  unint64_t v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v28);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    unint64_t v10 = v9 ? *(void *)(v9 + 24) : 0;
    uint64_t v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      unint64_t v12 = v11[456].u64[0];
      if (v12 >= v10) {
        unint64_t v12 = v10;
      }
      v11[456].i64[0] = v12;
      unint64_t v13 = v11[456].u64[1];
      if (v13 <= v10) {
        unint64_t v13 = v10;
      }
      v11[456].i64[1] = v13;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[457] = vaddq_s64(v11[457], v14);
      *(unsigned char *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v27, 3069, a1);
  uint64_t v30 = a2;
  unint64_t v15 = *(void *)(*(void *)(a1 + 168)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 160), &v30)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 272, v15);
  unint64_t v16 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, v15);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::update(v16, (uint64_t)v29)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 272, v15);
  }
  if (*(unsigned char *)(a1 + 336))
  {
    unint64_t v17 = *(void *)(a1 + 280);
    int v18 = *(_DWORD *)(a1 + 288);
    if (v17 >= 0xB)
    {
      if (v18) {
        unint64_t v19 = (void *)(a1 + 296);
      }
      else {
        unint64_t v19 = *(void **)(a1 + 304);
      }
      uint64_t v21 = 8 * v17;
      while (!*v19)
      {
        ++v19;
        v21 -= 8;
        if (!v21) {
          goto LABEL_31;
        }
      }
LABEL_29:
      uint64_t v25 = *(re::ecs2::System **)(a1 + 320);
      if (!*((unsigned char *)v25 + 86)) {
        re::ecs2::System::queueToRun(v25, 0.0);
      }
      goto LABEL_31;
    }
    if (v18)
    {
      unint64_t v20 = (uint64_t *)(a1 + 296);
      if (!v17) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v20 = *(uint64_t **)(a1 + 304);
      if (!v17) {
        goto LABEL_31;
      }
    }
    uint64_t v22 = 0;
    uint64_t v23 = 8 * v17;
    do
    {
      uint64_t v24 = *v20++;
      v22 |= v24;
      v23 -= 8;
    }
    while (v23);
    if (v22) {
      goto LABEL_29;
    }
  }
LABEL_31:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v27);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v28);
}

uint64_t re::ecs2::MeshOffsetsSystem::willAddSystemToECSService(re::ecs2::MeshOffsetsSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v5 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v4);
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v7 = re::ServiceLocator::serviceOrNull<re::AssetService>(v6);
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v8);
  *((void *)this + 44) = v3;
  *((void *)this + 45) = v5;
  *((void *)this + 46) = v7;
  *((void *)this + 4re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7) = result;
  return result;
}

double re::ecs2::MeshOffsetsSystem::willRemoveSystemFromECSService(re::ecs2::MeshOffsetsSystem *this)
{
  double result = 0.0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23) = 0u;
  return result;
}

void re::ecs2::MeshOffsetsSystem::willAddSceneToECSService(re::ecs2::MeshOffsetsSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 104;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::MeshOffsetsSystem *)((char *)this + 224);
  unint64_t v6 = *((void *)this + 29);
  int v7 = *((_DWORD *)this + 60);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)this + 248);
    }
    else {
      uint64_t v8 = (void *)*((void *)this + 32);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 248);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 32);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 224, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshOffsetsSystem *)((char *)this + 160), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    unint64_t v15 = (char *)this + 272;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 18);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 14);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 13, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 14);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    float32x4_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 120)) {
    unint64_t v19 = (char *)this + 128;
  }
  else {
    unint64_t v19 = (char *)*((void *)this + 17);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 18);
  ++*((_DWORD *)this + 38);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 18);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 18) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshOffsetsSystem *)((char *)this + 160), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 18);
  unint64_t v29 = *((void *)this + 33);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 33) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 240)) {
      uint64_t v33 = (char *)this + 248;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 32);
    }
    *(void *)&v33[8 * *((void *)this + 29) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 18);
  unint64_t v35 = *((void *)this + 39);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 39) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::MeshOffsetsSystem *)((char *)this + 272), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 39) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 288)) {
      uint64_t v39 = (char *)this + 296;
    }
    else {
      uint64_t v39 = (char *)*((void *)this + 38);
    }
    *(void *)&v39[8 * *((void *)this + 35) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  unint64_t v15 = (char *)this + 272;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 336)) {
    return;
  }
  unint64_t v40 = *((void *)this + 35);
  int v41 = *((_DWORD *)this + 72);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)((char *)this + 296);
    }
    else {
      uint64_t v42 = (void *)*((void *)this + 38);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    uint64_t v48 = (re::ecs2::System *)*((void *)this + 40);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    unint64_t v43 = (uint64_t *)((char *)this + 296);
    if (!v40) {
      return;
    }
  }
  else
  {
    unint64_t v43 = (uint64_t *)*((void *)this + 38);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::MeshOffsetsSystem::willRemoveSceneFromECSService(re::ecs2::MeshOffsetsSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 160);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 20, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 21) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 224, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 272, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      uint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        unint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *uint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_AssignedMeshOffsetsAttributes(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B088, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B088))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B158, "AssignedMeshOffsetsAttributes");
    __cxa_guard_release(&qword_26AF8B088);
  }
  return &unk_26AF8B158;
}

void re::ecs2::initInfo_AssignedMeshOffsetsAttributes(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x8D01A139E5A607F8;
  v20[1] = "AssignedMeshOffsetsAttributes";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B090, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B090);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "offsets";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF8B0F8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v10 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "preTransform";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3000000002;
      *(_DWORD *)(v11 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8B100 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "postTransform";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x7000000003;
      *(_DWORD *)(v14 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8B108 = v14;
      unint64_t v15 = re::introspectionAllocator((re *)v14);
      unint64_t v17 = re::introspect_REMeshOffsetsBlendingMode((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "blendingMode";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0xB000000004;
      *(_DWORD *)(v18 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8B110 = v18;
      __cxa_guard_release(&qword_26AF8B090);
    }
  }
  *((void *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8B0F8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AssignedMeshOffsetsAttributes>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::AssignedMeshOffsetsAttributes>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::AssignedMeshOffsetsAttributes>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AssignedMeshOffsetsAttributes>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::AssignedMeshOffsetsAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)&double result = 1065353216;
  *(_OWORD *)(a3 + 48) = xmmword_23435FD50;
  *(_OWORD *)(a3 + 64) = xmmword_23435FD60;
  *(_OWORD *)(a3 + 8objc_initWeak(location, 0) = xmmword_23435FD80;
  *(_OWORD *)(a3 + 96) = xmmword_23435FBB0;
  *(_OWORD *)(a3 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = xmmword_23435FD50;
  *(_OWORD *)(a3 + 128) = xmmword_23435FD60;
  *(_OWORD *)(a3 + 144) = xmmword_23435FD80;
  *(_OWORD *)(a3 + 16objc_initWeak(location, 0) = xmmword_23435FBB0;
  *(_DWORD *)(a3 + 176) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AssignedMeshOffsetsAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<unsigned long>::deinit(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AssignedMeshOffsetsAttributes>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)&double result = 1065353216;
  *(_OWORD *)(a1 + 48) = xmmword_23435FD50;
  *(_OWORD *)(a1 + 64) = xmmword_23435FD60;
  *(_OWORD *)(a1 + 8objc_initWeak(location, 0) = xmmword_23435FD80;
  *(_OWORD *)(a1 + 96) = xmmword_23435FBB0;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112) = xmmword_23435FD50;
  *(_OWORD *)(a1 + 128) = xmmword_23435FD60;
  *(_OWORD *)(a1 + 144) = xmmword_23435FD80;
  *(_OWORD *)(a1 + 16objc_initWeak(location, 0) = xmmword_23435FBB0;
  *(_DWORD *)(a1 + 176) = 0;
  return result;
}

void *re::ecs2::allocInfo_MeshOffsetsAttributes(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B0A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B0A0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B1D0, "MeshOffsetsAttributes");
    __cxa_guard_release(&qword_26AF8B0A0);
  }
  return &unk_26AF8B1D0;
}

void re::ecs2::initInfo_MeshOffsetsAttributes(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v8[0] = 0x594BC986F85AAA54;
  v8[1] = "MeshOffsetsAttributes";
  re::StringID::destroyString((re::StringID *)v8);
  *((_OWORD *)this + 2) = v9;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B0B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B0B0);
    if (v4)
    {
      uint64_t v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "perAssignedMeshAttributes";
      *(void *)(v6 + 16) = &qword_26AF8B118;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 4objc_initWeak(location, 0) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF8B0A8 = v6;
      __cxa_guard_release(&qword_26AF8B0B0);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8B0A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshOffsetsAttributes>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1objc_initWeak(location, 0) = re::internal::defaultDestruct<re::ecs2::MeshOffsetsAttributes>;
  *((void *)this + 1re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::MeshOffsetsAttributes>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshOffsetsAttributes>;
  re::IntrospectionRegistry::add(this, v3);
  long long v7 = v9;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B0D8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF8B0D8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8B118);
      qword_26AF8B118 = (uint64_t)&unk_26E703788;
      __cxa_guard_release(&qword_26AF8B0D8);
    }
  }
  if ((_MergedGlobals_278 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF8B098;
    if (qword_26AF8B098
      || (uint64_t v1 = re::ecs2::allocInfo_AssignedMeshOffsetsAttributes(a1),
          qword_26AF8B098 = (uint64_t)v1,
          re::ecs2::initInfo_AssignedMeshOffsetsAttributes((re::ecs2 *)v1, v2),
          (_MergedGlobals_278 & 1) == 0))
    {
      _MergedGlobals_278 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8B118, 0);
      qword_26AF8B128 = 0x2800000003;
      dword_26AF8B130 = v3;
      word_26AF8B134 = 0;
      *(void *)&xmmword_26AF8B138 = 0;
      *((void *)&xmmword_26AF8B138 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      qword_26AF8B148 = (uint64_t)v1;
      unk_26AF8B150 = 0;
      qword_26AF8B118 = (uint64_t)&unk_26E703788;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF8B118, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF8B138 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::MeshOffsetsAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshOffsetsAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::ecs2::MeshOffsetsAttributes>(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *re::ecs2::allocInfo_MeshOffsetsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B0C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B0C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B248, "MeshOffsetsComponent");
    __cxa_guard_release(&qword_26AF8B0C0);
  }
  return &unk_26AF8B248;
}