void re::ecs2::initInfo_MeshOffsetsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  re *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  re::ecs2 *v8;
  re::ecs2 *v9;
  re::ecs2 *v10;
  re::IntrospectionBase *v11;
  uint64_t v12;
  void *v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  uint64_t v16;
  long long v17;
  void v18[2];
  long long v19;

  v18[0] = 0x55761199A1A25594;
  v18[1] = "MeshOffsetsComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B0C8, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF8B0C8);
    if (v4)
    {
      v5 = re::introspectionAllocator(v4);
      v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B0E0 = v7;
      v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      v9 = v8;
      v10 = (re::ecs2 *)qword_26AF8B0B8;
      if (!qword_26AF8B0B8)
      {
        v10 = (re::ecs2 *)re::ecs2::allocInfo_MeshOffsetsAttributes(v8);
        qword_26AF8B0B8 = (uint64_t)v10;
        re::ecs2::initInfo_MeshOffsetsAttributes(v10, v11);
      }
      v12 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(void *)(v12 + 8) = "attributes";
      *(void *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF8B0E8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(void *)(v16 + 8) = "assignedMeshDeformation";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x4800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF8B0F0 = v16;
      __cxa_guard_release(&qword_26AF8B0C8);
    }
  }
  *((void *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8B0E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshOffsetsComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshOffsetsComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshOffsetsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshOffsetsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

uint64_t re::internal::defaultConstruct<re::ecs2::MeshOffsetsComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::MeshOffsetsComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshOffsetsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshOffsetsComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshOffsetsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshOffsetsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshOffsetsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshOffsetsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshOffsetsComponent>, this);
}

void *re::ecs2::allocInfo_MeshOffsetsSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B0D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B0D0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B2C0, "MeshOffsetsSystem");
    __cxa_guard_release(&qword_26AF8B0D0);
  }
  return &unk_26AF8B2C0;
}

void re::ecs2::initInfo_MeshOffsetsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xE2F769280B31FF04;
  v5[1] = "MeshOffsetsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_MeshOffsetsSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshOffsetsSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshOffsetsSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshOffsetsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshOffsetsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshOffsetsSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshOffsetsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::MeshOffsetsSystem *re::internal::defaultConstruct<re::ecs2::MeshOffsetsSystem>(int a1, int a2, re::ecs2::MeshOffsetsSystem *this)
{
  return re::ecs2::MeshOffsetsSystem::MeshOffsetsSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::MeshOffsetsSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  a3[43] = &unk_26E703538;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 48);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MeshOffsetsSystem>(void *a1)
{
  a1[43] = &unk_26E703538;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 48);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshOffsetsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshOffsetsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshOffsetsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshOffsetsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshOffsetsSystem>, this);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshOffsetsComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshOffsetsComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::MeshOffsetsSystem::~MeshOffsetsSystem(re::ecs2::MeshOffsetsSystem *this)
{
  *((void *)this + 43) = &unk_26E703538;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 48);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 43) = &unk_26E703538;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 48);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::MeshOffsetsSystem::typeInfo(re::ecs2::MeshOffsetsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshOffsetsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshOffsetsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshOffsetsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshOffsetsSystem>, 0);
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::update(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 224);
  unint64_t v5 = a1[3];
  unint64_t v6 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v5);
  if (*(_DWORD *)(v6 + 40)) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 24))(v4, a2, a1, v5, v6, 0);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = a1[5];
  unint64_t v9 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v8);
  if (*(_DWORD *)(v9 + 40)) {
    uint64_t v7 = v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 32))(v4, a2, a1, v8, v9, 0);
  }
  unint64_t v10 = a1[6];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    return v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 40))(v4, a2, a1, v10, v11, 0);
  }
  return v7;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *unint64_t v10 = &unk_26E703628;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E703680;
    v16[1] = a1;
    v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v20 = v17;
    v20[1] = v19;
    v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    void *v22 = &unk_26E7036D8;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v26 = v23;
    v26[1] = v25;
    v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    void *v28 = &unk_26E703730;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        void *v37 = &unk_26E703628;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E703680;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v47 = v44;
        v47[1] = v46;
        v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        void *v49 = &unk_26E7036D8;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v53 = v50;
        v53[1] = v52;
        v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E703730;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E703628;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E703628;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E703680;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E703680;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7036D8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7036D8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E703730;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E703730;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit(a2);
  *(void *)a2 = a3;
  unint64_t result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    unint64_t result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize((void *)a4, a5);
    }
  }
  else
  {
    unint64_t result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      unint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = *((void *)this + 4) + 192 * v8;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)uint64_t v9 = 0;
  *(_DWORD *)(v9 + 24) = 1;
  *(_OWORD *)(v9 + 48) = xmmword_23435FD50;
  *(_OWORD *)(v9 + 64) = xmmword_23435FD60;
  *(_OWORD *)(v9 + 80) = xmmword_23435FD80;
  *(_OWORD *)(v9 + 96) = xmmword_23435FBB0;
  *(_OWORD *)(v9 + 112) = xmmword_23435FD50;
  *(_OWORD *)(v9 + 128) = xmmword_23435FD60;
  *(_OWORD *)(v9 + 144) = xmmword_23435FD80;
  *(_OWORD *)(v9 + 160) = xmmword_23435FBB0;
  *(_DWORD *)(v9 + 176) = 0;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  uint64_t v11 = (re::IntrospectionBase *)(*((void *)this + 4) + 192 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 192 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 192 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  unint64_t result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  unint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 192 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 192;
        v11 -= 192;
      }
      while (v11);
    }
  }
}

uint64_t re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 192 * v2;
    do
    {
      unint64_t result = re::DynamicArray<unsigned long>::deinit(v3);
      v3 += 192;
      v4 -= 192;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 192 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 192 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::MeshOffsetsComponent>(uint64_t a1)
{
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  uint64_t v2 = (id *)(a1 + 160);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6DFFC8;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = -1;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  inited = (re *)objc_initWeak(v2, 0);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 200) = re::globalAllocators(inited)[2];
  *(void *)(a1 + 208) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::MeshOffsetsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshOffsetsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

float re::ecs2::downgradeLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v6 = *((unsigned int *)this + 214) | ((unint64_t)*((unsigned __int8 *)this + 864) << 32);
  v12[0] = *((void *)this + 106);
  v12[1] = v6;
  uint64_t v7 = re::ColorGamut3F::as(v12, 0, 3);
  float result = v8;
  *(void *)&long long v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 53) = v10;
  *((unsigned char *)this + 864) = v11;
  *a2 = 1;
  return result;
}

void *re::ecs2::allocInfo_LightComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B358))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B708, "LightComponent");
    __cxa_guard_release(&qword_26AF8B358);
  }
  return &unk_26AF8B708;
}

void re::ecs2::initInfo_LightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v88 = 0x758E810C9880594ELL;
  v89 = "LightComponent";
  re::StringID::destroyString((re::StringID *)&v88);
  *((_OWORD *)this + 2) = v84;
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B350, memory_order_acquire)) {
    goto LABEL_2;
  }
  unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B350);
  if (!v4) {
    goto LABEL_2;
  }
  uint64_t v5 = re::introspectionAllocator(v4);
  uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = "Component";
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = 3;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 56) = 0;
  *(_DWORD *)(v7 + 64) = 0;
  qword_26AF8B6B0 = v7;
  float v8 = re::introspectionAllocator((re *)v7);
  uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
  *(_DWORD *)uint64_t v10 = 1;
  *(void *)(v10 + 8) = "color";
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0x35000000001;
  *(_DWORD *)(v10 + 40) = 0;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0;
  *(_DWORD *)(v10 + 64) = 0;
  qword_26AF8B6B8 = v10;
  uint64_t v12 = re::introspectionAllocator((re *)v10);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B340, memory_order_acquire) & 1) == 0)
  {
    v65 = (re *)__cxa_guard_acquire(&qword_26AF8B340);
    if (v65)
    {
      v66 = re::introspectionAllocator(v65);
      uint64_t v67 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v66 + 32))(v66, 24, 8);
      *(_DWORD *)uint64_t v67 = 1;
      *((void *)v67 + 1) = 0;
      *((void *)v67 + 2) = "Directional";
      qword_26AF8B550 = (uint64_t)v67;
      v68 = re::introspectionAllocator(v67);
      v69 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v68 + 32))(v68, 24, 8);
      *(_DWORD *)v69 = 1;
      *((void *)v69 + 1) = 1;
      *((void *)v69 + 2) = "DirectionalUnshadowed";
      qword_26AF8B558 = (uint64_t)v69;
      uint64_t v70 = re::introspectionAllocator(v69);
      v71 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v70 + 32))(v70, 24, 8);
      *(_DWORD *)v71 = 1;
      *((void *)v71 + 1) = 2;
      *((void *)v71 + 2) = "Point";
      qword_26AF8B560 = (uint64_t)v71;
      v72 = re::introspectionAllocator(v71);
      uint64_t v73 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v72 + 32))(v72, 24, 8);
      *(_DWORD *)uint64_t v73 = 1;
      *((void *)v73 + 1) = 3;
      *((void *)v73 + 2) = "PointUnshadowed";
      qword_26AF8B568 = (uint64_t)v73;
      v74 = re::introspectionAllocator(v73);
      v75 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v74 + 32))(v74, 24, 8);
      *(_DWORD *)v75 = 1;
      *((void *)v75 + 1) = 4;
      *((void *)v75 + 2) = "Spot";
      qword_26AF8B570 = (uint64_t)v75;
      uint64_t v76 = re::introspectionAllocator(v75);
      v77 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v76 + 32))(v76, 24, 8);
      *(_DWORD *)v77 = 1;
      *((void *)v77 + 1) = 5;
      *((void *)v77 + 2) = "SpotUnshadowed";
      qword_26AF8B578 = (uint64_t)v77;
      v78 = re::introspectionAllocator(v77);
      uint64_t v79 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v78 + 32))(v78, 24, 8);
      *(_DWORD *)uint64_t v79 = 1;
      *((void *)v79 + 1) = 6;
      *((void *)v79 + 2) = "Ambient";
      qword_26AF8B580 = (uint64_t)v79;
      v80 = re::introspectionAllocator(v79);
      uint64_t v81 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v80 + 32))(v80, 24, 8);
      *(_DWORD *)uint64_t v81 = 1;
      *(void *)(v81 + 8) = 7;
      *(void *)(v81 + 16) = "RectangleUnshadowed";
      qword_26AF8B588 = v81;
      __cxa_guard_release(&qword_26AF8B340);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B348, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B348))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF8B590, "LightType", 4, 4, 1, 1);
    qword_26AF8B590 = (uint64_t)&unk_26E715E00;
    qword_26AF8B5D0 = (uint64_t)&re::introspect_LightType(BOOL)::enumTable;
    dword_26AF8B5A0 = 9;
    __cxa_guard_release(&qword_26AF8B348);
  }
  if (_MergedGlobals_279)
  {
LABEL_33:
    uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
    *(_DWORD *)uint64_t v35 = 1;
    *(void *)(v35 + 8) = "type";
    *(void *)(v35 + 16) = &qword_26AF8B590;
    *(void *)(v35 + 24) = 0;
    *(void *)(v35 + 32) = 0x1C00000002;
    *(_DWORD *)(v35 + 40) = 0;
    *(void *)(v35 + 48) = 0;
    *(void *)(v35 + 56) = 0;
    *(_DWORD *)(v35 + 64) = 0;
    qword_26AF8B6C0 = v35;
    uint64_t v36 = re::introspectionAllocator((re *)v35);
    uint64_t v38 = re::introspect_float((re *)1, v37);
    uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
    *(_DWORD *)uint64_t v39 = 1;
    *(void *)(v39 + 8) = "intensity";
    *(void *)(v39 + 16) = v38;
    *(void *)(v39 + 24) = 0;
    *(void *)(v39 + 32) = 0x2000000003;
    *(_DWORD *)(v39 + 40) = 0;
    *(void *)(v39 + 48) = 0;
    *(void *)(v39 + 56) = 0;
    *(_DWORD *)(v39 + 64) = 0;
    qword_26AF8B6C8 = v39;
    uint64_t v40 = re::introspectionAllocator((re *)v39);
    v42 = re::introspect_float((re *)1, v41);
    uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
    *(_DWORD *)uint64_t v43 = 1;
    *(void *)(v43 + 8) = "angle";
    *(void *)(v43 + 16) = v42;
    *(void *)(v43 + 24) = 0;
    *(void *)(v43 + 32) = 0x2400000004;
    *(_DWORD *)(v43 + 40) = 0;
    *(void *)(v43 + 48) = 0;
    *(void *)(v43 + 56) = 0;
    *(_DWORD *)(v43 + 64) = 0;
    qword_26AF8B6D0 = v43;
    uint64_t v44 = re::introspectionAllocator((re *)v43);
    uint64_t v45 = re::introspect_Vector2F((re::IntrospectionBase **)1);
    uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
    *(_DWORD *)uint64_t v46 = 1;
    *(void *)(v46 + 8) = "rectangleArea";
    *(void *)(v46 + 16) = v45;
    *(void *)(v46 + 24) = 0;
    *(void *)(v46 + 32) = 0x3000000005;
    *(_DWORD *)(v46 + 40) = 0;
    *(void *)(v46 + 48) = 0;
    *(void *)(v46 + 56) = 0;
    *(_DWORD *)(v46 + 64) = 0;
    qword_26AF8B6D8 = v46;
    v47 = re::introspectionAllocator((re *)v46);
    v49 = re::introspect_BOOL((re *)1, v48);
    uint64_t v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 72, 8);
    *(_DWORD *)uint64_t v50 = 1;
    *(void *)(v50 + 8) = "rectDoubleSided";
    *(void *)(v50 + 16) = v49;
    *(void *)(v50 + 24) = 0;
    *(void *)(v50 + 32) = 0x3800000006;
    *(_DWORD *)(v50 + 40) = 0;
    *(void *)(v50 + 48) = 0;
    *(void *)(v50 + 56) = 0;
    *(_DWORD *)(v50 + 64) = 0;
    qword_26AF8B6E0 = v50;
    uint64_t v51 = re::introspectionAllocator((re *)v50);
    v53 = re::introspect_float((re *)1, v52);
    uint64_t v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 72, 8);
    *(_DWORD *)uint64_t v54 = 1;
    *(void *)(v54 + 8) = "radius";
    *(void *)(v54 + 16) = v53;
    *(void *)(v54 + 24) = 0;
    *(void *)(v54 + 32) = 0x2800000007;
    *(_DWORD *)(v54 + 40) = 0;
    *(void *)(v54 + 48) = 0;
    *(void *)(v54 + 56) = 0;
    *(_DWORD *)(v54 + 64) = 0;
    qword_26AF8B6E8 = v54;
    v55 = re::introspectionAllocator((re *)v54);
    uint64_t v57 = re::introspect_float((re *)1, v56);
    uint64_t v58 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 72, 8);
    *(_DWORD *)uint64_t v58 = 1;
    *(void *)(v58 + 8) = "shadowBias";
    *(void *)(v58 + 16) = v57;
    *(void *)(v58 + 24) = 0;
    *(void *)(v58 + 32) = 0x3C00000008;
    *(_DWORD *)(v58 + 40) = 0;
    *(void *)(v58 + 48) = 0;
    *(void *)(v58 + 56) = 0;
    *(_DWORD *)(v58 + 64) = 0;
    qword_26AF8B6F0 = v58;
    v59 = re::introspectionAllocator((re *)v58);
    uint64_t v61 = re::introspect_ColorGamut((re *)1, v60);
    uint64_t v62 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 72, 8);
    *(_DWORD *)uint64_t v62 = 1;
    *(void *)(v62 + 8) = "colorGamut";
    *(void *)(v62 + 16) = v61;
    *(void *)(v62 + 24) = 0;
    *(void *)(v62 + 32) = 0x36000000009;
    *(_DWORD *)(v62 + 40) = 0;
    *(void *)(v62 + 48) = 0;
    *(void *)(v62 + 56) = 0;
    *(_DWORD *)(v62 + 64) = 0;
    qword_26AF8B6F8 = v62;
    v63 = re::introspectionAllocator((re *)v62);
    uint64_t v64 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v63 + 32))(v63, 64, 8);
    *(_DWORD *)uint64_t v64 = 6;
    *(void *)(v64 + 8) = 1;
    *(void *)(v64 + 16) = 0;
    *(void *)(v64 + 24) = 0;
    *(void *)(v64 + 32) = 0;
    *(unsigned char *)(v64 + 40) = 1;
    *(void *)(v64 + 48) = re::ecs2::downgradeLightComponentFromFall2023;
    *(_DWORD *)(v64 + 56) = 2;
    qword_26AF8B700 = v64;
    __cxa_guard_release(&qword_26AF8B350);
LABEL_2:
    *((void *)this + 2) = 0x37000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 11;
    *((void *)this + 8) = &qword_26AF8B6B0;
    *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::LightComponent>;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::LightComponent>;
    *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LightComponent>;
    *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LightComponent>;
    re::IntrospectionRegistry::add(this, v3);
    long long v83 = v84;
    return;
  }
  _MergedGlobals_279 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF8B590, v11);
  v85[0] = 0x7B5540A1BAA0;
  v85[1] = (uint64_t)"LightType";
  uint64_t v88 = 208862;
  v89 = "int";
  uint64_t v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v88);
  if (v13)
  {
    uint64_t v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v88);
    uint64_t v15 = (unsigned int *)qword_26AF8B5D0;
    v87[1] = v14;
    re::TypeBuilder::beginEnumType((uint64_t)&v88, v85, 1, 1, (uint64_t)v87);
    unint64_t v17 = *v15;
    if (v17)
    {
      for (unint64_t i = 0; i < v17; ++i)
      {
        uint64_t v19 = *(void *)(*((void *)v15 + 1) + 8 * i);
        if (*(_DWORD *)v19 == 1)
        {
          v20 = *(char **)(v19 + 16);
          if (v20)
          {
            uint64_t v21 = *v20;
            if (*v20)
            {
              char v22 = v20[1];
              if (v22)
              {
                uint64_t v23 = (unsigned __int8 *)(v20 + 2);
                do
                {
                  uint64_t v21 = 31 * v21 + v22;
                  int v24 = *v23++;
                  char v22 = v24;
                }
                while (v24);
              }
            }
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v25 = *(void *)(v19 + 8);
          *(void *)&v86.var0 = 2 * v21;
          v86.var1 = v20;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v88, v25, &v86);
          re::StringID::destroyString((re::StringID *)&v86);
          unint64_t v17 = *v15;
        }
      }
      if (v17)
      {
        for (unint64_t j = 0; j < v17; ++j)
        {
          uint64_t v27 = *(void *)(*((void *)v15 + 1) + 8 * j);
          if (*(_DWORD *)v27 == 2)
          {
            v28 = *(char **)(v27 + 16);
            if (v28)
            {
              uint64_t v29 = *v28;
              if (*v28)
              {
                char v30 = v28[1];
                if (v30)
                {
                  uint64_t v31 = (unsigned __int8 *)(v28 + 2);
                  do
                  {
                    uint64_t v29 = 31 * v29 + v30;
                    int v32 = *v31++;
                    char v30 = v32;
                  }
                  while (v32);
                }
              }
            }
            else
            {
              uint64_t v29 = 0;
            }
            uint64_t v33 = *(void *)(v27 + 8);
            *(void *)&v86.var0 = 2 * v29;
            v86.var1 = v28;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v88, v33, &v86);
            re::StringID::destroyString((re::StringID *)&v86);
            unint64_t v17 = *v15;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v88, v34);
    xmmword_26AF8B5B0 = (__int128)v86;
    re::StringID::destroyString((re::StringID *)v85);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v88);
  re::internal::assertLog((re::internal *)5, v82, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "LightType");
  _os_crash();
  __break(1u);
}

void *re::internal::defaultConstruct<re::ecs2::LightComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::LightComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::LightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::LightComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_LightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightComponent>, this);
}

float re::ecs2::downgradeAmbientLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v6 = *((unsigned int *)this + 18) | ((unint64_t)*((unsigned __int8 *)this + 80) << 32);
  v12[0] = *((void *)this + 8);
  v12[1] = v6;
  uint64_t v7 = re::ColorGamut3F::as(v12, 0, 3);
  float result = v8;
  *(void *)&long long v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 4) = v10;
  *((unsigned char *)this + 80) = v11;
  *a2 = 1;
  return result;
}

void *re::ecs2::allocInfo_AmbientLightComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B368))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B780, "AmbientLightComponent");
    __cxa_guard_release(&qword_26AF8B368);
  }
  return &unk_26AF8B780;
}

void re::ecs2::initInfo_AmbientLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x895FF577E2580A3ELL;
  v22[1] = "AmbientLightComponent";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B360, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B360);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B438 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "color";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x4000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8B440 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_float((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "intensity";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8B448 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      unint64_t v17 = re::introspect_ColorGamut((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "colorGamut";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x5000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8B450 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 64, 8);
      *(_DWORD *)uint64_t v20 = 6;
      *(void *)(v20 + 8) = 1;
      *(void *)(v20 + 16) = 0;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0;
      *(unsigned char *)(v20 + 40) = 1;
      *(void *)(v20 + 48) = re::ecs2::downgradeAmbientLightComponentFromFall2023;
      *(_DWORD *)(v20 + 56) = 2;
      qword_26AF8B458 = v20;
      __cxa_guard_release(&qword_26AF8B360);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF8B438;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AmbientLightComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AmbientLightComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AmbientLightComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AmbientLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

__n128 re::internal::defaultConstruct<re::ecs2::AmbientLightComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  v3[1].n128_u64[0] = 0;
  v3[1].n128_u8[8] = 0;
  v3->n128_u64[0] = (unint64_t)&unk_26E6EACC8;
  v3[1].n128_u32[3] = 1143652352;
  v3[2].n128_u64[0] = 0;
  v3[2].n128_u64[1] = 0;
  v3[3].n128_u32[0] = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v3[4] = result;
  v3[5].n128_u8[0] = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AmbientLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

__n128 re::internal::defaultConstructV2<re::ecs2::AmbientLightComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  v1[1].n128_u64[0] = 0;
  v1[1].n128_u8[8] = 0;
  v1->n128_u64[0] = (unint64_t)&unk_26E6EACC8;
  v1[1].n128_u32[3] = 1143652352;
  v1[2].n128_u64[0] = 0;
  v1[2].n128_u64[1] = 0;
  v1[3].n128_u32[0] = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v1[4] = result;
  v1[5].n128_u8[0] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AmbientLightComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AmbientLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AmbientLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AmbientLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AmbientLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AmbientLightComponent>, this);
}

float re::ecs2::downgradeDirectionalLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v6 = *((unsigned int *)this + 86) | ((unint64_t)*((unsigned __int8 *)this + 352) << 32);
  v12[0] = *((void *)this + 42);
  v12[1] = v6;
  uint64_t v7 = re::ColorGamut3F::as(v12, 0, 3);
  float result = v8;
  *(void *)&long long v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 21) = v10;
  *((unsigned char *)this + 352) = v11;
  *a2 = 1;
  return result;
}

void *re::ecs2::allocInfo_DirectionalLightComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B378))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B7F8, "DirectionalLightComponent");
    __cxa_guard_release(&qword_26AF8B378);
  }
  return &unk_26AF8B7F8;
}

void re::ecs2::initInfo_DirectionalLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v26[0] = 0x661AEDCCAE0735E2;
  v26[1] = "DirectionalLightComponent";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B370, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B370);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B4B0 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "color";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x15000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8B4B8 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_float((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "intensity";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8B4C0 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      unint64_t v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "isProxy";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8B4C8 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      long long v21 = re::introspect_ColorGamut((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "colorGamut";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x16000000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF8B4D0 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 64, 8);
      *(_DWORD *)uint64_t v24 = 6;
      *(void *)(v24 + 8) = 1;
      *(void *)(v24 + 16) = 0;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0;
      *(unsigned char *)(v24 + 40) = 1;
      *(void *)(v24 + 48) = re::ecs2::downgradeDirectionalLightComponentFromFall2023;
      *(_DWORD *)(v24 + 56) = 2;
      qword_26AF8B4D8 = v24;
      __cxa_guard_release(&qword_26AF8B370);
    }
  }
  *((void *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF8B4B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DirectionalLightComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DirectionalLightComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DirectionalLightComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DirectionalLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

re::ecs2::DirectionalLightComponent *re::internal::defaultConstruct<re::ecs2::DirectionalLightComponent>(int a1, int a2, re::ecs2::DirectionalLightComponent *this)
{
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::DirectionalLightComponent::DirectionalLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::DirectionalLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::ecs2::DirectionalLightComponent *re::internal::defaultConstructV2<re::ecs2::DirectionalLightComponent>(re::ecs2::DirectionalLightComponent *this)
{
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::DirectionalLightComponent::DirectionalLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DirectionalLightComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DirectionalLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectionalLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DirectionalLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DirectionalLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DirectionalLightComponent>, this);
}

float re::ecs2::downgradeSpotLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v6 = *((unsigned int *)this + 74) | ((unint64_t)*((unsigned __int8 *)this + 304) << 32);
  v12[0] = *((void *)this + 36);
  v12[1] = v6;
  uint64_t v7 = re::ColorGamut3F::as(v12, 0, 3);
  float result = v8;
  *(void *)&long long v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 18) = v10;
  *((unsigned char *)this + 304) = v11;
  *a2 = 1;
  return result;
}

void *re::ecs2::allocInfo_SpotLightComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B388, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B388))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B870, "SpotLightComponent");
    __cxa_guard_release(&qword_26AF8B388);
  }
  return &unk_26AF8B870;
}

void re::ecs2::initInfo_SpotLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v38[0] = 0xA41086BFAF11EC92;
  v38[1] = "SpotLightComponent";
  re::StringID::destroyString((re::StringID *)v38);
  *((_OWORD *)this + 2) = v39;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B380, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B380);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B5D8 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "color";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x12000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8B5E0 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_float((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "intensity";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8B5E8 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      unint64_t v17 = re::introspect_float((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "outerAngle";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8B5F0 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      long long v21 = re::introspect_float((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "innerAngle";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x2400000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF8B5F8 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      long long v25 = re::introspect_float((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "attenuationRadius";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x2800000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF8B600 = v26;
      long long v27 = re::introspectionAllocator((re *)v26);
      uint64_t v29 = re::introspect_ColorGamut((re *)1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "colorGamut";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x13000000006;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF8B608 = v30;
      uint64_t v31 = re::introspectionAllocator((re *)v30);
      uint64_t v33 = re::introspect_float((re *)1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "attenuationFalloffExponent";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x2C00000007;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF8B610 = v34;
      uint64_t v35 = re::introspectionAllocator((re *)v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 64, 8);
      *(_DWORD *)uint64_t v36 = 6;
      *(void *)(v36 + 8) = 1;
      *(void *)(v36 + 16) = 0;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0;
      *(unsigned char *)(v36 + 40) = 1;
      *(void *)(v36 + 48) = re::ecs2::downgradeSpotLightComponentFromFall2023;
      *(_DWORD *)(v36 + 56) = 2;
      qword_26AF8B618 = v36;
      __cxa_guard_release(&qword_26AF8B380);
    }
  }
  *((void *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + 8) = &qword_26AF8B5D8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SpotLightComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SpotLightComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SpotLightComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SpotLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v37 = v39;
}

re::ecs2::SpotLightComponent *re::internal::defaultConstruct<re::ecs2::SpotLightComponent>(int a1, int a2, re::ecs2::SpotLightComponent *this)
{
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::SpotLightComponent::SpotLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::SpotLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::ecs2::SpotLightComponent *re::internal::defaultConstructV2<re::ecs2::SpotLightComponent>(re::ecs2::SpotLightComponent *this)
{
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::SpotLightComponent::SpotLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SpotLightComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SpotLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SpotLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SpotLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SpotLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SpotLightComponent>, this);
}

float re::ecs2::downgradePointLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v6 = *((unsigned int *)this + 70) | ((unint64_t)*((unsigned __int8 *)this + 288) << 32);
  v12[0] = *((void *)this + 34);
  v12[1] = v6;
  uint64_t v7 = re::ColorGamut3F::as(v12, 0, 3);
  float result = v8;
  *(void *)&long long v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 17) = v10;
  *((unsigned char *)this + 288) = v11;
  *a2 = 1;
  return result;
}

void *re::ecs2::allocInfo_PointLightComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B398, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B398))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B8E8, "PointLightComponent");
    __cxa_guard_release(&qword_26AF8B398);
  }
  return &unk_26AF8B8E8;
}

void re::ecs2::initInfo_PointLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v30[0] = 0x7C7634670D0A9C2ELL;
  v30[1] = "PointLightComponent";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B390, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B390);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B4E0 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "color";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x11000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8B4E8 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_float((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "intensity";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8B4F0 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      unint64_t v17 = re::introspect_float((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "attenuationRadius";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8B4F8 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      long long v21 = re::introspect_ColorGamut((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "colorGamut";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x12000000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF8B500 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      long long v25 = re::introspect_float((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "attenuationFalloffExponent";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x2400000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF8B508 = v26;
      long long v27 = re::introspectionAllocator((re *)v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 64, 8);
      *(_DWORD *)uint64_t v28 = 6;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + 16) = 0;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0;
      *(unsigned char *)(v28 + 40) = 1;
      *(void *)(v28 + 48) = re::ecs2::downgradePointLightComponentFromFall2023;
      *(_DWORD *)(v28 + 56) = 2;
      qword_26AF8B510 = v28;
      __cxa_guard_release(&qword_26AF8B390);
    }
  }
  *((void *)this + 2) = 0x13000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF8B4E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PointLightComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PointLightComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PointLightComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PointLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

re::ecs2::PointLightComponent *re::internal::defaultConstruct<re::ecs2::PointLightComponent>(int a1, int a2, re::ecs2::PointLightComponent *this)
{
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::PointLightComponent::PointLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PointLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::ecs2::PointLightComponent *re::internal::defaultConstructV2<re::ecs2::PointLightComponent>(re::ecs2::PointLightComponent *this)
{
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::PointLightComponent::PointLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PointLightComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PointLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PointLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PointLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PointLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PointLightComponent>, this);
}

float re::ecs2::downgradeRectAreaLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v6 = *((unsigned int *)this + 50) | ((unint64_t)*((unsigned __int8 *)this + 208) << 32);
  v12[0] = *((void *)this + 24);
  v12[1] = v6;
  uint64_t v7 = re::ColorGamut3F::as(v12, 0, 3);
  float result = v8;
  *(void *)&long long v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 12) = v10;
  *((unsigned char *)this + 208) = v11;
  *a2 = 1;
  return result;
}

void *re::ecs2::allocInfo_RectAreaLightComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B3A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B960, "RectAreaLightComponent");
    __cxa_guard_release(&qword_26AF8B3A8);
  }
  return &unk_26AF8B960;
}

void re::ecs2::initInfo_RectAreaLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v29[0] = 0x253CA3D5FF302730;
  v29[1] = "RectAreaLightComponent";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3A0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B3A0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B518 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "color";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0xC000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8B520 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_float((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "intensity";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8B528 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      uint64_t v16 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "extents";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x2000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF8B530 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_BOOL((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "emitsDoubleSided";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x2800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF8B538 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      uint64_t v24 = re::introspect_ColorGamut((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "colorGamut";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0xD000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF8B540 = v25;
      uint64_t v26 = re::introspectionAllocator((re *)v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 64, 8);
      *(_DWORD *)uint64_t v27 = 6;
      *(void *)(v27 + 8) = 1;
      *(void *)(v27 + 16) = 0;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0;
      *(unsigned char *)(v27 + 40) = 1;
      *(void *)(v27 + 48) = re::ecs2::downgradeRectAreaLightComponentFromFall2023;
      *(_DWORD *)(v27 + 56) = 2;
      qword_26AF8B548 = v27;
      __cxa_guard_release(&qword_26AF8B3A0);
    }
  }
  *((void *)this + 2) = 0xE000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF8B518;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RectAreaLightComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RectAreaLightComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RectAreaLightComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RectAreaLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v28 = v30;
}

re::ecs2::RectAreaLightComponent *re::internal::defaultConstruct<re::ecs2::RectAreaLightComponent>(int a1, int a2, re::ecs2::RectAreaLightComponent *this)
{
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::RectAreaLightComponent::RectAreaLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::RectAreaLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::ecs2::RectAreaLightComponent *re::internal::defaultConstructV2<re::ecs2::RectAreaLightComponent>(re::ecs2::RectAreaLightComponent *this)
{
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::RectAreaLightComponent::RectAreaLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RectAreaLightComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RectAreaLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RectAreaLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RectAreaLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RectAreaLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RectAreaLightComponent>, this);
}

float re::ecs2::downgradeFrustumLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v6 = *((unsigned int *)this + 78) | ((unint64_t)*((unsigned __int8 *)this + 320) << 32);
  v12[0] = *((void *)this + 38);
  v12[1] = v6;
  uint64_t v7 = re::ColorGamut3F::as(v12, 0, 3);
  float result = v8;
  *(void *)&long long v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 19) = v10;
  *((unsigned char *)this + 320) = v11;
  *a2 = 1;
  return result;
}

void *re::ecs2::allocInfo_FrustumLightComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B3B8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8B9D8, "FrustumLightComponent");
    __cxa_guard_release(&qword_26AF8B3B8);
  }
  return &unk_26AF8B9D8;
}

void re::ecs2::initInfo_FrustumLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v37[0] = 0x199383482F3684D2;
  v37[1] = "FrustumLightComponent";
  re::StringID::destroyString((re::StringID *)v37);
  *((_OWORD *)this + 2) = v38;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3B0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B3B0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B620 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "color";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x13000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8B628 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_float((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "intensity";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8B630 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      uint64_t v17 = re::introspect_float((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "outerAngle";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8B638 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      uint64_t v21 = re::introspect_float((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "innerAngle";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x2400000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF8B640 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      uint64_t v25 = re::introspect_float((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "attenuationRadius";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x2800000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF8B648 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      uint64_t v28 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "extents";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x3000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF8B650 = v29;
      long long v30 = re::introspectionAllocator((re *)v29);
      int v32 = re::introspect_ColorGamut((re *)1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "colorGamut";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0x14000000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF8B658 = v33;
      uint64_t v34 = re::introspectionAllocator((re *)v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 64, 8);
      *(_DWORD *)uint64_t v35 = 6;
      *(void *)(v35 + 8) = 1;
      *(void *)(v35 + 16) = 0;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0;
      *(unsigned char *)(v35 + 40) = 1;
      *(void *)(v35 + 48) = re::ecs2::downgradeFrustumLightComponentFromFall2023;
      *(_DWORD *)(v35 + 56) = 2;
      qword_26AF8B660 = v35;
      __cxa_guard_release(&qword_26AF8B3B0);
    }
  }
  *((void *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + 8) = &qword_26AF8B620;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::FrustumLightComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::FrustumLightComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::FrustumLightComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::FrustumLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v36 = v38;
}

re::ecs2::FrustumLightComponent *re::internal::defaultConstruct<re::ecs2::FrustumLightComponent>(int a1, int a2, re::ecs2::FrustumLightComponent *this)
{
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::FrustumLightComponent::FrustumLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::FrustumLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::ecs2::FrustumLightComponent *re::internal::defaultConstructV2<re::ecs2::FrustumLightComponent>(re::ecs2::FrustumLightComponent *this)
{
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::FrustumLightComponent::FrustumLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::FrustumLightComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_FrustumLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrustumLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FrustumLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FrustumLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FrustumLightComponent>, this);
}

void *re::ecs2::allocInfo_FilterMapComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B3C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8BA50, "FilterMapComponent");
    __cxa_guard_release(&qword_26AF8B3C0);
  }
  return &unk_26AF8BA50;
}

void re::ecs2::initInfo_FilterMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x4F276BC591308D72;
  v13[1] = "FilterMapComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3C8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B3C8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B410 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "material";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8B418 = v11;
      __cxa_guard_release(&qword_26AF8B3C8);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8B410;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::FilterMapComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::FilterMapComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::FilterMapComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::FilterMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::FilterMapComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EBB70;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::FilterMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::FilterMapComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EBB70;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::FilterMapComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_FilterMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FilterMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FilterMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FilterMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FilterMapComponent>, this);
}

void *re::ecs2::allocInfo_ShadowMapComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B3D0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8BAC8, "ShadowMapComponent");
    __cxa_guard_release(&qword_26AF8B3D0);
  }
  return &unk_26AF8BAC8;
}

void re::ecs2::initInfo_ShadowMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0xD3AD1E1D3F2970C2;
  v17[1] = "ShadowMapComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3D8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B3D8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B420 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "depthBias";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8B428 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::introspect_float((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "distance";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8B430 = v15;
      __cxa_guard_release(&qword_26AF8B3D8);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8B420;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowMapComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ShadowMapComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowMapComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ShadowMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

double re::internal::defaultConstruct<re::ecs2::ShadowMapComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EB4F0;
  double result = 2048.00048;
  *(void *)(v3 + 28) = 0x40A000003F800000;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ShadowMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::ShadowMapComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EB4F0;
  double result = 2048.00048;
  *(void *)(v1 + 28) = 0x40A000003F800000;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ShadowMapComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ShadowMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowMapComponent>, this);
}

void *re::ecs2::allocInfo_PointLightShadowMapComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B3E0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8BB40, "PointLightShadowMapComponent");
    __cxa_guard_release(&qword_26AF8B3E0);
  }
  return &unk_26AF8BB40;
}

void re::ecs2::initInfo_PointLightShadowMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v25[0] = 0xE3B8089A156ED0CELL;
  v25[1] = "PointLightShadowMapComponent";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3E8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B3E8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B460 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "depthBias";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8B468 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "cullMode";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8B470 = v15;
      long long v16 = re::introspectionAllocator((re *)v15);
      long long v18 = re::IntrospectionInfo<re::Optional<float>>::get(1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "zNear";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2400000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8B478 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::IntrospectionInfo<re::Optional<float>>::get(1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "zFar";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x2C00000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF8B480 = v23;
      __cxa_guard_release(&qword_26AF8B3E8);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF8B460;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PointLightShadowMapComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PointLightShadowMapComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PointLightShadowMapComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PointLightShadowMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

uint64_t *re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info = (uint64_t)&unk_26E7039B8;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = (re *)re::mtl::introspect_CullMode((re::mtl *)1, a2);
  if (re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info, 0);
    qword_268774D08 = 0x20000000DLL;
    dword_268774D10 = v10;
    word_268774D14 = 0;
    *(void *)&xmmword_268774D18 = 0;
    *((void *)&xmmword_268774D18 + 1) = 0xFFFFFFFFLL;
    qword_268774D28 = v9;
    unk_268774D30 = 0;
    re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info = (uint64_t)&unk_26E7039B8;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      uint64_t v13 = v16;
    }
    else {
      uint64_t v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_268774D18 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info;
}

void re::internal::defaultConstruct<re::ecs2::PointLightShadowMapComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EB690;
  *(_DWORD *)(v3 + 28) = 1065353216;
  *(unsigned char *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 36) = 0;
  *(unsigned char *)(v3 + 44) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PointLightShadowMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::PointLightShadowMapComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EB690;
  *(_DWORD *)(v1 + 28) = 1065353216;
  *(unsigned char *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 36) = 0;
  *(unsigned char *)(v1 + 44) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PointLightShadowMapComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PointLightShadowMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PointLightShadowMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PointLightShadowMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PointLightShadowMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PointLightShadowMapComponent>, this);
}

void *re::ecs2::allocInfo_DirectionalLightShadowMapComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B3F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8BBB8, "DirectionalLightShadowMapComponent");
    __cxa_guard_release(&qword_26AF8B3F0);
  }
  return &unk_26AF8BBB8;
}

void re::ecs2::initInfo_DirectionalLightShadowMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v41[0] = 0x392F7D3B7831E19ALL;
  v41[1] = "DirectionalLightShadowMapComponent";
  re::StringID::destroyString((re::StringID *)v41);
  *((_OWORD *)this + 2) = v42;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B3F8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B3F8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B668 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      int v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "depthBias";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8B670 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::introspect_float((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "distance";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8B678 = v15;
      long long v16 = re::introspectionAllocator((re *)v15);
      long long v18 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "cullMode";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2400000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8B680 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_BOOL((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "automaticallyAdjustsShadowProjection";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x2600000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF8B688 = v23;
      long long v24 = re::introspectionAllocator((re *)v23);
      long long v26 = re::introspect_float((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "zNear";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x2800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF8B690 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      long long v30 = re::introspect_float((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "zFar";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x2C00000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF8B698 = v31;
      int v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_float((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "orthographicScale";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x3000000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF8B6A0 = v35;
      long long v36 = re::introspectionAllocator((re *)v35);
      long long v38 = re::introspect_BOOL((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + 8) = "useDiameterBounds";
      *(void *)(v39 + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x3400000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 48) = 0;
      *(void *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF8B6A8 = v39;
      __cxa_guard_release(&qword_26AF8B3F8);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + 8) = &qword_26AF8B668;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DirectionalLightShadowMapComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DirectionalLightShadowMapComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DirectionalLightShadowMapComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DirectionalLightShadowMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v40 = v42;
}

double re::internal::defaultConstruct<re::ecs2::DirectionalLightShadowMapComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::DirectionalLightShadowMapComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::DirectionalLightShadowMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DirectionalLightShadowMapComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DirectionalLightShadowMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectionalLightShadowMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DirectionalLightShadowMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DirectionalLightShadowMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DirectionalLightShadowMapComponent>, this);
}

void *re::ecs2::allocInfo_SpotLightShadowMapComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B400, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8B400))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8BC30, "SpotLightShadowMapComponent");
    __cxa_guard_release(&qword_26AF8B400);
  }
  return &unk_26AF8BC30;
}

void re::ecs2::initInfo_SpotLightShadowMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v25[0] = 0x695021DC2B51B0EALL;
  v25[1] = "SpotLightShadowMapComponent";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8B408, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8B408);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8B488 = v7;
      float v8 = re::introspectionAllocator((re *)v7);
      int v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "depthBias";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8B490 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "cullMode";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8B498 = v15;
      long long v16 = re::introspectionAllocator((re *)v15);
      long long v18 = re::IntrospectionInfo<re::Optional<float>>::get(1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "zNear";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2400000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8B4A0 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::IntrospectionInfo<re::Optional<float>>::get(1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "zFar";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x2C00000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF8B4A8 = v23;
      __cxa_guard_release(&qword_26AF8B408);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF8B488;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SpotLightShadowMapComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SpotLightShadowMapComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SpotLightShadowMapComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SpotLightShadowMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

void re::internal::defaultConstruct<re::ecs2::SpotLightShadowMapComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EB9D0;
  *(_DWORD *)(v3 + 28) = 1065353216;
  *(unsigned char *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 36) = 0;
  *(unsigned char *)(v3 + 44) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SpotLightShadowMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SpotLightShadowMapComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EB9D0;
  *(_DWORD *)(v1 + 28) = 1065353216;
  *(unsigned char *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 36) = 0;
  *(unsigned char *)(v1 + 44) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SpotLightShadowMapComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SpotLightShadowMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SpotLightShadowMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SpotLightShadowMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SpotLightShadowMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SpotLightShadowMapComponent>, this);
}

void re::ecs2::DirectionalLightComponent::adjustedIntroReleaseVersion(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1 == 4)
  {
    *(_DWORD *)(a2 + 4) = 12;
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)a2 = v2;
}

void re::ecs2::SpotLightComponent::adjustedIntroReleaseVersion(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1 == 4)
  {
    *(_DWORD *)(a2 + 4) = 12;
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)a2 = v2;
}

void re::ecs2::PointLightComponent::adjustedIntroReleaseVersion(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1 == 4)
  {
    *(_DWORD *)(a2 + 4) = 12;
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)a2 = v2;
}

void re::ecs2::DirectionalLightComponent::~DirectionalLightComponent(re::ecs2::DirectionalLightComponent *this)
{
  *(void *)this = &unk_26E703820;
  char v2 = (re::ecs2::DirectionalLightComponent *)((char *)this + 48);
  re::DynamicString::deinit((re::ecs2::DirectionalLightComponent *)((char *)this + 192));
  re::DynamicString::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E703820;
  char v2 = (re::ecs2::DirectionalLightComponent *)((char *)this + 48);
  re::DynamicString::deinit((re::ecs2::DirectionalLightComponent *)((char *)this + 192));
  re::DynamicString::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SpotLightComponent::~SpotLightComponent(re::ecs2::SpotLightComponent *this)
{
  *(void *)this = &unk_26E7038A8;
  re::DynamicString::deinit((re::ecs2::SpotLightComponent *)((char *)this + 48));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E7038A8;
  re::DynamicString::deinit((re::ecs2::SpotLightComponent *)((char *)this + 48));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::PointLightComponent::~PointLightComponent(re::ecs2::PointLightComponent *this)
{
  *(void *)this = &unk_26E703930;
  re::DynamicString::deinit((re::ecs2::PointLightComponent *)((char *)this + 48));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E703930;
  re::DynamicString::deinit((re::ecs2::PointLightComponent *)((char *)this + 48));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::make::shared::unsafelyInplace<re::ecs2::LightComponent>(void *a1)
{
  bzero(a1, 0x370uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((unsigned char *)a1 + 24) = 0;
  *a1 = &unk_26E6EA988;
  *((_DWORD *)a1 + 7) = 3;
  a1[4] = 0x42B4000046D2A785;
  *((_DWORD *)a1 + 10) = 1120403456;
  a1[6] = 0;
  *((unsigned char *)a1 + 56) = 0;
  *((_DWORD *)a1 + 15) = 1008981770;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1 + 8, 0);
  *((_DWORD *)a1 + 44) = 0;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *(void *)((char *)a1 + 180) = 0x412000003C23D70ALL;
  *(void *)((char *)a1 + 188) = 0;
  *((unsigned char *)a1 + 196) = 0;
  *(_DWORD *)((char *)a1 + 198) = 16842752;
  *((_DWORD *)a1 + 51) = 1065353216;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1 + 26, 0);
  *((_DWORD *)a1 + 80) = 0;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *(void *)((char *)a1 + 324) = 0x412000003C23D70ALL;
  *((_WORD *)a1 + 215) = 0;
  *((unsigned char *)a1 + 432) = 0;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *(_OWORD *)((char *)a1 + 413) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1 + 56, 0);
  *((_DWORD *)a1 + 140) = 0;
  *((_OWORD *)a1 + 33) = 0u;
  *((_OWORD *)a1 + 34) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *(void *)((char *)a1 + 564) = 0x412000003C23D70ALL;
  *((_WORD *)a1 + 331) = 0;
  *((_OWORD *)a1 + 36) = 0u;
  *((_OWORD *)a1 + 37) = 0u;
  *((_OWORD *)a1 + 38) = 0u;
  *((_OWORD *)a1 + 39) = 0u;
  *((_OWORD *)a1 + 40) = 0u;
  *(void *)((char *)a1 + 653) = 0;
  *((_OWORD *)a1 + 42) = 0u;
  *((_OWORD *)a1 + 43) = 0u;
  re::DynamicString::setCapacity(a1 + 84, 0);
  *((_OWORD *)a1 + 47) = 0u;
  *((_OWORD *)a1 + 48) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  *((_OWORD *)a1 + 46) = 0u;
  *((_OWORD *)a1 + 44) = 0u;
  a1[98] = 0x3C23D70A00000000;
  *((_DWORD *)a1 + 198) = 1092616192;
  a1[100] = 0;
  *((unsigned char *)a1 + 808) = 0;
  *((_OWORD *)a1 + 51) = 0u;
  *((_DWORD *)a1 + 208) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)a1 + 53) = _Q0;
  *((unsigned char *)a1 + 864) = 0;
  return a1;
}

void re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  float v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 2uLL, 1uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionOptional<re::mtl::CullMode>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::CullMode>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::mtl::CullMode>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::CullMode>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::CullMode>::setHasValue(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3)
  {
    if (!*a2) {
      *a2 = 1;
    }
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::CullMode>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  double result = a1 + 1;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned char *re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned char *result, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*result) {
      *double result = 1;
    }
    result[1] = v2;
  }
  else if (*result)
  {
    *double result = 0;
  }
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::DirectionalLightShadowMapComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EB830;
  *(void *)(v1 + 28) = 0x40A000003F800000;
  *(unsigned char *)(v1 + 36) = 0;
  *(unsigned char *)(v1 + 38) = 1;
  double result = 524288.117;
  *(void *)(v1 + 40) = 0x412000003C23D70ALL;
  *(_DWORD *)(v1 + 48) = 1065353216;
  *(unsigned char *)(v1 + 52) = 1;
  return result;
}

uint64_t re::ecs2::VisualProxyCaptureHelper::visualProxyStartCapturing(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8 = a2;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = *(void *)(v8 + 24);
  }
  while (v8);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 16) + 56) + 32))(*(void *)(*(void *)(v9 + 16) + 56));
  uint64_t v11 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v10);
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result) {
    return result;
  }
  uint64_t v13 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v14 = *a3;
  if (*(unsigned __int8 *)(a1 + 48) != v14)
  {
    LOBYTE(v15) = a3[1];
    goto LABEL_11;
  }
  int v15 = a3[1];
  if (*(unsigned __int8 *)(a1 + 49) != v15)
  {
LABEL_11:
    *(unsigned char *)(a1 + 48) = v14;
    *(unsigned char *)(a1 + 49) = v15;
    re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=((unsigned __int8 *)(a1 + 56), (id *)a3 + 1);
    int v16 = 1;
    goto LABEL_12;
  }
  LOBYTE(v15) = *(unsigned char *)(a1 + 49);
  if (*(unsigned char *)(a1 + 56) && a3[8])
  {
    if (*(void *)(a1 + 64) == *((void *)a3 + 2)) {
      goto LABEL_36;
    }
    goto LABEL_11;
  }
  if (a3[8] | *(unsigned __int8 *)(a1 + 56)) {
    goto LABEL_11;
  }
LABEL_36:
  int v16 = 0;
LABEL_12:
  uint64_t v17 = (id *)(a3 + 40);
  if (*((void *)a3 + 5))
  {
    re::TextureHandle::metalTexture((os_unfair_lock_s **)(a1 + 32), &v26);
    BOOL v18 = *v17 != v26;
    if (v26) {
  }
    }
  else
  {
    BOOL v18 = 0;
  }
  if (*a3 || *(void *)(a1 + 40) && (!*(void *)(a1 + 32) ? (int v19 = 1) : (int v19 = v18), v19 != 1))
  {
    if (!v16) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v20 = *(id **)(v11 + 64);
    id v29 = 0;
    if (*v17)
    {
      NS::SharedPtr<MTL::Texture>::operator=(&v29, (void **)a3 + 5);
    }
    else
    {
      re::DynamicString::format((re::DynamicString *)"rootEntity-%s_scope", (re::DynamicString *)&v26, *(void *)(a2 + 280));
      if (v27) {
        long long v24 = *(unsigned char **)&v28[7];
      }
      else {
        long long v24 = v28;
      }
      re::TextureManager::createRenderTarget(v20, *((_DWORD *)a3 + 6), *((_DWORD *)a3 + 7), *((_DWORD *)a3 + 8), 1u, (uint64_t)v24, 5, 0xFFFF, &v25);
      NS::SharedPtr<MTL::Texture>::operator=(&v29, &v25);
      if (v25) {

      }
      if (v26 && (v27 & 1) != 0) {
        (*(void (**)(void))(*(void *)v26 + 40))();
      }
    }
    re::TextureManager::registerTexture((os_unfair_lock_s *)v20, &v29, (os_unfair_lock_s **)&v26);
    re::TextureHandle::operator=((re::TextureHandle *)(a1 + 32), (re::TextureHandle *)&v26);
    re::TextureHandle::invalidate((re::TextureHandle *)&v26);
    if (v29) {
  }
    }
  re::ecs2::Component::markDirty((void *)a1);
LABEL_29:
  *(void *)(v13 + 176) = a1;
  *(_WORD *)(v13 + 32) = *(_WORD *)a3;
  re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=((unsigned __int8 *)(v13 + 40), (id *)a3 + 1);
  int v21 = *((_DWORD *)a3 + 8);
  *(void *)(v13 + 56) = *((void *)a3 + 3);
  *(_DWORD *)(v13 + 64) = v21;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v13 + 72), (void **)a3 + 5);
  uint64_t v22 = *(const void **)(v13 + 80);
  uint64_t v23 = (const void *)*((void *)a3 + 6);
  *(void *)(v13 + 80) = v23;
  if (v23) {
    CFRetain(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::operator=(v13 + 88, (uint64_t)(a3 + 56));
  return re::FunctionBase<24ul,void ()(NS::SharedPtr<MTL::Texture>)>::operator=<24ul>(v13 + 136, a4);
}

unsigned __int8 *re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=(unsigned __int8 *a1, id *a2)
{
  int v3 = *a1;
  int v4 = *(unsigned __int8 *)a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    uint64_t v6 = (id *)(a1 + 8);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      objc_destroyWeak(v6);
      *((void *)a1 + 1) = 0;
      *a1 = 0;
    }
    else
    {
      if (v3) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v4 == 0;
      }
      if (v8)
      {
        re::ArcWeakPtr<re::ecs2::Entity>::operator=(v6, a2 + 1);
      }
      else
      {
        *a1 = 1;
        *((void *)a1 + 1) = 0;
        objc_copyWeak(v6, a2 + 1);
      }
    }
  }
  return a1;
}

BOOL re::ecs2::VisualProxyCaptureHelper::isUnderHighFidelityVisualProxyTree(BOOL this, const re::ecs2::Entity *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    while (1)
    {
      uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v3) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 24);
      if (!v2 || (*(unsigned char *)(v2 + 288) & 0x80) != 0) {
        return 0;
      }
    }
    return *(unsigned char *)(v3 + 48) != 0;
  }
  return this;
}

void *re::ecs2::VisualProxyCaptureHelper::markVisualProxyScope(re::ecs2::VisualProxyCaptureHelper *this, re::ecs2::Entity *a2)
{
  char v2 = (char)a2;
  uint64_t result = (void *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::VisualProxyCaptureHelper *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v4 = *((unsigned int *)result + 7);
  if (((1 << v2) & v4) == 0)
  {
    *((_DWORD *)result + 7) = v4 | (1 << v2);
    return re::ecs2::Component::markDirty(result);
  }
  return result;
}

uint64_t re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init(a1, v4, v5);
      re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, v8 + 16, (void *)(v8 + 16));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::addAsCopy(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 16);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void *re::ecs2::allocInfo_RayCastResultComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_280, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_280))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8BCD8, "RayCastResultComponent");
    __cxa_guard_release(&_MergedGlobals_280);
  }
  return &unk_26AF8BCD8;
}

void re::ecs2::initInfo_RayCastResultComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v19[0] = 0x7F36C6B09A4F476ELL;
  v19[1] = "RayCastResultComponent";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BCB0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8BCB0);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8BCB8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "hitWorldPosition";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8BCC0 = v10;
      int v11 = re::introspectionAllocator((re *)v10);
      uint64_t v12 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "hitWorldNormal";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x3000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF8BCC8 = v13;
      int v14 = re::introspectionAllocator((re *)v13);
      int v16 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "hitEntity";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF8BCD0 = v17;
      __cxa_guard_release(&qword_26AF8BCB0);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8BCB8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayCastResultComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RayCastResultComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RayCastResultComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RayCastResultComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

uint64_t re::internal::defaultConstruct<re::ecs2::RayCastResultComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::RayCastResultComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::RayCastResultComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RayCastResultComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RayCastResultComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayCastResultComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayCastResultComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayCastResultComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayCastResultComponent>, this);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::RayCastResultComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  char v2 = (id *)(a1 + 64);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EFCB0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  objc_initWeak(v2, 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v2);
  return a1;
}

void re::ecs2::introspect_ReferenceLoadingPolicy(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BD58, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF8BD58);
    if (v24)
    {
      id v25 = re::introspectionAllocator(v24);
      id v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)id v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Immediate";
      qword_26AF8BD88 = (uint64_t)v26;
      char v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + 16) = "OnDemand";
      qword_26AF8BD90 = v28;
      __cxa_guard_release(&qword_26AF8BD58);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BD60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8BD60))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF8BDE0, "ReferenceLoadingPolicy", 1, 1, 1, 1);
    qword_26AF8BDE0 = (uint64_t)&unk_26E715E00;
    qword_26AF8BE20 = (uint64_t)&re::ecs2::introspect_ReferenceLoadingPolicy(BOOL)::enumTable;
    dword_26AF8BDF0 = 9;
    __cxa_guard_release(&qword_26AF8BD60);
  }
  if ((_MergedGlobals_281 & 1) == 0)
  {
    _MergedGlobals_281 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF8BDE0, a2);
    uint64_t v30 = 0xC2DBD2F3D2E34846;
    uint64_t v31 = "ReferenceLoadingPolicy";
    v34[0] = 0x31CD534126;
    v34[1] = "uint8_t";
    char v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      uint64_t v4 = (unsigned int *)qword_26AF8BE20;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF8BE00 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ReferenceLoadingPolicy", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ReferenceLoadingState(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BD68, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF8BD68);
    if (v24)
    {
      id v25 = re::introspectionAllocator(v24);
      id v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)id v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "NotLoaded";
      qword_26AF8BD98 = (uint64_t)v26;
      char v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Loading";
      qword_26AF8BDA0 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "Loaded";
      qword_26AF8BDA8 = v30;
      __cxa_guard_release(&qword_26AF8BD68);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BD70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8BD70))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF8BE28, "ReferenceLoadingState", 1, 1, 1, 1);
    qword_26AF8BE28 = (uint64_t)&unk_26E715E00;
    qword_26AF8BE68 = (uint64_t)&re::ecs2::introspect_ReferenceLoadingState(BOOL)::enumTable;
    dword_26AF8BE38 = 9;
    __cxa_guard_release(&qword_26AF8BD70);
  }
  if ((byte_26AF8BD51 & 1) == 0)
  {
    byte_26AF8BD51 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF8BE28, a2);
    uint64_t v32 = 0x92AC409C83054700;
    uint64_t v33 = "ReferenceLoadingState";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    char v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF8BE68;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF8BE48 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ReferenceLoadingState", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_ReferenceComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BD78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8BD78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8BE70, "ReferenceComponent");
    __cxa_guard_release(&qword_26AF8BD78);
  }
  return &unk_26AF8BE70;
}

void re::ecs2::initInfo_ReferenceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v27[0] = 0x41AC874E67497C24;
  v27[1] = "ReferenceComponent";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BD80, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8BD80);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8BDB0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicString>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "entityName";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8BDB8 = v11;
      uint64_t v12 = (re::ecs2 *)re::introspectionAllocator((re *)v11);
      re::ecs2::introspect_ReferenceLoadingPolicy(v12, v13);
      uint64_t v14 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "policy";
      *(void *)(v14 + 16) = &qword_26AF8BDE0;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x6100000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8BDC0 = v14;
      int v15 = (re::ecs2 *)re::introspectionAllocator((re *)v14);
      re::ecs2::introspect_ReferenceLoadingState(v15, v16);
      uint64_t v17 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "state";
      *(void *)(v17 + 16) = &qword_26AF8BE28;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x6200000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF8BDC8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      long long v20 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "subscene";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x6800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF8BDD0 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::IntrospectionInfo<re::DynamicString>::get(1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "bundlePath";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x4000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF8BDD8 = v25;
      __cxa_guard_release(&qword_26AF8BD80);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF8BDB0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ReferenceComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ReferenceComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ReferenceComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ReferenceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v26 = v28;
}

uint64_t re::internal::defaultConstruct<re::ecs2::ReferenceComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ReferenceComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::ReferenceComponent>(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v4 = a3 + 13;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a3 + 13));
  objc_destroyWeak(v4);
  a3[13] = 0;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 8));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::ReferenceComponent>(id *a1)
{
  char v2 = a1 + 13;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 13));
  objc_destroyWeak(v2);
  a1[13] = 0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ReferenceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReferenceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReferenceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReferenceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReferenceComponent>, this);
}

uint64_t re::ecs2::ReferenceComponent::makeSyncInfo(re::ecs2::ReferenceComponent *this)
{
  uint64_t v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetTypeId();
  char v2 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    char v2 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v4)
    {
      re::introspect<re::ecs2::ReferenceComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"ReferenceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReferenceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReferenceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReferenceComponent>, 0);
      char v2 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  re::getPrettyTypeName((re *)v2[255], (const re::IntrospectionBase *)&v5);
  RESyncSyncableTypeInfoSetDebugName();
  if (v5 && (v6 & 1) != 0) {
    (*(void (**)(void))(*(void *)v5 + 40))();
  }
  RESyncSyncableTypeInfoSetSupportsNetworkSync();
  return v1;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::ReferenceComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  char v2 = (void *)(a1 + 64);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v3 = (void *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E6F34F8;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)char v2 = 0u;
  re::DynamicString::setCapacity(v2, 0);
  *(_WORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 98) = 0;
  objc_initWeak((id *)(a1 + 104), 0);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 104));
  return a1;
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::~PhysicsJointDefinitionAndRuntimeCollection(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this)
{
  *(void *)this = &unk_26E703A38;
  uint64_t v1 = (char *)this + 8;
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 48);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E703A38;
  uint64_t v1 = (char *)this + 8;
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 48);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)v1);
  JUMPOUT(0x237DBCBD0);
}

char *re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::runtimeJoint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, unint64_t a2)
{
  if (*((void *)this + 8) <= a2) {
    return 0;
  }
  WeakRetained = (char *)objc_loadWeakRetained((id *)(*((void *)this + 10) + 8 * a2));
  if (!WeakRetained) {
    return 0;
  }
  uint64_t v3 = WeakRetained - 8;

  return v3;
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::addJoint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, const re::ecs2::PhysicsJointDefinition *a2, const re::ecs2::Scene *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(this, 1);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::add((re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *)((char *)this + 8), (uint64_t)a2);
  inited = (_anonymous_namespace_ *)objc_initWeak((id *)&v24, 0);
  unint64_t v7 = *((void *)this + 7);
  unint64_t v8 = *((void *)this + 8);
  if (v8 >= v7)
  {
    unint64_t v9 = v8 + 1;
    if (v7 < v8 + 1)
    {
      if (*((void *)this + 6))
      {
        uint64_t v10 = 2 * v7;
        BOOL v11 = v7 == 0;
        unint64_t v12 = 8;
        if (!v11) {
          unint64_t v12 = v10;
        }
        if (v12 <= v9) {
          unint64_t v13 = v9;
        }
        else {
          unint64_t v13 = v12;
        }
        re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((void *)this + 6, v13);
      }
      else
      {
        re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((void *)this + 6, v9);
        ++*((_DWORD *)this + 18);
      }
    }
    unint64_t v8 = *((void *)this + 8);
  }
  uint64_t v14 = (id *)(*((void *)this + 10) + 8 * v8);
  id *v14 = 0;
  objc_moveWeak(v14, (id *)&v24);
  ++*((void *)this + 8);
  ++*((_DWORD *)this + 18);
  objc_destroyWeak((id *)&v24);
  uuid_generate_random((unsigned __int8 *)&v24);
  unint64_t v15 = (*(void *)v25 + (v24 << 6) + (v24 >> 2) - 0x61C8864680B583E9) ^ v24;
  *((void *)this + 11) = v15;
  *((void *)this + 12) = v15;
  uint64_t v16 = re::ecs2::EntityHandle::resolve((uint64_t)a2 + 16, (char *)a3);
  uint64_t v17 = v16;
  if (v16) {
    uint64_t v18 = (const char *)*((void *)v16 + 35);
  }
  else {
    uint64_t v18 = "null";
  }
  char v19 = re::ecs2::EntityHandle::resolve((uint64_t)a2 + 96, (char *)a3);
  long long v20 = v19;
  if (v19) {
    uint64_t v21 = (const char *)*((void *)v19 + 35);
  }
  else {
    uint64_t v21 = "null";
  }
  uint64_t v22 = *re::physicsLogObjects((re *)v19);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = *((_DWORD *)this + 6) - 1;
    LODWORD(v24) = 67110146;
    HIDWORD(v24) = v23;
    *(_WORD *)uint64_t v25 = 2080;
    *(void *)&void v25[2] = v18;
    __int16 v26 = 2048;
    char v27 = v17;
    __int16 v28 = 2080;
    uint64_t v29 = v21;
    __int16 v30 = 2048;
    uint64_t v31 = v20;
    _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::addJoint(): index=%d, Entity %s (%p), Entity %s (%p)", (uint8_t *)&v24, 0x30u);
  }
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((void *)this + 12) != *((void *)this + 11))
  {
    uint64_t v4 = *re::physicsLogObjects(this);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *((void *)this + 11);
      uint64_t v5 = *((void *)this + 12);
      int v16 = 134218240;
      uint64_t v17 = v5;
      __int16 v18 = 2048;
      uint64_t v19 = v6;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(): m_lastGuid=%llu m_guid=%llu", (uint8_t *)&v16, 0x16u);
    }
    if (*((void *)this + 8))
    {
      unint64_t v7 = 0;
      do
        re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, v7++, a2);
      while (*((void *)this + 8) > v7);
    }
    unint64_t v8 = *((void *)this + 3);
    objc_initWeak((id *)&v16, 0);
    unint64_t v9 = *((void *)this + 8);
    if (v9 >= v8)
    {
      if (v9 <= v8)
      {
LABEL_18:
        objc_destroyWeak((id *)&v16);
        *((void *)this + 12) = *((void *)this + 11);
        return;
      }
      uint64_t v13 = 8 * v8;
      unint64_t v14 = v8;
      do
      {
        uint64_t v15 = *((void *)this + 10);
        objc_destroyWeak((id *)(v15 + v13));
        *(void *)(v15 + 8 * v14++) = 0;
        v13 += 8;
      }
      while (v14 < *((void *)this + 8));
    }
    else
    {
      if (*((void *)this + 7) < v8)
      {
        re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((void *)this + 6, v8);
        unint64_t v9 = *((void *)this + 8);
      }
      unint64_t v10 = v8 - v9;
      if (v8 > v9)
      {
        uint64_t v11 = 8 * v9;
        do
        {
          unint64_t v12 = (id *)(*((void *)this + 10) + v11);
          *unint64_t v12 = 0;
          objc_copyWeak(v12, (id *)&v16);
          v11 += 8;
          --v10;
        }
        while (v10);
      }
    }
    *((void *)this + 8) = v8;
    ++*((_DWORD *)this + 18);
    goto LABEL_18;
  }
}

__n128 re::DynamicArray<re::ecs2::PhysicsJointDefinition>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 240 * v4;
  *(_DWORD *)uint64_t v5 = *(_DWORD *)a2;
  re::ecs2::EntityHandle::EntityHandle((id *)(v5 + 16), (const re::ecs2::EntityHandle *)(a2 + 16));
  re::StringID::StringID((re::StringID *)(v5 + 40), (const StringID *)(a2 + 40));
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 80) = v6;
  re::ecs2::EntityHandle::EntityHandle((id *)(v5 + 96), (const re::ecs2::EntityHandle *)(a2 + 96));
  re::StringID::StringID((re::StringID *)(v5 + 120), (const StringID *)(a2 + 120));
  long long v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v5 + 160) = v7;
  __n128 result = *(__n128 *)(a2 + 176);
  long long v9 = *(_OWORD *)(a2 + 192);
  long long v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v5 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(v5 + 192) = v9;
  *(_OWORD *)(v5 + 208) = v10;
  *(__n128 *)(v5 + 176) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteJoint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, unint64_t a2, int a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(this, a3);
  if (*((void *)this + 3) <= a2)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    memset(out, 0, sizeof(out));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    long long v34 = 0u;
    long long v35 = 0u;
    memset(out, 0, sizeof(out));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *((void *)this + 5);
  WeakRetained = (char *)objc_loadWeakRetained((id *)(v6 + 240 * a2 + 16));
  if (WeakRetained)
  {
    unint64_t v8 = WeakRetained;
    long long v9 = WeakRetained - 8;

    long long v10 = (const char *)*((void *)v8 + 34);
  }
  else
  {
    long long v9 = 0;
    long long v10 = "null";
  }
  uint64_t v11 = (char *)objc_loadWeakRetained((id *)(v6 + 240 * a2 + 96));
  if (v11)
  {
    unint64_t v12 = v11;
    uint64_t v13 = v11 - 8;

    unint64_t v14 = (const char *)*((void *)v12 + 34);
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = "null";
  }
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, a2, a3);
  unint64_t v15 = *((void *)this + 3);
  if (v15 <= a2) {
    goto LABEL_23;
  }
  uint64_t v16 = *((void *)this + 5);
  if (v15 - 1 > a2 && v16 + 240 * a2 + 240 != v16 + 240 * v15)
  {
    uint64_t v17 = 240 * a2;
    uint64_t v18 = 240 * v15 - 240;
    do
    {
      uint64_t v19 = v16 + v17;
      *(_DWORD *)(v16 + 240 * a2) = *(_DWORD *)(v16 + 240 * a2 + 240);
      re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(v16 + v17 + 16), (id *)(v16 + v17 + 256));
      re::StringID::operator=((unint64_t *)(v19 + 40), (uint64_t *)(v19 + 280));
      long long v20 = *(_OWORD *)(v16 + v17 + 320);
      *(_OWORD *)(v19 + 64) = *(_OWORD *)(v19 + 304);
      *(_OWORD *)(v19 + 80) = v20;
      re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(v19 + 96), (id *)(v19 + 336));
      re::StringID::operator=((unint64_t *)(v19 + 120), (uint64_t *)(v19 + 360));
      long long v21 = *(_OWORD *)(v16 + v17 + 400);
      *(_OWORD *)(v19 + 144) = *(_OWORD *)(v19 + 384);
      *(_OWORD *)(v19 + 160) = v21;
      long long v22 = *(_OWORD *)(v16 + v17 + 432);
      *(_OWORD *)(v19 + 176) = *(_OWORD *)(v19 + 416);
      *(_OWORD *)(v19 + 192) = v22;
      *(_OWORD *)(v19 + 208) = *(_OWORD *)(v19 + 448);
      *(_OWORD *)(v19 + 220) = *(_OWORD *)(v19 + 460);
      v16 += 240;
      v18 -= 240;
    }
    while (v17 != v18);
    unint64_t v15 = *((void *)this + 3);
    uint64_t v16 = *((void *)this + 5);
  }
  uint64_t v23 = v16 + 240 * v15;
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(v23 - 144));
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(v23 - 224));
  --*((void *)this + 3);
  ++*((_DWORD *)this + 8);
  unint64_t v24 = *((void *)this + 8);
  if (v24 <= a2)
  {
LABEL_24:
    long long v34 = 0u;
    long long v35 = 0u;
    memset(out, 0, sizeof(out));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v24 - 1 > a2)
  {
    uint64_t v25 = *((void *)this + 10);
    __int16 v26 = (id *)(v25 + 8 * a2);
    char v27 = (id *)(v25 + 8 * v24);
    if (v26 + 1 != v27)
    {
      do
      {
        objc_destroyWeak(v26);
        id *v26 = 0;
        __int16 v28 = v26 + 2;
        objc_moveWeak(v26, v26 + 1);
        ++v26;
      }
      while (v28 != v27);
      unint64_t v24 = *((void *)this + 8);
    }
  }
  uint64_t v29 = *((void *)this + 10) + 8 * v24;
  objc_destroyWeak((id *)(v29 - 8));
  *(void *)(v29 - 8) = 0;
  --*((void *)this + 8);
  ++*((_DWORD *)this + 18);
  uuid_generate_random(out);
  uint64_t v30 = (*(void *)&out[8] + (*(void *)out << 6) + (*(void *)out >> 2) - 0x61C8864680B583E9) ^ *(void *)out;
  *((void *)this + 11) = v30;
  *((void *)this + 12) = v30;
  uint64_t v32 = *re::physicsLogObjects(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)out = 67110146;
    *(_DWORD *)&out[4] = a2;
    *(_WORD *)&out[8] = 2080;
    *(void *)&out[10] = v10;
    *(_WORD *)&out[18] = 2048;
    *(void *)&out[20] = v9;
    *(_WORD *)&out[28] = 2080;
    *(void *)&out[30] = v14;
    *(_WORD *)&out[38] = 2048;
    *(void *)&out[40] = v13;
    _os_log_impl(&dword_233120000, v32, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::deleteJoint(): index=%d, Entity %s (%p), Entity %s (%p)", out, 0x30u);
  }
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, unint64_t a2, int a3)
{
  if (*((void *)this + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  WeakRetained = objc_loadWeakRetained((id *)(*((void *)this + 10) + 8 * a2));
  if (!WeakRetained) {
    return;
  }
  long long v7 = WeakRetained;

  uint64_t v8 = v7[5];
  if (v8)
  {
    re::PhysicsJointCollection::deleteJoint(v8 + 136, (re::Constraint *)(v7 - 1), a3);
    v7[5] = 0;
  }
  if (*((void *)this + 8) <= a2)
  {
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v9 = (id *)(*((void *)this + 10) + 8 * a2);
  objc_destroyWeak(v9);
  *long long v9 = 0;
}

uint64_t re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::setJoints(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *a1, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(a1, 1);
  uint64_t v11 = *re::physicsLogObjects(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *((void *)a1 + 3);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v12;
    _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(): Begin, new joint count=%d, existing joint count=%d", buf, 0xEu);
  }
  uint64_t v42 = 0;
  v39[1] = 0;
  long long v40 = 0;
  v39[0] = 0;
  int v41 = 0;
  unint64_t v13 = *((void *)a1 + 3);
  buf[0] = 0;
  unint64_t v14 = (re *)re::DynamicArray<BOOL>::resize(v39, v13, buf);
  uint64_t v38 = 0;
  v35[1] = 0;
  unint64_t v36 = 0;
  unint64_t v34 = 0;
  v35[0] = 0;
  int v37 = 0;
  if (a3)
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = a2 + 240 * v16;
      uint64_t v18 = re::ecs2::EntityHandle::resolve(v17 + 16, a4);
      uint64_t v19 = v18;
      if (v18) {
        long long v20 = (const char *)*((void *)v18 + 35);
      }
      else {
        long long v20 = "null";
      }
      long long v21 = re::ecs2::EntityHandle::resolve(a2 + 240 * v16 + 96, a4);
      long long v22 = v21;
      if (v21) {
        uint64_t v23 = (const char *)*((void *)v21 + 35);
      }
      else {
        uint64_t v23 = "null";
      }
      if (!*((void *)a1 + 3)) {
        goto LABEL_24;
      }
      unint64_t v5 = 0;
      while (1)
      {
        unint64_t v24 = re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::joint(a1, v5);
        long long v21 = (char *)re::ecs2::PhysicsJointDefinition::operator==(v17, v24);
        if (v21) {
          break;
        }
        if (++v5 >= *((void *)a1 + 3)) {
          goto LABEL_24;
        }
      }
      unint64_t v4 = v40;
      if ((unint64_t)v40 <= v5) {
        goto LABEL_49;
      }
      if (*(unsigned char *)(v42 + v5))
      {
        uint64_t v25 = *re::physicsLogObjects((re *)v21);
        long long v21 = (char *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        if (v21)
        {
          *(_DWORD *)buf = 67110402;
          *(_DWORD *)&buf[4] = v34;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v5;
          *(_WORD *)&buf[14] = 2080;
          *(void *)&buf[16] = v20;
          *(_WORD *)&buf[24] = 2048;
          *(void *)&buf[26] = v19;
          *(_WORD *)&buf[34] = 2080;
          *(void *)&buf[36] = v23;
          *(_WORD *)&buf[44] = 2048;
          *(void *)&buf[46] = v22;
          _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(: New joint %d matches an already matched existing joint %d, Entity %s (%p), Entity %s (%p)", buf, 0x36u);
        }
      }
      unint64_t v4 = v40;
      if ((unint64_t)v40 <= v5) {
        goto LABEL_50;
      }
      *(unsigned char *)(v42 + v5) = 1;
      if (v5 == -1)
      {
LABEL_24:
        unint64_t v4 = *re::physicsLogObjects((re *)v21);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v34;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = v20;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v19;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v23;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&buf[40] = v22;
          _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(: New joint %d does not match any existing joint, Entity %s (%p), Entity %s (%p)", buf, 0x30u);
        }
        unint64_t v14 = (re *)re::DynamicArray<unsigned long>::add(v35, &v34);
      }
      else
      {
        unint64_t v4 = *re::physicsLogObjects((re *)v21);
        unint64_t v14 = (re *)os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        if (v14)
        {
          *(_DWORD *)buf = 67110402;
          *(_DWORD *)&buf[4] = v34;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v5;
          *(_WORD *)&buf[14] = 2080;
          *(void *)&buf[16] = v20;
          *(_WORD *)&buf[24] = 2048;
          *(void *)&buf[26] = v19;
          *(_WORD *)&buf[34] = 2080;
          *(void *)&buf[36] = v23;
          *(_WORD *)&buf[44] = 2048;
          *(void *)&buf[46] = v22;
          _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(: New joint %d matches an existing joint %d, Entity %s (%p), Entity %s (%p)", buf, 0x36u);
        }
      }
      unint64_t v16 = v34 + 1;
      unint64_t v34 = v16;
    }
    while (v16 < a3);
  }
  if ((int)*((void *)a1 + 3) >= 1)
  {
    uint64_t v26 = *((void *)a1 + 3) + 1;
    while (1)
    {
      unint64_t v27 = (v26 - 2);
      __int16 v28 = v40;
      if ((unint64_t)v40 <= v27) {
        break;
      }
      if (!*(unsigned char *)(v42 + v27)) {
        re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteJoint(a1, (v26 - 2), 1);
      }
      if ((unint64_t)--v26 <= 1) {
        goto LABEL_34;
      }
    }
    uint64_t v43 = 0;
    long long v53 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v44 = 136315906;
    uint64_t v45 = "operator[]";
    __int16 v46 = 1024;
    int v47 = 789;
    __int16 v48 = 2048;
    unint64_t v49 = (v26 - 2);
    __int16 v50 = 2048;
    uint64_t v51 = v28;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_48;
  }
LABEL_34:
  if (v36)
  {
    uint64_t v29 = 0;
    while (1)
    {
      unint64_t v30 = *(void *)(v38 + 8 * v29);
      if (a3 <= v30) {
        break;
      }
      re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::addJoint(a1, (const re::ecs2::PhysicsJointDefinition *)(a2 + 240 * v30), (const re::ecs2::Scene *)a4);
      if (++v29 >= v36) {
        goto LABEL_38;
      }
    }
LABEL_48:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v30, a3);
    _os_crash();
    __break(1u);
LABEL_49:
    uint64_t v43 = 0;
    long long v53 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v44 = 136315906;
    uint64_t v45 = "operator[]";
    __int16 v46 = 1024;
    int v47 = 789;
    __int16 v48 = 2048;
    unint64_t v49 = v5;
    __int16 v50 = 2048;
    uint64_t v51 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_50:
    uint64_t v43 = 0;
    long long v53 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v44 = 136315906;
    uint64_t v45 = "operator[]";
    __int16 v46 = 1024;
    int v47 = 789;
    __int16 v48 = 2048;
    unint64_t v49 = v5;
    __int16 v50 = 2048;
    uint64_t v51 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_38:
  uint64_t v31 = *re::physicsLogObjects(v14);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = *((void *)a1 + 3);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v32;
    _os_log_impl(&dword_233120000, v31, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(): End, resulting joint count=%d", buf, 8u);
  }
  if (v35[0] && v38) {
    (*(void (**)(void))(*(void *)v35[0] + 40))();
  }
  uint64_t result = v39[0];
  if (v39[0])
  {
    if (v42) {
      return (*(uint64_t (**)(void))(*(void *)v39[0] + 40))();
    }
  }
  return result;
}

void *re::DynamicArray<BOOL>::resize(void *result, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = result;
  unint64_t v5 = result[2];
  if (v5 >= a2)
  {
    if (v5 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<BOOL>::setCapacity(result, a2);
      unint64_t v5 = v4[2];
    }
    unint64_t v7 = a2 - v5;
    if (a2 > v5)
    {
      uint64_t v8 = (unsigned char *)(v4[4] + v5);
      do
      {
        *v8++ = *a3;
        --v7;
      }
      while (v7);
    }
  }
  v4[2] = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

unint64_t re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::joint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, unint64_t a2)
{
  if (*((void *)this + 3) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 5) + 240 * a2;
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::auditAndSyncRuntimeJoints(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, int a2, re::PhysicsSimulation *a3, re::ecs2::Scene *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(this, 0);
  if ((a2 & 1) == 0 && *((void *)this + 8))
  {
    unint64_t v9 = 0;
    do
      re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, v9++, 0);
    while (*((void *)this + 8) > v9);
  }
  if (a3 && a4)
  {
    if ((int)*((void *)this + 3) >= 1)
    {
      unint64_t v10 = *((void *)this + 3) + 1;
      do
      {
        unint64_t v11 = (v10 - 2);
        unint64_t v12 = re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::joint(this, v11);
        unint64_t v13 = re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::runtimeJoint(this, v11);
        long long v22 = 0;
        uint64_t v23 = 0;
        memset(buf, 0, sizeof(buf));
        *(void *)&long long v26 = 0;
        *((void *)&v26 + 1) = 0x3F80000000000000;
        memset(v24, 0, 24);
        *(void *)&v24[24] = 0x3F80000000000000;
        unsigned int DataToCreateRuntimeJoint = re::ecs2::PhysicsJointDefinition::getDataToCreateRuntimeJoint(v12, (uint64_t)a3, (uint64_t)a4, (uint64_t)v13, &v23, (float32x4_t *)buf, &v22, (float32x4_t *)v24);
        if (DataToCreateRuntimeJoint == 3)
        {
          re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteJoint(this, (v10 - 2), 0);
        }
        else
        {
          unsigned int v16 = DataToCreateRuntimeJoint;
          if (DataToCreateRuntimeJoint == 2)
          {
            if (v13) {
              re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, (v10 - 2), 0);
            }
          }
          else
          {
            if (DataToCreateRuntimeJoint == 1 && v13)
            {
              re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, (v10 - 2), 0);
              unint64_t v13 = 0;
            }
            if (v16 <= 1 && !v13 && a2)
            {
              unint64_t v17 = *((void *)this + 3);
              if (v17 <= v11)
              {
                uint64_t v23 = 0;
                long long v28 = 0u;
                long long v29 = 0u;
                long long v26 = 0u;
                long long v27 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)unint64_t v24 = 136315906;
                *(void *)&v24[4] = "operator[]";
                *(_WORD *)&v24[12] = 1024;
                *(_DWORD *)&v24[14] = 789;
                *(_WORD *)&v24[18] = 2048;
                *(void *)&v24[20] = (v10 - 2);
                *(_WORD *)&v24[28] = 2048;
                *(void *)&v24[30] = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_35:
                uint64_t v23 = 0;
                long long v28 = 0u;
                long long v29 = 0u;
                long long v26 = 0u;
                long long v27 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)unint64_t v24 = 136315906;
                *(void *)&v24[4] = "operator[]";
                *(_WORD *)&v24[12] = 1024;
                *(_DWORD *)&v24[14] = 789;
                *(_WORD *)&v24[18] = 2048;
                *(void *)&v24[20] = (v10 - 2);
                *(_WORD *)&v24[28] = 2048;
                *(void *)&v24[30] = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              RuntimeJoint = re::ecs2::PhysicsRuntimeJointFactory::createRuntimeJoint((re::ecs2::PhysicsRuntimeJointFactory *)(*((void *)this + 5) + 240* v11), a3, a4, v15);
              unint64_t v17 = *((void *)this + 8);
              if (v17 <= v11) {
                goto LABEL_35;
              }
              if (RuntimeJoint) {
                uint64_t v19 = (char *)RuntimeJoint + 8;
              }
              else {
                uint64_t v19 = 0;
              }
              objc_storeWeak((id *)(*((void *)this + 10) + 8 * v11), v19);
            }
          }
        }
        --v10;
      }
      while (v10 > 1);
    }
  }
  else
  {
    if (*((void *)this + 8))
    {
      unint64_t v20 = 0;
      do
        re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, v20++, 0);
      while (*((void *)this + 8) > v20);
    }
    long long v21 = *re::physicsLogObjects(v8);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::auditAndSyncRuntimeJoints(): Simulation or scene is null", buf, 2u);
    }
  }
}

void *re::ecs2::allocInfo_PhysicsJointDefinitionAndRuntimeCollection(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BEF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8BEF8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8BF58, "PhysicsJointDefinitionAndRuntimeCollection");
    __cxa_guard_release(&qword_26AF8BEF8);
  }
  return &unk_26AF8BF58;
}

void re::ecs2::initInfo_PhysicsJointDefinitionAndRuntimeCollection(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v26 = 0x6B0B6CA5207AC9EALL;
  v27[0] = "PhysicsJointDefinitionAndRuntimeCollection";
  re::StringID::destroyString((re::StringID *)&v26);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BEF0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8BEF0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8BF00, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8BF00))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8BF18);
        qword_26AF8BF18 = (uint64_t)&unk_26E703A68;
        __cxa_guard_release(&qword_26AF8BF00);
      }
      if ((_MergedGlobals_282 & 1) == 0)
      {
        uint64_t v6 = re::ecs2::introspect_PhysicsJointDefinition((re::IntrospectionBase **)1);
        if ((_MergedGlobals_282 & 1) == 0)
        {
          uint64_t v7 = v6;
          _MergedGlobals_282 = 1;
          int v8 = *(_DWORD *)(v6 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8BF18, 0);
          qword_26AF8BF28 = 0x2800000003;
          dword_26AF8BF30 = v8;
          word_26AF8BF34 = 0;
          *(void *)&xmmword_26AF8BF38 = 0;
          *((void *)&xmmword_26AF8BF38 + 1) = 0xFFFFFFFFLL;
          qword_26AF8BF48 = v7;
          unk_26AF8BF50 = 0;
          qword_26AF8BF18 = (uint64_t)&unk_26E703A68;
          re::IntrospectionRegistry::add(v9, v10);
          re::getPrettyTypeName((re *)&qword_26AF8BF18, (const re::IntrospectionBase *)&v26);
          if (v27[0]) {
            unint64_t v11 = (const char *)v27[1];
          }
          else {
            unint64_t v11 = (char *)v27 + 1;
          }
          if (v26 && (v27[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v26 + 40))();
          }
          long long v23 = *(_OWORD *)(v7 + 32);
          unint64_t v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v24);
          if (v12)
          {
            uint64_t v13 = *v12;
            *((void *)&v22 + 1) = v13;
          }
          else
          {
            long long v25 = v23;
            re::TypeBuilder::beginListType((uint64_t)&v26, v24, 1, 0x28uLL, 8uLL, &v25);
            re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v26, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v26, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v14);
          }
          xmmword_26AF8BF38 = v22;
          re::StringID::destroyString((re::StringID *)v24);
        }
      }
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "m_joints";
      *(void *)(v15 + 16) = &qword_26AF8BF18;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x800000001;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8BF08 = v15;
      unsigned int v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_uint64_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "m_guid";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x5800000002;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8BF10 = v19;
      __cxa_guard_release(&qword_26AF8BEF0);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8BF08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E703A38;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>(uint64_t a1)
{
  *(void *)a1 = &unk_26E703A38;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsJointDefinitionAndRuntimeCollection(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsJointDefinitionAndRuntimeCollection", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsJointDefinitionAndRuntimeCollection, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsJointDefinitionAndRuntimeCollection, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>, this);
}

uint64_t re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 240 * v4;
        uint64_t v6 = (re::ecs2::PinHandle *)(v3 + 96);
        do
        {
          re::ecs2::PinHandle::~PinHandle(v6);
          re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)((char *)v6 - 80));
          uint64_t v6 = (re::ecs2::PinHandle *)((char *)v6 + 240);
          v5 -= 240;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::ecs2::PhysicsJointDefinition>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xF0uLL))
        {
          uint64_t v2 = 240 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 240 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 240, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = v8 + 240 * v9;
        do
        {
          unint64_t v12 = &v7[v10 / 8];
          uint64_t v13 = v8 + v10;
          LODWORD(v7[v10 / 8]) = *(_DWORD *)(v8 + v10);
          re::ecs2::EntityHandle::EntityHandle((id *)&v7[v10 / 8 + 2], (const re::ecs2::EntityHandle *)(v8 + v10 + 16));
          re::StringID::StringID((re::StringID *)&v7[v10 / 8 + 5], (const StringID *)(v8 + v10 + 40));
          long long v14 = *(_OWORD *)(v8 + v10 + 80);
          v12[4] = *(_OWORD *)(v8 + v10 + 64);
          v12[5] = v14;
          re::ecs2::EntityHandle::EntityHandle((id *)&v7[v10 / 8 + 12], (const re::ecs2::EntityHandle *)(v8 + v10 + 96));
          re::StringID::StringID((re::StringID *)&v7[v10 / 8 + 15], (const StringID *)(v8 + v10 + 120));
          long long v15 = *(_OWORD *)(v8 + v10 + 160);
          v12[9] = *(_OWORD *)(v8 + v10 + 144);
          v12[10] = v15;
          long long v16 = *(_OWORD *)(v8 + v10 + 176);
          long long v17 = *(_OWORD *)(v8 + v10 + 192);
          long long v18 = *(_OWORD *)(v8 + v10 + 208);
          *(_OWORD *)((char *)v12 + 220) = *(_OWORD *)(v8 + v10 + 220);
          v12[12] = v17;
          v12[13] = v18;
          v12[11] = v16;
          re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(v8 + v10 + 96));
          re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(v8 + v10 + 16));
          v10 += 240;
        }
        while (v13 + 240 != v11);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::PhysicsJointDefinition>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition(&v17);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::growCapacity((void *)a4, v8 + 1);
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v9 = *(void *)(a4 + 32) + 240 * v8;
  *(_DWORD *)uint64_t v9 = v17;
  re::ecs2::EntityHandle::EntityHandle((id *)(v9 + 16), (const re::ecs2::EntityHandle *)v18);
  re::StringID::StringID((re::StringID *)(v9 + 40), (const StringID *)v19);
  long long v10 = *(_OWORD *)&v19[5];
  *(_OWORD *)(v9 + 64) = *(_OWORD *)&v19[3];
  *(_OWORD *)(v9 + 80) = v10;
  re::ecs2::EntityHandle::EntityHandle((id *)(v9 + 96), (const re::ecs2::EntityHandle *)v20);
  re::StringID::StringID((re::StringID *)(v9 + 120), (const StringID *)v21);
  long long v11 = *(_OWORD *)&v21[5];
  *(_OWORD *)(v9 + 144) = *(_OWORD *)&v21[3];
  *(_OWORD *)(v9 + 160) = v11;
  long long v12 = *(_OWORD *)&v21[7];
  long long v13 = *(_OWORD *)&v21[9];
  long long v14 = v22[0];
  *(_OWORD *)(v9 + 220) = *(_OWORD *)((char *)v22 + 12);
  *(_OWORD *)(v9 + 192) = v13;
  *(_OWORD *)(v9 + 208) = v14;
  *(_OWORD *)(v9 + 176) = v12;
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)v20);
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)v18);
  long long v15 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 240 * *(void *)(a4 + 16) - 240);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v15);
  return v15;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 240 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 240 * a3;
}

void re::DynamicArray<re::ecs2::PhysicsJointDefinition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v7 = 240 * a2 + 96;
    unint64_t v8 = a2;
    do
    {
      re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(*(void *)(a1 + 32) + v7));
      re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(v9 - 80));
      ++v8;
      v7 += 240;
    }
    while (v8 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 240 * v4;
      do
      {
        re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition((id *)(*(void *)(a1 + 32) + v6));
        v6 += 240;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

id *re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition(id *this)
{
  *(_DWORD *)this = 0;
  uint64_t v2 = (re::ecs2::EntityHandle *)(this + 2);
  objc_initWeak(this + 2, 0);
  this[3] = 0;
  this[4] = 0;
  re::ecs2::EntityHandle::reset(v2);
  this[5] = 0;
  this[6] = "";
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[11] = (id)0x3F80000000000000;
  objc_initWeak(this + 12, 0);
  this[13] = 0;
  this[14] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(this + 12));
  this[15] = 0;
  this[16] = "";
  this[18] = 0;
  this[19] = 0;
  this[20] = 0;
  this[21] = (id)0x3F80000000000000;
  *((unsigned char *)this + 176) = 0;
  for (uint64_t i = 180; i != 204; i += 8)
    *(id *)((char *)this + i) = (id)0xBF8000003F800000;
  do
  {
    *(id *)((char *)this + i) = (id)0xBF8000003F800000;
    i += 8;
  }
  while (i != 228);
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = 240 * v8;
      long long v10 = (re::ecs2::PinHandle *)(*(void *)(a1 + 32) + 96);
      do
      {
        re::ecs2::PinHandle::~PinHandle(v10);
        re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)((char *)v10 - 80));
        long long v10 = (re::ecs2::PinHandle *)((char *)v10 + 240);
        v9 -= 240;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      long long v13 = *(char **)(a1 + 32);
      uint64_t v14 = 240 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 240;
        v14 -= 240;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 240 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 240 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::ecs2::allocInfo_SceneUnderstandingMeshSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_283, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_283))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8BFD8, "SceneUnderstandingMeshSystem");
    __cxa_guard_release(&_MergedGlobals_283);
  }
  return &unk_26AF8BFD8;
}

void re::ecs2::initInfo_SceneUnderstandingMeshSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x3CF52F60DF61D568;
  v5[1] = "SceneUnderstandingMeshSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_SceneUnderstandingMeshSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneUnderstandingMeshSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneUnderstandingMeshSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::SceneUnderstandingMeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::SceneUnderstandingMeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingMeshSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingMeshSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::SceneUnderstandingMeshSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E703B00;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::SceneUnderstandingMeshSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingMeshSystem>(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E703B00;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingMeshSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SceneUnderstandingMeshSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingMeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingMeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingMeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingMeshSystem>, this);
}

uint64_t re::ecs2::SceneUnderstandingMeshSystem::willAddSystemToECSService(re::ecs2::SceneUnderstandingMeshSystem *this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::SceneUnderstandingService>(v2);
  *((void *)this + 20) = result;
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::SceneUnderstandingService>(uint64_t a1)
{
  {
    re::introspect<re::SceneUnderstandingService>(void)::info = re::introspect_SceneUnderstandingService(0);
  }
  uint64_t v2 = re::introspect<re::SceneUnderstandingService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

double re::ecs2::SceneUnderstandingMeshSystem::willRemoveSystemFromECSService(re::ecs2::SceneUnderstandingMeshSystem *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::SceneUnderstandingMeshSystem::updateScenes(re::ProfilerConfig *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)a1;
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a1 + 13);
  if (!v4 || (*(unsigned char *)(v4 + 424) & 0x10) != 0)
  {
    if (*((void *)a1 + 20))
    {
      uint64_t v5 = *(void *)(a2 + 8);
      if (v5)
      {
        long long v6 = *(uint64_t **)a2;
        uint64_t v7 = 8 * v5;
        unint64_t v8 = (unint64_t)re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        int64x2_t v46 = vdupq_n_s64(1uLL);
        uint64_t v9 = &unk_2687A0000;
        while (1)
        {
          uint64_t v10 = *v6;
          isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
          if (isStatisticCollectionEnabled)
          {
            uint64_t v12 = re::profilerThreadContext(isStatisticCollectionEnabled);
            if (*(void *)(v12 + 152)) {
              uint64_t v47 = mach_absolute_time();
            }
          }
          else
          {
            uint64_t v12 = 0;
          }
          re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v56, 3093, v3);
          uint64_t v14 = *(void *)(v3 + 112);
          if (!v14) {
            break;
          }
          uint64_t v15 = *(void *)(v14 + 104);
          if (v15) {
            unint64_t v2 = re::RenderFrameBox::get(v15 + 344, 0xFFFFFFFFFFFFFFFuLL);
          }
          else {
            unint64_t v2 = 0;
          }
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v10, 0, (re::DynamicString **)v2, v55);
          uint64_t v16 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v10 + 200), *(const re::ecs2::ComponentTypeBase **)(v8 + 1168));
          if (v16 && *(void *)(v16 + 24))
          {
            char v17 = v9[808];
            uint64_t v18 = **(void **)(v16 + 40);
            v49[17] = *(unsigned char *)(v18 + 25);
            __int16 v50 = *(_WORD *)(v18 + 26);
            char v53 = v17;
            if (*(unsigned char *)(v18 + 30))
            {
              BOOL v19 = 1;
            }
            else
            {
              if (re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken != -1) {
                dispatch_once(&re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken, &__block_literal_global_15);
              }
              BOOL v19 = re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows != 0;
            }
            BOOL v54 = v19;
            re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v49, 7502, v3);
            char v51 = (*(uint64_t (**)(void))(**(void **)(v3 + 160) + 56))(*(void *)(v3 + 160));
            char v52 = (*(uint64_t (**)(void))(**(void **)(v3 + 160) + 72))(*(void *)(v3 + 160));
            uint64_t v70 = (void *)(v55[0] >> 1);
            uint64_t v20 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v2 + 264), (const re::WeakStringID *)&v70)+ 48);
            (*(void (**)(void))(v20 + 1008))();
            (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 160) + 120))(&v58);
            id v21 = v60[1];
            if (v59 && v60[0] && v60[1])
            {
              uint64_t v48 = v55[0] >> 1;
              uint64_t v22 = re::RenderFrameData::stream((re::RenderFrameData *)(v2 + 264), (const re::WeakStringID *)&v48);
              uint64_t v23 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v22, (uint64_t *)&v57);
              if (!v23)
              {
                uint64_t v24 = *(void *)(*(void *)(v22 + 48) + 8);
                uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 56, 8);
                *(void *)uint64_t v25 = 0;
                *(void *)(v25 + 8) = 0;
                *(_DWORD *)(v25 + 16) = 1;
                *(void *)(v25 + 32) = 0;
                *(void *)(v25 + 40) = 0;
                *(void *)(v25 + 24) = 0;
                *(_DWORD *)(v25 + 48) = 0;
                uint64_t v26 = (re *)re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::init(v25, v24, 1uLL);
                uint64_t v27 = re::globalAllocators(v26)[2];
                *(void *)&long long v89 = &unk_26E703BD8;
                *((void *)&v89 + 1) = v24;
                *((void *)&v90 + 1) = v27;
                *(void *)&long long v91 = &v89;
                uint64_t v70 = std::__any_imp::_SmallHandler<re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul> *>::__handle[abi:nn180100];
                uint64_t v71 = v25;
                *((void *)&v74 + 1) = v27;
                *(void *)&long long v75 = 0;
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::operator=<24ul>((uint64_t)&v73, (uint64_t)&v89);
                uint64_t v23 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v22, (uint64_t *)&v57, (re *)&v70);
                if ((void)v75)
                {
                  *(void *)uint64_t v82 = &v70;
                  (*(void (**)(void, unsigned char *))(*(void *)v75 + 16))(v75, v82);
                }
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v73);
                if (v70) {
                  ((void (*)(void, void **, void, void, void))v70)(0, &v70, 0, 0, 0);
                }
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v89);
              }
              LOBYTE(v71) = v59;
              long long v72 = *(_OWORD *)v60;
              long long v77 = v65;
              long long v78 = v66;
              long long v75 = v63;
              long long v76 = v64;
              *(_OWORD *)((char *)v81 + 10) = *(_OWORD *)((char *)v69 + 10);
              long long v80 = v68;
              v81[0] = v69[0];
              long long v79 = v67;
              long long v73 = v61;
              long long v74 = v62;
              unint64_t v30 = *(void *)(v29 + 40);
              v60[0] = 0;
              v60[1] = 0;
              unint64_t v2 = *(void *)(v29 + 8);
              uint64_t v70 = &unk_26E703C30;
              if (v30 + 1 > 4 * v2)
              {
                re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::setBucketsCapacity((void *)v29, (v30 + 4) >> 2);
                unint64_t v2 = *(void *)(v29 + 8);
              }
              unint64_t v8 = v30 >> 2;
              if (v2 <= v30 >> 2) {
                goto LABEL_55;
              }
              if (*(unsigned char *)(v29 + 16)) {
                uint64_t v31 = v29 + 24;
              }
              else {
                uint64_t v31 = *(void *)(v29 + 32);
              }
              uint64_t v32 = *(void *)(v31 + 8 * v8);
              ++*(void *)(v29 + 40);
              ++*(_DWORD *)(v29 + 48);
              uint64_t v33 = v32 + 192 * (v30 & 3);
              *(void *)uint64_t v33 = &unk_26E703C30;
              *(unsigned char *)(v33 + 8) = v71;
              *(void *)(v33 + 16) = v72;
              *(void *)&long long v72 = 0;
              *(void *)(v33 + 24) = *((void *)&v72 + 1);
              long long v34 = v74;
              *(_OWORD *)(v33 + 32) = v73;
              *(_OWORD *)(v33 + 48) = v34;
              long long v35 = v75;
              long long v36 = v76;
              long long v37 = v78;
              *(_OWORD *)(v33 + 96) = v77;
              *(_OWORD *)(v33 + 112) = v37;
              *(_OWORD *)(v33 + 64) = v35;
              *(_OWORD *)(v33 + 80) = v36;
              long long v38 = v79;
              long long v39 = v80;
              long long v40 = v81[0];
              *(_OWORD *)(v33 + 170) = *(_OWORD *)((char *)v81 + 10);
              *(_OWORD *)(v33 + 144) = v39;
              *(_OWORD *)(v33 + 160) = v40;
              *(_OWORD *)(v33 + 128) = v38;
              uint64_t v41 = *(void *)(v29 + 40);
              if (!v41) {
                goto LABEL_56;
              }
              re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::operator[](v29, v41 - 1);
              id v21 = v60[1];
              unint64_t v8 = 0x268774000;
              uint64_t v9 = (unsigned char *)&unk_2687A0000;
            }
            if (v21)
            {

              v60[1] = 0;
            }
            if (v60[0]) {

            }
            re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v49);
          }
          re::StringID::destroyString((re::StringID *)v55);
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v56);
          if (v12)
          {
            if (*(void *)(v12 + 152))
            {
              a1 = (re::ProfilerConfig *)mach_absolute_time();
              uint64_t v42 = *(int64x2_t **)(v12 + 152);
              if (v42)
              {
                uint64_t v43 = (char *)v42[520].i64[0];
                if (v43 >= (char *)a1 - v47) {
                  uint64_t v43 = (char *)a1 - v47;
                }
                v42[520].i64[0] = (uint64_t)v43;
                int v44 = (char *)v42[520].i64[1];
                if (v44 <= (char *)a1 - v47) {
                  int v44 = (char *)a1 - v47;
                }
                v42[520].i64[1] = (uint64_t)v44;
                v45.i64[1] = v46.i64[1];
                v45.i64[0] = (uint64_t)a1 - v47;
                v42[521] = vaddq_s64(v42[521], v45);
                *(unsigned char *)(v12 + 184) = 0;
              }
            }
          }
          ++v6;
          v7 -= 8;
          if (!v7) {
            return;
          }
        }
        re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 61, v46.i64[0]);
        _os_crash();
        __break(1u);
LABEL_55:
        uint64_t v57 = 0;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v89 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v82 = 136315906;
        *(void *)&v82[4] = "operator[]";
        __int16 v83 = 1024;
        int v84 = 858;
        __int16 v85 = 2048;
        StringID v86 = (char **)v8;
        __int16 v87 = 2048;
        unint64_t v88 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_56:
        re::internal::assertLog((re::internal *)4, v28, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
        _os_crash();
        __break(1u);
      }
    }
  }
}

void re::SceneUnderstandingGuidedFilterOcclusionData::~SceneUnderstandingGuidedFilterOcclusionData(re::SceneUnderstandingGuidedFilterOcclusionData *this)
{
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {

    *((void *)this + 2) = 0;
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {

    *((void *)this + 2) = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::SceneUnderstandingMeshSystem::~SceneUnderstandingMeshSystem(re::ecs2::SceneUnderstandingMeshSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::SceneUnderstandingMeshSystem::typeInfo(re::ecs2::SceneUnderstandingMeshSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingMeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingMeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingMeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingMeshSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::SceneUnderstandingMeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SceneUnderstandingMeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 768, 0);
          long long v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      double result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul> *>::__id;
      if (v10) {
        double result = a2 + 1;
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 8);
  double result = (uint64_t *)(**a2)(3);
  uint64_t v4 = *result;
  if (*result)
  {
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5)
    {
      for (unint64_t i = 0; i != v5; ++i)
      {
        uint64_t v7 = re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::operator[](v4, i);
        uint64_t v8 = *(void **)(v7 + 24);
        if (v8)
        {

          *(void *)(v7 + 24) = 0;
        }
        uint64_t v9 = *(void **)(v7 + 16);
        if (v9)
        {

          *(void *)(v7 + 16) = 0;
        }
      }
    }
    while (*(void *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(void *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (uint64_t *)v10(v2, v4);
  }
  return result;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E703BD8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E703BD8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 192 * (a2 & 3);
}

void *re::allocInfo_ShadowService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_284, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_284))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C058, "ShadowService");
    __cxa_guard_release(&_MergedGlobals_284);
  }
  return &unk_26AF8C058;
}

void re::initInfo_ShadowService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x622CD9D971A522AALL;
  v5[1] = "ShadowService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::initInfo_ShadowService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_ShadowService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowService", (uint64_t (*)(re::internal *))re::allocInfo_ShadowService, (re::IntrospectionBase *(*)(void))re::initInfo_ShadowService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ShadowService>, this);
}

void *re::ecs2::allocInfo_AccessibilityComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C0D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C0D8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C1E0, "AccessibilityComponent");
    __cxa_guard_release(&qword_26AF8C0D8);
  }
  return &unk_26AF8C1E0;
}

void re::ecs2::initInfo_AccessibilityComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v54[0] = 0xA4CC9857620F7EDELL;
  v54[1] = "AccessibilityComponent";
  re::StringID::destroyString((re::StringID *)v54);
  *((_OWORD *)this + 2) = v55;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C0E0, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8C0E0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8C178 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      BOOL v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "isRoot";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8C180 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "isEnabled";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1A00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8C188 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "identifier";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8C190 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "label";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x4800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF8C198 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "description";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x7000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF8C1A0 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::accessibility::CustomContent>>::get();
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "customContent";
      *(void *)(v29 + 16) = &qword_26AF8C0F8;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x9800000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF8C1A8 = v29;
      unint64_t v30 = re::introspectionAllocator((re *)v29);
      uint64_t v32 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "value";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0xC000000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF8C1B0 = v33;
      long long v34 = re::introspectionAllocator((re *)v33);
      long long v36 = re::introspect_uint64_t((re *)1, v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "traits";
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0xE800000008;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF8C1B8 = v37;
      long long v38 = re::introspectionAllocator((re *)v37);
      re::IntrospectionInfo<re::DynamicArray<long>>::get((uint64_t)v38, v39);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "systemRotors";
      *(void *)(v40 + 16) = qword_26AF8C138;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0xF000000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF8C1C0 = v40;
      uint64_t v41 = re::introspectionAllocator((re *)v40);
      uint64_t v43 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = "customRotors";
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 32) = 0x1180000000ALL;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 48) = 0;
      *(void *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF8C1C8 = v44;
      int64x2_t v45 = re::introspectionAllocator((re *)v44);
      uint64_t v47 = re::introspect_uint64_t((re *)1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + 8) = "systemActions";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + 32) = 0x1400000000BLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 48) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26AF8C1D0 = v48;
      unint64_t v49 = re::introspectionAllocator((re *)v48);
      char v51 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v50);
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *(void *)(v52 + 8) = "customActions";
      *(void *)(v52 + 16) = v51;
      *(void *)(v52 + 24) = 0;
      *(void *)(v52 + 32) = 0x1480000000CLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(void *)(v52 + 48) = 0;
      *(void *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_26AF8C1D8 = v52;
      __cxa_guard_release(&qword_26AF8C0E0);
    }
  }
  *((void *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((void *)this + 8) = &qword_26AF8C178;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AccessibilityComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AccessibilityComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AccessibilityComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AccessibilityComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v53 = v55;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::accessibility::CustomContent>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C0E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C0E8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8C0F8);
    qword_26AF8C0F8 = (uint64_t)&unk_26E703C58;
    __cxa_guard_release(&qword_26AF8C0E8);
  }
  if ((_MergedGlobals_285 & 1) == 0)
  {
    uint64_t v0 = re::ecs2::accessibility::introspect_CustomContent((re::IntrospectionBase **)1);
    if ((_MergedGlobals_285 & 1) == 0)
    {
      uint64_t v1 = v0;
      _MergedGlobals_285 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8C0F8, 0);
      qword_26AF8C108 = 0x2800000003;
      dword_26AF8C110 = v2;
      word_26AF8C114 = 0;
      *(void *)&xmmword_26AF8C118 = 0;
      *((void *)&xmmword_26AF8C118 + 1) = 0xFFFFFFFFLL;
      qword_26AF8C128 = v1;
      unk_26AF8C130 = 0;
      qword_26AF8C0F8 = (uint64_t)&unk_26E703C58;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF8C0F8, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF8C118 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<long>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C0F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C0F0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_26AF8C138);
    qword_26AF8C138[0] = (uint64_t)&unk_26E703CF0;
    __cxa_guard_release(&qword_26AF8C0F0);
  }
  if ((byte_26AF8C0D1 & 1) == 0)
  {
    int v2 = re::introspect_long((re *)1, a2);
    if ((byte_26AF8C0D1 & 1) == 0)
    {
      uint64_t v3 = v2;
      byte_26AF8C0D1 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF8C138, 0);
      unk_26AF8C148 = 0x2800000003;
      unk_26AF8C150 = v4;
      unk_26AF8C154 = 0;
      *(void *)&xmmword_26AF8C158 = 0;
      *((void *)&xmmword_26AF8C158 + 1) = 0xFFFFFFFFLL;
      unk_26AF8C168 = v3;
      unk_26AF8C170 = 0;
      qword_26AF8C138[0] = (uint64_t)&unk_26E703CF0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)qword_26AF8C138, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *((_OWORD *)v3 + 2);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF8C158 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::AccessibilityComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::AccessibilityComponent>(a3);
}

void re::internal::defaultDestruct<re::ecs2::AccessibilityComponent>(int a1, int a2, re::ecs2::AccessibilityComponent *this)
{
}

uint64_t re::ecs2::introspect_AccessibilityComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AccessibilityComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AccessibilityComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AccessibilityComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AccessibilityComponent>, this);
}

void *re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::accessibility::CustomContent>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::accessibility::CustomContent>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::accessibility::CustomContent>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v15, 0);
  long long v18 = 0uLL;
  *(void *)&long long v19 = 0;
  re::DynamicString::setCapacity((void *)&v17 + 1, 0);
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::growCapacity((void *)a4, v9 + 1);
    unint64_t v9 = *(void *)(a4 + 16);
  }
  uint64_t v10 = *(void *)(a4 + 32) + 72 * v9;
  *(void *)uint64_t v10 = v15;
  *(_OWORD *)(v10 + 8) = v16;
  uint64_t v11 = *((void *)&v17 + 1);
  *(void *)(v10 + 24) = v17;
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 56) = v19;
  *(_OWORD *)(v10 + 40) = v18;
  *(unsigned char *)(v10 + 64) = BYTE8(v19);
  uint64_t v12 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = v12 + 1;
  ++*(_DWORD *)(a4 + 24);
  uint64_t v13 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 72 * v12);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 72 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 72 * a3;
}

void *re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          uint64_t v2 = 72 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 72 * v9;
        uint64_t v11 = v7;
        do
        {
          *(_OWORD *)uint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *uint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          uint64_t v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          *((_OWORD *)v11 + 2) = 0u;
          *((_OWORD *)v11 + 3) = 0u;
          v11[4] = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = 0;
          v11[7] = *(void *)(v8 + 56);
          *(void *)(v8 + 56) = 0;
          uint64_t v17 = v11[5];
          uint64_t v16 = v11[6];
          uint64_t v18 = *(void *)(v8 + 48);
          v11[5] = *(void *)(v8 + 40);
          v11[6] = v18;
          *(void *)(v8 + 40) = v17;
          *(void *)(v8 + 48) = v16;
          *((unsigned char *)v11 + 64) = *(unsigned char *)(v8 + 64);
          re::DynamicString::deinit((re::DynamicString *)(v8 + 32));
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 72;
          v11 += 9;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::accessibility::CustomContent>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v9 = 72 * a2;
    unint64_t v10 = a2;
    do
    {
      uint64_t v11 = *((void *)v3 + 4) + v9;
      re::DynamicString::deinit((re::DynamicString *)(v11 + 32));
      re::DynamicString::deinit((re::DynamicString *)v11);
      ++v10;
      v9 += 72;
    }
    while (v10 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 72 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        v7 += 32;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(unsigned char *)(v7 + 32) = 0;
        v6 += 72;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::DynamicArray<re::ecs2::accessibility::CustomContent>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::accessibility::CustomContent>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 72 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 72;
        v11 -= 72;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::ecs2::accessibility::CustomContent>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = 72 * v2;
    do
    {
      re::DynamicString::deinit((re::DynamicString *)(v3 + 32));
      re::DynamicString::deinit((re::DynamicString *)v3);
      v3 += 72;
      v4 -= 72;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 72 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 72 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<long>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<long>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<long>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<long>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<long>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<float *>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<long>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<double>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<long>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v10 = 0;
  re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add(this, &v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 8 * *((void *)this + 2) - 8);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<long>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<long>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<float *>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<float *>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<double>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 8 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 8 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::AccessibilityComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E6940;
  *(_WORD *)(v1 + 25) = 0;
  *(unsigned char *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 112) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 160) = 0;
  *(void *)(v1 + 168) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 176) = 0;
  *(unsigned char *)(v1 + 192) = 0;
  *(void *)(v1 + 360) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 264) = 0;
  *(_DWORD *)(v1 + 304) = 0;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 340) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  return result;
}

uint64_t *re::ecs2::HierarchicalFadeComponent::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderRaw>>(uint64_t a1, uint64_t a2)
{
  re::snapshot::Reader<re::snapshot::DecoderRaw>::field<0,re::ecs2::Component>(a2, (unsigned char *)a1);
  re::snapshot::DecoderRaw::operator>><float>((uint64_t *)a2, (_DWORD *)(a1 + 28));
  *(_DWORD *)(a2 + 32) = 0;
  double result = re::snapshot::DecoderRaw::operator>><BOOL>((uint64_t *)a2, (unsigned char *)(a1 + 32));
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t re::ecs2::HierarchicalFadeComponent::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>(uint64_t a1, uint64_t a2)
{
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<0,re::ecs2::Component>(a2, (float *)a1);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,float>(a2, (float *)(a1 + 28));
  return re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<4,BOOL>(a2, (unsigned char *)(a1 + 32));
}

unsigned int *re::ecs2::HierarchicalFadeComponent::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderRaw>>(uint64_t a1, unsigned int *a2)
{
  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<0,re::ecs2::Component>(a2, a1);
  int __src = *(_DWORD *)(a1 + 28);
  re::snapshot::Encoder::writeRaw<true>(a2, &__src, 4uLL);
  char v6 = *(unsigned char *)(a1 + 32);
  return re::snapshot::Encoder::writeRaw<true>(a2, &v6, 1uLL);
}

unsigned int *re::ecs2::HierarchicalFadeComponent::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(uint64_t a1, re::snapshot::EncoderOPACK *a2)
{
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<0,re::ecs2::Component>(a2, a1);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,float>(a2, (float *)(a1 + 28));
  return re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<4,BOOL>(a2, (unsigned __int8 *)(a1 + 32));
}

BOOL re::ecs2::HierarchicalFadeComponent::getUseDepthPrePass(re::ecs2::HierarchicalFadeComponent *this)
{
  if (!*((unsigned char *)this + 32)) {
    return 0;
  }
  uint64_t v1 = &unk_26879F000;
  {
    uint64_t v1 = (unsigned char *)&unk_26879F000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableDepthPrepassForFade", v4, v6);
      char v5 = v6[1] ^ 1;
      if (!v6[0]) {
        char v5 = 1;
      }
      useDepthPrePassForFade(void)::kUseDepthPrePassForFade = v5;
      uint64_t v1 = (unsigned char *)&unk_26879F000;
    }
  }
  return v1[2008] != 0;
}

uint64_t re::ecs2::HierarchicalFadeComponent::getFadeGroupID@<X0>(re::ecs2::HierarchicalFadeComponent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((void *)this + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if ((!result || *(unsigned char *)(result + 25) == 1)
    && (uint64_t result = re::ecs2::HierarchicalFadeComponent::getUseDepthPrePass(this), result))
  {
    uint64_t v5 = *(void *)(*((void *)this + 2) + 296);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = v5;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

void *re::ecs2::allocInfo_HierarchicalFadeComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C260, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C260))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C298, "HierarchicalFadeComponent");
    __cxa_guard_release(&qword_26AF8C260);
  }
  return &unk_26AF8C298;
}

void re::ecs2::initInfo_HierarchicalFadeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x54B04082FD869170;
  v17[1] = "HierarchicalFadeComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_286, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_286);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8C280 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "opacity";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8C288 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "useDepthPrePass";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000004;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8C290 = v15;
      __cxa_guard_release(&_MergedGlobals_286);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8C280;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::HierarchicalFadeComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::HierarchicalFadeComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::HierarchicalFadeComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::HierarchicalFadeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::internal::defaultConstruct<re::ecs2::HierarchicalFadeComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6C40;
  *(_DWORD *)(v3 + 28) = 1065353216;
  *(unsigned char *)(v3 + 32) = 1;
}

uint64_t re::internal::defaultDestruct<re::ecs2::HierarchicalFadeComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::HierarchicalFadeComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F6C40;
  *(_DWORD *)(v1 + 28) = 1065353216;
  *(unsigned char *)(v1 + 32) = 1;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::HierarchicalFadeComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_HierarchicalFadeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HierarchicalFadeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_HierarchicalFadeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_HierarchicalFadeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::HierarchicalFadeComponent>, this);
}

void *re::ecs2::allocInfo_HierarchicalFadeSecondaryOpacityMarkerComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C268))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C310, "HierarchicalFadeSecondaryOpacityMarkerComponent");
    __cxa_guard_release(&qword_26AF8C268);
  }
  return &unk_26AF8C310;
}

void re::ecs2::initInfo_HierarchicalFadeSecondaryOpacityMarkerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x9018DAA3288F7CCELL;
  v9[1] = "HierarchicalFadeSecondaryOpacityMarkerComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C278, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8C278);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8C270 = v7;
      __cxa_guard_release(&qword_26AF8C278);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8C270;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6CC8;
}

uint64_t re::internal::defaultDestruct<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F6CC8;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_HierarchicalFadeSecondaryOpacityMarkerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HierarchicalFadeSecondaryOpacityMarkerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_HierarchicalFadeSecondaryOpacityMarkerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_HierarchicalFadeSecondaryOpacityMarkerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>, this);
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::field<0,re::ecs2::Component>(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    a2 = *(unsigned char **)v5;
    if (v4)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      a2 = *(unsigned char **)v5;
    }
  }
  re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t *)a1, a2, (uint64_t)v3[297]);
  *(_DWORD *)(a1 + 32) = 0;
}

uint64_t *re::snapshot::DecoderRaw::operator>><float>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = (_DWORD *)result[2];
  unint64_t v3 = result[3] - (void)v2;
  if (v3 <= 3) {
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 4uLL, v3);
  }
  *a2 = *v2;
  result[2] += 4;
  return result;
}

uint64_t *re::snapshot::DecoderRaw::operator>><BOOL>(uint64_t *result, unsigned char *a2)
{
  uint64_t v2 = (unsigned char *)result[2];
  if ((unsigned char *)result[3] == v2) {
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
  }
  *a2 = *v2;
  ++result[2];
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<0,re::ecs2::Component>(uint64_t a1, float *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<0>(a1);
  if (result)
  {
    uint64_t v5 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    {
      uint64_t v5 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      if (v8)
      {
        re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
        uint64_t v5 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      }
    }
    re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t *)a1, a2, (uint64_t)v5[297]);
    uint64_t v6 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v6 >= *(void *)(a1 + 24) || (int v7 = *v6, v7 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v7 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v6 + 1;
      uint64_t result = (v7 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,float>(uint64_t a1, float *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<1>(a1);
  if (result)
  {
    re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, a2);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(void *)(a1 + 24) || (int v6 = *v5, v6 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v5 + 1;
      uint64_t result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<4,BOOL>(uint64_t a1, unsigned char *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<4>(a1);
  if (result)
  {
    re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, a2);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(void *)(a1 + 24) || (int v6 = *v5, v6 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v5 + 1;
      uint64_t result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<0>(uint64_t a1)
{
  int Integer = *(_DWORD *)(a1 + 32);
  if (Integer < 0)
  {
    while (1)
    {
      uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(void *)(a1 + 24))
      {
        int v4 = 0;
      }
      else
      {
        *(void *)(a1 + 16) = v5 + 1;
        int v4 = *v5;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      int v6 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v6 >= *(void *)(a1 + 24)) {
        break;
      }
      int v3 = *v6;
      if (v3 == 3) {
        break;
      }
      if ((v3 - 7) > 0x28)
      {
        int Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)(a1 + 16) = v6 + 1;
        int Integer = v3 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if ((Integer & 0x80000000) == 0) {
        return Integer == 0;
      }
    }
    int Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 0;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<4>(uint64_t a1)
{
  int Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 3)
  {
    while (1)
    {
      int v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(void *)(a1 + 24))
      {
        int v4 = 0;
      }
      else
      {
        *(void *)(a1 + 16) = v3 + 1;
        int v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(void *)(a1 + 24)) {
        break;
      }
      int v6 = *v5;
      if (v6 == 3) {
        break;
      }
      if ((v6 - 7) > 0x28)
      {
        int Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)(a1 + 16) = v5 + 1;
        int Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 4) {
        return Integer == 4;
      }
    }
    int Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 4;
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::field<0,re::ecs2::Component>(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v6 = a2;
    int v7 = a1;
    uint64_t v2 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    int v5 = v4;
    a2 = v6;
    a1 = v7;
    if (v5)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      uint64_t v2 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      a2 = v6;
      a1 = v7;
    }
  }
  uint64_t v3 = (uint64_t)v2[297];
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, v3);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<0,re::ecs2::Component>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 0);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + v4) = 8;
  }
  uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v9)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  uint64_t v7 = (uint64_t)v6[297];
  return re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)this, a2, v7);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,float>(re::snapshot::EncoderOPACK *this, float *a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 1);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + v4) = 9;
  }
  float v6 = *a2;
  return re::snapshot::EncoderOPACK::operator<<((unsigned int *)this, v6);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<4,BOOL>(re::snapshot::EncoderOPACK *this, unsigned __int8 *a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 4);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + v4) = 12;
  }
  int v6 = *a2;
  return re::snapshot::EncoderOPACK::operator<<((unsigned int *)this, v6);
}

re::ecs2::LoadTraceSystem *re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceSystem *this, re::ecs2::LoadTraceComponent *a2, re::ecs2::Entity *a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  int v8 = this;
  if (this)
  {
    if (a2)
    {
      v9[0] = &unk_26E703E50;
      v9[1] = &v8;
      v9[3] = v9;
      re::ecs2::ComponentHelper::findAssetHandles(a2, (uint64_t)v9);
      this = (re::ecs2::LoadTraceSystem *)std::__function::__value_func<void ()(re::AssetHandle *)>::~__value_func[abi:nn180100](v9);
      uint64_t v5 = *((void *)a2 + 41);
      if (v5)
      {
        int v6 = (re::ecs2::LoadTraceComponent **)*((void *)a2 + 43);
        uint64_t v7 = 8 * v5;
        do
        {
          if (*v6) {
            this = (re::ecs2::LoadTraceSystem *)re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(v8, *v6, v4);
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return this;
}

void re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v16 = *(void *)(a1 + 16);
      if (*(void *)(v16 + 32 * v10 + 16) == v6) {
        return;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v16 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v16 + 32 * v10 + 16) == v6) {
          return;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 32 * v11) = v8;
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 16) = v6;
  uint64_t v15 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(v15 + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::LoadTraceSystem::willAddSystemToECSService(re::ecs2::LoadTraceSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v3 = (re::MeshAsset *)re::ServiceLocator::serviceOrNull<re::AssetService>(v2);
  *((void *)this + 20) = v3;
  if (v3)
  {
    if (*((unsigned char *)v3 + 1394))
    {
      uint64_t v37 = re::MeshAsset::assetType(v3);
      int v36 = 1;
      uint64_t v4 = (char *)this + 112;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::TextureAsset::assetType(v5);
      int v36 = 2;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::RenderGraphAsset::assetType(v6);
      int v36 = 3;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::SceneAsset::assetType(v7);
      int v36 = 4;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::ShaderLibraryAsset::assetType(v8);
      int v36 = 5;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::ShaderGraphAsset::assetType(v9);
      int v36 = 6;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::MeshDeformationAsset::assetType(v10);
      int v36 = 7;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::RenderGraphEmitterAsset::assetType(v11);
      int v36 = 8;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::FontAsset::assetType(v12);
      int v36 = 9;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::ImageBasedLightAsset::assetType(v13);
      int v36 = 10;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::FontLayoutAsset::assetType(v14);
      int v36 = 11;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::CGPerspectiveContextAsset::assetType(v15);
      int v36 = 12;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::VideoAsset::assetType(v16);
      int v36 = 13;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::VideoFileAsset::assetType(v17);
      int v36 = 14;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::VFXAsset::assetType(v18);
      int v36 = 15;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::VertexCacheAsset::assetType(v19);
      int v36 = 16;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::MaterialDefinitionAsset::assetType(v20);
      int v36 = 17;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::MaterialAsset::assetType(v21);
      int v36 = 18;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::AcousticMeshAsset::assetType(v22);
      int v36 = 19;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::AnimationLibraryAsset::assetType(v23);
      int v36 = 20;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::AudioFileAsset::assetType(v24);
      int v36 = 21;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::AudioFileGroupAsset::assetType(v25);
      int v36 = 22;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::AudioGeneratorAsset::assetType(v26);
      int v36 = 23;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::BlendShapeWeightsDefinitionAsset::assetType(v27);
      int v36 = 24;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::IKRigAsset::assetType(v28);
      int v36 = 25;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::RigAsset::assetType(v29);
      int v36 = 26;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::RigGraphAsset::assetType(v30);
      int v36 = 27;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::SkeletalPoseDefinitionAsset::assetType(v31);
      int v36 = 28;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::SkeletonAsset::assetType(v32);
      int v36 = 29;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::StateMachineAsset::assetType(v33);
      int v36 = 30;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::StateParameterBlackboardAsset::assetType(v34);
      int v36 = 31;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      uint64_t v37 = re::TimelineAsset::assetType(v35);
      int v36 = 32;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
    }
  }
}

uint64_t re::ecs2::LoadTraceSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 160) = 0;
  return this;
}

void *re::ecs2::LoadTraceSystem::willAddSceneToECSService(void *this, re::EventBus **a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v12 = (re::ecs2::Scene *)a2;
  uint64_t v2 = this[20];
  if (v2 && *(unsigned char *)(v2 + 1394))
  {
    uint64_t v3 = a2[36];
    if (v3)
    {
      uint64_t v4 = this;
      uint64_t v17 = re::globalAllocators((re *)this)[2];
      uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v17 + 32))(v17, 32, 0);
      void *v5 = &unk_26E703DA0;
      v5[1] = v4;
      void v5[2] = re::ecs2::LoadTraceSystem::onEntityAdded;
      v5[3] = 0;
      long long v18 = v5;
      *(void *)&long long v11 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(v3, 0, (uint64_t)v16, 0, 0);
      *((void *)&v11 + 1) = v6;
      unint64_t v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::destroyCallable((uint64_t)v16);
      uint64_t v14 = re::globalAllocators(v7)[2];
      unint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v14 + 32))(v14, 32, 0);
      *unint64_t v8 = &unk_26E703DF8;
      v8[1] = v4;
      v8[2] = re::ecs2::LoadTraceSystem::onEntityWillRemove;
      v8[3] = 0;
      uint64_t v15 = v8;
      *(void *)&long long v10 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v3, 0, (uint64_t)v13, 0, 0);
      *((void *)&v10 + 1) = v9;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)v13);
      re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)(v4 + 21), (uint64_t *)&v12, &v11);
      return (void *)re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)(v4 + 27), (uint64_t *)&v12, &v10);
    }
  }
  return this;
}

uint64_t re::ecs2::LoadTraceSystem::onEntityAdded(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2)
  {
    if (a2)
    {
      if (*(unsigned char *)(v2 + 1394))
      {
        uint64_t v5 = (re::ecs2::LoadTraceComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v5)
        {
          uint64_t v6 = v5;
          re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(v5);
          re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear((uint64_t)v6 + 136);
          re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(v6, (re::ecs2::LoadTraceComponent *)a2, v7);
          re::ecs2::LoadTraceComponent::updateTrackedAssets((uint64_t)v6, 2020, 2024, a1 + 112);
        }
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::LoadTraceSystem::onEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2)
  {
    if (a2)
    {
      if (*(unsigned char *)(v2 + 1394))
      {
        uint64_t v3 = (re::ecs2::LoadTraceComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v3) {
          re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(v3);
        }
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::LoadTraceSystem::willRemoveSceneFromECSService(uint64_t this, unint64_t a2)
{
  unint64_t v16 = a2;
  uint64_t v2 = *(void *)(this + 160);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 1394))
    {
      uint64_t v3 = *(void *)(a2 + 288);
      if (v3)
      {
        uint64_t v4 = this;
        uint64_t v5 = this + 168;
        LODWORD(v6) = 0x7FFFFFFF;
        if (*(void *)(this + 168))
        {
          unint64_t v7 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
          uint64_t v8 = *(unsigned int *)(*(void *)(this + 176) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(this + 192)));
          if (v8 != 0x7FFFFFFF)
          {
            uint64_t v9 = *(void *)(this + 184);
            if (*(void *)(v9 + 40 * v8 + 16) == a2)
            {
              LODWORD(v6) = v8;
            }
            else
            {
              uint64_t v6 = v8;
              while (1)
              {
                LODWORD(v6) = *(_DWORD *)(v9 + 40 * v6 + 8) & 0x7FFFFFFF;
                if (v6 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v9 + 40 * v6 + 16) == a2) {
                  goto LABEL_13;
                }
              }
              LODWORD(v6) = 0x7FFFFFFF;
            }
          }
        }
LABEL_13:
        uint64_t v10 = *(void *)(this + 184) + 40 * v6;
        re::EventBus::unsubscribe(v3, *(void *)(v10 + 24), *(void *)(v10 + 32));
        re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v5, (uint64_t *)&v16);
        LODWORD(v11) = 0x7FFFFFFF;
        if (*(void *)(v4 + 216))
        {
          unint64_t v12 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
          uint64_t v13 = *(unsigned int *)(*(void *)(v4 + 224) + 4 * ((v12 ^ (v12 >> 31)) % *(unsigned int *)(v4 + 240)));
          if (v13 != 0x7FFFFFFF)
          {
            uint64_t v14 = *(void *)(v4 + 232);
            if (*(void *)(v14 + 40 * v13 + 16) == v16)
            {
              LODWORD(v11) = v13;
            }
            else
            {
              uint64_t v11 = v13;
              while (1)
              {
                LODWORD(v11) = *(_DWORD *)(v14 + 40 * v11 + 8) & 0x7FFFFFFF;
                if (v11 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v14 + 40 * v11 + 16) == v16) {
                  goto LABEL_22;
                }
              }
              LODWORD(v11) = 0x7FFFFFFF;
            }
          }
        }
LABEL_22:
        uint64_t v15 = *(void *)(v4 + 232) + 40 * v11;
        re::EventBus::unsubscribe(v3, *(void *)(v15 + 24), *(void *)(v15 + 32));
        return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v4 + 216, (uint64_t *)&v16);
      }
    }
  }
  return this;
}

void re::ecs2::LoadTraceSystem::update(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && *(unsigned char *)(v2 + 1394))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 144);
    if (v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = (int *)(*(void *)(a1 + 128) + 8);
      while (1)
      {
        int v8 = *v7;
        v7 += 8;
        if (v8 < 0) {
          break;
        }
        if (v5 == ++v6)
        {
          LODWORD(v6) = *(_DWORD *)(a1 + 144);
          break;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if (v5 != v6)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(a1 + 128);
        if (v5 <= (int)v6 + 1) {
          int v10 = v6 + 1;
        }
        else {
          int v10 = v5;
        }
        while (v10 - 1 != v6)
        {
          uint64_t v6 = (v6 + 1);
          if ((*(_DWORD *)(v9 + 32 * v6 + 8) & 0x80000000) != 0) {
            goto LABEL_17;
          }
        }
        LODWORD(v6) = v10;
LABEL_17:
        if (v6 == v5)
        {
          if (!re::internal::enableSignposts(0, 0)) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
        int v11 = v5 <= (int)v6 + 1 ? v6 + 1 : v5;
        LODWORD(v12) = v6;
        while (v11 - 1 != v12)
        {
          uint64_t v12 = (v12 + 1);
          if ((*(_DWORD *)(v9 + 32 * v12 + 8) & 0x80000000) != 0) {
            goto LABEL_26;
          }
        }
        LODWORD(v12) = v11;
LABEL_26:
        if (v12 == v5) {
          break;
        }
        if (re::internal::enableSignposts(0, 0)) {
          kdebug_trace();
        }
        LODWORD(v5) = *(_DWORD *)(a1 + 144);
        if (v5 <= (int)v12 + 1) {
          int v13 = v12 + 1;
        }
        else {
          int v13 = *(_DWORD *)(a1 + 144);
        }
        while (1)
        {
          uint64_t v14 = (v12 + 1);
          if (v13 - 1 == v12) {
            break;
          }
          LODWORD(v12) = v12 + 1;
          LODWORD(v6) = v14;
          if ((*(_DWORD *)(*(void *)(a1 + 128) + 32 * v14 + 8) & 0x80000000) != 0) {
            goto LABEL_36;
          }
        }
        LODWORD(v6) = v13;
LABEL_36:
        if (v5 == v6) {
          goto LABEL_42;
        }
      }
      if (!re::internal::enableSignposts(0, 0)) {
        goto LABEL_42;
      }
LABEL_41:
      kdebug_trace();
    }
LABEL_42:
    uint64_t v15 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 24);
      if (v16)
      {
        uint64_t v17 = *(re::ecs2::LoadTraceComponent ****)(v15 + 40);
        if (re::ecs2::LoadTraceComponent::log(void)::onceToken != -1) {
          dispatch_once(&re::ecs2::LoadTraceComponent::log(void)::onceToken, &__block_literal_global_18);
        }
        uint64_t v18 = a1 + 112;
        uint64_t v19 = re::ecs2::LoadTraceComponent::log(void)::log;
        if (os_log_type_enabled((os_log_t)re::ecs2::LoadTraceComponent::log(void)::log, OS_LOG_TYPE_DEBUG))
        {
          v23[0] = 67109120;
          v23[1] = v16;
          _os_log_debug_impl(&dword_233120000, v19, OS_LOG_TYPE_DEBUG, "Load trace components in scene: %d", (uint8_t *)v23, 8u);
        }
        uint64_t v20 = 8 * v16;
        do
        {
          id v21 = *v17++;
          re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear((uint64_t)(v21 + 17));
          re::ecs2::LoadTraceSystem::findAssetHandlesRecursively((re::ecs2::LoadTraceSystem *)v21, v21[2], v22);
          re::ecs2::LoadTraceComponent::updateTrackedAssets((uint64_t)v21, 2020, 2024, v18);
          re::ecs2::LoadTraceComponent::checkAssetLoadStates((uint64_t)v21, 2021, 2022, 2023, v18);
          v20 -= 8;
        }
        while (v20);
      }
    }
  }
}

void *re::ecs2::allocInfo_LoadTraceSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_287, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_287))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C390, "LoadTraceSystem");
    __cxa_guard_release(&_MergedGlobals_287);
  }
  return &unk_26AF8C390;
}

void re::ecs2::initInfo_LoadTraceSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x97E86156DCE06DDCLL;
  v5[1] = "LoadTraceSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_LoadTraceSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::LoadTraceSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::LoadTraceSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::LoadTraceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::LoadTraceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LoadTraceSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LoadTraceSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::LoadTraceSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::LoadTraceSystem>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::LoadTraceSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 27);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 21);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a3 + 14);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::LoadTraceSystem>(uint64_t *a1)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 27);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 21);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 14);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_LoadTraceSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LoadTraceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LoadTraceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LoadTraceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LoadTraceSystem>, this);
}

void re::ecs2::LoadTraceSystem::~LoadTraceSystem(re::ecs2::LoadTraceSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::LoadTraceSystem::typeInfo(re::ecs2::LoadTraceSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LoadTraceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LoadTraceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LoadTraceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LoadTraceSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E703DA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E703DA0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E703DF8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E703DF8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::~__func()
{
}

void *std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E703E50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E703E50;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::operator()(uint64_t a1, const re::AssetHandle **a2)
{
  uint64_t v2 = *a2;
  if (v2)
  {
    if (*((void *)v2 + 1))
    {
      uint64_t v3 = **(void **)(a1 + 8);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v4, v2);
      re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(v3 + 136, (re::AssetHandle *)v4);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
    }
  }
}

uint64_t std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::target_type()
{
}

void re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *(void *)v13;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 24) = *(_DWORD *)(v13 + 8);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

double re::make::shared::unsafelyInplace<re::ecs2::LoadTraceSystem>(uint64_t a1)
{
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *(void *)uint64_t v1 = &unk_26E703ED0;
  *(void *)(v1 + 104) = 2;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 148) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 188) = 0u;
  *(void *)(v1 + 204) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_DWORD *)(v1 + 248) = 0;
  *(void *)(v1 + 252) = 0x7FFFFFFFLL;
  return result;
}

id re::internal::defaultRetain<re::ecs2::LoadTraceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::LoadTraceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_ClippingService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_288, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_288))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C410, "ClippingService");
    __cxa_guard_release(&_MergedGlobals_288);
  }
  return &unk_26AF8C410;
}

void re::ecs2::initInfo_ClippingService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xC1FF1FD5603D36E6;
  v5[1] = "ClippingService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ClippingService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_ClippingService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClippingService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClippingService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClippingService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClippingService>, this);
}

void re::MaterialParametersManager::~MaterialParametersManager(re::MaterialParametersManager *this)
{
  re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 4);
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
}

{
  uint64_t vars8;

  re::MaterialParametersManager::~MaterialParametersManager(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::MaterialParametersManager::willAddScene(uint64_t result, uint64_t a2)
{
  if (!*(void *)(result + 16)) {
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t re::MaterialParametersManager::willRemoveScene(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 16) == a2) {
    *(void *)(result + 16) = 0;
  }
  return result;
}

void re::MaterialParametersManager::ensureRootEntityExists(re::MaterialParametersManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 24);
  if (!*((void *)this + 3))
  {
    uint64_t v3 = re::ecs2::EntityFactory::instance(this);
    re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v3, 4uLL, v8);
    long long v4 = (re::ecs2::Entity *)*v2;
    long long v5 = v8[0];
    *uint64_t v2 = (uint64_t)v8[0];
    if (v4)
    {

      long long v5 = (re::ecs2::Entity *)*v2;
    }
    *((_DWORD *)v5 + 72) |= 0x1400u;
    v8[0] = (re::ecs2::Entity *)0xB0FDF3493E2CFA72;
    v8[1] = (re::ecs2::Entity *)"MaterialInstanceSyncRoot";
    re::StringID::operator=((unint64_t *)v5 + 34, (uint64_t *)v8);
    re::StringID::destroyString((re::StringID *)v8);
    re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(*v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    long long v7 = (void *)(*(void *)(v6 + 104) + 304);
    re::Collection<re::SharedPtr<re::ecs2::Entity>>::add(v7, v2);
  }
}

void re::MaterialParametersManager::createPbrMaterialParametersEntity(_anonymous_namespace_ *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, re::ecs2::Entity **a6@<X8>)
{
  char v9 = a2;
  uint64_t v10 = a1;
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  switch(a2)
  {
    case 2:
      goto LABEL_4;
    case 1:
      (*(void (**)(long long *__return_ptr))(**((void **)a1 + 1) + 8))(&v24);
      goto LABEL_7;
    case 0:
LABEL_4:
      (*(void (**)(long long *__return_ptr))(**((void **)a1 + 1) + 8))(&v24);
LABEL_7:
      long long v28 = v24;
      long long v24 = 0uLL;
      uint64_t v29 = v25;
      *(void *)&long long v25 = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
      break;
  }
  int v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v27 = 0x7FFFFFFFLL;
  if (a3)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v24, (re::DynamicString *)&v22, "true");
    a1 = (_anonymous_namespace_ *)v22;
    if (v22)
    {
      if (v23) {
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v22 + 40))();
      }
    }
  }
  if (a4)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v24, (re::DynamicString *)&v22, "true");
    a1 = (_anonymous_namespace_ *)v22;
    if (v22)
    {
      if (v23) {
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v22 + 40))();
      }
    }
  }
  if (a5)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v24, (re::DynamicString *)&v22, "true");
    a1 = (_anonymous_namespace_ *)v22;
    if (v22)
    {
      if (v23) {
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v22 + 40))();
      }
    }
  }
  uint64_t v12 = re::globalAllocators(a1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 1896, 8);
  bzero((void *)v13, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v13);
  uint64_t v22 = "PhysicallyBasedMaterialResource";
  uint64_t v23 = 31;
  re::DynamicString::operator=((re::DynamicString *)(v13 + 8), (uint64_t)&v22);
  re::AssetHandle::operator=(v13 + 40, (uint64_t *)&v28);
  unint64_t v14 = (re::MaterialAsset *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v13 + 304, (uint64_t)&v24);
  uint64_t v15 = *((void *)v10 + 1);
  unint64_t v16 = re::MaterialAsset::assetType(v14);
  (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, uint64_t))(*(void *)v15 + 416))(&v22, v15, v13, v16, 0, 0, 1);
  re::MaterialParametersManager::ensureRootEntityExists(v10);
  int v18 = re::ecs2::EntityFactory::instance(v17);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v18, 4uLL, a6);
  uint64_t v19 = *a6;
  *((_DWORD *)v19 + 72) |= 0x1400u;
  v21[0] = 0xCEA8EA11163BE4E8;
  v21[1] = (uint64_t)"PbrMaterialParametersEntity";
  re::StringID::operator=((unint64_t *)v19 + 34, v21);
  re::StringID::destroyString((re::StringID *)v21);
  re::ecs2::Entity::setParentInternal(v19, *((re::ecs2::Entity **)v10 + 3), 0xFFFFFFFFFFFFFFFFLL);
  int v20 = (unsigned char *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v19 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v20[512] = v9;
  v20[513] = a3;
  v20[515] = a5;
  v20[514] = a4;
  re::AssetHandle::operator=((uint64_t)(v20 + 528), (uint64_t *)&v22);
  re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v19 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v28);
}

void re::MaterialParametersManager::addOrUpdatePbrMaterialInstanceHandle(uint64_t a1, re::RenderManager *a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v31 = 0;
  unint64_t v32 = a3;
  uint64_t v8 = a1 + 32;
  uint64_t v9 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 32, a3);
  if (!v9)
  {
    uint64_t v12 = re::globalAllocators(0);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 592, 16);
    re::PbrMaterial::PbrMaterial(v13, 0);
    v30[0] = 2;
    uint64_t v31 = v14;
    re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::MaterialInstanceHandle&>(v8, (uint64_t *)&v32, (uint64_t)v30);
LABEL_7:
    uint64_t v15 = v31;
    if (v31)
    {
      id v16 = (id)(v31 + 8);
      *(_OWORD *)(v15 + 368) = *(_OWORD *)(a4 + 336);
      long long v17 = *(_OWORD *)(a4 + 400);
      long long v19 = *(_OWORD *)(a4 + 352);
      long long v18 = *(_OWORD *)(a4 + 368);
      *(_OWORD *)(v15 + 416) = *(_OWORD *)(a4 + 384);
      *(_OWORD *)(v15 + 432) = v17;
      *(_OWORD *)(v15 + 384) = v19;
      *(_OWORD *)(v15 + 400) = v18;
      long long v20 = *(_OWORD *)(a4 + 464);
      long long v22 = *(_OWORD *)(a4 + 416);
      long long v21 = *(_OWORD *)(a4 + 432);
      *(_OWORD *)(v15 + 480) = *(_OWORD *)(a4 + 448);
      *(_OWORD *)(v15 + 496) = v20;
      *(_OWORD *)(v15 + 448) = v22;
      *(_OWORD *)(v15 + 464) = v21;
      re::PbrMaterialTextures::operator=(v15 + 32, (uint64_t *)a4);
      *(_DWORD *)(v15 + 512) = *(_DWORD *)(a4 + 480);
      *(_DWORD *)(v15 + 516) = *(_DWORD *)(a4 + 484);
      *(_DWORD *)(v15 + 520) = *(_DWORD *)(a4 + 488);
      re::AssetHandle::operator=(v15 + 528, a5);
      re::PbrMaterial::commitConstantChanges((re::PbrMaterial *)v15, a2);
      re::PbrMaterial::commitTextureChanges((re::PbrMaterial *)v15, a2);
    }
    else
    {
      MEMORY[0x170] = *(_OWORD *)(a4 + 336);
      long long v23 = *(_OWORD *)(a4 + 352);
      long long v24 = *(_OWORD *)(a4 + 368);
      long long v25 = *(_OWORD *)(a4 + 384);
      MEMORY[0x1B0] = *(_OWORD *)(a4 + 400);
      MEMORY[0x1A0] = v25;
      MEMORY[0x190] = v24;
      MEMORY[0x180] = v23;
      long long v26 = *(_OWORD *)(a4 + 416);
      long long v27 = *(_OWORD *)(a4 + 432);
      long long v28 = *(_OWORD *)(a4 + 448);
      MEMORY[0x1F0] = *(_OWORD *)(a4 + 464);
      MEMORY[0x1E0] = v28;
      MEMORY[0x1D0] = v27;
      MEMORY[0x1C0] = v26;
      re::PbrMaterialTextures::operator=(32, (uint64_t *)a4);
      MEMORY[0x200] = *(_DWORD *)(a4 + 480);
      MEMORY[0x204] = *(_DWORD *)(a4 + 484);
      MEMORY[0x208] = *(_DWORD *)(a4 + 488);
      re::AssetHandle::operator=(528, a5);
      re::PbrMaterial::commitConstantChanges(0, a2);
      re::PbrMaterial::commitTextureChanges(0, a2);
    }
    goto LABEL_10;
  }
  v30[0] = *(unsigned char *)v9;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v31, *(void *)(v9 + 8));
  if (v30[0] == 2) {
    goto LABEL_7;
  }
  if ((atomic_exchange(re::MaterialParametersManager::addOrUpdatePbrMaterialInstanceHandle(re::RenderManager *,unsigned long long,re::PbrMaterialParameters const&,re::AssetHandle)::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    int v11 = *re::graphicsLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "MaterialInstanceHandle is not expected type", v29, 2u);
    }
  }
LABEL_10:
  if (v31) {
}
  }

void re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::MaterialInstanceHandle&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v20 = *(void *)(a1 + 16);
      if (*(void *)(v20 + 40 * v10 + 16) == v6) {
        return;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v20 + 40 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v20 + 40 * v10 + 16) == v6) {
          return;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 40 * v11 + 8);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 40 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 40 * v11 + 8) = v14 | 0x80000000;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = v9;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v11 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v11 + 8) & 0x80000000 | *(_DWORD *)(v15 + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 40 * v11) = v8;
  *(void *)(*(void *)(a1 + 16) + 40 * v11 + 16) = v6;
  uint64_t v17 = *(void *)(a1 + 16) + 40 * v11;
  *(unsigned char *)(v17 + 24) = *(unsigned char *)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  *(void *)(v17 + 32) = v18;
  if (v18)
  {
    id v19 = (id)(v18 + 8);
    uint64_t v15 = *(void *)(a1 + 8);
  }
  *(_DWORD *)(v15 + 4 * v16) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

__n128 re::PbrMaterial::commitConstantChanges(re::PbrMaterial *this, re::RenderManager *a2)
{
  if (*((_DWORD *)this + 130))
  {
    uint64_t v4 = re::PbrMaterial::addRenderFrameParameterDelta(this, a2);
    if (v4)
    {
      uint64_t v6 = v4;
      *(unsigned char *)(v4 + 16) = 1;
      re::PbrMaterialConstants::asPbrConstants((re::PbrMaterial *)((char *)this + 368), a2, (uint64_t)v10);
      long long v7 = v10[7];
      *(_OWORD *)(v6 + 128) = v10[6];
      *(_OWORD *)(v6 + 144) = v7;
      *(_OWORD *)(v6 + 160) = v10[8];
      long long v8 = v10[3];
      *(_OWORD *)(v6 + 64) = v10[2];
      *(_OWORD *)(v6 + 80) = v8;
      long long v9 = v10[5];
      *(_OWORD *)(v6 + 96) = v10[4];
      *(_OWORD *)(v6 + 112) = v9;
      __n128 result = (__n128)v10[1];
      *(_OWORD *)(v6 + 32) = v10[0];
      *(__n128 *)(v6 + 48) = result;
      *(_DWORD *)(v6 + 20) = *((_DWORD *)this + 129);
      *((_DWORD *)this + 130) = 0;
    }
  }
  return result;
}

void re::PbrMaterial::commitTextureChanges(re::PbrMaterial *this, re::RenderManager *a2)
{
  uint64_t v3 = re::PbrMaterial::addRenderFrameParameterDelta(this, a2);
  if (v3)
  {
    uint64_t v4 = 0;
    *(unsigned char *)(v3 + 17) = 1;
    long long v5 = (re::PbrMaterial *)((char *)this + 32);
    uint64_t v6 = v3 + 176;
    do
    {
      re::PbrMaterial::makeTextureHandle(v5, (re::TextureHandle *)v7);
      re::TextureHandle::operator=((re::TextureHandle *)(v6 + v4), (re::TextureHandle *)v7);
      re::TextureHandle::invalidate((re::TextureHandle *)v7);
      v4 += 16;
      long long v5 = (re::PbrMaterial *)((char *)v5 + 24);
    }
    while (v4 != 224);
  }
}

void re::MaterialParametersManager::createUnlitMaterialParametersEntity(_anonymous_namespace_ *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, re::ecs2::Entity **a6@<X8>, float a7@<S0>)
{
  char v11 = a2;
  int v12 = a1;
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  switch(a2)
  {
    case 2:
      goto LABEL_4;
    case 1:
      (*(void (**)(long long *__return_ptr))(**((void **)a1 + 1) + 8))(&v28);
      goto LABEL_7;
    case 0:
LABEL_4:
      (*(void (**)(long long *__return_ptr))(**((void **)a1 + 1) + 8))(&v28);
LABEL_7:
      long long v32 = v28;
      long long v28 = 0uLL;
      uint64_t v33 = v29;
      *(void *)&long long v29 = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v28);
      break;
  }
  int v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v31 = 0x7FFFFFFFLL;
  if (a3)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v28, (re::DynamicString *)&v26, "true");
    a1 = (_anonymous_namespace_ *)v26;
    if (v26)
    {
      if (v27) {
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v26 + 40))();
      }
    }
  }
  int v14 = re::globalAllocators(a1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 1896, 8);
  bzero((void *)v15, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v15);
  long long v26 = "UnlitMaterialResource";
  uint64_t v27 = 21;
  re::DynamicString::operator=((re::DynamicString *)(v15 + 8), (uint64_t)&v26);
  re::AssetHandle::operator=(v15 + 40, (uint64_t *)&v32);
  uint64_t v16 = (re::MaterialAsset *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v15 + 304, (uint64_t)&v28);
  uint64_t v17 = *((void *)v12 + 1);
  uint64_t v18 = re::MaterialAsset::assetType(v16);
  (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, uint64_t))(*(void *)v17 + 416))(&v26, v17, v15, v18, 0, 0, 1);
  re::MaterialParametersManager::ensureRootEntityExists(v12);
  uint64_t v20 = re::ecs2::EntityFactory::instance(v19);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v20, 4uLL, a6);
  long long v21 = *a6;
  *((_DWORD *)v21 + 72) |= 0x1400u;
  v25[0] = 0x942092D10A3FF97ALL;
  v25[1] = (uint64_t)"UnlitMaterialInstanceEntity";
  re::StringID::operator=((unint64_t *)v21 + 34, v25);
  re::StringID::destroyString((re::StringID *)v25);
  re::ecs2::Entity::setParentInternal(v21, *((re::ecs2::Entity **)v12 + 3), 0xFFFFFFFFFFFFFFFFLL);
  long long v22 = (re::ecs2::Entity *)((char *)v21 + 32);
  uint64_t v23 = re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(unsigned char *)(v23 + 76) = v11;
  *(unsigned char *)(v23 + 77) = a3;
  char v24 = *(unsigned char *)(a4 + 16);
  *(_OWORD *)(v23 + 28) = *(_OWORD *)a4;
  *(unsigned char *)(v23 + 44) = v24;
  *(float *)(v23 + 72) = a7;
  re::AssetHandle::operator=(v23 + 48, a5);
  re::AssetHandle::operator=(v23 + 80, (uint64_t *)&v26);
  re::ecs2::EntityComponentCollection::add(v22, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v26);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v28);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v32);
}

uint64_t re::MaterialParametersManager::findMaterialParametersEntityByID(re::MaterialParametersManager *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = a2;
  uint64_t v3 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v2 + 152, &v5);
  if (v3) {
    return *(void *)(v3 + 8);
  }
  if (*(void *)(*(void *)(v2 + 104) + 296) == v5) {
    return *(void *)(v2 + 104);
  }
  return 0;
}

void re::MaterialParametersManager::addOrUpdateUnlitMaterialInstanceHandle(uint64_t a1, re::RenderManager *a2, unint64_t a3, char a4, char a5, long long *a6, uint64_t *a7, uint64_t *a8, float a9)
{
  uint64_t v31 = 0;
  unint64_t v32 = a3;
  uint64_t v16 = a1 + 32;
  uint64_t v17 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 32, a3);
  if (v17)
  {
    v30[0] = *(unsigned char *)v17;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v31, *(void *)(v17 + 8));
    if (v30[0] != 1)
    {
      uint64_t v18 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    id v19 = re::globalAllocators(0);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19[2] + 32))(v19[2], 136, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v20, 0);
    *(void *)uint64_t v20 = &unk_26E703FC8;
    __asm { FMOV            V0.4S, #1.0 }
    *(_OWORD *)(v20 + 24) = _Q0;
    *(unsigned char *)(v20 + 40) = 0;
    *(_DWORD *)(v20 + 44) = 1065353216;
    *(void *)(v20 + 56) = 0;
    *(void *)(v20 + 64) = 0;
    *(void *)(v20 + 48) = 0;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_WORD *)(v20 + 72) = 0;
    *(int64x2_t *)(v20 + 112) = vdupq_n_s64(0xFFFFFFFFFFFFFFFuLL);
    *(void *)(v20 + 128) = 0;
    v30[0] = 1;
    uint64_t v31 = v20;
    re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::MaterialInstanceHandle&>(v16, (uint64_t *)&v32, (uint64_t)v30);
  }
  uint64_t v18 = v31;
  if (v31) {
    id v26 = (id)(v31 + 8);
  }
LABEL_7:
  long long v27 = *a6;
  *(unsigned char *)(v18 + 40) = *((unsigned char *)a6 + 16);
  *(_OWORD *)(v18 + 24) = v27;
  *(float *)(v18 + 44) = a9;
  *(unsigned char *)(v18 + 72) = a4;
  re::AssetHandle::operator=(v18 + 48, a7);
  *(unsigned char *)(v18 + 73) = a5;
  re::AssetHandle::operator=(v18 + 80, a8);
  re::UnlitMaterial::commitConstantChanges((re::UnlitMaterial *)v18, a2);
  uint64_t v28 = re::UnlitMaterial::addRenderFrameParameterDelta((re::UnlitMaterial *)v18, a2);
  if (v28)
  {
    uint64_t v29 = v28;
    *(unsigned char *)(v28 + 17) = 1;
    re::PbrMaterial::makeTextureHandle((re::PbrMaterial *)(v18 + 48), (re::TextureHandle *)v33);
    re::TextureHandle::operator=((re::TextureHandle *)(v29 + 64), (re::TextureHandle *)v33);
    re::TextureHandle::invalidate((re::TextureHandle *)v33);
  }

  if (v31) {
}
  }

uint64_t re::MaterialParametersManager::materialInstanceHandle(re::MaterialParametersManager *this, unint64_t a2)
{
  if (!*((void *)this + 4)) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*((void *)this + 5) + 4 * ((v2 ^ (v2 >> 31)) % *((unsigned int *)this + 14)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 6);
  if (*(void *)(v5 + 40 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 40 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 40 * v3 + 16) == a2) {
        return v5 + 40 * v3 + 24;
      }
    }
    return 0;
  }
  return v5 + 40 * v3 + 24;
}

double re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(v6 + 32);
          if (v8)
          {

            *(void *)(v6 + 32) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 40;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)char v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7;
        int v13 = DWORD1(v9);
        int v14 = (void *)(v6 + 32);
        do
        {
          if ((*(_DWORD *)(v14 - 3) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 4);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v13));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 40 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 40 * v18 + 16) = *(v14 - 2);
            uint64_t v22 = *(void *)(a1 + 16) + 40 * v18;
            *(unsigned char *)(v22 + 24) = *((unsigned char *)v14 - 8);
            *(void *)(v22 + 32) = *v14;
            void *v14 = 0;
            *(_DWORD *)(v12 + 4 * v17) = v18;
            int v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            unsigned int v10 = *(_DWORD *)&v24[32];
          }
          ++v11;
          v14 += 5;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void re::UnlitMaterial::~UnlitMaterial(re::UnlitMaterial *this)
{
  *(void *)this = &unk_26E703FC8;
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {

    *((void *)this + 13) = 0;
  }
  re::AssetHandle::~AssetHandle((re::UnlitMaterial *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::UnlitMaterial *)((char *)this + 48));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E703FC8;
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {

    *((void *)this + 13) = 0;
  }
  re::AssetHandle::~AssetHandle((re::UnlitMaterial *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::UnlitMaterial *)((char *)this + 48));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::allocInfo_ImageBasedLightComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C498, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C498))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C4D0, "ImageBasedLightComponent");
    __cxa_guard_release(&qword_26AF8C498);
  }
  return &unk_26AF8C4D0;
}

void re::ecs2::initInfo_ImageBasedLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v67[0] = 0x54A3D8680549C3BELL;
  v67[1] = "ImageBasedLightComponent";
  re::StringID::destroyString((re::StringID *)v67);
  *((_OWORD *)this + 2) = v68;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C490, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8C490);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8C638 = v7;
      unsigned int v8 = re::introspectionAllocator((re *)v7);
      unsigned int v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "intensityExponent";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8C640 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      int v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "ibl";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x5800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8C648 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_AssetHandle((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "diffuseTexture";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8C650 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_AssetHandle((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "specularTexture";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x4000000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF8C658 = v23;
      char v24 = re::introspectionAllocator((re *)v23);
      id v26 = re::introspect_BOOL((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "isGlobalIBL";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x9400000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF8C660 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      int v30 = re::introspect_float((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "mixFactor";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x4B000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF8C668 = v31;
      unint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v33 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "mixColor";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x50000000007;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF8C670 = v34;
      long long v35 = re::introspectionAllocator((re *)v34);
      uint64_t v37 = re::introspect_ColorGamut((re *)1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "mixColorGamut";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0x51000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF8C678 = v38;
      long long v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_AssetHandle((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "iblBlend";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0x7000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_26AF8C680 = v42;
      uint64_t v43 = re::introspectionAllocator((re *)v42);
      int64x2_t v45 = re::introspect_BOOL((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "enableBlend";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0x880000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF8C688 = v46;
      uint64_t v47 = re::introspectionAllocator((re *)v46);
      unint64_t v49 = re::introspect_float((re *)1, v48);
      uint64_t v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 72, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *(void *)(v50 + 8) = "blendIBLsFactor";
      *(void *)(v50 + 16) = v49;
      *(void *)(v50 + 24) = 0;
      *(void *)(v50 + 32) = 0x8C0000000BLL;
      *(_DWORD *)(v50 + 40) = 0;
      *(void *)(v50 + 48) = 0;
      *(void *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_26AF8C690 = v50;
      char v51 = re::introspectionAllocator((re *)v50);
      long long v53 = re::introspect_BOOL((re *)1, v52);
      uint64_t v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 72, 8);
      *(_DWORD *)uint64_t v54 = 1;
      *(void *)(v54 + 8) = "enableRotation";
      *(void *)(v54 + 16) = v53;
      *(void *)(v54 + 24) = 0;
      *(void *)(v54 + 32) = 0x4B80000000CLL;
      *(_DWORD *)(v54 + 40) = 0;
      *(void *)(v54 + 48) = 0;
      *(void *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_26AF8C698 = v54;
      long long v55 = re::introspectionAllocator((re *)v54);
      uint64_t v57 = re::introspect_BOOL((re *)1, v56);
      uint64_t v58 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 72, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *(void *)(v58 + 8) = "enableRotationBlend";
      *(void *)(v58 + 16) = v57;
      *(void *)(v58 + 24) = 0;
      *(void *)(v58 + 32) = 0x4B90000000DLL;
      *(_DWORD *)(v58 + 40) = 0;
      *(void *)(v58 + 48) = 0;
      *(void *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_26AF8C6A0 = v58;
      char v59 = re::introspectionAllocator((re *)v58);
      uint64_t v60 = re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
      uint64_t v61 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 72, 8);
      *(_DWORD *)uint64_t v61 = 1;
      *(void *)(v61 + 8) = "rotationBlendIBL";
      *(void *)(v61 + 16) = v60;
      *(void *)(v61 + 24) = 0;
      *(void *)(v61 + 32) = 0x4C00000000ELL;
      *(_DWORD *)(v61 + 40) = 0;
      *(void *)(v61 + 48) = 0;
      *(void *)(v61 + 56) = 0;
      *(_DWORD *)(v61 + 64) = 0;
      qword_26AF8C6A8 = v61;
      long long v62 = re::introspectionAllocator((re *)v61);
      long long v64 = re::introspect_uint64_t((re *)1, v63);
      uint64_t v65 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v62 + 32))(v62, 72, 8);
      *(_DWORD *)uint64_t v65 = 1;
      *(void *)(v65 + 8) = "textureContentUpdateTimestamp";
      *(void *)(v65 + 16) = v64;
      *(void *)(v65 + 24) = 0;
      *(void *)(v65 + 32) = 0x4F00000000FLL;
      *(_DWORD *)(v65 + 40) = 0;
      *(void *)(v65 + 48) = 0;
      *(void *)(v65 + 56) = 0;
      *(_DWORD *)(v65 + 64) = 0;
      qword_26AF8C6B0 = v65;
      __cxa_guard_release(&qword_26AF8C490);
    }
  }
  *((void *)this + 2) = 0x55000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 16;
  *((void *)this + 8) = &qword_26AF8C638;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedLightComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedLightComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedLightComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v66 = v68;
}

void *re::internal::defaultConstruct<re::ecs2::ImageBasedLightComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ImageBasedLightComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::ImageBasedLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ImageBasedLightComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ImageBasedLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightComponent>, this);
}

void *re::ecs2::allocInfo_ImageBasedLightReceiverComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C4A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C4A0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C548, "ImageBasedLightReceiverComponent");
    __cxa_guard_release(&qword_26AF8C4A0);
  }
  return &unk_26AF8C548;
}

void re::ecs2::initInfo_ImageBasedLightReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x4BF3A083172FA560;
  v13[1] = "ImageBasedLightReceiverComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C4A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8C4A8);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8C4C0 = v7;
      unsigned int v8 = re::introspectionAllocator((re *)v7);
      unsigned int v10 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "iblEntity";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8C4C8 = v11;
      __cxa_guard_release(&qword_26AF8C4A8);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8C4C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedLightReceiverComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedLightReceiverComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedLightReceiverComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedLightReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

uint64_t re::internal::defaultConstruct<re::ecs2::ImageBasedLightReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ImageBasedLightReceiverComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::ImageBasedLightReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ImageBasedLightReceiverComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ImageBasedLightReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightReceiverComponent>, this);
}

void *re::ecs2::allocInfo_ImageBasedLightSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C4B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C4B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C5C0, "ImageBasedLightSystem");
    __cxa_guard_release(&qword_26AF8C4B0);
  }
  return &unk_26AF8C5C0;
}

void re::ecs2::initInfo_ImageBasedLightSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x8D1ECFE7443B511ALL;
  v5[1] = "ImageBasedLightSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x4F000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ImageBasedLightSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedLightSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedLightSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ImageBasedLightSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ImageBasedLightSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedLightSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedLightSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::ImageBasedLightSystem *re::internal::defaultConstruct<re::ecs2::ImageBasedLightSystem>(int a1, int a2, re::ecs2::ImageBasedLightSystem *this)
{
  return re::ecs2::ImageBasedLightSystem::ImageBasedLightSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::ImageBasedLightSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 155));
  re::ecs2::ImageBasedLightComponentStateImpl::~ImageBasedLightComponentStateImpl((re::ecs2::ImageBasedLightComponentStateImpl *)(a3 + 50));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 20);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::ImageBasedLightSystem>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 155));
  re::ecs2::ImageBasedLightComponentStateImpl::~ImageBasedLightComponentStateImpl((re::ecs2::ImageBasedLightComponentStateImpl *)(a1 + 50));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 20);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ImageBasedLightSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightSystem>, this);
}

uint64_t re::ecs2::ImageBasedLightComponent::mainIBLForScene(uint64_t a1)
{
  unint64_t v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(void *)(a1 + 224) <= v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 240) + 8 * v1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  long long v4 = *(uint64_t **)(v2 + 40);
  uint64_t v5 = 8 * v3;
  while (1)
  {
    uint64_t result = *v4;
    if (*(unsigned char *)(*(void *)(*v4 + 16) + 288)) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

re::ecs2::ImageBasedLightComponentStateImpl *re::ecs2::ImageBasedLightComponentStateImpl::ImageBasedLightComponentStateImpl(re::ecs2::ImageBasedLightComponentStateImpl *this, re::ecs2::ImageBasedLightSystem *a2)
{
  v7[1] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E704010;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 76) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 11) = 0;
  uint64_t v3 = (void *)((char *)this + 88);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  *(void *)((char *)this + 140) = 0x1FFFFFFFFLL;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((unsigned char *)this + 280) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 92) = 0;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 24) = xmmword_23435FD50;
  *((_OWORD *)this + 25) = xmmword_23435FD60;
  *((_OWORD *)this + 26) = xmmword_23435FD80;
  *((_DWORD *)this + 108) = 0;
  *((_OWORD *)this + 28) = xmmword_2343A2370;
  *((_DWORD *)this + 116) = 0;
  *((_WORD *)this + 234) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((void *)this + 63) = 0;
  *((_OWORD *)this + 32) = xmmword_23435FD50;
  *((_OWORD *)this + 33) = xmmword_23435FD60;
  *((_OWORD *)this + 34) = xmmword_23435FD80;
  *((_WORD *)this + 280) = 256;
  *((unsigned char *)this + 576) = 0;
  *((_DWORD *)this + 152) = 0;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 39) = xmmword_23435FD50;
  *((_OWORD *)this + 40) = xmmword_23435FD60;
  *((_OWORD *)this + 41) = xmmword_23435FD80;
  *((_DWORD *)this + 168) = 0;
  *((_OWORD *)this + 43) = xmmword_2343A2370;
  *((_DWORD *)this + 176) = 0;
  *((_WORD *)this + 354) = 0;
  *((void *)this + 93) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_OWORD *)this + 47) = xmmword_23435FD50;
  *((_OWORD *)this + 48) = xmmword_23435FD60;
  *((_OWORD *)this + 49) = xmmword_23435FD80;
  *((_WORD *)this + 400) = 256;
  *((unsigned char *)this + 816) = 0;
  v6[0] = v7;
  v6[1] = 1;
  v7[0] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  long long v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::ImageBasedLightComponentStateImpl *)((char *)this + 16), (uint64_t)v6);
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)this + 11, 0);
  ++*((_DWORD *)this + 28);
  *((_DWORD *)this + 33) = 4;
  re::DataArray<re::ecs2::ShadowPlaneInfo>::allocBlock((void *)this + 11);
  return this;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::deactivateImageBasedLightComponentHandler(re::ecs2::ImageBasedLightComponentStateImpl *a1, const re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::removeImageBasedLightComponentHandler(re::ecs2::ImageBasedLightComponentStateImpl *a1, const re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::didReparentEntityHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v6 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7 && *(void *)(v7 + 24))
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v12 = v6;
    uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v8 + 216), &v12);
    if (v9 == -1) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v8 + 160, *(void *)(*(void *)(v8 + 224) + 16 * v9 + 8));
    }
    re::ecs2::ImageBasedLightComponentStateImpl::processWorldIdChangeInEntityHierarchy(v10, a2);
    *(unsigned char *)(a1 + 280) = 1;
  }
  return 0;
}

uint64_t re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>::destroy(uint64_t result, uint64_t a2)
{
  unint64_t v2 = WORD1(a2);
  unint64_t v3 = *(void *)(result + 16);
  if (WORD1(a2) < v3)
  {
    int v4 = a2;
    uint64_t v5 = result;
    unsigned int v6 = (unsigned __int16)(v3 - 1) == WORD1(a2) ? *(_DWORD *)(result + 48) : *(_DWORD *)(result + 44);
    if ((unsigned __int16)a2 < v6)
    {
      uint64_t v7 = (unsigned __int16)a2;
      uint64_t v8 = *(void *)(result + 32);
      int v9 = *(_DWORD *)(*(void *)(v8 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2);
      if (v9 && v9 == (HIDWORD(a2) & 0xFFFFFF))
      {
        uint64_t v11 = *(void *)(v8 + 16 * WORD1(a2));
        if (v11)
        {
          uint64_t v12 = v11 + ((unint64_t)(unsigned __int16)a2 << 7);
          uint64_t v13 = *(void *)(v12 + 120);
          if (v13)
          {
            long long v14 = (void *)(v12 + 64);
            uint64_t v15 = v11 + ((unint64_t)(unsigned __int16)a2 << 7);
            uint64_t v17 = *(void *)(v15 + 72);
            unint64_t v16 = (void *)(v15 + 72);
            if (v17) {
              void *v16 = 0;
            }
            if (*v14)
            {
              (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
              void *v14 = 0;
            }
            uint64_t v18 = (_OWORD *)(v11 + (v7 << 7));
            v18[6] = 0u;
            v18[7] = 0u;
            v18[5] = 0u;
          }
          re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::deinit(v11 + (v7 << 7));
          uint64_t result = re::DynamicArray<unsigned long>::deinit(v11 + (v7 << 7));
          if (*(void *)(v5 + 16) <= v2)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(*(void *)(*(void *)(v5 + 32) + 16 * v2 + 8) + 4 * v7) = 0;
          *(_DWORD *)uint64_t v12 = *(_DWORD *)(v5 + 52);
          *(_DWORD *)(v5 + 52) = v4;
          --*(_DWORD *)(v5 + 40);
        }
      }
    }
  }
  return result;
}

double re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, a2);
  if (v3 != -1)
  {
    uint64_t v5 = v3;
    unsigned int v6 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v7.i64[0] = -1;
    v7.i64[1] = -1;
    int8x8_t v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v6, v7), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v8) {
      char v9 = -1;
    }
    else {
      char v9 = 0x80;
    }
    v6->i8[v3 & 0xF] = v9;
    uint64_t v10 = a1[1];
    uint64_t v11 = (void *)(v10 + 72 * v3);
    unint64_t v12 = 0xBF58476D1CE4E5B9 * (*v11 ^ (*v11 >> 30));
    a1[5] ^= ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27)));
    uint64_t v15 = (void *)v11[7];
    long long v14 = v11 + 7;
    uint64_t v13 = v15;
    if (v15)
    {

      void *v14 = 0;
    }
    re::DynamicArray<re::IBL>::deinit(v10 + 72 * v5 + 16);
    unint64_t v16 = a1[2];
    unint64_t v17 = a1[3] - 1;
    uint64_t v18 = a1[4];
    if (v8) {
      ++v18;
    }
    a1[3] = v17;
    a1[4] = v18;
    if (v16 >= 0x11 && v17 < v16 >> 2)
    {
      return re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(a1, 0);
    }
  }
  return result;
}

unint64_t re::ecs2::ImageBasedLightComponentStateImpl::didDependentComponentChange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::ImageBasedLightComponentStateImpl::processWorldIdChangeInEntityHierarchy(a2, a3);
  *(unsigned char *)(a1 + 280) = 1;
  return result;
}

unint64_t re::ecs2::ImageBasedLightComponentStateImpl::processWorldIdChangeInEntityHierarchy(unint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = result;
    unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      int v4 = (re::ecs2::Component *)result;
      uint64_t v5 = 24;
      unint64_t v6 = 0xFFFFFFFFLL;
      do
      {
        unint64_t v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v3 + 16), *(void *)(v3 + v5), v4);
        if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v10 = v7;
          unint64_t v6 = v8;
          goto LABEL_11;
        }
        v5 += 8;
      }
      while (v5 != 56);
      unint64_t v10 = -1;
LABEL_11:
      unint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::setComponentState(v3, v10, v6);
    }
    uint64_t v11 = *(void *)(a2 + 328);
    if (v11)
    {
      unint64_t v12 = *(uint64_t **)(a2 + 344);
      uint64_t v13 = 8 * v11;
      do
      {
        uint64_t v14 = *v12++;
        unint64_t result = re::ecs2::ImageBasedLightComponentStateImpl::processWorldIdChangeInEntityHierarchy(v3, v14);
        v13 -= 8;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::clearDataForEntity(re::ecs2::ImageBasedLightComponentStateImpl *this, const re::ecs2::Entity *a2)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  int v4 = (uint64_t *)((char *)this + 216);
  uint64_t result = re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find((void *)this + 27, (unint64_t)a2);
  if (result == -1) {
    return result;
  }
  unint64_t v6 = (unint64_t *)result;
  unint64_t v7 = 0x94D049BB133111EBLL;
  uint64_t v65 = *((void *)this + 28);
  uint64_t v8 = v65 + 32 * result;
  char v9 = (void *)re::DataArray<re::ecs2::ShadowPlaneInfo>::get((uint64_t)this + 88, *(void *)(v8 + 8));
  uint64_t v11 = *(void *)(v8 + 16);
  unint64_t v10 = (uint64_t *)(v8 + 16);
  uint64_t v12 = re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::get(v9[2], v9[4], v11);
  uint64_t v13 = re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v13) {
    goto LABEL_29;
  }
  uint64_t v14 = *(void *)(v12 + 88);
  uint64_t v15 = *(void *)(v12 + 72);
  if (v15)
  {
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(v12 + 88);
    while (*v17 != v13)
    {
      ++v17;
      v16 -= 8;
      if (!v16)
      {
        unint64_t v17 = (void *)(v14 + 8 * v15);
        break;
      }
    }
  }
  else
  {
    unint64_t v17 = *(void **)(v12 + 88);
  }
  unint64_t v18 = ((uint64_t)v17 - v14) >> 3;
  if (v18 == v15) {
    goto LABEL_29;
  }
  unint64_t v7 = *(void *)(v12 + 16);
  if (v7 <= v18)
  {
    long long v73 = 0u;
    memset(v72, 0, sizeof(v72));
    *(_OWORD *)buf = 0u;
    long long v71 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v66 = 136315906;
    *(void *)&v66[4] = "removeAt";
    *(_WORD *)&v66[12] = 1024;
    *(_DWORD *)&v66[14] = 931;
    *(_WORD *)&v66[18] = 2048;
    *(void *)&v66[20] = v18;
    __int16 v67 = 2048;
    *(void *)long long v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    long long v73 = 0u;
    memset(v72, 0, sizeof(v72));
    *(_OWORD *)buf = 0u;
    long long v71 = 0u;
    int v4 = (uint64_t *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v66 = 136315906;
    *(void *)&v66[4] = "removeAt";
    *(_WORD *)&v66[12] = 1024;
    *(_DWORD *)&v66[14] = 931;
    *(_WORD *)&v66[18] = 2048;
    *(void *)&v66[20] = v18;
    __int16 v67 = 2048;
    *(void *)long long v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_61;
  }
  if (v7 - 1 > v18)
  {
    uint64_t v19 = *(void *)(v12 + 32);
    uint64_t v20 = v19 + 224 * v7;
    uint64_t v21 = v19 + 224 * v18;
    NS::SharedPtr<MTL::Texture>::operator=((void **)v21, (void **)(v20 - 224));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 8), (void **)(v20 - 216));
    long long v23 = *(_OWORD *)(v20 - 192);
    long long v22 = *(_OWORD *)(v20 - 176);
    *(_OWORD *)(v21 + 16) = *(_OWORD *)(v20 - 208);
    *(_OWORD *)(v21 + 32) = v23;
    *(_OWORD *)(v21 + 48) = v22;
    long long v25 = *(_OWORD *)(v20 - 144);
    long long v24 = *(_OWORD *)(v20 - 128);
    long long v26 = *(_OWORD *)(v20 - 160);
    *(void *)(v21 + 110) = *(void *)(v20 - 114);
    *(_OWORD *)(v21 + 80) = v25;
    *(_OWORD *)(v21 + 96) = v24;
    *(_OWORD *)(v21 + 64) = v26;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 120), (void **)(v20 - 104));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 128), (void **)(v20 - 96));
    *(void *)(v21 + 136) = *(void *)(v20 - 88);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 144), (void **)(v20 - 80));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 152), (void **)(v20 - 72));
    long long v27 = *(_OWORD *)(v20 - 64);
    long long v28 = *(_OWORD *)(v20 - 48);
    long long v29 = *(_OWORD *)(v20 - 32);
    *(_WORD *)(v21 + 208) = *(_WORD *)(v20 - 16);
    *(_OWORD *)(v21 + 176) = v28;
    *(_OWORD *)(v21 + 192) = v29;
    *(_OWORD *)(v21 + 160) = v27;
    unint64_t v7 = *(void *)(v12 + 16);
  }
  uint64_t v30 = *(void *)(v12 + 32) + 224 * v7;
  uint64_t v31 = *(void **)(v30 - 72);
  if (v31)
  {

    *(void *)(v30 - 72) = 0;
  }
  unint64_t v32 = *(void **)(v30 - 80);
  if (v32)
  {

    *(void *)(v30 - 80) = 0;
  }
  uint64_t v33 = *(void **)(v30 - 96);
  if (v33)
  {

    *(void *)(v30 - 96) = 0;
  }
  uint64_t v34 = *(void **)(v30 - 104);
  if (v34)
  {

    *(void *)(v30 - 104) = 0;
  }
  long long v35 = *(void **)(v30 - 216);
  if (v35)
  {

    *(void *)(v30 - 216) = 0;
  }
  int v36 = *(void **)(v30 - 224);
  if (v36)
  {

    *(void *)(v30 - 224) = 0;
  }
  --*(void *)(v12 + 16);
  ++*(_DWORD *)(v12 + 24);
  unint64_t v7 = *(void *)(v12 + 72);
  if (v7 <= v18) {
    goto LABEL_60;
  }
  unint64_t v37 = v7 - 1;
  if (v7 - 1 > v18)
  {
    *(void *)(*(void *)(v12 + 88) + 8 * v18) = *(void *)(*(void *)(v12 + 88) + 8 * v7 - 8);
    *(void *)(v12 + 72) = v37;
    ++*(_DWORD *)(v12 + 80);
    unint64_t v7 = 0x94D049BB133111EBLL;
    goto LABEL_29;
  }
  *(void *)(v12 + 72) = v37;
  ++*(_DWORD *)(v12 + 80);
  unint64_t v7 = 0x94D049BB133111EBLL;
  if (!v37)
  {
    re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::destroy((uint64_t)v9, *v10);
    uint64_t v12 = (uint64_t)(v9 + 8);
    uint64_t v47 = v65 + 32 * (void)v6;
    unint64_t v48 = *(void *)(v47 + 24);
    unint64_t v6 = (unint64_t *)(v47 + 24);
    uint64_t v49 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v9 + 8, v48);
    if (v49 == -1) {
      goto LABEL_47;
    }
    uint64_t v50 = (int8x16_t *)(v9[8] + (v49 & 0xFFFFFFFFFFFFFFF0));
    v51.i64[0] = -1;
    v51.i64[1] = -1;
    int8x8_t v52 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v50, v51), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v52) {
      char v53 = -1;
    }
    else {
      char v53 = 0x80;
    }
    v50->i8[v49 & 0xF] = v53;
    unint64_t v54 = v9[10];
    unint64_t v55 = *(void *)(v9[9] + 16 * v49);
    unint64_t v56 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v55 ^ (v55 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v55 ^ (v55 >> 30))) >> 27));
    v9[13] ^= (v56 >> 31) ^ v56;
    uint64_t v57 = v9[12];
    if (v52) {
      ++v57;
    }
    unint64_t v58 = v9[11] - 1;
    v9[11] = v58;
    v9[12] = v57;
    if (v54 < 0x11 || v58 >= v54 >> 2)
    {
LABEL_47:
      re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)(*((void *)this + 1) + 1240));
      if (*(void *)&buf[8])
      {
        unsigned int v59 = atomic_load((unsigned int *)(*(void *)&buf[8] + 704));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        if (v59 == 2)
        {
          memset(v66, 0, sizeof(v66));
          *(void *)&v68[2] = 0;
          *(void *)&v68[10] = 0;
          int v69 = 0;
          uint64_t DefaultIBLData = re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLData(this);
          re::DynamicArray<re::IBL>::add((_anonymous_namespace_ *)v66, DefaultIBLData);
          long long v62 = a2;
          do
          {
            long long v63 = v62;
            long long v62 = (const re::ecs2::Entity *)*((void *)v62 + 3);
          }
          while (v62);
          *(void *)buf = *((void *)v63 + 2);
          *(void *)&buf[8] = *(void *)v66;
          memset(v66, 0, 24);
          long long v71 = *(_OWORD *)&v66[8];
          ++*(_DWORD *)&v66[24];
          LODWORD(v72[0]) = 1;
          *(_OWORD *)((char *)v72 + 8) = *(_OWORD *)&v68[2];
          *(_OWORD *)&v68[2] = 0u;
          DWORD2(v72[1]) = v69;
          re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addOrReplace((re::ecs2::ImageBasedLightComponentStateImpl *)((char *)this + 288), v6, (uint64_t)buf);
          if (*(void *)&v72[1])
          {

            *(void *)&v72[1] = 0;
          }
          re::DynamicArray<re::IBL>::deinit((uint64_t)&buf[8]);
          if (*(void *)&v68[10])
          {

            *(void *)&v68[10] = 0;
          }
          re::DynamicArray<re::IBL>::deinit((uint64_t)v66);
          goto LABEL_29;
        }
      }
      else
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
      }
      long long v64 = *re::graphicsLogObjects(v60);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v64, OS_LOG_TYPE_DEFAULT, "Failed to add default IBL data to the world upon IBLComponent removal because the default IBL asset hasn't been loaded yet.", buf, 2u);
      }
      goto LABEL_29;
    }
LABEL_61:
    re::HashBrown<unsigned long long,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)v12, 0);
    goto LABEL_47;
  }
LABEL_29:
  uint64_t result = re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v4, (unint64_t)a2);
  if (result != -1)
  {
    uint64_t v38 = (int8x16_t *)(*((void *)this + 27) + (result & 0xFFFFFFFFFFFFFFF0));
    v39.i64[0] = -1;
    v39.i64[1] = -1;
    int8x8_t v40 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v38, v39), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v40) {
      char v41 = -1;
    }
    else {
      char v41 = 0x80;
    }
    v38->i8[result & 0xF] = v41;
    unint64_t v42 = *((void *)this + 29);
    unint64_t v43 = *(void *)(*((void *)this + 28) + 32 * result);
    unint64_t v44 = ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27)) * v7;
    *((void *)this + 32) ^= (v44 >> 31) ^ v44;
    uint64_t v45 = *((void *)this + 31);
    if (v40) {
      ++v45;
    }
    unint64_t v46 = *((void *)this + 30) - 1;
    *((void *)this + 30) = v46;
    *((void *)this + 31) = v45;
    if (v42 >= 0x11 && v46 < v42 >> 2) {
      return re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(v4, 0);
    }
  }
  return result;
}

uint64_t re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::get(unint64_t a1, uint64_t a2, int a3)
{
  if (HIWORD(a3) >= a1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16 * HIWORD(a3)) + 96 * (unsigned __int16)a3;
}

uint64_t re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::destroy(uint64_t result, uint64_t a2)
{
  unint64_t v2 = WORD1(a2);
  unint64_t v3 = *(void *)(result + 16);
  if (WORD1(a2) < v3)
  {
    int v4 = a2;
    uint64_t v5 = result;
    unsigned int v6 = (unsigned __int16)(v3 - 1) == WORD1(a2) ? *(_DWORD *)(result + 48) : *(_DWORD *)(result + 44);
    if ((unsigned __int16)a2 < v6)
    {
      uint64_t v7 = (unsigned __int16)a2;
      uint64_t v8 = *(void *)(result + 32);
      int v9 = *(_DWORD *)(*(void *)(v8 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2);
      if (v9 && v9 == (HIDWORD(a2) & 0xFFFFFF))
      {
        uint64_t v11 = *(void *)(v8 + 16 * WORD1(a2));
        if (v11)
        {
          uint64_t v12 = v11 + 96 * (unsigned __int16)a2;
          uint64_t v13 = *(void *)(v12 + 56);
          if (v13)
          {
            uint64_t v14 = v11 + 96 * (unsigned __int16)a2;
            uint64_t v16 = *(void *)(v14 + 88);
            uint64_t v15 = (void *)(v14 + 88);
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
            }
            void *v15 = 0;
            *(void *)(v12 + 64) = 0;
            *(void *)(v12 + 72) = 0;
            *(void *)(v12 + 56) = 0;
            ++*(_DWORD *)(v11 + 96 * v7 + 80);
          }
          unint64_t v17 = *(void **)(v12 + 40);
          if (v17)
          {

            *(void *)(v12 + 40) = 0;
          }
          uint64_t result = re::DynamicArray<re::IBL>::deinit(v11 + 96 * v7);
          if (*(void *)(v5 + 16) <= v2)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(*(void *)(*(void *)(v5 + 32) + 16 * v2 + 8) + 4 * v7) = 0;
          *(_DWORD *)uint64_t v12 = *(_DWORD *)(v5 + 52);
          *(_DWORD *)(v5 + 52) = v4;
          --*(_DWORD *)(v5 + 40);
        }
      }
    }
  }
  return result;
}

__n128 re::DynamicArray<re::IBL>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::IBL>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 224 * v4;
  *(void *)uint64_t v5 = *(id *)a2;
  *(void *)(v5 + 8) = *(id *)(a2 + 8);
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(_OWORD *)(v5 + 48) = v6;
  long long v9 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v10 = *(_OWORD *)(a2 + 64);
  *(void *)(v5 + 110) = *(void *)(a2 + 110);
  *(_OWORD *)(v5 + 80) = v9;
  *(_OWORD *)(v5 + 96) = v8;
  *(_OWORD *)(v5 + 64) = v10;
  *(void *)(v5 + 120) = *(id *)(a2 + 120);
  *(void *)(v5 + 128) = *(id *)(a2 + 128);
  *(void *)(v5 + 136) = *(void *)(a2 + 136);
  *(void *)(v5 + 144) = *(id *)(a2 + 144);
  *(void *)(v5 + 152) = *(id *)(a2 + 152);
  long long v12 = *(_OWORD *)(a2 + 176);
  __n128 result = *(__n128 *)(a2 + 192);
  long long v13 = *(_OWORD *)(a2 + 160);
  *(_WORD *)(v5 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(v5 + 176) = v12;
  *(__n128 *)(v5 + 192) = result;
  *(_OWORD *)(v5 + 160) = v13;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLData(re::ecs2::ImageBasedLightComponentStateImpl *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 576)) {
    return (uint64_t)this + 352;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v14, (const re::AssetHandle *)(*((void *)this + 1) + 1240));
  uint64_t v2 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)&v14);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  id v13 = *(id *)(*(void *)(*(void *)(*((void *)this + 1) + 112) + 64) + 88);
  uint64_t v3 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v2 + 24));
  uint64_t v4 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v2 + 48));
  id v14 = 0;
  id v15 = 0;
  LODWORD(v16) = 0;
  long long v17 = xmmword_23435FD50;
  long long v18 = xmmword_23435FD60;
  long long v19 = xmmword_23435FD80;
  LODWORD(v20) = 0;
  *(_OWORD *)uint64_t v21 = xmmword_2343A2370;
  *(_DWORD *)&v21[16] = 0;
  *(_WORD *)&v21[20] = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  id v24 = 0;
  long long v25 = xmmword_23435FD50;
  long long v26 = xmmword_23435FD60;
  long long v27 = xmmword_23435FD80;
  __int16 v28 = 256;
  if (*(_DWORD *)(v3 + 240)) {
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  long long v6 = (void **)(v3 + 160);
  if (objc_msgSend(*(id *)(v3 + 160), sel_textureType) == (id)5)
  {
    if (*(_DWORD *)(v3 + 240)) {
      goto LABEL_10;
    }
  }
  else
  {
    long long v6 = &v13;
  }
  uint64_t v3 = (uint64_t)&v15;
  NS::SharedPtr<MTL::Texture>::operator=(&v15, v6);
  if (*(_DWORD *)(v5 + 240)) {
    goto LABEL_10;
  }
  long long v7 = (void **)(v5 + 160);
  if (objc_msgSend(*(id *)(v5 + 160), sel_textureType) != (id)5)
  {
LABEL_11:
    long long v7 = &v13;
    goto LABEL_12;
  }
  if (*(_DWORD *)(v5 + 240))
  {
LABEL_10:
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_11;
  }
LABEL_12:
  NS::SharedPtr<MTL::Texture>::operator=(&v14, v7);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 44, &v14);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 45, (void **)v3);
  long long v8 = *(_OWORD *)v21;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = v20;
  *((_OWORD *)this + 28) = v8;
  *(void *)((char *)this + 462) = *(void *)&v21[14];
  long long v9 = v17;
  *((_OWORD *)this + 23) = v16;
  *((_OWORD *)this + 24) = v9;
  long long v10 = v19;
  *((_OWORD *)this + 25) = v18;
  *((_OWORD *)this + 26) = v10;
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 59, (void **)&v22);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 60, (void **)&v22 + 1);
  *((void *)this + 61) = v23;
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 62, (void **)&v23 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 63, &v24);
  long long v11 = v26;
  *((_OWORD *)this + 32) = v25;
  *((_OWORD *)this + 33) = v11;
  *((_OWORD *)this + 34) = v27;
  *((_WORD *)this + 280) = v28;
  *((unsigned char *)this + 576) = 1;
  if (v24)
  {

    id v24 = 0;
  }
  if (*((void *)&v23 + 1))
  {

    *((void *)&v23 + 1) = 0;
  }
  if (*((void *)&v22 + 1))
  {

    *((void *)&v22 + 1) = 0;
  }
  if ((void)v22)
  {

    *(void *)&long long v22 = 0;
  }
  if (v15)
  {

    id v15 = 0;
  }
  if (v14) {

  }
  if (v13) {
  return (uint64_t)this + 352;
  }
}

void **re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addOrReplace(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, *a2);
  if (v6 == -1)
  {
    return (void **)re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(a1, (uint64_t *)a2, a3);
  }
  else
  {
    uint64_t v7 = *((void *)a1 + 1) + 72 * v6;
    *(void *)(v7 + 8) = *(void *)a3;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v7 + 16, a3 + 8);
    __n128 result = NS::SharedPtr<MTL::Texture>::operator=((void **)(v7 + 56), (void **)(a3 + 48));
    *(_DWORD *)(v7 + 64) = *(_DWORD *)(a3 + 56);
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLDataForWorld(re::ecs2::ImageBasedLightComponentStateImpl *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 136) + 24))(*(void *)(*((void *)this + 1) + 136));
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, a2) == 1)
  {
    if (!*((unsigned char *)this + 816))
    {
      uint64_t DefaultIBLData = re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLData(this);
      NS::SharedPtr<MTL::Texture>::operator=((void **)this + 74, (void **)DefaultIBLData);
      NS::SharedPtr<MTL::Texture>::operator=((void **)this + 75, (void **)(DefaultIBLData + 8));
      long long v7 = *(_OWORD *)(DefaultIBLData + 32);
      long long v6 = *(_OWORD *)(DefaultIBLData + 48);
      *((_OWORD *)this + 38) = *(_OWORD *)(DefaultIBLData + 16);
      *((_OWORD *)this + 39) = v7;
      *((_OWORD *)this + 40) = v6;
      long long v9 = *(_OWORD *)(DefaultIBLData + 80);
      long long v8 = *(_OWORD *)(DefaultIBLData + 96);
      long long v10 = *(_OWORD *)(DefaultIBLData + 64);
      *(void *)((char *)this + 702) = *(void *)(DefaultIBLData + 110);
      *((_OWORD *)this + 42) = v9;
      *((_OWORD *)this + 43) = v8;
      *((_OWORD *)this + 41) = v10;
      NS::SharedPtr<MTL::Texture>::operator=((void **)this + 89, (void **)(DefaultIBLData + 120));
      NS::SharedPtr<MTL::Texture>::operator=((void **)this + 90, (void **)(DefaultIBLData + 128));
      *((void *)this + 91) = *(void *)(DefaultIBLData + 136);
      NS::SharedPtr<MTL::Texture>::operator=((void **)this + 92, (void **)(DefaultIBLData + 144));
      NS::SharedPtr<MTL::Texture>::operator=((void **)this + 93, (void **)(DefaultIBLData + 152));
      long long v12 = *(_OWORD *)(DefaultIBLData + 176);
      long long v11 = *(_OWORD *)(DefaultIBLData + 192);
      long long v13 = *(_OWORD *)(DefaultIBLData + 160);
      *((_WORD *)this + 400) = *(_WORD *)(DefaultIBLData + 208);
      *((_OWORD *)this + 48) = v12;
      *((_OWORD *)this + 49) = v11;
      *((_OWORD *)this + 47) = v13;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C4B8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8C4B8))
      {
        re::Defaults::floatValue((re::Defaults *)"stencilPortalDefaultIBLIntensityLV", v15, (uint64_t)v17);
        float v16 = v18;
        if (!v17[0]) {
          float v16 = 3.0;
        }
        _MergedGlobals_289 = LODWORD(v16);
        __cxa_guard_release(&qword_26AF8C4B8);
      }
      *((_DWORD *)this + 152) = _MergedGlobals_289;
      *((unsigned char *)this + 816) = 1;
    }
    return (uint64_t)this + 592;
  }
  else
  {
    return re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLData(this);
  }
}

BOOL re::ecs2::ImageBasedLightComponentStateImpl::processDirtyComponents(re::ecs2::ImageBasedLightComponentStateImpl *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v23, a5, 0);
  unint64_t v9 = v23;
  unint64_t v10 = v24;
  unint64_t v23 = a4;
  unint64_t v24 = v9;
  unint64_t v25 = v10;
  uint64_t v11 = (unsigned __int16)v10;
  uint64_t v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      id v15 = *(const re::ecs2::Entity **)(*(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v24)
                                       + 16);
      re::ecs2::ImageBasedLightComponentStateImpl::clearDataForEntity(a1, v15);
      int v16 = *((_DWORD *)v15 + 72);
      unint64_t v17 = v23;
      unint64_t v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v24);
      if (v16) {
        uint64_t v19 = 40;
      }
      else {
        uint64_t v19 = 32;
      }
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v17, v18, *(void *)(a3 + v19));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v24);
    }
    while (v24 != a5 || (unsigned __int16)v25 != 0xFFFF || WORD1(v25) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    unint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::processPreparingComponents(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v247 = *MEMORY[0x263EF8340];
  unint64_t v8 = *(void *)(a3 + 8);
  unint64_t v9 = *(void **)(a1[1] + 112);
  unint64_t v10 = (unsigned __int8 *)v9[19];
  if (v10) {
    unsigned int v200 = *v10;
  }
  else {
    unsigned int v200 = 0;
  }
  uint64_t v11 = v9[13];
  if (v11)
  {
    re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
    unint64_t v9 = *(void **)(a1[1] + 112);
  }
  id v218 = *(id *)(v9[8] + 88);
  v199 = (void *)(a1[20]
                  + 16
                  * re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(a1 + 19, v8)+ 8);
  unint64_t v203 = re::DataArray<re::ecs2::ShadowPlaneInfo>::get((uint64_t)(a1 + 11), *v199);
  uint64_t v201 = (*(uint64_t (**)(void))(**(void **)(a1[1] + 136) + 24))(*(void *)(a1[1] + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v220, (uint64_t)a5, 0);
  unint64_t v215 = a4;
  v216 = v220;
  id v217 = v221;
  if (v220 == a5 && (unsigned __int16)v221 == 0xFFFFLL && (v221 & 0xFFFF0000) == 0xFFFF0000) {
    goto LABEL_9;
  }
  v204 = (uint64_t *)(v203 + 64);
  do
  {
    uint64_t v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v216);
    unint64_t v17 = *(void ***)v16;
    unint64_t v214 = *(void *)(*(void *)v16 + 16);
    (*(void (**)(id *__return_ptr))(*(void *)v201 + 8))(&v220);
    if ((_BYTE)v220) {
      id v18 = v221;
    }
    else {
      id v18 = 0;
    }
    unint64_t v212 = (unint64_t)v18;
    id v220 = 0;
    id v221 = 0;
    LODWORD(v222) = 0;
    long long v223 = xmmword_23435FD50;
    long long v224 = xmmword_23435FD60;
    long long v225 = xmmword_23435FD80;
    LODWORD(v226) = 0;
    *(_OWORD *)v227 = xmmword_2343A2370;
    *(_DWORD *)&v227[16] = 0;
    *(_WORD *)&v227[20] = 0;
    id v230 = 0;
    long long v228 = 0u;
    long long v229 = 0u;
    long long v231 = xmmword_23435FD50;
    long long v232 = xmmword_23435FD60;
    long long v233 = xmmword_23435FD80;
    __int16 v234 = 256;
    v213 = v17;
    if (!*((unsigned char *)v17 + 136)) {
      goto LABEL_27;
    }
    uint64_t v19 = (unsigned int *)v17[15];
    if (!v19)
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228 + 1, &v218);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228, &v218);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v229 + 1, &v218);
      NS::SharedPtr<MTL::Texture>::operator=(&v230, &v218);
LABEL_27:
      size_t v27 = 0;
      goto LABEL_47;
    }
    long long v20 = (re::AssetHandle *)(v17 + 14);
    unsigned int v21 = atomic_load(v19 + 176);
    if (v21 != 2)
    {
      re::AssetHandle::loadAsync(v20);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228 + 1, &v218);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228, &v218);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v229 + 1, &v218);
      NS::SharedPtr<MTL::Texture>::operator=(&v230, &v218);
      size_t v27 = 0;
      int v28 = 0;
      goto LABEL_48;
    }
    v210 = (re::AssetHandle *)(v17 + 14);
    uint64_t v205 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>(v20);
    uint64_t v22 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v205 + 24));
    if (*(_DWORD *)(v22 + 240)) {
      goto LABEL_231;
    }
    unint64_t v23 = (re::AssetHandle *)v22;
    unint64_t v24 = (void **)(v22 + 160);
    unint64_t v25 = (re *)objc_msgSend(*(id *)(v22 + 160), sel_textureType);
    v196 = v23;
    if (v25 == (re *)5)
    {
      if (*((_DWORD *)v23 + 60)) {
        goto LABEL_231;
      }
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228 + 1, v24);
      uint64_t v26 = v205;
    }
    else
    {
      uint64_t v29 = *re::ecsComponentsLogObjects(v25);
      uint64_t v26 = v205;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = re::AssetHandle::assetInfo(v210);
        if (v30[17]) {
          uint64_t v31 = (char *)v30[18];
        }
        else {
          uint64_t v31 = (char *)v30 + 137;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = v31;
        _os_log_impl(&dword_233120000, v29, OS_LOG_TYPE_DEFAULT, "Wrong diffuse IBL texture type [%s]. Diffuse IBL texture must be cubemap.", buf, 0xCu);
      }
    }
    uint64_t v32 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v26 + 48));
    if (*(_DWORD *)(v32 + 240)) {
LABEL_231:
    }
      std::__throw_bad_variant_access[abi:nn180100]();
    uint64_t v33 = (const re::TextureAsset *)v32;
    uint64_t v34 = (void **)(v32 + 160);
    long long v35 = (re *)objc_msgSend(*(id *)(v32 + 160), sel_textureType);
    if (v35 == (re *)5)
    {
      if (*((_DWORD *)v33 + 60)) {
        goto LABEL_231;
      }
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228, v34);
    }
    else
    {
      unint64_t v37 = *re::ecsComponentsLogObjects(v35);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v38 = re::AssetHandle::assetInfo(v210);
        if (v38[17]) {
          int8x16_t v39 = (char *)v38[18];
        }
        else {
          int8x16_t v39 = (char *)v38 + 137;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = v39;
        _os_log_impl(&dword_233120000, v37, OS_LOG_TYPE_DEFAULT, "Wrong specular IBL texture type [%s]. Specular IBL texture must be cubemap.", buf, 0xCu);
      }
    }
    unint64_t v17 = v213;
    re::ecs2::ImageBasedLightingHelper::checkIBLAssetVersion((re::ecs2::ImageBasedLightingHelper *)v213, v196, v33, v36);
    int8x8_t v40 = (char *)re::AssetHandle::assetInfo(v210);
    if (*((void *)v40 + 13)) {
      char v41 = (char *)*((void *)v40 + 14);
    }
    else {
      char v41 = v40 + 105;
    }
    size_t v27 = re::RigEvaluation::HashString::operator()((int)buf, v41);
LABEL_47:
    int v28 = 1;
LABEL_48:
    size_t v206 = v27;
    if (!v17[12])
    {
      int v211 = v28;
      if (!v17[6] && !v17[9])
      {
        NS::SharedPtr<MTL::Texture>::operator=(&v221, &v218);
        NS::SharedPtr<MTL::Texture>::operator=(&v220, &v218);
        unint64_t v69 = (unint64_t)v213;
        goto LABEL_116;
      }
      unint64_t v48 = (re::TextureAsset *)(v17 + 5);
      uint64_t v49 = re::AssetHandle::loadedAsset<re::TextureAsset>(v48);
      if (v49)
      {
        uint64_t v50 = v49;
        if (*(_DWORD *)(v49 + 240)) {
          goto LABEL_231;
        }
        int8x16_t v51 = (re *)objc_msgSend(*(id *)(v49 + 160), sel_textureType);
        if (v51 == (re *)5)
        {
          if (*(_DWORD *)(v50 + 240)) {
            goto LABEL_231;
          }
          NS::SharedPtr<MTL::Texture>::operator=(&v221, (void **)(v50 + 160));
        }
        else
        {
          long long v79 = *re::ecsComponentsLogObjects(v51);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            long long v80 = re::AssetHandle::assetInfo(v48);
            if (v80[17]) {
              uint64_t v81 = (char *)v80[18];
            }
            else {
              uint64_t v81 = (char *)v80 + 137;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&buf[4] = v81;
            _os_log_impl(&dword_233120000, v79, OS_LOG_TYPE_DEFAULT, "Wrong diffuse IBL texture type [%s]. Diffuse IBL texture must be cubemap.", buf, 0xCu);
          }
        }
      }
      else
      {
        re::AssetHandle::loadAsync(v48);
        NS::SharedPtr<MTL::Texture>::operator=(&v221, &v218);
        int v211 = 0;
      }
      uint64_t v82 = (re::AssetHandle *)(v213 + 8);
      uint64_t v83 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v213 + 8));
      if (v83)
      {
        uint64_t v84 = v83;
        if (*(_DWORD *)(v83 + 240)) {
          goto LABEL_231;
        }
        __int16 v85 = (re *)objc_msgSend(*(id *)(v83 + 160), sel_textureType);
        if (v85 == (re *)5)
        {
          if (*(_DWORD *)(v84 + 240)) {
            goto LABEL_231;
          }
          NS::SharedPtr<MTL::Texture>::operator=(&v220, (void **)(v84 + 160));
          goto LABEL_115;
        }
        StringID v86 = *re::ecsComponentsLogObjects(v85);
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v87 = re::AssetHandle::assetInfo(v82);
          if (v87[17]) {
            unint64_t v88 = (char *)v87[18];
          }
          else {
            unint64_t v88 = (char *)v87 + 137;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&buf[4] = v88;
          long long v77 = v86;
          long long v78 = "Wrong specular IBL texture type [%s]. Specular IBL texture must be cubemap.";
          goto LABEL_114;
        }
LABEL_115:
        unint64_t v69 = (unint64_t)v213;
LABEL_116:
        size_t v72 = v206;
        goto LABEL_117;
      }
      re::AssetHandle::loadAsync(v82);
LABEL_108:
      NS::SharedPtr<MTL::Texture>::operator=(&v220, &v218);
      int v211 = 0;
      goto LABEL_115;
    }
    unint64_t v42 = (re::ImageBasedLightAsset *)(v17 + 11);
    uint64_t v43 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>(v42);
    if (!v43)
    {
      re::AssetHandle::loadAsync(v42);
      NS::SharedPtr<MTL::Texture>::operator=(&v221, &v218);
      goto LABEL_108;
    }
    v197 = v42;
    uint64_t v44 = v43;
    uint64_t v45 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v43 + 24));
    int v211 = v28;
    v195 = (re::ecs2::ImageBasedLightComponent *)v45;
    if (!v45)
    {
      uint64_t v57 = NS::SharedPtr<MTL::Texture>::operator=(&v221, &v218);
      unint64_t v58 = *re::ecsComponentsLogObjects((re *)v57);
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_75;
      }
      unsigned int v59 = re::AssetHandle::assetInfo(v197);
      if (v59[17]) {
        uint64_t v60 = (char *)v59[18];
      }
      else {
        uint64_t v60 = (char *)v59 + 137;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v60;
      unint64_t v55 = v58;
      unint64_t v56 = "Null diffuse texture encountered for IBL texture type [%s].";
      goto LABEL_74;
    }
    if (*(_DWORD *)(v45 + 240)) {
      goto LABEL_231;
    }
    uint64_t v47 = (void **)(v45 + 160);
    unint64_t v46 = *(re **)(v45 + 160);
    if (!v46 || (unint64_t v46 = (re *)[(re *)v46 textureType], v46 != (re *)5))
    {
      int8x8_t v52 = *re::ecsComponentsLogObjects(v46);
      if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_75;
      }
      char v53 = re::AssetHandle::assetInfo(v197);
      if (v53[17]) {
        unint64_t v54 = (char *)v53[18];
      }
      else {
        unint64_t v54 = (char *)v53 + 137;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v54;
      unint64_t v55 = v52;
      unint64_t v56 = "Wrong diffuse IBL texture type [%s]. Diffuse IBL texture must be cubemap.";
LABEL_74:
      _os_log_impl(&dword_233120000, v55, OS_LOG_TYPE_DEFAULT, v56, buf, 0xCu);
      goto LABEL_75;
    }
    if (*((_DWORD *)v195 + 60)) {
      goto LABEL_231;
    }
    NS::SharedPtr<MTL::Texture>::operator=(&v221, v47);
LABEL_75:
    uint64_t v61 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v44 + 48));
    if (!v61)
    {
      long long v73 = NS::SharedPtr<MTL::Texture>::operator=(&v220, &v218);
      uint64_t v74 = *re::ecsComponentsLogObjects((re *)v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
        long long v75 = re::AssetHandle::assetInfo(v197);
        if (v75[17]) {
          long long v76 = (char *)v75[18];
        }
        else {
          long long v76 = (char *)v75 + 137;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = v76;
        long long v77 = v74;
        long long v78 = "Null specular texture encountered for IBL texture type [%s].";
LABEL_114:
        _os_log_impl(&dword_233120000, v77, OS_LOG_TYPE_DEFAULT, v78, buf, 0xCu);
        goto LABEL_115;
      }
      goto LABEL_115;
    }
    uint64_t v62 = v61;
    if (*(_DWORD *)(v61 + 240)) {
      goto LABEL_231;
    }
    long long v63 = *(re **)(v61 + 160);
    if (v63 && (long long v63 = (re *)[(re *)v63 textureType], v63 == (re *)5))
    {
      if (*(_DWORD *)(v62 + 240)) {
        goto LABEL_231;
      }
      NS::SharedPtr<MTL::Texture>::operator=(&v220, (void **)(v62 + 160));
    }
    else
    {
      uint64_t v65 = *re::ecsComponentsLogObjects(v63);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        long long v66 = re::AssetHandle::assetInfo(v197);
        if (v66[17]) {
          __int16 v67 = (char *)v66[18];
        }
        else {
          __int16 v67 = (char *)v66 + 137;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = v67;
        _os_log_impl(&dword_233120000, v65, OS_LOG_TYPE_DEFAULT, "Wrong specular IBL texture type [%s]. Specular IBL texture must be cubemap.", buf, 0xCu);
      }
    }
    uint64_t v68 = (uint64_t)v195;
    if (!v195) {
      goto LABEL_115;
    }
    unint64_t v69 = (unint64_t)v213;
    re::ecs2::ImageBasedLightingHelper::checkIBLAssetVersion((re::ecs2::ImageBasedLightingHelper *)v213, v195, (const re::TextureAsset *)v62, v64);
    uint64_t v70 = (char *)re::AssetHandle::assetInfo(v197);
    if (*((void *)v70 + 13)) {
      long long v71 = (char *)*((void *)v70 + 14);
    }
    else {
      long long v71 = v70 + 105;
    }
    size_t v72 = re::RigEvaluation::HashString::operator()((int)buf, v71) + v206;
LABEL_117:
    unint64_t v89 = *(void *)(v69 + 1264);
    unsigned int v90 = *(unsigned __int8 *)(v69 + 136);
    if (*(unsigned char *)(v69 + 1208))
    {
      v227[20] = 1;
      v227[21] = v90;
    }
    else
    {
      if (!*(unsigned char *)(v69 + 136))
      {
        unint64_t v91 = 0;
        *(_WORD *)&v227[20] = 0;
        goto LABEL_120;
      }
      v227[20] = *(unsigned char *)(v69 + 1209);
      unsigned int v90 = 1;
      v227[21] = 1;
      if (!v227[20])
      {
        unint64_t v91 = 0;
        goto LABEL_120;
      }
    }
    unint64_t v91 = 0xBF58476D1CE4E5B9;
LABEL_120:
    uint64_t v92 = *(unsigned __int8 *)(v69 + 1209);
    if (*(unsigned char *)(v69 + 1209))
    {
      long long v93 = *(_OWORD *)(v69 + 1232);
      long long v231 = *(_OWORD *)(v69 + 1216);
      long long v232 = v93;
      long long v94 = *(_OWORD *)(v69 + 1248);
      long long v233 = v94;
    }
    else
    {
      long long v231 = xmmword_23435FD50;
      long long v232 = xmmword_23435FD60;
      HIDWORD(v94) = 0;
      long long v233 = xmmword_23435FD80;
    }
    uint64_t v95 = 0;
    unint64_t v96 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v89 ^ (v89 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v89 ^ (v89 >> 30))) >> 27));
    unint64_t v97 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v90) ^ ((0xBF58476D1CE4E5B9 * v90) >> 27));
    unint64_t v98 = (v96 ^ (v96 >> 31))
        + v72
        + ((0x94D049BB133111EBLL * (v91 ^ (v91 >> 27))) ^ ((0x94D049BB133111EBLL * (v91 ^ (v91 >> 27))) >> 31))
        + (v97 ^ (v97 >> 31));
    unint64_t v99 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v92) ^ ((0xBF58476D1CE4E5B9 * v92) >> 27));
    unint64_t v100 = v98 + (v99 ^ (v99 >> 31));
    do
    {
      for (uint64_t i = 0; i != 12; i += 4)
      {
        v102 = &v231;
        v103 = &v232;
        v104 = &v233;
        if (v95)
        {
          v102 = (long long *)((char *)&v231 + 8);
          v103 = (long long *)((char *)&v232 + 8);
          v104 = (long long *)((char *)&v233 + 8);
          if (v95 != 2)
          {
            v102 = (long long *)((char *)&v231 + 4);
            v103 = (long long *)((char *)&v232 + 4);
            v104 = (long long *)((char *)&v233 + 4);
            if (v95 != 1)
            {
              re::internal::assertLog((re::internal *)4, v68, "assertion failure: '%s' (%s:line %i) The row index is out of range. Allowed values are 0 to 2.", "!\"Unreachable code\"", "row", 549);
              _os_crash();
              __break(1u);
LABEL_226:
              uint64_t v219 = 0;
              long long v245 = 0u;
              long long v246 = 0u;
              long long v243 = 0u;
              long long v244 = 0u;
              *(_OWORD *)buf = 0u;
              unint64_t v188 = v139;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v235 = 136315906;
              *(void *)&v235[4] = "operator[]";
              __int16 v236 = 1024;
              int v237 = 789;
              __int16 v238 = 2048;
              unint64_t v239 = v188;
              __int16 v240 = 2048;
              unint64_t v241 = v69;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_227:
              uint64_t v219 = 0;
              long long v245 = 0u;
              long long v246 = 0u;
              long long v243 = 0u;
              long long v244 = 0u;
              *(_OWORD *)buf = 0u;
              unint64_t v189 = v139;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v235 = 136315906;
              *(void *)&v235[4] = "operator[]";
              __int16 v236 = 1024;
              int v237 = 789;
              __int16 v238 = 2048;
              unint64_t v239 = v189;
              __int16 v240 = 2048;
              unint64_t v241 = v69;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_228;
            }
          }
        }
        LODWORD(v94) = *(_DWORD *)v102;
        DWORD1(v94) = *(_DWORD *)v103;
        DWORD2(v94) = *(_DWORD *)v104;
        *(_OWORD *)buf = v94;
        unint64_t v105 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)&buf[i] ^ ((unint64_t)*(unsigned int *)&buf[i] >> 30));
        v100 += ((0x94D049BB133111EBLL * (v105 ^ (v105 >> 27))) ^ ((0x94D049BB133111EBLL * (v105 ^ (v105 >> 27))) >> 31))
              * v95;
      }
      ++v95;
    }
    while (v95 != 3);
    int v106 = *(unsigned __int8 *)(v69 + 136);
    if (*(unsigned char *)(v69 + 136)) {
      unint64_t v107 = *(unsigned int *)(v69 + 140);
    }
    else {
      unint64_t v107 = 0;
    }
    LODWORD(v229) = v107;
    if (v106 && *(unsigned char *)(v69 + 137)) {
      unint64_t v108 = *(unsigned int *)(v69 + 144);
    }
    else {
      unint64_t v108 = 0;
    }
    unint64_t v109 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v107 ^ (v107 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v107 ^ (v107 >> 30))) >> 27));
    unint64_t v110 = (v109 ^ (v109 >> 31)) + v100;
    DWORD1(v229) = v108;
    unint64_t v111 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v108 ^ (v108 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v108 ^ (v108 >> 30))) >> 27));
    *(void *)(v69 + 1328) = v110 + (v111 ^ (v111 >> 31));
    v112 = (void **)(v69 + 1320);
    if (!*(void *)(v69 + 1320) || !*(void *)(v69 + 1312))
    {
      *(void *)buf = *(id *)(*(void *)(a1[1] + 112) + 184);
      id v113 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
      objc_msgSend(v113, sel_setStorageMode_, 2);
      objc_msgSend(v113, sel_setPixelFormat_, 115);
      objc_msgSend(v113, sel_setWidth_, 256);
      objc_msgSend(v113, sel_setHeight_, 256);
      objc_msgSend(v113, sel_setUsage_, 7);
      objc_msgSend(v113, sel_setMipmapLevelCount_, 8);
      objc_msgSend(v113, sel_setSampleCount_, 1);
      objc_msgSend(v113, sel_setTextureType_, 5);
      re::mtl::Device::makeTexture(v113, (id *)buf, v235);
      v207 = (void **)(v69 + 1320);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v69 + 1320), (void **)v235);
      if (*(void *)v235) {

      }
      objc_msgSend(v113, sel_setWidth_, 64);
      objc_msgSend(v113, sel_setHeight_, 64);
      objc_msgSend(v113, sel_setMipmapLevelCount_, 1);
      re::mtl::Device::makeTexture(v113, (id *)buf, v235);
      NS::SharedPtr<MTL::Texture>::operator=(v213 + 164, (void **)v235);
      if (*(void *)v235) {

      }
      if (v113) {
      unint64_t v69 = (unint64_t)v213;
      }
      v112 = v207;
    }
    NS::SharedPtr<MTL::Texture>::operator=((void **)&v229 + 1, v112);
    NS::SharedPtr<MTL::Texture>::operator=(&v230, (void **)(v69 + 1312));
    int v114 = *(_DWORD *)(v69 + 1200);
    LODWORD(v222) = *(_DWORD *)(v69 + 28);
    LODWORD(v226) = v114;
    unint64_t v115 = *(unsigned int *)(v69 + 1288) | ((unint64_t)*(unsigned __int8 *)(v69 + 1296) << 32);
    *(void *)buf = *(void *)(v69 + 1280);
    *(void *)&buf[8] = v115;
    *(void *)&long long v116 = re::ColorGamut3F::as((uint64_t *)buf, v200, 1);
    DWORD2(v116) = v117;
    *(_OWORD *)v227 = v116;
    *(_DWORD *)&v227[16] = *(_DWORD *)(v69 + 1204);
    HIBYTE(v234) = *(unsigned char *)(v69 + 148);
    uint64_t v118 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v204, v212);
    if (v118 != -1)
    {
      v120 = (void *)v203;
      goto LABEL_164;
    }
    unint64_t v121 = v203;
    int v122 = *(_DWORD *)(v203 + 56);
    if ((v122 + 1) >> 24) {
      int v123 = 1;
    }
    else {
      int v123 = v122 + 1;
    }
    *(_DWORD *)(v203 + 56) = v123;
    uint64_t v124 = *(unsigned __int16 *)(v203 + 52);
    unint64_t v125 = *(unsigned __int16 *)(v203 + 54);
    if (v124 == 0xFFFF && v125 == 0xFFFF)
    {
      if (*(_DWORD *)(v203 + 48) >= *(_DWORD *)(v203 + 44))
      {
        re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::allocBlock((void *)v203);
        unint64_t v121 = v203;
      }
      uint64_t v126 = *(void *)(v121 + 16);
      unint64_t v127 = (unsigned __int16)(v126 - 1);
      if (v126)
      {
        uint64_t v124 = *(unsigned int *)(v121 + 48);
        if (v124 < 0x10000)
        {
          uint64_t v208 = (unsigned __int16)(v126 - 1);
          v128 = (void *)(*(void *)(v121 + 32) + 16 * v127);
          *(_DWORD *)(v121 + 48) = v124 + 1;
          *(_DWORD *)(v128[1] + 4 * v124) = *(_DWORD *)(v121 + 56);
          uint64_t v129 = *v128 + 96 * v124;
          goto LABEL_163;
        }
LABEL_230:
        re::internal::assertLog((re::internal *)5, v119, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v124);
        _os_crash();
        __break(1u);
        goto LABEL_231;
      }
LABEL_228:
      uint64_t v219 = 0;
      long long v245 = 0u;
      long long v246 = 0u;
      long long v243 = 0u;
      long long v244 = 0u;
      *(_OWORD *)buf = 0u;
      unint64_t v190 = v127;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v235 = 136315906;
      *(void *)&v235[4] = "operator[]";
      __int16 v236 = 1024;
      int v237 = 789;
      __int16 v238 = 2048;
      unint64_t v239 = v190;
      __int16 v240 = 2048;
      unint64_t v241 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_229:
      uint64_t v219 = 0;
      long long v245 = 0u;
      long long v246 = 0u;
      long long v243 = 0u;
      long long v244 = 0u;
      *(_OWORD *)buf = 0u;
      uint64_t v124 = &_os_log_internal;
      unint64_t v191 = v125;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v235 = 136315906;
      *(void *)&v235[4] = "operator[]";
      __int16 v236 = 1024;
      int v237 = 789;
      __int16 v238 = 2048;
      unint64_t v239 = v191;
      __int16 v240 = 2048;
      unint64_t v241 = v69;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_230;
    }
    unint64_t v69 = *(void *)(v203 + 16);
    if (v69 <= v125) {
      goto LABEL_229;
    }
    uint64_t v208 = *(unsigned __int16 *)(v203 + 54);
    v130 = (void *)(*(void *)(v203 + 32) + 16 * v125);
    *(_DWORD *)(v130[1] + 4 * v124) = v123;
    uint64_t v129 = *v130 + 96 * v124;
    *(_DWORD *)(v203 + 52) = *(_DWORD *)v129;
LABEL_163:
    ++*(_DWORD *)(v121 + 40);
    *(_OWORD *)(v129 + 64) = 0u;
    *(_OWORD *)(v129 + 80) = 0u;
    *(_OWORD *)(v129 + 32) = 0u;
    *(_OWORD *)(v129 + 48) = 0u;
    *(_OWORD *)uint64_t v129 = 0u;
    *(_OWORD *)(v129 + 16) = 0u;
    int v198 = *(_DWORD *)(v121 + 56);
    v120 = (void *)v121;
    uint64_t v118 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v204, v212);
    if (v118 == -1)
    {
      v155 = v120;
      if (!v120[15])
      {
        v155 = (void *)v203;
      }
      uint64_t v156 = v155[12];
      if (!v156 || (unint64_t v157 = v155[10], v157 > 8 * v156))
      {
        re::HashBrown<unsigned long long,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(v204, 1u);
        v155 = (void *)v203;
        unint64_t v157 = *(void *)(v203 + 80);
      }
      unint64_t v158 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v212 ^ (v212 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v212 ^ (v212 >> 30))) >> 27));
      unint64_t v159 = v158 ^ (v158 >> 31);
      unint64_t v160 = v157 >> 4;
      unint64_t v161 = v159 % (v157 >> 4);
      uint64_t v162 = *v204;
      unint64_t v163 = v161;
      while (1)
      {
        unint64_t v164 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v162 + 16 * v163)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
        if (v164 < 0x40) {
          break;
        }
        if (v163 + 1 == v160) {
          unint64_t v163 = 0;
        }
        else {
          ++v163;
        }
        if (v163 == v161)
        {
          re::internal::assertLog((re::internal *)4, v131, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
          uint64_t result = _os_crash();
          __break(1u);
          return result;
        }
      }
      uint64_t v165 = v162 + 16 * v163;
      int v166 = *(unsigned __int8 *)(v165 + v164);
      *(unsigned char *)(v165 + v164) = v159 & 0x7F;
      unint64_t v167 = v164 + 16 * v163;
      v168 = (unint64_t *)(v155[9] + 16 * v167);
      unint64_t *v168 = v212;
      v168[1] = (v208 << 16) | ((unint64_t)(v198 & 0xFFFFFF) << 32) | v124;
      uint64_t v169 = v155[12];
      ++v155[11];
      v155[12] = v169 - (v166 == 255);
      v170 = (unint64_t *)(v155[9] + 16 * v167);
      unint64_t v171 = *v170;
      v132 = v170 + 1;
      unint64_t v172 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v171 ^ (v171 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v171 ^ (v171 >> 30))) >> 27));
      v155[13] ^= (v172 >> 31) ^ v172;
      v120 = v155;
    }
    else
    {
LABEL_164:
      v132 = (void *)(v120[9] + 16 * v118 + 8);
    }
    re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(a1 + 36, v212);
    v209 = v132;
    v133 = (void *)re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::get(v120[2], v120[4], *v132);
    v134 = v133;
    v135 = (void ***)v133[11];
    unint64_t v69 = v133[9];
    v136 = v135;
    v137 = v213;
    if (v69)
    {
      uint64_t v138 = 8 * v69;
      v136 = (void ***)v133[11];
      while (*v136 != v213)
      {
        ++v136;
        v138 -= 8;
        if (!v138)
        {
          v136 = &v135[v69];
          break;
        }
      }
    }
    unint64_t v139 = v136 - v135;
    if (v139 != v69)
    {
      if (v69 <= v139) {
        goto LABEL_226;
      }
      v135[v139] = v213;
      unint64_t v69 = v133[2];
      if (v69 > v139)
      {
        uint64_t v146 = v133[4] + 224 * v139;
        NS::SharedPtr<MTL::Texture>::operator=((void **)v146, &v220);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 8), &v221);
        long long v148 = v223;
        long long v147 = v224;
        *(_OWORD *)(v146 + 16) = v222;
        *(_OWORD *)(v146 + 32) = v148;
        *(_OWORD *)(v146 + 48) = v147;
        long long v150 = v226;
        long long v149 = *(_OWORD *)v227;
        long long v151 = v225;
        *(void *)(v146 + 110) = *(void *)&v227[14];
        *(_OWORD *)(v146 + 80) = v150;
        *(_OWORD *)(v146 + 96) = v149;
        *(_OWORD *)(v146 + 64) = v151;
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 120), (void **)&v228);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 128), (void **)&v228 + 1);
        *(void *)(v146 + 136) = v229;
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 144), (void **)&v229 + 1);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 152), &v230);
        v141 = (_anonymous_namespace_ *)(a1 + 27);
        long long v153 = v232;
        long long v152 = v233;
        long long v154 = v231;
        *(_WORD *)(v146 + 208) = v234;
        *(_OWORD *)(v146 + 176) = v153;
        *(_OWORD *)(v146 + 192) = v152;
        *(_OWORD *)(v146 + 160) = v154;
        goto LABEL_203;
      }
      goto LABEL_227;
    }
    unint64_t v140 = v133[8];
    v141 = (_anonymous_namespace_ *)(a1 + 27);
    if (v69 >= v140)
    {
      unint64_t v142 = v69 + 1;
      if (v140 < v142)
      {
        v143 = (_anonymous_namespace_ *)(v134 + 7);
        if (v134[7])
        {
          unint64_t v144 = 2 * v140;
          if (!v140) {
            unint64_t v144 = 8;
          }
          if (v144 <= v142) {
            unint64_t v145 = v142;
          }
          else {
            unint64_t v145 = v144;
          }
          re::DynamicArray<float *>::setCapacity(v143, v145);
        }
        else
        {
          re::DynamicArray<float *>::setCapacity(v134 + 7, v142);
          ++*((_DWORD *)v134 + 20);
        }
        v141 = (_anonymous_namespace_ *)(a1 + 27);
        v137 = v213;
      }
      unint64_t v69 = v134[9];
      v135 = (void ***)v134[11];
    }
    v135[v69] = v137;
    v134[9] = v69 + 1;
    ++*((_DWORD *)v134 + 20);
    unint64_t v173 = v134[2];
    if (v173 >= v134[1])
    {
      re::DynamicArray<re::IBL>::growCapacity(v134, v173 + 1);
      v141 = (_anonymous_namespace_ *)(a1 + 27);
      unint64_t v173 = v134[2];
    }
    uint64_t v174 = v134[4] + 224 * v173;
    *(void *)uint64_t v174 = v220;
    id v220 = 0;
    *(void *)(v174 + 8) = v221;
    id v221 = 0;
    long long v175 = v225;
    long long v176 = v226;
    long long v177 = *(_OWORD *)v227;
    *(void *)(v174 + 110) = *(void *)&v227[14];
    *(_OWORD *)(v174 + 80) = v176;
    *(_OWORD *)(v174 + 96) = v177;
    *(_OWORD *)(v174 + 64) = v175;
    long long v178 = v222;
    long long v179 = v224;
    *(_OWORD *)(v174 + 32) = v223;
    *(_OWORD *)(v174 + 48) = v179;
    *(_OWORD *)(v174 + 16) = v178;
    *(void *)(v174 + 120) = v228;
    *(void *)&long long v228 = 0;
    *(void *)(v174 + 128) = *((void *)&v228 + 1);
    *((void *)&v228 + 1) = 0;
    *(_OWORD *)(v174 + 136) = v229;
    *((void *)&v229 + 1) = 0;
    *(void *)(v174 + 152) = v230;
    id v230 = 0;
    long long v180 = v231;
    long long v181 = v232;
    long long v182 = v233;
    *(_WORD *)(v174 + 208) = v234;
    *(_OWORD *)(v174 + 176) = v181;
    *(_OWORD *)(v174 + 192) = v182;
    *(_OWORD *)(v174 + 160) = v180;
    ++v134[2];
    ++*((_DWORD *)v134 + 6);
LABEL_203:
    *(void *)buf = *v199;
    *(void *)&buf[8] = *v209;
    *(void *)&long long v243 = v212;
    v183 = v141;
    uint64_t v184 = re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v141, v214);
    if (v184 == -1)
    {
      re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(v183, &v214, (__n128 *)buf);
      if (v211)
      {
LABEL_205:
        unint64_t v186 = v215;
        unint64_t v187 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v216);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v186, v187, *(void *)(a3 + 48));
      }
    }
    else
    {
      uint64_t v185 = a1[28] + 32 * v184;
      *(_OWORD *)(v185 + 8) = *(_OWORD *)buf;
      *(void *)(v185 + 24) = v243;
      if (v211) {
        goto LABEL_205;
      }
    }
    if (v230)
    {

      id v230 = 0;
    }
    if (*((void *)&v229 + 1))
    {

      *((void *)&v229 + 1) = 0;
    }
    if (*((void *)&v228 + 1))
    {

      *((void *)&v228 + 1) = 0;
    }
    if ((void)v228)
    {

      *(void *)&long long v228 = 0;
    }
    if (v221)
    {

      id v221 = 0;
    }
    if (v220) {

    }
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v216);
  }
  while (v216 != a5 || (unsigned __int16)v217 != 0xFFFF || WORD1(v217) != 0xFFFF);
LABEL_9:
  unint64_t v12 = *(void *)(a3 + 48);
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(a3 + 16) + 8, v12);
  int v14 = a5[10];
  if (v14 && !*(_DWORD *)(v13 + 40))
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*a1 + 40))(a1, a2, a3, v12, v13, a6);
    int v14 = a5[10];
  }
  if (v218) {

  }
  return v14 != 0;
}

re *re::ecs2::ImageBasedLightingHelper::checkIBLAssetVersion(re::ecs2::ImageBasedLightingHelper *this, re::ecs2::ImageBasedLightComponent *a2, const re::TextureAsset *a3, const re::TextureAsset *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = (re::ecs2::ImageBasedLightingHelper *)((char *)this + 88);
  unint64_t v8 = (char *)re::AssetHandle::assetInfo((re::ecs2::ImageBasedLightingHelper *)((char *)this + 88));
  if (*((void *)v8 + 17)) {
    unint64_t v9 = (const char *)*((void *)v8 + 18);
  }
  else {
    unint64_t v9 = v8 + 137;
  }
  if (*((void *)this + 147)) {
    unint64_t v10 = (const char *)*((void *)this + 148);
  }
  else {
    unint64_t v10 = (char *)this + 1177;
  }
  uint64_t result = (re *)strcmp(v9, v10);
  if (result)
  {
    unint64_t v12 = (re::ecs2::ImageBasedLightingHelper *)((char *)this + 1168);
    if (*((unsigned char *)a2 + 126)) {
      BOOL v13 = *((unsigned __int16 *)a2 + 64) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      int v14 = *re::ecsComponentsLogObjects(result);
      uint64_t result = (re *)os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      if (result)
      {
        id v15 = re::AssetHandle::assetInfo(v7);
        if (v15[17]) {
          uint64_t v16 = (char *)v15[18];
        }
        else {
          uint64_t v16 = (char *)v15 + 137;
        }
        LODWORD(v23) = 136315138;
        *(void *)((char *)&v23 + 4) = v16;
        _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "Diffuse IBL texture [%s] generated by old tool, please update it. For .skybox assets, please rebuild with newer xcode.", (uint8_t *)&v23, 0xCu);
      }
    }
    if (!*((unsigned char *)a3 + 126) || !*((_WORD *)a3 + 64))
    {
      unint64_t v17 = *re::ecsComponentsLogObjects(result);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = re::AssetHandle::assetInfo(v7);
        if (v18[17]) {
          uint64_t v19 = (char *)v18[18];
        }
        else {
          uint64_t v19 = (char *)v18 + 137;
        }
        LODWORD(v23) = 136315138;
        *(void *)((char *)&v23 + 4) = v19;
        _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Specular IBL texture [%s] generated by old tool, please update it. For .skybox assets, please rebuild with newer xcode.", (uint8_t *)&v23, 0xCu);
      }
    }
    long long v20 = (char *)re::AssetHandle::assetInfo(v7);
    if (*((void *)v20 + 17)) {
      unsigned int v21 = (const char *)*((void *)v20 + 18);
    }
    else {
      unsigned int v21 = v20 + 137;
    }
    size_t v22 = strlen(v21);
    *(void *)&long long v23 = v21;
    *((void *)&v23 + 1) = v22;
    return re::DynamicString::operator=(v12, (uint64_t)&v23);
  }
  return result;
}

BOOL re::ecs2::ImageBasedLightComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  int v106 = *(re::ecs2::RenderingSubsystem **)(a3 + 8);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 8) + 112) + 104);
  if (v8) {
    v103 = (re::DynamicString **)re::RenderFrameBox::get(v8 + 344, 0xFFFFFFFFFFFFFFFuLL);
  }
  else {
    v103 = 0;
  }
  uint64_t v9 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((void *)(a1 + 152), (unint64_t)v106);
  v104 = (void *)re::DataArray<re::ecs2::ShadowPlaneInfo>::get(a1 + 88, *(void *)(*(void *)(a1 + 160) + 16 * v9 + 8));
  uint64_t v111 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 136) + 24))(*(void *)(*(void *)(a1 + 8) + 136));
  if (*(unsigned char *)(a1 + 280))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)(*(void *)(a1 + 8) + 1240));
    uint64_t v10 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    if (v10)
    {
      *(void *)(a1 + 328) = 0;
      *(void *)(a1 + 336) = 0;
      unint64_t v11 = *(void *)(a1 + 304);
      *(void *)(a1 + 312) = 0;
      *(void *)(a1 + 320) = v11;
      if (v11 >= 0x10)
      {
        unint64_t v12 = 0;
        *(void *)&long long v13 = -1;
        *((void *)&v13 + 1) = -1;
        do
        {
          *(_OWORD *)(*(void *)(a1 + 288) + 16 * v12++) = v13;
          unint64_t v11 = *(void *)(a1 + 304);
        }
        while (v12 < v11 >> 4);
      }
      if (v11)
      {
        uint64_t v14 = 72 * v11;
        id v15 = (id *)(*(void *)(a1 + 296) + 56);
        do
        {
          if (*v15)
          {

            id *v15 = 0;
          }
          re::DynamicArray<re::IBL>::deinit((uint64_t)(v15 - 5));
          v15 += 9;
          v14 -= 72;
        }
        while (v14);
      }
      re::ecs2::WorldRootProvider::worldIds((re::ecs2::WorldRootProvider *)&v111, (uint64_t)buf);
      int v16 = v122;
      if (v122)
      {
        unint64_t v17 = v121;
        int v5 = v123;
        if (v123)
        {
          uint64_t v18 = 0;
          uint64_t v19 = (int *)v121[2];
          while (1)
          {
            int v20 = *v19;
            v19 += 4;
            if (v20 < 0) {
              break;
            }
            if (v123 == ++v18)
            {
              LODWORD(v18) = v123;
              break;
            }
          }
          unsigned int v6 = v18;
        }
        else
        {
          unsigned int v6 = 0;
        }
        unsigned int v21 = v121;
      }
      else
      {
        unint64_t v17 = (uint64_t *)v120;
        unsigned int v21 = (uint64_t *)v120 + v119;
      }
      BOOL v22 = v17 != v21;
      if (v122) {
        BOOL v22 = v5 != v6;
      }
      if (v22)
      {
        do
        {
          long long v23 = v17;
          if (v16) {
            long long v23 = (uint64_t *)(v17[2] + 16 * v6 + 8);
          }
          if (re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v104 + 8, *v23) == -1)
          {
            memset(v113, 0, 28);
            *(_OWORD *)int v114 = 0u;
            int v115 = 0;
            uint64_t DefaultIBLDataForWorld = re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLDataForWorld((re::ecs2::ImageBasedLightComponentStateImpl *)a1, *v23);
            re::DynamicArray<re::IBL>::add((_anonymous_namespace_ *)v113, DefaultIBLDataForWorld);
            *(void *)long long v116 = v106;
            *(void *)&v116[8] = *(void *)v113;
            memset(v113, 0, 24);
            *(_OWORD *)&v116[16] = *(_OWORD *)&v113[8];
            ++*(_DWORD *)&v113[24];
            *(_DWORD *)&v116[32] = 1;
            *(_OWORD *)&v116[40] = *(_OWORD *)v114;
            *(_OWORD *)int v114 = 0u;
            int v117 = v115;
            re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addOrReplace((_anonymous_namespace_ *)(a1 + 288), (unint64_t *)v23, (uint64_t)v116);
            if (*(void *)&v116[48])
            {

              *(void *)&v116[48] = 0;
            }
            re::DynamicArray<re::IBL>::deinit((uint64_t)&v116[8]);
            if (v114[1])
            {

              v114[1] = 0;
            }
            re::DynamicArray<re::IBL>::deinit((uint64_t)v113);
            if (v16)
            {
LABEL_31:
              unsigned int v24 = v6 + 1;
              do
              {
                unsigned int v6 = v24;
                if (v24 >= *((_DWORD *)v17 + 8)) {
                  break;
                }
                int v25 = *(_DWORD *)(v17[2] + 16 * v24++);
              }
              while ((v25 & 0x80000000) == 0);
              goto LABEL_41;
            }
          }
          else if (v16)
          {
            goto LABEL_31;
          }
          ++v17;
LABEL_41:
          BOOL v27 = v17 != v21;
          if (v16) {
            BOOL v27 = v5 != v6;
          }
        }
        while (v27);
      }
      re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)buf);
      *(unsigned char *)(a1 + 280) = 0;
    }
  }
  unint64_t v107 = (re::ecs2::ImageBasedLightComponentStateImpl *)a1;
  v109[0] = v104 + 8;
  unint64_t v28 = v104[10];
  if (v28 >= 0x10)
  {
    uint64_t v29 = 0;
    uint64_t v30 = v104[8];
    unint64_t v31 = v28 >> 4;
    while (1)
    {
      unsigned __int16 v32 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v30 + v29)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v109[1] = (unsigned __int16)~v32;
      if (v32 != 0xFFFF) {
        break;
      }
      v29 += 16;
      if (!--v31) {
        return *(_DWORD *)(a5 + 40) != 0;
      }
    }
    uint64_t v33 = __clz(__rbit64((unsigned __int16)~v32)) + v29;
    for (uint64_t i = v33; i != -1; v33 = i)
    {
      uint64_t v105 = *(void *)(v109[0] + 8) + 16 * v33;
      uint64_t v34 = (void *)re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::get(v104[2], v104[4], *(void *)(v105 + 8));
      if (v34[9])
      {
        char v35 = 0;
        unint64_t v36 = 0;
        do
        {
          unint64_t v37 = v34[2];
          if (v37 <= v36)
          {
            *(void *)id v113 = 0;
            long long v119 = 0u;
            memset(v120, 0, 48);
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)long long v116 = 136315906;
            *(void *)&v116[4] = "operator[]";
            *(_WORD *)&v116[12] = 1024;
            *(_DWORD *)&v116[14] = 789;
            *(_WORD *)&v116[18] = 2048;
            *(void *)&v116[20] = v36;
            *(_WORD *)&v116[28] = 2048;
            *(void *)&v116[30] = v37;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_93:
            re::internal::assertLog((re::internal *)4, j, v90, v91, v92, "assertion failure: '%s' (%s:line %i) The row index is out of range. Allowed values are 0 to 2.", "!\"Unreachable code\"", "row", 549);
            _os_crash();
            __break(1u);
          }
          uint64_t v38 = v34[4];
          uint64_t v39 = *(void *)(v34[11] + 8 * v36);
          int v40 = *(unsigned __int8 *)(*(void *)(*((void *)v107 + 1) + 112) + 272);
          uint64_t v41 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(v39 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v40) {
            BOOL v42 = v41 == 0;
          }
          else {
            BOOL v42 = 1;
          }
          if (!v42)
          {
            if (*(void *)(v41 + 32))
            {
              OwnerPeerID = (re *)RESyncableGetOwnerPeerID();
              if (OwnerPeerID)
              {
                uint64_t v44 = *re::ecsComponentsLogObjects(OwnerPeerID);
                if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_233120000, v44, OS_LOG_TYPE_DEFAULT, "Ill-formed IBL with isGlobalIBL flag set to true. Settings isGLobalIBL to false.", buf, 2u);
                }
                *(unsigned char *)(v38 + 224 * v36 + 209) = 0;
              }
            }
          }
          uint64_t v45 = v38 + 224 * v36;
          BOOL v46 = *(unsigned char *)(v45 + 209) != 0;
          int v47 = *(unsigned __int8 *)(v39 + 1208);
          *(unsigned char *)(v45 + 116) |= v47;
          if (v47)
          {
            BOOL v108 = v46;
            re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v39 + 16), (const re::ecs2::Entity *)1, buf);
            *(_OWORD *)long long v116 = 0u;
            long long v112 = 0u;
            *(_OWORD *)id v113 = xmmword_23435FBB0;
            unint64_t v48 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)buf, (int32x4_t *)v116, v113, &v112);
            uint64_t v49 = 0;
            v60.i32[0] = *(_DWORD *)v113;
            v67.i32[0] = *(_DWORD *)&v113[8];
            float v50 = *(float *)v60.i32 * (float)(*(float *)v60.i32 + *(float *)v60.i32);
            float v51 = *(float *)&v113[4] * (float)(*(float *)&v113[4] + *(float *)&v113[4]);
            float v52 = v67.f32[0] * (float)(v67.f32[0] + v67.f32[0]);
            float v53 = (float)(*(float *)v60.i32 + *(float *)v60.i32) * *(float *)&v113[4];
            float v54 = (float)(*(float *)v60.i32 + *(float *)v60.i32) * *(float *)&v113[8];
            float v55 = (float)(*(float *)&v113[4] + *(float *)&v113[4]) * *(float *)&v113[8];
            float v56 = (float)(*(float *)v60.i32 + *(float *)v60.i32) * *(float *)&v113[12];
            float v57 = (float)(*(float *)&v113[4] + *(float *)&v113[4]) * *(float *)&v113[12];
            v67.f32[0] = (float)(v67.f32[0] + v67.f32[0]) * *(float *)&v113[12];
            *(float *)v60.i32 = 1.0 - (float)(v51 + v52);
            int32x4_t v58 = v60;
            *(float *)&v58.i32[1] = v53 + v67.f32[0];
            *(float *)v59.i32 = v53 - v67.f32[0];
            v67.f32[0] = v54 + v57;
            v60.i32[1] = v59.i32[0];
            *(float *)&v60.i32[2] = v54 + v57;
            v67.f32[1] = v55 - v56;
            *(float *)&uint64_t v69 = v54 - v57;
            int32x4_t v61 = vzip1q_s32(v58, (int32x4_t)v67);
            float32x4_t v62 = (float32x4_t)v58;
            v62.i32[2] = v69;
            *(float *)v63.i32 = 1.0 - (float)(v50 + v52);
            *(float *)v64.i32 = v55 + v56;
            int32x4_t v65 = vzip1q_s32(v61, v59);
            float32x4_t v66 = (float32x4_t)v59;
            v66.i32[1] = v63.i32[0];
            v66.i32[2] = v64.i32[0];
            v67.f32[2] = 1.0 - (float)(v50 + v51);
            int32x4_t v68 = vzip2q_s32(v61, vdupq_lane_s32(v63, 0));
            HIDWORD(v69) = v64.i32[0];
            *(int32x4_t *)id v113 = v65;
            *(int32x4_t *)&v113[16] = v68;
            *(int32x4_t *)int v114 = vzip1q_s32(vzip2q_s32((int32x4_t)v62, (int32x4_t)v67), v64);
            do
            {
              *(float32x4_t *)&v116[v49] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(_OWORD *)&v113[v49])), v66, *(float32x2_t *)&v113[v49], 1), v67, *(float32x4_t *)&v113[v49], 2);
              v49 += 16;
            }
            while (v49 != 48);
            float32x4_t v70 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
            uint32x4_t v71 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v70, vabdq_f32((float32x4_t)xmmword_23435FD60, *(float32x4_t *)&v116[16])), (int8x16_t)vcgeq_f32(v70, vabdq_f32((float32x4_t)xmmword_23435FD50, *(float32x4_t *)v116))), (int8x16_t)vcgeq_f32(v70, vabdq_f32((float32x4_t)xmmword_23435FD80, *(float32x4_t *)&v116[32])));
            v71.i32[3] = v71.i32[2];
            if ((vminvq_u32(v71) & 0x80000000) != 0)
            {
              long long v77 = (float32x4_t *)(v38 + 224 * v36);
              v77[2] = v62;
              v77[3] = v66;
              v77[4] = v67;
              v77[2].i32[2] = v60.i32[2];
              v77[3].i32[2] = v68.i32[2];
              v77[2].i64[0] = v60.i64[0];
              v77[3].i64[0] = v68.i64[0];
              v77[4].i32[2] = v67.i32[2];
              v77[4].i64[0] = v69;
            }
            else
            {
              size_t v72 = *re::ecsComponentsLogObjects(v48);
              if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v73 = *(void *)(*(void *)(v39 + 16) + 280);
                *(_DWORD *)long long v116 = 136315138;
                *(void *)&v116[4] = v73;
                _os_log_impl(&dword_233120000, v72, OS_LOG_TYPE_DEFAULT, "The world transform of the entity [%s] includes non-uniform scaling.                                    Set the rotation of its IBL component to identity.", v116, 0xCu);
              }
              uint64_t v74 = (_OWORD *)(v38 + 224 * v36);
              v74[2] = xmmword_23435FD50;
              v74[3] = xmmword_23435FD60;
              v60.i32[3] = 0;
              v74[4] = xmmword_23435FD80;
            }
            uint64_t v78 = 0;
            uint64_t v75 = 0;
            long long v79 = (__int32 *)(v38 + 224 * v36);
            long long v80 = v79 + 8;
            uint64_t v81 = v79 + 10;
            uint64_t v82 = v79 + 14;
            uint64_t v83 = v79 + 18;
            uint64_t v84 = v79 + 9;
            __int16 v85 = v79 + 13;
            StringID v86 = v79 + 17;
            __int16 v87 = v79 + 12;
            unint64_t v88 = v79 + 16;
            do
            {
              for (uint64_t j = 0; j != 12; j += 4)
              {
                unsigned int v90 = v80;
                unint64_t v91 = v87;
                uint64_t v92 = v88;
                if (v78)
                {
                  unsigned int v90 = v81;
                  unint64_t v91 = v82;
                  uint64_t v92 = v83;
                  if (v78 != 2)
                  {
                    unsigned int v90 = v84;
                    unint64_t v91 = v85;
                    uint64_t v92 = v86;
                    if (v78 != 1) {
                      goto LABEL_93;
                    }
                  }
                }
                v60.i32[0] = *v90;
                v60.i32[1] = *v91;
                v60.i32[2] = *v92;
                *(int32x4_t *)long long v116 = v60;
                unint64_t v93 = 0xBF58476D1CE4E5B9
                    * (*(unsigned int *)&v116[j] ^ ((unint64_t)*(unsigned int *)&v116[j] >> 30));
                v75 += ((0x94D049BB133111EBLL * (v93 ^ (v93 >> 27))) ^ ((0x94D049BB133111EBLL * (v93 ^ (v93 >> 27))) >> 31))
                     * v78;
              }
              ++v78;
            }
            while (v78 != 3);
            BOOL v46 = v108;
          }
          else
          {
            uint64_t v75 = 0;
            long long v76 = (_OWORD *)(v38 + 224 * v36);
            v76[2] = xmmword_23435FD50;
            v76[3] = xmmword_23435FD60;
            v76[4] = xmmword_23435FD80;
          }
          uint64_t v94 = *(void *)(v39 + 1328) + v75;
          if (v94 == *(void *)(v39 + 1336))
          {
            unsigned int v95 = *(_DWORD *)(v39 + 1344) + 1;
            *(_DWORD *)(v39 + 1344) = v95;
            unint64_t v96 = (BOOL *)(v38 + 224 * v36 + 208);
            *unint64_t v96 = v95 < 3;
          }
          else
          {
            *(void *)(v39 + 1336) = v94;
            *(unsigned char *)(v38 + 224 * v36 + 208) = 1;
            *(_DWORD *)(v39 + 1344) = 0;
          }
          v35 |= v46;
          ++v36;
        }
        while (v36 < v34[9]);
      }
      else
      {
        char v35 = 0;
      }
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v106, *(const re::ecs2::Scene **)v105, v103, buf);
      *(void *)long long v116 = *(void *)buf >> 1;
      uint64_t v97 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v103 + 33), (const re::WeakStringID *)v116)+ 48);
      uint64_t v98 = (*(uint64_t (**)(void))(v97 + 432))();
      if ((v35 & 1) == 0)
      {
        unint64_t v99 = (_anonymous_namespace_ *)v98;
        uint64_t v100 = re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLDataForWorld(v107, *(void *)v105);
        re::DynamicArray<re::IBL>::add(v99, v100);
      }
      re::StringID::destroyString((re::StringID *)buf);
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v109);
    }
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::ImageBasedLightSystem::updateScenes(uint64_t result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  v61[0] = a3;
  v61[1] = a4;
  uint64_t v6 = *(void *)(result + 104);
  if (!v6 || (*(unsigned char *)(v6 + 424) & 0x10) != 0)
  {
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v60);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v59, 3015, v5);
    uint64_t v8 = *(void *)(v5 + 112);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 104);
      if (v9) {
        uint64_t v49 = (re::DynamicString **)re::RenderFrameBox::get(v9 + 344, 0xFFFFFFFFFFFFFFFuLL);
      }
      else {
        uint64_t v49 = 0;
      }
      float v50 = a2;
      uint64_t v10 = a2[1];
      if (v10)
      {
        unint64_t v11 = (const re::ecs2::Scene **)*a2;
        uint64_t v51 = (uint64_t)&(*v50)[(void)v10];
        while (1)
        {
          float v54 = *v11;
          unint64_t v12 = *(void *)(*(void *)(v5 + 224)
                          + 16
                          * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v5 + 216), &v54)+ 8);
          re::DynamicBitset<unsigned long long,64ul>::clearBit(v5 + 328, v12);
          long long v13 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 160, v12);
          uint64_t v14 = *(void *)(*v13 + 224);
          unint64_t v15 = v13[3];
          unint64_t v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v13[2] + 8, v15);
          if (*(_DWORD *)(v16 + 40)) {
            int v17 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v14 + 24))(v14, v61, v13, v15, v16, 0);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = v13[5];
          unint64_t v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v13[2] + 8, v18);
          if (*(_DWORD *)(v19 + 40)) {
            v17 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v14 + 32))(v14, v61, v13, v18, v19, 0);
          }
          unint64_t v20 = v13[6];
          unint64_t v21 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v13[2] + 8, v20);
          if (*(_DWORD *)(v21 + 40)) {
            break;
          }
          if (v17) {
            goto LABEL_16;
          }
LABEL_17:
          if (*(unsigned char *)(v5 + 392))
          {
            unint64_t v22 = *(void *)(v5 + 336);
            int v23 = *(_DWORD *)(v5 + 344);
            if (v22 < 0xB)
            {
              uint64_t v26 = (uint64_t *)(v5 + 352);
              if ((v23 & 1) == 0) {
                uint64_t v26 = *(uint64_t **)(v5 + 360);
              }
              if (!v22) {
                goto LABEL_35;
              }
              uint64_t v27 = 0;
              uint64_t v28 = 8 * v22;
              do
              {
                uint64_t v29 = *v26++;
                v27 |= v29;
                v28 -= 8;
              }
              while (v28);
              if (!v27) {
                goto LABEL_35;
              }
            }
            else
            {
              unsigned int v24 = (void *)(v5 + 352);
              if ((v23 & 1) == 0) {
                unsigned int v24 = *(void **)(v5 + 360);
              }
              uint64_t v25 = 8 * v22;
              while (!*v24)
              {
                ++v24;
                v25 -= 8;
                if (!v25) {
                  goto LABEL_35;
                }
              }
            }
            uint64_t v30 = *(re::ecs2::System **)(v5 + 376);
            if (!*((unsigned char *)v30 + 86)) {
              re::ecs2::System::queueToRun(v30, 0.0);
            }
          }
LABEL_35:
          if (++v11 == (const re::ecs2::Scene **)v51) {
            goto LABEL_36;
          }
        }
        if (((v17 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v14 + 40))(v14, v61, v13, v20, v21, 0)) & 1) == 0)goto LABEL_17; {
LABEL_16:
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit(v5 + 328, v12);
        goto LABEL_17;
      }
LABEL_36:
      unint64_t v31 = *(void *)(v5 + 704);
      if (v31 >= 0x10)
      {
        uint64_t v32 = 0;
        unint64_t v33 = v31 >> 4;
        while (1)
        {
          unsigned __int16 v34 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)(v5 + 688) + v32)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
          unint64_t v35 = (unsigned __int16)~v34;
          if (v34 != 0xFFFF) {
            break;
          }
          v32 += 16;
          if (!--v33) {
            goto LABEL_42;
          }
        }
        unint64_t v36 = __clz(__rbit64(v35)) + v32;
        if (v36 != -1)
        {
          do
          {
            uint64_t v41 = *(void *)(v5 + 696) + 72 * v36;
            float v54 = *(const re::ecs2::Scene **)v41;
            float v55 = *(re::ecs2::RenderingSubsystem **)(v41 + 8);
            re::DynamicArray<re::IBL>::DynamicArray((uint64_t)v56, (uint64_t *)(v41 + 16));
            id v57 = *(id *)(v41 + 56);
            int v58 = *(_DWORD *)(v41 + 64);
            re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v55, v54, v49, v53);
            uint64_t v52 = v53[0] >> 1;
            uint64_t v42 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v49 + 33), (const re::WeakStringID *)&v52)+ 48);
            (*(void (**)(void))(v42 + 432))();
            re::StringID::destroyString((re::StringID *)v53);
            if (v57)
            {

              id v57 = 0;
            }
            re::DynamicArray<re::IBL>::deinit((uint64_t)v56);
            unint64_t v43 = v36 >> 4;
            unint64_t v44 = *(void *)(v5 + 704);
            if (v36 >> 4 >= v44 >> 4) {
              break;
            }
            unint64_t v45 = __clz(__rbit64((-2 << (v36 & 0xF)) & v35));
            if (v45 >= 0x40)
            {
              unint64_t v47 = v44 >> 4;
              unint64_t v46 = 16 * v43;
              unint64_t v48 = ~v43 + v47;
              while (v48)
              {
                unint64_t v35 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)(v5 + 688) + v46 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
                unint64_t v45 = __clz(__rbit64(v35));
                v46 += 16;
                --v48;
                if (v45 <= 0x3F) {
                  goto LABEL_56;
                }
              }
              break;
            }
            unint64_t v46 = v36 & 0xFFFFFFFFFFFFFFF0;
LABEL_56:
            unint64_t v36 = v45 + v46;
          }
          while (v45 + v46 != -1);
        }
      }
LABEL_42:
      if (*(void *)(v5 + 1232))
      {
        unint64_t v37 = v50[1];
        if (v37)
        {
          uint64_t v38 = *v50;
          uint64_t v39 = 8 * (void)v37;
          do
          {
            uint64_t v40 = *v38++;
            (*(void (**)(void, uint64_t, void))(**(void **)(v5 + 1232) + 16))(*(void *)(v5 + 1232), v40, *(void *)(v5 + 112));
            v39 -= 8;
          }
          while (v39);
        }
      }
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v59);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v60);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateScenes", 732);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::ecs2::ImageBasedLightSystem::willAddSystemToECSService(re::AssetHelper **this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService((re::ecs2::RenderingSubsystem *)this);
  uint64_t v2 = (*(uint64_t (**)(re::AssetHelper *))(*(void *)this[5] + 32))(this[5]);
  this[154] = (re::AssetHelper *)re::ServiceLocator::serviceOrNull<re::ecs2::ImageBasedLightService>(v2);
  uint64_t v3 = (id *)this[14];
  if (v3)
  {
    re::AssetHelper::createDefaultImageBasedLightEngineAsset(this[15], v3, (const re::AssetHandle *)&v6);
    long long v4 = *(_OWORD *)(this + 155);
    *(_OWORD *)(this + 155) = v6;
    long long v6 = v4;
    uint64_t v5 = this[157];
    this[157] = v7;
    uint64_t v7 = v5;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
    re::AssetHandle::loadAsync((re::AssetHandle *)(this + 155));
  }
}

double re::ecs2::ImageBasedLightSystem::willRemoveSystemFromECSService(re::ecs2::ImageBasedLightSystem *this)
{
  long long v2 = *(_OWORD *)((char *)this + 1240);
  uint64_t v3 = *((void *)this + 157);
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 77) = 0u;
  long long v5 = v2;
  uint64_t v6 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  *((void *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

uint64_t re::ecs2::ImageBasedLightSystem::willAddSceneToECSService(uint64_t this, unint64_t a2)
{
  uint64_t v4 = this;
  uint64_t v129 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(this + 104);
  if (v5 && (*(unsigned char *)(v5 + 424) & 0x10) == 0) {
    return this;
  }
  uint64_t v6 = *(void *)(this + 1232);
  if (v6) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v6 + 32))(v6, a2);
  }
  uint64_t v7 = &v118;
  unint64_t v8 = v4 + 160;
  v112[0] = a2;
  uint64_t v9 = (uint64_t *)(v4 + 280);
  unint64_t v10 = *(void *)(v4 + 288);
  int v11 = *(_DWORD *)(v4 + 296);
  if (v10 >= 0xB)
  {
    if (v11) {
      unint64_t v12 = (void *)(v4 + 304);
    }
    else {
      unint64_t v12 = *(void **)(v4 + 312);
    }
    uint64_t v14 = 8 * v10;
    while (!*v12)
    {
      ++v12;
      v14 -= 8;
      if (!v14) {
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
  if (v11)
  {
    long long v13 = (uint64_t *)(v4 + 304);
    if (!v10) {
      goto LABEL_21;
    }
  }
  else
  {
    long long v13 = *(uint64_t **)(v4 + 312);
    if (!v10) {
      goto LABEL_21;
    }
  }
  uint64_t v15 = 0;
  uint64_t v16 = 8 * v10;
  do
  {
    uint64_t v17 = *v13++;
    v15 |= v17;
    v16 -= 8;
  }
  while (v16);
  if (v15)
  {
LABEL_20:
    *(void *)&long long v105 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v4 + 280, 0);
    uint64_t v18 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4 + 160, v105);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::init(v18, v4 + 160, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v4 + 216), v112, (uint64_t *)&v105);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v4 + 280, v105);
    uint64_t v19 = v4 + 328;
    unint64_t v20 = v105;
    goto LABEL_53;
  }
LABEL_21:
  v110[0] = 0u;
  long long v105 = 0u;
  *(void *)&long long v106 = 0;
  *((void *)&v106 + 1) = -1;
  memset(v107, 0, sizeof(v107));
  *(void *)&long long v108 = 0;
  *((void *)&v108 + 1) = 1;
  long long v109 = 0uLL;
  unint64_t v21 = *(void *)(v4 + 200);
  *(void *)&v110[0] = 0;
  unint64_t v2 = *(void *)(v4 + 168);
  DWORD2(v110[0]) = 0;
  if (v21 + 1 > 4 * v2)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,4ul>::setBucketsCapacity((uint64_t *)(v4 + 160), (v21 + 4) >> 2);
    unint64_t v2 = *(void *)(v4 + 168);
  }
  unint64_t v22 = v21 >> 2;
  if (v2 <= v21 >> 2)
  {
    v115[0] = 0;
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v124 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v118 = 136315906;
    long long v119 = "operator[]";
    __int16 v120 = 1024;
    int v121 = 858;
    __int16 v122 = 2048;
    *(void *)int v123 = v21 >> 2;
    *(_WORD *)&v123[8] = 2048;
    *(void *)&v123[10] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    re::internal::assertLog((re::internal *)4, v29, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    goto LABEL_116;
  }
  if (*(unsigned char *)(v4 + 176)) {
    uint64_t v23 = v4 + 184;
  }
  else {
    uint64_t v23 = *(void *)(v4 + 192);
  }
  uint64_t v24 = *(void *)(v23 + 8 * v22);
  ++*(void *)(v4 + 200);
  ++*(_DWORD *)(v4 + 208);
  uint64_t v25 = v24 + 112 * (v21 & 3);
  long long v26 = v105;
  long long v27 = v106;
  long long v28 = v107[0];
  *(void *)(v25 + 48) = *(void *)&v107[1];
  *(_OWORD *)(v25 + 16) = v27;
  *(_OWORD *)(v25 + 32) = v28;
  *(_OWORD *)uint64_t v25 = v26;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v25 + 56, (uint64_t)&v107[1] + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v105);
  uint64_t v30 = *(void *)(v4 + 200);
  if (!v30) {
    goto LABEL_115;
  }
  uint64_t v31 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4 + 160, v30 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::init(v31, v4 + 160, v112[0]);
  *(void *)&long long v124 = *(void *)(v4 + 200) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v4 + 216), v112, (uint64_t *)&v124);
  unint64_t v32 = *(void *)(v4 + 200);
  unint64_t v33 = *(void *)(v4 + 320);
  if ((v32 & 0x3F) != 0) {
    unint64_t v34 = (v32 >> 6) + 1;
  }
  else {
    unint64_t v34 = v32 >> 6;
  }
  *(void *)(v4 + 320) = v32;
  *(void *)&long long v105 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v4 + 280), v34, &v105);
  if (v32 && v33 > v32)
  {
    uint64_t v35 = 63;
    uint64_t v36 = *(void *)(v4 + 320) & 0x3FLL;
    if (v36 && v36 != 63) {
      uint64_t v35 = ~(-1 << v36);
    }
    if (*(unsigned char *)(v4 + 296)) {
      uint64_t v37 = v4 + 304;
    }
    else {
      uint64_t v37 = *(void *)(v4 + 312);
    }
    *(void *)(v37 + 8 * *(void *)(v4 + 288) - 8) &= v35;
  }
  uint64_t v9 = (uint64_t *)(v4 + 328);
  unint64_t v38 = *(void *)(v4 + 200);
  unint64_t v39 = *(void *)(v4 + 368);
  if ((v38 & 0x3F) != 0) {
    unint64_t v40 = (v38 >> 6) + 1;
  }
  else {
    unint64_t v40 = v38 >> 6;
  }
  *(void *)(v4 + 368) = v38;
  *(void *)&long long v105 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v4 + 328), v40, &v105);
  if (v38 && v39 > v38)
  {
    uint64_t v41 = 63;
    uint64_t v42 = *(void *)(v4 + 368) & 0x3FLL;
    if (v42 && v42 != 63) {
      uint64_t v41 = ~(-1 << v42);
    }
    if (*(unsigned char *)(v4 + 344)) {
      uint64_t v43 = v4 + 352;
    }
    else {
      uint64_t v43 = *(void *)(v4 + 360);
    }
    *(void *)(v43 + 8 * *(void *)(v4 + 336) - 8) &= v41;
  }
  unint64_t v20 = v124;
  uint64_t v19 = v4 + 328;
LABEL_53:
  unint64_t v44 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit(v19, v20);
  if (!*(unsigned char *)(v4 + 392)) {
    goto LABEL_71;
  }
  unint64_t v45 = *(void *)(v4 + 336);
  int v46 = *(_DWORD *)(v4 + 344);
  if (v45 < 0xB)
  {
    if (v46)
    {
      unint64_t v48 = (uint64_t *)(v4 + 352);
      if (!v45) {
        goto LABEL_71;
      }
    }
    else
    {
      unint64_t v48 = *(uint64_t **)(v4 + 360);
      if (!v45) {
        goto LABEL_71;
      }
    }
    uint64_t v50 = 0;
    uint64_t v51 = 8 * v45;
    do
    {
      uint64_t v52 = *v48++;
      v50 |= v52;
      v51 -= 8;
    }
    while (v51);
    if (!v50) {
      goto LABEL_71;
    }
  }
  else
  {
    if (v46) {
      unint64_t v47 = (void *)(v4 + 352);
    }
    else {
      unint64_t v47 = *(void **)(v4 + 360);
    }
    uint64_t v49 = 8 * v45;
    while (!*v47)
    {
      ++v47;
      v49 -= 8;
      if (!v49) {
        goto LABEL_71;
      }
    }
  }
  unint64_t v44 = *(re::ecs2::System **)(v4 + 376);
  if (!*((unsigned char *)v44 + 86)) {
    re::ecs2::System::queueToRun(v44, 0.0);
  }
LABEL_71:
  unint64_t v111 = a2;
  *((void *)&v105 + 1) = 0;
  *(void *)&long long v106 = 0;
  DWORD2(v106) = 0;
  memset(v107, 0, 20);
  *(void *)((char *)&v107[1] + 4) = 0x1FFFFFFFFLL;
  long long v108 = 0u;
  long long v109 = 0u;
  memset(v110, 0, sizeof(v110));
  re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v105, 0);
  ++DWORD2(v106);
  HIDWORD(v107[0]) = 4;
  re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::allocBlock(&v105);
  int v54 = *(_DWORD *)(v4 + 544);
  if ((v54 + 1) >> 24) {
    int v55 = 1;
  }
  else {
    int v55 = v54 + 1;
  }
  *(_DWORD *)(v4 + 544) = v55;
  unint64_t v22 = *(unsigned __int16 *)(v4 + 540);
  unint64_t v8 = *(unsigned __int16 *)(v4 + 542);
  if (v22 != 0xFFFF || v8 != 0xFFFF)
  {
    uint64_t v9 = *(uint64_t **)(v4 + 504);
    if ((unint64_t)v9 > v8)
    {
      int32x4_t v59 = (void *)(*(void *)(v4 + 520) + 16 * v8);
      *(_DWORD *)(v59[1] + 4 * v22) = v55;
      uint64_t v58 = *v59 + (v22 << 7);
      *(_DWORD *)(v4 + 540) = *(_DWORD *)v58;
      goto LABEL_83;
    }
    goto LABEL_117;
  }
  if (*(_DWORD *)(v4 + 536) >= *(_DWORD *)(v4 + 532)) {
    re::DataArray<re::ecs2::ShadowPlaneInfo>::allocBlock((void *)(v4 + 488));
  }
  uint64_t v56 = *(void *)(v4 + 504);
  unint64_t v8 = (unsigned __int16)(v56 - 1);
  if (!v56)
  {
LABEL_116:
    v115[0] = 0;
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v124 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v118 = 136315906;
    long long v119 = "operator[]";
    __int16 v120 = 1024;
    int v121 = 789;
    __int16 v122 = 2048;
    *(void *)int v123 = v8;
    *(_WORD *)&v123[8] = 2048;
    *(void *)&v123[10] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_117:
    v115[0] = 0;
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v124 = 0u;
    uint64_t v4 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v118 = 136315906;
    long long v119 = "operator[]";
    __int16 v120 = 1024;
    int v121 = 789;
    __int16 v122 = 2048;
    *(void *)int v123 = v8;
    *(_WORD *)&v123[8] = 2048;
    *(void *)&v123[10] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_118;
  }
  unint64_t v22 = *(unsigned int *)(v4 + 536);
  if (v22 >= 0x10000)
  {
LABEL_118:
    re::internal::assertLog((re::internal *)5, v53, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v22);
    int32x4_t v65 = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    goto LABEL_119;
  }
  id v57 = (void *)(*(void *)(v4 + 520) + 16 * v8);
  *(_DWORD *)(v4 + 536) = v22 + 1;
  *(_DWORD *)(v57[1] + 4 * v22) = *(_DWORD *)(v4 + 544);
  uint64_t v58 = *v57 + (v22 << 7);
LABEL_83:
  ++*(_DWORD *)(v4 + 528);
  *(_DWORD *)(v58 + 48) = 0;
  *(void *)(v58 + 52) = 0x1FFFFFFFFLL;
  long long v124 = 0u;
  *(_OWORD *)uint64_t v58 = 0u;
  *(void *)&long long v125 = 0;
  *(void *)(v58 + 16) = 0;
  *(void *)&long long v126 = 0;
  *(void *)(v58 + 32) = 0;
  *(void *)(v58 + 40) = 0;
  *(_DWORD *)(v58 + 24) = 1;
  DWORD2(v125) = 1;
  uint64_t v7 = (int *)&v105;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v58, (uint64_t)&v105);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v105, (uint64_t)&v124);
  if ((void)v124 && (void)v126) {
    (*(void (**)(void))(*(void *)v124 + 40))(v124);
  }
  long long v60 = *(_OWORD *)(v58 + 40);
  *(void *)(v58 + 40) = *((void *)&v107[0] + 1);
  *(void *)(v58 + 48) = *(void *)&v107[1];
  *(_OWORD *)((char *)v107 + 8) = v60;
  int v61 = *(_DWORD *)(v58 + 56);
  *(_DWORD *)(v58 + 56) = DWORD2(v107[1]);
  DWORD2(v107[1]) = v61;
  unint64_t v62 = v108;
  *(void *)(v58 + 120) = *((void *)&v110[1] + 1);
  *((void *)&v110[1] + 1) = 0;
  *(_OWORD *)(v58 + 64) = __PAIR128__(*((unint64_t *)&v108 + 1), v62);
  *(void *)(v58 + 80) = v109;
  uint64_t v63 = *((void *)&v109 + 1);
  *(void *)(v58 + 104) = *((void *)&v110[0] + 1);
  *(void *)(v58 + 112) = *(void *)&v110[1];
  *(_OWORD *)((char *)v110 + 8) = 0u;
  *(void *)(v58 + 88) = v63;
  long long v108 = 0u;
  long long v109 = 0u;
  *(void *)(v58 + 96) = *(void *)&v110[0];
  *(void *)&v110[0] = 0;
  int v64 = *(_DWORD *)(v4 + 544);
  uint64_t v9 = (uint64_t *)(v4 + 552);
  int32x4_t v65 = (_anonymous_namespace_ *)re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((void *)(v4 + 552), a2);
  if (v65 == (_anonymous_namespace_ *)-1)
  {
    unint64_t v2 = v64 & 0xFFFFFF;
    v8 <<= 16;
    if (*(void *)(v4 + 608))
    {
LABEL_88:
      unint64_t v67 = v8 | (v2 << 32);
      uint64_t v68 = *(void *)(v4 + 584);
      if (!v68 || (unint64_t v69 = *(void *)(v4 + 568), v69 > 8 * v68))
      {
        int32x4_t v65 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(v9, 1u);
        unint64_t v69 = *(void *)(v4 + 568);
      }
      unint64_t v70 = v67 | v22;
      unint64_t v71 = 0xBF58476D1CE4E5B9;
      unint64_t v72 = 0x94D049BB133111EBLL;
      unint64_t v73 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      unint64_t v74 = v73 ^ (v73 >> 31);
      unint64_t v75 = v69 >> 4;
      uint64_t v76 = *v9;
      unint64_t v77 = v74 % v75;
      while (1)
      {
        unint64_t v78 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v76 + 16 * v77)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
        if (v78 < 0x40) {
          break;
        }
        if (v77 + 1 == v75) {
          unint64_t v77 = 0;
        }
        else {
          ++v77;
        }
        if (v77 == v74 % v75)
        {
          re::internal::assertLog((re::internal *)4, v66, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
          int32x4_t v65 = (_anonymous_namespace_ *)_os_crash();
          __break(1u);
          break;
        }
      }
      uint64_t v79 = v76 + 16 * v77;
      int v80 = *(unsigned __int8 *)(v79 + v78);
      *(unsigned char *)(v79 + v78) = v74 & 0x7F;
      uint64_t v81 = v80 == 255;
      uint64_t v82 = 16 * (v78 + 16 * v77);
      uint64_t v83 = (unint64_t *)(*(void *)(v4 + 560) + v82);
      unint64_t *v83 = a2;
      v83[1] = v70;
      ++*(void *)(v4 + 576);
      *(void *)(v4 + 584) -= v81;
      uint64_t v84 = *(void *)(*(void *)(v4 + 560) + v82) ^ (*(void *)(*(void *)(v4 + 560) + v82) >> 30);
      unint64_t v85 = ((v84 * v71) ^ ((v84 * v71) >> 27)) * v72;
      *(void *)(v4 + 592) ^= (v85 >> 31) ^ v85;
      goto LABEL_98;
    }
LABEL_119:
    goto LABEL_88;
  }
LABEL_98:
  long long v124 = 0uLL;
  LODWORD(v125) = 1;
  long long v126 = 0uLL;
  *((void *)&v125 + 1) = 0;
  LODWORD(v1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = 0;
  __int16 v87 = *(re::EventBus **)(a2 + 288);
  if (v87)
  {
    *(void *)&v123[4] = re::globalAllocators((re *)v86)[2];
    unint64_t v88 = (void *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)&v123[4] + 32))(*(void *)&v123[4], 32, 0);
    *unint64_t v88 = &unk_26E704108;
    v88[1] = v4 + 400;
    v88[2] = re::ecs2::ImageBasedLightComponentStateImpl::deactivateImageBasedLightComponentHandler;
    v88[3] = 0;
    *(void *)&v123[12] = v88;
    uint64_t v89 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v87, (uint64_t)&v118, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v91 = v90;
    uint64_t v92 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v124);
    *uint64_t v92 = v89;
    v92[1] = v91;
    unint64_t v93 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)&v118);
    uint64_t v116 = re::globalAllocators(v93)[2];
    uint64_t v94 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v116 + 32))(v116, 32, 0);
    *uint64_t v94 = &unk_26E704160;
    v94[1] = v4 + 400;
    v94[2] = re::ecs2::ImageBasedLightComponentStateImpl::removeImageBasedLightComponentHandler;
    v94[3] = 0;
    int v117 = v94;
    uint64_t v95 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v87, (uint64_t)v115, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v97 = v96;
    uint64_t v98 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v124);
    *uint64_t v98 = v95;
    v98[1] = v97;
    unint64_t v99 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v115);
    uint64_t v113 = re::globalAllocators(v99)[2];
    uint64_t v100 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v113 + 32))(v113, 32, 0);
    *uint64_t v100 = &unk_26E7041B8;
    v100[1] = v4 + 400;
    v100[2] = re::ecs2::ImageBasedLightComponentStateImpl::didReparentEntityHandler;
    v100[3] = 0;
    int v114 = v100;
    uint64_t v101 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v87, (uint64_t)v112, 0, 0);
    uint64_t v103 = v102;
    v104 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v124);
    void *v104 = v101;
    v104[1] = v103;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v112);
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(v4 + 440, (uint64_t *)&v111, (uint64_t)&v124);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v124);
  if ((void)v124 && (v125 & 1) == 0) {
    (*(void (**)(void, void))(*(void *)v124 + 40))(v124, v126);
  }
  if (*((void *)&v110[1] + 1))
  {
    if (*((void *)&v108 + 1)) {
      *((void *)&v108 + 1) = 0;
    }
    if ((void)v108)
    {
      (*(void (**)(void))(**((void **)&v110[1] + 1) + 40))();
      *(void *)&long long v108 = 0;
    }
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
  }
  re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::deinit((uint64_t)&v105);
  this = v105;
  if ((void)v105)
  {
    if (*(void *)&v107[0]) {
      return (*(uint64_t (**)(void))(*(void *)v105 + 40))();
    }
  }
  return this;
}

uint64_t re::ecs2::ImageBasedLightSystem::willRemoveSceneFromECSService(re::ecs2::ImageBasedLightSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4 = *((void *)this + 154);
  if (v4) {
    (*(void (**)(uint64_t, re::ecs2::Scene *))(*(void *)v4 + 40))(v4, a2);
  }
  v41[0] = a2;
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 27, v41);
  if (v5 != -1)
  {
    uint64_t v6 = *((void *)this + 28) + 16 * v5;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(void *)(v6 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(void *)(v6 + 8));
    uint64_t v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(void *)(v6 + 8));
    if (*v7)
    {
      unint64_t v8 = v7;
      *uint64_t v7 = 0;
      uint64_t v9 = v7 + 1;
      uint64_t v10 = *(void *)(v7[1] + 288);
      if (v10)
      {
        uint64_t v11 = v7[12];
        if (v11)
        {
          for (unint64_t i = 0; i != v11; ++i)
          {
            uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
            re::EventBus::unsubscribe(v10, *(void *)v13, *(void *)(v13 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
      uint64_t v14 = 0;
      uint64_t v15 = v8 + 3;
      do
      {
        uint64_t v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
        if (*(void *)v16) {
          re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
        }
        v15[v14++] = -1;
      }
      while (v14 != 4);
      *uint64_t v9 = 0;
      v9[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 27, v41);
  }
  uint64_t v43 = a2;
  uint64_t v17 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 440, (uint64_t *)&v43);
  if (v17)
  {
    uint64_t v18 = *((void *)v43 + 36);
    if (v18)
    {
      uint64_t v19 = v17;
      uint64_t v20 = *(void *)(v17 + 40);
      if (v20)
      {
        for (unint64_t j = 0; j != v20; ++j)
        {
          uint64_t v22 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v19, j);
          re::EventBus::unsubscribe(v18, *(void *)v22, *(void *)(v22 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 440, (uint64_t *)&v43);
  }
  uint64_t result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((void *)this + 69, (unint64_t)v43);
  if (result != -1)
  {
    re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>::destroy((uint64_t)this + 488, *(void *)(*((void *)this + 70) + 16 * result + 8));
    uint64_t result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((void *)this + 69, (unint64_t)v43);
    if (result != -1)
    {
      uint64_t v24 = (int8x16_t *)(*((void *)this + 69) + (result & 0xFFFFFFFFFFFFFFF0));
      v25.i64[0] = -1;
      v25.i64[1] = -1;
      int8x8_t v26 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v24, v25), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
      if (v26) {
        char v27 = -1;
      }
      else {
        char v27 = 0x80;
      }
      v24->i8[result & 0xF] = v27;
      unint64_t v28 = *(void *)(*((void *)this + 70) + 16 * result);
      unint64_t v29 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
      *((void *)this + 74) ^= (v29 >> 31) ^ v29;
      uint64_t v30 = *((void *)this + 73);
      if (v26) {
        ++v30;
      }
      unint64_t v31 = *((void *)this + 72) - 1;
      *((void *)this + 72) = v31;
      *((void *)this + 73) = v30;
      unint64_t v32 = *((void *)this + 71);
      if (v32 >= 0x11 && v31 < v32 >> 2) {
        uint64_t result = re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize((uint64_t *)this + 69, 0);
      }
    }
  }
  unint64_t v33 = (uint64_t *)((char *)this + 688);
  v41[0] = (char *)this + 688;
  unint64_t v34 = *((void *)this + 88);
  if (v34 >= 0x10)
  {
    uint64_t v35 = 0;
    uint64_t v36 = *v33;
    unint64_t v37 = v34 >> 4;
    while (1)
    {
      unsigned __int16 v38 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v36 + v35)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v41[1] = (unsigned __int16)~v38;
      if (v38 != 0xFFFF) {
        break;
      }
      v35 += 16;
      if (!--v37) {
        return result;
      }
    }
    uint64_t v39 = __clz(__rbit64((unsigned __int16)~v38)) + v35;
    for (k = v39; k != -1; uint64_t v39 = k)
    {
      uint64_t v40 = *(void *)(v41[0] + 8);
      if (re::StringID::operator==((void *)(*(void *)(*(void *)(v40 + 72 * v39 + 8) + 104) + 272), (void *)(*((void *)v43 + 13) + 272)))
      {
        re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(v33, *(void *)(v40 + 72 * v39));
      }
      uint64_t result = (uint64_t)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v41);
    }
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::dependsOnComponents(re::ecs2::ImageBasedLightComponentStateImpl *this)
{
  return *((void *)this + 4);
}

void re::ecs2::ImageBasedLightSystem::~ImageBasedLightSystem(re::ecs2::ImageBasedLightSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::ecs2::ImageBasedLightSystem *)((char *)this + 1240));
  re::ecs2::ImageBasedLightComponentStateImpl::~ImageBasedLightComponentStateImpl((re::ecs2::ImageBasedLightSystem *)((char *)this + 400));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ImageBasedLightSystem::typeInfo(re::ecs2::ImageBasedLightSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704108;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704108;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704160;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704160;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7041B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7041B8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::deinit(uint64_t result)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(result + 44)) {
    return result;
  }
  uint64_t v2 = (void *)result;
  uint64_t v11 = (void *)result;
  if (*(_DWORD *)(result + 40))
  {
    LODWORD(v12) = 0;
    if (!*(void *)(result + 16)) {
      goto LABEL_32;
    }
    uint64_t v3 = (void *)result;
    if (!**(_DWORD **)(*(void *)(result + 32) + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      uint64_t v3 = v11;
    }
  }
  else
  {
    LODWORD(v12) = -1;
    uint64_t v3 = (void *)result;
  }
  uint64_t v11 = v3;
  uint64_t v4 = (unsigned __int16)v12;
  if (v3 != v2 || ((unsigned __int16)v12 == 0xFFFFLL ? (BOOL v5 = (v12 & 0xFFFF0000) == 4294901760) : (BOOL v5 = 0), !v5))
  {
    unint64_t v6 = WORD1(v12);
    do
    {
      unint64_t v7 = v3[2];
      if (v7 <= v6) {
        goto LABEL_31;
      }
      re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::destroy((uint64_t)v2, ((unint64_t)(*(_DWORD *)(*(void *)(v3[4] + 16 * v6 + 8) + 4 * v4) & 0xFFFFFF) << 32) | (v6 << 16) | v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      uint64_t v3 = v11;
      uint64_t v4 = (unsigned __int16)v12;
      unint64_t v6 = WORD1(v12);
    }
    while (v11 != v2 || (unsigned __int16)v12 != 0xFFFFLL || WORD1(v12) != 0xFFFFLL);
  }
  unint64_t v8 = v2[2];
  unint64_t v6 = v8 - 1;
  if (v8 == 1) {
    goto LABEL_26;
  }
  unint64_t v7 = 16 * v8 - 16;
  do
  {
    if (v8 <= v6)
    {
      uint64_t v11 = 0;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      uint64_t v15 = "operator[]";
      __int16 v16 = 1024;
      int v17 = 789;
      __int16 v18 = 2048;
      unint64_t v19 = v6;
      __int16 v20 = 2048;
      unint64_t v21 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_30:
      uint64_t v11 = 0;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      uint64_t v15 = "removeAt";
      __int16 v16 = 1024;
      int v17 = 931;
      __int16 v18 = 2048;
      unint64_t v19 = v6;
      __int16 v20 = 2048;
      unint64_t v21 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      uint64_t v13 = 0;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      uint64_t v15 = "operator[]";
      __int16 v16 = 1024;
      int v17 = 797;
      __int16 v18 = 2048;
      unint64_t v19 = v6;
      __int16 v20 = 2048;
      unint64_t v21 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      uint64_t v13 = 0;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      uint64_t v15 = "operator[]";
      __int16 v16 = 1024;
      int v17 = 797;
      __int16 v18 = 2048;
      unint64_t v19 = 0;
      __int16 v20 = 2048;
      unint64_t v21 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = (void *)(v2[4] + v7);
    (*(void (**)(void, void))(*(void *)*v2 + 40))(*v2, *v9);
    (*(void (**)(void, void))(*(void *)*v2 + 40))(*v2, v9[1]);
    unint64_t v1 = v2[2];
    if (v1 <= v6) {
      goto LABEL_30;
    }
    unint64_t v8 = v1 - 1;
    if (v1 - 1 > v6)
    {
      *(_OWORD *)(v2[4] + v7) = *(_OWORD *)(v2[4] + 16 * v1 - 16);
      unint64_t v8 = v2[2] - 1;
    }
    v2[2] = v8;
    ++*((_DWORD *)v2 + 6);
    v7 -= 16;
    --v6;
  }
  while (v6);
  v2[6] = 0xFFFFFFFF00000000;
  if (!v8)
  {
    uint64_t v11 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v2 = (void *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    uint64_t v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 789;
    __int16 v18 = 2048;
    unint64_t v19 = 0;
    __int16 v20 = 2048;
    unint64_t v21 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    v2[6] = 0xFFFFFFFF00000000;
  }
  uint64_t v10 = (void *)v2[4];
  (*(void (**)(void, void))(*(void *)*v2 + 40))(*v2, *v10);
  (*(void (**)(void, void))(*(void *)*v2 + 40))(*v2, v10[1]);
  uint64_t result = re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
  *((_DWORD *)v2 + 11) = 0;
  return result;
}

uint64_t re::DynamicArray<re::IBL>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 224 * v4;
        uint64_t v6 = v3 + 120;
        do
        {
          unint64_t v7 = *(void **)(v6 + 32);
          if (v7)
          {

            *(void *)(v6 + 32) = 0;
          }
          unint64_t v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(void *)(v6 + 24) = 0;
          }
          uint64_t v9 = *(void **)(v6 + 8);
          if (v9)
          {

            *(void *)(v6 + 8) = 0;
          }
          if (*(void *)v6)
          {

            *(void *)uint64_t v6 = 0;
          }
          uint64_t v10 = *(void **)(v6 - 112);
          if (v10)
          {

            *(void *)(v6 - 112) = 0;
          }
          uint64_t v11 = *(void **)(v6 - 120);
          if (v11)
          {

            *(void *)(v6 - 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
          }
          v6 += 224;
          v5 -= 224;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::IBL>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::IBL>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::IBL>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::IBL>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::IBL>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::IBL *,re::IBL *,re::IBL *>((uint64_t)&v28, *(void *)(a2 + 32), *(void *)(a2 + 32) + 224 * a1[2], a1[4]);
    uint64_t v13 = a1[2];
    if (v13 != v4)
    {
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = v14 + 224 * v4;
      uint64_t v16 = 224 * v13;
      uint64_t v17 = v14 + v16;
      uint64_t v18 = a1[4] + v16;
      do
      {
        *(void *)uint64_t v18 = *(id *)v17;
        *(void *)(v18 + 8) = *(id *)(v17 + 8);
        long long v20 = *(_OWORD *)(v17 + 32);
        long long v19 = *(_OWORD *)(v17 + 48);
        *(_OWORD *)(v18 + 16) = *(_OWORD *)(v17 + 16);
        *(_OWORD *)(v18 + 32) = v20;
        *(_OWORD *)(v18 + 48) = v19;
        long long v22 = *(_OWORD *)(v17 + 80);
        long long v21 = *(_OWORD *)(v17 + 96);
        long long v23 = *(_OWORD *)(v17 + 64);
        *(void *)(v18 + 110) = *(void *)(v17 + 110);
        *(_OWORD *)(v18 + 80) = v22;
        *(_OWORD *)(v18 + 96) = v21;
        *(_OWORD *)(v18 + 64) = v23;
        *(void *)(v18 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = *(id *)(v17 + 120);
        *(void *)(v18 + 128) = *(id *)(v17 + 128);
        *(void *)(v18 + 136) = *(void *)(v17 + 136);
        *(void *)(v18 + 144) = *(id *)(v17 + 144);
        *(void *)(v18 + 152) = *(id *)(v17 + 152);
        long long v25 = *(_OWORD *)(v17 + 176);
        long long v24 = *(_OWORD *)(v17 + 192);
        long long v26 = *(_OWORD *)(v17 + 160);
        *(_WORD *)(v18 + 208) = *(_WORD *)(v17 + 208);
        *(_OWORD *)(v18 + 176) = v25;
        *(_OWORD *)(v18 + 192) = v24;
        *(_OWORD *)(v18 + 160) = v26;
        v17 += 224;
        v18 += 224;
      }
      while (v17 != v15);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::IBL *,re::IBL *,re::IBL *>((uint64_t)&v27, *(void *)(a2 + 32), *(void *)(a2 + 32) + 224 * v4, a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = -224 * v4 + 224 * v5;
      uint64_t v7 = 224 * v4 + a1[4] + 120;
      do
      {
        unint64_t v8 = *(void **)(v7 + 32);
        if (v8)
        {

          *(void *)(v7 + 32) = 0;
        }
        uint64_t v9 = *(void **)(v7 + 24);
        if (v9)
        {

          *(void *)(v7 + 24) = 0;
        }
        uint64_t v10 = *(void **)(v7 + 8);
        if (v10)
        {

          *(void *)(v7 + 8) = 0;
        }
        if (*(void *)v7)
        {

          *(void *)uint64_t v7 = 0;
        }
        uint64_t v11 = *(void **)(v7 - 112);
        if (v11)
        {

          *(void *)(v7 - 112) = 0;
        }
        uint64_t v12 = *(void **)(v7 - 120);
        if (v12)
        {

          *(void *)(v7 - 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
        }
        v7 += 224;
        v6 -= 224;
      }
      while (v6);
    }
  }
  a1[2] = v4;
}

void *re::DynamicArray<re::IBL>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::IBL>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE0uLL))
        {
          uint64_t v2 = 224 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 224 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::IBL>(v8, v11);
          v8 += 224;
          v11 += 224;
          v10 -= 224;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::ObjectHelper::move<re::IBL>(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(void *)a1 = 0;
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v3;
  long long v5 = *(_OWORD *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 80);
  long long v7 = *(_OWORD *)(a1 + 96);
  *(void *)(a2 + 110) = *(void *)(a1 + 110);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 64) = v5;
  *(void *)(a2 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = *(void *)(a1 + 120);
  *(void *)(a1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
  *(void *)(a2 + 128) = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  *(void *)(a2 + 136) = *(void *)(a1 + 136);
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  *(void *)(a2 + 152) = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  long long v8 = *(_OWORD *)(a1 + 160);
  long long v9 = *(_OWORD *)(a1 + 176);
  long long v10 = *(_OWORD *)(a1 + 192);
  *(_WORD *)(a2 + 208) = *(_WORD *)(a1 + 208);
  *(_OWORD *)(a2 + 176) = v9;
  *(_OWORD *)(a2 + 192) = v10;
  *(_OWORD *)(a2 + 160) = v8;
  uint64_t v11 = *(void **)(a1 + 152);
  if (v11)
  {

    *(void *)(a1 + 152) = 0;
  }
  uint64_t v12 = *(void **)(a1 + 144);
  if (v12)
  {

    *(void *)(a1 + 144) = 0;
  }
  uint64_t v13 = *(void **)(a1 + 128);
  if (v13)
  {

    *(void *)(a1 + 128) = 0;
  }
  uint64_t v14 = *(void **)(a1 + 120);
  if (v14)
  {

    *(void *)(a1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
  }
  uint64_t v15 = *(void **)(a1 + 8);
  if (v15)
  {

    *(void *)(a1 + 8) = 0;
  }
  if (*(void *)a1)
  {

    *(void *)a1 = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::IBL *,re::IBL *,re::IBL *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    NS::SharedPtr<MTL::Texture>::operator=((void **)a4, (void **)v5);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 8), (void **)(v5 + 8));
    long long v8 = *(_OWORD *)(v5 + 32);
    long long v7 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a4 + 32) = v8;
    *(_OWORD *)(a4 + 48) = v7;
    long long v10 = *(_OWORD *)(v5 + 80);
    long long v9 = *(_OWORD *)(v5 + 96);
    long long v11 = *(_OWORD *)(v5 + 64);
    *(void *)(a4 + 110) = *(void *)(v5 + 110);
    *(_OWORD *)(a4 + 80) = v10;
    *(_OWORD *)(a4 + 96) = v9;
    *(_OWORD *)(a4 + 64) = v11;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 120), (void **)(v5 + 120));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 128), (void **)(v5 + 128));
    *(void *)(a4 + 136) = *(void *)(v5 + 136);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 144), (void **)(v5 + 144));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 152), (void **)(v5 + 152));
    long long v13 = *(_OWORD *)(v5 + 176);
    long long v12 = *(_OWORD *)(v5 + 192);
    long long v14 = *(_OWORD *)(v5 + 160);
    *(_WORD *)(a4 + 208) = *(_WORD *)(v5 + 208);
    *(_OWORD *)(a4 + 176) = v13;
    *(_OWORD *)(a4 + 192) = v12;
    *(_OWORD *)(a4 + 160) = v14;
    a4 += 224;
    v5 += 224;
  }
  while (v5 != v6);
  return v6;
}

void re::ecs2::ImageBasedLightComponentStateImpl::~ImageBasedLightComponentStateImpl(re::ecs2::ImageBasedLightComponentStateImpl *this)
{
  uint64_t v2 = this;
  uint64_t v43 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E704010;
  long long v3 = (void *)*((void *)this + 93);
  if (v3)
  {

    *((void *)v2 + 93) = 0;
  }
  long long v4 = (void *)*((void *)v2 + 92);
  if (v4)
  {

    *((void *)v2 + 92) = 0;
  }
  uint64_t v5 = (void *)*((void *)v2 + 90);
  if (v5)
  {

    *((void *)v2 + 90) = 0;
  }
  uint64_t v6 = (void *)*((void *)v2 + 89);
  if (v6)
  {

    *((void *)v2 + 89) = 0;
  }
  long long v7 = (void *)*((void *)v2 + 75);
  if (v7)
  {

    *((void *)v2 + 75) = 0;
  }
  long long v8 = (void *)*((void *)v2 + 74);
  if (v8)
  {

    *((void *)v2 + 74) = 0;
  }
  long long v9 = (void *)*((void *)v2 + 63);
  if (v9)
  {

    *((void *)v2 + 63) = 0;
  }
  long long v10 = (void *)*((void *)v2 + 62);
  if (v10)
  {

    *((void *)v2 + 62) = 0;
  }
  long long v11 = (void *)*((void *)v2 + 60);
  if (v11)
  {

    *((void *)v2 + 60) = 0;
  }
  long long v12 = (void *)*((void *)v2 + 59);
  if (v12)
  {

    *((void *)v2 + 59) = 0;
  }
  long long v13 = (void *)*((void *)v2 + 45);
  if (v13)
  {

    *((void *)v2 + 45) = 0;
  }
  long long v14 = (void *)*((void *)v2 + 44);
  if (v14)
  {

    *((void *)v2 + 44) = 0;
  }
  v15.n128_f64[0] = re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v2 + 288);
  uint64_t v16 = *((void *)v2 + 34);
  if (v16)
  {
    if (*((void *)v2 + 28)) {
      *((void *)v2 + 28) = 0;
    }
    if (*((void *)v2 + 27))
    {
      (*(void (**)(uint64_t, __n128))(*(void *)v16 + 40))(v16, v15);
      *((void *)v2 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = 0;
    }
    __n128 v15 = 0uLL;
    *(_OWORD *)((char *)v2 + 248) = 0u;
    *(_OWORD *)((char *)v2 + 232) = 0u;
    *(_OWORD *)((char *)v2 + 264) = 0u;
  }
  uint64_t v17 = *((void *)v2 + 26);
  if (v17)
  {
    if (*((void *)v2 + 20)) {
      *((void *)v2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
    }
    if (*((void *)v2 + 19))
    {
      (*(void (**)(uint64_t, __n128))(*(void *)v17 + 40))(v17, v15);
      *((void *)v2 + 19) = 0;
    }
    __n128 v15 = 0uLL;
    *(_OWORD *)((char *)v2 + 200) = 0u;
    *(_OWORD *)((char *)v2 + 184) = 0u;
    *(_OWORD *)((char *)v2 + 168) = 0u;
  }
  uint64_t v18 = (uint64_t)v2 + 88;
  if (!*((_DWORD *)v2 + 33)) {
    goto LABEL_62;
  }
  char v27 = (char *)v2 + 88;
  if (*((_DWORD *)v2 + 32))
  {
    LODWORD(v28) = 0;
    if (!*((void *)v2 + 13)) {
      goto LABEL_66;
    }
    long long v19 = (char *)v2 + 88;
    if (!**(_DWORD **)(*((void *)v2 + 15) + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
      long long v19 = v27;
    }
  }
  else
  {
    LODWORD(v28) = -1;
    long long v19 = (char *)v2 + 88;
  }
  char v27 = v19;
  uint64_t v20 = (unsigned __int16)v28;
  if ((char *)v18 != v19 || (unsigned __int16)v28 != 0xFFFFLL || (v28 & 0xFFFF0000) != 0xFFFF0000)
  {
    unint64_t v21 = WORD1(v28);
    do
    {
      unint64_t v22 = *((void *)v19 + 2);
      if (v22 <= v21) {
        goto LABEL_65;
      }
      re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>::destroy((uint64_t)v2 + 88, ((unint64_t)(*(_DWORD *)(*(void *)(*((void *)v19 + 4) + 16 * v21 + 8) + 4 * v20) & 0xFFFFFF) << 32) | (v21 << 16) | v20);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
      long long v19 = v27;
      uint64_t v20 = (unsigned __int16)v28;
      unint64_t v21 = WORD1(v28);
    }
    while (v27 != (char *)v18 || (unsigned __int16)v28 != 0xFFFFLL || WORD1(v28) != 0xFFFFLL);
  }
  unint64_t v23 = *((void *)v2 + 13);
  unint64_t v21 = v23 - 1;
  if (v23 == 1) {
    goto LABEL_60;
  }
  unint64_t v22 = 16 * v23 - 16;
  do
  {
    if (v23 <= v21)
    {
      char v27 = 0;
      long long v42 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v30 = 136315906;
      unint64_t v31 = "operator[]";
      __int16 v32 = 1024;
      int v33 = 789;
      __int16 v34 = 2048;
      unint64_t v35 = v21;
      __int16 v36 = 2048;
      unint64_t v37 = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_64:
      char v27 = 0;
      long long v42 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v30 = 136315906;
      unint64_t v31 = "removeAt";
      __int16 v32 = 1024;
      int v33 = 931;
      __int16 v34 = 2048;
      unint64_t v35 = v21;
      __int16 v36 = 2048;
      unint64_t v37 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_65:
      uint64_t v29 = 0;
      long long v42 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v30 = 136315906;
      unint64_t v31 = "operator[]";
      __int16 v32 = 1024;
      int v33 = 797;
      __int16 v34 = 2048;
      unint64_t v35 = v21;
      __int16 v36 = 2048;
      unint64_t v37 = v22;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_66:
      uint64_t v29 = 0;
      long long v42 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v30 = 136315906;
      unint64_t v31 = "operator[]";
      __int16 v32 = 1024;
      int v33 = 797;
      __int16 v34 = 2048;
      unint64_t v35 = 0;
      __int16 v36 = 2048;
      unint64_t v37 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    long long v24 = (void *)(*((void *)v2 + 15) + v22);
    (*(void (**)(void, void, __n128))(**((void **)v2 + 11) + 40))(*((void *)v2 + 11), *v24, v15);
    (*(void (**)(void, void))(**((void **)v2 + 11) + 40))(*((void *)v2 + 11), v24[1]);
    unint64_t v1 = *((void *)v2 + 13);
    if (v1 <= v21) {
      goto LABEL_64;
    }
    unint64_t v23 = v1 - 1;
    if (v1 - 1 > v21)
    {
      uint64_t v25 = *((void *)v2 + 15);
      __n128 v15 = *(__n128 *)(v25 + 16 * v1 - 16);
      *(__n128 *)(v25 + v22) = v15;
      unint64_t v23 = *((void *)v2 + 13) - 1;
    }
    *((void *)v2 + 13) = v23;
    ++*((_DWORD *)v2 + 28);
    v22 -= 16;
    --v21;
  }
  while (v21);
  *((void *)v2 + 17) = 0xFFFFFFFF00000000;
  if (!v23)
  {
    char v27 = 0;
    long long v42 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v2 = (re::ecs2::ImageBasedLightComponentStateImpl *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v30 = 136315906;
    unint64_t v31 = "operator[]";
    __int16 v32 = 1024;
    int v33 = 789;
    __int16 v34 = 2048;
    unint64_t v35 = 0;
    __int16 v36 = 2048;
    unint64_t v37 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    *((void *)v2 + 17) = 0xFFFFFFFF00000000;
  }
  long long v26 = (void *)*((void *)v2 + 15);
  (*(void (**)(void, void))(**((void **)v2 + 11) + 40))(*((void *)v2 + 11), *v26);
  (*(void (**)(void, void))(**((void **)v2 + 11) + 40))(*((void *)v2 + 11), v26[1]);
  re::DynamicArray<unsigned long>::deinit(v18);
  *((_DWORD *)v2 + 33) = 0;
LABEL_62:
  re::DynamicArray<unsigned long>::deinit(v18);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v2 + 5);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v2 + 2);
}

double re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        uint64_t v4 = 72 * v3;
        uint64_t v5 = (id *)(v2 + 56);
        do
        {
          if (*v5)
          {

            id *v5 = 0;
          }
          re::DynamicArray<re::IBL>::deinit((uint64_t)(v5 - 5));
          v5 += 9;
          v4 -= 72;
        }
        while (v4);
      }
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)a1)
    {
      (*(void (**)(void))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56));
      *(void *)a1 = 0;
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void *re::make::shared::unsafelyInplace<re::ecs2::ImageBasedLightComponent>(void *a1)
{
  bzero(a1, 0x550uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((unsigned char *)a1 + 24) = 0;
  *a1 = &unk_26E6EA4A8;
  *(void *)((char *)a1 + 28) = 0;
  *(void *)((char *)a1 + 140) = 0;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *((_WORD *)a1 + 68) = 0;
  *((unsigned char *)a1 + 148) = 1;
  *((unsigned char *)a1 + 152) = 0;
  *((_OWORD *)a1 + 73) = 0u;
  *((_OWORD *)a1 + 74) = 0u;
  re::DynamicString::setCapacity(a1 + 146, 0);
  *((_WORD *)a1 + 604) = 0;
  a1[150] = 0;
  *((_OWORD *)a1 + 76) = xmmword_23435FD50;
  *((_OWORD *)a1 + 77) = xmmword_23435FD60;
  *((_OWORD *)a1 + 78) = xmmword_23435FD80;
  a1[158] = 0;
  *((_OWORD *)a1 + 80) = 0u;
  *((unsigned char *)a1 + 1296) = 0;
  *(_OWORD *)(a1 + 163) = 0u;
  *(_OWORD *)(a1 + 165) = 0u;
  *(_OWORD *)((char *)a1 + 1332) = 0u;
  return a1;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::ImageBasedLightReceiverComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EA648;
  objc_initWeak(v2, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v2);
  *(void *)(a1 + 56) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::ImageBasedLightSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ImageBasedLightSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

_anonymous_namespace_ *re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::allocBlock(void *a1)
{
  uint64_t v3 = 96 * *((unsigned int *)a1 + 11);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(void *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4;
  uint64_t v1 = 4 * *((unsigned int *)a1 + 11);
  double result = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(void *)(*a1 + 8));
    double result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  long long v9 = result;
  unint64_t v11 = a1[1];
  unint64_t v10 = a1[2];
  if (v10 >= v11)
  {
    unint64_t v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        unint64_t v13 = 2 * v11;
        if (!v11) {
          unint64_t v13 = 8;
        }
        if (v13 <= v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = v13;
        }
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    unint64_t v10 = a1[2];
  }
  __n128 v15 = (uint64_t *)(a1[4] + 16 * v10);
  uint64_t *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = a1[7];
  long long v51 = 0u;
  *(_OWORD *)uint64_t v52 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v52[16], 0, 32);
  unint64_t v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v51, v8, v9);
  unint64_t v11 = a1[2];
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 >> 4;
    int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
    while (1)
    {
      unsigned __int16 v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v16 = (unsigned __int16)~v15;
      if (v15 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v13) {
        goto LABEL_12;
      }
    }
    unint64_t v17 = __clz(__rbit64(v16)) + v12;
    while (v17 != -1)
    {
      uint64_t v28 = a1[1];
      if (!*(void *)&v52[40])
      {
        int8x16_t v50 = v14;
        int8x16_t v14 = v50;
      }
      if (!*(void *)&v52[16]
        || (unint64_t v29 = *(void *)v52, *(void *)v52 > (unint64_t)(8 * *(void *)&v52[16])))
      {
        int8x16_t v49 = v14;
        unint64_t v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(&v51, 1);
        int8x16_t v14 = v49;
        unint64_t v29 = *(void *)v52;
      }
      int v30 = (unint64_t *)(v28 + 16 * v17);
      unint64_t v31 = 0xBF58476D1CE4E5B9 * (*v30 ^ (*v30 >> 30));
      unint64_t v32 = (0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) ^ ((0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) >> 31);
      unint64_t v33 = v29 >> 4;
      unint64_t v34 = v32 % (v29 >> 4);
      unint64_t v35 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v51 + 16 * v34)), v14)))), (int8x8_t)0x3830282018100800)));
      if (v35 >= 0x40)
      {
        do
        {
          if (v34 + 1 == v33) {
            unint64_t v34 = 0;
          }
          else {
            ++v34;
          }
          unint64_t v35 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v51 + 16 * v34)), v14)))), (int8x8_t)0x3830282018100800)));
        }
        while (v35 > 0x3F);
      }
      __int16 v36 = (uint64_t *)(v30 + 1);
      uint64_t v37 = v51 + 16 * v34;
      uint64_t v38 = *(unsigned __int8 *)(v37 + v35) == 255;
      *(unsigned char *)(v37 + v35) = v32 & 0x7F;
      unint64_t v39 = *v30;
      uint64_t v40 = *v36;
      uint64_t v41 = *(void *)&v52[8];
      long long v42 = (unint64_t *)(*((void *)&v51 + 1) + 16 * (v35 + 16 * v34));
      unint64_t *v42 = v39;
      v42[1] = v40;
      *(void *)&v52[8] = v41 + 1;
      *(void *)&v52[16] -= v38;
      unint64_t v43 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) >> 27));
      *(void *)&v52[24] ^= (v43 >> 31) ^ v43;
      unint64_t v44 = v17 >> 4;
      unint64_t v11 = a1[2];
      if (v17 >> 4 >= v11 >> 4) {
        break;
      }
      unint64_t v45 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
      if (v45 >= 0x40)
      {
        uint64_t v46 = 16 * v44;
        unint64_t v47 = ~v44 + (v11 >> 4);
        while (v47)
        {
          unint64_t v16 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v46 + 16)), v14)))), (int8x8_t)0x3830282018100800);
          unint64_t v48 = __clz(__rbit64(v16));
          v46 += 16;
          --v47;
          if (v48 <= 0x3F)
          {
            unint64_t v17 = v48 + v46;
            goto LABEL_32;
          }
        }
        break;
      }
      unint64_t v17 = v45 + (v17 & 0xFFFFFFFFFFFFFFF0);
LABEL_32:
      ;
    }
  }
LABEL_12:
  uint64_t v19 = *(void *)&v52[40];
  *(void *)&v52[40] = a1[7];
  uint64_t result = *(void *)&v52[40];
  long long v20 = v51;
  long long v21 = *(_OWORD *)v52;
  *(void *)uint64_t v52 = v11;
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  *(void *)&long long v51 = *a1;
  *((void *)&v51 + 1) = v23;
  long long v24 = *(_OWORD *)&v52[16];
  long long v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v52[32];
  a1[7] = v19;
  *(_OWORD *)&v52[24] = v25;
  long long v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v52[8] = v26;
  if (result)
  {
    if (v23) {
      *((void *)&v51 + 1) = 0;
    }
    if (v22)
    {
      char v27 = *(uint64_t (**)(void))(*(void *)result + 40);
      return v27();
    }
  }
  return result;
}

void *re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    void *v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    unint64_t v9 = v3[2];
    if (v9)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v9; ++i)
      {
        uint64_t v12 = (void *)(v3[1] + v10);
        *uint64_t v12 = 0;
        v12[1] = 0xFFFFFFFFLL;
        unint64_t v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

uint64_t re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(void *a1, unint64_t a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v5 = v4 ^ (v4 >> 31);
  unint64_t v6 = v5 % v3;
  int8x16_t v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  unint64_t v9 = v5 % v3;
  while (1)
  {
    int8x16_t v10 = *(int8x16_t *)(*a1 + 16 * v9);
    unint64_t v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3) {
      unint64_t v9 = 0;
    }
    else {
      ++v9;
    }
    uint64_t v14 = -1;
    if (v9 == v6) {
      return v14;
    }
  }
  uint64_t v13 = 16 * v9;
  while (1)
  {
    uint64_t v14 = v12 + v13;
    if (*(void *)(a1[1] + 72 * (v12 + v13)) == a2) {
      return v14;
    }
    if (v12 <= 0x3E)
    {
      unint64_t v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

double re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = a1[7];
  long long v27 = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v28[16], 0, 32);
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(&v27, v8, v9);
  v25[0] = a1;
  unint64_t v11 = a1[2];
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a1;
    unint64_t v14 = v11 >> 4;
    __n128 v15 = (__n128)xmmword_2343680E0;
    v10.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v25[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v14) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = __clz(__rbit64((unsigned __int16)~v16)) + v12;
    uint64_t v26 = v17;
    if (v17 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v27, *(void *)(v25[0] + 8) + 72 * v17, *(void *)(v25[0] + 8) + 72 * v17 + 8, v15, v10);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v25);
        uint64_t v17 = v26;
      }
      while (v26 != -1);
      unint64_t v11 = a1[2];
    }
  }
LABEL_14:
  uint64_t v18 = *(void *)&v28[40];
  *(void *)&v28[40] = a1[7];
  long long v19 = v27;
  long long v20 = *(_OWORD *)v28;
  long long v27 = *(_OWORD *)a1;
  *(void *)uint64_t v28 = v11;
  long long v21 = *(_OWORD *)&v28[16];
  long long v22 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v28[32];
  a1[7] = v18;
  *(_OWORD *)&v28[24] = v22;
  long long v23 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v19;
  *((_OWORD *)a1 + 1) = v20;
  *((_OWORD *)a1 + 2) = v21;
  *(_OWORD *)&v28[8] = v23;
  return re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)&v27);
}

void *re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)a1, 1u);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  int v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  uint64_t v17 = *a2;
  long long v18 = *(_OWORD *)(a3 + 16);
  v25[0] = *(_OWORD *)a3;
  v25[1] = v18;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  ++*(_DWORD *)(a3 + 32);
  int v26 = 1;
  *(_OWORD *)long long v27 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a3 + 40) = 0u;
  int v28 = *(_DWORD *)(a3 + 56);
  uint64_t v19 = *((void *)a1 + 1) + 72 * v16;
  *(void *)uint64_t v19 = v17;
  *(void *)(v19 + 8) = *(void *)&v25[0];
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v19 + 16, (uint64_t)v25 + 8);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v19 + 56), &v27[1]);
  *(_DWORD *)(v19 + 64) = v28;
  if (v27[1])
  {

    v27[1] = 0;
  }
  re::DynamicArray<re::IBL>::deinit((uint64_t)v25 + 8);
  uint64_t v20 = *((void *)a1 + 4) - (v15 == 255);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v20;
  long long v21 = (unint64_t *)(*((void *)a1 + 1) + 72 * v16);
  unint64_t v23 = *v21;
  uint64_t result = v21 + 1;
  unint64_t v24 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v24 >> 31) ^ v24;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(void *a1, unint64_t a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v5 = v4 ^ (v4 >> 31);
  unint64_t v6 = v5 % v3;
  int8x16_t v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  unint64_t v9 = v5 % v3;
  while (1)
  {
    int8x16_t v10 = *(int8x16_t *)(*a1 + 16 * v9);
    unint64_t v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3) {
      unint64_t v9 = 0;
    }
    else {
      ++v9;
    }
    uint64_t v14 = -1;
    if (v9 == v6) {
      return v14;
    }
  }
  uint64_t v13 = 16 * v9;
  while (1)
  {
    uint64_t v14 = v12 + v13;
    if (*(void *)(a1[1] + 32 * (v12 + v13)) == a2) {
      return v14;
    }
    if (v12 <= 0x3E)
    {
      unint64_t v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

uint64_t re::HashBrown<unsigned long long,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = a1[7];
  long long v41 = 0u;
  *(_OWORD *)long long v42 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v42[16], 0, 32);
  int8x16_t v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v41, v8, v9);
  v39[0] = a1;
  unint64_t v11 = a1[2];
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a1;
    unint64_t v14 = v11 >> 4;
    int8x16_t v15 = (int8x16_t)xmmword_2343680E0;
    while (1)
    {
      unsigned __int16 v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v39[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v14) {
        goto LABEL_25;
      }
    }
    uint64_t v17 = __clz(__rbit64((unsigned __int16)~v16)) + v12;
    uint64_t v40 = v17;
    if (v17 != -1)
    {
      do
      {
        uint64_t v18 = *(void *)(v39[0] + 8);
        if (!*(void *)&v42[40])
        {
          int8x16_t v15 = (int8x16_t)xmmword_2343680E0;
        }
        if (!*(void *)&v42[16]
          || (unint64_t v19 = *(void *)v42, *(void *)v42 > (unint64_t)(8 * *(void *)&v42[16])))
        {
          re::HashBrown<unsigned long long,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(&v41, 1);
          int8x16_t v15 = (int8x16_t)xmmword_2343680E0;
          unint64_t v19 = *(void *)v42;
        }
        uint64_t v20 = (void *)(v18 + 16 * v17);
        unint64_t v21 = 0xBF58476D1CE4E5B9 * (*v20 ^ (*v20 >> 30));
        unint64_t v22 = (0x94D049BB133111EBLL * (v21 ^ (v21 >> 27))) ^ ((0x94D049BB133111EBLL * (v21 ^ (v21 >> 27))) >> 31);
        unint64_t v23 = v19 >> 4;
        unint64_t v24 = v22 % (v19 >> 4);
        unint64_t v25 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v41 + 16 * v24)), v15)))), (int8x8_t)0x3830282018100800)));
        if (v25 >= 0x40)
        {
          do
          {
            if (v24 + 1 == v23) {
              unint64_t v24 = 0;
            }
            else {
              ++v24;
            }
            unint64_t v25 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v41 + 16 * v24)), v15)))), (int8x8_t)0x3830282018100800)));
          }
          while (v25 > 0x3F);
        }
        uint64_t v26 = v41 + 16 * v24;
        int v27 = *(unsigned __int8 *)(v26 + v25);
        *(unsigned char *)(v26 + v25) = v22 & 0x7F;
        unint64_t v28 = v25 + 16 * v24;
        *(_OWORD *)(*((void *)&v41 + 1) + 16 * v28) = *(_OWORD *)v20;
        ++*(void *)&v42[8];
        *(void *)&v42[16] -= v27 == 255;
        unint64_t v29 = 0xBF58476D1CE4E5B9
            * (*(void *)(*((void *)&v41 + 1) + 16 * v28) ^ (*(void *)(*((void *)&v41 + 1) + 16 * v28) >> 30));
        *(void *)&v42[24] ^= ((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) >> 31) ^ (0x94D049BB133111EBLL
                                                                                     * (v29 ^ (v29 >> 27)));
        int8x16_t v10 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v39);
        int8x16_t v15 = (int8x16_t)xmmword_2343680E0;
        uint64_t v17 = v40;
      }
      while (v40 != -1);
      unint64_t v11 = a1[2];
    }
  }
LABEL_25:
  uint64_t v31 = *(void *)&v42[40];
  *(void *)&v42[40] = a1[7];
  uint64_t result = *(void *)&v42[40];
  long long v32 = v41;
  long long v33 = *(_OWORD *)v42;
  *(void *)long long v42 = v11;
  uint64_t v34 = *a1;
  uint64_t v35 = a1[1];
  *(void *)&long long v41 = *a1;
  *((void *)&v41 + 1) = v35;
  long long v36 = *(_OWORD *)&v42[16];
  long long v37 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v42[32];
  a1[7] = v31;
  *(_OWORD *)&v42[24] = v37;
  long long v38 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v32;
  *((_OWORD *)a1 + 1) = v33;
  *((_OWORD *)a1 + 2) = v36;
  *(_OWORD *)&v42[8] = v38;
  if (result)
  {
    if (v35) {
      *((void *)&v41 + 1) = 0;
    }
    if (v34) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

void *re::DynamicArray<re::IBL>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::IBL>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::IBL>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  unint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v5 > v3)
  {
    unint64_t v6 = 3 * v3;
    unint64_t v7 = v6 << 6;
    uint64_t v8 = (v6 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v5 <= v7 >> 7) {
      unint64_t v5 = v8;
    }
    unint64_t v4 = (v5 << 7) / 0x97;
  }
  uint64_t v9 = a1[7];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::init(&v27, v9, v4);
  unint64_t v10 = a1[2];
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    while (1)
    {
      unsigned __int16 v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_11;
      }
    }
    unint64_t v15 = __clz(__rbit64(v14)) + v11;
    if (v15 != -1)
    {
      do
      {
        re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd((_anonymous_namespace_ *)&v27, (void *)(a1[1] + 32 * v15), (__n128 *)(a1[1] + 32 * v15 + 8));
        unint64_t v21 = v15 >> 4;
        unint64_t v22 = a1[2];
        if (v15 >> 4 >= v22 >> 4) {
          break;
        }
        unint64_t v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
        if (v23 >= 0x40)
        {
          unint64_t v25 = v22 >> 4;
          unint64_t v24 = 16 * v21;
          unint64_t v26 = ~v21 + v25;
          while (v26)
          {
            unint64_t v14 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v24 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
            unint64_t v23 = __clz(__rbit64(v14));
            v24 += 16;
            --v26;
            if (v23 <= 0x3F) {
              goto LABEL_23;
            }
          }
          break;
        }
        unint64_t v24 = v15 & 0xFFFFFFFFFFFFFFF0;
LABEL_23:
        unint64_t v15 = v23 + v24;
      }
      while (v23 + v24 != -1);
    }
  }
LABEL_11:
  uint64_t result = a1[7];
  uint64_t v17 = *a1;
  uint64_t v18 = *((void *)&v30 + 1);
  a1[6] = v30;
  a1[7] = v18;
  long long v19 = v28;
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v29;
  if (result && v17)
  {
    uint64_t v20 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v20();
  }
  return result;
}

__n128 re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, __n128 *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  __n128 result = *a3;
  unint64_t v17 = a3[1].n128_u64[0];
  uint64_t v18 = 32 * (v13 + 16 * v11);
  uint64_t v19 = *((void *)a1 + 1) + v18;
  *(void *)uint64_t v19 = *a2;
  *(void *)(v19 + 24) = v17;
  *(__n128 *)(v19 + 8) = result;
  uint64_t v20 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v20;
  uint64_t v21 = *(void *)(*((void *)a1 + 1) + v18) ^ (*(void *)(*((void *)a1 + 1) + v18) >> 30);
  unint64_t v22 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v21) ^ ((0xBF58476D1CE4E5B9 * v21) >> 27));
  *((void *)a1 + 5) ^= (v22 >> 31) ^ v22;
  return result;
}

void *re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    __n128 result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 33 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    void *v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      __n128 result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = v3[1] + v9;
        *(_OWORD *)uint64_t v11 = 0uLL;
        *(_OWORD *)(v11 + 16) = 0uLL;
        *(_DWORD *)(v11 + 8) = -1;
        *(_DWORD *)(v11 + 16) = -1;
        ++v10;
        unint64_t v12 = v3[2];
        v9 += 32;
      }
      while (v10 < v12);
    }
    else
    {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v12 = 0;
    *__n128 result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *unint64_t v10 = &unk_26E704210;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    BOOL v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unsigned __int16 v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E704268;
    v16[1] = a1;
    v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    int v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    void *v22 = &unk_26E7042C0;
    v22[1] = a1;
    _OWORD v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    unint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    unint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v26 = v23;
    v26[1] = v25;
    long long v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    void *v28 = &unk_26E704318;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    unint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    __n128 result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      uint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        unint64_t v71 = 0;
        long long v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        void *v37 = &unk_26E704210;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        unint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        long long v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        unint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E704268;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        unint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        int32x4_t v65 = 0;
        int8x16_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        void *v49 = &unk_26E7042C0;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        int32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v53 = v50;
        v53[1] = v52;
        int v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        unint64_t v62 = 0;
        int v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E704318;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        unint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        int32x4_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        __n128 result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      long long v8 = (void *)(v4 + 192);
    }
    else {
      long long v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unsigned __int16 v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      long long v8 = (void *)(v4 + 192);
    }
    else {
      long long v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unsigned __int16 v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      long long v8 = (void *)(v4 + 192);
    }
    else {
      long long v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unsigned __int16 v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      long long v8 = (void *)(v4 + 192);
    }
    else {
      long long v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unsigned __int16 v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unsigned __int16 v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unsigned __int16 v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unsigned __int16 v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unsigned __int16 v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704210;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704210;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704268;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704268;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7042C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7042C0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704318;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704318;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::allocInfo_CARETraceComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C6C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C6C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C6D8, "CARETraceComponent");
    __cxa_guard_release(&qword_26AF8C6C0);
  }
  return &unk_26AF8C6D8;
}

void re::ecs2::initInfo_CARETraceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v12[0] = 0xBD1DADD37A0DED52;
  v12[1] = "CARETraceComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_290, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_290);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8C6C8 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_AABB((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "m_bbox";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8C6D0 = v10;
      __cxa_guard_release(&_MergedGlobals_290);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8C6C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CARETraceComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::CARETraceComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CARETraceComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CARETraceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

int32x4_t re::internal::defaultConstruct<re::ecs2::CARETraceComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6A00;
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v5 = 0x7F0000007FLL;
  *((void *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 48) = v5;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::CARETraceComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

int32x4_t re::internal::defaultConstructV2<re::ecs2::CARETraceComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F6A00;
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v3 = 0x7F0000007FLL;
  *((void *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v3;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CARETraceComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CARETraceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CARETraceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CARETraceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CARETraceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CARETraceComponent>, this);
}

void *re::ecs2::allocInfo_NetworkReceiveSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_291, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_291))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C7A8, "NetworkReceiveSystem");
    __cxa_guard_release(&_MergedGlobals_291);
  }
  return &unk_26AF8C7A8;
}

void re::ecs2::initInfo_NetworkReceiveSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x2D555FC17D8BF08;
  v5[1] = "NetworkReceiveSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_NetworkReceiveSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkReceiveSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkReceiveSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::NetworkReceiveSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::NetworkReceiveSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkReceiveSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkReceiveSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::NetworkReceiveSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 0);
  *(void *)uint64_t v3 = &unk_26E704370;
  double result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  *(void *)(v3 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::NetworkReceiveSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::NetworkReceiveSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 0);
  *(void *)uint64_t v1 = &unk_26E704370;
  double result = 0.0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0u;
  *(_DWORD *)(v1 + 136) = 0;
  *(void *)(v1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::NetworkReceiveSystem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_NetworkReceiveSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkReceiveSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkReceiveSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkReceiveSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkReceiveSystem>, this);
}

void *re::ecs2::allocInfo_NetworkSendSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C758, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C758))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C820, "NetworkSendSystem");
    __cxa_guard_release(&qword_26AF8C758);
  }
  return &unk_26AF8C820;
}

void re::ecs2::initInfo_NetworkSendSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xCDD33CCFDEACF90ALL;
  v5[1] = "NetworkSendSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_NetworkSendSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkSendSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkSendSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::NetworkSendSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::NetworkSendSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkSendSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkSendSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::NetworkSendSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 2);
  *(void *)uint64_t v3 = &unk_26E704400;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
  *(void *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::NetworkSendSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::NetworkSendSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 2);
  *(void *)uint64_t v1 = &unk_26E704400;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
  *(void *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::NetworkSendSystem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_NetworkSendSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkSendSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkSendSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkSendSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkSendSystem>, this);
}

void *re::ecs2::introspect_NetworkShareMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      uint64_t v10 = re::introspectionAllocator(v9);
      long long v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)long long v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "Local";
      re::ecs2::introspect_NetworkShareMode(BOOL)::enumAttributes = (uint64_t)v11;
      uint64_t v12 = re::introspectionAllocator(v11);
      long long v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)long long v13 = 1;
      *((void *)v13 + 1) = 1;
      *((void *)v13 + 2) = "Shared";
      qword_26879F7F0 = (uint64_t)v13;
      uint64_t v14 = re::introspectionAllocator(v13);
      uint64_t v15 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *((void *)v15 + 1) = 2;
      *((void *)v15 + 2) = "None";
      qword_26879F7F8 = (uint64_t)v15;
      unsigned __int16 v16 = re::introspectionAllocator(v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 24, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = 3;
      *(void *)(v17 + 16) = "Remote";
      qword_26879F800 = v17;
    }
  }
  {
    uint64_t v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::ecs2::introspect_NetworkShareMode(BOOL)::info, "NetworkShareMode", 1, 1, 1, 1);
    *(void *)uint64_t v18 = &unk_26E715E00;
    *((void *)v18 + 8) = &re::ecs2::introspect_NetworkShareMode(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if (re::ecs2::introspect_NetworkShareMode(BOOL)::isInitialized) {
      return &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    char v3 = re::ecs2::introspect_NetworkShareMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if (v3) {
      return &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::ecs2::introspect_NetworkShareMode(BOOL)::isInitialized)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
    }
  }
  re::ecs2::introspect_NetworkShareMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::ecs2::introspect_NetworkShareMode(BOOL)::info, a2);
  v19[0] = 0xEDDD86387A3B2768;
  v19[1] = (uint64_t)"NetworkShareMode";
  xmmword_26879F830 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
}

void *re::ecs2::allocInfo_NetworkComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C768, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C768))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C898, "NetworkComponent");
    __cxa_guard_release(&qword_26AF8C768);
  }
  return &unk_26AF8C898;
}

void re::ecs2::initInfo_NetworkComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v15[0] = 0xEDDD6DC48FF7751ELL;
  v15[1] = "NetworkComponent";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C760, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8C760);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8C790 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      re::ecs2::introspect_NetworkShareMode((re::ecs2 *)1, v9);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "m_shareMode";
      *(void *)(v10 + 16) = &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x23000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8C798 = v10;
      long long v11 = re::introspectionAllocator((re *)v10);
      uint64_t v12 = re::ecs2::introspect_SyncAccessControl((re::IntrospectionBase **)1);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "m_accessControl";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x23800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF8C7A0 = v13;
      __cxa_guard_release(&qword_26AF8C760);
    }
  }
  *((void *)this + 2) = 0x28000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8C790;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v16;
}

double re::internal::defaultConstruct<re::ecs2::NetworkComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::NetworkComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::NetworkComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::NetworkComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_NetworkComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkComponent>, this);
}

void re::ecs2::NetworkReceiveSystem::~NetworkReceiveSystem(re::ecs2::NetworkReceiveSystem *this)
{
  *(void *)this = &unk_26E704370;
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E704370;
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::NetworkReceiveSystem::willAddSystemToECSService(re::ecs2::NetworkReceiveSystem *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v3);
    uint64_t v2 = *((void *)this + 5);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((void *)this + 19) = v4;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t v6 = (re *)re::ServiceLocator::serviceOrNull<re::AssetService>(v5);
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = v6;
  if (*((void *)this + 19))
  {
    uint64_t v7 = re::globalAllocators(v6);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 176, 8);
    re::NetworkSystem::peerIDStringForAssetSerialization(*((re::NetworkSystem **)this + 19), (re::DynamicString *)buf);
    uint64_t v9 = *((void *)this + 20);
    re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)v8, 0);
    *(void *)uint64_t v8 = &unk_26E6CA920;
    *(unsigned char *)(v8 + 96) = 1;
    uint64_t v10 = re::DynamicString::DynamicString((re::DynamicString *)(v8 + 104), (const re::DynamicString *)buf);
    *(void *)(v8 + 136) = v9;
    *(void *)uint64_t v8 = &unk_26E704520;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    re::DynamicString::setCapacity((void *)(v8 + 144), 0);
    re::DynamicString::operator=((re::DynamicString *)(v8 + 144), (re::DynamicString *)buf);
    *((void *)this + 25) = v8;
    if (*(void *)buf && (v42 & 1) != 0) {
      (*(void (**)(void, uint64_t))(**(void **)buf + 40))(*(void *)buf, v43);
    }
    uint64_t v11 = *(void *)(*((void *)this + 19) + 2560);
    *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = v11;
    if (v11)
    {
      *((void *)this + 22) = RESyncServiceObserverCreate();
      uint64_t v36 = MEMORY[0x263EF8330];
      uint64_t v37 = 0x40000000;
      uint64_t v38 = ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke;
      uint64_t v39 = &__block_descriptor_tmp_17;
      uint64_t v40 = this;
      RESyncServiceObserverOnSessionDidReceiveOwnershipRequest();
      uint64_t v31 = MEMORY[0x263EF8330];
      uint64_t v32 = 0x40000000;
      uint64_t v33 = ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_2;
      uint64_t v34 = &__block_descriptor_tmp_13;
      uint64_t v35 = this;
      RESyncServiceObserverOnSessionDidReceiveOwnershipResponse();
      uint64_t v26 = MEMORY[0x263EF8330];
      uint64_t v27 = 0x40000000;
      long long v28 = ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_3;
      uint64_t v29 = &__block_descriptor_tmp_15;
      uint64_t v30 = this;
      RESyncServiceObserverOnSessionDidReceiveOwnershipHandoff();
      uint64_t v21 = MEMORY[0x263EF8330];
      uint64_t v22 = 0x40000000;
      uint64_t v23 = ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_4;
      uint64_t v24 = &__block_descriptor_tmp_16_1;
      uint64_t v25 = this;
      RESyncServiceObserverOnSessionDidReceiveOwnershipChange();
      RESyncServiceAddObserver();
    }
  }
  else
  {
    uint64_t v12 = *re::ecsNetworkLogObjects(v6);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Attempting to init the NetworkReceiveSystem without the NetworkSystem, Ownership requests will be ignored!", buf, 2u);
    }
  }
  uint64_t v13 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  long long v14 = &qword_268772000;
  while (1)
  {
    uint64_t v15 = v14[389];
    re::StringID::invalid((re::StringID *)buf);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v13 + 16))(v13, v15, buf);
    re::StringID::destroyString((re::StringID *)buf);
    *((void *)this + 23) = v16;
    *((void *)this + 24) = RESyncCreateSyncObjectContext();
    RESyncAddSyncObjectContextEntry();
    uint64_t v17 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    {
      re::introspect<re::NetworkCompatDeserializer>(void)::info = re::introspect_NetworkCompatDeserializer(0);
    }
    long long v14 = (uint64_t *)re::introspect<re::NetworkCompatDeserializer>(void)::info;
    re::StringID::invalid((re::StringID *)buf);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t *, uint8_t *))(*(void *)v17 + 16))(v17, v14, buf);
    re::StringID::destroyString((re::StringID *)buf);
    *((void *)this + 26) = v13;
    uint64_t v18 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = re::ServiceLocator::serviceOrNull<re::FrameManager>(v18);
    *((void *)this + 28) = RESyncCreateSyncObjectReadContext();
    RESyncAddSyncObjectReadContextEntry();
    uint64_t result = RESyncAddSyncObjectReadContextEntry();
    if (!*((void *)this + 23))
    {
      re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) [NetworkComponent] Deserializer not found. Please register the NetworkOPACKDeserializer in the service locator.", "m_opackDeserializer", "willAddSystemToECSService", 318);
      _os_crash();
      __break(1u);
LABEL_19:
      re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) [NetworkComponent] Deserializer not found. Please register the NetworkCompatDeserializer in the service locator.", "m_compatDeserializer", "willAddSystemToECSService", 319, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32,
        v33,
        v34,
        v35,
        v36,
        v37,
        v38,
        v39,
        v40);
      _os_crash();
      __break(1u);
      goto LABEL_20;
    }
    if (!*((void *)this + 26)) {
      goto LABEL_19;
    }
    if (*((void *)this + 27)) {
      return result;
    }
LABEL_20:
    re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) [NetworkComponent] FrameManager not found. Please register the FrameManager in the service locator.", "m_frameManager", "willAddSystemToECSService", 320);
    _os_crash();
    __break(1u);
LABEL_21:
    {
      v14[389] = re::introspect_NetworkOPACKDeserializer(0);
    }
  }
}

void ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = (re::EventBus *)a3;
  uint64_t v30 = *MEMORY[0x263EF8340];
  EntityBoundTo = (re *)re::ecs2::NetworkComponent::getEntityBoundTo(a3, (uint64_t *)&v27);
  uint64_t v11 = v27;
  if (v27)
  {
    uint64_t v12 = (uint64_t)v27;
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(void *)(v12 + 24);
    }
    while (v12);
    if (!*(void *)(v13 + 16)) {
      goto LABEL_14;
    }
    uint64_t v14 = (uint64_t)v27;
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(void *)(v14 + 24);
    }
    while (v14);
    if (*(void *)(*(void *)(v15 + 16) + 288))
    {
      uint64_t v16 = (uint64_t)v27;
      do
      {
        uint64_t v17 = v16;
        uint64_t v16 = *(void *)(v16 + 24);
      }
      while (v16);
      uint64_t v9 = *(re::EventBus **)(*(void *)(v17 + 16) + 288);
      uint64_t v18 = (uint64_t)v27;
      do
      {
        uint64_t v19 = v18;
        uint64_t v18 = *(void *)(v18 + 24);
      }
      while (v18);
      uint64_t v20 = *(void *)(v19 + 16);
      *(void *)buf = v27;
      *(void *)&uint8_t buf[8] = a4;
      *(void *)&uint8_t buf[16] = a7;
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C778, memory_order_acquire)) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v21 = *re::ecsNetworkLogObjects(EntityBoundTo);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = v11[35];
        uint64_t v11 = (void *)v11[37];
        uint64_t Guid = RESyncableGetGuid();
        *(_DWORD *)buf = 136381187;
        *(void *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v11;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v29 = Guid;
        _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "Event bus does not exist in entity:%{private}s, entity.id:%llu, syncable.guidid:%llu", buf, 0x20u);
      }
      re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "onOwnershipRequest", 386);
      _os_crash();
      __break(1u);
    }
    uint64_t v25 = (const char *)v20;
    int v26 = __cxa_guard_acquire(&qword_26AF8C778);
    uint64_t v20 = (uint64_t)v25;
    if (v26)
    {
      qword_26AF8C770 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"23REOwnershipRequestEvent" & 0x7FFFFFFFFFFFFFFFLL), v25);
      __cxa_guard_release(&qword_26AF8C778);
      uint64_t v20 = (uint64_t)v25;
    }
LABEL_13:
    re::EventBus::publish(v9, v20, qword_26AF8C770, (uint64_t)buf, 0x18uLL, 0);
LABEL_14:
  }
}

void ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  re::ecs2::NetworkComponent::getEntityBoundTo(a3, &v25);
  uint64_t v8 = v25;
  if (v25)
  {
    uint64_t v9 = v25;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = *(void *)(v9 + 24);
    }
    while (v9);
    if (!*(void *)(v10 + 16)) {
      goto LABEL_14;
    }
    uint64_t v11 = v25;
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = *(void *)(v11 + 24);
    }
    while (v11);
    if (*(void *)(*(void *)(v12 + 16) + 288))
    {
      uint64_t v13 = v25;
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = *(void *)(v13 + 24);
      }
      while (v13);
      uint64_t v15 = *(re::EventBus **)(*(void *)(v14 + 16) + 288);
      uint64_t v16 = v25;
      do
      {
        uint64_t v17 = v16;
        uint64_t v16 = *(void *)(v16 + 24);
      }
      while (v16);
      uint64_t v18 = *(void *)(v17 + 16);
      v23[0] = v25;
      v23[1] = a4;
      char v24 = a5;
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C788, memory_order_acquire)) {
        goto LABEL_13;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "onOwnershipResponse", 408);
      uint64_t v15 = (re::EventBus *)_os_crash();
      __break(1u);
    }
    uint64_t v19 = v15;
    uint64_t v20 = (const char *)v18;
    int v21 = __cxa_guard_acquire(&qword_26AF8C788);
    uint64_t v18 = (uint64_t)v20;
    int v22 = v21;
    uint64_t v15 = v19;
    if (v22)
    {
      qword_26AF8C780 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24REOwnershipResponseEvent" & 0x7FFFFFFFFFFFFFFFLL), v20);
      __cxa_guard_release(&qword_26AF8C788);
      uint64_t v18 = (uint64_t)v20;
      uint64_t v15 = v19;
    }
LABEL_13:
    re::EventBus::publish(v15, v18, qword_26AF8C780, (uint64_t)v23, 0x18uLL, 0);
LABEL_14:
  }
}

void ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RESyncSessionGetNetSession();
  uint64_t v4 = RESyncNetSessionPeerID();
  re::ecs2::NetworkReceiveSystem::onOwnershipChange(a3, v4);
}

void re::ecs2::NetworkReceiveSystem::onOwnershipChange(uint64_t a1, uint64_t a2)
{
  re::ecs2::NetworkComponent::getEntityBoundTo(a1, &v15);
  uint64_t v4 = v15;
  if (v15)
  {
    uint64_t v5 = v15;
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = *(void *)(v5 + 24);
    }
    while (v5);
    if (*(void *)(v6 + 16))
    {
      uint64_t v7 = v15;
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = *(void *)(v7 + 24);
      }
      while (v7);
      uint64_t v9 = *(re::EventBus **)(*(void *)(v8 + 16) + 288);
      if (!v9)
      {
        re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "onOwnershipChange", 429);
        _os_crash();
        __break(1u);
        return;
      }
      uint64_t v10 = v15;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = *(void *)(v10 + 24);
      }
      while (v10);
      uint64_t v12 = *(void *)(v11 + 16);
      v14[0] = v15;
      v14[1] = a2;
      uint64_t Type = re::EventBus::getTypeId<REOwnershipChangedEvent>();
      re::EventBus::publish(v9, v12, Type, (uint64_t)v14, 0x10uLL, 0);
    }
  }
}

void ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t re::ecs2::NetworkReceiveSystem::willAddSceneToECSService(re::ecs2::NetworkReceiveSystem *this, re::EventBus **a2)
{
  uint64_t v2 = (re::ecs2::Scene *)a2;
  uint64_t v20 = (re::ecs2::Scene *)a2;
  uint64_t v3 = a2[36];
  if (v3)
  {
    uint64_t v19 = 0;
    v17[1] = 0;
    void v17[2] = 0;
    int v18 = 0;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity(v17, 3uLL);
    ++v18;
    v16.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v3, 0, (uint64_t)re::ecs2::NetworkComponent::onEntityReparented, 0, 0);
    v16.n128_u64[1] = v5;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v17, &v16);
    v16.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v3, 0, (uint64_t)re::ecs2::NetworkComponent::onComponentDidAddEvent, 0, 0);
    v16.n128_u64[1] = v6;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v17, &v16);
    v16.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, 0, (uint64_t)re::ecs2::NetworkComponent::onComponentWillRemoveEvent, 0, 0);
    v16.n128_u64[1] = v7;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v17, &v16);
    re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 104, (uint64_t *)&v20, (uint64_t)v17);
    if (v17[0] && v19) {
      (*(void (**)(void))(*(void *)v17[0] + 40))();
    }
    uint64_t v2 = v20;
  }
  uint64_t v8 = *((void *)v2 + 7);
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
    uint64_t v10 = (re::NetworkSystem *)re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t result = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)v2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v12 = *(void *)(result + 24);
    if (v12)
    {
      uint64_t v13 = *(uint64_t **)(result + 40);
      uint64_t v14 = 8 * v12;
      do
      {
        uint64_t v15 = *v13++;
        uint64_t result = re::ecs2::NetworkComponent::onAdded(v15, v10);
        v14 -= 8;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t re::ecs2::NetworkComponent::onEntityReparented(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 + 200);
  if (v3)
  {
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
    {
      re::packCharArrayToUInt64ForAriadne(*(re **)(v2 + 280), 0);
      uint64_t v4 = *(void *)(v2 + 24);
      if (!v4 || (*(unsigned char *)(v4 + 288) & 0x80) != 0) {
        unint64_t v5 = (re *)"N/A";
      }
      else {
        unint64_t v5 = *(re **)(v4 + 280);
      }
      re::packCharArrayToUInt64ForAriadne(v5, 0);
      kdebug_trace();
    }
    re::ecs2::NetworkComponent::resolveViews(v3, 0);
    if (!*(unsigned char *)(v3 + 618)) {
      goto LABEL_14;
    }
    uint64_t v6 = *(void *)(v2 + 24);
    if (v6 && (*(unsigned char *)(v6 + 288) & 0x80) != 0) {
      uint64_t v6 = 0;
    }
    if (*(void *)(v3 + 624) != v6) {
LABEL_14:
    }
      re::ecs2::NetworkComponent::markEntityDirty((re::ecs2::NetworkComponent *)v3, (re::ecs2::NetworkComponent *)3);
  }
  return 0;
}

uint64_t re::ecs2::NetworkComponent::onComponentDidAddEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(re ***)(a2 + 8);
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    re::packCharArrayToUInt64ForAriadne(*(re **)(a1 + 280), 0);
    re::packCharArrayToUInt64ForAriadne(v3[4], 0);
    kdebug_trace();
  }
  uint64_t v4 = (re::NetworkSystem *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)v3);
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 24);
    }
    while (v6);
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8
      && (uint64_t v4 = *(re::NetworkSystem **)(v8 + 56)) != 0
      && (uint64_t v9 = (*(uint64_t (**)(re::NetworkSystem *))(*(void *)v4 + 32))(v4),
          (uint64_t v4 = (re::NetworkSystem *)re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v9)) != 0))
    {
      uint64_t v10 = (uint64_t)v4;
      if (v3 == (re **)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
      {
        re::ecs2::NetworkComponent::onAdded((uint64_t)v5, v4);
        return 0;
      }
      uint64_t v11 = *(void *)(a1 + 200);
      if (v11)
      {
        if (!*(void *)(v11 + 32) || RESyncableIsAuthoritative())
        {
          *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v5 + 40))(v5) + 16);
          re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove(v11 + 512, (unsigned __int16 *)buf);
          if (!*(void *)(v11 + 32))
          {
LABEL_23:
            re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v10 + 792, v10);
            return 0;
          }
          uint64_t v12 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v5 + 40))(v5);
          if (!re::ecs2::NetworkComponentInfo::get((re::ecs2::NetworkComponentInfo *)(v11 + 112), v12))
          {
            re::ecs2::NetworkComponent::createSyncObjectForLocalComponent(&v23, (re::NetworkSystem **)v11, v5);
            if (v23)
            {
              uint64_t v13 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v5 + 40))(v5);
              re::ecs2::NetworkComponentInfo::markDirty((re::ecs2::NetworkComponentInfo *)(v11 + 112), v13, 3);
              uint64_t v15 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(v14);
              if (v15)
              {
                __n128 v16 = *re::ecsNetworkLogObjects(v15);
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v17 = v3[4];
                  uint64_t v18 = *(void *)(a1 + 296);
                  uint64_t Guid = RESyncableGetGuid();
                  uint64_t v20 = RESyncableGetGuid();
                  *(_DWORD *)buf = 134219011;
                  uint64_t v25 = v5;
                  __int16 v26 = 2081;
                  uint64_t v27 = v17;
                  __int16 v28 = 2048;
                  uint64_t v29 = v18;
                  __int16 v30 = 2048;
                  uint64_t v31 = Guid;
                  __int16 v32 = 2048;
                  uint64_t v33 = v20;
                  _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "[NetworkComponent], Binding component %p(%{private}s) in entity %llu(%llu) to syncable %llu", buf, 0x34u);
                }
              }
              RESyncRelease();
            }
          }
        }
        if (!*(void *)(v11 + 32) || !RESyncableGetOwnerPeerID()) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      int v21 = *re::ecsNetworkLogObjects(v4);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "[NetworkComponent] NetworkSystem not available during onSceneComponentDidAddEvent event.", buf, 2u);
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::NetworkComponent::onComponentWillRemoveEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(re ***)(a2 + 8);
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    re::packCharArrayToUInt64ForAriadne(*(re **)(a1 + 280), 0);
    re::packCharArrayToUInt64ForAriadne(v3[4], 0);
    kdebug_trace();
  }
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)v3);
  if (v4)
  {
    unint64_t v5 = (re::ecs2::NetworkComponent *)v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
    while (1)
    {
      {
        uint64_t v11 = v7;
        uint64_t v7 = v11;
        if (v12)
        {
          re::introspect<re::ecs2::NetworkComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"NetworkComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkComponent>, 0);
          uint64_t v7 = v11;
        }
      }
      if ((_UNKNOWN *)v7 == re::introspect<re::ecs2::NetworkComponent>(void)::info) {
        break;
      }
      uint64_t v8 = *(unsigned int *)(v7 + 56);
      if (v8)
      {
        uint64_t v9 = *(void **)(v7 + 64);
        while (1)
        {
          uint64_t v10 = (_DWORD *)*v9;
          if (*(_DWORD *)*v9 == 1 && v10[10] == 3) {
            break;
          }
          ++v9;
          if (!--v8) {
            goto LABEL_19;
          }
        }
        uint64_t v7 = *((void *)v10 + 2);
        if (v7) {
          continue;
        }
      }
      goto LABEL_19;
    }
    re::ecs2::NetworkComponent::onRemoved(v5, 0);
LABEL_19:
    uint64_t v13 = *(void *)(a1 + 200);
    if (v13)
    {
      if (*(void *)(v13 + 56))
      {
        if (!*(void *)(v13 + 32) || !RESyncableGetOwnerPeerID())
        {
          uint64_t v14 = a1;
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = *(void *)(v14 + 24);
          }
          while (v14);
          uint64_t v16 = *(void *)(v15 + 16);
          if (v16)
          {
            uint64_t v17 = *(void *)(v16 + 56);
            if (v17)
            {
              uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
              uint64_t v19 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v18);
              if (v19) {
                re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v19 + 968, *(void *)(v13 + 56));
              }
            }
          }
        }
        uint64_t v20 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::NetworkComponent *))(*(void *)v5 + 40))(v5);
        uint64_t v21 = re::ecs2::NetworkComponentInfo::get((re::ecs2::NetworkComponentInfo *)(v13 + 112), v20);
        if (v21)
        {
          unint64_t v22 = v21;
          RESyncRetain();
          re::ecs2::NetworkComponent::unbindComponentFromSyncable(v13, (uint64_t)v5, v22);
          if (!*(void *)(v13 + 32) || !RESyncableIsAuthoritative())
          {
LABEL_53:
            RESyncRelease();
            return 0;
          }
          LOWORD(v45) = *(_WORD *)((*(uint64_t (**)(re::ecs2::NetworkComponent *))(*(void *)v5 + 40))(v5)
                                 + 16);
          re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove(v13 + 416, (unsigned __int16 *)&v45);
          unint64_t v23 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
          unint64_t v24 = v23 ^ (v23 >> 31);
          unint64_t v25 = *(unsigned int *)(v13 + 488);
          if (v25)
          {
            unint64_t v26 = v24 % v25;
            uint64_t v27 = *(unsigned int *)(*(void *)(v13 + 472) + 4 * (v24 % v25));
            if (v27 != 0x7FFFFFFF)
            {
              uint64_t v28 = *(void *)(v13 + 480);
              if (*(void *)(v28 + 24 * v27 + 16) == v22)
              {
LABEL_50:
                LOWORD(v45) = *(_WORD *)((*(uint64_t (**)(re::ecs2::NetworkComponent *))(*(void *)v5 + 40))(v5)
                                       + 16);
                re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addNew(v13 + 512, &v45);
                uint64_t v38 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(v37);
                if (v38)
                {
                  uint64_t v39 = *re::ecsNetworkLogObjects(v38);
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v40 = v3[4];
                    uint64_t v41 = *(void *)(a1 + 296);
                    uint64_t Guid = RESyncableGetGuid();
                    uint64_t v43 = RESyncableGetGuid();
                    int v45 = 134219011;
                    uint64_t v46 = v5;
                    __int16 v47 = 2081;
                    unint64_t v48 = v40;
                    __int16 v49 = 2048;
                    uint64_t v50 = v41;
                    __int16 v51 = 2048;
                    uint64_t v52 = Guid;
                    __int16 v53 = 2048;
                    uint64_t v54 = v43;
                    _os_log_impl(&dword_233120000, v39, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Unbinding component %p(%{private}s) in entity %llu(%llu) from syncable %llu", (uint8_t *)&v45, 0x34u);
                  }
                }
                goto LABEL_53;
              }
              while (1)
              {
                LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = *(_DWORD *)(v28 + 24 * v27 + 8) & 0x7FFFFFFF;
                if (v27 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v28 + 24 * v27 + 16) == v22) {
                  goto LABEL_50;
                }
              }
            }
          }
          else
          {
            LODWORD(v26) = 0;
          }
          uint64_t v33 = *(unsigned int *)(v13 + 500);
          if (v33 == 0x7FFFFFFF)
          {
            uint64_t v33 = *(unsigned int *)(v13 + 496);
            int v34 = v33;
            if (v33 == v25)
            {
              re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(v13 + 464, 2 * *(_DWORD *)(v13 + 492));
              LODWORD(v26) = v24 % *(unsigned int *)(v13 + 488);
              int v34 = *(_DWORD *)(v13 + 496);
            }
            *(_DWORD *)(v13 + 496) = v34 + 1;
            uint64_t v35 = *(void *)(v13 + 480);
            int v36 = *(_DWORD *)(v35 + 24 * v33 + 8);
          }
          else
          {
            uint64_t v35 = *(void *)(v13 + 480);
            int v36 = *(_DWORD *)(v35 + 24 * v33 + 8);
            *(_DWORD *)(v13 + 500) = v36 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v35 + 24 * v33 + 8) = v36 | 0x80000000;
          *(_DWORD *)(*(void *)(v13 + 480) + 24 * v33 + 8) = *(_DWORD *)(*(void *)(v13 + 480) + 24 * v33 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v13 + 472) + 4 * v26);
          *(void *)(*(void *)(v13 + 480) + 24 * v33) = v24;
          *(void *)(*(void *)(v13 + 480) + 24 * v33 + 16) = v22;
          RESyncRetain();
          *(_DWORD *)(*(void *)(v13 + 472) + 4 * v26) = v33;
          ++*(_DWORD *)(v13 + 492);
          ++*(_DWORD *)(v13 + 504);
          goto LABEL_50;
        }
        IsAuthoritative = *(re::NetworkSystemFeatureFlags **)(v13 + 32);
        if (!IsAuthoritative
          || (IsAuthoritative = (re::NetworkSystemFeatureFlags *)RESyncableIsAuthoritative(), IsAuthoritative))
        {
          __int16 v30 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(IsAuthoritative);
          if (v30)
          {
            uint64_t v31 = *re::ecsNetworkLogObjects(v30);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v32 = v3[4];
              int v45 = 136380675;
              uint64_t v46 = v32;
              _os_log_impl(&dword_233120000, v31, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Component %{private}s already deleted!", (uint8_t *)&v45, 0xCu);
            }
          }
        }
      }
    }
  }
  return 0;
}

void re::ecs2::NetworkReceiveSystem::willRemoveSceneFromECSService(re::ecs2::NetworkReceiveSystem *this, unint64_t a2)
{
  unint64_t v21 = a2;
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      uint64_t v6 = *(re::ecs2::NetworkComponent ***)(v4 + 40);
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        re::ecs2::NetworkComponent::onRemoved(v8, 1);
        v7 -= 8;
      }
      while (v7);
    }
  }
  uint64_t v9 = *(void *)(a2 + 288);
  if (v9)
  {
    uint64_t v10 = (char *)this + 104;
    LODWORD(v11) = 0x7FFFFFFF;
    if (*((void *)this + 13))
    {
      unint64_t v12 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      uint64_t v13 = *(unsigned int *)(*((void *)this + 14) + 4 * ((v12 ^ (v12 >> 31)) % *((unsigned int *)this + 32)));
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *((void *)this + 15);
        if (*(void *)(v14 + (v13 << 6) + 16) == a2)
        {
          LODWORD(v11) = v13;
        }
        else
        {
          uint64_t v11 = v13;
          while (1)
          {
            uint64_t v11 = *(_DWORD *)(v14 + (v11 << 6) + 8) & 0x7FFFFFFF;
            if (v11 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v14 + (v11 << 6) + 16) == a2) {
              goto LABEL_15;
            }
          }
          LODWORD(v11) = 0x7FFFFFFF;
        }
      }
    }
LABEL_15:
    unint64_t v15 = *((void *)this + 15) + ((unint64_t)v11 << 6);
    uint64_t v16 = *(void *)(v15 + 40);
    if (v16)
    {
      uint64_t v17 = *(uint64_t **)(v15 + 56);
      uint64_t v18 = &v17[2 * v16];
      do
      {
        uint64_t v19 = *v17;
        unint64_t v20 = v17[1];
        v17 += 2;
        re::EventBus::unsubscribe(v9, v19, v20);
      }
      while (v17 != v18);
    }
    re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v10, (uint64_t *)&v21);
  }
}

uint64_t re::ecs2::NetworkReceiveSystem::willRemoveSystemFromECSService(re::ecs2::NetworkReceiveSystem *this)
{
  if (*((void *)this + 19))
  {
    RESyncServiceRemoveObserver();
    RESyncRelease();
    *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
    *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 0;
    *((void *)this + 22) = 0;
    re::internal::destroyPersistent<re::NetworkAssetSerialization>(*((re **)this + 25));
  }
  *((void *)this + 19) = 0;
  RESyncDestroySyncObjectReadContext();
  *((void *)this + 28) = 0;
  uint64_t result = RESyncDestroySyncObjectContext();
  *((void *)this + 26) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  return result;
}

re *re::internal::destroyPersistent<re::NetworkAssetSerialization>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t re::ecs2::NetworkComponent::getEntityBoundTo@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (result && (uint64_t result = RESyncableGetUserData(), (result & 1) != 0) && (result &= ~1uLL) != 0)
  {
    uint64_t result = (uint64_t)objc_loadWeakRetained((id *)result);
    uint64_t v3 = result - 8;
    if (!result) {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a2 = v3;
  return result;
}

void *re::ecs2::NetworkReceiveSystem::update(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1[5] + 104))(a1[5]);
  uint64_t result = (void *)re::ecs2::EntityComponentCollection::operator[](v8, 0);
  if (*result == a2)
  {
    uint64_t v10 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[10];
    return (void *)v10(a1, a3, a4);
  }
  return result;
}

void re::ecs2::NetworkReceiveSystem::update(uint64_t *a1)
{
  if (a1[19])
  {
    uint64_t v2 = (re::ProfilerConfig *)(*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 136))(a1[5]);
    if (v2
      || (uint64_t v2 = (re::ProfilerConfig *)(*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 104))(a1[5]),
          *((void *)v2 + 3)))
    {
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v2);
      if (isStatisticCollectionEnabled)
      {
        uint64_t v4 = re::profilerThreadContext(isStatisticCollectionEnabled);
        if (*(void *)(v4 + 152)) {
          uint64_t v18 = mach_absolute_time();
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36, 3051, (uint64_t)a1);
      if (a1[21])
      {
        v19[0] = 0;
        v19[1] = v19;
        uint64_t v19[2] = 0x15002000000;
        v19[3] = __Block_byref_object_copy__8;
        v19[4] = __Block_byref_object_dispose__8;
        memset(v20, 0, sizeof(v20));
        int v21 = 0;
        memset(v22, 0, sizeof(v22));
        uint64_t v23 = 0x7FFFFFFFLL;
        memset(v24, 0, sizeof(v24));
        int v25 = 0;
        int v27 = 0;
        memset(v26, 0, sizeof(v26));
        memset(v28, 0, sizeof(v28));
        uint64_t v29 = 0x7FFFFFFFLL;
        int v31 = 0;
        memset(v30, 0, sizeof(v30));
        uint64_t v32 = 0x7FFFFFFFLL;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t SessionCount = RESyncServiceGetSessionCount();
        if (SessionCount)
        {
          uint64_t v7 = SessionCount;
          for (uint64_t i = 0; i != v7; ++i)
          {
            RESyncServiceGetSession();
            IsLocal = (re::NetworkSystemFeatureFlags *)RESyncSessionIsLocal();
            if (IsLocal && re::NetworkSystemFeatureFlags::enableAltSharedApp(IsLocal))
            {
              uint64_t v10 = a1[23];
              uint64_t v11 = a1[25];
              v42[0] = 0;
              v42[1] = re::ecs2::NetworkReceiveSystem::processLocalSession(RESyncSession *)const::$_0::__invoke;
              v42[2] = 0;
              v42[3] = 0;
              *(void *)(v10 + 456) = v11;
              *(void *)(v10 + 464) = v42;
              uint64_t v37 = MEMORY[0x263EF8330];
              uint64_t v38 = 0x40000000;
              uint64_t v39 = ___ZNK2re4ecs220NetworkReceiveSystem19processLocalSessionEP13RESyncSession_block_invoke;
              uint64_t v40 = &__block_descriptor_tmp_40_0;
              uint64_t v41 = a1;
              RESyncSessionReceiveRaw();
              uint64_t v12 = a1[23];
              *(void *)(v12 + 456) = 0;
              *(void *)(v12 + 464) = 0;
            }
            else
            {
              RESyncSessionReceive();
            }
          }
        }
        re::Event<re::GeometricObjectBase>::raise(a1[19] + 1496, a1[19]);
        _Block_object_dispose(v19, 8);
        re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v30);
        re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)&v28[8]);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v26 + 8);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v24);
        re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)&v22[8]);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v20);
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36);
        if (v4)
        {
          if (*(void *)(v4 + 152))
          {
            uint64_t v13 = mach_absolute_time();
            uint64_t v14 = *(int64x2_t **)(v4 + 152);
            if (v14)
            {
              uint64_t v15 = v14[500].u64[0];
              if (v15 >= v13 - v18) {
                uint64_t v15 = v13 - v18;
              }
              v14[500].i64[0] = v15;
              uint64_t v16 = v14[500].u64[1];
              if (v16 <= v13 - v18) {
                uint64_t v16 = v13 - v18;
              }
              v14[500].i64[1] = v16;
              int64x2_t v17 = vdupq_n_s64(1uLL);
              v17.i64[0] = v13 - v18;
              v14[501] = vaddq_s64(v14[501], v17);
              *(unsigned char *)(v4 + 184) = 0;
            }
          }
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) ", "m_syncService", "update", 467);
        _os_crash();
        __break(1u);
      }
    }
  }
}

uint64_t anonymous namespace'::countOfNetworkComponentsInECSService(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v2 = *(void *)(v1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = 8 * v2;
  do
  {
    uint64_t v6 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(void *)v4 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v6) {
      uint64_t v7 = *(void *)(v6 + 24);
    }
    else {
      uint64_t v7 = 0;
    }
    v3 += v7;
    v4 += 8;
    v5 -= 8;
  }
  while (v5);
  return v3;
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v3;
  uint64_t v4 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v4;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 116) = 0x7FFFFFFFLL;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v5 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v5;
  uint64_t v6 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = v6;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v8 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = v8;
  uint64_t v9 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = v9;
  ++*(_DWORD *)(a2 + 152);
  ++*(_DWORD *)(a1 + 152);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v10;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  uint64_t v11 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = v11;
  uint64_t v12 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = v12;
  ++*(_DWORD *)(a2 + 192);
  ++*(_DWORD *)(a1 + 192);
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 244) = 0x7FFFFFFFLL;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  uint64_t v13 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a2 + 216) = v13;
  uint64_t v14 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = v14;
  LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a2 + 232) = v14;
  LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(a1 + 236);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a2 + 236) = v14;
  LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a2 + 240) = v14;
  LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(a1 + 244);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = v14;
  *(void *)(a1 + 288) = 0x7FFFFFFF00000000;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  uint64_t v15 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = v15;
  uint64_t v16 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 280);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a2 + 280) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a2 + 284) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a2 + 288) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 292);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a2 + 292) = v16;
  __n128 result = *(__n128 *)(a2 + 304);
  long long v18 = *(_OWORD *)(a2 + 320);
  *(__n128 *)(a1 + 304) = result;
  *(_OWORD *)(a1 + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = v18;
  return result;
}

uint64_t __Block_byref_object_dispose__8(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 5);
  re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1 + 32);
  re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit(a1 + 26);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 16));
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit(a1 + 10);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem6updateENS0_6System13UpdateContextE_block_invoke(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 328) = RESyncCommitGetSourcePeerID();
  if (v2[19])
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    *(double *)(v3 + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = *(double *)(v3 + 320) - CFAbsoluteTimeGetCurrent();
    *(void *)(v2[23] + 456) = v2[25];
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    *(void *)(v3 + 304) = 0;
    *(void *)(v3 + 312) = 0;
    char IsAtomic = RESyncCommitIsAtomic();
    RESyncCommitEnumerateForRead();
    *(void *)&long long v46 = MEMORY[0x263EF8330];
    *((void *)&v46 + 1) = 0x40000000;
    __int16 v47 = ___ZNK2re4ecs220NetworkReceiveSystem25processComponentSnapshotsEPK12RESyncCommitRNS0_21NetworkReceiveContextE_block_invoke;
    unint64_t v48 = &__block_descriptor_tmp_43;
    __int16 v49 = v2;
    uint64_t v50 = v3 + 40;
    RESyncCommitEnumerateForRead();
    RESyncCommitEnumerateForRead();
    uint64_t v4 = re::internal::enableSignposts(0, 0);
    if (v4) {
      uint64_t v4 = kdebug_trace();
    }
    uint64_t isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v4);
    if (isStatisticCollectionEnabled)
    {
      uint64_t isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
      uint64_t v6 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
      if (v6)
      {
        unint64_t v7 = *(void *)(v3 + 304);
        unint64_t v8 = v6[192].u64[0];
        if (v8 >= v7) {
          unint64_t v8 = *(void *)(v3 + 304);
        }
        v6[192].i64[0] = v8;
        unint64_t v9 = v6[192].u64[1];
        if (v9 <= v7) {
          unint64_t v9 = v7;
        }
        v6[192].i64[1] = v9;
        int64x2_t v10 = vdupq_n_s64(1uLL);
        v10.i64[0] = v7;
        v6[193] = vaddq_s64(v6[193], v10);
        *(unsigned char *)(isStatisticCollectionEnabled + 184) = 0;
      }
    }
    uint64_t v11 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if (v11)
    {
      uint64_t v12 = re::profilerThreadContext(v11);
      uint64_t v13 = *(int64x2_t **)(v12 + 152);
      if (v13)
      {
        unint64_t v14 = *(void *)(v3 + 312);
        unint64_t v15 = v13[184].u64[0];
        if (v15 >= v14) {
          unint64_t v15 = *(void *)(v3 + 312);
        }
        v13[184].i64[0] = v15;
        unint64_t v16 = v13[184].u64[1];
        if (v16 <= v14) {
          unint64_t v16 = v14;
        }
        v13[184].i64[1] = v16;
        int64x2_t v17 = vdupq_n_s64(1uLL);
        v17.i64[0] = v14;
        v13[185] = vaddq_s64(v13[185], v17);
        *(unsigned char *)(v12 + 184) = 0;
      }
    }
    *(void *)(v2[23] + 456) = 0;
    CFAbsoluteTime v19 = CFAbsoluteTimeGetCurrent() + *(double *)(v3 + 320);
    *(CFAbsoluteTime *)(v3 + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = v19;
    if (v19 > 0.05)
    {
      unint64_t v20 = *re::ecsNetworkLogObjects(v18);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void *)(v3 + 328);
        LODWORD(v46) = 134217984;
        *(void *)((char *)&v46 + 4) = v21;
        _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processCommit for peer %llu", (uint8_t *)&v46, 0xCu);
      }
      *(void *)(v3 + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
    }
  }
  RESyncCommitListAddCopy();
  RESyncCommitSetForwarded();
  re::ecs2::NetworkReceiveSystem::processCreatedEntities((uint64_t)v2, *(void *)(*(void *)(a1 + 32) + 8) + 40);
  re::ecs2::NetworkReceiveSystem::processParentChanges((uint64_t)v2, *(void *)(*(void *)(a1 + 32) + 8) + 40);
  re::ecs2::NetworkReceiveSystem::processEvents((uint64_t)v2, *(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 8);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&v46, 6047, (uint64_t)v2);
  *(double *)(v22 + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = *(double *)(v22 + 320) - CFAbsoluteTimeGetCurrent();
  uint64_t v23 = *(unsigned int *)(v22 + 112);
  if (v23)
  {
    uint64_t v24 = 0;
    int v25 = (int *)(*(void *)(v22 + 96) + 8);
    while (1)
    {
      int v26 = *v25;
      v25 += 6;
      if (v26 < 0) {
        break;
      }
      if (v23 == ++v24)
      {
        LODWORD(v24) = *(_DWORD *)(v22 + 112);
        break;
      }
    }
  }
  else
  {
    LODWORD(v24) = 0;
  }
  if (v23 != v24)
  {
    uint64_t v27 = v24;
    uint64_t v28 = *(void *)(v22 + 96);
    do
    {
      uint64_t v29 = *(re::ecs2::Entity **)(v28 + 24 * v27 + 16);
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v2[19] + 176, v2[19]);
      if ((*((unsigned char *)v29 + 288) & 0x80) != 0)
      {
        __int16 v30 = v29;
        do
          __int16 v30 = (re::ecs2::Entity *)*((void *)v30 + 3);
        while (v30);
        re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(v2[19] + 1144, v2[19]);
      }
      re::ecs2::Entity::removeFromSceneOrParent(v29);
      uint64_t v28 = *(void *)(v22 + 96);
      if (*(_DWORD *)(v22 + 112) <= (v24 + 1)) {
        int v31 = v24 + 1;
      }
      else {
        int v31 = *(_DWORD *)(v22 + 112);
      }
      while (1)
      {
        uint64_t v27 = (v24 + 1);
        if (v31 - 1 == v24) {
          break;
        }
        LODWORD(v24) = v24 + 1;
        int v32 = v27;
        if ((*(_DWORD *)(v28 + 24 * v27 + 8) & 0x80000000) != 0) {
          goto LABEL_43;
        }
      }
      int v32 = v31;
LABEL_43:
      LODWORD(v24) = v32;
    }
    while (v23 != v32);
  }
  CFAbsoluteTime v34 = CFAbsoluteTimeGetCurrent() + *(double *)(v22 + 320);
  *(CFAbsoluteTime *)(v22 + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = v34;
  if (v34 > 0.05)
  {
    uint64_t v35 = *re::ecsNetworkLogObjects(v33);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = *(void *)(v22 + 328);
      *(_DWORD *)buf = 134217984;
      uint64_t v53 = v36;
      _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processDestroyedEntities for peer %llu", buf, 0xCu);
    }
    *(void *)(v22 + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&v46);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear(*(void *)(*(void *)(a1 + 32) + 8) + 80);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(*(void *)(*(void *)(a1 + 32) + 8) + 128);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(*(void *)(*(void *)(a1 + 32) + 8) + 168);
  uint64_t v37 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(_DWORD *)(v37 + 236))
  {
    uint64_t v38 = *(unsigned int *)(v37 + 232);
    if (v38) {
      memset_pattern16(*(void **)(v37 + 216), &memset_pattern_180, 4 * v38);
    }
    unint64_t v39 = *(unsigned int *)(v37 + 240);
    if (v39)
    {
      uint64_t v40 = 0;
      for (unint64_t i = 0; i < v39; ++i)
      {
        uint64_t v42 = *(void *)(v37 + 224) + v40;
        int v43 = *(_DWORD *)(v42 + 8);
        if (v43 < 0)
        {
          *(_DWORD *)(v42 + 8) = v43 & 0x7FFFFFFF;
          if (*(void *)(v42 + 16))
          {
            RESyncRelease();
            *(void *)(v42 + 16) = 0;
            unint64_t v39 = *(unsigned int *)(v37 + 240);
          }
        }
        v40 += 32;
      }
    }
    *(_DWORD *)(v37 + 236) = 0;
    *(_DWORD *)(v37 + 240) = 0;
    int v44 = *(_DWORD *)(v37 + 248) + 1;
    *(_DWORD *)(v37 + 244) = 0x7FFFFFFF;
    *(_DWORD *)(v37 + 248) = v44;
  }
  return 1;
}

void re::ecs2::NetworkReceiveSystem::processCreatedEntities(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v27, 6045, a1);
  *(double *)(a2 + 280) = *(double *)(a2 + 280) - CFAbsoluteTimeGetCurrent();
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(a2 + 32);
    uint64_t v6 = &v5[v4];
    do
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *(void *)(*v5 + 200);
      if (v8
        && *(void *)(a2 + 168)
        && (unint64_t v9 = *(void *)(v8 + 32),
            unint64_t v10 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27)),
            uint64_t v11 = *(unsigned int *)(*(void *)(a2 + 176) + 4 * ((v10 ^ (v10 >> 31)) % *(unsigned int *)(a2 + 192))),
            v11 != 0x7FFFFFFF))
      {
        uint64_t v12 = *(void *)(a2 + 184);
        while (*(void *)(v12 + 32 * v11 + 16) != v9)
        {
          uint64_t v11 = *(_DWORD *)(v12 + 32 * v11 + 8) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF) {
            goto LABEL_9;
          }
        }
        uint64_t v13 = (void *)(v12 + 32 * v11 + 24);
      }
      else
      {
LABEL_9:
        uint64_t v13 = 0;
      }
      uint64_t v14 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 216, *(void *)(v7 + 296));
      uint64_t v15 = v7;
      do
      {
        uint64_t v16 = v15;
        uint64_t v15 = *(void *)(v15 + 24);
      }
      while (v15);
      if (!*(void *)(v16 + 16) && (!v13 || !*v13) && (!v14 || !*(void *)(v14 + 8)))
      {
        if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
        {
          *(_DWORD *)(v7 + 288) |= 0x480u;
          int64x2_t v17 = (re *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 104))(*(void *)(a1 + 40));
          long long v18 = re::globalAllocators(v17);
          CFAbsoluteTime v19 = (re::ecs2::Scene *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 384, 8);
          *(void *)buf = re::ecs2::Scene::Scene(v19, (re::ecs2::Entity *)v7);
          re::Collection<re::SharedPtr<re::ecs2::Scene>>::add(v17, (uint64_t *)buf);
        }
        else
        {
          re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise(*(void *)(a1 + 152) + 1408, *(void *)(a1 + 152));
          uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 104))(*(void *)(a1 + 40));
          uint64_t v21 = *(void *)(*(void *)re::ecs2::EntityComponentCollection::operator[](v20, 0) + 104);
          *(void *)buf = v7;
          if (v7) {
            id v22 = (id)(v7 + 8);
          }
          re::Collection<re::SharedPtr<re::ecs2::Entity>>::add((void *)(v21 + 304), (uint64_t *)buf);
        }
        if (*(void *)buf) {
      }
        }
      ++v5;
    }
    while (v5 != v6);
  }
  CFAbsoluteTime v24 = CFAbsoluteTimeGetCurrent() + *(double *)(a2 + 280);
  *(CFAbsoluteTime *)(a2 + 280) = v24;
  if (v24 > 0.05)
  {
    int v25 = *re::ecsNetworkLogObjects(v23);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void *)(a2 + 288);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processCreatedEntities for peer %llu", buf, 0xCu);
    }
    *(void *)(a2 + 280) = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v27);
}

void re::ecs2::NetworkReceiveSystem::processParentChanges(uint64_t a1, uint64_t a2)
{
  v179[16] = *MEMORY[0x263EF8340];
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  uint64_t v166 = a1;
  *(double *)(a2 + 280) = *(double *)(a2 + 280) - CFAbsoluteTimeGetCurrent();
  while (*(_DWORD *)(a2 + 244))
  {
    uint64_t v5 = *(unsigned int *)(a2 + 248);
    uint64_t v6 = *(void *)(a2 + 232);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (int *)(v6 + 8);
      unint64_t v9 = (int *)(v6 + 8);
      while (1)
      {
        int v10 = *v9;
        v9 += 10;
        if (v10 < 0) {
          break;
        }
        if (v5 == ++v7)
        {
          LODWORD(v7) = *(_DWORD *)(a2 + 248);
          break;
        }
      }
      uint64_t v11 = 0;
      unint64_t v12 = *(void *)(v6 + 40 * v7 + 16);
      while (1)
      {
        int v13 = *v8;
        v8 += 10;
        if (v13 < 0) {
          break;
        }
        if (v5 == ++v11)
        {
          LODWORD(v11) = *(_DWORD *)(a2 + 248);
          break;
        }
      }
    }
    else
    {
      LODWORD(v11) = 0;
      unint64_t v12 = *(void *)(v6 + 16);
    }
    unsigned int v14 = v11;
    uint64_t v15 = *(void *)(v6 + 40 * v11 + 24);
    if (v15)
    {
      id v16 = (id)(v15 + 8);
      unint64_t v17 = *(void *)(v6 + 40 * v14 + 32);
      *(void *)unint64_t v171 = v15;
      id v18 = (id)(v15 + 8);
    }
    else
    {
      unint64_t v17 = *(void *)(v6 + 40 * v11 + 32);
      *(void *)unint64_t v171 = 0;
    }
    uint64_t v19 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 216, v17);
    if (v19)
    {
      uint64_t v20 = (uint64_t *)v19;
      do
      {
        unint64_t v12 = v17;
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v171, *v20);
        unint64_t v17 = v20[1];
        uint64_t v20 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 216, v17);
      }
      while (v20);
    }
    if (*(void *)(a2 + 216))
    {
      unint64_t v21 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) >> 27));
      unint64_t v22 = (v21 ^ (v21 >> 31)) % *(unsigned int *)(a2 + 240);
      uint64_t v23 = *(void *)(a2 + 224);
      uint64_t v24 = *(unsigned int *)(v23 + 4 * v22);
      if (v24 != 0x7FFFFFFF)
      {
        uint64_t v25 = *(void *)(a2 + 232);
        if (*(void *)(v25 + 40 * v24 + 16) == v12)
        {
          *(_DWORD *)(v23 + 4 * v22) = *(_DWORD *)(v25 + 40 * v24 + 8) & 0x7FFFFFFF;
LABEL_27:
          uint64_t v27 = *(void *)(a2 + 232);
          uint64_t v28 = v27 + 40 * v24;
          int v31 = *(_DWORD *)(v28 + 8);
          uint64_t v29 = (int *)(v28 + 8);
          int v30 = v31;
          if (v31 < 0)
          {
            *uint64_t v29 = v30 & 0x7FFFFFFF;
            uint64_t v32 = v27 + 40 * v24;
            uint64_t v35 = *(void *)(v32 + 24);
            CFAbsoluteTime v34 = (void *)(v32 + 24);
            uint64_t v33 = v35;
            if (v35)
            {

              void *v34 = 0;
            }
          }
          uint64_t v36 = *(void *)(a2 + 232) + 40 * v24;
          *(_DWORD *)(v36 + 8) = *(_DWORD *)(v36 + 8) & 0x80000000 | *(_DWORD *)(a2 + 252);
          --*(_DWORD *)(a2 + 244);
          int v37 = *(_DWORD *)(a2 + 256) + 1;
          *(_DWORD *)(a2 + 252) = v24;
          *(_DWORD *)(a2 + 256) = v37;
        }
        else
        {
          while (1)
          {
            uint64_t v26 = v24;
            uint64_t v24 = *(_DWORD *)(v25 + 40 * v24 + 8) & 0x7FFFFFFF;
            if (v24 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v25 + 40 * v24 + 16) == v12)
            {
              *(_DWORD *)(v25 + 40 * v26 + 8) = *(_DWORD *)(v25 + 40 * v26 + 8) & 0x80000000 | *(_DWORD *)(v25 + 40 * v24 + 8) & 0x7FFFFFFF;
              goto LABEL_27;
            }
          }
        }
      }
    }
    if (v17)
    {
      re::ecs2::NetworkReceiveSystem::findEntity((re::ecs2::NetworkReceiveSystem *)&v170, *(void *)(v166 + 40), v17);
      uint64_t v40 = v170;
      if (v170)
      {
        uint64_t v41 = *(void *)v171;
        do
        {
          uint64_t v42 = v41;
          uint64_t v41 = *(void *)(v41 + 24);
        }
        while (v41);
        if (!*(void *)(v42 + 16)) {
          goto LABEL_39;
        }
        int v43 = v170;
        do
        {
          int v44 = v43;
          int v43 = (re::ecs2::Entity *)*((void *)v43 + 3);
        }
        while (v43);
        if (!*((void *)v44 + 2))
        {
          __int16 v51 = *re::ecsNetworkLogObjects(*(re **)v171);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            uint64_t v52 = *((void *)v40 + 37);
            uint64_t v53 = *((void *)v40 + 35);
            unint64_t v54 = *(void *)(*(void *)v171 + 296);
            uint64_t v55 = *(void *)(*(void *)v171 + 280);
            *(_DWORD *)buf = 134218755;
            *(void *)&uint8_t buf[4] = v52;
            *(_WORD *)&buf[12] = 2081;
            *(void *)&buf[14] = v53;
            __int16 v177 = 2048;
            unint64_t v178 = v54;
            LOWORD(v179[0]) = 2081;
            *(void *)((char *)v179 + 2) = v55;
            _os_log_error_impl(&dword_233120000, v51, OS_LOG_TYPE_ERROR, "[NetworkComponent] Parent (id=%llu name=%{private}s) not in scene while reparenting Entity (id=%llu name=%{private}s)", buf, 0x2Au);
          }
        }
        else
        {
LABEL_39:
          re::ecs2::NetworkReceiveSystem::setEntityParent(*(re::ecs2::NetworkReceiveSystem **)v171, v170, v39);
        }

        v170 = 0;
      }
      else
      {
        unint64_t v48 = *re::ecsNetworkLogObjects(v38);
        uint64_t EntityBoundTo = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
        if (EntityBoundTo)
        {
          uint64_t v49 = *(void *)(*(void *)v171 + 296);
          uint64_t v50 = *(void *)(*(void *)v171 + 280);
          *(_DWORD *)buf = 134218499;
          *(void *)&uint8_t buf[4] = v49;
          *(_WORD *)&buf[12] = 2081;
          *(void *)&buf[14] = v50;
          __int16 v177 = 2048;
          unint64_t v178 = v17;
          _os_log_error_impl(&dword_233120000, v48, OS_LOG_TYPE_ERROR, "[NetworkComponent] Entity (id=%llu name=%{private}s) unable to find parent %llu.", buf, 0x20u);
        }
      }
    }
    else
    {
      uint64_t v45 = *(void *)(*(void *)v171 + 24);
      if (v45 && (*(unsigned char *)(v45 + 288) & 0x80) == 0) {
        re::ecs2::NetworkReceiveSystem::setEntityParent(*(re::ecs2::NetworkReceiveSystem **)v171, 0, *(re::ecs2::Entity **)v171);
      }
      *(_DWORD *)buf = 0;
      re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise(*(void *)(v166 + 152) + 1408, *(void *)(v166 + 152));
      if (!*(_DWORD *)buf)
      {
        uint64_t v46 = (*(uint64_t (**)(void))(**(void **)(v166 + 40) + 104))(*(void *)(v166 + 40));
        uint64_t v47 = re::ecs2::EntityComponentCollection::operator[](v46, 0);
        re::Collection<re::SharedPtr<re::ecs2::Entity>>::add((void *)(*(void *)(*(void *)v47 + 104) + 304), (uint64_t *)v171);
      }
    }
    if (*(void *)v171) {

    }
    if (v15) {
  }
    }
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  *(_DWORD *)&uint8_t buf[16] = 1;
  unint64_t v178 = 0;
  v179[0] = 0;
  uint64_t v56 = *(unsigned int *)(a2 + 200);
  if (v56)
  {
    uint64_t v57 = 0;
    uint64_t v58 = (int *)(*(void *)(a2 + 184) + 8);
    while (1)
    {
      int v59 = *v58;
      v58 += 8;
      if (v59 < 0) {
        break;
      }
      if (v56 == ++v57)
      {
        LODWORD(v57) = *(_DWORD *)(a2 + 200);
        break;
      }
    }
  }
  else
  {
    LODWORD(v57) = 0;
  }
  if (v56 == v57)
  {
    uint64_t v60 = v166;
    goto LABEL_132;
  }
  uint64_t v61 = v57;
  uint64_t v62 = *(void *)(a2 + 184);
  do
  {
    uint64_t v63 = v62 + 32 * v61;
    uint64_t v65 = *(void *)(v63 + 16);
    uint64_t v64 = v63 + 16;
    uint64_t EntityBoundTo = re::ecs2::NetworkComponent::getEntityBoundTo(v65, (uint64_t *)&v170);
    uint64_t v66 = v170;
    if (v170)
    {
      uint64_t v67 = (uint64_t *)(v64 + 8);
      if (!*(void *)(v64 + 8))
      {
        uint64_t v77 = *((void *)v170 + 3);
        if (v77 && (*(unsigned char *)(v77 + 288) & 0x80) == 0) {
          re::ecs2::NetworkReceiveSystem::setEntityParent(v170, 0, v170);
        }
        *(_DWORD *)unint64_t v171 = 0;
        re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise(*(void *)(v166 + 152) + 1408, *(void *)(v166 + 152));
        if (!*(_DWORD *)v171)
        {
          uint64_t v78 = (*(uint64_t (**)(void))(**(void **)(v166 + 40) + 104))(*(void *)(v166 + 40));
          uint64_t v79 = re::ecs2::EntityComponentCollection::operator[](v78, 0);
          re::Collection<re::SharedPtr<re::ecs2::Entity>>::add((void *)(*(void *)(*(void *)v79 + 104) + 304), (uint64_t *)&v170);
        }
        goto LABEL_101;
      }
      SyncableWithuint64_t Guid = RESyncServiceFindSyncableWithGuid();
      unint64_t v69 = (_anonymous_namespace_ *)re::ecs2::NetworkComponent::getEntityBoundTo(SyncableWithGuid, (uint64_t *)&v169);
      unint64_t v71 = v169;
      if (!v169)
      {
        uint64_t v80 = *(void *)(v166 + 152);
        uint64_t v81 = *v67;
        v168 = v170;
        if (v170) {
          uint64_t v82 = (char *)v170 + 8;
        }
        uint64_t v83 = (re *)re::NetworkSystem::queueWaitForParentEntity(v80, v81, (uint64_t *)&v168);
        if (v168)
        {

          v168 = 0;
        }
        uint64_t v84 = *re::ecsNetworkLogObjects(v83);
        uint64_t EntityBoundTo = os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT);
        if (EntityBoundTo)
        {
          uint64_t Guid = RESyncableGetGuid();
          uint64_t v86 = *((void *)v170 + 35);
          uint64_t v87 = *v67;
          *(_DWORD *)unint64_t v171 = 134218499;
          *(void *)&v171[4] = Guid;
          *(_WORD *)&v171[12] = 2081;
          *(void *)&v171[14] = v86;
          __int16 v172 = 2048;
          uint64_t v173 = v87;
          _os_log_impl(&dword_233120000, v84, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Entity (guid=%llu name=%{private}s) unable to find parent %llu. Postpone binding with parent.", v171, 0x20u);
        }
        goto LABEL_101;
      }
      unint64_t v72 = v170;
      uint64_t v73 = v170;
      do
      {
        unint64_t v74 = v73;
        uint64_t v73 = (re::ecs2::Entity *)*((void *)v73 + 3);
      }
      while (v73);
      if (!*((void *)v74 + 2)) {
        goto LABEL_73;
      }
      unint64_t v75 = v169;
      do
      {
        uint64_t v76 = v75;
        unint64_t v75 = (re::ecs2::Entity *)*((void *)v75 + 3);
      }
      while (v75);
      if (*((void *)v76 + 2))
      {
LABEL_73:
        re::ecs2::NetworkReceiveSystem::setEntityParent(v170, v169, v70);
LABEL_100:

LABEL_101:
        if (v170) {

        }
        goto LABEL_103;
      }
      if (*(void *)buf)
      {
        char v88 = buf[16];
        if (buf[16])
        {
          if ((unint64_t)(*(void *)&buf[8] - 8) < 0xFFFFFFFFFFFFFFF7)
          {
            unint64_t v89 = *(void *)&buf[8] + 1;
            unint64_t v90 = 16;
            goto LABEL_93;
          }
        }
        else if (*(void *)&buf[8] >= v178)
        {
          unint64_t v89 = *(void *)&buf[8] + 1;
          if (v178 < *(void *)&buf[8] + 1)
          {
            unint64_t v90 = 2 * v178;
LABEL_93:
            if (v90 <= v89) {
              unint64_t v91 = v89;
            }
            else {
              unint64_t v91 = v90;
            }
            re::DynamicOverflowArray<re::Pair<re::ecs2::Entity *,re::ecs2::Entity *,true>,8ul>::setCapacity(buf, v91);
            char v88 = buf[16];
          }
        }
      }
      else
      {
        re::DynamicOverflowArray<re::Pair<re::ecs2::Entity *,re::ecs2::Entity *,true>,8ul>::setCapacity(buf, *(void *)&buf[8] + 1);
        char v88 = buf[16] + 2;
        *(_DWORD *)&buf[16] += 2;
      }
      BOOL v92 = (v88 & 1) == 0;
      unint64_t v93 = (unint64_t *)v179[0];
      uint64_t v94 = *(void *)&buf[8];
      if (!v92) {
        unint64_t v93 = &v178;
      }
      uint64_t v95 = (re::ecs2::Entity **)&v93[2 * *(void *)&buf[8]];
      *uint64_t v95 = v72;
      v95[1] = v71;
      *(void *)&uint8_t buf[8] = v94 + 1;
      *(_DWORD *)&buf[16] += 2;
      goto LABEL_100;
    }
LABEL_103:
    uint64_t v62 = *(void *)(a2 + 184);
    if (*(_DWORD *)(a2 + 200) <= (v57 + 1)) {
      int v96 = v57 + 1;
    }
    else {
      int v96 = *(_DWORD *)(a2 + 200);
    }
    while (1)
    {
      uint64_t v61 = (v57 + 1);
      if (v96 - 1 == v57) {
        break;
      }
      LODWORD(v57) = v57 + 1;
      int v97 = v61;
      if ((*(_DWORD *)(v62 + 32 * v61 + 8) & 0x80000000) != 0) {
        goto LABEL_110;
      }
    }
    int v97 = v96;
LABEL_110:
    LODWORD(v57) = v97;
  }
  while (v56 != v97);
  uint64_t v60 = v166;
  if (*(void *)&buf[8])
  {
    uint64_t v98 = 0;
    unint64_t v99 = (buf[16] & 1) != 0 ? (re::ecs2::NetworkReceiveSystem **)&v178 : (re::ecs2::NetworkReceiveSystem **)v179[0];
    uint64_t v100 = &v99[2 * *(void *)&buf[8]];
    do
    {
      char v101 = 0;
      do
      {
        uint64_t v102 = v99[1];
        do
        {
          uint64_t v103 = v102;
          uint64_t v102 = (re::ecs2::NetworkReceiveSystem *)*((void *)v102 + 3);
        }
        while (v102);
        if (*((void *)v103 + 2))
        {
          re::ecs2::NetworkReceiveSystem::setEntityParent(*v99, v99[1], v66);
          *(_OWORD *)unint64_t v171 = *(_OWORD *)v99;
          *(_OWORD *)unint64_t v99 = *((_OWORD *)v100 - 1);
          *((_OWORD *)v100 - 1) = *(_OWORD *)v171;
          v100 -= 2;
          char v101 = 1;
        }
        else
        {
          v99 += 2;
        }
      }
      while (v99 != v100);
      ++v98;
      if (buf[16]) {
        unint64_t v99 = (re::ecs2::NetworkReceiveSystem **)&v178;
      }
      else {
        unint64_t v99 = (re::ecs2::NetworkReceiveSystem **)v179[0];
      }
    }
    while ((v101 & 1) != 0 && v99 != v100);
    while (v99 != v100)
    {
      v104 = *re::ecsNetworkLogObjects((re *)EntityBoundTo);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        long long v106 = v99[1];
        uint64_t v107 = *((void *)*v99 + 37);
        uint64_t v108 = *((void *)*v99 + 35);
        uint64_t v109 = *((void *)v106 + 37);
        uint64_t v110 = *((void *)v106 + 35);
        *(_DWORD *)unint64_t v171 = 134218755;
        *(void *)&v171[4] = v107;
        *(_WORD *)&v171[12] = 2081;
        *(void *)&v171[14] = v108;
        __int16 v172 = 2048;
        uint64_t v173 = v109;
        __int16 v174 = 2081;
        uint64_t v175 = v110;
        _os_log_impl(&dword_233120000, v104, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Entity %llu(%{private}s) in a scene reparented to %llu(%{private}s) not in a scene", v171, 0x2Au);
      }
      unint64_t v111 = *v99;
      long long v112 = v99[1];
      v99 += 2;
      re::ecs2::NetworkReceiveSystem::setEntityParent(v111, v112, v105);
    }
  }
LABEL_132:
  uint64_t v113 = *(void *)(a2 + 16);
  if (v113)
  {
    int v114 = *(re::ecs2::Entity ***)(a2 + 32);
    uint64_t v165 = &v114[v113];
    do
    {
      uint64_t v115 = *((void *)*v114 + 25);
      if (v115)
      {
        if (*(void *)(v115 + 32)) {
          uint64_t v116 = RESyncableGetGuid();
        }
        else {
          uint64_t v116 = 0;
        }
        uint64_t v118 = *(void *)(v60 + 152);
        *(void *)unint64_t v171 = v116;
        long long v119 = (re *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v118 + 2200, (uint64_t *)v171);
        if (v119)
        {
          uint64_t v120 = *((void *)v119 + 2);
          if (v120)
          {
            int v121 = (re::ecs2::NetworkReceiveSystem **)*((void *)v119 + 4);
            uint64_t v122 = 8 * v120;
            do
            {
              int v123 = *re::ecsNetworkLogObjects(v119);
              if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v125 = *((void *)*v121 + 35);
                uint64_t v126 = *((void *)*v114 + 35);
                *(_DWORD *)unint64_t v171 = 136381187;
                *(void *)&v171[4] = v125;
                *(_WORD *)&v171[12] = 2081;
                *(void *)&v171[14] = v126;
                __int16 v172 = 2048;
                uint64_t v173 = v116;
                _os_log_impl(&dword_233120000, v123, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Late binding entity %{private}s to parent %{private}s(guid=%llu)", v171, 0x20u);
              }
              long long v127 = *v121++;
              re::ecs2::NetworkReceiveSystem::setEntityParent(v127, *v114, v124);
              v122 -= 8;
            }
            while (v122);
          }
        }
        uint64_t v60 = v166;
        uint64_t EntityBoundTo = re::NetworkSystem::clearWaitListForParent(*(re::NetworkSystem **)(v166 + 152), v116);
      }
      else
      {
        int v117 = *re::ecsNetworkLogObjects((re *)EntityBoundTo);
        uint64_t EntityBoundTo = os_log_type_enabled(v117, OS_LOG_TYPE_INFO);
        if (EntityBoundTo)
        {
          *(_WORD *)unint64_t v171 = 0;
          _os_log_impl(&dword_233120000, v117, OS_LOG_TYPE_INFO, "[NetworkComponent] Entity arrived without network component.", v171, 2u);
        }
      }
      ++v114;
    }
    while (v114 != v165);
  }
  uint64_t v128 = *(void *)(v60 + 152);
  uint64_t v129 = *(unsigned int *)(v128 + 2232);
  if (v129)
  {
    uint64_t v130 = 0;
    uint64_t v131 = (int *)(*(void *)(v128 + 2216) + 8);
    while (1)
    {
      int v132 = *v131;
      v131 += 16;
      if (v132 < 0) {
        break;
      }
      if (v129 == ++v130)
      {
        LODWORD(v130) = *(_DWORD *)(v128 + 2232);
        break;
      }
    }
  }
  else
  {
    LODWORD(v130) = 0;
  }
  if (v129 != v130)
  {
    uint64_t v133 = v130;
    while (1)
    {
      v134 = (void *)(*(void *)(v128 + 2216) + (v133 << 6));
      uint64_t v135 = RESyncServiceFindSyncableWithGuid();
      v136 = (re *)re::ecs2::NetworkComponent::getEntityBoundTo(v135, (uint64_t *)&v170);
      v137 = v170;
      if (v170) {
        break;
      }
      if (*(_DWORD *)(v128 + 2232) <= (v130 + 1)) {
        int v138 = v130 + 1;
      }
      else {
        int v138 = *(_DWORD *)(v128 + 2232);
      }
      while (1)
      {
        uint64_t v133 = (v130 + 1);
        if (v138 - 1 == v130) {
          break;
        }
        LODWORD(v130) = v130 + 1;
        int v139 = v133;
        if ((*(_DWORD *)(*(void *)(v128 + 2216) + (v133 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_164;
        }
      }
      int v139 = v138;
LABEL_164:
      LODWORD(v130) = v139;
      if (v129 == v139) {
        goto LABEL_172;
      }
    }
    uint64_t v140 = v134[2];
    uint64_t v141 = v134[5];
    if (v141)
    {
      unint64_t v142 = (re::ecs2::NetworkReceiveSystem **)v134[7];
      uint64_t v143 = 8 * v141;
      do
      {
        unint64_t v144 = *re::ecsNetworkLogObjects(v136);
        if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v146 = *((void *)*v142 + 35);
          uint64_t v147 = *((void *)v137 + 35);
          *(_DWORD *)unint64_t v171 = 136381187;
          *(void *)&v171[4] = v146;
          *(_WORD *)&v171[12] = 2081;
          *(void *)&v171[14] = v147;
          __int16 v172 = 2048;
          uint64_t v173 = v140;
          _os_log_impl(&dword_233120000, v144, OS_LOG_TYPE_DEFAULT, "DOUBLE Late binding entity %{private}s to parent %{private}s(guid=%llu)", v171, 0x20u);
        }
        long long v148 = *v142++;
        re::ecs2::NetworkReceiveSystem::setEntityParent(v148, v137, v145);
        v143 -= 8;
      }
      while (v143);
    }
    re::NetworkSystem::clearWaitListForParent(*(re::NetworkSystem **)(v166 + 152), v140);
  }
LABEL_172:
  uint64_t v149 = *(unsigned int *)(a2 + 72);
  if (v149)
  {
    uint64_t v150 = 0;
    long long v151 = (int *)(*(void *)(a2 + 56) + 8);
    uint64_t v152 = v166;
    while (1)
    {
      int v153 = *v151;
      v151 += 6;
      if (v153 < 0) {
        break;
      }
      if (v149 == ++v150)
      {
        LODWORD(v150) = *(_DWORD *)(a2 + 72);
        break;
      }
    }
  }
  else
  {
    LODWORD(v150) = 0;
    uint64_t v152 = v166;
  }
  if (v149 != v150)
  {
    uint64_t v154 = v150;
    uint64_t v155 = *(void *)(a2 + 56);
    do
    {
      uint64_t v156 = *(void *)(v152 + 152);
      uint64_t v157 = *(void *)(v155 + 24 * v154 + 16);
      uint64_t v167 = v157;
      if (v157) {
        id v158 = (id)(v157 + 8);
      }
      re::NetworkSystem::removeEntityFromParentWaitlist(v156, &v167);
      if (v167)
      {

        uint64_t v167 = 0;
      }
      uint64_t v155 = *(void *)(a2 + 56);
      if (*(_DWORD *)(a2 + 72) <= (v150 + 1)) {
        int v159 = v150 + 1;
      }
      else {
        int v159 = *(_DWORD *)(a2 + 72);
      }
      while (1)
      {
        uint64_t v154 = (v150 + 1);
        if (v159 - 1 == v150) {
          break;
        }
        LODWORD(v150) = v150 + 1;
        int v160 = v154;
        if ((*(_DWORD *)(v155 + 24 * v154 + 8) & 0x80000000) != 0) {
          goto LABEL_191;
        }
      }
      int v160 = v159;
LABEL_191:
      LODWORD(v150) = v160;
    }
    while (v149 != v160);
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (*(void *)buf && (buf[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
  CFAbsoluteTime v162 = CFAbsoluteTimeGetCurrent() + *(double *)(a2 + 280);
  *(CFAbsoluteTime *)(a2 + 280) = v162;
  if (v162 > 0.05)
  {
    unint64_t v163 = *re::ecsNetworkLogObjects(v161);
    if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v164 = *(void *)(a2 + 288);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v164;
      _os_log_impl(&dword_233120000, v163, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processParentChanges for peer %llu", buf, 0xCu);
    }
    *(void *)(a2 + 280) = 0;
  }
}

void re::ecs2::NetworkReceiveSystem::processEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(double *)(a2 + 280) = *(double *)(a2 + 280) - CFAbsoluteTimeGetCurrent();
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(a2 + 32);
    uint64_t v6 = &v5[v4];
    do
    {
      uint64_t v7 = *v5;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(void *)(a1 + 152), *(void *)(a1 + 152));
      if ((*(unsigned char *)(v7 + 288) & 0x80) != 0)
      {
        do
          uint64_t v7 = *(void *)(v7 + 24);
        while (v7);
        re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(*(void *)(a1 + 152) + 1056, *(void *)(a1 + 152));
      }
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v8 = *(void *)(a2 + 104);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 120);
    uint64_t v10 = 8 * v8;
    do
    {
      v9 += 8;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(void *)(a1 + 152) + 88, *(void *)(a1 + 152));
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v11 = *(void *)(a2 + 144);
  if (v11)
  {
    unint64_t v12 = *(void **)(a2 + 160);
    uint64_t v13 = 8 * v11;
    do
    {
      unsigned int v14 = (void *)*v12;
      if (*(void *)(*v12 + 16))
      {
        if ((_UNKNOWN *)(*(uint64_t (**)(void))(*v14 + 40))(*v12) == re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
          re::ecs2::NetworkComponent::resolveViews((uint64_t)v14, 0);
        }
        re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(void *)(a1 + 152) + 352, *(void *)(a1 + 152));
        re::ecs2::Component::markDirty(v14);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  CFAbsoluteTime v16 = CFAbsoluteTimeGetCurrent() + *(double *)(a2 + 280);
  *(CFAbsoluteTime *)(a2 + 280) = v16;
  if (v16 > 0.05)
  {
    unint64_t v17 = *re::ecsNetworkLogObjects(v15);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a2 + 288);
      int v19 = 134217984;
      uint64_t v20 = v18;
      _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processEvents for peer %llu", (uint8_t *)&v19, 0xCu);
    }
    *(void *)(a2 + 280) = 0;
  }
}

void re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_180, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(v6 + 16);
          if (v8)
          {

            *(void *)(v6 + 16) = 0;
            unint64_t v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem19processLocalSessionEP13RESyncSession_block_invoke(_anonymous_namespace_ *a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  uint64_t v6 = (uint64_t *)*((void *)a1 + 4);
  uint64_t v123 = 0;
  long long v124 = "";
  memset(v106, 0, sizeof(v106));
  int v107 = 0;
  memset(v108, 0, sizeof(v108));
  uint64_t v109 = 0x7FFFFFFFLL;
  memset(v110, 0, sizeof(v110));
  memset(v112, 0, sizeof(v112));
  memset(v114, 0, sizeof(v114));
  uint64_t v115 = 0x7FFFFFFFLL;
  long long v116 = 0u;
  long long v117 = 0u;
  int v118 = 0;
  uint64_t v119 = 0x7FFFFFFFLL;
  uint64_t v122 = 0;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v7 = v6[23] + 456;
  int v111 = 0;
  int v113 = 0;
  v98[0] = a3;
  v98[1] = a4;
  int v101 = -1;
  char v102 = 0;
  uint64_t v103 = v7;
  uint64_t v105 = 0;
  unint64_t v99 = a3;
  uint64_t v100 = (unsigned __int8 *)&a4[(void)a3];
  uint64_t PeerID = RESyncParticipantGetPeerID();
  uint64_t v8 = v6[19];
  *(void *)buf = PeerID;
  uint64_t v87 = re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v8 + 2944, (uint64_t *)buf);
  uint64_t v88 = v87 + 200;
  uint64_t v96 = 0;
  re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v96);
  uint64_t v9 = v96;
  if (v96)
  {
    while (1)
    {
      if (v100 == (unsigned __int8 *)v99)
      {
        re::snapshot::Decoder::error(v98, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
        int v10 = 0;
        uint64_t v9 = v96;
      }
      else
      {
        int v10 = *(unsigned __int8 *)v99++;
      }
      re::ecs2::NetworkReceiveSystem::findEntity((re::ecs2::NetworkReceiveSystem *)&v95, v6[5], v9);
      if (v95)
      {
        BOOL v12 = 0;
        BOOL v13 = 1;
        unsigned int v14 = v95;
      }
      else
      {
        BOOL v13 = (v10 & 2) == 0;
        uint64_t v15 = re::ecs2::EntityFactory::instance(v11);
        re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v15, 4uLL, (re::ecs2::Entity **)buf);
        CFAbsoluteTime v16 = v95;
        unsigned int v14 = *(re::ecs2::Entity **)buf;
        uint64_t v95 = *(re::ecs2::Entity **)buf;
        if (v16)
        {

          unsigned int v14 = v95;
        }
        *((void *)v14 + 37) = v96;
        BOOL v12 = (v10 & 2) == 0;
      }
      uint64_t v17 = *((void *)v14 + 25);
      if (!v17)
      {
        BOOL v18 = v13;
        (*(void (**)(unsigned char *__return_ptr))(*(void *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                    + 32))(buf);
        uint64_t v17 = *(void *)buf;
        *(unsigned char *)(*(void *)buf + 48) = 2;
        *(void *)(v17 + 56) = v6[19];
        IncomingSyncable = (re *)RESyncServiceCreateIncomingSyncable();
        if (*(re **)(v17 + 32) != IncomingSyncable) {
          RESyncableRefRetainer::reset((uint64_t *)(v17 + 32), (uint64_t)IncomingSyncable);
        }
        if (IncomingSyncable) {
          RESyncRelease();
        }
        re::ecs2::NetworkComponent::bindEntityTo(IncomingSyncable, (uint64_t)v95);
        uint64_t v94 = v17;
        re::ecs2::EntityComponentCollection::add((uint64_t)v95 + 32, &v94, 1);
        if (v94)
        {

          uint64_t v94 = 0;
        }
        re::DynamicOverflowArray<unsigned long long,2ul>::add((_anonymous_namespace_ *)(v17 + 64), &PeerID);
        *(void *)buf = *((void *)v95 + 37);
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v88, (uint64_t *)buf);
        re::ecs2::NetworkComponent::resolveViews(v17, 0);
        unsigned int v14 = v95;
        BOOL v13 = v18;
      }
      uint64_t v20 = *((void *)v14 + 3);
      if (!v20 || (*(unsigned char *)(v20 + 288) & 0x80) != 0) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = *(void *)(v20 + 296);
      }
      BOOL v22 = v10 != 0;
      if (v10)
      {
        BOOL v89 = v13;
        *(unsigned char *)(v17 + 48) |= 2u;
        if (v100 == (unsigned __int8 *)v99)
        {
          re::snapshot::Decoder::error(v98, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
          int v23 = 0;
          unsigned int v14 = v95;
        }
        else
        {
          int v23 = *(unsigned __int8 *)v99++;
        }
        if (v23 != ((*((_DWORD *)v14 + 72) >> 3) & 1)) {
          re::ecs2::Entity::setSelfEnabled(v14, v23 != 0);
        }
        uint64_t v93 = 0;
        re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v93);
        if (*(unsigned char *)(v17 + 617) == 0 || v93 != 0) {
          uint64_t v21 = v93;
        }
        if (v100 == (unsigned __int8 *)v99)
        {
          re::snapshot::Decoder::error(v98, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
          int v24 = 2;
        }
        else
        {
          int v24 = *(unsigned __int8 *)v99++;
        }
        if (v24 != *(unsigned __int8 *)(v17 + 560))
        {
          *(unsigned char *)(v17 + 560) = v24;
          id v25 = (id)(v17 + 8);
          *(void *)buf = v17;
          re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(&v112[1], buf);
          if (*(void *)buf) {
        }
          }
        unint64_t v125 = 0;
        uint64_t v126 = "";
        *(void *)buf = v123 & 1;
        *(void *)&uint8_t buf[8] = v124;
        uint64_t v123 = 0;
        long long v124 = "";
        re::StringID::destroyString((re::StringID *)buf);
        re::StringID::destroyString((re::StringID *)&v125);
        unint64_t v127 = 0;
        BOOL v26 = re::snapshot::DecoderRaw::beginString((re::snapshot::DecoderRaw *)v98, &v127);
        if (v26)
        {
          size_t v27 = v127;
          uint64_t v28 = v99;
          unint64_t v29 = v100 - (unsigned __int8 *)v99;
          if (v100 - (unsigned __int8 *)v99 >= v127) {
            unint64_t v29 = v127;
          }
          v99 += v29;
          unint64_t v125 = 0;
          uint64_t v126 = "";
          uint64_t v30 = v125;
          int v31 = v126;
          unint64_t v32 = v125 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v125 = 0;
          uint64_t v126 = "";
          *(void *)buf = v32;
          *(void *)&uint8_t buf[8] = "";
          uint64_t v123 = v30;
          long long v124 = v31;
          re::StringID::destroyString((re::StringID *)buf);
          re::StringID::destroyString((re::StringID *)&v125);
        }
        else
        {
          uint64_t v30 = 0;
          int v31 = "";
        }
        uint64_t v33 = v95;
        if ((*((void *)v95 + 34) ^ (unint64_t)v30) > 1
          || (CFAbsoluteTime v34 = (const char *)*((void *)v95 + 35), v31 != v34) && strcmp(v31, v34))
        {
          re::StringID::operator=((unint64_t *)v33 + 34, &v123);
        }
        if (kdebug_is_enabled())
        {
          re::packCharArrayToUInt64ForAriadne(*((re **)v95 + 35), 0);
          kdebug_trace();
        }
        if (!v89 || !v12)
        {
          if (v89) {
            uint64_t v35 = v110;
          }
          else {
            uint64_t v35 = v106;
          }
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v35, (uint64_t *)&v95);
        }
      }
      if (v12) {
        goto LABEL_65;
      }
      uint64_t v36 = v95;
      uint64_t v37 = *((void *)v95 + 3);
      if (v37)
      {
        if ((*(unsigned char *)(v37 + 288) & 0x80) == 0) {
          break;
        }
      }
      if (v21) {
        goto LABEL_58;
      }
LABEL_65:
      unint64_t v125 = 0;
      re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v125);
      for (unint64_t i = v125; v125; unint64_t i = v125)
      {
        uint64_t v45 = v6[19];
        if (!v12)
        {
          uint64_t v46 = (re *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v45 + 2760, i);
          if (v46)
          {
            uint64_t v47 = *(const re::ecs2::ComponentTypeBase **)v46;
            if (*(void *)v46)
            {
              unint64_t v48 = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v95 + 32), v47);
              if (!v48)
              {
                (*(void (**)(unsigned char *__return_ptr, const re::ecs2::ComponentTypeBase *))(*(void *)v47 + 32))(buf, v47);
                unint64_t v48 = *(void **)buf;
                uint64_t v49 = RESyncServiceCreateIncomingSyncable();
                MEMORY[0x237DBC0E0](v49, *(void *)(v17 + 32));
                uint64_t v92 = v49;
                re::ecs2::NetworkComponent::bindComponentToSyncable(v17, *(uint64_t *)buf, &v92);
                if (v49)
                {
                  RESyncRelease();
                  uint64_t v92 = 0;
                }
                uint64_t v91 = *(void *)buf;
                *(void *)buf = 0;
                re::ecs2::EntityComponentCollection::add((uint64_t)v95 + 32, &v91, 1);
                if (v91)
                {

                  uint64_t v91 = 0;
                }
                re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v6[19] + 264, v6[19]);
                if (*(void *)buf) {
              }
                }
              uint64_t v50 = re::NetworkSystem::decodeComponent(v6[19], (re::snapshot::Decoder *)v98, v48);
              if (v50)
              {
                __int16 v51 = (re::ecs2::Entity *)v48[2];
                if (v51) {
                  re::ecs2::Entity::updateAfterComponentDeserialized(v51, (const re::ecs2::Component *)v48);
                }
                *(void *)buf = v48;
                uint64_t v52 = v48 + 1;
                re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(&v112[1], buf);
                if (*(void *)buf) {

                }
                uint64_t v53 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(void *))(*v48 + 40))(v48);
                re::ecs2::NetworkComponentInfo::markDirty((re::ecs2::NetworkComponentInfo *)(v17 + 112), v53, 2);
                BOOL v22 = 1;
              }
              else
              {
                uint64_t v55 = *re::ecsNetworkLogObjects((re *)v50);
                if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v56 = *((void *)v47 + 4);
                  uint64_t v57 = *((void *)v95 + 37);
                  uint64_t v58 = *((void *)v95 + 35);
                  *(_DWORD *)buf = 136381187;
                  *(void *)&uint8_t buf[4] = v56;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v57;
                  __int16 v129 = 2081;
                  uint64_t v130 = v58;
                  _os_log_error_impl(&dword_233120000, v55, OS_LOG_TYPE_ERROR, "[NetworkComponent] failed to decode component %{private}s on entity (id = %llu, name = %{private}s", buf, 0x20u);
                }
              }
              goto LABEL_86;
            }
          }
          unint64_t v54 = *re::ecsNetworkLogObjects(v46);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            *(void *)&uint8_t buf[4] = v125;
            _os_log_impl(&dword_233120000, v54, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Unknown component type %llx. Skipping...", buf, 0xCu);
          }
          uint64_t v45 = v6[19];
        }
        re::NetworkSystem::decodeComponent(v45, (re::snapshot::Decoder *)v98, 0);
LABEL_86:
        unint64_t v125 = 0;
        re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v125);
      }
      if (v22)
      {
        uint64_t v59 = v6[19];
        uint64_t v90 = v17;
        if (v17) {
          id v60 = (id)(v17 + 8);
        }
        re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v59 + 2632, &v90);
        if (v90)
        {

          uint64_t v90 = 0;
        }
      }
      do
      {
        while (1)
        {
          unint64_t v125 = 0;
          re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v125);
          if (!v125 || v12) {
            break;
          }
          uint64_t v61 = (re *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v6[19] + 2760, v125);
          if (v61 && (uint64_t v62 = *(const re::ecs2::ComponentTypeBase **)v61) != 0)
          {
            uint64_t v63 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v95 + 32), v62);
            if (v63)
            {
              uint64_t v64 = v63;
              re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v6[19] + 440, v6[19]);
              uint64_t v65 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(uint64_t))(*(void *)v64 + 40))(v64);
              uint64_t v66 = re::ecs2::NetworkComponentInfo::get((re::ecs2::NetworkComponentInfo *)(v17 + 112), v65);
              re::ecs2::NetworkComponent::unbindComponentFromSyncable(v17, v64, v66);
              re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)v95 + 32), v62);
            }
            else
            {
              uint64_t v68 = *re::ecsNetworkLogObjects(0);
              if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v69 = *((void *)v95 + 35);
                uint64_t v70 = *((void *)v95 + 37);
                uint64_t v71 = *((void *)v62 + 4);
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = v69;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v70;
                __int16 v129 = 2080;
                uint64_t v130 = v71;
                _os_log_impl(&dword_233120000, v68, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] entity %s(%llu)doesn't have a %s component to remove.", buf, 0x20u);
              }
            }
          }
          else
          {
            uint64_t v67 = *re::ecsNetworkLogObjects(v61);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              *(void *)&uint8_t buf[4] = v125;
              _os_log_impl(&dword_233120000, v67, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] unknown component type hash during local sync: %llu", buf, 0xCu);
            }
          }
        }
      }
      while (v125);
      if (v95) {

      }
      uint64_t v96 = 0;
      re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v96);
      uint64_t v9 = v96;
      if (!v96) {
        goto LABEL_115;
      }
    }
    if (v21 == *(void *)(v37 + 296)) {
      goto LABEL_65;
    }
LABEL_58:
    unint64_t v125 = *((void *)v95 + 37);
    unint64_t v38 = v125;
    *(void *)buf = v95;
    unint64_t v39 = (char *)v95 + 8;
    *(void *)&uint8_t buf[8] = v21;
    unint64_t v40 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) >> 27));
    unint64_t v41 = v40 ^ (v40 >> 31);
    if ((void)v116)
    {
      unint64_t v42 = v41 % DWORD2(v117);
      uint64_t v43 = *(unsigned int *)(*((void *)&v116 + 1) + 4 * v42);
      if (v43 != 0x7FFFFFFF)
      {
        if (*(void *)(v117 + 40 * v43 + 16) == v38)
        {
LABEL_64:

          goto LABEL_65;
        }
        while (1)
        {
          LODWORD(v43) = *(_DWORD *)(v117 + 40 * v43 + 8) & 0x7FFFFFFF;
          if (v43 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v117 + 40 * v43 + 16) == v38)
          {
            if (!v36) {
              goto LABEL_65;
            }
            goto LABEL_64;
          }
        }
      }
    }
    else
    {
      LODWORD(v42) = 0;
    }
    re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v116, v42, v41, &v125, buf);
    ++HIDWORD(v119);
    uint64_t v36 = *(re::ecs2::Entity **)buf;
    if (!*(void *)buf) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_115:
  re::ecs2::NetworkReceiveSystem::processCreatedEntities((uint64_t)v6, (uint64_t)v106);
  re::ecs2::NetworkReceiveSystem::processParentChanges((uint64_t)v6, (uint64_t)v106);
  re::ecs2::NetworkReceiveSystem::processEvents((uint64_t)v6, (uint64_t)v106);
  *(void *)buf = 0;
  re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, buf);
  for (uint64_t j = *(void *)buf; *(void *)buf; uint64_t j = *(void *)buf)
  {
    re::ecs2::NetworkReceiveSystem::findEntity((re::ecs2::NetworkReceiveSystem *)&v125, v6[5], j);
    unint64_t v74 = v125;
    if (v125)
    {
      uint64_t v75 = *(void *)(v125 + 200);
      if (v75)
      {
        if (*(unsigned char *)(v75 + 176)) {
          uint64_t v76 = (void *)(v75 + 184);
        }
        else {
          uint64_t v76 = *(void **)(v75 + 192);
        }
        uint64_t v77 = *(void *)(v75 + 168);
        if (v77)
        {
          uint64_t v78 = 8 * v77;
          do
          {
            if (*v76) {
              RESyncableSetUserData();
            }
            ++v76;
            v78 -= 8;
          }
          while (v78);
        }
        re::ecs2::NetworkComponentInfo::clearAll(v75 + 112);
        RESyncableSetUserData();
      }
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v6[19] + 176, v6[19]);
      if ((*(unsigned char *)(v74 + 288) & 0x80) != 0)
      {
        unint64_t v79 = v74;
        do
          unint64_t v79 = *(void *)(v79 + 24);
        while (v79);
        re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(v6[19] + 1144, v6[19]);
      }
      if (v87) {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v88, (uint64_t *)buf);
      }
      re::ecs2::Entity::removeFromSceneOrParent((re::ecs2::Entity *)v74);
      if (kdebug_is_enabled())
      {
        re::packCharArrayToUInt64ForAriadne(*(re **)(v74 + 280), 0);
        kdebug_trace();
      }
    }
    else if (kdebug_is_enabled())
    {
      re::packCharArrayToUInt64ForAriadne((re *)"<none>", 0);
      kdebug_trace();
    }
    *(void *)buf = 0;
    re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, buf);
  }
  uint64_t v80 = re::internal::enableSignposts(0, 0);
  if (v80) {
    uint64_t v80 = kdebug_trace();
  }
  uint64_t isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v80);
  if (isStatisticCollectionEnabled)
  {
    uint64_t isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
    uint64_t v82 = *(void *)(isStatisticCollectionEnabled + 152);
    if (v82)
    {
      *(void *)(v82 + 3072) = 0;
      ++*(void *)(v82 + 3096);
      *(unsigned char *)(isStatisticCollectionEnabled + 184) = 0;
    }
  }
  uint64_t v83 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
  if (v83)
  {
    uint64_t v84 = re::profilerThreadContext(v83);
    uint64_t v85 = *(void *)(v84 + 152);
    if (v85)
    {
      *(void *)(v85 + 2944) = 0;
      ++*(void *)(v85 + 2968);
      *(unsigned char *)(v84 + 184) = 0;
    }
  }
  re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v116);
  re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)&v114[8]);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v112[1]);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v110);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)&v108[8]);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v106);
  re::StringID::destroyString((re::StringID *)&v123);
  return 1;
}

uint64_t *re::snapshot::DecoderRaw::operator>><unsigned long long>(uint64_t *result, void *a2)
{
  uint64_t v2 = (void *)result[2];
  unint64_t v3 = result[3] - (void)v2;
  if (v3 <= 7) {
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v3);
  }
  *a2 = *v2;
  result[2] += 8;
  return result;
}

void re::ecs2::NetworkReceiveSystem::findEntity(re::ecs2::NetworkReceiveSystem *this, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6)
  {
LABEL_14:
    *(void *)this = 0;
    goto LABEL_17;
  }
  uint64_t v7 = *(uint64_t **)(v5 + 40);
  uint64_t v8 = 8 * v6;
  while (1)
  {
    uint64_t v9 = *v7;
    if (*v7) {
      id v10 = (id)(v9 + 8);
    }
    uint64_t v14 = a3;
    uint64_t v11 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v9 + 152, &v14);
    if (v11) {
      uint64_t v12 = *(void *)(v11 + 8);
    }
    else {
      uint64_t v12 = *(void *)(*(void *)(v9 + 104) + 296) == v14 ? *(void *)(v9 + 104) : 0;
    }
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v13, v12);
    if (v13) {
      break;
    }
    if (v9) {

    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      goto LABEL_14;
    }
  }
  *(void *)this = v13;
  uint64_t v13 = 0;
  if (v9)
  {

LABEL_17:
    if (v13) {
  }
    }
}

uint64_t re::ecs2::NetworkComponent::bindEntityTo(re *a1, uint64_t a2)
{
  unint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 8, 8);
  if (a2) {
    uint64_t v5 = (void *)(a2 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  objc_initWeak(v4, v5);
  return RESyncableSetUserData();
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,2ul>::add(_anonymous_namespace_ *result, void *a2)
{
  unint64_t v3 = result;
  if (!*(void *)result)
  {
    unint64_t v10 = *((void *)v3 + 1) + 1;
    __n128 result = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v10);
    int v11 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v11;
    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v12 = (void *)((char *)v3 + 24);
    goto LABEL_19;
  }
  unint64_t v4 = *((void *)result + 1);
  int v5 = *((_DWORD *)result + 4);
  if ((v5 & 1) == 0)
  {
    unint64_t v6 = *((void *)result + 3);
    BOOL v8 = v4 >= v6;
    unint64_t v7 = v4 + 1;
    BOOL v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      unint64_t v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  unint64_t v7 = v4 + 1;
  if (v7 < 3)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  unint64_t v9 = 4;
LABEL_14:
  if (v9 <= v7) {
    unint64_t v13 = v7;
  }
  else {
    unint64_t v13 = v9;
  }
  __n128 result = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(result, v13);
  if (*((_DWORD *)v3 + 4)) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v12 = (void *)*((void *)v3 + 4);
LABEL_19:
  uint64_t v14 = *((void *)v3 + 1);
  v12[v14] = *a2;
  *((void *)v3 + 1) = v14 + 1;
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

void re::ecs2::NetworkComponent::resolveViews(uint64_t a1, uint64_t a2)
{
  if (a2 || (uint64_t v4 = *(void *)(a1 + 56)) == 0)
  {
    if (re::ecs2::NetworkComponent::resolveSelfView(a1, a2))
    {
      re::ecs2::NetworkComponent::resolveChildEntityViews(a1, a2);
    }
  }
  else
  {
    uint64_t v6 = a1;
    id v5 = (id)(a1 + 8);
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v4 + 2712, &v6);
    if (v6) {
  }
    }
}

uint64_t re::ecs2::NetworkComponent::bindComponentToSyncable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  if (*a3) {
    RESyncRetain();
  }
  uint64_t v6 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  unsigned int v7 = v6[8];
  uint64_t v8 = *(unsigned __int16 *)(a1 + 114);
  if (!*(_WORD *)(a1 + 114)) {
    goto LABEL_14;
  }
  unint64_t v9 = v6;
  unint64_t v10 = *(int16x8_t **)(a1 + 120);
  int16x8_t v11 = vdupq_n_s16(v7);
  int v12 = 1;
  while (1)
  {
    uint16x8_t v13 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v11, *v10), (int8x16_t)xmmword_23436BBD0);
    v13.i16[0] = vmaxvq_u16(v13);
    if (v13.i32[0]) {
      break;
    }
    v12 -= 8;
    ++v10;
    if (!--v8) {
      goto LABEL_14;
    }
  }
  unint64_t v14 = v13.u16[0] - v12;
  if ((int)v14 >= *(unsigned __int16 *)(a1 + 112))
  {
LABEL_14:
    BOOL v18 = re::ecs2::PackedTypeIDs::ensureCapacity((unsigned __int16 *)(a1 + 112), *(unsigned __int16 *)(a1 + 112) + 1);
    uint64_t v19 = *(void *)(a1 + 160);
    *(_WORD *)(*(void *)(a1 + 120) + 2 * *(unsigned __int16 *)(a1 + 112)) = v7;
    unsigned __int16 v20 = *(_WORD *)(a1 + 112) + 1;
    *(_WORD *)(a1 + 112) = v20;
    *(_WORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = (v20 + 7) >> 3;
    if (v19)
    {
      unint64_t v21 = *(void *)(a1 + 168);
      int v22 = *(_DWORD *)(a1 + 176);
      if (v22)
      {
        if (v21 - 16 < 0xFFFFFFFFFFFFFFEFLL)
        {
          unint64_t v24 = v21 + 1;
          unint64_t v25 = 32;
          goto LABEL_22;
        }
      }
      else
      {
        unint64_t v23 = *(void *)(a1 + 184);
        if (v21 >= v23)
        {
          unint64_t v24 = v21 + 1;
          if (v23 < v24)
          {
            unint64_t v25 = 2 * v23;
LABEL_22:
            if (v25 <= v24) {
              unint64_t v27 = v24;
            }
            else {
              unint64_t v27 = v25;
            }
            re::DynamicOverflowArray<RESyncableRefRetainer,16ul>::setCapacity((uint64_t *)(a1 + 160), v27);
            int v22 = *(_DWORD *)(a1 + 176);
          }
        }
      }
    }
    else
    {
      unint64_t v26 = *(void *)(a1 + 168) + 1;
      re::DynamicOverflowArray<RESyncableRefRetainer,16ul>::setCapacity((uint64_t *)(a1 + 160), v26);
      int v22 = *(_DWORD *)(a1 + 176) + 2;
      *(_DWORD *)(a1 + 176) = v22;
    }
    if (v22) {
      uint64_t v28 = a1 + 184;
    }
    else {
      uint64_t v28 = *(void *)(a1 + 192);
    }
    uint64_t v29 = *(void *)(a1 + 168);
    *(void *)(v28 + 8 * v29) = v5;
    *(void *)(a1 + 168) = v29 + 1;
    *(_DWORD *)(a1 + 176) += 2;
    unint64_t v30 = *(unsigned __int16 *)(a1 + 112);
    unint64_t v31 = *(void *)(a1 + 352);
    if ((v30 & 0x3F) != 0) {
      unint64_t v32 = (v30 >> 6) + 1;
    }
    else {
      unint64_t v32 = v30 >> 6;
    }
    *(void *)(a1 + 352) = v30;
    *(void *)buf = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 312), v32, buf);
    if (v30 && v31 > v30)
    {
      uint64_t v33 = 63;
      uint64_t v34 = *(void *)(a1 + 352) & 0x3FLL;
      if (v34 && v34 != 63) {
        uint64_t v33 = ~(-1 << v34);
      }
      if (*(unsigned char *)(a1 + 328)) {
        uint64_t v35 = a1 + 336;
      }
      else {
        uint64_t v35 = *(void *)(a1 + 344);
      }
      *(void *)(v35 + 8 * *(void *)(a1 + 320) - 8) &= v33;
    }
    unint64_t v36 = *(unsigned __int16 *)(a1 + 112);
    unint64_t v37 = *(void *)(a1 + 400);
    if ((v36 & 0x3F) != 0) {
      unint64_t v38 = (v36 >> 6) + 1;
    }
    else {
      unint64_t v38 = v36 >> 6;
    }
    *(void *)(a1 + 400) = v36;
    *(void *)buf = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 360), v38, buf);
    if (v36 && v37 > v36)
    {
      uint64_t v39 = 63;
      uint64_t v40 = *(void *)(a1 + 400) & 0x3FLL;
      if (v40 && v40 != 63) {
        uint64_t v39 = ~(-1 << v40);
      }
      if (*(unsigned char *)(a1 + 376)) {
        uint64_t v41 = a1 + 384;
      }
      else {
        uint64_t v41 = *(void *)(a1 + 392);
      }
      *(void *)(v41 + 8 * *(void *)(a1 + 368) - 8) &= v39;
    }
    goto LABEL_53;
  }
  uint64_t v15 = *re::ecsNetworkLogObjects((re *)v6);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *((void *)v9 + 4);
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] component of type %s is already in component info table.  Re-binding?", buf, 0xCu);
  }
  if (*(void *)(a1 + 168) <= v14)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 176)) {
    uint64_t v17 = a1 + 184;
  }
  else {
    uint64_t v17 = *(void *)(a1 + 192);
  }
  uint64_t v46 = *(void *)(v17 + 8 * v14);
  *(void *)(v17 + 8 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = v5;
  if (v46) {
    RESyncRelease();
  }
LABEL_53:
  *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) + 16);
  unint64_t v42 = (re *)re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove(a1 + 512, (unsigned __int16 *)buf);
  uint64_t v43 = re::globalAllocators(v42);
  int v44 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43[2] + 32))(v43[2], 8, 8);
  objc_initWeak(v44, (id)(a2 + 8));
  return RESyncableSetUserData();
}

void re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(a1 + 32) + 32 * v5 + 24))(a2) == 1) {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v5);
      }
      else {
        ++v5;
      }
    }
    while (v5 < *(void *)(a1 + 16));
    int v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3) {
    re::Event<re::GeometricObjectBase>::doDeferredActions((_anonymous_namespace_ *)a1);
  }
}

void re::ecs2::NetworkComponent::unbindComponentFromSyncable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    RESyncableSetUserData();
  }
  unint64_t v5 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  re::ecs2::NetworkComponentInfo::remove((re::ecs2::NetworkComponentInfo *)(a1 + 112), v5);
}

uint64_t re::ecs2::NetworkComponentInfo::clearAll(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_WORD *)(this + 2))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 16 * *(unsigned __int16 *)(this + 2);
    *(void *)&long long v4 = -1;
    *((void *)&v4 + 1) = -1;
    do
    {
      *(_OWORD *)(*(void *)(this + 8) + v2) = v4;
      v2 += 16;
    }
    while (v3 != v2);
  }
  *(_DWORD *)this = 0;
  uint64_t v5 = *(void *)(this + 56);
  *(void *)(this + 56) = 0;
  int v6 = *(_DWORD *)(this + 64);
  if (v6)
  {
    unsigned int v7 = (uint64_t *)(this + 72);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v7 = *(uint64_t **)(this + 80);
    if (!v5) {
      goto LABEL_13;
    }
  }
  uint64_t v8 = 8 * v5;
  do
  {
    this = *v7;
    if (*v7)
    {
      this = RESyncRelease();
      *unsigned int v7 = 0;
    }
    ++v7;
    v8 -= 8;
  }
  while (v8);
  int v6 = *(_DWORD *)(v1 + 64);
LABEL_13:
  *(_DWORD *)(v1 + 64) = v6 + 2;
  int v9 = *(_DWORD *)(v1 + 216);
  if (v9) {
    unint64_t v10 = (void *)(v1 + 224);
  }
  else {
    unint64_t v10 = *(void **)(v1 + 232);
  }
  uint64_t v11 = *(void *)(v1 + 208);
  while (1)
  {
    uint64_t v12 = v1 + 224;
    if ((v9 & 1) == 0) {
      uint64_t v12 = *(void *)(v1 + 232);
    }
    if (v10 == (void *)(v12 + 8 * v11)) {
      break;
    }
    *v10++ = 0;
    int v9 = *(_DWORD *)(v1 + 216);
  }
  int v13 = *(_DWORD *)(v1 + 264);
  if (v13) {
    unint64_t v14 = (void *)(v1 + 272);
  }
  else {
    unint64_t v14 = *(void **)(v1 + 280);
  }
  uint64_t v15 = *(void *)(v1 + 256);
  while (1)
  {
    uint64_t v16 = v1 + 272;
    if ((v13 & 1) == 0) {
      uint64_t v16 = *(void *)(v1 + 280);
    }
    if (v14 == (void *)(v16 + 8 * v15)) {
      break;
    }
    *v14++ = 0;
    int v13 = *(_DWORD *)(v1 + 264);
  }
  return this;
}

void re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(a1 + 32) + 32 * v5 + 24))(a2) == 1) {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v5);
      }
      else {
        ++v5;
      }
    }
    while (v5 < *(void *)(a1 + 16));
    int v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i != v6; ++i)
      {
        unint64_t v9 = *(void *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v23, 0, sizeof(v23));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v15 = 136315906;
          uint64_t v16 = "operator[]";
          __int16 v17 = 1024;
          int v18 = 789;
          __int16 v19 = 2048;
          unint64_t v20 = i;
          __int16 v21 = 2048;
          unint64_t v22 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v10 = *(void *)(a1 + 72) + v7;
        uint64_t v11 = *(void *)(v10 + 32);
        long long v12 = *(_OWORD *)(v10 + 16);
        v13[0] = *(_OWORD *)v10;
        v13[1] = v12;
        uint64_t v14 = v11;
        if (LOBYTE(v13[0]))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (void *)v13 + 1, (uint64_t)v23);
          if (!LOBYTE(v23[0])) {
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)a1, (uint64_t)v13 + 8);
          }
        }
        else
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (void *)v13 + 1, (uint64_t)v23);
          if (LOBYTE(v23[0])) {
            re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, *((unint64_t *)&v23[0] + 1));
          }
        }
        v7 += 40;
      }
    }
  }
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem13processCommitEPK12RESyncCommitRNS0_21NetworkReceiveContextE_block_invoke()
{
  if (RESyncReadContextIsDestroyed())
  {
    uint64_t Syncable = RESyncReadContextGetSyncable();
    re::ecs2::NetworkComponent::getEntityBoundTo(Syncable, &v8);
    uint64_t v1 = v8;
    if (v8)
    {
      uint64_t v2 = *(void *)(v8 + 200);
      if (v2)
      {
        uint64_t v3 = v2 + 112;
        if (*(unsigned char *)(v2 + 176)) {
          long long v4 = (void *)(v2 + 184);
        }
        else {
          long long v4 = *(void **)(v2 + 192);
        }
        uint64_t v5 = *(void *)(v2 + 168);
        if (v5)
        {
          uint64_t v6 = 8 * v5;
          do
          {
            if (*v4) {
              RESyncableSetUserData();
            }
            ++v4;
            v6 -= 8;
          }
          while (v6);
        }
        re::ecs2::NetworkComponentInfo::clearAll(v3);
      }
      RESyncableSetUserData();
    }
    else
    {
      RESyncableSetUserData();
    }
  }
  return 1;
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem25processComponentSnapshotsEPK12RESyncCommitRNS0_21NetworkReceiveContextE_block_invoke(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t Syncable = RESyncReadContextGetSyncable();
  if (RESyncReadContextIsNew())
  {
    re::ecs2::NetworkComponent::getComponentBoundTo((uint64_t)buf, Syncable);
    uint64_t v4 = *(void *)buf;
    if (*(void *)buf)
    {
LABEL_3:

      goto LABEL_4;
    }
    if (RESyncableGetTypeId() && (RESyncableIsOpaque() & 1) == 0 && (RESyncableIsDestroyed() & 1) == 0)
    {
      uint64_t v9 = *(void *)(v2 + 152);
      unint64_t TypeId = RESyncableGetTypeId();
      uint64_t v11 = (re *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v9 + 2760, TypeId);
      if (v11 && (long long v12 = *(const re::ecs2::ComponentTypeBase **)v11) != 0)
      {
        uint64_t Parent = RESyncableGetParent();
        uint64_t EntityBoundTo = (re *)re::ecs2::NetworkComponent::getEntityBoundTo(Parent, (uint64_t *)&v59);
        if (v59)
        {
          int v15 = (re::ecs2::EntityComponentCollection *)(v59 + 4);
          uint64_t v16 = v59[25];
          if (v16) {
            id v17 = (id)(v16 + 8);
          }
          uint64_t v18 = v16;
          if (v12 != (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
          {
            re::ecs2::EntityComponentCollection::remove(v15, v12);
            (*(void (**)(unsigned char *__return_ptr, const re::ecs2::ComponentTypeBase *))(*(void *)v12 + 32))(buf, v12);
            uint64_t v18 = *(void *)buf;
            *(void *)buf = v16;
            if (v16) {
          }
            }
          *(void *)buf = Syncable;
          if (Syncable)
          {
            RESyncRetain();
            re::ecs2::NetworkComponent::bindComponentToSyncable(v16, v18, (uint64_t *)buf);
            RESyncRelease();
            *(void *)buf = 0;
          }
          else
          {
            re::ecs2::NetworkComponent::bindComponentToSyncable(v16, v18, (uint64_t *)buf);
          }
          if (v16 != v18)
          {
            uint64_t v58 = v18;
            if (v18) {
              id v56 = (id)(v18 + 8);
            }
            re::ecs2::EntityComponentCollection::add((uint64_t)v15, &v58, 1);
            if (v58)
            {

              uint64_t v58 = 0;
            }
          }
          re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(void *)(v2 + 152) + 264, *(void *)(v2 + 152));
          if (v18) {
        }
          }
        else
        {
          uint64_t v52 = *re::ecsNetworkLogObjects(EntityBoundTo);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            uint64_t Guid = RESyncableGetGuid();
            uint64_t v54 = RESyncableGetTypeId();
            RESyncableGetTypeInfo();
            uint64_t DebugName = RESyncSyncableTypeInfoGetDebugName();
            *(_DWORD *)buf = 134218755;
            *(void *)&uint8_t buf[4] = Guid;
            __int16 v61 = 2048;
            uint64_t v62 = v54;
            __int16 v63 = 2081;
            uint64_t v64 = DebugName;
            __int16 v65 = 2048;
            uint64_t v66 = Parent;
            _os_log_error_impl(&dword_233120000, v52, OS_LOG_TYPE_ERROR, "[NetworkComponent] Cannot find component's entity (guid=%llu, typeID=%llu, type=%{private}s, entity=%p).", buf, 0x2Au);
          }
        }
        uint64_t v4 = (uint64_t)v59;
        if (v59) {
          goto LABEL_3;
        }
      }
      else
      {
        long long v50 = *re::ecsNetworkLogObjects(v11);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          uint64_t v51 = RESyncableGetTypeId();
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v51;
          _os_log_error_impl(&dword_233120000, v50, OS_LOG_TYPE_ERROR, "[NetworkComponent] Unknown component type hash (%llu)", buf, 0xCu);
        }
      }
    }
  }
LABEL_4:
  re::ecs2::NetworkComponent::getComponentBoundTo((uint64_t)&v59, Syncable);
  uint64_t v5 = (re::ecs2::Component *)v59;
  if (!v59) {
    return 1;
  }
  uint64_t v6 = RESyncableGetParent();
  if (!v6
    || (re::ecs2::NetworkComponent::getEntityBoundTo(v6, (uint64_t *)buf), !*(void *)buf)
    || ((id)(*(void *)buf + 8), (RESyncableIsOpaque() & 1) != 0))
  {
LABEL_80:

    return 1;
  }
  uint64_t IsDataChanged = RESyncReadContextIsDataChanged();
  if (!IsDataChanged) {
    goto LABEL_27;
  }
  uint64_t IsDataChanged = RESyncReadContextGetStateSize();
  if (!IsDataChanged) {
    goto LABEL_27;
  }
  uint64_t IsDataChanged = re::ecs2::IntrospectedNetworkTypeHelper::deserialize();
  if ((IsDataChanged & 1) == 0)
  {
    __int16 v19 = *re::ecsNetworkLogObjects((re *)IsDataChanged);
    uint64_t IsDataChanged = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (IsDataChanged)
    {
      RESyncableGetTypeInfo();
      uint64_t v57 = RESyncSyncableTypeInfoGetDebugName();
      *(_DWORD *)buf = 136380675;
      *(void *)&uint8_t buf[4] = v57;
      _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "[NetworkComponent] Failed to deserialize component of type '%{private}s'. Ignoring state update.", buf, 0xCu);
    }
LABEL_27:
    int v8 = 0;
    goto LABEL_28;
  }
  int v8 = 1;
LABEL_28:
  if (!*((void *)v5 + 2))
  {
    unint64_t v20 = *re::ecsNetworkLogObjects((re *)IsDataChanged);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = RESyncableGetGuid();
      uint64_t v22 = RESyncableGetGuid();
      int IsDestroyed = RESyncReadContextIsDestroyed();
      *(_DWORD *)buf = 134218496;
      *(void *)&uint8_t buf[4] = v21;
      __int16 v61 = 2048;
      uint64_t v62 = v22;
      __int16 v63 = 1024;
      LODWORD(v64) = IsDestroyed;
      _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "Received component: {id: %llu, parent: %llu: isDestroyed: %d} with no entity", buf, 0x1Cu);
    }
  }
  if ((_UNKNOWN *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)v5 + 40))(v5) != re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) {
    goto LABEL_32;
  }
  uint64_t v24 = re::internal::enableSignposts(0, 0);
  if (v24) {
    uint64_t v24 = kdebug_trace();
  }
  uint64_t v25 = *((void *)v5 + 5);
  if (v25 == 0x800000000)
  {
    uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v24);
    if (!isStatisticCollectionEnabled) {
      goto LABEL_32;
    }
    uint64_t v27 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v34 = *(void **)(v27 + 152);
    if (!v34) {
      goto LABEL_32;
    }
    unint64_t v35 = *((void *)v5 + 4);
    unint64_t v36 = v34[432];
    if (v36 >= v35) {
      unint64_t v36 = *((void *)v5 + 4);
    }
    v34[432] = v36;
    unint64_t v37 = v34[433];
    if (v37 <= v35) {
      unint64_t v37 = v35;
    }
    v34[433] = v37;
    v34[434] += v35;
    unint64_t v32 = v34 + 435;
  }
  else
  {
    if (v25 != 1) {
      goto LABEL_32;
    }
    unint64_t v26 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v24);
    if (!v26) {
      goto LABEL_32;
    }
    uint64_t v27 = re::profilerThreadContext(v26);
    uint64_t v28 = *(void **)(v27 + 152);
    if (!v28) {
      goto LABEL_32;
    }
    unint64_t v29 = *((void *)v5 + 4);
    unint64_t v30 = v28[424];
    if (v30 >= v29) {
      unint64_t v30 = *((void *)v5 + 4);
    }
    v28[424] = v30;
    unint64_t v31 = v28[425];
    if (v31 <= v29) {
      unint64_t v31 = v29;
    }
    v28[425] = v31;
    v28[426] += v29;
    unint64_t v32 = v28 + 427;
  }
  ++*v32;
  *(unsigned char *)(v27 + 184) = 0;
LABEL_32:
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    uint64_t v38 = (*(uint64_t (**)(re::ecs2::Component *))(*(void *)v5 + 40))(v5);
    re::packCharArrayToUInt64ForAriadne(*(re **)(v38 + 32), 0);
    RESyncReadContextGetStateSize();
    kdebug_trace();
  }
  if (re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    uint64_t v39 = *((void *)v5 + 2);
    uint64_t v40 = *(void *)(v39 + 200);
    if (v40)
    {
      int v41 = re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v39 + 200));
      if (v41)
      {
        int v42 = v41;
        uint64_t v43 = *(unsigned char *)(v40 + 560) ? "Remote" : "Local";
        int v44 = (re *)(*(unsigned char *)(v40 + 560) == 1 ? "Shared" : v43);
        re::packCharArrayToUInt64ForAriadne(v44, 0);
        if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
        {
          uint64_t v45 = (*(uint64_t (**)(re::ecs2::Component *))(*(void *)v5 + 40))(v5);
          re::packCharArrayToUInt64ForAriadne(*(re **)(v45 + 32), 0);
          if (v42 == 1) {
            uint64_t v46 = "Local";
          }
          else {
            uint64_t v46 = "Remote";
          }
          re::packCharArrayToUInt64ForAriadne((re *)v46, 0);
          kdebug_trace();
        }
      }
    }
  }
  ++*(void *)(*(void *)(a1 + 40) + 272);
  if (RESyncReadContextIsDestroyed())
  {
    if (*((void *)v5 + 2))
    {
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(void *)(v2 + 152) + 440, *(void *)(v2 + 152));
      uint64_t v47 = *(void *)(*((void *)v5 + 2) + 200);
      if (v47) {
        re::ecs2::NetworkComponent::unbindComponentFromSyncable(v47, (uint64_t)v5, Syncable);
      }
      else {
        RESyncableSetUserData();
      }
      re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(*((void *)v5 + 2) + 32), v5);
    }
    goto LABEL_80;
  }
  if (!v8) {
    goto LABEL_80;
  }
  long long v48 = (re::ecs2::Entity *)*((void *)v5 + 2);
  if (v48) {
    re::ecs2::Entity::updateAfterComponentDeserialized(v48, v5);
  }
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add((void *)(*(void *)(a1 + 40) + 128), (uint64_t *)&v59);
  uint64_t v5 = (re::ecs2::Component *)v59;
  if (v59) {
    goto LABEL_80;
  }
  return 1;
}

uint64_t re::ecs2::NetworkComponent::getComponentBoundTo(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)result;
  if (a2)
  {
    __n128 result = RESyncableGetUserData();
    uint64_t v3 = 0;
    if (result)
    {
      if ((result & 1) == 0)
      {
        __n128 result = (uint64_t)objc_loadWeakRetained((id *)result);
        uint64_t v3 = result - 8;
        if (!result) {
          uint64_t v3 = 0;
        }
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t re::ecs2::NetworkComponent::owningProcessType(re::ecs2::NetworkComponent *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    do
    {
      uint64_t v3 = v1;
      uint64_t v1 = *(void *)(v1 + 24);
    }
    while (v1);
    uint64_t v1 = *(void *)(v3 + 16);
    if (v1)
    {
      uint64_t v4 = *(void *)(v1 + 56);
      if (v4
        && (uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4),
            re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v5))
        && *((void *)this + 4)
        && RESyncableGetOwnerPeerID())
      {
        unint64_t v6 = 0;
        do
        {
          if (v6 >= RESyncServiceGetSessionCount())
          {
            LOBYTE(v1) = 3;
            return v1;
          }
          RESyncServiceGetSession();
          RESyncSessionGetNetSession();
          ++v6;
        }
        while (!RESyncNetSessionGetParticipantWithPeerID());
        if (RESyncNetSessionGetIsLocal()) {
          LOBYTE(v1) = 1;
        }
        else {
          LOBYTE(v1) = 2;
        }
      }
      else
      {
        LOBYTE(v1) = 0;
      }
    }
  }
  return v1;
}

void re::ecs2::NetworkReceiveSystem::setEntityParent(re::ecs2::NetworkReceiveSystem *this, re::ecs2::Entity *a2, re::ecs2::Entity *a3)
{
  if (re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(this)
    && (uint64_t v5 = *((void *)this + 25)) != 0)
  {
    *(unsigned char *)(v5 + 618) = 1;
    *(void *)(v5 + 624) = a2;
    re::ecs2::Entity::setParentInternal(this, a2, 0xFFFFFFFFFFFFFFFFLL);
    *(unsigned char *)(v5 + 618) = 0;
    *(void *)(v5 + 624) = 0;
  }
  else
  {
    re::ecs2::Entity::setParentInternal(this, a2, 0xFFFFFFFFFFFFFFFFLL);
  }
}

void re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(a1 + 32) + 32 * v5 + 24))(a2) == 1) {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v5);
      }
      else {
        ++v5;
      }
    }
    while (v5 < *(void *)(a1 + 16));
    int v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i != v6; ++i)
      {
        unint64_t v9 = *(void *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v23, 0, sizeof(v23));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v15 = 136315906;
          uint64_t v16 = "operator[]";
          __int16 v17 = 1024;
          int v18 = 789;
          __int16 v19 = 2048;
          unint64_t v20 = i;
          __int16 v21 = 2048;
          unint64_t v22 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v10 = *(void *)(a1 + 72) + v7;
        uint64_t v11 = *(void *)(v10 + 32);
        long long v12 = *(_OWORD *)(v10 + 16);
        v13[0] = *(_OWORD *)v10;
        v13[1] = v12;
        uint64_t v14 = v11;
        if (LOBYTE(v13[0]))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (void *)v13 + 1, (uint64_t)v23);
          if (!LOBYTE(v23[0])) {
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)a1, (uint64_t)v13 + 8);
          }
        }
        else
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (void *)v13 + 1, (uint64_t)v23);
          if (LOBYTE(v23[0])) {
            re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, *((unint64_t *)&v23[0] + 1));
          }
        }
        v7 += 40;
      }
    }
  }
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem22processEntitySnapshotsEPK12RESyncCommitRNS0_21NetworkReceiveContextE_block_invoke(uint64_t a1)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t Syncable = (re *)RESyncReadContextGetSyncable();
  if (RESyncableGetTypeId()) {
    return 1;
  }
  ++*(void *)(*(void *)(a1 + 40) + 264);
  char IsDestroyed = RESyncableIsDestroyed();
  re::ecs2::NetworkComponent::getEntityBoundTo((uint64_t)Syncable, (uint64_t *)&v78);
  uint64_t IsNew = RESyncReadContextIsNew();
  if ((IsNew & 1) == 0 && (IsDestroyed & 1) == 0 && !v78)
  {
    uint64_t v6 = *re::ecsNetworkLogObjects((re *)IsNew);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t Guid = RESyncableGetGuid();
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = Guid;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[NetworkComponent] Trying to process with outdated syncable that has already been unbound, guid=%llu", buf, 0xCu);
    }
    if (re::internal::enableSignposts(0, 0))
    {
      RESyncableGetGuid();
      kdebug_trace();
    }
    goto LABEL_23;
  }
  unint64_t v73 = 0;
  __s1 = "";
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  __int16 v77 = 512;
  uint64_t v7 = (re *)re::ecs2::IntrospectedNetworkTypeHelper::deserialize();
  if (!v7)
  {
    uint64_t v10 = *re::ecsNetworkLogObjects(v7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = RESyncableGetGuid();
      if (v78)
      {
        uint64_t v33 = *((void *)v78 + 37);
        uint64_t v34 = (const char *)*((void *)v78 + 35);
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = "N/A";
      }
      *(_DWORD *)buf = 134218499;
      *(void *)&uint8_t buf[4] = v32;
      __int16 v80 = 2048;
      uint64_t v81 = v33;
      __int16 v82 = 2081;
      uint64_t v83 = (uint64_t)v34;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "[NetworkComponent] Failed to deserialize entity state. (syncable=%llu, entity=%llu (%{private}s))", buf, 0x20u);
    }
    goto LABEL_17;
  }
  int v8 = v78;
  if (v78) {
    char v9 = 1;
  }
  else {
    char v9 = IsDestroyed;
  }
  if (v9)
  {
    if (!v78)
    {
LABEL_17:
      if (v78)
      {
        if (RESyncReadContextIsDestroyed()) {
          re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::add(*(void *)(a1 + 40) + 40, (uint64_t *)&v78);
        }
        if (kdebug_is_enabled())
        {
          re::packCharArrayToUInt64ForAriadne(*((re **)v78 + 35), 0);
          RESyncReadContextGetStateSize();
          kdebug_trace();
        }
      }
      goto LABEL_22;
    }
LABEL_127:
    if (*((void *)v8 + 37) != v75)
    {
      uint64_t v55 = *re::ecsNetworkLogObjects(v7);
      BOOL v56 = os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
      int v8 = v78;
      if (v56)
      {
        uint64_t v67 = *((void *)v78 + 35);
        uint64_t v68 = *((void *)v78 + 37);
        uint64_t v69 = v75;
        uint64_t v70 = RESyncableGetGuid();
        *(_DWORD *)buf = 136381443;
        *(void *)&uint8_t buf[4] = v67;
        __int16 v80 = 2048;
        uint64_t v81 = v68;
        __int16 v82 = 2048;
        uint64_t v83 = v69;
        __int16 v84 = 2048;
        uint64_t v85 = v70;
        _os_log_error_impl(&dword_233120000, v55, OS_LOG_TYPE_ERROR, "Trying to reassign id on pre-existing entity %{private}s entity.id:%llu, entityState.entityId:%llu, syncable.guidid:%llu", buf, 0x2Au);
        int v8 = v78;
      }
    }
    uint64_t v57 = (unsigned char *)*((void *)v8 + 25);
    uint64_t v58 = *((void *)v8 + 3);
    if (v58 && (uint64_t v59 = *(void *)(v58 + 200)) != 0)
    {
      uint64_t v60 = *(void *)(v59 + 32);
      if (v60) {
        uint64_t v60 = RESyncableGetGuid();
      }
    }
    else
    {
      uint64_t v60 = 0;
    }
    if (v60 != v76 && (!v57 || v76 || !v57[617]))
    {
      uint64_t v61 = *(void *)(a1 + 40);
      uint64_t v62 = v61 + 168;
      *(void *)buf = Syncable;
      if (Syncable)
      {
        RESyncRetain();
        re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addOrReplace<unsigned long long &>(v62, (uint64_t *)buf, &v76);
        RESyncRelease();
      }
      else
      {
        re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addOrReplace<unsigned long long &>(v61 + 168, (uint64_t *)buf, &v76);
      }
    }
    __int16 v63 = v78;
    if (v77 != ((*((_DWORD *)v78 + 72) >> 3) & 1))
    {
      re::ecs2::Entity::setSelfEnabled(v78, v77 != 0);
      __int16 v63 = v78;
    }
    if ((*((void *)v63 + 34) ^ v73) > 1 || (uint64_t v64 = (char *)*((void *)v63 + 35), __s1 != v64) && strcmp(__s1, v64)) {
      re::StringID::operator=((unint64_t *)v63 + 34, (uint64_t *)&v73);
    }
    if (v57)
    {
      if (HIBYTE(v77) != v57[560])
      {
        v57[560] = HIBYTE(v77);
        __int16 v65 = (void *)(*(void *)(a1 + 40) + 128);
        uint64_t v66 = v57 + 8;
        *(void *)buf = v57;
        re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(v65, buf);
        if (*(void *)buf) {
      }
        }
    }
    goto LABEL_17;
  }
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_17;
  }
  uint64_t HasOwnership = (*(uint64_t (**)(void))(**(void **)(v2 + 40) + 104))(*(void *)(v2 + 40));
  uint64_t v13 = *(void *)(HasOwnership + 24);
  if (!v13)
  {
LABEL_62:
    uint64_t v25 = v78;
    if (v78) {
      goto LABEL_155;
    }
    uint64_t v26 = *(void *)(v2 + 152);
    uint64_t v27 = *(unsigned int *)(v26 + 2280);
    if (v27)
    {
      uint64_t v28 = 0;
      unint64_t v29 = (int *)(*(void *)(v26 + 2264) + 8);
      while (1)
      {
        int v30 = *v29;
        v29 += 8;
        if (v30 < 0) {
          break;
        }
        if (v27 == ++v28)
        {
          LODWORD(v28) = *(_DWORD *)(v26 + 2280);
          break;
        }
      }
    }
    else
    {
      LODWORD(v28) = 0;
    }
    if (v27 != v28)
    {
      uint64_t v35 = v28;
      uint64_t v36 = *(void *)(v26 + 2264);
      while (1)
      {
        uint64_t v37 = *(void *)(v36 + 32 * v35 + 16);
        if (*(void *)(v37 + 296) == v75) {
          break;
        }
        if (v27 <= (int)v28 + 1) {
          int v38 = v28 + 1;
        }
        else {
          int v38 = v27;
        }
        while (1)
        {
          uint64_t v35 = (v28 + 1);
          if (v38 - 1 == v28) {
            break;
          }
          LODWORD(v28) = v28 + 1;
          int v39 = v35;
          if ((*(_DWORD *)(v36 + 32 * v35 + 8) & 0x80000000) != 0) {
            goto LABEL_81;
          }
        }
        int v39 = v38;
LABEL_81:
        LODWORD(v28) = v39;
        if (v27 == v39) {
          goto LABEL_103;
        }
      }
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v78, v37);
      uint64_t v40 = *((void *)v78 + 25);
      uint64_t HasOwnership = re::internal::enableSignposts(0, 0);
      if (HasOwnership)
      {
        uint64_t HasOwnership = re::internal::enableHighFrequencyNetworkTracing(0, 0);
        if (HasOwnership)
        {
          re::packCharArrayToUInt64ForAriadne(*((re **)v78 + 35), 0);
          if (v40 && *(void *)(v40 + 32)) {
            RESyncableGetGuid();
          }
          RESyncableGetGuid();
          uint64_t HasOwnership = kdebug_trace();
        }
      }
      if (v40)
      {
        if (*(unsigned char *)(v40 + 176)) {
          int v41 = (void *)(v40 + 184);
        }
        else {
          int v41 = *(void **)(v40 + 192);
        }
        uint64_t v42 = *(void *)(v40 + 168);
        if (v42)
        {
          uint64_t v43 = 8 * v42;
          do
          {
            if (*v41) {
              RESyncableSetUserData();
            }
            ++v41;
            v43 -= 8;
          }
          while (v43);
        }
        uint64_t HasOwnership = *(void *)(v40 + 32);
        if (HasOwnership)
        {
          RESyncableSetUserData();
          uint64_t HasOwnership = *(void *)(v40 + 32);
          if (HasOwnership)
          {
            uint64_t HasOwnership = RESyncRelease();
            *(void *)(v40 + 32) = 0;
          }
        }
      }
    }
LABEL_103:
    uint64_t v25 = v78;
    if (v78)
    {
LABEL_155:
      while (1)
      {
        uint64_t v47 = *((void *)v25 + 7);
        if (!v47) {
          break;
        }
        re::ecs2::EntityComponentCollection::removeAt((re::ecs2::Entity *)((char *)v25 + 32), v47 - 1);
        uint64_t v25 = v78;
      }
      re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(*(void *)(a1 + 40) + 40, (unint64_t)v25);
    }
    else
    {
      int v44 = re::ecs2::EntityFactory::instance((re::ecs2::EntityFactory *)HasOwnership);
      re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v44, 4uLL, (re::ecs2::Entity **)buf);
      uint64_t v46 = v78;
      uint64_t v45 = *(re::ecs2::Entity **)buf;
      uint64_t v78 = *(re::ecs2::Entity **)buf;
      if (v46)
      {

        uint64_t v45 = v78;
      }
      *((void *)v45 + 37) = v75;
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(*(void **)(a1 + 40), (uint64_t *)&v78);
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                + 32))(buf);
    uint64_t v48 = *(void *)buf;
    *(void *)(*(void *)buf + 56) = *(void *)(v2 + 152);
    *(unsigned char *)(v48 + 560) = 2;
    if (Syncable) {
      RESyncRetain();
    }
    if (*(re **)(v48 + 32) != Syncable) {
      RESyncableRefRetainer::reset((uint64_t *)(v48 + 32), (uint64_t)Syncable);
    }
    if (Syncable) {
      RESyncRelease();
    }
    re::ecs2::NetworkComponent::bindEntityTo(Syncable, (uint64_t)v78);
    long long v49 = (char *)v78 + 32;
    uint64_t v72 = v48;
    id v50 = (id)(v48 + 8);
    re::ecs2::EntityComponentCollection::add((uint64_t)v49, &v72, 1);
    if (v72)
    {

      uint64_t v72 = 0;
    }
    *(unsigned char *)(v48 + 48) &= ~2u;
    *(unsigned char *)(v48 + 50) &= ~2u;
    int v51 = *(_DWORD *)(v48 + 376);
    if (v51) {
      uint64_t v52 = (void *)(v48 + 384);
    }
    else {
      uint64_t v52 = *(void **)(v48 + 392);
    }
    uint64_t v53 = *(void *)(v48 + 368);
    while (1)
    {
      uint64_t v54 = v48 + 384;
      if ((v51 & 1) == 0) {
        uint64_t v54 = *(void *)(v48 + 392);
      }
      if (v52 == (void *)(v54 + 8 * v53)) {
        break;
      }
      *v52++ = 0;
      int v51 = *(_DWORD *)(v48 + 376);
    }
    re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(v48 + 464);

    int v8 = v78;
    if (!v78) {
      goto LABEL_17;
    }
    goto LABEL_127;
  }
  uint64_t v14 = *(uint64_t **)(HasOwnership + 40);
  uint64_t v15 = 8 * v13;
  while (1)
  {
    uint64_t v16 = *v14;
    if (*v14) {
      id v17 = (id)(v16 + 8);
    }
    *(void *)buf = v75;
    uint64_t v18 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v16 + 152, (uint64_t *)buf);
    if (v18) {
      uint64_t v19 = *(void *)(v18 + 8);
    }
    else {
      uint64_t v19 = *(void *)(*(void *)(v16 + 104) + 296) == *(void *)buf ? *(void *)(v16 + 104) : 0;
    }
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v78, v19);
    if (v78)
    {
      uint64_t v20 = *((void *)v78 + 25);
      if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      {
        re::packCharArrayToUInt64ForAriadne(*((re **)v78 + 35), 0);
        if (v20 && *(void *)(v20 + 32)) {
          RESyncableGetGuid();
        }
        RESyncableGetGuid();
        kdebug_trace();
      }
      if (v20 && (uint64_t HasOwnership = RESyncableHasOwnership(), !HasOwnership)
        || (uint64_t HasOwnership = RESyncableHasOwnership(), (HasOwnership & 1) != 0))
      {
        int v21 = 4;
        if (!v16) {
          goto LABEL_50;
        }
LABEL_49:

        goto LABEL_50;
      }
      unint64_t v22 = *re::ecsNetworkLogObjects((re *)HasOwnership);
      uint64_t HasOwnership = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
      if (HasOwnership)
      {
        uint64_t v23 = *((void *)v78 + 35);
        uint64_t v71 = *((void *)v78 + 37);
        if (v20)
        {
          if (*(void *)(v20 + 32)) {
            uint64_t v20 = RESyncableGetGuid();
          }
          else {
            uint64_t v20 = 0;
          }
        }
        uint64_t v24 = RESyncableGetGuid();
        *(_DWORD *)buf = 134218755;
        *(void *)&uint8_t buf[4] = v71;
        __int16 v80 = 2081;
        uint64_t v81 = v23;
        __int16 v82 = 2048;
        uint64_t v83 = v20;
        __int16 v84 = 2048;
        uint64_t v85 = v24;
        _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "[NetworkComponent] Trying to rebind entity (id=%llu name=%{private}s) from owned syncable (%llu) to an unowned syncable (%llu)", buf, 0x2Au);
      }
      int v21 = 1;
      if (v16) {
        goto LABEL_49;
      }
    }
    else
    {
      int v21 = 0;
      if (v16) {
        goto LABEL_49;
      }
    }
LABEL_50:
    if (v21) {
      break;
    }
    ++v14;
    v15 -= 8;
    if (!v15) {
      goto LABEL_62;
    }
  }
  if (v21 == 4) {
    goto LABEL_62;
  }
LABEL_22:
  re::StringID::destroyString((re::StringID *)&v73);
LABEL_23:
  if (v78) {

  }
  return 1;
}

uint64_t re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addOrReplace<unsigned long long &>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v17 = *(void *)(a1 + 16);
      if (*(void *)(v17 + 32 * v10 + 16) == result)
      {
LABEL_14:
        *(void *)(v17 + 32 * v10 + 24) = *a3;
        goto LABEL_15;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v17 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v17 + 32 * v10 + 16) == result) {
          goto LABEL_14;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
      uint64_t result = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = v9;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(v15 + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 32 * v11) = v8;
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 16) = result;
  if (result)
  {
    uint64_t result = RESyncRetain();
    uint64_t v15 = *(void *)(a1 + 8);
  }
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(v15 + 4 * v16) = v11;
  ++*(_DWORD *)(a1 + 28);
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 24 * v9;
  return v11 + 16;
}

uint64_t re::ecs2::NetworkSendSystem::willAddSystemToECSService(re::ecs2::NetworkSendSystem *this)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
    uint64_t v5 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v4);
    uint64_t v3 = *((void *)this + 5);
  }
  else
  {
    uint64_t v5 = 0;
  }
  *((void *)this + 18) = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = re::ServiceLocator::serviceOrNull<re::AssetService>(v6);
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  Request = (re *)re::ServiceLocator::serviceOrNull<re::NetworkSendBlockingAssetLoadRequestService>(v7);
  *((void *)this + 19) = Request;
  if (Request) {
    Request = (re *)(**(uint64_t (***)(re *))Request)(Request);
  }
  if (*((void *)this + 18))
  {
    uint64_t v9 = re::globalAllocators(Request);
    unint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 144, 8);
    re::NetworkSystem::peerIDStringForAssetSerialization(*((re::NetworkSystem **)this + 18), (re::DynamicString *)&v40);
    uint64_t v10 = *((void *)this + 20);
    re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)v1, 0);
    *(void *)unint64_t v1 = &unk_26E6CA920;
    *(unsigned char *)(v1 + 96) = 0;
    re::DynamicString::DynamicString((re::DynamicString *)(v1 + 104), (const re::DynamicString *)&v40);
    *(void *)(v1 + 136) = v10;
    *((void *)this + 25) = v1;
    if (v40 && (v41 & 1) != 0) {
      (*(void (**)(void))(*(void *)v40 + 40))();
    }
    uint64_t v11 = *(void *)(*((void *)this + 18) + 2560);
    *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = v11;
    if (v11)
    {
      *((void *)this + 22) = RESyncServiceObserverCreate();
      RESyncServiceObserverOnSessionDidAdd();
      RESyncServiceAddObserver();
      if (RESyncServiceGetSessionCount())
      {
        unint64_t v1 = 0;
        do
        {
          RESyncServiceGetSession();
          if ((RESyncSessionHasViewFilterCB() & 1) == 0) {
            RESyncSessionSetViewFilterCB();
          }
          ++v1;
        }
        while (RESyncServiceGetSessionCount() > v1);
      }
    }
  }
  uint64_t v12 = *((void *)this + 5);
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 24))
  {
    unint64_t v1 = 0;
    while (2)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
      int v14 = (void *)re::ecs2::EntityComponentCollection::operator[](v13, v1);
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)*v14 + 32))(*v14);
      do
      {
        {
          uint64_t v39 = v15;
          uint64_t v15 = v39;
          if (v19)
          {
            re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"NetworkReceiveSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkReceiveSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkReceiveSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkReceiveSystem>, 0);
            uint64_t v15 = v39;
          }
        }
        if ((_UNKNOWN *)v15 == re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info)
        {
          int v20 = 0;
          goto LABEL_34;
        }
        uint64_t v16 = *(unsigned int *)(v15 + 56);
        if (!v16) {
          break;
        }
        uint64_t v17 = *(void **)(v15 + 64);
        while (1)
        {
          uint64_t v18 = (_DWORD *)*v17;
          if (*(_DWORD *)*v17 == 1 && v18[10] == 3) {
            break;
          }
          ++v17;
          if (!--v16) {
            goto LABEL_31;
          }
        }
        uint64_t v15 = *((void *)v18 + 2);
      }
      while (v15);
LABEL_31:
      if (++v1 < *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 24)) {
        continue;
      }
      break;
    }
  }
  int v20 = 1;
LABEL_34:
  uint64_t v21 = (*(uint64_t (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5));
  unint64_t v22 = (char *)this + 8;
  uint64_t v23 = *(re::ecs2::NetworkSendSystem ***)(v21 + 40);
  uint64_t v24 = *(void *)(v21 + 24);
  if (v24)
  {
    uint64_t v25 = 8 * v24;
    uint64_t v26 = v23;
    while (*v26 != this)
    {
      ++v26;
      v25 -= 8;
      if (!v25)
      {
        uint64_t v26 = &v23[v24];
        break;
      }
    }
  }
  else
  {
    uint64_t v26 = v23;
  }
  uint64_t v27 = v26 - v23;
  uint64_t v28 = (*(uint64_t (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5));
  if (v27 == v24) {
    unint64_t v29 = *(void *)(v28 + 24);
  }
  else {
    unint64_t v29 = v27;
  }

  if (v1 > v29) {
    int v30 = 1;
  }
  else {
    int v30 = v20;
  }
  if (v30 == 1) {
    *((unsigned char *)this + 48) = 0;
  }
  uint64_t v31 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v32 = &qword_268772000;
  while (1)
  {
    uint64_t v33 = v32[395];
    re::StringID::invalid((re::StringID *)&v40);
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v31 + 16))(v31, v33, &v40);
    re::StringID::destroyString((re::StringID *)&v40);
    *((void *)this + 23) = v34;
    *((void *)this + 24) = RESyncCreateSyncObjectContext();
    RESyncAddSyncObjectContextEntry();
    uint64_t v35 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    {
      re::introspect<re::NetworkCompatSerializer>(void)::info = re::introspect_NetworkCompatSerializer(0);
    }
    uint64_t v32 = (uint64_t *)re::introspect<re::NetworkCompatSerializer>(void)::info;
    re::StringID::invalid((re::StringID *)&v40);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v35 + 16))(v35, v32, &v40);
    re::StringID::destroyString((re::StringID *)&v40);
    *((void *)this + 26) = v31;
    uint64_t v36 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = re::ServiceLocator::serviceOrNull<re::FrameManager>(v36);
    *((void *)this + 28) = RESyncCreateSyncObjectWriteContext();
    RESyncAddSyncObjectWriteContextEntry();
    uint64_t result = RESyncAddSyncObjectWriteContextEntry();
    if (!*((void *)this + 23))
    {
      re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) [NetworkComponent] Serializer not found. Please register the NetworkOPACKSerializer in the service locator.", "m_opackSerializer", "willAddSystemToECSService", 1502);
      _os_crash();
      __break(1u);
LABEL_55:
      re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) [NetworkComponent] Deserializer not found. Please register the NetworkCompatSerializer in the service locator.", "m_compatSerializer", "willAddSystemToECSService", 1503);
      _os_crash();
      __break(1u);
      goto LABEL_56;
    }
    if (!*((void *)this + 26)) {
      goto LABEL_55;
    }
    if (*((void *)this + 27)) {
      return result;
    }
LABEL_56:
    re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) [NetworkComponent] FrameManager not found. Please register the FrameManager in the service locator.", "m_frameManager", "willAddSystemToECSService", 1504);
    _os_crash();
    __break(1u);
LABEL_57:
    {
      v32[395] = re::introspect_NetworkOPACKSerializer(0);
    }
  }
}

void ___ZN2re4ecs217NetworkSendSystem25willAddSystemToECSServiceEv_block_invoke()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (RESyncServiceGetSyncSession())
  {
    if ((RESyncSessionHasViewFilterCB() & 1) == 0)
    {
      RESyncSessionSetViewFilterCB();
    }
  }
  else
  {
    uint64_t v0 = *re::ecsNetworkLogObjects(0);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      int v1 = 134217984;
      uint64_t v2 = RESyncNetSessionPeerID();
      _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] couldn't find sync session for net session %llx", (uint8_t *)&v1, 0xCu);
    }
  }
}

uint64_t ___ZN2re4ecs217NetworkSendSystem25willAddSystemToECSServiceEv_block_invoke_46(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t anonymous namespace'::viewFilterAccessList(uint64_t a1, uint64_t a2)
{
  ++re::NetworkSystem::viewFilterListCount;
  if (RESyncSessionIsPrivileged()) {
    return 1;
  }
  uint64_t result = RESyncViewGetUserData();
  if (result)
  {
    uint64_t v4 = result;
    if (RESyncSessionIsLocal())
    {
      if (*(unsigned __int8 *)(v4 + 104) <= 1u)
      {
        RESyncSessionGetNetSession();
        if (RESyncNetSessionGetParticipantWithPeerID())
        {
          if (RESyncParticipantHasForceAuthorityCapability()) {
            return 1;
          }
        }
      }
    }
    char IsLocal = RESyncSessionIsLocal();
    int v6 = *(unsigned __int8 *)(v4 + 104);
    if (v6 != 2)
    {
      if (*(unsigned char *)(v4 + 104))
      {
        if (v6 == 3) {
          char v11 = IsLocal;
        }
        else {
          char v11 = 0;
        }
        if ((v11 & 1) == 0) {
          goto LABEL_11;
        }
      }
      else if (IsLocal)
      {
LABEL_11:
        uint64_t v7 = (_DWORD *)(v4 + 56);
        uint64_t v8 = *(void *)(v4 + 80);
        if (v8)
        {
          uint64_t v9 = *(void *)(v4 + 96) + 8;
          uint64_t v10 = 16 * v8;
          while (*(void *)(v9 - 8) != a2)
          {
            v9 += 16;
            v10 -= 16;
            if (!v10) {
              return *v7 == 0;
            }
          }
          uint64_t v7 = (_DWORD *)v9;
        }
        return *v7 == 0;
      }
    }
    return 0;
  }
  return result;
}

uint64_t ___ZN2re4ecs217NetworkSendSystem25willAddSystemToECSServiceEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t re::ecs2::NetworkSendSystem::willRemoveSystemFromECSService(re::ecs2::NetworkSendSystem *this)
{
  if (*((void *)this + 18))
  {
    RESyncServiceRemoveObserver();
    RESyncRelease();
    *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
    *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 0;
    *((void *)this + 22) = 0;
    re::internal::destroyPersistent<re::NetworkAssetSerialization>(*((re **)this + 25));
  }
  *((void *)this + 18) = 0;
  RESyncDestroySyncObjectWriteContext();
  *((void *)this + 28) = 0;
  uint64_t result = RESyncDestroySyncObjectContext();
  *((void *)this + 26) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  return result;
}

void *re::ecs2::NetworkSendSystem::update(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1[5] + 104))(a1[5]);
  uint64_t result = (void *)re::ecs2::EntityComponentCollection::operator[](v8, 0);
  if (*result == a2)
  {
    uint64_t v10 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[10];
    return (void *)v10(a1, a3, a4);
  }
  return result;
}

void re::ecs2::NetworkSendSystem::update(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v205 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 152);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *(re::NetworkSystem **)(v1 + 144);
  if (!v3) {
    return;
  }
  re::NetworkSystem::resolveDeferedViews(v3);
  if (!*(void *)(v1 + 168)) {
    goto LABEL_300;
  }
  if (!RESyncServiceGetSessionCount())
  {
    uint64_t v7 = *(void *)(v1 + 144);
    v199[0] = MEMORY[0x263EF8330];
    v199[1] = 0x40000000;
    v199[2] = ___ZNK2re4ecs217NetworkSendSystem6updateENS0_6System13UpdateContextE_block_invoke;
    v199[3] = &__block_descriptor_tmp_65;
    v199[4] = v1;
    *(void *)int __src = v199;
    re::NetworkSystem::enumerateRemoteDirtyComponents<void({block_pointer})(re::SharedPtr<re::ecs2::NetworkComponent>)>(v7, (uint64_t *)__src);
    re::NetworkSystem::clearRemoteDirty(*(re::NetworkSystem **)(v1 + 144));
    return;
  }
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v5);
  if (isStatisticCollectionEnabled)
  {
    uint64_t isStatisticCollectionEnabled = (re *)re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v185 = isStatisticCollectionEnabled;
    if (*((void *)isStatisticCollectionEnabled + 19))
    {
      uint64_t isStatisticCollectionEnabled = (re *)mach_absolute_time();
      v183 = isStatisticCollectionEnabled;
    }
  }
  else
  {
    uint64_t v185 = 0;
  }
  uint64_t v8 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if (v8)
  {
    uint64_t v9 = re::profilerThreadContext(v8);
    uint64_t v10 = *(int64x2_t **)(v9 + 152);
    if (v10)
    {
      char v11 = (re::ProfilerConfig *)v10[196].i64[0];
      if (v11 >= v5) {
        char v11 = v5;
      }
      v10[196].i64[0] = (uint64_t)v11;
      uint64_t v12 = (re::ProfilerConfig *)v10[196].i64[1];
      if (v12 <= v5) {
        uint64_t v12 = v5;
      }
      v10[196].i64[1] = (uint64_t)v12;
      int64x2_t v13 = vdupq_n_s64(1uLL);
      v13.i64[0] = (uint64_t)v5;
      v10[197] = vaddq_s64(v10[197], v13);
      *(unsigned char *)(v9 + 184) = 0;
    }
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v198, 3055, v1);
  uint64_t SessionCount = RESyncServiceGetSessionCount();
  if (!SessionCount)
  {
    uint64_t v15 = 0;
    LOBYTE(v188) = 0;
    goto LABEL_244;
  }
  uint64_t v14 = 0;
  int v188 = 0;
  uint64_t v15 = 0;
  uint64_t v184 = vdupq_n_s64(1uLL).i64[1];
  uint64_t v196 = v1;
  do
  {
    uint64_t v189 = v14;
    RESyncServiceGetSession();
    if (!RESyncSessionIsLocal() || (uint64_t v16 = *(void *)(v1 + 144), !*(_DWORD *)(v16 + 2972)))
    {
      if (!v15)
      {
        *(void *)(v1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
        ++*(_DWORD *)(v1 + 128);
        uint64_t v21 = *(void *)(v1 + 144);
        v197[0] = MEMORY[0x263EF8330];
        v197[1] = 0x40000000;
        v197[2] = ___ZNK2re4ecs217NetworkSendSystem6updateENS0_6System13UpdateContextE_block_invoke_2;
        v197[3] = &__block_descriptor_tmp_66;
        v197[4] = v1;
        *(void *)int __src = v197;
        re::NetworkSystem::enumerateRemoteDirtyComponents<void({block_pointer})(re::SharedPtr<re::ecs2::NetworkComponent>)>(v21, (uint64_t *)__src);
        uint64_t v15 = RESyncCommitListCreate();
        if (re::internal::enableSignposts(0, 0)) {
          kdebug_trace();
        }
        uint64_t v23 = *(void *)(v1 + 184);
        *(void *)(v23 + 456) = *(void *)(v1 + 200);
        uint64_t v24 = *(void *)(v1 + 120);
        if (v24)
        {
          int v25 = 0;
          unint64_t v26 = 0;
          unint64_t v192 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = *(uint64_t **)(v1 + 136);
          unint64_t v190 = &v28[v24];
          while (1)
          {
            uint64_t v29 = *v28;
            char v30 = *(unsigned char *)(*v28 + 50);
            if ((v30 & 2) != 0 || (*(unsigned char *)(v29 + 48) & 2) != 0)
            {
              if (!v27) {
                uint64_t v27 = RESyncCommitListAddNewCommit();
              }
              if (!*(void *)(v1 + 168)) {
                goto LABEL_299;
              }
              RESyncServiceGetTypeInfo();
              *(void *)int __src = 0;
              *(void *)&__src[8] = "";
              *(void *)&__src[16] = 0;
              *(void *)&__src[24] = 0;
              LOWORD(v202) = 512;
              uint64_t v31 = *(void *)(v29 + 16);
              re::StringID::operator=((unint64_t *)__src, (uint64_t *)(v31 + 272));
              uint64_t Guid = 0;
              *(void *)&__src[16] = *(void *)(v31 + 296);
              LOBYTE(v202) = (*(unsigned char *)(v31 + 288) & 8) != 0;
              if (!*(unsigned char *)(v29 + 617))
              {
                uint64_t v33 = *(void *)(v31 + 24);
                if (v33 && (uint64_t v34 = *(void *)(v33 + 200)) != 0)
                {
                  uint64_t Guid = *(void *)(v34 + 32);
                  if (Guid) {
                    uint64_t Guid = RESyncableGetGuid();
                  }
                }
                else
                {
                  uint64_t Guid = 0;
                }
              }
              *(void *)&__src[24] = Guid;
              BYTE1(v202) = *(unsigned char *)(v29 + 560);
              uint64_t v35 = re::ecs2::IntrospectedNetworkTypeHelper::serialize();
              if (v35)
              {
                if (kdebug_is_enabled())
                {
                  re::packCharArrayToUInt64ForAriadne(*(re **)(*(void *)(v29 + 16) + 280), 0);
                  kdebug_trace();
                }
              }
              else
              {
                uint64_t v36 = *re::ecsNetworkLogObjects((re *)v35);
                if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
                {
                  uint64_t v64 = *(void *)(*(void *)(v29 + 16) + 280);
                  uint64_t v65 = *(void *)(v29 + 32);
                  if (v65) {
                    uint64_t v65 = RESyncableGetGuid();
                  }
                  *(_DWORD *)buf = 136380931;
                  *(void *)&uint8_t buf[4] = v64;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v65;
                  _os_log_fault_impl(&dword_233120000, v36, OS_LOG_TYPE_FAULT, "Failed to write entity state. (name=%{private}s, guid=%llu)", buf, 0x16u);
                }
              }
              re::StringID::destroyString((re::StringID *)__src);
              ++v192;
              char v30 = *(unsigned char *)(v29 + 50);
              int v25 = 1;
            }
            unint64_t v193 = v26;
            if ((v30 & 2) == 0) {
              break;
            }
            if (*(void *)(v29 + 168))
            {
              if (!v27) {
                uint64_t v27 = RESyncCommitListAddNewCommit();
              }
              if (*(unsigned char *)(v29 + 176)) {
                uint64_t v39 = (uint64_t *)(v29 + 184);
              }
              else {
                uint64_t v39 = *(uint64_t **)(v29 + 192);
              }
              uint64_t v50 = *(void *)(v29 + 168);
              if (v50)
              {
                uint64_t v51 = 8 * v50;
                do
                {
                  uint64_t v52 = *v39++;
                  re::ecs2::NetworkSendSystem::buildComponentSnapshot(v196, v52);
                  v51 -= 8;
                }
                while (v51);
                uint64_t i = *(void *)(v29 + 168);
              }
              else
              {
                uint64_t i = 0;
              }
LABEL_82:
              int v25 = 1;
              goto LABEL_83;
            }
            uint64_t i = 0;
LABEL_83:
            uint64_t v53 = *(unsigned int *)(v29 + 496);
            if (v53)
            {
              uint64_t v54 = 0;
              uint64_t v55 = (int *)(*(void *)(v29 + 480) + 8);
              do
              {
                int v56 = *v55;
                v55 += 6;
                if (v56 < 0) {
                  goto LABEL_89;
                }
                ++v54;
              }
              while (v53 != v54);
              LODWORD(v54) = *(_DWORD *)(v29 + 496);
            }
            else
            {
              LODWORD(v54) = 0;
            }
LABEL_89:
            if (v53 != v54)
            {
              do
              {
                if (!v27) {
                  uint64_t v27 = RESyncCommitListAddNewCommit();
                }
                RESyncCommitMarkDestroyed();
                unsigned int v57 = *(_DWORD *)(v29 + 496);
                if (v57 <= (int)v54 + 1) {
                  unsigned int v57 = v54 + 1;
                }
                while (1)
                {
                  unsigned int v58 = v54 + 1;
                  if (v57 - 1 == v54) {
                    break;
                  }
                  LODWORD(v54) = v54 + 1;
                  unsigned int v59 = v58;
                  if ((*(_DWORD *)(*(void *)(v29 + 480) + 24 * v58 + 8) & 0x80000000) != 0) {
                    goto LABEL_98;
                  }
                }
                unsigned int v59 = v57;
LABEL_98:
                LODWORD(v54) = v59;
              }
              while (v53 != v59);
              int v25 = 1;
            }
            *(unsigned char *)(v29 + 48) &= ~2u;
            *(unsigned char *)(v29 + 50) &= ~2u;
            int v60 = *(_DWORD *)(v29 + 376);
            uint64_t v1 = v196;
            if (v60) {
              uint64_t v61 = (void *)(v29 + 384);
            }
            else {
              uint64_t v61 = *(void **)(v29 + 392);
            }
            unint64_t v26 = i + v193;
            uint64_t v62 = *(void *)(v29 + 368);
            while (1)
            {
              uint64_t v63 = v29 + 384;
              if ((v60 & 1) == 0) {
                uint64_t v63 = *(void *)(v29 + 392);
              }
              if (v61 == (void *)(v63 + 8 * v62)) {
                break;
              }
              *v61++ = 0;
              int v60 = *(_DWORD *)(v29 + 376);
            }
            re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(v29 + 464);
            if (++v28 == v190)
            {
              uint64_t v23 = *(void *)(v196 + 184);
              unint64_t v66 = v192;
              goto LABEL_221;
            }
          }
          int v37 = *(_DWORD *)(v29 + 376);
          if (v37) {
            uint64_t v38 = (int8x8_t *)(v29 + 384);
          }
          else {
            uint64_t v38 = *(int8x8_t **)(v29 + 392);
          }
          for (uint64_t i = 0; ; i += v43.u32[0])
          {
            uint64_t v41 = v29 + 384;
            if ((v37 & 1) == 0) {
              uint64_t v41 = *(void *)(v29 + 392);
            }
            if (v38 == (int8x8_t *)(v41 + 8 * *(void *)(v29 + 368))) {
              break;
            }
            int8x8_t v42 = *v38++;
            uint8x8_t v43 = (uint8x8_t)vcnt_s8(v42);
            v43.i16[0] = vaddlv_u8(v43);
          }
          if (!i) {
            goto LABEL_83;
          }
          if (!v27) {
            uint64_t v27 = RESyncCommitListAddNewCommit();
          }
          unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v29 + 360, 0);
          if (FirstBitSet != -1)
          {
            unint64_t v45 = FirstBitSet;
            while (1)
            {
              unint64_t v46 = *(void *)(v29 + 168);
              if (v46 <= v45) {
                break;
              }
              uint64_t v47 = v15;
              uint64_t v48 = v29 + 184;
              if ((*(unsigned char *)(v29 + 176) & 1) == 0) {
                uint64_t v48 = *(void *)(v29 + 192);
              }
              uint64_t v49 = *(void *)(v48 + 8 * v45);
              if (v49)
              {
                RESyncRetain();
                re::ecs2::NetworkSendSystem::buildComponentSnapshot(v196, v49);
                RESyncRelease();
              }
              else
              {
                re::ecs2::NetworkSendSystem::buildComponentSnapshot(v196, 0);
              }
              uint64_t v15 = v47;
              unint64_t v45 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v29 + 360, v45 + 1);
              if (v45 == -1) {
                goto LABEL_82;
              }
            }
            v199[5] = 0;
            long long v203 = 0u;
            long long v204 = 0u;
            long long v202 = 0u;
            memset(__src, 0, sizeof(__src));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "operator[]";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 858;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v45;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_299:
            re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) ", "m_syncService", "buildEntitySnapshot", 1789);
            _os_crash();
            __break(1u);
LABEL_300:
            re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) ", "m_syncService", "update", 1552);
            _os_crash();
            __break(1u);
          }
          goto LABEL_82;
        }
        unint64_t v66 = 0;
        unint64_t v26 = 0;
        int v25 = 0;
LABEL_221:
        *(void *)(v23 + 456) = 0;
        uint64_t v145 = re::internal::enableSignposts(0, 0);
        if (v145) {
          uint64_t v145 = kdebug_trace();
        }
        uint64_t v146 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v145);
        if (v146)
        {
          uint64_t v146 = re::profilerThreadContext((re *)v146);
          uint64_t v147 = *(int64x2_t **)(v146 + 152);
          if (v147)
          {
            unint64_t v148 = v147[188].u64[0];
            if (v148 >= v66) {
              unint64_t v148 = v66;
            }
            v147[188].i64[0] = v148;
            unint64_t v149 = v147[188].u64[1];
            if (v149 <= v66) {
              unint64_t v149 = v66;
            }
            v147[188].i64[1] = v149;
            v150.i64[1] = v184;
            v150.i64[0] = v66;
            v147[189] = vaddq_s64(v147[189], v150);
            *(unsigned char *)(v146 + 184) = 0;
          }
        }
        long long v151 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v146);
        if (v151)
        {
          uint64_t v152 = re::profilerThreadContext(v151);
          int v153 = *(int64x2_t **)(v152 + 152);
          if (v153)
          {
            unint64_t v154 = v153[180].u64[0];
            if (v154 >= v26) {
              unint64_t v154 = v26;
            }
            v153[180].i64[0] = v154;
            unint64_t v155 = v153[180].u64[1];
            if (v155 <= v26) {
              unint64_t v155 = v26;
            }
            v153[180].i64[1] = v155;
            int64x2_t v156 = vdupq_n_s64(1uLL);
            v156.i64[0] = v26;
            v153[181] = vaddq_s64(v153[181], v156);
            *(unsigned char *)(v152 + 184) = 0;
          }
        }
        v188 |= v25;
        uint64_t EntryCount = RESyncCommitListGetEntryCount();
        if (EntryCount)
        {
          uint64_t v158 = EntryCount;
          for (uint64_t j = 0; j != v158; ++j)
          {
            RESyncCommitListGetEntry();
            RESyncCommitListAddCopy();
          }
        }
      }
      uint64_t v144 = v189;
      RESyncServiceGetSession();
      RESyncSessionSend();
      goto LABEL_241;
    }
    uint64_t v186 = v15;
    *(void *)buf = re::ecs2::NetworkSendSystem::updateLocalSession(RESyncSession *)const::$_0::__invoke;
    memset(&buf[8], 0, 24);
    uint64_t v17 = *(void *)(v1 + 184);
    *(void *)(v17 + 464) = buf;
    *(void *)(v17 + 456) = *(void *)(v1 + 200);
    uint64_t v18 = *(unsigned int *)(v16 + 2976);
    if (v18)
    {
      uint64_t v19 = 0;
      int v20 = (_DWORD *)(*(void *)(v16 + 2960) + 8);
      while ((*v20 & 0x80000000) == 0)
      {
        v20 += 68;
        if (v18 == ++v19)
        {
          LODWORD(v19) = *(_DWORD *)(v16 + 2976);
          break;
        }
      }
    }
    else
    {
      LODWORD(v19) = 0;
    }
    if (v18 != v19)
    {
      uint64_t v67 = v19;
      unsigned int v68 = *(_DWORD *)(v16 + 2976);
      unsigned int v194 = v68;
      do
      {
        uint64_t v69 = *(void *)(v16 + 2960);
        uint64_t v70 = v69 + 272 * v67;
        unsigned int v73 = *(_DWORD *)(v70 + 160);
        uint64_t v72 = (_DWORD *)(v70 + 160);
        uint64_t v71 = v73;
        *(v72 - 26) = 0;
        *((void *)v72 - 5) = *(void *)(v1 + 184) + 456;
        if (v73)
        {
          uint64_t v74 = 0;
          uint64_t v75 = (int *)(*(void *)(v69 + 272 * v67 + 144) + 8);
          while (1)
          {
            int v76 = *v75;
            v75 += 6;
            if (v76 < 0) {
              break;
            }
            if (v71 == ++v74)
            {
              LODWORD(v74) = v71;
              break;
            }
          }
        }
        else
        {
          LODWORD(v74) = 0;
        }
        if (v71 != v74)
        {
          uint64_t v77 = v74;
          uint64_t v78 = v69 + 272 * v67;
          uint64_t v81 = *(void *)(v78 + 144);
          __int16 v80 = (uint64_t *)(v78 + 144);
          uint64_t v79 = v81;
          do
          {
            __int16 v82 = *(void **)(v79 + 24 * v77 + 16);
            if (v82) {
              uint64_t v83 = v82 + 1;
            }
            if (!v82[4] || RESyncableIsAuthoritative())
            {
              uint64_t v84 = v82[2];
              if (v84)
              {
                do
                {
                  uint64_t v85 = v84;
                  uint64_t v84 = *(void *)(v84 + 24);
                }
                while (v84);
                if (*(void *)(v85 + 16)) {
                  re::ecs2::NetworkSendSystem::writeEntity(v1, (re::snapshot::Encoder *)(v72 - 28), (uint64_t)v82);
                }
              }
            }

            int v86 = *v72;
            uint64_t v79 = *v80;
            if (*v72 <= (v74 + 1)) {
              int v86 = v74 + 1;
            }
            while (1)
            {
              uint64_t v77 = (v74 + 1);
              if (v86 - 1 == v74) {
                break;
              }
              LODWORD(v74) = v74 + 1;
              int v87 = v77;
              if ((*(_DWORD *)(v79 + 24 * v77 + 8) & 0x80000000) != 0) {
                goto LABEL_138;
              }
            }
            int v87 = v86;
LABEL_138:
            LODWORD(v74) = v87;
          }
          while (v71 != v87);
          unsigned int v68 = *(_DWORD *)(v16 + 2976);
          LODWORD(v18) = v194;
        }
        if (v68 <= (int)v19 + 1) {
          unsigned int v88 = v19 + 1;
        }
        else {
          unsigned int v88 = v68;
        }
        while (1)
        {
          uint64_t v67 = (v19 + 1);
          if (v88 - 1 == v19) {
            break;
          }
          LODWORD(v19) = v19 + 1;
          unsigned int v89 = v67;
          if ((*(_DWORD *)(*(void *)(v16 + 2960) + 272 * v67 + 8) & 0x80000000) != 0) {
            goto LABEL_147;
          }
        }
        unsigned int v89 = v88;
LABEL_147:
        LODWORD(v19) = v89;
      }
      while (v18 != v89);
      uint64_t v16 = *(void *)(v1 + 144);
    }
    uint64_t v90 = *(unsigned int *)(v16 + 2616);
    if (v90)
    {
      uint64_t v91 = 0;
      uint64_t v92 = (int *)(*(void *)(v16 + 2600) + 8);
      while (1)
      {
        int v93 = *v92;
        v92 += 6;
        if (v93 < 0) {
          break;
        }
        if (v90 == ++v91)
        {
          LODWORD(v91) = *(_DWORD *)(v16 + 2616);
          break;
        }
      }
    }
    else
    {
      LODWORD(v91) = 0;
    }
    if (v90 == v91) {
      goto LABEL_184;
    }
    uint64_t v94 = v91;
    unsigned int v95 = *(_DWORD *)(v16 + 2616);
    do
    {
      uint64_t v96 = *(void *)(v16 + 2600) + 24 * v94;
      uint64_t v99 = *(void *)(v96 + 16);
      uint64_t v98 = (uint64_t *)(v96 + 16);
      int v97 = (void *)v99;
      if (*(unsigned char *)(v99 + 80)) {
        uint64_t v100 = v97 + 11;
      }
      else {
        uint64_t v100 = (uint64_t *)v97[12];
      }
      uint64_t v101 = v97[9];
      if (!v101) {
        goto LABEL_175;
      }
      char v102 = &v100[v101];
      do
      {
        uint64_t v103 = *v100;
        uint64_t v104 = *v98;
        if (*(void *)(*v98 + 32))
        {
          if (!RESyncableIsAuthoritative()) {
            goto LABEL_173;
          }
          uint64_t v104 = *v98;
        }
        uint64_t v105 = *(void *)(v104 + 16);
        if (v105)
        {
          do
          {
            uint64_t v106 = v105;
            uint64_t v105 = *(void *)(v105 + 24);
          }
          while (v105);
          if (*(void *)(v106 + 16))
          {
            uint64_t v107 = *(void *)(v196 + 144);
            *(void *)int __src = v103;
            uint64_t v108 = re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v107 + 2944, (uint64_t *)__src);
            if (v108)
            {
              uint64_t v109 = v108;
              if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(v108 + 104, v98))re::ecs2::NetworkSendSystem::writeEntity(v196, (re::snapshot::Encoder *)(v109 + 24), *v98); {
            }
              }
            else
            {
              uint64_t v110 = *re::ecsNetworkLogObjects(0);
              if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v111 = *(void *)(*v98 + 16);
                uint64_t v112 = *(void *)(v111 + 280);
                uint64_t v113 = *(void *)(v111 + 296);
                *(_DWORD *)int __src = 134218498;
                *(void *)&__src[4] = v103;
                *(_WORD *)&__src[12] = 2080;
                *(void *)&__src[14] = v112;
                *(_WORD *)&__src[22] = 2048;
                *(void *)&__src[24] = v113;
                _os_log_impl(&dword_233120000, v110, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] no peer found for peerID %llu on entity %s(%llu).", __src, 0x20u);
              }
            }
          }
        }
LABEL_173:
        ++v100;
      }
      while (v100 != v102);
      unsigned int v95 = *(_DWORD *)(v16 + 2616);
      uint64_t v1 = v196;
LABEL_175:
      if (v95 <= (int)v91 + 1) {
        unsigned int v114 = v91 + 1;
      }
      else {
        unsigned int v114 = v95;
      }
      while (1)
      {
        uint64_t v94 = (v91 + 1);
        if (v114 - 1 == v91) {
          break;
        }
        LODWORD(v91) = v91 + 1;
        unsigned int v115 = v94;
        if ((*(_DWORD *)(*(void *)(v16 + 2600) + 24 * v94 + 8) & 0x80000000) != 0) {
          goto LABEL_182;
        }
      }
      unsigned int v115 = v114;
LABEL_182:
      LODWORD(v91) = v115;
    }
    while (v90 != v115);
    uint64_t v16 = *(void *)(v1 + 144);
LABEL_184:
    re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear(v16 + 2584);
    uint64_t v116 = *(void *)(v1 + 144);
    uint64_t v117 = *(unsigned int *)(v116 + 2976);
    if (v117)
    {
      uint64_t v118 = 0;
      uint64_t v119 = (_DWORD *)(*(void *)(v116 + 2960) + 8);
      while ((*v119 & 0x80000000) == 0)
      {
        v119 += 68;
        if (v117 == ++v118)
        {
          LODWORD(v118) = *(_DWORD *)(v116 + 2976);
          break;
        }
      }
    }
    else
    {
      LODWORD(v118) = 0;
    }
    if (v117 == v118)
    {
      int v120 = 0;
    }
    else
    {
      int v120 = 0;
      uint64_t v121 = v118;
      int v191 = *(_DWORD *)(v116 + 2976);
      do
      {
        uint64_t v122 = *(void *)(v116 + 2960);
        uint64_t v123 = v122 + 272 * v121;
        re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear(v123 + 128);
        int v125 = *(_DWORD *)(v123 + 56);
        uint64_t v124 = v123 + 56;
        if (v125 | *(_DWORD *)(v124 + 148))
        {
          *(void *)int __src = 0;
          re::snapshot::Encoder::writeRaw<true>((unsigned int *)(v124 - 8), __src, 8uLL);
          uint64_t v126 = v122;
          uint64_t v127 = v122 + 272 * v121;
          unsigned int v130 = *(_DWORD *)(v127 + 208);
          __int16 v129 = (int *)(v127 + 208);
          uint64_t v128 = v130;
          uint64_t v195 = v126;
          if (v130)
          {
            uint64_t v131 = 0;
            int v132 = (int *)(*(void *)(v126 + 272 * v121 + 192) + 8);
            while (1)
            {
              int v133 = *v132;
              v132 += 6;
              if (v133 < 0) {
                break;
              }
              if (v128 == ++v131)
              {
                LODWORD(v131) = v128;
                break;
              }
            }
          }
          else
          {
            LODWORD(v131) = 0;
          }
          if (v128 != v131)
          {
            uint64_t v134 = v131;
            uint64_t v135 = v195 + 272 * v121;
            uint64_t v138 = *(void *)(v135 + 192);
            v137 = (uint64_t *)(v135 + 192);
            uint64_t v136 = v138;
            do
            {
              *(void *)int __src = *(void *)(v136 + 24 * v134 + 16);
              re::snapshot::Encoder::writeRaw<true>((unsigned int *)(v124 - 8), __src, 8uLL);
              uint64_t v136 = *v137;
              if (*v129 <= (v131 + 1)) {
                int v139 = v131 + 1;
              }
              else {
                int v139 = *v129;
              }
              int v140 = v131;
              while (1)
              {
                uint64_t v134 = (v140 + 1);
                if (v139 - 1 == v140) {
                  break;
                }
                ++v140;
                LODWORD(v131) = v134;
                if ((*(_DWORD *)(v136 + 24 * v134 + 8) & 0x80000000) != 0) {
                  goto LABEL_210;
                }
              }
              LODWORD(v131) = v139;
LABEL_210:
              ;
            }
            while (v128 != v131);
          }
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)(v129 - 8));
          *(void *)int __src = 0;
          re::snapshot::Encoder::writeRaw<true>((unsigned int *)(v124 - 8), __src, 8uLL);
          *(void *)(v195 + 272 * v121 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0;
          RESyncSessionSendRaw();
          int v120 = 1;
          LODWORD(v117) = v191;
        }
        unsigned int v141 = *(_DWORD *)(v116 + 2976);
        if (v141 <= (int)v118 + 1) {
          unsigned int v141 = v118 + 1;
        }
        while (1)
        {
          uint64_t v121 = (v118 + 1);
          if (v141 - 1 == v118) {
            break;
          }
          LODWORD(v118) = v118 + 1;
          unsigned int v142 = v121;
          if ((*(_DWORD *)(*(void *)(v116 + 2960) + 272 * v121 + 8) & 0x80000000) != 0) {
            goto LABEL_218;
          }
        }
        unsigned int v142 = v141;
LABEL_218:
        LODWORD(v118) = v142;
      }
      while (v117 != v142);
    }
    uint64_t v143 = *(void *)(v196 + 184);
    *(void *)(v143 + 456) = 0;
    *(void *)(v143 + 464) = 0;
    v188 |= v120;
    uint64_t v1 = v196;
    uint64_t v15 = v186;
    uint64_t v144 = v189;
LABEL_241:
    uint64_t v14 = v144 + 1;
  }
  while (v144 + 1 != SessionCount);
LABEL_244:
  uint64_t v160 = *(void *)(v1 + 144);
  uint64_t v161 = *(unsigned int *)(v160 + 2664);
  if (v161)
  {
    uint64_t v162 = 0;
    unint64_t v163 = (int *)(*(void *)(v160 + 2648) + 8);
    while (1)
    {
      int v164 = *v163;
      v163 += 6;
      if (v164 < 0) {
        break;
      }
      if (v161 == ++v162)
      {
        LODWORD(v162) = *(_DWORD *)(v160 + 2664);
        break;
      }
    }
  }
  else
  {
    LODWORD(v162) = 0;
  }
  if (v161 != v162)
  {
    uint64_t v165 = v162;
    do
    {
      uint64_t v166 = v15;
      uint64_t v167 = *(void *)(*(void *)(v160 + 2648) + 24 * v165 + 16);
      if (v167) {
        id v168 = (id)(v167 + 8);
      }
      uint64_t v169 = *(unsigned int *)(v167 + 496);
      if (v169)
      {
        uint64_t v170 = 0;
        unint64_t v171 = (int *)(*(void *)(v167 + 480) + 8);
        while (1)
        {
          int v172 = *v171;
          v171 += 6;
          if (v172 < 0) {
            break;
          }
          if (v169 == ++v170)
          {
            LODWORD(v170) = *(_DWORD *)(v167 + 496);
            break;
          }
        }
      }
      else
      {
        LODWORD(v170) = 0;
      }
      if (v169 != v170)
      {
        uint64_t v173 = v170;
        do
        {
          if (*(void *)(*(void *)(v167 + 480) + 24 * v173 + 16))
          {
            RESyncRetain();
            RESyncServiceRemoveSyncable();
            RESyncRelease();
          }
          else
          {
            RESyncServiceRemoveSyncable();
          }
          if (*(_DWORD *)(v167 + 496) <= (v170 + 1)) {
            int v174 = v170 + 1;
          }
          else {
            int v174 = *(_DWORD *)(v167 + 496);
          }
          while (1)
          {
            uint64_t v173 = (v170 + 1);
            if (v174 - 1 == v170) {
              break;
            }
            LODWORD(v170) = v170 + 1;
            int v175 = v173;
            if ((*(_DWORD *)(*(void *)(v167 + 480) + 24 * v173 + 8) & 0x80000000) != 0) {
              goto LABEL_272;
            }
          }
          int v175 = v174;
LABEL_272:
          LODWORD(v170) = v175;
        }
        while (v169 != v175);
      }
      re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(v167 + 464);
      if (v167) {

      }
      if (*(_DWORD *)(v160 + 2664) <= (v162 + 1)) {
        int v176 = v162 + 1;
      }
      else {
        int v176 = *(_DWORD *)(v160 + 2664);
      }
      uint64_t v15 = v166;
      while (1)
      {
        uint64_t v165 = (v162 + 1);
        if (v176 - 1 == v162) {
          break;
        }
        LODWORD(v162) = v162 + 1;
        int v177 = v165;
        if ((*(_DWORD *)(*(void *)(v160 + 2648) + 24 * v165 + 8) & 0x80000000) != 0) {
          goto LABEL_283;
        }
      }
      int v177 = v176;
LABEL_283:
      LODWORD(v162) = v177;
    }
    while (v161 != v177);
    uint64_t v160 = *(void *)(v1 + 144);
  }
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v160 + 2344);
  re::NetworkSystem::clearRemoteDirty(*(re::NetworkSystem **)(v1 + 144));
  if (v15)
  {
    re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear(*(void *)(v1 + 144) + 2632);
    RESyncRelease();
  }
  if (v188) {
    re::Event<re::GeometricObjectBase>::raise(*(void *)(v1 + 144) + 1848, *(void *)(v1 + 144));
  }
  re::Event<re::GeometricObjectBase>::raise(*(void *)(v1 + 144) + 1584, *(void *)(v1 + 144));
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v198);
  if (v185)
  {
    if (*((void *)v185 + 19))
    {
      uint64_t v178 = mach_absolute_time();
      long long v179 = (int64x2_t *)*((void *)v185 + 19);
      if (v179)
      {
        unint64_t v180 = v179[496].u64[0];
        if (v180 >= v178 - (unint64_t)v183) {
          unint64_t v180 = v178 - (void)v183;
        }
        v179[496].i64[0] = v180;
        unint64_t v181 = v179[496].u64[1];
        if (v181 <= v178 - (unint64_t)v183) {
          unint64_t v181 = v178 - (void)v183;
        }
        v179[496].i64[1] = v181;
        int64x2_t v182 = vdupq_n_s64(1uLL);
        v182.i64[0] = v178 - (void)v183;
        v179[497] = vaddq_s64(v179[497], v182);
        *((unsigned char *)v185 + 184) = 0;
      }
    }
  }
}

void re::NetworkSystem::enumerateRemoteDirtyComponents<void({block_pointer})(re::SharedPtr<re::ecs2::NetworkComponent>)>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 2664);
  if (v4)
  {
    uint64_t v5 = 0;
    int v6 = (int *)(*(void *)(a1 + 2648) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 6;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 2664);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    do
    {
      uint64_t v9 = *a2;
      uint64_t v10 = *(void *)(*(void *)(a1 + 2648) + 24 * v8 + 16);
      uint64_t v14 = v10;
      if (v10) {
        id v11 = (id)(v10 + 8);
      }
      (*(void (**)(uint64_t, uint64_t *))(v9 + 16))(v9, &v14);
      if (v14)
      {

        uint64_t v14 = 0;
      }
      if (*(_DWORD *)(a1 + 2664) <= (v5 + 1)) {
        int v12 = v5 + 1;
      }
      else {
        int v12 = *(_DWORD *)(a1 + 2664);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v12 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v13 = v8;
        if ((*(_DWORD *)(*(void *)(a1 + 2648) + 24 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_20;
        }
      }
      int v13 = v12;
LABEL_20:
      LODWORD(v5) = v13;
    }
    while (v4 != v13);
  }
}

void ___ZNK2re4ecs217NetworkSendSystem6updateENS0_6System13UpdateContextE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(unsigned int *)(*a2 + 496);
  if (v4)
  {
    uint64_t v5 = 0;
    int v6 = (int *)(*(void *)(v3 + 480) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 6;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(*a2 + 496);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    do
    {
      if (*(void *)(*(void *)(v3 + 480) + 24 * v8 + 16))
      {
        RESyncRetain();
        RESyncServiceRemoveSyncable();
        RESyncRelease();
      }
      else
      {
        RESyncServiceRemoveSyncable();
      }
      if (*(_DWORD *)(v3 + 496) <= (v5 + 1)) {
        int v9 = v5 + 1;
      }
      else {
        int v9 = *(_DWORD *)(v3 + 496);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v9 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v10 = v8;
        if ((*(_DWORD *)(*(void *)(v3 + 480) + 24 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_19;
        }
      }
      int v10 = v9;
LABEL_19:
      LODWORD(v5) = v10;
    }
    while (v4 != v10);
    uint64_t v3 = *a2;
  }
  re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(v3 + 464);
  uint64_t v11 = *a2 + 512;
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(v11);
}

void re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_180, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          if (*(void *)(v6 + 16))
          {
            RESyncRelease();
            *(void *)(v6 + 16) = 0;
            unint64_t v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

_anonymous_namespace_ *___ZNK2re4ecs217NetworkSendSystem6updateENS0_6System13UpdateContextE_block_invoke_2(_anonymous_namespace_ *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *((void *)result + 4);
    uint64_t result = *(_anonymous_namespace_ **)(v2 + 32);
    if (!result || (uint64_t result = (_anonymous_namespace_ *)RESyncableIsAuthoritative(), result))
    {
      uint64_t v4 = *(void *)(v2 + 16);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = *(void *)(v4 + 24);
        }
        while (v4);
        if (*(void *)(v5 + 16))
        {
          unint64_t v6 = *(void *)(v3 + 112);
          unint64_t v7 = *(void *)(v3 + 120);
          if (v7 >= v6)
          {
            unint64_t v8 = v7 + 1;
            if (v6 < v7 + 1)
            {
              if (*(void *)(v3 + 104))
              {
                uint64_t v9 = 2 * v6;
                BOOL v10 = v6 == 0;
                unint64_t v11 = 8;
                if (!v10) {
                  unint64_t v11 = v9;
                }
                if (v11 <= v8) {
                  unint64_t v12 = v8;
                }
                else {
                  unint64_t v12 = v11;
                }
                uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)(v3 + 104), v12);
              }
              else
              {
                uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)(v3 + 104), v8);
                ++*(_DWORD *)(v3 + 128);
              }
            }
            unint64_t v7 = *(void *)(v3 + 120);
          }
          *(void *)(*(void *)(v3 + 136) + 8 * v7) = v2;
          *(void *)(v3 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = v7 + 1;
          ++*(_DWORD *)(v3 + 128);
        }
      }
    }
  }
  return result;
}

void re::ecs2::NetworkSendSystem::writeEntity(uint64_t a1, re::snapshot::Encoder *this, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)buf = *(void *)(v6 + 296);
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
  char v7 = *(unsigned char *)(a3 + 50);
  int v8 = *(unsigned char *)(a3 + 48) & 1 | (2 * (v7 & 1));
  buf[0] = *(unsigned char *)(a3 + 48) & 1 | (2 * (v7 & 1));
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 1uLL);
  if (v8)
  {
    buf[0] = (*(unsigned char *)(v6 + 288) & 8) != 0;
    re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 1uLL);
    if (!*(unsigned char *)(a3 + 617) && (uint64_t v54 = *(void *)(v6 + 24)) != 0 && *(void *)(v54 + 200)) {
      *(void *)buf = *(void *)(v54 + 296);
    }
    else {
      *(void *)buf = 0;
    }
    re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
    buf[0] = *(unsigned char *)(a3 + 560);
    re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 1uLL);
    size_t v9 = strlen(*(const char **)(v6 + 280));
    re::snapshot::EncoderRaw::serializeString((unsigned int *)this, *(const char **)(v6 + 280), v9);
    if (kdebug_is_enabled())
    {
      re::packCharArrayToUInt64ForAriadne(*(re **)(*(void *)(a3 + 16) + 280), 0);
      kdebug_trace();
    }
  }
  if (*(unsigned char *)(a3 + 50))
  {
    uint64_t v34 = *(void *)(v6 + 56);
    if (v34)
    {
      uint64_t v35 = *(_anonymous_namespace_ ***)(v6 + 72);
      uint64_t v36 = 8 * v34;
      do
      {
        *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(void))(*(void *)*v35 + 40))() + 16);
        if (!re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains(a3 + 416, (unsigned __int16 *)buf))
        {
          {
            *(void *)buf = *(void *)((*(uint64_t (**)(void))(*(void *)*v35 + 40))() + 24) >> 1;
            re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
            uint64_t v38 = re::NetworkSystem::encodeComponent(*(void *)(a1 + 144), (unsigned int *)this, *v35);
            if ((v38 & 1) == 0)
            {
              uint64_t v39 = *re::ecsNetworkLogObjects((re *)v38);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
              {
                uint64_t v40 = *(void *)((*(uint64_t (**)(void))(*(void *)*v35 + 40))() + 32);
                uint64_t v41 = *(void *)(v6 + 280);
                uint64_t v42 = *(void *)(v6 + 296);
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = v40;
                __int16 v56 = 2080;
                uint64_t v57 = v41;
                __int16 v58 = 2048;
                uint64_t v59 = v42;
                _os_log_error_impl(&dword_233120000, v39, OS_LOG_TYPE_ERROR, "[NetworkComponent] Failed to serialize component %s for entity %s(%llu)", buf, 0x20u);
              }
            }
          }
        }
        ++v35;
        v36 -= 8;
      }
      while (v36);
    }
  }
  else
  {
    unint64_t FirstBitSet = (re *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a3 + 312, 0);
    if (FirstBitSet != (re *)-1)
    {
      unint64_t v11 = FirstBitSet;
      int8x16_t v12 = (int8x16_t)xmmword_23436BBD0;
      do
      {
        unint64_t v13 = *(unsigned __int16 *)(*(void *)(a3 + 120) + 2 * (void)v11);
        uint64_t v14 = *(void *)(a1 + 144);
        if (*(void *)(v14 + 2824) > v13 && (uint64_t v15 = *(const __int16 **)(*(void *)(v14 + 2840) + 8 * v13)) != 0)
        {
          uint64_t v16 = *(unsigned __int16 *)(v6 + 82);
          if (!*(_WORD *)(v6 + 82)) {
            goto LABEL_24;
          }
          uint64_t v17 = v15 + 8;
          uint64_t v18 = *(int16x8_t **)(v6 + 88);
          int16x8_t v19 = vld1q_dup_s16(v17);
          int v20 = 1;
          while (1)
          {
            uint16x8_t v21 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v19, *v18), v12);
            v21.i16[0] = vmaxvq_u16(v21);
            if (v21.i32[0]) {
              break;
            }
            v20 -= 8;
            ++v18;
            if (!--v16) {
              goto LABEL_24;
            }
          }
          if (v21.u16[0] - v20 < *(unsigned __int16 *)(v6 + 80))
          {
            uint64_t v23 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)v15);
            {
              *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v23 + 40))(v23)
                                       + 16);
              if (!re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains(a3 + 416, (unsigned __int16 *)buf))
              {
                *(void *)buf = *(void *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v23 + 40))(v23)
                                           + 24) >> 1;
                re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
                uint64_t v25 = re::NetworkSystem::encodeComponent(*(void *)(a1 + 144), (unsigned int *)this, v23);
                if ((v25 & 1) == 0)
                {
                  unint64_t v26 = *re::ecsNetworkLogObjects((re *)v25);
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v27 = *(void *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v23 + 40))(v23)
                                    + 32);
                    uint64_t v28 = *(void *)(v6 + 280);
                    uint64_t v29 = *(void *)(v6 + 296);
                    *(_DWORD *)buf = 136315650;
                    *(void *)&uint8_t buf[4] = v27;
                    __int16 v56 = 2080;
                    uint64_t v57 = v28;
                    __int16 v58 = 2048;
                    uint64_t v59 = v29;
                    _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "[NetworkComponent] Failed to serialize component %s for entity %s(%llu)", buf, 0x20u);
                  }
                }
              }
            }
          }
          else
          {
LABEL_24:
            char v30 = *re::ecsNetworkLogObjects(FirstBitSet);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v31 = *(void *)(v6 + 280);
              uint64_t v32 = *(void *)(v6 + 296);
              uint64_t v33 = *((void *)v15 + 4);
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = v31;
              __int16 v56 = 2048;
              uint64_t v57 = v32;
              __int16 v58 = 2080;
              uint64_t v59 = v33;
              __int16 v60 = 1024;
              int v61 = v13;
              _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Entity %s(%llu) no longer has dirty component of type %s(shortID == %d)", buf, 0x26u);
            }
          }
        }
        else
        {
          uint64_t v22 = *re::ecsNetworkLogObjects(FirstBitSet);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v13;
            _os_log_fault_impl(&dword_233120000, v22, OS_LOG_TYPE_FAULT, "[NetworkComponent] No componentType for localID %d", buf, 8u);
          }
        }
        unint64_t FirstBitSet = (re *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a3 + 312, (unint64_t)v11 + 1);
        unint64_t v11 = FirstBitSet;
        int8x16_t v12 = (int8x16_t)xmmword_23436BBD0;
      }
      while (FirstBitSet != (re *)-1);
    }
  }
  *(void *)buf = 0;
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
  uint64_t v43 = *(unsigned int *)(a3 + 544);
  if (v43)
  {
    uint64_t v44 = 0;
    unint64_t v45 = (int *)(*(void *)(a3 + 528) + 8);
    while (1)
    {
      int v46 = *v45;
      v45 += 4;
      if (v46 < 0) {
        break;
      }
      if (v43 == ++v44)
      {
        LODWORD(v44) = *(_DWORD *)(a3 + 544);
        break;
      }
    }
  }
  else
  {
    LODWORD(v44) = 0;
  }
  if (v43 != v44)
  {
    uint64_t v47 = v44;
    do
    {
      *(void *)buf = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 144) + 2840)
                                             + 8 * *(unsigned __int16 *)(*(void *)(a3 + 528) + 16 * v47 + 12))
                                 + 24) >> 1;
      re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
      if (*(_DWORD *)(a3 + 544) <= (v44 + 1)) {
        int v48 = v44 + 1;
      }
      else {
        int v48 = *(_DWORD *)(a3 + 544);
      }
      int v49 = v44;
      while (1)
      {
        uint64_t v47 = (v49 + 1);
        if (v48 - 1 == v49) {
          break;
        }
        ++v49;
        LODWORD(v44) = v47;
        if ((*(_DWORD *)(*(void *)(a3 + 528) + 16 * v47 + 8) & 0x80000000) != 0) {
          goto LABEL_52;
        }
      }
      LODWORD(v44) = v48;
LABEL_52:
      ;
    }
    while (v43 != v44);
  }
  *(void *)buf = 0;
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
  *(unsigned char *)(a3 + 48) &= ~1u;
  *(unsigned char *)(a3 + 50) &= ~1u;
  int v50 = *(_DWORD *)(a3 + 328);
  if (v50) {
    uint64_t v51 = (void *)(a3 + 336);
  }
  else {
    uint64_t v51 = *(void **)(a3 + 344);
  }
  uint64_t v52 = *(void *)(a3 + 320);
  while (1)
  {
    uint64_t v53 = a3 + 336;
    if ((v50 & 1) == 0) {
      uint64_t v53 = *(void *)(a3 + 344);
    }
    if (v51 == (void *)(v53 + 8 * v52)) {
      break;
    }
    *v51++ = 0;
    int v50 = *(_DWORD *)(a3 + 328);
  }
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a3 + 512);
}

uint64_t anonymous namespace'::supportsNetworkSync(_anonymous_namespace_ *this, const re::ecs2::Component *a2)
{
  uint64_t v2 = (*(uint64_t (**)(_anonymous_namespace_ *, const re::ecs2::Component *))(*(void *)this + 40))(this, a2);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2)) {
    return 1;
  }
  return RESyncSyncableTypeInfoSupportsNetworkSync();
}

void re::ecs2::NetworkSendSystem::buildComponentSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  re::ecs2::NetworkComponent::getComponentBoundTo((uint64_t)&v15, a2);
  uint64_t v2 = v15;
  if (v15)
  {
    uint64_t v3 = re::ecs2::IntrospectedNetworkTypeHelper::serialize();
    if (v3)
    {
      if ((_UNKNOWN *)(*(uint64_t (**)(void *))(*v2 + 40))(v2) == re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
        && kdebug_is_enabled())
      {
        kdebug_trace();
      }
      if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      {
        uint64_t v4 = (*(uint64_t (**)(void *))(*v2 + 40))(v2);
        re::packCharArrayToUInt64ForAriadne(*(re **)(v4 + 32), 0);
        kdebug_trace();
      }
      if (re::internal::enableHighFrequencyNetworkTracing(0, 0))
      {
        uint64_t v5 = v2[2];
        uint64_t v6 = *(void *)(v5 + 200);
        if (v6)
        {
          int v7 = re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v5 + 200));
          if (v7)
          {
            int v8 = v7;
            size_t v9 = *(unsigned char *)(v6 + 560) ? "Remote" : "Local";
            BOOL v10 = (re *)(*(unsigned char *)(v6 + 560) == 1 ? "Shared" : v9);
            re::packCharArrayToUInt64ForAriadne(v10, 0);
            if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
            {
              uint64_t v11 = (*(uint64_t (**)(void *))(*v2 + 40))(v2);
              re::packCharArrayToUInt64ForAriadne(*(re **)(v11 + 32), 0);
              if (v8 == 1) {
                int8x16_t v12 = "Local";
              }
              else {
                int8x16_t v12 = "Remote";
              }
              re::packCharArrayToUInt64ForAriadne((re *)v12, 0);
              kdebug_trace();
            }
          }
        }
      }
    }
    else
    {
      unint64_t v13 = *re::ecsNetworkLogObjects((re *)v3);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        uint64_t v14 = *(void *)((*(uint64_t (**)(void *))(*v2 + 40))(v2) + 32);
        *(_DWORD *)buf = 136380675;
        uint64_t v17 = v14;
        _os_log_fault_impl(&dword_233120000, v13, OS_LOG_TYPE_FAULT, "Failed to serialize component of type '%{private}s'", buf, 0xCu);
      }
    }
  }
}

uint64_t re::ecs2::NetworkComponent::findSyncService(re::ecs2::NetworkComponent *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = (void *)(v1 + 8);
  id v4 = (id)(v1 + 8);
  do
  {
    uint64_t v5 = v1;
    uint64_t v1 = *(void *)(v1 + 24);
  }
  while (v1);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6 && *(void *)(v6 + 56) && (uint64_t v7 = *((void *)this + 7)) != 0) {
    uint64_t v8 = *(void *)(v7 + 2560);
  }
  else {
    uint64_t v8 = 0;
  }

  return v8;
}

BOOL re::ecs2::NetworkComponent::shouldCaptureForSnapshot(re::ecs2::NetworkComponent *this)
{
  if ((*((unsigned char *)this + 48) & 2) != 0) {
    return 1;
  }
  int v1 = *((_DWORD *)this + 94);
  uint64_t v2 = (v1 & 1) != 0
     ? (re::ecs2::NetworkComponent *)((char *)this + 384)
     : (re::ecs2::NetworkComponent *)*((void *)this + 49);
  for (uint64_t i = 0; ; i += v6.u32[0])
  {
    id v4 = (char *)this + 384;
    if ((v1 & 1) == 0) {
      id v4 = (char *)*((void *)this + 49);
    }
    if (v2 == (re::ecs2::NetworkComponent *)&v4[8 * *((void *)this + 46)]) {
      break;
    }
    int8x8_t v5 = *(int8x8_t *)v2;
    uint64_t v2 = (re::ecs2::NetworkComponent *)((char *)v2 + 8);
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
  }
  return i || *((_DWORD *)this + 123) != 0;
}

uint64_t re::ecs2::NetworkComponent::isWritable(re::ecs2::NetworkComponent *this)
{
  if (*((void *)this + 4) && (RESyncableIsAuthoritative() & 1) == 0) {
    return RESyncableIsLocked() ^ 1;
  }
  else {
    return 1;
  }
}

re::ecs2::NetworkComponent *re::ecs2::NetworkComponent::requestOwnership(re::ecs2::NetworkComponent *this, BOOL a2, const void *a3, double a4)
{
  if (*((void *)this + 4))
  {
    this = (re::ecs2::NetworkComponent *)re::ecs2::NetworkComponent::findSyncService(this);
    if (this)
    {
      v5.n128_f64[0] = a4;
      return (re::ecs2::NetworkComponent *)MEMORY[0x270F59580](v5);
    }
  }
  return this;
}

void re::ecs2::NetworkComponent::handOff(re::ecs2::NetworkComponent *this)
{
  if (*((void *)this + 4))
  {
    RESyncableHandoffOwnership();
    re::ecs2::NetworkComponent::markEntityDirty(this, (re::ecs2::NetworkComponent *)3);
  }
}

void re::ecs2::NetworkComponent::markEntityDirty(re::ecs2::NetworkComponent *this, re::ecs2::NetworkComponent *a2)
{
  if (!*((unsigned char *)this + 49))
  {
    *((unsigned char *)this + 48) |= a2;
    uint64_t v3 = *((void *)this + 7);
    if (v3)
    {
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v3 + 616, v3);
    }
  }
}

void anonymous namespace'::addToSystemDirtySet(_anonymous_namespace_ *this, re::NetworkSystem *a2, re::ecs2::NetworkComponent *a3)
{
  if (this)
  {
    char v3 = (char)a3;
    if (a2)
    {
      uint8x8_t v6 = (char *)a2 + 8;
      if ((v3 & 1) == 0)
      {
        if ((v3 & 2) == 0)
        {
LABEL_19:

          return;
        }
        size_t v9 = a2;
        goto LABEL_15;
      }
      BOOL v10 = a2;
      uint64_t v7 = (char *)a2 + 8;
    }
    else
    {
      if ((a3 & 1) == 0)
      {
        if ((a3 & 2) == 0) {
          return;
        }
        size_t v9 = 0;
        goto LABEL_16;
      }
      BOOL v10 = 0;
    }
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add((uint64_t)this + 2584, (uint64_t *)&v10);
    if (v10)
    {

      BOOL v10 = 0;
    }
    if ((v3 & 2) == 0)
    {
LABEL_18:
      if (!a2) {
        return;
      }
      goto LABEL_19;
    }
    size_t v9 = a2;
    if (!a2)
    {
LABEL_16:
      re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add((uint64_t)this + 2632, (uint64_t *)&v9);
      if (v9)
      {

        size_t v9 = 0;
      }
      goto LABEL_18;
    }
LABEL_15:
    uint64_t v8 = (char *)a2 + 8;
    goto LABEL_16;
  }
}

void re::ecs2::NetworkComponent::createSyncObjectForLocalComponent(uint64_t *a1, re::NetworkSystem **a2, _anonymous_namespace_ *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
    goto LABEL_11;
  *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 40))(this) + 16);
  if (re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains((uint64_t)(a2 + 52), (unsigned __int16 *)buf))
  {
    goto LABEL_11;
  }
  re::ecs2::NetworkComponent::findSyncService((re::ecs2::NetworkComponent *)a2);
  (*(void (**)(_anonymous_namespace_ *))(*(void *)this + 40))(this);
  if (!RESyncServiceGetTypeInfo())
  {
    re::NetworkSystem::prepareObjectStores(a2[7]);
    (*(void (**)(_anonymous_namespace_ *))(*(void *)this + 40))(this);
    if (!RESyncServiceGetTypeInfo())
    {
      uint64_t v7 = *re::ecsNetworkLogObjects(0);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 40))(this) + 24) >> 1;
        uint64_t v9 = *(void *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 40))(this) + 32);
        *(_DWORD *)buf = 134218243;
        uint64_t v12 = v8;
        __int16 v13 = 2081;
        uint64_t v14 = v9;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[NetworkComponent] No storage has been registered for component type %llu(%{private}s).", buf, 0x16u);
      }
      goto LABEL_11;
    }
  }
  if ((RESyncSyncableTypeInfoSupportsNetworkSync() & 1) == 0)
  {
LABEL_11:
    *a1 = 0;
    return;
  }
  uint64_t SyncableWithTypeInfo = RESyncServiceCreateSyncableWithTypeInfo();
  *a1 = SyncableWithTypeInfo;
  MEMORY[0x237DBC0E0]();
  uint64_t v10 = SyncableWithTypeInfo;
  if (SyncableWithTypeInfo)
  {
    RESyncRetain();
    re::ecs2::NetworkComponent::bindComponentToSyncable((uint64_t)a2, (uint64_t)this, &v10);
    RESyncRelease();
  }
  else
  {
    re::ecs2::NetworkComponent::bindComponentToSyncable((uint64_t)a2, (uint64_t)this, &v10);
  }
}

void re::ecs2::NetworkComponent::markDirty(re::ecs2::NetworkComponent *this, const re::ecs2::Component *a2)
{
  {
    if (*((void *)this + 4))
    {
      id v4 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(const re::ecs2::Component *))(*(void *)a2 + 40))(a2);
      re::ecs2::NetworkComponentInfo::markDirty((re::ecs2::NetworkComponent *)((char *)this + 112), v4, 3);
    }
    if (*((void *)this + 7))
    {
      __n128 v5 = (re::ecs2::EntityComponentCollection *)(*((void *)a2 + 2) + 32);
      uint8x8_t v6 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(const re::ecs2::Component *))(*(void *)a2 + 40))(a2);
      re::ecs2::EntityComponentCollection::get(v5, v6);
      uint64_t v7 = *((void *)this + 7);
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v7 + 880, v7);
    }
  }
}

void re::ecs2::NetworkComponent::disableSyncForComponent(_anonymous_namespace_ **this, const re::ecs2::Component *a2)
{
  id v4 = (char *)(this + 52);
  __int16 v10 = *(_WORD *)((*(uint64_t (**)(const re::ecs2::Component *))(*(void *)a2 + 40))(a2) + 16);
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addNew((uint64_t)v4, &v10);
  if (this[4])
  {
    if (RESyncableIsAuthoritative())
    {
      __n128 v5 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(const re::ecs2::Component *))(*(void *)a2 + 40))(a2);
      uint64_t v6 = re::ecs2::NetworkComponentInfo::get((re::ecs2::NetworkComponentInfo *)(this + 14), v5);
      if (v6)
      {
        uint64_t v7 = v6;
        re::ecs2::NetworkComponent::unbindComponentFromSyncable((uint64_t)this, (uint64_t)a2, v6);
        uint64_t v9 = v7;
        RESyncRetain();
        re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::add((uint64_t)(this + 58), &v9);
        if (v9) {
          RESyncRelease();
        }
        __int16 v8 = *(_WORD *)((*(uint64_t (**)(const re::ecs2::Component *))(*(void *)a2 + 40))(a2) + 16);
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addNew((uint64_t)(this + 64), &v8);
      }
    }
  }
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 24 * v9;
  return v11 + 16;
}

BOOL re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v3) ^ ((0xBF58476D1CE4E5B9 * v3) >> 27));
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v4 ^ (v4 >> 31)) % v2));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (*(unsigned __int16 *)(v7 + 16 * v5 + 12) == v3) {
    return 1;
  }
  do
  {
    uint64_t v5 = *(_DWORD *)(v7 + 16 * v5 + 8) & 0x7FFFFFFF;
    BOOL result = v5 != 0x7FFFFFFF;
  }
  while (v5 != 0x7FFFFFFF && *(unsigned __int16 *)(v7 + 16 * v5 + 12) != v3);
  return result;
}

void re::ecs2::NetworkComponent::setNetworkShareMode(re::ecs2::NetworkComponent *a1, int a2)
{
  if (*((unsigned __int8 *)a1 + 560) != a2)
  {
    *((unsigned char *)a1 + 560) = a2;
    re::ecs2::NetworkComponent::markEntityDirty(a1, (re::ecs2::NetworkComponent *)3);
    re::ecs2::NetworkComponent::resolveViews((uint64_t)a1, 0);
  }
}

void re::ecs2::NetworkComponent::setHost(re::ecs2::NetworkComponent *this, re::ecs2::Entity *a2)
{
  int v3 = a2 != 0;
  unint64_t v4 = (re::ecs2::Entity *)*((void *)this + 2);
  uint64_t v5 = (re::ecs2::Entity *)*((void *)v4 + 3);
  if (v5 && (*((unsigned char *)v5 + 288) & 0x80) != 0) {
    uint64_t v5 = 0;
  }
  if (v5 != a2 || *((unsigned __int8 *)this + 617) != v3)
  {
    *((unsigned char *)this + 617) = v3;
    re::ecs2::Entity::setParentInternal(v4, a2, 0xFFFFFFFFFFFFFFFFLL);
    re::ecs2::NetworkComponent::markEntityDirty(this, (re::ecs2::NetworkComponent *)3);
  }
}

uint64_t re::ecs2::NetworkComponent::setAccessControl(uint64_t a1, uint64_t *a2)
{
  ++re::NetworkSystem::setAclCount;
  if (*(unsigned char *)(a1 + 616)) {
    return 0;
  }
  int v10 = *(_DWORD *)a2;
  re::DynamicArray<re::ecs2::SyncAccessControlEntry>::DynamicArray((uint64_t)v11, a2 + 1);
  unint64_t v5 = 126 - 2 * __clz(v12);
  if (v12) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *,false>(v13, v13 + 16 * v12, (uint64_t)&v14, v6, 1);
  if (v10 != *(_DWORD *)(a1 + 568) || v12 != *(void *)(a1 + 592)) {
    goto LABEL_18;
  }
  if (v12)
  {
    unint64_t v7 = v13;
    uint64_t v8 = *(void *)(a1 + 608);
    while (*(void *)v7 == *(void *)v8 && *(_DWORD *)(v7 + 8) == *(_DWORD *)(v8 + 8))
    {
      v7 += 16;
      v8 += 16;
      if (v7 == v13 + 16 * v12) {
        goto LABEL_17;
      }
    }
LABEL_18:
    *(_DWORD *)(a1 + 568) = v10;
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(a1 + 576, (uint64_t)v11);
    re::ecs2::NetworkComponent::resolveViews(a1, 0);
    uint64_t v2 = 1;
    goto LABEL_19;
  }
LABEL_17:
  uint64_t v2 = 0;
LABEL_19:
  if (v11[0] && v13) {
    (*(void (**)(void))(*(void *)v11[0] + 40))();
  }
  return v2;
}

uint64_t re::ecs2::NetworkComponent::onAdded(uint64_t this, re::NetworkSystem *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *(void *)(this + 56) = a2;
  if (!a2) {
    return this;
  }
  uint64_t v2 = this;
  if (re::internal::enableSignposts(0, 0)
    && re::internal::enableHighFrequencyNetworkTracing(0, 0)
    && re::internal::enableSignposts(0, 0))
  {
    re::packCharArrayToUInt64ForAriadne(*(re **)(*(void *)(v2 + 16) + 280), 0);
    kdebug_trace();
  }
  unint64_t v4 = (void *)(v2 + 32);
  int v3 = *(re **)(v2 + 32);
  if (!v3)
  {
    re::ecs2::NetworkComponent::findSyncService((re::ecs2::NetworkComponent *)v2);
    SyncableWithunint64_t TypeId = (re *)RESyncServiceCreateSyncableWithTypeId();
    if (*(re **)(v2 + 32) != SyncableWithTypeId) {
      RESyncableRefRetainer::reset((uint64_t *)(v2 + 32), (uint64_t)SyncableWithTypeId);
    }
    if (SyncableWithTypeId) {
      RESyncRelease();
    }
    uint64_t v6 = (re::NetworkSystemFeatureFlags *)re::ecs2::NetworkComponent::bindEntityTo(SyncableWithTypeId, *(void *)(v2 + 16));
    unint64_t v7 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(v6);
    if (v7)
    {
      uint64_t v8 = *re::ecsNetworkLogObjects(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(v2 + 16);
        int v10 = *(_anonymous_namespace_ **)(v9 + 280);
        uint64_t v11 = *(void *)(v9 + 296);
        *(_DWORD *)buf = 136381187;
        uint64_t v34 = v10;
        __int16 v35 = 2048;
        uint64_t v36 = v11;
        __int16 v37 = 2048;
        uint64_t Guid = RESyncableGetGuid();
        _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Binding entity '%{private}s' %llu to syncable %llu", buf, 0x20u);
      }
    }
    if (*(unsigned char *)(v2 + 51) == 1)
    {
      if (!*v4)
      {
        *(unsigned char *)(v2 + 51) = 1;
        goto LABEL_23;
      }
    }
    else
    {
      if (*(unsigned char *)(v2 + 51))
      {
LABEL_23:
        RESyncableSetMigrateWhenAbandoned();
        re::ecs2::NetworkComponent::markEntityDirty((re::ecs2::NetworkComponent *)v2, (re::ecs2::NetworkComponent *)3);
        unint64_t v12 = *(void **)(v2 + 16);
        uint64_t v13 = v12[7];
        if (v13)
        {
          char v14 = (_anonymous_namespace_ **)v12[9];
          uint64_t v15 = 8 * v13;
          do
          {
            uint64_t v16 = *v14;
            re::ecs2::NetworkComponent::createSyncObjectForLocalComponent(&v32, (re::NetworkSystem **)v2, *v14);
            if (v32)
            {
              uint64_t v17 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v16 + 40))(v16);
              re::ecs2::NetworkComponentInfo::markDirty((re::ecs2::NetworkComponentInfo *)(v2 + 112), v17, 3);
              int16x8_t v19 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(v18);
              if (v19)
              {
                int v20 = *re::ecsNetworkLogObjects(v19);
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v21 = *(void *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v16 + 40))(v16)
                                  + 32);
                  uint64_t v22 = *(void *)(*(void *)(v2 + 16) + 296);
                  uint64_t v23 = RESyncableGetGuid();
                  uint64_t v24 = RESyncableGetGuid();
                  *(_DWORD *)buf = 134219011;
                  uint64_t v34 = v16;
                  __int16 v35 = 2081;
                  uint64_t v36 = v21;
                  __int16 v37 = 2048;
                  uint64_t Guid = v22;
                  __int16 v39 = 2048;
                  uint64_t v40 = v23;
                  __int16 v41 = 2048;
                  uint64_t v42 = v24;
                  _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "[NetworkComponent], Binding component %p(%{private}s) in authoritative entity %llu(%llu) to syncable %llu", buf, 0x34u);
                }
              }
              RESyncRelease();
            }
            ++v14;
            v15 -= 8;
          }
          while (v15);
          unint64_t v12 = *(void **)(v2 + 16);
        }
        uint64_t v25 = v12[41];
        if (v25)
        {
          uint64_t v26 = v12[43];
          uint64_t v27 = 8 * v25;
          do
          {
            uint64_t v28 = *(re::ecs2::NetworkComponent **)(*(void *)v26 + 200);
            if (v28 && *((void *)v28 + 4)) {
              re::ecs2::NetworkComponent::markEntityDirty(v28, (re::ecs2::NetworkComponent *)3);
            }
            v26 += 8;
            v27 -= 8;
          }
          while (v27);
        }
        *(unsigned char *)(v2 + 50) = 3;
        re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(void *)(v2 + 56) + 528, *(void *)(v2 + 56));
        re::ecs2::NetworkComponent::resolveViews(v2, 0);
        uint64_t v29 = *(void *)(v2 + 56);
        uint64_t v30 = *(void *)(v2 + 16);
        uint64_t v31 = *(void *)(v2 + 32);
        if (v31) {
          RESyncRetain();
        }
        re::NetworkSystem::entityAddedToScene(v29, v30, &v31);
        if (v31)
        {
          RESyncRelease();
          uint64_t v31 = 0;
        }
        goto LABEL_42;
      }
      if (!*v4)
      {
        *(unsigned char *)(v2 + 51) = 0;
        goto LABEL_23;
      }
    }
    RESyncableSetLocked();
    goto LABEL_23;
  }
  re::ecs2::NetworkComponent::bindEntityTo(v3, *(void *)(v2 + 16));
LABEL_42:
  this = re::internal::enableSignposts(0, 0);
  if (this)
  {
    this = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if (this)
    {
      this = re::internal::enableSignposts(0, 0);
      if (this)
      {
        re::packCharArrayToUInt64ForAriadne(*(re **)(*(void *)(v2 + 16) + 280), 0);
        if (*(void *)(v2 + 32)) {
          RESyncableGetGuid();
        }
        return kdebug_trace();
      }
    }
  }
  return this;
}

void re::ecs2::NetworkComponent::onRemoved(re::ecs2::NetworkComponent *this, int a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (*((unsigned char *)this + 176)) {
      int v3 = (void *)((char *)this + 184);
    }
    else {
      int v3 = (void *)*((void *)this + 24);
    }
    uint64_t v4 = *((void *)this + 21);
    if (v4)
    {
      uint64_t v5 = 8 * v4;
      do
      {
        if (*v3) {
          RESyncableSetUserData();
        }
        ++v3;
        v5 -= 8;
      }
      while (v5);
    }
    re::ecs2::NetworkComponentInfo::clearAll((uint64_t)this + 112);
  }
  if (*((void *)this + 7))
  {
    BOOL v6 = re::internal::enableSignposts(0, 0);
    if (v6)
    {
      BOOL v6 = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if (v6)
      {
        uint64_t v7 = *((void *)this + 7);
        re::packCharArrayToUInt64ForAriadne(*(re **)(*((void *)this + 2) + 280), 0);
        if (*((void *)this + 4)) {
          RESyncableGetGuid();
        }
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf, 6042, v7);
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf);
      }
    }
    uint64_t v8 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs((re::NetworkSystemFeatureFlags *)v6);
    if (v8)
    {
      uint64_t v9 = *re::ecsNetworkLogObjects(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *((void *)this + 2);
        uint64_t v11 = *(void *)(v10 + 280);
        uint64_t v12 = *(void *)(v10 + 296);
        uint64_t Guid = RESyncableGetGuid();
        *(_DWORD *)buf = 136381187;
        *(void *)&uint8_t buf[4] = v11;
        __int16 v31 = 2048;
        uint64_t v32 = v12;
        __int16 v33 = 2048;
        uint64_t v34 = Guid;
        _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Unbinding entity '%{private}s' %llu from syncable %llu", buf, 0x20u);
      }
    }
    if (!*((void *)this + 4) || RESyncableIsAuthoritative())
    {
      uint64_t v14 = *((void *)this + 7);
      if (v14)
      {
        uint64_t v15 = *((void *)this + 2);
        uint64_t v29 = *((void *)this + 4);
        if (v29) {
          RESyncRetain();
        }
        re::NetworkSystem::entityRemovedFromScene(v14, v15, &v29);
        if (v29)
        {
          RESyncRelease();
          uint64_t v29 = 0;
        }
        if (*((unsigned char *)this + 176)) {
          uint64_t v16 = (void *)((char *)this + 184);
        }
        else {
          uint64_t v16 = (void *)*((void *)this + 24);
        }
        uint64_t v17 = *((void *)this + 21);
        if (v17)
        {
          uint64_t v18 = 8 * v17;
          do
          {
            if (*v16) {
              RESyncableSetUserData();
            }
            ++v16;
            v18 -= 8;
          }
          while (v18);
        }
        re::ecs2::NetworkComponentInfo::clearAll((uint64_t)this + 112);
        re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*((void *)this + 7) + 704, *((void *)this + 7));
      }
    }
    if (RESyncableGetDirectView())
    {
      RESyncRetain();
      RESyncableSetDirectView();
      if (!RESyncViewGetObjectCount() && re::ecs2::NetworkComponent::findSyncService(this)) {
        RESyncServiceRemoveView();
      }
      RESyncRelease();
    }
    uint64_t v19 = *((void *)this + 5);
    if (v19)
    {

      *((void *)this + 5) = 0;
    }
    if (*((void *)this + 4))
    {
      RESyncableSetUserData();
      if (*((void *)this + 4))
      {
        RESyncRelease();
        *((void *)this + 4) = 0;
      }
    }
    *((unsigned char *)this + 48) &= 0xFCu;
    *((unsigned char *)this + 50) &= 0xFCu;
    int v20 = *((_DWORD *)this + 82);
    if (v20) {
      uint64_t v21 = (char *)this + 336;
    }
    else {
      uint64_t v21 = (char *)*((void *)this + 43);
    }
    uint64_t v22 = *((void *)this + 40);
    while (1)
    {
      uint64_t v23 = (char *)this + 336;
      if ((v20 & 1) == 0) {
        uint64_t v23 = (char *)*((void *)this + 43);
      }
      if (v21 == &v23[8 * v22]) {
        break;
      }
      *(void *)uint64_t v21 = 0;
      v21 += 8;
      int v20 = *((_DWORD *)this + 82);
    }
    int v24 = *((_DWORD *)this + 94);
    if (v24) {
      uint64_t v25 = (char *)this + 384;
    }
    else {
      uint64_t v25 = (char *)*((void *)this + 49);
    }
    uint64_t v26 = *((void *)this + 46);
    while (1)
    {
      uint64_t v27 = (char *)this + 384;
      if ((v24 & 1) == 0) {
        uint64_t v27 = (char *)*((void *)this + 49);
      }
      if (v25 == &v27[8 * v26]) {
        break;
      }
      *(void *)uint64_t v25 = 0;
      v25 += 8;
      int v24 = *((_DWORD *)this + 94);
    }
    re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear((uint64_t)this + 464);
    re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear((uint64_t)this + 512);
    *(void *)buf = this;
    uint64_t v28 = (char *)this + 8;
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove(*((void *)this + 7) + 2584, (uint64_t *)buf);
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove(*((void *)this + 7) + 2632, (uint64_t *)buf);
    *((void *)this + 7) = 0;
    if (*(void *)buf) {
  }
    }
}

uint64_t re::ecs2::NetworkComponent::resolveSelfView(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  double Current = CFAbsoluteTimeGetCurrent();
  ++re::NetworkSystem::resolveSelfViewCount;
  if (!re::ecs2::NetworkComponent::findSyncService((re::ecs2::NetworkComponent *)a1)
    || !*(void *)(a1 + 32)
    || (RESyncableIsDestroyed() & 1) != 0)
  {
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  DirectView = (re::ecs2::syncPolicy *)RESyncableGetDirectView();
  uint64_t v11 = DirectView;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12
    && (uint64_t v13 = *(void *)(v12 + 24)) != 0
    && (uint64_t v14 = *(void *)(v13 + 200)) != 0
    && (DirectView = *(re::ecs2::syncPolicy **)(v14 + 32)) != 0)
  {
    DirectView = (re::ecs2::syncPolicy *)RESyncableGetDirectView();
    uint64_t v15 = DirectView;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v43 = v11;
  if (!v11)
  {
    uint64_t v16 = 0;
    if (v15) {
      goto LABEL_23;
    }
LABEL_25:
    uint64_t v17 = 0;
    goto LABEL_26;
  }
  DirectView = (re::ecs2::syncPolicy *)RESyncViewGetUserData();
  uint64_t v16 = DirectView;
  if (!v15) {
    goto LABEL_25;
  }
LABEL_23:
  DirectView = (re::ecs2::syncPolicy *)RESyncViewGetUserData();
  uint64_t v17 = (uint64_t)DirectView;
LABEL_26:
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v42 = v15;
  if (v18 && (uint64_t v19 = *(void *)(v18 + 24)) != 0 && ((*(unsigned char *)(v19 + 288) & 0x80) == 0 || *(void *)(v19 + 200)))
  {
    if (v17)
    {
      int v20 = (int *)(v17 + 56);
      int v21 = *(unsigned __int8 *)(v17 + 104);
      uint64_t v22 = *(void *)(v19 + 200);
      if (v22 && *(void *)(v22 + 32))
      {
        Owneruint64_t PeerID = RESyncableGetOwnerPeerID();
        goto LABEL_36;
      }
    }
    else
    {
      int v20 = re::ecs2::syncPolicy::denyAll(DirectView);
      int v21 = 0;
    }
  }
  else
  {
    int v21 = 1;
    int v20 = re::ecs2::syncPolicy::allowAll(DirectView);
  }
  Owneruint64_t PeerID = 0;
LABEL_36:
  *(_DWORD *)buf = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  *(_OWORD *)&uint8_t buf[8] = 0uLL;
  int v48 = 0;
  re::ecs2::SyncAccessControl::inherit((uint64_t)buf, v20, (int *)(a1 + 568));
  if (*(unsigned char *)(a1 + 617))
  {
    uint64_t v44 = OwnerPeerID;
    LODWORD(v45) = 0;
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::removeStable(&buf[8], (uint64_t)&v44);
    if (*(void *)(a1 + 32)) {
      unint64_t v25 = RESyncableGetOwnerPeerID();
    }
    else {
      unint64_t v25 = 0;
    }
    re::ecs2::SyncAccessControl::addEntry(buf, v25, 0);
  }
  int v26 = *(unsigned __int8 *)(a1 + 560);
  if (v26 == 1) {
    int v27 = v21;
  }
  else {
    int v27 = 2;
  }
  if (v21 == v26 || v21 == 1) {
    unsigned int v29 = *(unsigned __int8 *)(a1 + 560);
  }
  else {
    unsigned int v29 = v27;
  }
  if (v16
    && *((unsigned __int8 *)v16 + 104) == v29
    && *(_DWORD *)buf == *((_DWORD *)v16 + 14)
    && v47 == *((void *)v16 + 10))
  {
    if (!v47) {
      goto LABEL_86;
    }
    uint64_t v30 = v49;
    uint64_t v31 = *((void *)v16 + 12);
    int v32 = 1;
    while (*(void *)v30 == *(void *)v31 && *(_DWORD *)(v30 + 8) == *(_DWORD *)(v31 + 8))
    {
      uint64_t v5 = 0;
      v30 += 16;
      v31 += 16;
      if (v30 == v49 + 16 * v47) {
        goto LABEL_82;
      }
    }
  }
  if (!v17
    || *(unsigned __int8 *)(v17 + 104) != v29
    || *(_DWORD *)buf != *(_DWORD *)(v17 + 56)
    || v47 != *(void *)(v17 + 80))
  {
LABEL_77:
    uint64_t v38 = re::globalAllocators(v24);
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v38[2] + 32))(v38[2], 120, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v39, 0);
    *(void *)uint64_t v39 = &unk_26E704570;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 24) = 0u;
    re::DynamicString::setCapacity((void *)(v39 + 24), 0);
    *(_DWORD *)(v39 + 56) = 0;
    *(void *)(v39 + 96) = 0;
    *(void *)(v39 + 72) = 0;
    *(void *)(v39 + 80) = 0;
    *(_DWORD *)(v39 + 88) = 0;
    *(void *)(v39 + 64) = 0;
    *(void *)(v39 + 112) = RESyncViewCreate();
    RESyncViewSetUserData();
    size_t v41 = strlen(*(const char **)(*(void *)(a1 + 16) + 280));
    uint64_t v44 = *(void *)(*(void *)(a1 + 16) + 280);
    size_t v45 = v41;
    re::DynamicString::operator=((re::DynamicString *)(v39 + 24), (uint64_t)&v44);
    *(_DWORD *)(v39 + 56) = *(_DWORD *)buf;
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(v39 + 64, (uint64_t *)&buf[8]);
    *(unsigned char *)(v39 + 104) = v29;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 40), v39);
    RESyncableGetOwnerPeerID();
    RESyncViewSetOwnerPeerID();
    RESyncableGetFromPeerID();
    RESyncViewSetFromPeerID();
    RESyncableSetDirectView();
    RESyncServiceAddView();

    __int16 v37 = v43;
LABEL_78:
    if (v37 && !RESyncViewGetObjectCount()) {
      RESyncServiceRemoveView();
    }
    int v32 = 0;
    uint64_t v5 = 1;
    goto LABEL_82;
  }
  if (v47)
  {
    uint64_t v34 = v49;
    uint64_t v35 = *(void *)(v17 + 96);
    while (*(void *)v34 == *(void *)v35 && *(_DWORD *)(v34 + 8) == *(_DWORD *)(v35 + 8))
    {
      v34 += 16;
      v35 += 16;
      if (v34 == v49 + 16 * v47) {
        goto LABEL_75;
      }
    }
    goto LABEL_77;
  }
LABEL_75:
  __int16 v37 = v43;
  if (v42 != v43)
  {
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 40), v17);
    RESyncableSetDirectView();
    goto LABEL_78;
  }
LABEL_86:
  uint64_t v5 = 0;
  int v32 = 1;
LABEL_82:
  re::ecs2::NetworkComponent::resolveLocalViews(a1, a2, v29, (uint64_t)buf, v32);
  if (*(void *)&buf[8] && v49) {
    (*(void (**)(void))(**(void **)&buf[8] + 40))();
  }
LABEL_5:
  if (a2)
  {
    *(void *)buf = a1;
    if (a1) {
      id v6 = (id)(a1 + 8);
    }
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove(a2, (uint64_t *)buf);
    if (*(void *)buf) {
  }
    }
  *(double *)&re::NetworkSystem::resolveSelfViewTime = *(double *)&re::NetworkSystem::resolveSelfViewTime
                                                     + CFAbsoluteTimeGetCurrent()
                                                     - Current;
  if (*(double *)&re::NetworkSystem::resolveSelfViewTime > 0.1)
  {
    uint64_t v8 = *re::ecsNetworkLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = re::NetworkSystem::resolveSelfViewCount;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = re::NetworkSystem::setAclCount;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "More than 100ms spent in NetworkComponent::resolveSelfView: resolveSelfView: %zu, setAccessControl: %zu", buf, 0x16u);
    }
    re::NetworkSystem::resolveSelfViewTime = 0;
  }
  return v5;
}

uint64_t re::ecs2::NetworkComponent::resolveChildEntityViews(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 328);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 344);
      uint64_t v6 = 8 * v3;
      do
      {
        uint64_t v7 = *(void *)(*(void *)v5 + 200);
        if (v7)
        {
          BOOL result = re::ecs2::NetworkComponent::resolveSelfView(*(void *)(*(void *)v5 + 200), a2);
          if (result) {
            BOOL result = re::ecs2::NetworkComponent::resolveChildEntityViews(v7, a2);
          }
        }
        v5 += 8;
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

void re::ecs2::NetworkComponent::resolveLocalViews(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  if (!*(void *)(a1 + 56)
    || !re::NetworkSystemFeatureFlags::enableAltSharedApp((re::NetworkSystemFeatureFlags *)a1))
  {
    return;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 80);
  if (a3 > 1)
  {
    re::NetworkSystem::exitingLocalPeerView(*(re::NetworkSystem::LocalPeer **)(a1 + 56), (re::ecs2::NetworkComponent *)a1);
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) += 2;
    if (!a5) {
      return;
    }
    goto LABEL_79;
  }
  unsigned int v83 = 0;
  long long v81 = 0u;
  long long v82 = 0u;
  *(void *)uint64_t v84 = 0x7FFFFFFFLL;
  unsigned int v75 = a3;
  if (v9) {
    uint64_t v10 = (unint64_t *)(a1 + 88);
  }
  else {
    uint64_t v10 = *(unint64_t **)(a1 + 96);
  }
  unsigned int v73 = v9;
  int v74 = a5;
  uint64_t v11 = (_anonymous_namespace_ *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  if (v12)
  {
    uint64_t v78 = a4;
    unsigned int v79 = 0;
    uint64_t v76 = 0;
    uint64_t v13 = 0;
    int v77 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = &v10[v12];
    do
    {
      unint64_t v17 = *v10;
      uint64_t v18 = *(void *)(a1 + 56);
      unint64_t v85 = *v10;
      uint64_t v19 = re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v18 + 2944, (uint64_t *)&v85);
      uint64_t v20 = v19;
      if (!v19) {
        goto LABEL_19;
      }
      if (!*(unsigned char *)(v19 + 8))
      {
        int v21 = (_DWORD *)v78;
        uint64_t v22 = *(void *)(v78 + 24);
        if (v22)
        {
          int v21 = (_DWORD *)(*(void *)(v78 + 40) + 8);
          uint64_t v23 = 16 * v22;
          while (*((void *)v21 - 1) != v17)
          {
            v21 += 4;
            v23 -= 16;
            if (!v23)
            {
              int v21 = (_DWORD *)v78;
              break;
            }
          }
        }
        if (!*v21)
        {
LABEL_19:
          int v24 = v11;
          unint64_t v25 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
          unint64_t v26 = v25 ^ (v25 >> 31);
          unint64_t v27 = v81;
          if ((void)v81)
          {
            unint64_t v27 = v26 % v79;
            for (uint64_t i = *(unsigned int *)(v13 + 4 * v27);
                  i != 0x7FFFFFFF;
                  uint64_t i = *(_DWORD *)(v15 + 32 * i + 8) & 0x7FFFFFFF)
            {
              if (*(void *)(v15 + 32 * i + 16) == v17) {
                goto LABEL_30;
              }
            }
          }
          uint64_t v29 = *(unsigned int *)v84;
          if (*(_DWORD *)v84 == 0x7FFFFFFF)
          {
            unsigned int v30 = v14;
            unsigned int v79 = DWORD2(v82);
            if (v14 == DWORD2(v82))
            {
              re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v81, 2 * v77);
              unsigned int v30 = v83;
              unsigned int v79 = DWORD2(v82);
              unint64_t v27 = v26 % DWORD2(v82);
              uint64_t v15 = v82;
              uint64_t v76 = *((void *)&v81 + 1);
            }
            uint64_t v31 = v30 + 1;
            unsigned int v83 = v31;
            uint64_t v29 = v14;
            int v32 = *(_DWORD *)(v15 + 32 * v14 + 8);
            uint64_t v13 = v76;
          }
          else
          {
            int v32 = *(_DWORD *)(v15 + 32 * *(unsigned int *)v84 + 8);
            *(_DWORD *)uint64_t v84 = v32 & 0x7FFFFFFF;
            uint64_t v31 = v14;
            LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = v29;
          }
          *(_DWORD *)(v15 + 32 * v29 + 8) = v32 | 0x80000000;
          uint64_t v15 = v82;
          uint64_t v33 = v82 + 32 * v29;
          *(_DWORD *)(v33 + 8) = *(_DWORD *)(v33 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v27);
          *(void *)uint64_t v33 = v26;
          *(void *)(v33 + 16) = v17;
          *(void *)(v33 + 24) = v20;
          *(_DWORD *)(v13 + 4 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = v14;
          int v77 = ++HIDWORD(v82);
          ++*(_DWORD *)&v84[4];
          uint64_t v14 = v31;
LABEL_30:
          uint64_t v11 = v24;
        }
      }
      ++v10;
    }
    while (v10 != v16);
    unsigned int v34 = v83;
    a3 = v75;
    uint64_t v35 = 0;
    if (v83)
    {
      uint64_t v36 = (int *)(v82 + 8);
      a4 = v78;
      while (1)
      {
        int v37 = *v36;
        v36 += 8;
        if (v37 < 0) {
          break;
        }
        if (v83 == ++v35)
        {
          LODWORD(v35) = v83;
          break;
        }
      }
    }
    else
    {
      a4 = v78;
    }
  }
  else
  {
    unsigned int v34 = 0;
    LODWORD(v35) = 0;
    a3 = v75;
  }
  if (v34 != v35)
  {
    uint64_t v38 = v35;
    uint64_t v39 = v82;
    do
    {
      uint64_t v40 = v39 + 32 * v38;
      size_t v41 = *(re::NetworkSystem::LocalPeer **)(v40 + 24);
      if (v41) {
        re::NetworkSystem::LocalPeer::exit(v41, (re::ecs2::NetworkComponent *)a1);
      }
      re::DynamicOverflowArray<unsigned long long,2ul>::remove((uint64_t)v11, *(void *)(v40 + 16));
      if (v83 <= (int)v35 + 1) {
        unsigned int v42 = v35 + 1;
      }
      else {
        unsigned int v42 = v83;
      }
      while (1)
      {
        uint64_t v38 = (v35 + 1);
        if (v42 - 1 == v35) {
          break;
        }
        LODWORD(v35) = v35 + 1;
        unsigned int v43 = v38;
        if ((*(_DWORD *)(v39 + 32 * v38 + 8) & 0x80000000) != 0) {
          goto LABEL_50;
        }
      }
      unsigned int v43 = v42;
LABEL_50:
      LODWORD(v35) = v43;
    }
    while (v34 != v43);
  }
  uint64_t v44 = *(void *)(a1 + 56);
  uint64_t v45 = *(unsigned int *)(v44 + 2976);
  if (v45)
  {
    uint64_t v46 = 0;
    uint64_t v47 = (_DWORD *)(*(void *)(v44 + 2960) + 8);
    while ((*v47 & 0x80000000) == 0)
    {
      v47 += 68;
      if (v45 == ++v46)
      {
        LODWORD(v46) = *(_DWORD *)(v44 + 2976);
        break;
      }
    }
  }
  else
  {
    LODWORD(v46) = 0;
  }
  if (v45 != v46)
  {
    uint64_t v48 = v46;
    do
    {
      uint64_t v49 = *(void *)(v44 + 2960) + 272 * v48;
      uint64_t v52 = *(void *)(v49 + 24);
      uint64_t v51 = (re::NetworkSystem::LocalPeer *)(v49 + 24);
      uint64_t v50 = v52;
      if (*((unsigned char *)v51 + 8)) {
        goto LABEL_60;
      }
      uint64_t v53 = *(void *)(a4 + 24);
      uint64_t v54 = (_DWORD *)a4;
      if (v53)
      {
        uint64_t v54 = (_DWORD *)(*(void *)(a4 + 40) + 8);
        uint64_t v55 = 16 * v53;
        while (*((void *)v54 - 1) != v50)
        {
          v54 += 4;
          v55 -= 16;
          if (!v55)
          {
            uint64_t v54 = (_DWORD *)a4;
            break;
          }
        }
      }
      if (!*v54)
      {
LABEL_60:
        re::DynamicOverflowArray<unsigned long long,2ul>::indexOf((uint64_t)&v85, (uint64_t)v11, v50);
        if (!(_BYTE)v85)
        {
          re::NetworkSystem::LocalPeer::enter(v51, (re::ecs2::NetworkComponent *)a1);
          re::DynamicOverflowArray<unsigned long long,2ul>::add(v11, v51);
        }
      }
      else
      {
        re::DynamicOverflowArray<unsigned long long,2ul>::indexOf((uint64_t)&v85, (uint64_t)v11, v50);
        if ((_BYTE)v85)
        {
          re::NetworkSystem::LocalPeer::exit(v51, (re::ecs2::NetworkComponent *)a1);
          re::DynamicOverflowArray<unsigned long long,2ul>::remove((uint64_t)v11, *(void *)v51);
        }
      }
      if (*(_DWORD *)(v44 + 2976) <= (v46 + 1)) {
        int v56 = v46 + 1;
      }
      else {
        int v56 = *(_DWORD *)(v44 + 2976);
      }
      while (1)
      {
        uint64_t v48 = (v46 + 1);
        if (v56 - 1 == v46) {
          break;
        }
        LODWORD(v46) = v46 + 1;
        int v57 = v48;
        if ((*(_DWORD *)(*(void *)(v44 + 2960) + 272 * v48 + 8) & 0x80000000) != 0) {
          goto LABEL_77;
        }
      }
      int v57 = v56;
LABEL_77:
      LODWORD(v46) = v57;
    }
    while (v45 != v57);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v81);
  unsigned int v9 = v73;
  if (v74)
  {
LABEL_79:
    if ((*(_DWORD *)(a1 + 80) ^ v9) >= 2)
    {
      uint64_t v58 = *(void *)(a1 + 16);
      uint64_t v59 = *(void *)(v58 + 328);
      if (v59)
      {
        __int16 v60 = *(uint64_t **)(v58 + 344);
        uint64_t v61 = 8 * v59;
        do
        {
          uint64_t v62 = *v60;
          if (*v60) {
            id v63 = (id)(v62 + 8);
          }
          uint64_t v64 = *(void *)(v62 + 200);
          if (v64)
          {
            if (!a2) {
              goto LABEL_89;
            }
            *(void *)&long long v81 = *(void *)(v62 + 200);
            id v65 = (id)(v64 + 8);
            BOOL v66 = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a2, (uint64_t *)&v81);
            if ((void)v81) {

            }
            if (!v66)
            {
LABEL_89:
              LODWORD(v81) = 0;
              *(void *)&v84[4] = 0;
              long long v82 = 0uLL;
              *((void *)&v81 + 1) = 0;
              unsigned int v83 = 0;
              re::ecs2::SyncAccessControl::inherit((uint64_t)&v81, (int *)a4, (int *)(v64 + 568));
              if (*(unsigned char *)(v64 + 617))
              {
                Owneruint64_t PeerID = *(void *)(a1 + 32);
                if (OwnerPeerID) {
                  Owneruint64_t PeerID = RESyncableGetOwnerPeerID();
                }
                unint64_t v85 = OwnerPeerID;
                int v86 = 0;
                re::DynamicArray<re::ecs2::SyncAccessControlEntry>::removeStable((void *)&v81 + 1, (uint64_t)&v85);
                if (*(void *)(v64 + 32)) {
                  unint64_t v68 = RESyncableGetOwnerPeerID();
                }
                else {
                  unint64_t v68 = 0;
                }
                re::ecs2::SyncAccessControl::addEntry(&v81, v68, 0);
              }
              int v69 = *(unsigned __int8 *)(v64 + 560);
              if (v69 == 1) {
                unsigned int v70 = a3;
              }
              else {
                unsigned int v70 = 2;
              }
              if (v69 == a3 || a3 == 1) {
                uint64_t v72 = *(unsigned __int8 *)(v64 + 560);
              }
              else {
                uint64_t v72 = v70;
              }
              re::ecs2::NetworkComponent::resolveLocalViews(v64, a2, v72, &v81, 1);
              if (*((void *)&v81 + 1))
              {
                if (*(void *)&v84[4]) {
                  (*(void (**)(void))(**((void **)&v81 + 1) + 40))();
                }
              }
            }
          }

          ++v60;
          v61 -= 8;
        }
        while (v61);
      }
    }
  }
}

uint64_t re::DynamicOverflowArray<unsigned long long,2ul>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t result = re::DynamicOverflowArray<unsigned long long,2ul>::indexOf((uint64_t)v8, a1, a2);
  if (v8[0])
  {
    unint64_t v4 = v9;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= v9)
    {
      uint64_t v10 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v11 = 136315906;
      uint64_t v12 = "removeAt";
      __int16 v13 = 1024;
      int v14 = 1000;
      __int16 v15 = 2048;
      unint64_t v16 = v4;
      __int16 v17 = 2048;
      unint64_t v18 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v5 - 1 > v9)
    {
      if (*(unsigned char *)(a1 + 16)) {
        uint64_t v6 = a1 + 24;
      }
      else {
        uint64_t v6 = *(void *)(a1 + 32);
      }
      *(void *)(v6 + 8 * v9) = *(void *)(v6 + 8 * v5 - 8);
    }
    int v7 = *(_DWORD *)(a1 + 16);
    *(void *)(a1 + 8) = v5 - 1;
    *(_DWORD *)(a1 + 16) = v7 + 2;
  }
  return result;
}

uint64_t re::ecs2::recursiveResolveAccessControl@<X0>(re::ecs2 *this@<X0>, int *a2@<X8>)
{
  *a2 = *((_DWORD *)this + 142);
  uint64_t result = re::DynamicArray<re::ecs2::SyncAccessControlEntry>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)this + 72);
  for (uint64_t i = *((void *)this + 2); i; uint64_t i = *(void *)(v8 + 16))
  {
    uint64_t v7 = *(void *)(i + 24);
    if (!v7) {
      break;
    }
    uint64_t v8 = *(void *)(v7 + 200);
    if (!v8) {
      break;
    }
    int v13 = *(_DWORD *)(v8 + 568);
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::DynamicArray((uint64_t)v14, (uint64_t *)(v8 + 576));
    int v9 = 0;
    uint64_t v12 = 0;
    memset(v10, 0, sizeof(v10));
    int v11 = 0;
    re::ecs2::SyncAccessControl::inherit((uint64_t)&v9, &v13, a2);
    *a2 = v9;
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=((uint64_t)(a2 + 2), (uint64_t)v10);
    if (v10[0] && v12) {
      (*(void (**)(void))(*(void *)v10[0] + 40))();
    }
    uint64_t result = v14[0];
    if (v14[0])
    {
      if (v14[4]) {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v14[0] + 40))();
      }
    }
  }
  return result;
}

BOOL re::ecs2::NetworkComponent::isViewableByPeer(re::ecs2::NetworkComponent *this, uint64_t a2)
{
  if (*((void *)this + 4))
  {
    if (RESyncableGetHierarchicalView() && (uint64_t UserData = RESyncViewGetUserData()) != 0)
    {
      unint64_t v4 = (_DWORD *)(UserData + 56);
      uint64_t v5 = *(void *)(UserData + 80);
      if (v5)
      {
        uint64_t v6 = *(void *)(UserData + 96) + 8;
        uint64_t v7 = 16 * v5;
        while (*(void *)(v6 - 8) != a2)
        {
          v6 += 16;
          v7 -= 16;
          if (!v7) {
            return *v4 == 0;
          }
        }
        unint64_t v4 = (_DWORD *)v6;
      }
      return *v4 == 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    int v9 = &v13;
    re::ecs2::recursiveResolveAccessControl(this, &v13);
    if (v15)
    {
      int v9 = (int *)(v16 + 8);
      uint64_t v10 = 16 * v15;
      while (*((void *)v9 - 1) != a2)
      {
        v9 += 4;
        v10 -= 16;
        if (!v10)
        {
          int v9 = &v13;
          break;
        }
      }
    }
    BOOL v8 = *v9 == 0;
    if (v14) {
      BOOL v11 = v16 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
  }
  return v8;
}

void re::ecs2::NetworkComponentInfo::remove(re::ecs2::NetworkComponentInfo *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((unsigned __int16 *)this + 1);
  if (!*((_WORD *)this + 1)) {
    goto LABEL_11;
  }
  uint64_t v5 = (const __int16 *)((char *)a2 + 16);
  uint64_t v6 = (int16x8_t *)*((void *)this + 1);
  int16x8_t v7 = vld1q_dup_s16(v5);
  int v8 = 1;
  int v9 = v6;
  while (1)
  {
    uint16x8_t v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v9), (int8x16_t)xmmword_23436BBD0);
    v10.i16[0] = vmaxvq_u16(v10);
    if (v10.i32[0]) {
      break;
    }
    v8 -= 8;
    ++v9;
    if (!--v3) {
      goto LABEL_11;
    }
  }
  unint64_t v11 = v10.u16[0] - v8;
  uint64_t v12 = *(unsigned __int16 *)this;
  if ((int)v11 < (int)v12)
  {
    unint64_t v13 = v12 - 1;
    v6->i16[v11] = v6->i16[v12 - 1];
    v6->i16[*(unsigned __int16 *)this - 1] = -1;
    unsigned __int16 v14 = *(_WORD *)this - 1;
    *(_WORD *)this = v14;
    *((_WORD *)this + 1) = (v14 + 7) >> 3;
    unint64_t v15 = *((void *)this + 7);
    if (v15 <= v11)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v16 = v15 - 1;
    if (v15 - 1 > v11)
    {
      if (*((unsigned char *)this + 64)) {
        __int16 v17 = (char *)this + 72;
      }
      else {
        __int16 v17 = (char *)*((void *)this + 10);
      }
      long long v21 = &v17[8 * v15];
      uint64_t v22 = *(void *)&v17[8 * v11];
      *(void *)&v17[8 * v11] = *((void *)v21 - 1);
      *((void *)v21 - 1) = v22;
    }
    int v23 = *((_DWORD *)this + 16);
    if (v23) {
      uint64_t v24 = (char *)this + 72;
    }
    else {
      uint64_t v24 = (char *)*((void *)this + 10);
    }
    unint64_t v25 = &v24[8 * v15];
    if (*((void *)v25 - 1))
    {
      RESyncRelease();
      *((void *)v25 - 1) = 0;
      int v23 = *((_DWORD *)this + 16);
      uint64_t v16 = *((void *)this + 7) - 1;
    }
    *((void *)this + 7) = v16;
    *((_DWORD *)this + 16) = v23 + 2;
    if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 200, v13)) {
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 200, v11);
    }
    else {
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 200, v11);
    }
    unint64_t v26 = *((void *)this + 30);
    if ((v13 & 0x3F) != 0) {
      unint64_t v27 = (v13 >> 6) + 1;
    }
    else {
      unint64_t v27 = v13 >> 6;
    }
    *((void *)this + 30) = v13;
    *(void *)buf = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::NetworkComponentInfo *)((char *)this + 200), v27, buf);
    if (v13 && v26 > v13)
    {
      uint64_t v28 = 63;
      uint64_t v29 = *((void *)this + 30) & 0x3FLL;
      if (v29 && v29 != 63) {
        uint64_t v28 = ~(-1 << v29);
      }
      if (*((unsigned char *)this + 216)) {
        unsigned int v30 = (char *)this + 224;
      }
      else {
        unsigned int v30 = (char *)*((void *)this + 29);
      }
      *(void *)&v30[8 * *((void *)this + 26) - 8] &= v28;
    }
    if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 248, v13)) {
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, v11);
    }
    else {
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 248, v11);
    }
    unint64_t v31 = *((void *)this + 36);
    *((void *)this + 36) = v13;
    *(void *)buf = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::NetworkComponentInfo *)((char *)this + 248), v27, buf);
    if (v13 && v31 > v13)
    {
      uint64_t v32 = 63;
      uint64_t v33 = *((void *)this + 36) & 0x3FLL;
      if (v33 && v33 != 63) {
        uint64_t v32 = ~(-1 << v33);
      }
      if (*((unsigned char *)this + 264)) {
        unsigned int v34 = (char *)this + 272;
      }
      else {
        unsigned int v34 = (char *)*((void *)this + 35);
      }
      *(void *)&v34[8 * *((void *)this + 32) - 8] &= v32;
    }
  }
  else
  {
LABEL_11:
    unint64_t v18 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(this);
    if (v18)
    {
      long long v19 = *re::ecsNetworkLogObjects(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *((void *)a2 + 4);
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] no component of type %s found in component info table", buf, 0xCu);
      }
    }
  }
}

void re::ecs2::NetworkComponentInfo::markDirty(re::ecs2::NetworkComponentInfo *this, const re::ecs2::ComponentTypeBase *a2, char a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((unsigned __int16 *)this + 1);
  if (!*((_WORD *)this + 1)) {
    goto LABEL_16;
  }
  int16x8_t v7 = (const __int16 *)((char *)a2 + 16);
  int v8 = (int16x8_t *)*((void *)this + 1);
  int16x8_t v9 = vld1q_dup_s16(v7);
  int v10 = 1;
  while (1)
  {
    uint16x8_t v11 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v9, *v8), (int8x16_t)xmmword_23436BBD0);
    v11.i16[0] = vmaxvq_u16(v11);
    if (v11.i32[0]) {
      break;
    }
    v10 -= 8;
    ++v8;
    if (!--v4) {
      goto LABEL_16;
    }
  }
  unint64_t v12 = v11.u16[0] - v10;
  if ((int)v12 < *(unsigned __int16 *)this)
  {
    if ((a3 & 1) != 0
      && re::NetworkSystemFeatureFlags::enableAltSharedApp(this)
      && (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 200, v12) & 1) == 0)
    {
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 200, v12);
    }
    if ((a3 & 2) != 0)
    {
      unint64_t v13 = (char *)this + 248;
      if ((re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)v13, v12) & 1) == 0)
      {
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v13, v12);
      }
    }
  }
  else
  {
LABEL_16:
    unsigned __int16 v14 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(this);
    if (v14)
    {
      unint64_t v15 = *re::ecsNetworkLogObjects(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *((void *)a2 + 4);
        int v17 = 136315138;
        uint64_t v18 = v16;
        _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] no component of type %s found in component info table", (uint8_t *)&v17, 0xCu);
      }
    }
  }
}

uint64_t re::ecs2::NetworkComponentInfo::isDirty(re::ecs2::NetworkComponentInfo *this, const re::ecs2::ComponentTypeBase *a2, char a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((unsigned __int16 *)this + 1);
  if (!*((_WORD *)this + 1)) {
    goto LABEL_10;
  }
  int16x8_t v7 = (const __int16 *)((char *)a2 + 16);
  int v8 = (int16x8_t *)*((void *)this + 1);
  int16x8_t v9 = vld1q_dup_s16(v7);
  int v10 = 1;
  while (1)
  {
    uint16x8_t v11 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v9, *v8), (int8x16_t)xmmword_23436BBD0);
    v11.i16[0] = vmaxvq_u16(v11);
    if (v11.i32[0]) {
      break;
    }
    v10 -= 8;
    ++v8;
    if (!--v4) {
      goto LABEL_10;
    }
  }
  unint64_t v12 = v11.u16[0] - v10;
  if ((int)v12 >= *(unsigned __int16 *)this)
  {
LABEL_10:
    unsigned __int16 v14 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(this);
    if (v14)
    {
      unint64_t v15 = *re::ecsNetworkLogObjects(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *((void *)a2 + 4);
        int v18 = 136315138;
        uint64_t v19 = v16;
        _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] no component of type %s found in component info table", (uint8_t *)&v18, 0xCu);
      }
    }
    return 0;
  }
  if ((a3 & 1) == 0 || !re::NetworkSystemFeatureFlags::enableAltSharedApp(this))
  {
    if ((a3 & 2) != 0)
    {
      unint64_t v13 = (char *)this + 248;
      goto LABEL_16;
    }
    return 0;
  }
  unint64_t v13 = (char *)this + 200;
LABEL_16:
  return re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)v13, v12);
}

uint64_t re::ecs2::NetworkComponentInfo::get(re::ecs2::NetworkComponentInfo *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v2 = *((unsigned __int16 *)this + 1);
  if (!*((_WORD *)this + 1)) {
    return 0;
  }
  uint64_t v3 = (const __int16 *)((char *)a2 + 16);
  uint64_t v4 = (int16x8_t *)*((void *)this + 1);
  int16x8_t v5 = vld1q_dup_s16(v3);
  for (int i = 1; ; i -= 8)
  {
    uint16x8_t v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_23436BBD0);
    v7.i16[0] = vmaxvq_u16(v7);
    if (v7.i32[0]) {
      break;
    }
    ++v4;
    if (!--v2) {
      return 0;
    }
  }
  uint64_t v8 = v7.u16[0] - i;
  if ((int)v8 >= *(unsigned __int16 *)this) {
    return 0;
  }
  if (*((void *)this + 7) <= (unint64_t)v8)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*((unsigned char *)this + 64)) {
    int16x8_t v9 = (char *)this + 72;
  }
  else {
    int16x8_t v9 = (char *)*((void *)this + 10);
  }
  return *(void *)&v9[8 * v8];
}

void re::ecs2::NetworkComponent::markComponentDirty(re::ecs2::NetworkComponent *this, re::ecs2::Component *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(re::ecs2::NetworkComponent **)(v2 + 200);
    if (v3)
    {
      if (!*((void *)v3 + 4) || RESyncableIsAuthoritative())
      {
        re::ecs2::NetworkComponent::markDirty(v3, this);
      }
    }
  }
}

re *___ZN2re4ecs216NetworkComponent12bindEntityToEP10RESyncablePNS0_6EntityE_block_invoke(re *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (id *)(a2 & 0xFFFFFFFFFFFFFFFELL);
    if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      uint64_t v3 = re::globalAllocators(result)[2];
      objc_destroyWeak(v2);
      *uint64_t v2 = 0;
      uint64_t v4 = *(uint64_t (**)(uint64_t, id *))(*(void *)v3 + 40);
      return (re *)v4(v3, v2);
    }
  }
  return result;
}

re *___ZN2re4ecs216NetworkComponent23bindComponentToSyncableEPKNS0_9ComponentE21RESyncableRefRetainer_block_invoke(re *result, id *a2)
{
  if (a2 && (a2 & 1) == 0)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    objc_destroyWeak(a2);
    *a2 = 0;
    uint64_t v4 = *(uint64_t (**)(uint64_t, id *))(*(void *)v3 + 40);
    return (re *)v4(v3, a2);
  }
  return result;
}

uint64_t re::ecs2::NetworkComponent::makeSyncInfo(re::ecs2::NetworkComponent *this)
{
  uint64_t v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetTypeId();
  uint64_t v2 = &qword_268772000;
  {
    uint64_t v2 = &qword_268772000;
    if (v4)
    {
      re::introspect<re::ecs2::NetworkComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"NetworkComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkComponent>, 0);
      uint64_t v2 = &qword_268772000;
    }
  }
  re::getPrettyTypeName((re *)v2[206], (const re::IntrospectionBase *)&v5);
  RESyncSyncableTypeInfoSetDebugName();
  if (v5 && (v6 & 1) != 0) {
    (*(void (**)(void))(*(void *)v5 + 40))();
  }
  RESyncSyncableTypeInfoSetSupportsNetworkSync();
  return v1;
}

uint64_t re::ecs2::NetworkReceiveSystem::typeInfo(re::ecs2::NetworkReceiveSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkReceiveSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkReceiveSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkReceiveSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkReceiveSystem>, 0);
}

void re::ecs2::NetworkSendSystem::~NetworkSendSystem(re::ecs2::NetworkSendSystem *this)
{
  *(void *)this = &unk_26E704400;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E704400;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::NetworkSendSystem::typeInfo(re::ecs2::NetworkSendSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkSendSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkSendSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkSendSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkSendSystem>, 0);
}

void anonymous namespace'::LocalNetworkAssetSerialization::~LocalNetworkAssetSerialization(_anonymous_namespace_::LocalNetworkAssetSerialization *this)
{
  *(void *)this = &unk_26E704520;
  re::DynamicString::deinit((_anonymous_namespace_::LocalNetworkAssetSerialization *)((char *)this + 144));
  *(void *)this = &unk_26E6CA920;
  re::DynamicString::deinit((_anonymous_namespace_::LocalNetworkAssetSerialization *)((char *)this + 104));
  *(void *)this = &unk_26E6CA958;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E704520;
  re::DynamicString::deinit((_anonymous_namespace_::LocalNetworkAssetSerialization *)((char *)this + 144));
  *(void *)this = &unk_26E6CA920;
  re::DynamicString::deinit((_anonymous_namespace_::LocalNetworkAssetSerialization *)((char *)this + 104));
  *(void *)this = &unk_26E6CA958;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

BOOL anonymous namespace'::LocalNetworkAssetSerialization::isLocalPeerID(_anonymous_namespace_::LocalNetworkAssetSerialization *this, const char *a2)
{
  uint64_t v6 = 0;
  if (sscanf(a2, "%llu", &v6) != 1) {
    return 0;
  }
  if (*((unsigned char *)this + 152)) {
    int v4 = (const char *)*((void *)this + 20);
  }
  else {
    int v4 = (char *)this + 153;
  }
  return strcmp(v4, a2) == 0;
}

double re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(v6 + 24);
          if (v8)
          {

            *(void *)(v6 + 24) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 40;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          if (*(void *)(v6 + 16))
          {
            RESyncRelease();
            *(void *)(v6 + 16) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 32;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::ecs2::NetworkReceiveSystem::processLocalSession(RESyncSession *)const::$_0::__invoke(const char *a1@<X0>, uint64_t a2@<X8>)
{
  objc_initWeak((id *)a2, 0);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)a2);
  if (a1 && *a1)
  {
    uint64_t v5 = 0;
    if (sscanf(a1, "%llu", &v5) == 1)
    {
      uint64_t v4 = v5;
      re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)a2);
      *(void *)(a2 + 8) = v4;
    }
  }
}

uint64_t re::ecs2::NetworkSendSystem::updateLocalSession(RESyncSession *)const::$_0::__invoke(uint64_t a1, re::DynamicString *this)
{
  return 1;
}

uint64_t RESyncableRefRetainer::reset(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result != a2)
  {
    if (a2)
    {
      RESyncRetain();
      uint64_t result = *a1;
    }
    if (result) {
      uint64_t result = RESyncRelease();
    }
    *a1 = a2;
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::SyncAccessControlEntry>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::ecs2::SyncAccessControlEntry>::copy(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::RigNodeConstraint>::setCapacity(result, *(void *)(a2 + 16));
    unint64_t v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 16 * (void)v5 - 4);
      unint64_t v5 = v3[2];
    }
    uint64_t result = (void **)memcpy((char *)v3[4] + 16 * (void)v5, (const void *)(*(void *)(a2 + 32) + 16 * (void)v5), 16 * v4 - 16 * (void)v5);
  }
  else if (v4)
  {
    uint64_t result = (void **)memmove(result[4], *(const void **)(a2 + 32), 16 * v4 - 4);
  }
  v3[2] = (void *)v4;
  return result;
}

uint64_t re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)a2;
    if (*(void *)result) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4 || v2 == v3)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)uint64_t result = v3;
      *(void *)(result + 8) = v7;
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v6;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v8;
      uint64_t v9 = *(void *)(result + 32);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4) {
        re::DynamicArray<re::ecs2::SyncAccessControlEntry>::copy((void **)a1, (uint64_t)a2);
      }
      else {
        *(void *)(a1 + 16) = 0;
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::ecs2::SyncAccessControlEntry>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

id re::internal::defaultRetain<re::ecs2::NetworkReceiveSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::NetworkReceiveSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::NetworkSendSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::NetworkSendSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

double re::make::shared::unsafelyInplace<re::ecs2::NetworkComponent>(void *a1)
{
  bzero(a1, 0x280uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((unsigned char *)a1 + 24) = 0;
  *a1 = &unk_26E6F6D50;
  a1[4] = 0;
  a1[5] = 0;
  *((_DWORD *)a1 + 12) = 16777471;
  *((unsigned char *)a1 + 52) = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 1;
  a1[11] = 0;
  a1[12] = 0;
  *((_DWORD *)a1 + 28) = 0;
  *((_WORD *)a1 + 58) = 16;
  *(void *)&long long v2 = -1;
  *((void *)&v2 + 1) = -1;
  *((_OWORD *)a1 + 8) = v2;
  a1[15] = a1 + 16;
  *((_OWORD *)a1 + 9) = v2;
  a1[20] = 0;
  a1[21] = 0;
  *((_DWORD *)a1 + 44) = 1;
  a1[23] = 0;
  a1[24] = 0;
  a1[39] = 0;
  a1[40] = 0;
  *((_DWORD *)a1 + 82) = 1;
  double result = 0.0;
  *((_OWORD *)a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  a1[46] = 0;
  *((_DWORD *)a1 + 94) = 1;
  a1[49] = 0;
  a1[50] = 0;
  a1[48] = 0;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = 0u;
  *((_DWORD *)a1 + 112) = 0;
  *(void *)((char *)a1 + 452) = 0x7FFFFFFFLL;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_DWORD *)a1 + 124) = 0;
  *(void *)((char *)a1 + 500) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 136) = 0;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 33) = 0u;
  *(void *)((char *)a1 + 548) = 0x7FFFFFFFLL;
  *((unsigned char *)a1 + 560) = 1;
  *((_DWORD *)a1 + 142) = 0;
  a1[73] = 0;
  a1[72] = 0;
  *((_DWORD *)a1 + 150) = 0;
  a1[74] = 0;
  a1[78] = 0;
  *(_DWORD *)((char *)a1 + 615) = 0;
  a1[76] = 0;
  return result;
}

void re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(void *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v27, v13, v12);
          long long v15 = *(_OWORD *)v27;
          *(_OWORD *)unint64_t v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v27[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&uint8_t v27[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 40;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 40 * v9 + 8) = v23 | 0x80000000;
  uint64_t v25 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(v25 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 40 * v9 + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 40 * v9;
  *(void *)(v26 + 24) = *a5;
  *a5 = 0;
  *(void *)(v26 + 32) = a5[1];
  *(_DWORD *)(v25 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  unint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_180, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::DynamicOverflowArray<re::Pair<re::ecs2::Entity *,re::ecs2::Entity *,true>,8ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    double result = (void *)re::DynamicOverflowArray<re::Pair<re::ecs2::Entity *,re::ecs2::Entity *,true>,8ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        BOOL v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          uint64_t v16 = v4 + 3;
        }
        else {
          uint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 16 * v9);
        double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 60)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 16, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 16 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 16 * a2, 8);
        if (v10)
        {
          signed int v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 3;
          }
          else {
            uint64_t v13 = (const void *)v4[4];
          }
          double result = memcpy(v10, v13, 16 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      double result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)int v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            uint64_t v21 = *v13;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *v13;
            if (v21)
            {
              RESyncRetain();
              uint64_t v12 = *(void *)(a1 + 8);
            }
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_180, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  uint64_t v12 = a2;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8) = a3;
  uint64_t v14 = *a5;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  if (v14)
  {
    id v15 = (id)(v14 + 8);
    uint64_t v13 = *(void *)(a1 + 8);
  }
  *(_DWORD *)(v13 + 4 * v12) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, (void *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_180, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  uint64_t v12 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *a5 = 0;
  *(_DWORD *)(v12 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  uint64_t v12 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *a5 = 0;
  *(_DWORD *)(v12 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(void *)&v14[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::init((uint64_t)v14, v4, a2);
      long long v5 = *(_OWORD *)v14;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v14[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v14[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&v14[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v12 - 8) & 0x80000000) != 0) {
            re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(a1, *(void *)(v12 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v12 - 16), v12, v12);
          }
          ++v11;
          v12 += 24;
        }
        while (v11 < v10);
      }
      re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2) {
      signed int v13 = a2;
    }
    else {
      signed int v13 = 3;
    }
  }
}

void re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)signed int v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        signed int v13 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *v13;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

uint64_t re::DynamicOverflowArray<unsigned long long,2ul>::indexOf(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3) {
    uint64_t v4 = (void *)(a2 + 24);
  }
  else {
    uint64_t v4 = *(void **)(a2 + 32);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    long long v7 = &v4[v5];
    while (*v4 != a3)
    {
      ++v4;
      v6 -= 8;
      if (!v6)
      {
        uint64_t v4 = v7;
        break;
      }
    }
  }
  if (v3) {
    uint64_t v8 = a2 + 24;
  }
  else {
    uint64_t v8 = *(void *)(a2 + 32);
  }
  if (v4 == (void *)(v8 + 8 * v5))
  {
    *(unsigned char *)double result = 0;
  }
  else
  {
    *(unsigned char *)double result = 1;
    *(void *)(result + 8) = ((uint64_t)v4 - v8) >> 3;
  }
  return result;
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31)) % v2;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(v7 + 4 * v6);
  if (v8 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (*(void *)(v10 + 24 * v8 + 16) != v4)
  {
    while (1)
    {
      unsigned int v11 = v8;
      int v12 = *(_DWORD *)(v10 + 24 * v8 + 8);
      uint64_t v8 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (*(void *)(v10 + 24 * v8 + 16) == v4)
      {
        *(_DWORD *)(v10 + 24 * v11 + 8) = *(_DWORD *)(v10 + 24 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 24 * v8 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v10 + 24 * v8 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = v13 + 24 * v8;
  int v17 = *(_DWORD *)(v14 + 8);
  unint64_t v15 = (int *)(v14 + 8);
  int v16 = v17;
  if (v17 < 0)
  {
    int *v15 = v16 & 0x7FFFFFFF;
    uint64_t v18 = v13 + 24 * v8;
    uint64_t v21 = *(void *)(v18 + 16);
    int v20 = (void *)(v18 + 16);
    uint64_t v19 = v21;
    if (v21)
    {

      void *v20 = 0;
    }
  }
  uint64_t v22 = *(void *)(a1 + 16) + 24 * v8;
  int v23 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v22 + 8) = *(_DWORD *)(v22 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v23 + 1;
  return 1;
}

void anonymous namespace'::SyncViewAccessList::~SyncViewAccessList(_anonymous_namespace_::SyncViewAccessList *this)
{
  *(void *)this = &unk_26E704570;
  if (*((void *)this + 14))
  {
    RESyncViewSetUserData();
    RESyncRelease();
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 64);
  re::DynamicString::deinit((_anonymous_namespace_::SyncViewAccessList *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

uint64_t re::DynamicOverflowArray<RESyncableRefRetainer,16ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<RESyncableRefRetainer,16ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 0x10 || (v7 & 1) == 0))
    {
      if (a2 < 0x11)
      {
        uint64_t v14 = a1 + 3;
        if (v7) {
          unint64_t v15 = a1 + 3;
        }
        else {
          unint64_t v15 = (void *)a1[4];
        }
        if (v9)
        {
          uint64_t v16 = 8 * v9;
          do
          {
            *v14++ = *v15;
            *v15++ = 0;
            v16 -= 8;
          }
          while (v16);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 8 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            uint64_t v13 = a1 + 3;
          }
          else {
            uint64_t v13 = (void *)a1[4];
          }
          uint64_t v17 = a1[1];
          if (v17)
          {
            uint64_t v18 = 8 * v17;
            uint64_t v19 = (void *)result;
            do
            {
              *v19++ = *v13;
              *v13++ = 0;
              v18 -= 8;
            }
            while (v18);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::ecs2::UILayerGeometryManager::UILayerGeometryManager(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E7045B8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 60) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v4 = a1 + 72;
  *(void *)(a1 + 108) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0u;
  uint64_t v5 = a1 + 120;
  *(void *)(a1 + 156) = 0x7FFFFFFFLL;
  *(void *)(a1 + 8) = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  int v6 = (_anonymous_namespace_ *)re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  *(void *)(a1 + 16) = v6;
  return a1;
}

void re::ecs2::UILayerGeometryManager::update(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 100) && !*(_DWORD *)(a1 + 148)) {
    return;
  }
  uint64_t v2 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)(a1 + 16));
  unsigned int v62 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v63 = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)&v60, v2, 2);
  uint64_t v3 = *(unsigned int *)(a1 + 104);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*(void *)(a1 + 88) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 6;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a1 + 104);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    while (1)
    {
      v67[0].i64[0] = 0;
      uint64_t v8 = *(void *)(*(void *)(a1 + 88) + 24 * v7 + 16);
      v67[0].i64[0] = v8;
      uint64_t v9 = *(void *)(v8 + 176);
      if (v9) {
        break;
      }
      uint64_t v9 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                 + 7)
                                                              + 32))(*((void *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 336, 0);
      re::ecs2::MeshComponent::MeshComponent((id *)v9);
      uint64_t v11 = *(_anonymous_namespace_ ***)(v8 + 200);
      if (v11) {
        re::ecs2::NetworkComponent::disableSyncForComponent(v11, (const re::ecs2::Component *)v9);
      }
      *(void *)&long long v68 = v9;
      if (v9) {
        id v12 = (id)(v9 + 8);
      }
      re::ecs2::EntityComponentCollection::add(v8 + 32, (uint64_t *)&v68, 1);
      if ((void)v68)
      {

        *(void *)&long long v68 = 0;
      }
      if (v9) {
        goto LABEL_20;
      }
LABEL_21:
      uint64_t v13 = (re::ecs2::UILayerGeometryComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v67[0].i64[0] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      unint64_t v15 = v13;
      uint64_t v16 = *((void *)v13 + 117);
      if (v16 == *((void *)v13 + 118))
      {
        re::ecs2::UILayerGeometryComponent::buildGeomMesh(v13, v14);
        uint64_t v16 = *((void *)v15 + 117);
      }
      *((void *)v15 + 118) = v16;
      uint64_t v17 = *(void *)(a1 + 8);
      if (v17)
      {
        re::AssetHelper::makeMeshMemoryAsset(v17, (re::ecs2::UILayerGeometryComponent *)((char *)v15 + 200), 1, 0, 0);
        long long v18 = *(_OWORD *)(v9 + 32);
        *(_OWORD *)(v9 + 32) = v68;
        long long v68 = v18;
        uint64_t v19 = *(void *)(v9 + 48);
        *(void *)(v9 + 48) = v69;
        uint64_t v69 = v19;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v68);
        re::ecs2::Component::markDirty((void *)v9);
      }
      if (*((unsigned char *)v15 + 108)) {
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)&v60, (uint64_t *)v67);
      }
      else {
        re::ecs2::UILayerGeometryManager::markGroundingShadowEntityForRemovalIfNeeded((re::ecs2::UILayerGeometryManager *)a1, (re::ecs2::Entity *)v67[0].i64[0]);
      }
      if (*(_DWORD *)(a1 + 104) <= (v4 + 1)) {
        int v20 = v4 + 1;
      }
      else {
        int v20 = *(_DWORD *)(a1 + 104);
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v20 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        int v21 = v7;
        if ((*(_DWORD *)(*(void *)(a1 + 88) + 24 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_35;
        }
      }
      int v21 = v20;
LABEL_35:
      LODWORD(v4) = v21;
      if (v3 == v21) {
        goto LABEL_36;
      }
    }
    id v10 = (id)(v9 + 8);
LABEL_20:

    goto LABEL_21;
  }
LABEL_36:
  if (HIDWORD(v61))
  {
    unsigned int v22 = v62;
    if (v62)
    {
      uint64_t v23 = 0;
      signed int v24 = (int *)(v61 + 8);
      while (1)
      {
        int v25 = *v24;
        v24 += 6;
        if (v25 < 0) {
          break;
        }
        if (v62 == ++v23)
        {
          LODWORD(v23) = v62;
          break;
        }
      }
    }
    else
    {
      LODWORD(v23) = 0;
    }
    if (v62 != v23)
    {
      uint64_t v30 = v23;
      uint64_t v31 = v61;
      uint64_t v32 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      unsigned int v59 = v62;
      while (1)
      {
        uint64_t v33 = *(void *)(v31 + 24 * v30 + 16);
        uint64_t v34 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v33 + 32), (const re::ecs2::ComponentTypeBase *)v32[271]);
        v77[0] = *(float32x2_t *)(v34 + 132);
        uint64_t v70 = 0x3F8000003F2D42C4;
        int v72 = 10;
        HIWORD(v35) = 16173;
        long long v73 = xmmword_234386520;
        uint64_t v74 = 1056964608;
        int v75 = 0x40000000;
        __int16 v76 = 256;
        LOWORD(v35) = *(_WORD *)(v34 + 110);
        float v71 = (float)v35;
        re::internal::shadows::buildCylindricalProxyMesh((uint64_t)&v70, (re::GeomMesh *)&v68);
        v66[0] = (float32x4_t)xmmword_23435FD50;
        v66[1] = (float32x4_t)xmmword_23435FD60;
        v66[2] = (float32x4_t)xmmword_23435FD80;
        v66[3] = (float32x4_t)xmmword_23435FBB0;
        re::internal::shadows::calcCylShadowProxyLocalTransform(v77, v66, v67);
        re::transform((re::GeomMesh *)&v68, v67);
        float v36 = *(float *)(v34 + 148);
        if (v36 > 0.0)
        {
          float v37 = fabsf(v36);
          if (v37 >= (float)((float)(v37 + 1.0) * 0.00001)) {
            re::internal::wrapGeometryAroundCylinder((re::internal *)&v68, (const re::GeomMesh *)&v68, (re::GeomMesh *)*(unsigned __int8 *)(v34 + 152), v36);
          }
        }
        re::AssetHelper::makeMeshMemoryAsset(*(void *)(a1 + 8), (_anonymous_namespace_ *)&v68, 1, 0, 0);
        id WeakRetained = objc_loadWeakRetained((id *)(v34 + 952));
        if (WeakRetained) {
          break;
        }
        unsigned int v43 = v32;
        uint64_t v44 = re::ecs2::EntityFactory::instance(0);
        uint64_t v45 = re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v44, 4uLL, &v65);
        uint64_t v46 = v65;
        *((_DWORD *)v65 + 72) |= 0x400u;
        v64[0] = 0;
        v64[1] = (uint64_t)"";
        re::StringID::operator=((unint64_t *)v46 + 34, v64);
        re::StringID::destroyString((re::StringID *)v64);
        uint64_t v47 = (void *)*((void *)v46 + 30);
        if (!v47) {
          uint64_t v47 = (void *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v46 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        }
        v47[4] = 0x3F8000003F800000;
        v47[5] = 1065353216;
        v47[6] = 0;
        v47[7] = 0x3F80000000000000;
        v47[8] = 0;
        v47[9] = 0;
        uint64_t v48 = *((void *)v46 + 22);
        if (!v48) {
          uint64_t v48 = re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v46 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        }
        re::AssetHandle::operator=(v48 + 32, (uint64_t *)v66);
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 8))(v64);
        re::DynamicArray<re::AssetHandle>::add((void *)(v48 + 56), v64);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v64);
        uint64_t v49 = (re::ecs2::Entity *)((char *)v65 + 32);
        uint64_t v50 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v65 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        *(unsigned char *)(v50 + 25) = 0;
        re::ecs2::Component::markDirty((void *)v50);
        *(unsigned char *)(v50 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = 1;
        re::ecs2::Component::markDirty((void *)v50);
        *(unsigned char *)(v50 + 26) = 0;
        *(unsigned char *)(v50 + 28) = 0;
        re::ecs2::Component::markDirty((void *)v50);
        *(unsigned char *)(v50 + 36) = 1;
        if (*(unsigned char *)(v34 + 108) == 1) {
          int v51 = 1;
        }
        else {
          int v51 = 2;
        }
        *(_DWORD *)(v50 + 32) = v51;
        re::ecs2::Component::markDirty((void *)v50);
        re::ecs2::EntityComponentCollection::remove(v49, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::Collection<re::SharedPtr<re::ecs2::Entity>>::add((void *)(v33 + 304), (uint64_t *)&v65);
        if (v65) {
          uint64_t v52 = (char *)v65 + 8;
        }
        else {
          uint64_t v52 = 0;
        }
        objc_storeWeak((id *)(v34 + 952), v52);
        if (v65) {

        }
        uint64_t v32 = v43;
        unsigned int v22 = v59;
LABEL_74:
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v66);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v68);
        uint64_t v31 = v61;
        if (v62 <= (int)v23 + 1) {
          unsigned int v53 = v23 + 1;
        }
        else {
          unsigned int v53 = v62;
        }
        while (1)
        {
          uint64_t v30 = (v23 + 1);
          if (v53 - 1 == v23) {
            break;
          }
          LODWORD(v23) = v23 + 1;
          unsigned int v54 = v30;
          if ((*(_DWORD *)(v61 + 24 * v30 + 8) & 0x80000000) != 0) {
            goto LABEL_81;
          }
        }
        unsigned int v54 = v53;
LABEL_81:
        LODWORD(v23) = v54;
        if (v22 == v54) {
          goto LABEL_44;
        }
      }

      long long v39 = (char *)objc_loadWeakRetained((id *)(v34 + 952));
      uint64_t v40 = v39;
      size_t v41 = v39 - 8;
      if (!v39) {
        size_t v41 = 0;
      }
      unsigned int v42 = (void *)*((void *)v41 + 22);
      if (v42)
      {
        if (!v39)
        {
LABEL_60:
          re::AssetHandle::operator=((uint64_t)(v42 + 4), (uint64_t *)v66);
          re::ecs2::Component::markDirty(v42);
          goto LABEL_74;
        }
      }
      else
      {
        unsigned int v42 = (void *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v41 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (!v40) {
          goto LABEL_60;
        }
      }

      goto LABEL_60;
    }
  }
LABEL_44:
  if (*(_DWORD *)(a1 + 148))
  {
    uint64_t v26 = *(unsigned int *)(a1 + 152);
    if (v26)
    {
      uint64_t v27 = 0;
      uint64_t v28 = (int *)(*(void *)(a1 + 136) + 8);
      while (1)
      {
        int v29 = *v28;
        v28 += 6;
        if (v29 < 0) {
          break;
        }
        if (v26 == ++v27)
        {
          LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = *(_DWORD *)(a1 + 152);
          break;
        }
      }
    }
    else
    {
      LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = 0;
    }
    if (v26 != v27)
    {
      uint64_t v55 = v27;
      do
      {
        uint64_t v56 = *(void *)(*(void *)(a1 + 136) + 24 * v55 + 16);
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v56 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::ecs2::Entity::removeFromSceneOrParent((re::ecs2::Entity *)v56);
        if (*(_DWORD *)(a1 + 152) <= (v27 + 1)) {
          int v57 = v27 + 1;
        }
        else {
          int v57 = *(_DWORD *)(a1 + 152);
        }
        int v58 = v27;
        while (1)
        {
          uint64_t v55 = (v58 + 1);
          if (v57 - 1 == v58) {
            break;
          }
          ++v58;
          LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = v55;
          if ((*(_DWORD *)(*(void *)(a1 + 136) + 24 * v55 + 8) & 0x80000000) != 0) {
            goto LABEL_96;
          }
        }
        LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = v57;
LABEL_96:
        ;
      }
      while (v26 != v27);
    }
  }
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 72);
  re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear(a1 + 120);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v60);
}

void re::ecs2::UILayerGeometryManager::markGroundingShadowEntityForRemovalIfNeeded(re::ecs2::UILayerGeometryManager *this, re::ecs2::Entity *a2)
{
  if (a2)
  {
    uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v3)
    {
      uint64_t v4 = (id *)(v3 + 952);
      id WeakRetained = objc_loadWeakRetained((id *)(v3 + 952));
      uint64_t v6 = (uint64_t)WeakRetained - 8;
      if (!WeakRetained) {
        uint64_t v6 = 0;
      }
      uint64_t v7 = v6;
      if (WeakRetained) {
        re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::add((uint64_t)this + 120, &v7);
      }
      objc_destroyWeak(v4);
      *uint64_t v4 = 0;
      if (v7) {
    }
      }
  }
}

uint64_t (***re::ecs2::UILayerGeometryManager::registerScene(re::ecs2::UILayerGeometryManager *this, unint64_t a2))(void)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v28 = 0;
  unint64_t v29 = a2;
  uint64_t v3 = *(re::EventBus **)(a2 + 288);
  uint64_t v6 = *((void *)this + 3);
  uint64_t v4 = (re::ecs2::UILayerGeometryManager *)((char *)this + 24);
  LODWORD(v5) = v6;
  __n128 v25 = 0uLL;
  int v26 = 1;
  uint64_t v27 = 0;
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (v6)
  {
    unint64_t v5 = v8 % *((unsigned int *)this + 12);
    uint64_t v9 = *(unsigned int *)(*((void *)this + 4) + 4 * v5);
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v12 = *((void *)this + 5);
      if (*(void *)(v12 + (v9 << 6) + 16) == a2)
      {
LABEL_9:
        uint64_t v11 = v12 + (v9 << 6) + 24;
        goto LABEL_10;
      }
      while (1)
      {
        uint64_t v9 = *(_DWORD *)(v12 + (v9 << 6) + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v12 + (v9 << 6) + 16) == a2) {
          goto LABEL_9;
        }
      }
    }
  }
  unsigned int v10 = re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove((uint64_t)v4, v5, v8, &v29, (uint64_t)&v25);
  ++*((_DWORD *)this + 16);
  uint64_t v11 = *((void *)this + 5) + ((unint64_t)v10 << 6) + 24;
  uint64_t v4 = (re *)v25.n128_u64[0];
  if (v25.n128_u64[0] && (v26 & 1) == 0) {
    uint64_t v4 = (re *)(*(uint64_t (**)(void))(*(void *)v25.n128_u64[0] + 40))();
  }
LABEL_10:
  uint64_t v40 = re::globalAllocators(v4)[2];
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v40 + 32))(v40, 32, 0);
  *uint64_t v13 = &unk_26E704618;
  v13[1] = this;
  _OWORD v13[2] = re::ecs2::UILayerGeometryManager::didActivateUILayerGeometryComponent;
  v13[3] = 0;
  size_t v41 = v13;
  v25.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v3, (uint64_t)v39, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
  v25.n128_u64[1] = v14;
  re::DynamicOverflowArray<RESubscriptionHandle,1ul>::add(v11, &v25);
  unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v39);
  uint64_t v37 = re::globalAllocators(v15)[2];
  uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v37 + 32))(v37, 32, 0);
  void *v16 = &unk_26E704670;
  v16[1] = this;
  v16[2] = re::ecs2::UILayerGeometryManager::didChangeUILayerGeometryComponent;
  v16[3] = 0;
  long long v38 = v16;
  v25.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v3, (uint64_t)v36, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
  v25.n128_u64[1] = v17;
  re::DynamicOverflowArray<RESubscriptionHandle,1ul>::add(v11, &v25);
  long long v18 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v36);
  uint64_t v34 = re::globalAllocators(v18)[2];
  uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v34 + 32))(v34, 32, 0);
  *uint64_t v19 = &unk_26E7046C8;
  v19[1] = this;
  uint64_t v19[2] = re::ecs2::UILayerGeometryManager::willDeactivateUILayerGeometryComponent;
  v19[3] = 0;
  unsigned int v35 = v19;
  v25.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v3, (uint64_t)v33, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
  v25.n128_u64[1] = v20;
  re::DynamicOverflowArray<RESubscriptionHandle,1ul>::add(v11, &v25);
  int v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v33);
  uint64_t v31 = re::globalAllocators(v21)[2];
  unsigned int v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v31 + 32))(v31, 32, 0);
  void *v22 = &unk_26E704720;
  v22[1] = this;
  _OWORD v22[2] = re::ecs2::UILayerGeometryManager::willRemoveUILayerGeometryComponent;
  v22[3] = 0;
  uint64_t v32 = v22;
  v25.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, (uint64_t)v30, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
  v25.n128_u64[1] = v23;
  re::DynamicOverflowArray<RESubscriptionHandle,1ul>::add(v11, &v25);
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v30);
}

__n128 re::DynamicOverflowArray<RESubscriptionHandle,1ul>::add(uint64_t a1, __n128 *a2)
{
  if (!*(void *)a1)
  {
    unint64_t v10 = *(void *)(a1 + 8) + 1;
    re::DynamicOverflowArray<RESubscriptionHandle,1ul>::setCapacity((void *)a1, v10);
    int v11 = *(_DWORD *)(a1 + 16) + 2;
    *(_DWORD *)(a1 + 16) = v11;
    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v12 = a1 + 24;
    goto LABEL_19;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 1) == 0)
  {
    unint64_t v6 = *(void *)(a1 + 24);
    BOOL v8 = v4 >= v6;
    unint64_t v7 = v4 + 1;
    BOOL v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      unint64_t v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  unint64_t v7 = v4 + 1;
  if (v7 < 2)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  unint64_t v9 = 2;
LABEL_14:
  if (v9 <= v7) {
    unint64_t v13 = v7;
  }
  else {
    unint64_t v13 = v9;
  }
  re::DynamicOverflowArray<RESubscriptionHandle,1ul>::setCapacity((void *)a1, v13);
  if (*(_DWORD *)(a1 + 16)) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v12 = *(void *)(a1 + 32);
LABEL_19:
  __n128 result = *a2;
  *(__n128 *)(v12 + 16 * (*(void *)(a1 + 8))++) = *a2;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

uint64_t re::ecs2::UILayerGeometryManager::didActivateUILayerGeometryComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 72, &v3);
  return 0;
}

uint64_t re::ecs2::UILayerGeometryManager::didChangeUILayerGeometryComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v2 = a1 + 72;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 72, &v4))re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v2, &v4); {
  }
    }
  return 0;
}

uint64_t re::ecs2::UILayerGeometryManager::willDeactivateUILayerGeometryComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 72, &v3);
  return 0;
}

uint64_t re::ecs2::UILayerGeometryManager::willRemoveUILayerGeometryComponent(re::ecs2::UILayerGeometryManager *a1, re::ecs2::Entity *a2)
{
  uint64_t v4 = a2;
  re::ecs2::UILayerGeometryManager::markGroundingShadowEntityForRemovalIfNeeded(a1, a2);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)a1 + 72, (uint64_t *)&v4);
  return 0;
}

uint64_t re::ecs2::UILayerGeometryManager::unregisterScene(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 24);
  unint64_t v5 = (unint64_t)a2 ^ ((unint64_t)a2 >> 30);
  if (!v4
    || (unint64_t v6 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v5) ^ ((0xBF58476D1CE4E5B9 * v5) >> 27)),
        uint64_t v7 = *(unsigned int *)(*(void *)(this + 32) + 4 * ((v6 ^ (v6 >> 31)) % *(unsigned int *)(this + 48))),
        v7 == 0x7FFFFFFF))
  {
LABEL_3:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(this + 40);
  while (*(re::ecs2::Scene **)(v9 + (v7 << 6) + 16) != a2)
  {
    uint64_t v7 = *(_DWORD *)(v9 + (v7 << 6) + 8) & 0x7FFFFFFF;
    if (v7 == 0x7FFFFFFF) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = v9 + (v7 << 6) + 24;
LABEL_8:
  if (*(unsigned char *)(v8 + 16)) {
    unint64_t v10 = (uint64_t *)(v8 + 24);
  }
  else {
    unint64_t v10 = *(uint64_t **)(v8 + 32);
  }
  uint64_t v11 = *(void *)(v8 + 8);
  if (v11)
  {
    uint64_t v12 = *((void *)a2 + 36);
    unint64_t v13 = &v10[2 * v11];
    do
    {
      uint64_t v14 = *v10;
      unint64_t v15 = v10[1];
      v10 += 2;
      this = re::EventBus::unsubscribe(v12, v14, v15);
    }
    while (v10 != v13);
    uint64_t v4 = *(void *)(v3 + 24);
  }
  if (v4)
  {
    unint64_t v16 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v5) ^ ((0xBF58476D1CE4E5B9 * v5) >> 27));
    unint64_t v17 = (v16 ^ (v16 >> 31)) % *(unsigned int *)(v3 + 48);
    uint64_t v18 = *(void *)(v3 + 32);
    uint64_t v19 = *(unsigned int *)(v18 + 4 * v17);
    if (v19 != 0x7FFFFFFF)
    {
      uint64_t v20 = *(void *)(v3 + 40);
      uint64_t v21 = v20 + (v19 << 6);
      if (*(re::ecs2::Scene **)(v21 + 16) == a2)
      {
        *(_DWORD *)(v18 + 4 * v17) = *(_DWORD *)(v21 + 8) & 0x7FFFFFFF;
LABEL_22:
        uint64_t v25 = *(void *)(v3 + 40);
        uint64_t v26 = v25 + (v19 << 6);
        int v29 = *(_DWORD *)(v26 + 8);
        uint64_t v28 = (int *)(v26 + 8);
        int v27 = v29;
        if (v29 < 0)
        {
          int *v28 = v27 & 0x7FFFFFFF;
          this = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v25 + (v19 << 6) + 24);
          uint64_t v25 = *(void *)(v3 + 40);
          int v27 = *(_DWORD *)(v25 + (v19 << 6) + 8);
        }
        int v30 = *(_DWORD *)(v3 + 64);
        *(_DWORD *)(v25 + (v19 << 6) + 8) = *(_DWORD *)(v3 + 60) | v27 & 0x80000000;
        --*(_DWORD *)(v3 + 52);
        *(_DWORD *)(v3 + 60) = v19;
        *(_DWORD *)(v3 + 64) = v30 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v22 = v19;
          int v23 = *(_DWORD *)(v20 + (v19 << 6) + 8);
          uint64_t v19 = v23 & 0x7FFFFFFF;
          if ((v23 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          uint64_t v24 = v20 + (v19 << 6);
          if (*(re::ecs2::Scene **)(v24 + 16) == a2)
          {
            *(_DWORD *)(v20 + ((unint64_t)v22 << 6) + 8) = *(_DWORD *)(v20 + ((unint64_t)v22 << 6) + 8) & 0x80000000 | *(_DWORD *)(v24 + 8) & 0x7FFFFFFF;
            goto LABEL_22;
          }
        }
      }
    }
  }
  return this;
}

void re::ecs2::UILayerGeometryManager::~UILayerGeometryManager(re::ecs2::UILayerGeometryManager *this)
{
}

{
  uint64_t vars8;

  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 15);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9);
  re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3);
  JUMPOUT(0x237DBCBD0);
}

void re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704618;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704618;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704670;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704670;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7046C8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7046C8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704720;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704720;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::UILayerGeometryManager,REEventHandlerResult (re::ecs2::UILayerGeometryManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

double re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6 + 24);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v44, 0, 36);
          *(void *)&v44[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v44, v13, v12);
          long long v15 = *(_OWORD *)v44;
          *(_OWORD *)uint64_t v44 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v44[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v44[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v44[24];
          *(_OWORD *)&v44[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v44[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v44);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  uint64_t v25 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = v26 + (v9 << 6);
  *(void *)(v27 + 24) = 0;
  uint64_t v28 = (void *)(v27 + 24);
  *(_DWORD *)(v27 + 40) = 1;
  int v29 = (int *)(v27 + 40);
  *(void *)(v27 + 32) = 0;
  *(void *)(v27 + 48) = 0;
  int v30 = (uint64_t *)(v27 + 48);
  *(void *)(v27 + 56) = 0;
  if ((*(unsigned char *)(a5 + 16) & 1) == 0)
  {
    *int v29 = 3;
    void *v28 = *(void *)a5;
    *(void *)a5 = 0;
    *(void *)(v27 + 32) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = 0;
    uint64_t v31 = *(void *)(v27 + 56);
    *(void *)(v27 + 56) = *(void *)(a5 + 32);
    *(void *)(a5 + 32) = v31;
    *(_DWORD *)(a5 + 16) = *(_DWORD *)(a5 + 16) & 0xFFFFFFFE | *v29 & 1;
    *v29 &= ~1u;
    uint64_t v32 = *v30;
    *int v30 = *(void *)(a5 + 24);
    *(void *)(a5 + 24) = v32;
LABEL_39:
    int v41 = 2;
    goto LABEL_40;
  }
  unint64_t v33 = *(void *)(a5 + 8);
  if (!v33)
  {
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v28);
    void *v28 = *(void *)a5;
    goto LABEL_39;
  }
  uint64_t v43 = a2;
  void *v28 = *(void *)a5;
  uint64_t v34 = v26 + (v9 << 6);
  re::DynamicOverflowArray<RESubscriptionHandle,1ul>::setCapacity(v28, v33);
  float v36 = (unint64_t *)(v34 + 32);
  uint64_t v35 = *(void *)(v34 + 32);
  if (*(unsigned char *)(a5 + 16)) {
    uint64_t v37 = (const void *)(a5 + 24);
  }
  else {
    uint64_t v37 = *(const void **)(a5 + 32);
  }
  int v38 = *v29;
  long long v39 = v30;
  if ((*v29 & 1) == 0) {
    long long v39 = *(uint64_t **)(v34 + 56);
  }
  if (v35)
  {
    memmove(v39, v37, 16 * v35);
    int v38 = *v29;
  }
  uint64_t v25 = v43;
  if ((v38 & 1) == 0) {
    int v30 = *(uint64_t **)(v26 + (v9 << 6) + 56);
  }
  if (*(_DWORD *)(a5 + 16)) {
    uint64_t v40 = a5 + 24;
  }
  else {
    uint64_t v40 = *(void *)(a5 + 32);
  }
  memcpy(&v30[2 * *v36], (const void *)(v40 + 16 * *v36), 16 * v33 - 16 * *v36);
  *float v36 = v33;
  *(void *)(a5 + 8) = 0;
  int v41 = 4;
LABEL_40:
  *(_DWORD *)(a5 + 16) = ((*(_DWORD *)(a5 + 16) & 0xFFFFFFFE) + v41) | *(_DWORD *)(a5 + 16) & 1;
  *v29 += 2;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v25) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void *re::DynamicOverflowArray<RESubscriptionHandle,1ul>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    double result = (void *)re::DynamicOverflowArray<RESubscriptionHandle,1ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 1 || (v7 & 1) == 0))
    {
      if (a2 < 2)
      {
        BOOL v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          uint64_t v16 = v4 + 3;
        }
        else {
          uint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 16 * v9);
        double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 60)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 16, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 16 * a2;
        int v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 16 * a2, 8);
        if (v10)
        {
          signed int v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 3;
          }
          else {
            uint64_t v13 = (const void *)v4[4];
          }
          double result = memcpy(v10, v13, 16 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      double result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void *re::ecs2::allocInfo_MaterialRenderStateArrayComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C918, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C918))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8C980, "MaterialRenderStateArrayComponent");
    __cxa_guard_release(&qword_26AF8C918);
  }
  return &unk_26AF8C980;
}

void re::ecs2::initInfo_MaterialRenderStateArrayComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x5C89C1565218C930;
  v11[1] = "MaterialRenderStateArrayComponent";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C920, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8C920);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "ecs2::Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8C930 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::MaterialRenderFlags>>::get();
      uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "renderState";
      *(void *)(v9 + 16) = &qword_26AF8C940;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0x2000000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF8C938 = v9;
      __cxa_guard_release(&qword_26AF8C920);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8C930;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialRenderStateArrayComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialRenderStateArrayComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::MaterialRenderStateArrayComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialRenderStateArrayComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::IntrospectionInfo<re::DynamicArray<re::MaterialRenderFlags>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8C928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8C928))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8C940);
    qword_26AF8C940 = (uint64_t)&unk_26E704778;
    __cxa_guard_release(&qword_26AF8C928);
  }
  if ((_MergedGlobals_292 & 1) == 0)
  {
    uint64_t v0 = re::introspect_MaterialRenderFlags((re::IntrospectionBase **)1);
    if ((_MergedGlobals_292 & 1) == 0)
    {
      uint64_t v1 = v0;
      _MergedGlobals_292 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8C940, 0);
      qword_26AF8C950 = 0x2800000003;
      dword_26AF8C958 = v2;
      word_26AF8C95C = 0;
      *(void *)&xmmword_26AF8C960 = 0;
      *((void *)&xmmword_26AF8C960 + 1) = 0xFFFFFFFFLL;
      qword_26AF8C970 = v1;
      unk_26AF8C978 = 0;
      qword_26AF8C940 = (uint64_t)&unk_26E704778;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF8C940, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF8C960 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::MaterialRenderStateArrayComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F5A48;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F5A48;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MaterialRenderStateArrayComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialRenderStateArrayComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialRenderStateArrayComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialRenderStateArrayComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialRenderStateArrayComponent>, this);
}

void *re::IntrospectionDynamicArray<re::MaterialRenderFlags>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MaterialRenderFlags>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MaterialRenderFlags>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialRenderFlags>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MaterialRenderFlags>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::MaterialRenderFlags>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  long long v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    double result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::MaterialRenderFlags>::resize((void *)a4, a5);
    }
  }
  else
  {
    double result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      double result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MaterialRenderFlags>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::MaterialRenderFlags>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::MaterialRenderFlags>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v13 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 18 * v8);
  *(unsigned char *)uint64_t v13 = 0;
  *((unsigned char *)v13 + 2) = 0;
  *((unsigned char *)v13 + 4) = 0;
  *((unsigned char *)v13 + 6) = 0;
  *((unsigned char *)v13 + 8) = 0;
  *((unsigned char *)v13 + 10) = 0;
  *((unsigned char *)v13 + 12) = 0;
  *((unsigned char *)v13 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((unsigned char *)v13 + 16) = 0;
  *(void *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialRenderFlags>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MaterialRenderFlags>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 18 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 18 * a3;
}

void *re::DynamicArray<re::MaterialRenderFlags>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MaterialRenderFlags>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x12uLL))
        {
          uint64_t v2 = 18 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 18 * a2, 1);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_33;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 18, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_33:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = (unsigned char *)(v8 + 18 * v9);
        unint64_t v11 = (unsigned char *)(v8 + 9);
        unint64_t v12 = (char *)v7 + 9;
        do
        {
          uint64_t v13 = v11 - 9;
          int v14 = *(v11 - 9);
          *(v12 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v14;
          if (v14) {
            *(v12 - 8) = *(v11 - 8);
          }
          int v15 = *(v11 - 7);
          *(v12 - 7) = v15;
          if (v15) {
            *(v12 - 6) = *(v11 - 6);
          }
          int v16 = *(v11 - 5);
          *(v12 - 5) = v16;
          if (v16) {
            *(v12 - 4) = *(v11 - 4);
          }
          int v17 = *(v11 - 3);
          *(v12 - re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v17;
          if (v17) {
            *(v12 - 2) = *(v11 - 2);
          }
          int v18 = *(v11 - 1);
          *(v12 - 1) = v18;
          if (v18) {
            *unint64_t v12 = *v11;
          }
          int v19 = v11[1];
          v12[1] = v19;
          if (v19) {
            void v12[2] = v11[2];
          }
          int v20 = v11[3];
          v12[3] = v20;
          if (v20) {
            v12[4] = v11[4];
          }
          int v21 = v11[5];
          v12[5] = v21;
          if (v21) {
            v12[6] = v11[6];
          }
          int v22 = v11[7];
          v12[7] = v22;
          if (v22) {
            v12[8] = v11[8];
          }
          v11 += 18;
          v12 += 18;
        }
        while (v13 + 18 != v10);
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_33;
    }
  }
  return result;
}

void *re::DynamicArray<re::MaterialRenderFlags>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      double result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = (unsigned char *)(v3[4] + 18 * v4 + 8);
      do
      {
        *(v6 - 8) = 0;
        *(v6 - 6) = 0;
        *(v6 - 4) = 0;
        *(v6 - 2) = 0;
        *uint64_t v6 = 0;
        void v6[2] = 0;
        v6[4] = 0;
        v6[6] = 0;
        v6[8] = 0;
        v6 += 18;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MaterialRenderFlags>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialRenderFlags>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 18 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 18;
        v11 -= 18;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 18 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 18 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::ecs2::allocInfo_ProtectionOptionsSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_293, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_293))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8CA00, "ProtectionOptionsSystem");
    __cxa_guard_release(&_MergedGlobals_293);
  }
  return &unk_26AF8CA00;
}

void re::ecs2::initInfo_ProtectionOptionsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xE76AB3F74DAE17E8;
  v5[1] = "ProtectionOptionsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ProtectionOptionsSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::ProtectionOptionsSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ProtectionOptionsSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ProtectionOptionsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ProtectionOptionsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::ProtectionOptionsSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ProtectionOptionsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::ProtectionOptionsSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1, 1);
  void *v3 = &unk_26E704810;
  v3[14] = 0;
  v3[15] = 0;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::ProtectionOptionsSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ProtectionOptionsSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1, 1);
  *uint64_t v1 = &unk_26E704810;
  v1[14] = 0;
  v1[15] = 0;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::ProtectionOptionsSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ProtectionOptionsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProtectionOptionsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProtectionOptionsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProtectionOptionsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProtectionOptionsSystem>, this);
}

uint64_t re::ecs2::ProtectionOptionsSystem::willAddSystemToECSService(re::ecs2::ProtectionOptionsSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ProtectionOptionsService>(*(void *)(*((void *)this + 13) + 648));
  *((void *)this + re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 15) = result;
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ProtectionOptionsService>(uint64_t a1)
{
  {
    re::introspect<re::ProtectionOptionsService>(void)::info = re::introspect_ProtectionOptionsService(0);
  }
  uint64_t v2 = re::introspect<re::ProtectionOptionsService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void *re::ecs2::ProtectionOptionsSystem::willRemoveSystemFromECSService(void *this)
{
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  return this;
}

void *re::ecs2::ProtectionOptionsSystem::update(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[13];
  if (!v4 || (*(unsigned char *)(v4 + 424) & 0x10) != 0)
  {
    if (result[14])
    {
      uint64_t result = (void *)result[15];
      if (result && a3 == 1)
      {
        (*(void (**)(void *))(*result + 48))(result);
        uint64_t v6 = *(void *)(v3[14] + 104);
        if (v6) {
          uint64_t v7 = re::RenderFrameBox::get(v6 + 344, 0xFFFFFFFFFFFFFFFuLL);
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[15] + 24))(v3[15]);
        *(void *)(v7 + 416) = result;
      }
    }
  }
  return result;
}

void re::ecs2::ProtectionOptionsSystem::update(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40));
  if (v8)
  {
    uint64_t v9 = (id *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40));
    if (v10)
    {
      id WeakRetained = (char *)objc_loadWeakRetained(v9);
      if (WeakRetained) {
        unint64_t v12 = WeakRetained - 8;
      }
      else {
        unint64_t v12 = 0;
      }
      if (WeakRetained) {

      }
      if (v12 == a2)
      {
        re::ecs2::ProtectionOptionsSystem::update((void *)a1, a3, a4);
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "first", 225);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::ProtectionOptionsSystem::~ProtectionOptionsSystem(re::ecs2::ProtectionOptionsSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ProtectionOptionsSystem::typeInfo(re::ecs2::ProtectionOptionsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProtectionOptionsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProtectionOptionsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProtectionOptionsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProtectionOptionsSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::ProtectionOptionsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ProtectionOptionsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_ImageBasedReflectionSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CA80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8CA80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8CA88, "ImageBasedReflectionSystem");
    __cxa_guard_release(&qword_26AF8CA80);
  }
  return &unk_26AF8CA88;
}

void re::ecs2::initInfo_ImageBasedReflectionSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xC466ACB6F5D99324;
  v5[1] = "ImageBasedReflectionSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ImageBasedReflectionSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ImageBasedReflectionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ImageBasedReflectionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E704898;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 192) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 196) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 20);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionSystem>(_OWORD *a1)
{
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E704898;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 196) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionSystem>(void *a1)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 20);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ImageBasedReflectionSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedReflectionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedReflectionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedReflectionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedReflectionSystem>, this);
}

uint64_t re::ecs2::ImageBasedReflectionSystem::willAddSystemToECSService(re::ecs2::ImageBasedReflectionSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::RenderManager>(v2);
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = result;
  return result;
}

uint64_t (***re::ecs2::ImageBasedReflectionSystem::willAddSceneToECSService(re::ecs2::ImageBasedReflectionSystem *this, re::EventBus **a2))(void)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v9 = (re::ecs2::Scene *)a2;
  uint64_t v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for ImageBasedReflectionSystem to track parameter changes.", "eventBus", "willAddSceneToECSService", 33);
    _os_crash();
    __break(1u);
  }
  long long v4 = (char *)this + 160;
  uint64_t v11 = re::globalAllocators(this)[2];
  unint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v11 + 32))(v11, 32, 0);
  void *v5 = &unk_26E704928;
  v5[1] = this;
  void v5[2] = re::ecs2::ImageBasedReflectionSystem::componentWillDeactivateEventHandler;
  v5[3] = 0;
  unint64_t v12 = v5;
  *(void *)&long long v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v2, (uint64_t)v10, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
  *((void *)&v8 + 1) = v6;
  re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addNew((uint64_t)v4, (uint64_t *)&v9, &v8);
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v10);
}

uint64_t re::ecs2::ImageBasedReflectionSystem::componentWillDeactivateEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(re::MaterialManager **)(*(void *)(a1 + 112) + 24);
  uint64_t v3 = (re::ecs2::ImageBasedReflectionReceiverComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::ecs2::ImageBasedReflectionReceiverComponent::removeParamsFromSystemParameterBlock(v3, v2, 1);
  return 0;
}

uint64_t re::ecs2::ImageBasedReflectionSystem::willRemoveSceneFromECSService(re::ecs2::ImageBasedReflectionSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v11 = (unint64_t)a2;
  uint64_t v3 = *((void *)a2 + 36);
  long long v4 = (void *)((char *)this + 160);
  uint64_t result = re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey((uint64_t)this + 160, (uint64_t *)&v11);
  if (result)
  {
    LODWORD(v6) = 0x7FFFFFFF;
    if (*v4)
    {
      unint64_t v7 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
      uint64_t v8 = *(unsigned int *)(*((void *)this + 21) + 4 * ((v7 ^ (v7 >> 31)) % *((unsigned int *)this + 46)));
      if (v8 != 0x7FFFFFFF)
      {
        uint64_t v9 = *((void *)this + 22);
        if (*(void *)(v9 + 40 * v8 + 16) == v11)
        {
          LODWORD(v6) = v8;
        }
        else
        {
          uint64_t v6 = v8;
          while (1)
          {
            LODWORD(v6) = *(_DWORD *)(v9 + 40 * v6 + 8) & 0x7FFFFFFF;
            if (v6 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v9 + 40 * v6 + 16) == v11) {
              goto LABEL_11;
            }
          }
          LODWORD(v6) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    uint64_t v10 = *((void *)this + 22) + 40 * v6;
    re::EventBus::unsubscribe(v3, *(void *)(v10 + 24), *(void *)(v10 + 32));
    return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v4, (uint64_t *)&v11);
  }
  return result;
}

void re::ecs2::ImageBasedReflectionSystem::updateScenes(re::ecs2::ImageBasedReflectionSystem *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 14);
  if (v2)
  {
    _MergedGlobals_294 = 0;
    uint64_t v5 = *(void *)(v2 + 88);
    if (v5)
    {
      char v15 = 0;
      unint64_t v13 = 0xE15535833B0F11F2;
      uint64_t v14 = "imageBasedReflectionSystem:debugLog";
      re::DebugSettingsManager::getWithErrorCode<BOOL>(v5, &v13, &v15);
      re::StringID::destroyString((re::StringID *)&v13);
      _MergedGlobals_294 = v15;
      if (v15)
      {
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v13, v12);
        if (v13)
        {
          if (v14) {
            (*(void (**)(void))(*(void *)v13 + 40))();
          }
        }
      }
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      uint64_t v8 = *(uint64_t **)a2;
      uint64_t v9 = 8 * v7;
      do
      {
        uint64_t v10 = *v8;
        if (*v8)
        {
          id v11 = (id)(v10 + 8);
          re::ecs2::ImageBasedReflectionSystem::applyAttachmentsForScene(a1, (const re::ecs2::Scene *)v10);
        }
        else
        {
          re::ecs2::ImageBasedReflectionSystem::applyAttachmentsForScene(a1, 0);
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
}

void re::ecs2::ImageBasedReflectionSystem::log(re::ecs2::ImageBasedReflectionSystem *this, const re::DynamicString *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((void *)this + 1)) {
      long long v4 = (char *)*((void *)this + 2);
    }
    else {
      long long v4 = (char *)this + 9;
    }
    int v5 = 136315138;
    uint64_t v6 = v4;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "ImageBasedReflectionSystem: %s", (uint8_t *)&v5, 0xCu);
  }
}

void re::ecs2::ImageBasedReflectionSystem::applyAttachmentsForScene(re::ecs2::ImageBasedReflectionSystem *this, const re::ecs2::Scene *a2)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 14);
  if (v2 && (unsigned int v59 = *(re::RenderManager ***)(v2 + 24)) != 0)
  {
    if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken != -1) {
      dispatch_once(&re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken, &__block_literal_global_35);
    }
    if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking)
    {
      unint64_t v5 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
           + 8);
      if (*((void *)a2 + 28) > v5)
      {
        uint64_t v6 = *(void *)(*((void *)a2 + 30) + 8 * v5);
        if (v6)
        {
          uint64_t v7 = *(void *)(v6 + 24);
          if (v7)
          {
            uint64_t v8 = *(re::ecs2::ImageBasedReflectionReceiverComponent ***)(v6 + 40);
            uint64_t v9 = 8 * v7;
            do
            {
              uint64_t v10 = *v8++;
              re::ecs2::ImageBasedReflectionReceiverComponent::removeParamsFromSystemParameterBlock(v10, *(re::MaterialManager **)(*((void *)this + 14) + 24), 0);
              v9 -= 8;
            }
            while (v9);
          }
        }
      }
    }
    uint64_t ReflectionContentComponent = re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent(a2, (const re::ecs2::Scene *)1);
    uint64_t v13 = ReflectionContentComponent;
    float32x4_t v14 = 0uLL;
    float32x4_t v57 = 0u;
    if (ReflectionContentComponent)
    {
      uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(ReflectionContentComponent + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (!v15)
      {
        if (_MergedGlobals_294)
        {
          re::DynamicString::format((re::DynamicString *)"Warning! Encountered entity %llu with a ImageBasedReflectionContentComponent but no video component", (re::DynamicString *)buf, *(void *)(*(void *)(v13 + 16) + 296));
          re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)buf, v19);
          if (*(void *)buf)
          {
            if (buf[8]) {
              (*(void (**)(void))(**(void **)buf + 40))();
            }
          }
        }
        return;
      }
      uint64_t v16 = v15;
      uint64_t CustomDockingRegionComponentFromScene = re::ecs2::CustomDockingRegionComponent::getCustomDockingRegionComponentFromScene((uint64_t)a2);
      if (CustomDockingRegionComponentFromScene)
      {
        float32x4_t v57 = *(float32x4_t *)(CustomDockingRegionComponentFromScene + 32);
        float32x4_t v14 = *(float32x4_t *)(CustomDockingRegionComponentFromScene + 48);
      }
      else
      {
        if (_MergedGlobals_294)
        {
          re::DynamicString::format((re::DynamicString *)"Warning! Encountered entity %llu with a ImageBasedReflectionContentComponent but no docking region component", (re::DynamicString *)buf, *(void *)(*(void *)(v13 + 16) + 296));
          re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)buf, v53);
          if (*(void *)buf)
          {
            if (buf[8]) {
              (*(void (**)(void))(**(void **)buf + 40))();
            }
          }
        }
        float32x4_t v14 = 0uLL;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    float32x4_t v55 = v14;
    uint64_t v20 = *(void *)(*((void *)this + 14) + 288);
    uint64_t v21 = *(void *)(v20 + 1312);
    if (v21)
    {
      float v22 = (*(float (**)(uint64_t))(*(void *)v21 + 16))(v21);
      if (!v13) {
        return;
      }
    }
    else
    {
      float v22 = *(float *)(v20 + 1320);
      if (!v13) {
        return;
      }
    }
    if (v16)
    {
      re::ecs2::ibrutils::inferContentPlaneGeometry(*(re::ecs2::ibrutils **)(v13 + 16), v12, (uint64_t)v74);
      if (_MergedGlobals_294)
      {
        *(_OWORD *)buf = v74[0];
        long long v69 = v74[1];
        long long v70 = v74[2];
        long long v71 = v74[3];
        re::GraphicsLoggingUtilities::toStr((float *)buf, (re::DynamicString *)&v65);
        if (BYTE8(v65)) {
          uint64_t v47 = v66;
        }
        else {
          uint64_t v47 = (char *)&v65 + 9;
        }
        re::DynamicString::format((re::DynamicString *)"Content worldToPlaneUVsTransformMatrix: %s", (re::DynamicString *)v60, v47);
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)v60, v48);
        if (*(void *)&v60[0])
        {
          if (BYTE8(v60[0])) {
            (*(void (**)(void))(**(void **)&v60[0] + 40))();
          }
          memset(v60, 0, 32);
        }
        if (void)v65 && (BYTE8(v65)) {
          (*(void (**)(void))(*(void *)v65 + 40))();
        }
        re::DynamicString::format((re::DynamicString *)"Content planeWidth: %g planeHeight: %g", (re::DynamicString *)v60, v75, v76);
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)v60, v49);
        if (*(void *)&v60[0] && (BYTE8(v60[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v60[0] + 40))();
        }
        unint64_t v50 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
              + 8);
        if (*((void *)a2 + 28) <= v50)
        {
          uint64_t v51 = 0;
        }
        else
        {
          uint64_t v51 = *(void *)(*((void *)a2 + 30) + 8 * v50);
          if (v51) {
            uint64_t v51 = *(void *)(v51 + 24);
          }
        }
        re::DynamicString::format((re::DynamicString *)"Content will be applied to %zu receiver(s)", (re::DynamicString *)v60, v51);
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)v60, v52);
        if (*(void *)&v60[0] && (BYTE8(v60[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v60[0] + 40))();
        }
      }
      unint64_t v23 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
            + 8);
      if (*((void *)a2 + 28) > v23)
      {
        uint64_t v24 = *(void *)(*((void *)a2 + 30) + 8 * v23);
        if (v24)
        {
          uint64_t v25 = *(void *)(v24 + 24);
          if (v25)
          {
            v58.i64[0] = vsubq_f32(v55, v57).u64[0];
            uint64_t v26 = *(uint64_t ***)(v24 + 40);
            uint64_t v56 = &v26[v25];
            do
            {
              uint64_t v27 = *v26;
              float v28 = v75;
              float v29 = v76;
              float v30 = *(float *)(v16 + 304);
              re::ecs2::VideoComponent::getVideoTextureHandles((re::ecs2::VideoComponent *)v16, (uint64_t)buf);
              re::ecs2::VideoComponent::calculateColorSpaceTransformationMatrix(v16, (uint64_t)buf, &v65);
              float v31 = *(float *)(v16 + 296) / (float)(v22 * v30);
              if (_MergedGlobals_294)
              {
                uint64_t v32 = v27[2];
                if (v32)
                {
                  uint64_t v45 = *(void *)(v32 + 280);
                  if (v45)
                  {
                    re::DynamicString::format((re::DynamicString *)"Applying video attachments for receiver entity %llu [%s] (videoBrightnessScale: %g)", (re::DynamicString *)&v63, *(void *)(v32 + 296), v45, v31);
                    re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v63, v46);
                    if (v63)
                    {
                      if (v64) {
                        (*(void (**)(void))(*(void *)v63 + 40))();
                      }
                    }
                  }
                }
              }
              for (uint64_t i = 0; i != 18; i += 9)
              {
                uint64_t v34 = &v60[i];
                *((void *)v34 + 16) = 0;
                *((_DWORD *)v34 + 30) = 0;
                _OWORD *v34 = 0uLL;
                v34[1] = 0uLL;
                v34[2] = 0uLL;
                v34[3] = 0uLL;
                v34[4] = 0uLL;
                v34[5] = 0uLL;
                *(_OWORD *)((char *)v34 + 92) = 0uLL;
              }
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)&v63, (uint64_t)buf, (uint64_t)&v72, (uint64_t)v60);
              int v61 = v72;
              char v62 = v73;
              int v35 = re::ecs2::VideoComponent::YCbCrMatrix((re::ecs2::VideoComponent *)v16);
              int v36 = re::ecs2::VideoComponent::imageFunction((re::ecs2::VideoComponent *)v16);
              float v37 = *(float *)(v16 + 300);
              *(void *)&long long v54 = re::ecs2::VideoComponent::getAverageColor((re::ecs2::VideoComponent *)v16);
              *((void *)&v54 + 1) = v38;
              v39.i32[0] = v58.i32[1];
              re::ecs2::ImageBasedReflectionReceiverComponent::applyAttachments(v27, v59, (re::TextureHandle *)v60, v35, v36, (int)&v65, v74, v40, v28, v29, v31, v37, v39, *(int32x2_t *)v58.f32, v54);
              uint64_t v41 = 18;
              do
              {
                uint64_t v42 = &v60[v41];
                if (*(void *)&v60[v41 - 1]) {
                  re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v60[v41 - 1]);
                }
                *(void *)&v60[v41 - 1] = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)(v42 - 4));
                re::TextureHandle::invalidate((re::TextureHandle *)(v42 - 5));
                re::TextureHandle::invalidate((re::TextureHandle *)(v42 - 6));
                re::TextureHandle::invalidate((re::TextureHandle *)(v42 - 7));
                re::TextureHandle::invalidate((re::TextureHandle *)(v42 - 8));
                re::TextureHandle::invalidate((re::TextureHandle *)&v60[v41 - 9]);
                v41 -= 9;
              }
              while (v41 * 16);
              unint64_t v43 = 288;
              do
              {
                uint64_t v44 = &buf[v43];
                if (*(void *)&v67[v43]) {
                  re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v67[v43]);
                }
                *(void *)&v67[v43] = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)(v44 - 64));
                re::TextureHandle::invalidate((re::TextureHandle *)(v44 - 80));
                re::TextureHandle::invalidate((re::TextureHandle *)(v44 - 96));
                re::TextureHandle::invalidate((re::TextureHandle *)(v44 - 112));
                re::TextureHandle::invalidate((re::TextureHandle *)(v44 - 128));
                re::TextureHandle::invalidate((re::TextureHandle *)&v60[v43 / 0x10 + 15]);
                v43 -= 144;
              }
              while (v43);
              ++v26;
            }
            while (v26 != v56);
          }
        }
      }
    }
  }
  else if ((atomic_exchange(byte_26AF8CA79, 1u) & 1) == 0)
  {
    int v18 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "ImageBasedReflection: ImageBasedReflectionSystem failed -- can't access MaterialManager", buf, 2u);
    }
  }
}

uint64_t re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent(re::ecs2::ImageBasedReflectionSystem *this, const re::ecs2::Scene *a2)
{
  unint64_t v3 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
       + 8);
  if (*((void *)this + 28) > v3 && (uint64_t v4 = *(void *)(*((void *)this + 30) + 8 * v3)) != 0)
  {
    unint64_t v5 = *(void **)(v4 + 40);
    uint64_t v6 = *(void *)(v4 + 24);
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (_MergedGlobals_294) {
    int v7 = (int)a2;
  }
  else {
    int v7 = 0;
  }
  if (v7 == 1)
  {
    re::DynamicString::format((re::DynamicString *)"Found %zu content component(s)", (re::DynamicString *)&v36, v6);
    re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v32);
    if (v36)
    {
      if (v37) {
        (*(void (**)(void))(*(void *)v36 + 40))();
      }
    }
  }
  if (!v6) {
    return 0;
  }
  unint64_t v8 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
       + 8);
  if (*((void *)this + 28) <= v8 || (uint64_t v9 = *(void *)(*((void *)this + 30) + 8 * v8)) == 0)
  {
    if (!v7)
    {
LABEL_16:
      uint64_t v11 = 8 * v6;
      unint64_t v12 = v5;
      while (1)
      {
        uint64_t v13 = *v12;
        uint64_t v14 = *(void *)(*v12 + 16);
        if (v14)
        {
          int v15 = *(_DWORD *)(v14 + 288);
          char v16 = v7 ^ 1;
          if ((v15 & 1) == 0) {
            char v16 = 1;
          }
          if ((v16 & 1) == 0)
          {
            re::DynamicString::format((re::DynamicString *)"Chose arbitrary content component from entity %llu", (re::DynamicString *)&v36, *(void *)(v14 + 296));
LABEL_45:
            re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v29);
            if (v36 && (v37 & 1) != 0) {
              (*(void (**)(void))(*(void *)v36 + 40))();
            }
            return v13;
          }
          if (v15) {
            return v13;
          }
        }
        ++v12;
        v11 -= 8;
        if (!v11) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v10 = 0;
    goto LABEL_59;
  }
  uint64_t v10 = *(void *)(v9 + 24);
  if (v7)
  {
LABEL_59:
    re::DynamicString::format((re::DynamicString *)"Found %zu root component(s)", (re::DynamicString *)&v36, v10);
    re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v33);
    if (v36 && (v37 & 1) != 0) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
    if (!v10)
    {
      re::DynamicString::format((re::DynamicString *)"Warning! No root component found; results are undefined",
        (re::DynamicString *)&v36);
      re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v34);
      if (v36 && (v37 & 1) != 0) {
        (*(void (**)(void))(*(void *)v36 + 40))();
      }
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (!v10) {
    goto LABEL_16;
  }
LABEL_23:
  int v17 = &v5[v6];
  int8x16_t v18 = (int8x16_t)xmmword_23436BBD0;
  while (1)
  {
    uint64_t v13 = *v5;
    if (v7)
    {
      uint64_t v19 = *(void *)(v13 + 16);
      if (v19)
      {
        int8x16_t v35 = v18;
        re::DynamicString::format((re::DynamicString *)"Checking whether content component on entity %llu is parented by a root component...", (re::DynamicString *)&v36, *(void *)(v19 + 296));
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v28);
        if (v36 && (v37 & 1) != 0) {
          (*(void (**)(void))(*(void *)v36 + 40))();
        }
        int8x16_t v18 = v35;
      }
    }
    uint64_t v20 = *(void *)(v13 + 16);
    if (v20)
    {
      if (*(unsigned char *)(v20 + 288)) {
        break;
      }
    }
LABEL_37:
    if (++v5 == v17)
    {
      if (v7)
      {
        re::DynamicString::format((re::DynamicString *)"No valid content component was found", (re::DynamicString *)&v36);
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v30);
        if (v36)
        {
          if (v37) {
            (*(void (**)(void))(*(void *)v36 + 40))();
          }
        }
      }
      return 0;
    }
  }
  uint64_t v21 = *(void *)(v13 + 16);
  while (1)
  {
    uint64_t v22 = *(unsigned __int16 *)(v21 + 82);
    if (*(_WORD *)(v21 + 82))
    {
      unint64_t v23 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                            + 16);
      uint64_t v24 = *(int16x8_t **)(v21 + 88);
      int16x8_t v25 = vld1q_dup_s16(v23);
      int v26 = 1;
      while (1)
      {
        uint16x8_t v27 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v25, *v24), v18);
        v27.i16[0] = vmaxvq_u16(v27);
        if (v27.i32[0]) {
          break;
        }
        v26 -= 8;
        ++v24;
        if (!--v22) {
          goto LABEL_35;
        }
      }
      if (v27.u16[0] - v26 < *(unsigned __int16 *)(v21 + 80)) {
        break;
      }
    }
LABEL_35:
    uint64_t v21 = *(void *)(v21 + 24);
    if (!v21 || (*(unsigned char *)(v21 + 288) & 0x80) != 0) {
      goto LABEL_37;
    }
  }
  if (v7)
  {
    re::DynamicString::format((re::DynamicString *)"Found root component parenting content from entity %llu, will use this content", (re::DynamicString *)&v36, *(void *)(v20 + 296));
    goto LABEL_45;
  }
  return v13;
}

void re::ecs2::ImageBasedReflectionSystem::~ImageBasedReflectionSystem(re::ecs2::ImageBasedReflectionSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ImageBasedReflectionSystem::typeInfo(re::ecs2::ImageBasedReflectionSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedReflectionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedReflectionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedReflectionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedReflectionSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704928;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704928;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::ImageBasedReflectionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ImageBasedReflectionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_VisualProxyCaptureComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_295, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_295))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8CB20, "VisualProxyCaptureComponent");
    __cxa_guard_release(&_MergedGlobals_295);
  }
  return &unk_26AF8CB20;
}

void re::ecs2::initInfo_VisualProxyCaptureComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x12371EF08E44DECALL;
  v9[1] = "VisualProxyCaptureComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CB10, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8CB10);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8CB08 = v7;
      __cxa_guard_release(&qword_26AF8CB10);
    }
  }
  *((void *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8CB08;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxyCaptureComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxyCaptureComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::VisualProxyCaptureComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxyCaptureComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

uint64_t re::internal::defaultConstruct<re::ecs2::VisualProxyCaptureComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::VisualProxyCaptureComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxyCaptureComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::FunctionBase<24ul,void ()(NS::SharedPtr<MTL::Texture>)>::destroyCallable(a3 + 136);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a3 + 88));
  uint64_t v4 = *(const void **)(a3 + 80);
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = *(void **)(a3 + 72);
  if (v5)
  {

    *(void *)(a3 + 72) = 0;
  }
  if (*(unsigned char *)(a3 + 40))
  {
    objc_destroyWeak((id *)(a3 + 48));
    *(void *)(a3 + 48) = 0;
  }
  *(void *)a3 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxyCaptureComponent>(uint64_t a1)
{
  re::FunctionBase<24ul,void ()(NS::SharedPtr<MTL::Texture>)>::destroyCallable(a1 + 136);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 88));
  uint64_t v2 = *(const void **)(a1 + 80);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {

    *(void *)(a1 + 72) = 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    objc_destroyWeak((id *)(a1 + 48));
    *(void *)(a1 + 48) = 0;
  }
  *(void *)a1 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_VisualProxyCaptureComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyCaptureComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyCaptureComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyCaptureComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyCaptureComponent>, this);
}

void *re::ecs2::allocInfo_VisualProxyCaptureSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CB18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8CB18))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8CB98, "VisualProxyCaptureSystem");
    __cxa_guard_release(&qword_26AF8CB18);
  }
  return &unk_26AF8CB98;
}

void re::ecs2::initInfo_VisualProxyCaptureSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xB32037BEF810F18ELL;
  v5[1] = "VisualProxyCaptureSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1A000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_VisualProxyCaptureSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxyCaptureSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxyCaptureSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::VisualProxyCaptureSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::VisualProxyCaptureSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::VisualProxyCaptureSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxyCaptureSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::VisualProxyCaptureSystem *re::internal::defaultConstruct<re::ecs2::VisualProxyCaptureSystem>(uint64_t a1, uint64_t a2, re::ecs2::VisualProxyCaptureSystem *a3)
{
  return re::ecs2::VisualProxyCaptureSystem::VisualProxyCaptureSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxyCaptureSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 22);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxyCaptureSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 22);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VisualProxyCaptureSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyCaptureSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyCaptureSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyCaptureSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyCaptureSystem>, this);
}

BOOL re::ecs2::VisualProxyCaptureComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  unint64_t v8 = v21;
  unint64_t v9 = v22;
  unint64_t v21 = a4;
  unint64_t v22 = v8;
  unint64_t v23 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      int v14 = *(unsigned __int8 *)(*(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22)
                               + 32);
      unint64_t v15 = v21;
      unint64_t v16 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
      if (v14) {
        uint64_t v17 = 32;
      }
      else {
        uint64_t v17 = 48;
      }
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v15, v16, *(void *)(a3 + v17));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) == 0;
}

BOOL re::ecs2::VisualProxyCaptureComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  uint64_t v8 = v21;
  uint64_t v9 = v22;
  uint64_t v21 = a4;
  uint64_t v22 = v8;
  uint64_t v23 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = *(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22);
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 8) + 112) + 104);
      if (v15 && (int v16 = *(_DWORD *)(v15 + 1764), v16 < 32))
      {
        uint64_t v17 = (re::ecs2::Entity *)(v16 + 1);
        *(_DWORD *)(v15 + 1764) = v17;
        *(_DWORD *)(v14 + 184) = v17;
        if (v16 != -2) {
          re::ecs2::VisualProxyCaptureHelper::markVisualProxyScope(*(re::ecs2::VisualProxyCaptureHelper **)(v14 + 16), v17);
        }
      }
      else
      {
        *(_DWORD *)(v14 + 184) = -1;
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

re::ecs2::VisualProxyCaptureSystem *re::ecs2::VisualProxyCaptureSystem::VisualProxyCaptureSystem(re::ecs2::VisualProxyCaptureSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(void *)uint64_t v2 = &unk_26E7049C0;
  uint64_t v3 = v2 + 160;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 160) = &unk_26E704980;
  *(void *)(v2 + 168) = v2;
  *(void *)(v2 + 176) = 0;
  uint64_t v4 = v2 + 176;
  *(void *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 192) = 1;
  *(void *)(v2 + 208) = 0;
  *(void *)(v2 + 216) = 0;
  *(void *)(v2 + 200) = 0;
  *(_DWORD *)(v2 + 224) = 0;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  unint64_t v5 = (void *)(v2 + 296);
  *(_OWORD *)(v2 + 232) = 0u;
  long long v6 = (void *)(v2 + 232);
  *(_DWORD *)(v2 + 312) = 1;
  uint64_t v7 = (void *)(v2 + 344);
  *(_OWORD *)(v2 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(void *)(v2 + 352) = 0;
  *(_DWORD *)(v2 + 360) = 1;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 39re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  uint64_t v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 78) += 2;
  *((void *)this + 42) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 90) += 2;
  *((void *)this + 48) = 0;
  *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = this;
  *((void *)this + 50) = v3;
  *((unsigned char *)this + 408) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  char v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

void re::ecs2::VisualProxyCaptureSystem::updateScenes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5 || (*(unsigned char *)(v5 + 424) & 0x10) != 0)
  {
    long long v6 = a2[1];
    if (v6)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = 8 * (void)v6;
      while (*(void *)(a1 + 112))
      {
        uint64_t v9 = *v7++;
        re::ecs2::BasicComponentStates<re::ecs2::VisualProxyCaptureComponent>::updateForScene(a1 + 176, v9, (uint64_t)&v10, 0);
        v8 -= 8;
        if (!v8) {
          return;
        }
      }
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateScenes", 98, v10, v11);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::VisualProxyCaptureSystem::willAddSceneToECSService(re::ecs2::VisualProxyCaptureSystem *this, re::ecs2::Scene *a2)
{
}

uint64_t re::ecs2::VisualProxyCaptureSystem::willRemoveSceneFromECSService(re::ecs2::VisualProxyCaptureSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 176, (uint64_t)a2);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VisualProxyCaptureComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::VisualProxyCaptureSystem::~VisualProxyCaptureSystem(re::ecs2::VisualProxyCaptureSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::VisualProxyCaptureSystem::typeInfo(re::ecs2::VisualProxyCaptureSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyCaptureSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyCaptureSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyCaptureSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyCaptureSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::VisualProxyCaptureComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6F2C48;
  *(_WORD *)(v2 + 32) = 256;
  *(unsigned char *)(v2 + 40) = 0;
  *(void *)(v2 + 56) = 0x20000000200;
  *(_DWORD *)(v2 + 64) = 71;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_DWORD *)(v2 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(void *)(v2 + 124) = 0x7FFFFFFFLL;
  *(void *)(a1 + 160) = re::globalAllocators((re *)v2)[2];
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = -1;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::VisualProxyCaptureSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VisualProxyCaptureSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 176 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_10, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::ecs2::AudioComponentForwarder::forwardAudioComponentState(re::ecs2::AudioComponentForwarder *this, uint64_t a2, re::ecs2::Entity *a3)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  if (!a2 || !a3)
  {
    uint64_t v7 = *re::audioLogObjects(this);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 134218240;
    uint64_t v103 = a2;
    __int16 v104 = 2048;
    uint64_t v105 = a3;
    float32x4_t v55 = "Cannot set up audio component forwarding with source entity %p, destination entity %p";
    uint64_t v56 = v7;
    uint32_t v57 = 22;
    goto LABEL_28;
  }
  unint64_t v6 = (void *)re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet((uint64_t)this, a2);
  if (v6)
  {
    *unint64_t v6 = a3;
    goto LABEL_5;
  }
  uint64_t v8 = a2;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = *(void *)(v8 + 24);
  }
  while (v8);
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
    long long v54 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 134217984;
    uint64_t v103 = a2;
    float32x4_t v55 = "Cannot set up audio component forwarding b/c entity %p has no scene";
    uint64_t v56 = v54;
    uint32_t v57 = 12;
    goto LABEL_28;
  }
  uint64_t v11 = *(re::EventBus **)(v10 + 288);
  if (!v11)
  {
    float32x4_t v58 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)buf = 0;
    float32x4_t v55 = "Cannot set up audio component forwarding b/c entity's scene has no event bus";
    uint64_t v56 = v58;
    uint32_t v57 = 2;
LABEL_28:
    _os_log_error_impl(&dword_233120000, v56, OS_LOG_TYPE_ERROR, v55, buf, v57);
    return;
  }
  uint64_t v100 = re::globalAllocators(0)[2];
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v100 + 32))(v100, 32, 0);
  *uint64_t v12 = &unk_26E704A68;
  v12[1] = this;
  void v12[2] = re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::SpatialAudioComponent>;
  v12[3] = 0;
  uint64_t v101 = v12;
  uint64_t v13 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v11, a2, (uint64_t)v99, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v73 = v14;
  uint64_t v74 = v13;
  uint64_t v97 = re::globalAllocators(v13)[2];
  unint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v97 + 32))(v97, 32, 0);
  void *v15 = &unk_26E704A68;
  v15[1] = this;
  void v15[2] = re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::AmbientAudioComponent>;
  v15[3] = 0;
  uint64_t v98 = v15;
  int v16 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v11, a2, (uint64_t)v96, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v71 = v17;
  int v72 = v16;
  uint64_t v94 = re::globalAllocators(v16)[2];
  int8x16_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v94 + 32))(v94, 32, 0);
  *int8x16_t v18 = &unk_26E704A68;
  v18[1] = this;
  v18[2] = re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::ChannelAudioComponent>;
  v18[3] = 0;
  unsigned int v95 = v18;
  unint64_t v19 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v11, a2, (uint64_t)v93, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v69 = v20;
  long long v70 = v19;
  uint64_t v91 = re::globalAllocators(v19)[2];
  unint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v91 + 32))(v91, 32, 0);
  void *v21 = &unk_26E704AC0;
  v21[1] = this;
  uint64_t v21[2] = re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::SpatialAudioComponent>;
  v21[3] = 0;
  uint64_t v92 = v21;
  uint64_t v22 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v11, a2, (uint64_t)v90, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v67 = v23;
  long long v68 = v22;
  uint64_t v88 = re::globalAllocators(v22)[2];
  uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v88 + 32))(v88, 32, 0);
  *uint64_t v24 = &unk_26E704AC0;
  v24[1] = this;
  uint64_t v24[2] = re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::AmbientAudioComponent>;
  void v24[3] = 0;
  unsigned int v89 = v24;
  int16x8_t v25 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v11, a2, (uint64_t)v87, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v65 = v26;
  BOOL v66 = v25;
  uint64_t v85 = re::globalAllocators(v25)[2];
  uint16x8_t v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v85 + 32))(v85, 32, 0);
  void *v27 = &unk_26E704AC0;
  v27[1] = this;
  id v27[2] = re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::ChannelAudioComponent>;
  v27[3] = 0;
  int v86 = v27;
  float v28 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v11, a2, (uint64_t)v84, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v63 = v29;
  char v64 = v28;
  uint64_t v82 = re::globalAllocators(v28)[2];
  float v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
  *float v30 = &unk_26E704B18;
  v30[1] = this;
  _OWORD v30[2] = re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::SpatialAudioComponent>;
  v30[3] = 0;
  unsigned int v83 = v30;
  float v31 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v11, a2, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v33 = v32;
  uint64_t v79 = re::globalAllocators(v31)[2];
  uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
  void *v34 = &unk_26E704B18;
  v34[1] = this;
  v34[2] = re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::AmbientAudioComponent>;
  v34[3] = 0;
  __int16 v80 = v34;
  int8x16_t v35 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v11, a2, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v37 = v36;
  uint64_t v76 = re::globalAllocators(v35)[2];
  uint64_t v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
  *uint64_t v38 = &unk_26E704B18;
  v38[1] = this;
  void v38[2] = re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::ChannelAudioComponent>;
  v38[3] = 0;
  uint64_t v77 = v38;
  uint64_t v39 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v11, a2, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v41 = v40;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v75);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v78);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v81);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v84);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v87);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v90);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v93);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v96);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v99);
  unint64_t v42 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (a2 ^ ((unint64_t)a2 >> 30))) >> 27));
  unint64_t v43 = v42 ^ (v42 >> 31);
  unint64_t v44 = *(void *)this;
  if (!*(void *)this
    || (unint64_t v44 = v43 % *((unsigned int *)this + 6),
        uint64_t v45 = *(unsigned int *)(*((void *)this + 1) + 4 * v44),
        v45 == 0x7FFFFFFF))
  {
LABEL_15:
    uint64_t v62 = v41;
    uint64_t v46 = v37;
    uint64_t v47 = v35;
    uint64_t v48 = v33;
    uint64_t v49 = v31;
    unsigned int v50 = *((_DWORD *)this + 9);
    if (v50 == 0x7FFFFFFF)
    {
      unsigned int v50 = *((_DWORD *)this + 8);
      unsigned int v51 = v50;
      if (v50 == *((_DWORD *)this + 6))
      {
        re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity((uint64_t)this, 2 * *((_DWORD *)this + 7));
        LODWORD(v44) = v43 % *((unsigned int *)this + 6);
        unsigned int v51 = *((_DWORD *)this + 8);
      }
      *((_DWORD *)this + 8) = v51 + 1;
      uint64_t v52 = *((void *)this + 2);
      int v53 = *(_DWORD *)(v52 + 176 * v50 + 8);
    }
    else
    {
      uint64_t v52 = *((void *)this + 2);
      int v53 = *(_DWORD *)(v52 + 176 * v50 + 8);
      *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v53 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v52 + 176 * v50 + 8) = v53 | 0x80000000;
    uint64_t v59 = 176 * v50;
    *(_DWORD *)(*((void *)this + 2) + v59 + 8) = *(_DWORD *)(*((void *)this + 2) + v59 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 1) + 4 * v44);
    *(void *)(*((void *)this + 2) + v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v43;
    *(void *)(*((void *)this + 2) + v59 + 16) = a2;
    long long v60 = (void *)(*((void *)this + 2) + v59);
    v60[3] = a3;
    v60[4] = v74;
    v60[5] = v73;
    v60[6] = v72;
    v60[7] = v71;
    v60[8] = v70;
    v60[9] = v69;
    v60[10] = v68;
    v60[11] = v67;
    v60[12] = v66;
    v60[13] = v65;
    v60[14] = v64;
    v60[15] = v63;
    v60[16] = v49;
    v60[17] = v48;
    _OWORD v60[18] = v47;
    v60[19] = v46;
    v60[20] = v39;
    v60[21] = v62;
    *(_DWORD *)(*((void *)this + 1) + 4 * v44) = v50;
    ++*((_DWORD *)this + 7);
    ++*((_DWORD *)this + 10);
    goto LABEL_5;
  }
  uint64_t v61 = *((void *)this + 2);
  while (*(void *)(v61 + 176 * v45 + 16) != a2)
  {
    LODWORD(v45) = *(_DWORD *)(v61 + 176 * v45 + 8) & 0x7FFFFFFF;
    if (v45 == 0x7FFFFFFF) {
      goto LABEL_15;
    }
  }
LABEL_5:
  if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::SpatialAudioComponent>((uint64_t)this, a2);
  }
  else if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::AmbientAudioComponent>((uint64_t)this, a2);
  }
  else if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::ChannelAudioComponent>((uint64_t)this, a2);
  }
}

uint64_t re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 176 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v5 + 176 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 176 * v3 + 16) == a2) {
        return v5 + 176 * v3 + 24;
      }
    }
    return 0;
  }
  return v5 + 176 * v3 + 24;
}

uint64_t re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::SpatialAudioComponent>(uint64_t a1, unint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::AmbientAudioComponent>(uint64_t a1, unint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, unint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::SpatialAudioComponent>(uint64_t a1, unint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::AmbientAudioComponent>(uint64_t a1, unint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, unint64_t a2)
{
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::SpatialAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (v3)
  {
    uint64_t v4 = *(void *)v3;
    uint64_t v5 = *(unsigned __int16 *)(*(void *)v3 + 82);
    if (*(_WORD *)(*(void *)v3 + 82))
    {
      unint64_t v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                           + 16);
      uint64_t v7 = *(int16x8_t **)(v4 + 88);
      int16x8_t v8 = vld1q_dup_s16(v6);
      for (int i = 1; ; i -= 8)
      {
        uint16x8_t v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_23436BBD0);
        v10.i16[0] = vmaxvq_u16(v10);
        if (v10.i32[0]) {
          break;
        }
        ++v7;
        if (!--v5) {
          return 0;
        }
      }
      if (v10.u16[0] - i < *(unsigned __int16 *)(v4 + 80)) {
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
    }
  }
  else
  {
    uint64_t v11 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v13 = 134217984;
      unint64_t v14 = a2;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "willRemoveComponent for unknown entity %p", (uint8_t *)&v13, 0xCu);
    }
  }
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::AmbientAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (v3)
  {
    uint64_t v4 = *(void *)v3;
    uint64_t v5 = *(unsigned __int16 *)(*(void *)v3 + 82);
    if (*(_WORD *)(*(void *)v3 + 82))
    {
      unint64_t v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                           + 16);
      uint64_t v7 = *(int16x8_t **)(v4 + 88);
      int16x8_t v8 = vld1q_dup_s16(v6);
      for (int i = 1; ; i -= 8)
      {
        uint16x8_t v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_23436BBD0);
        v10.i16[0] = vmaxvq_u16(v10);
        if (v10.i32[0]) {
          break;
        }
        ++v7;
        if (!--v5) {
          return 0;
        }
      }
      if (v10.u16[0] - i < *(unsigned __int16 *)(v4 + 80)) {
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
    }
  }
  else
  {
    uint64_t v11 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v13 = 134217984;
      unint64_t v14 = a2;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "willRemoveComponent for unknown entity %p", (uint8_t *)&v13, 0xCu);
    }
  }
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (v3)
  {
    uint64_t v4 = *(void *)v3;
    uint64_t v5 = *(unsigned __int16 *)(*(void *)v3 + 82);
    if (*(_WORD *)(*(void *)v3 + 82))
    {
      unint64_t v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                           + 16);
      uint64_t v7 = *(int16x8_t **)(v4 + 88);
      int16x8_t v8 = vld1q_dup_s16(v6);
      for (int i = 1; ; i -= 8)
      {
        uint16x8_t v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_23436BBD0);
        v10.i16[0] = vmaxvq_u16(v10);
        if (v10.i32[0]) {
          break;
        }
        ++v7;
        if (!--v5) {
          return 0;
        }
      }
      if (v10.u16[0] - i < *(unsigned __int16 *)(v4 + 80)) {
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
    }
  }
  else
  {
    uint64_t v11 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v13 = 134217984;
      unint64_t v14 = a2;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "willRemoveComponent for unknown entity %p", (uint8_t *)&v13, 0xCu);
    }
  }
  return 0;
}

void re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::SpatialAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (!v3)
  {
    uint16x8_t v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v12 = 134217984;
    unint64_t v13 = a2;
    uint64_t v11 = "didChangeOrAddComponent for unknown entity %p";
    goto LABEL_12;
  }
  uint64_t v4 = (uint64_t *)v3;
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v5)
  {
    uint16x8_t v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v12 = 134217984;
    unint64_t v13 = a2;
    uint64_t v11 = "Audio component for entity %p is unexpectedly nil";
LABEL_12:
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v12, 0xCu);
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *v4;
  uint64_t v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(void *)(v8 + 28) = *(void *)(v6 + 28);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v6 + 40);
  *(_OWORD *)(v8 + 44) = *(_OWORD *)(v6 + 44);
  re::ecs2::Component::markDirty((void *)v8);
  uint64_t v9 = *(re::ecs2::NetworkComponent **)(v7 + 200);
  if (v9)
  {
    re::ecs2::NetworkComponent::markDirty(v9, (const re::ecs2::Component *)v8);
  }
}

void re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::AmbientAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (!v3)
  {
    uint16x8_t v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v12 = 134217984;
    unint64_t v13 = a2;
    uint64_t v11 = "didChangeOrAddComponent for unknown entity %p";
    goto LABEL_12;
  }
  uint64_t v4 = (uint64_t *)v3;
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v5)
  {
    uint16x8_t v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v12 = 134217984;
    unint64_t v13 = a2;
    uint64_t v11 = "Audio component for entity %p is unexpectedly nil";
LABEL_12:
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v12, 0xCu);
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *v4;
  uint64_t v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_DWORD *)(v8 + 28) = *(_DWORD *)(v6 + 28);
  re::ecs2::Component::markDirty((void *)v8);
  uint64_t v9 = *(re::ecs2::NetworkComponent **)(v7 + 200);
  if (v9)
  {
    re::ecs2::NetworkComponent::markDirty(v9, (const re::ecs2::Component *)v8);
  }
}

void re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (!v3)
  {
    uint16x8_t v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v12 = 134217984;
    unint64_t v13 = a2;
    uint64_t v11 = "didChangeOrAddComponent for unknown entity %p";
    goto LABEL_12;
  }
  uint64_t v4 = (uint64_t *)v3;
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v5)
  {
    uint16x8_t v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v12 = 134217984;
    unint64_t v13 = a2;
    uint64_t v11 = "Audio component for entity %p is unexpectedly nil";
LABEL_12:
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v12, 0xCu);
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *v4;
  uint64_t v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_DWORD *)(v8 + 28) = *(_DWORD *)(v6 + 28);
  re::ecs2::Component::markDirty((void *)v8);
  uint64_t v9 = *(re::ecs2::NetworkComponent **)(v7 + 200);
  if (v9)
  {
    re::ecs2::NetworkComponent::markDirty(v9, (const re::ecs2::Component *)v8);
  }
}

void re::ecs2::AudioComponentForwarder::stopForwardingAudioComponentState(re::ecs2::AudioComponentForwarder *this, unint64_t a2, re::ecs2::Entity *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v6 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet((uint64_t)this, a2);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (*(re::ecs2::Entity **)v6 != a3) {
    return;
  }
  uint64_t v8 = (re::ecs2::Entity *)a2;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = (re::ecs2::Entity *)*((void *)v8 + 3);
  }
  while (v8);
  uint64_t v10 = *((void *)v9 + 2);
  if (!v10)
  {
    int8x16_t v18 = *re::audioLogObjects((re *)v6);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v29 = 134217984;
    unint64_t v30 = a2;
    unint64_t v19 = "Cannot clean up audio component forwarding b/c entity %p has no scene";
    uint64_t v20 = v18;
    uint32_t v21 = 12;
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v10 + 288);
  if (!v11)
  {
    uint64_t v22 = *re::audioLogObjects((re *)v6);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
    unint64_t v19 = "Cannot clean up audio component forwarding b/c entity's scene has no event bus";
    uint64_t v20 = v22;
    uint32_t v21 = 2;
LABEL_18:
    _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v29, v21);
    return;
  }
  re::EventBus::unsubscribe(*(void *)(v10 + 288), *(void *)(v6 + 8), *(void *)(v6 + 16));
  re::EventBus::unsubscribe(v11, *(void *)(v7 + 24), *(void *)(v7 + 32));
  re::EventBus::unsubscribe(v11, *(void *)(v7 + 40), *(void *)(v7 + 48));
  re::EventBus::unsubscribe(v11, *(void *)(v7 + 56), *(void *)(v7 + 64));
  re::EventBus::unsubscribe(v11, *(void *)(v7 + 72), *(void *)(v7 + 80));
  re::EventBus::unsubscribe(v11, *(void *)(v7 + 88), *(void *)(v7 + 96));
  re::EventBus::unsubscribe(v11, *(void *)(v7 + 104), *(void *)(v7 + 112));
  re::EventBus::unsubscribe(v11, *(void *)(v7 + 120), *(void *)(v7 + 128));
  re::EventBus::unsubscribe(v11, *(void *)(v7 + 136), *(void *)(v7 + 144));
  if (*(void *)this)
  {
    unint64_t v12 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v13 = (v12 ^ (v12 >> 31)) % *((unsigned int *)this + 6);
    uint64_t v14 = *((void *)this + 1);
    uint64_t v15 = *(unsigned int *)(v14 + 4 * v13);
    if (v15 != 0x7FFFFFFF)
    {
      uint64_t v16 = *((void *)this + 2);
      if (*(void *)(v16 + 176 * v15 + 16) == a2)
      {
        *(_DWORD *)(v14 + 4 * v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v16 + 176 * v15 + 8) & 0x7FFFFFFF;
LABEL_20:
        uint64_t v23 = *((void *)this + 2);
        uint64_t v24 = v23 + 176 * v15;
        int v27 = *(_DWORD *)(v24 + 8);
        uint64_t v26 = (int *)(v24 + 8);
        int v25 = v27;
        if (v27 < 0)
        {
          int *v26 = v25 & 0x7FFFFFFF;
          uint64_t v23 = *((void *)this + 2);
          int v25 = *(_DWORD *)(v23 + 176 * v15 + 8);
        }
        *(_DWORD *)(v23 + 176 * v15 + 8) = *((_DWORD *)this + 9) | v25 & 0x80000000;
        --*((_DWORD *)this + 7);
        int v28 = *((_DWORD *)this + 10) + 1;
        *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v15;
        *((_DWORD *)this + 10) = v28;
      }
      else
      {
        while (1)
        {
          unsigned int v17 = v15;
          LODWORD(vre::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 15) = *(_DWORD *)(v16 + 176 * v15 + 8) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v16 + 176 * v15 + 16) == a2)
          {
            *(_DWORD *)(v16 + 176 * v17 + 8) = *(_DWORD *)(v16 + 176 * v17 + 8) & 0x80000000 | *(_DWORD *)(v16 + 176 * v15 + 8) & 0x7FFFFFFF;
            goto LABEL_20;
          }
        }
      }
    }
  }
}

void re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704A68;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704A68;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704AC0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704AC0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704B18;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704B18;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v33, 0, 36);
      *(void *)&v33[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::init((uint64_t)v33, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v33;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v33[8];
      *(_OWORD *)uint64_t v33 = v5;
      *(void *)&unsigned char v33[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v33[24];
      *(_OWORD *)&unsigned char v33[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v33[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = v7;
        int v14 = DWORD1(v9);
        do
        {
          uint64_t v15 = (uint64_t *)(*(void *)&v33[16] + v11);
          if ((*(_DWORD *)(*(void *)&v33[16] + v11 + 8) & 0x80000000) != 0)
          {
            unint64_t v16 = *v15;
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = *v15 % v17;
            unsigned int v19 = *(_DWORD *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              unsigned int v19 = *(_DWORD *)(a1 + 32);
              unsigned int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, (2 * v14));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                unsigned int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 176 * v19 + 8);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 176 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 176 * v19 + 8) = v22 | 0x80000000;
            uint64_t v23 = *(void *)(a1 + 16) + 176 * v19;
            *(_DWORD *)(v23 + 8) = *(_DWORD *)(v23 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(void *)(*(void *)(a1 + 16) + 176 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v16;
            *(void *)(*(void *)(a1 + 16) + 176 * v19 + 16) = v15[2];
            uint64_t v24 = *(void *)(a1 + 16) + 176 * v19;
            long long v25 = *(_OWORD *)(v15 + 3);
            *(_OWORD *)(v24 + 40) = *(_OWORD *)(v15 + 5);
            *(_OWORD *)(v24 + 24) = v25;
            long long v26 = *(_OWORD *)(v15 + 7);
            long long v27 = *(_OWORD *)(v15 + 9);
            long long v28 = *(_OWORD *)(v15 + 11);
            *(_OWORD *)(v24 + 104) = *(_OWORD *)(v15 + 13);
            *(_OWORD *)(v24 + 88) = v28;
            *(_OWORD *)(v24 + 72) = v27;
            *(_OWORD *)(v24 + 56) = v26;
            long long v29 = *(_OWORD *)(v15 + 15);
            long long v30 = *(_OWORD *)(v15 + 17);
            long long v31 = *(_OWORD *)(v15 + 19);
            *(void *)(v24 + 168) = v15[21];
            *(_OWORD *)(v24 + 152) = v31;
            *(_OWORD *)(v24 + 136) = v30;
            *(_OWORD *)(v24 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v29;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            int v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            unsigned int v10 = *(_DWORD *)&v33[32];
          }
          ++v12;
          v11 += 176;
        }
        while (v12 < v10);
      }
      re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v33);
    }
  }
  else
  {
    if (a2) {
      signed int v32 = a2;
    }
    else {
      signed int v32 = 3;
    }
  }
}

void re::ecs2::introspect_BodyTrackingTargetType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CC18, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF8CC18);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Any";
      qword_26AF8CC50 = (uint64_t)v26;
      long long v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + 16) = "Body";
      qword_26AF8CC58 = v28;
      __cxa_guard_release(&qword_26AF8CC18);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CC20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8CC20))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF8CC88, "BodyTrackingTargetType", 4, 4, 1, 1);
    qword_26AF8CC88 = (uint64_t)&unk_26E715E00;
    qword_26AF8CCC8 = (uint64_t)&re::ecs2::introspect_BodyTrackingTargetType(BOOL)::enumTable;
    dword_26AF8CC98 = 9;
    __cxa_guard_release(&qword_26AF8CC20);
  }
  if ((_MergedGlobals_296 & 1) == 0)
  {
    _MergedGlobals_296 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF8CC88, a2);
    uint64_t v30 = 0x8B297CF4FD9787C8;
    long long v31 = "BodyTrackingTargetType";
    v34[0] = 208862;
    v34[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      uint64_t v4 = (unsigned int *)qword_26AF8CCC8;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            long long v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    unsigned int v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF8CCA8 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BodyTrackingTargetType", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_BodyTrackingTarget(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CC28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8CC28))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8CCD0, "BodyTrackingTarget");
    __cxa_guard_release(&qword_26AF8CC28);
  }
  return &unk_26AF8CCD0;
}

void re::ecs2::initInfo_BodyTrackingTarget(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xD3F2FE58F3BB2B14;
  v13[1] = "BodyTrackingTarget";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CC30, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8CC30);
    if (v4)
    {
      long long v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      re::ecs2::introspect_BodyTrackingTargetType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "type";
      *(void *)(v7 + 16) = &qword_26AF8CC88;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8CC60 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<unsigned char [16]>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "bodyIdentifier";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x400000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8CC68 = v11;
      __cxa_guard_release(&qword_26AF8CC30);
    }
  }
  *((void *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 1;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8CC60;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::BodyTrackingTarget>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::BodyTrackingTarget>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::BodyTrackingTarget>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BodyTrackingTarget>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::BodyTrackingTarget>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::BodyTrackingTarget>(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *re::ecs2::allocInfo_BodyTrackingComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CC40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8CC40))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8CD48, "BodyTrackingComponent");
    __cxa_guard_release(&qword_26AF8CC40);
  }
  return &unk_26AF8CD48;
}

void re::ecs2::initInfo_BodyTrackingComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xC26C97C4FC5494C8;
  v18[1] = "BodyTrackingComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CC48, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8CC48);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8CC70 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      long long v9 = v8;
      uint64_t v10 = (re::ecs2 *)qword_26AF8CC38;
      if (!qword_26AF8CC38)
      {
        uint64_t v10 = (re::ecs2 *)re::ecs2::allocInfo_BodyTrackingTarget(v8);
        qword_26AF8CC38 = (uint64_t)v10;
        re::ecs2::initInfo_BodyTrackingTarget(v10, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "target";
      *(void *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF8CC78 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "isPaused";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x3000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF8CC80 = v16;
      __cxa_guard_release(&qword_26AF8CC48);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8CC70;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::BodyTrackingComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::BodyTrackingComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::BodyTrackingComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BodyTrackingComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::BodyTrackingComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E8988;
  *(void *)(v3 + 36) = 0;
  *(void *)(v3 + 28) = 0;
  *(void *)(v3 + 41) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::BodyTrackingComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::BodyTrackingComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E8988;
  *(void *)(v1 + 36) = 0;
  *(void *)(v1 + 28) = 0;
  *(void *)(v1 + 41) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::BodyTrackingComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BodyTrackingComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BodyTrackingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BodyTrackingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BodyTrackingComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BodyTrackingComponent>, this);
}

void re::AudioSharedSceneManager::AudioSharedSceneManager(re::AudioSharedSceneManager *this)
{
  *(void *)this = &unk_26E704B70;
  *((void *)this + 1) = 0;
  re::AudioManager_PHASE::AudioManager_PHASE((re::AudioSharedSceneManager *)((char *)this + 16));
}

void re::AudioSharedSceneManager::~AudioSharedSceneManager(re::AudioSharedSceneManager *this)
{
  *(void *)this = &unk_26E704B70;
  [*((id *)this + 1) stop];
  uint64_t v2 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;

  [**((id **)this + 41) cancel];
  std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear((uint64_t)this + 336);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table((uint64_t)this + 920);
  re::AudioManager_PHASE::~AudioManager_PHASE((re::AudioSharedSceneManager *)((char *)this + 16));
}

{
  uint64_t vars8;

  re::AudioSharedSceneManager::~AudioSharedSceneManager(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AudioSharedSceneManager::audioService(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t re::AudioSharedSceneManager::audioService(re::AudioSharedSceneManager *this)
{
  return (uint64_t)this + 16;
}

void re::AudioSharedSceneManager::setEngineQueue(uint64_t a1, void *a2)
{
}

id re::AudioSharedSceneManager::getEngineQueue(id *this)
{
  return this[3];
}

void re::AudioSharedSceneManager::configureEnterFramePhase(re *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(void *)&v13.var0 = 0x4BF9C6AA1E4AE526;
  v13.var1 = "Audio Before Frame Update";
  *(_WORD *)long long v14 = 1;
  long long v5 = (char *)a1 + 16;
  *(_DWORD *)&v14[4] = 0;
  v14[8] = 0;
  *(_WORD *)&v14[12] = 260;
  *(_DWORD *)&v14[16] = 1023969417;
  v14[20] = 0;
  uint64_t v16 = re::globalAllocators(a1)[2];
  long long v17 = v15;
  v15[0] = &unk_26E704C60;
  v15[1] = v5;
  uint64_t v18 = *a2;
  uint64_t v19 = 0;
  uint64_t v23 = 0;
  int v22 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  re::StringID::StringID((re::StringID *)v7, &v13);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v14;
  *(void *)&v8[13] = *(void *)&v14[13];
  v9[3] = v16;
  v9[4] = 0;
  re::FunctionBase<24ul,void ()(float)>::operator=<24ul>((uint64_t)v9, (uint64_t)v15);
  void v9[5] = v18;
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v10, &v19);
  uint64_t v6 = *(void *)(a3 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, v7);
  if (v10[0])
  {
    if (v12) {
      (*(void (**)(void))(*(void *)v10[0] + 40))();
    }
    uint64_t v12 = 0;
    memset(v10, 0, sizeof(v10));
    ++v11;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v9);
  re::StringID::destroyString((re::StringID *)v7);
  if (v19)
  {
    if (v23) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    ++v22;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v15);
  re::StringID::destroyString((re::StringID *)&v13);
}

void re::AudioSharedSceneManager::configureCommitPhase(re *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(void *)&v13.var0 = 0xEA0359364ADC6754;
  v13.var1 = "Audio After Frame Update";
  *(_WORD *)long long v14 = 1;
  long long v5 = (char *)a1 + 16;
  *(_DWORD *)&v14[4] = 0;
  v14[8] = 0;
  *(_WORD *)&v14[12] = 260;
  *(_DWORD *)&v14[16] = 1023969417;
  v14[20] = 0;
  uint64_t v16 = re::globalAllocators(a1)[2];
  long long v17 = v15;
  v15[0] = &unk_26E704CB8;
  v15[1] = v5;
  uint64_t v18 = *a2;
  uint64_t v19 = 0;
  uint64_t v23 = 0;
  int v22 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  re::StringID::StringID((re::StringID *)v7, &v13);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v14;
  *(void *)&v8[13] = *(void *)&v14[13];
  v9[3] = v16;
  v9[4] = 0;
  re::FunctionBase<24ul,void ()(float)>::operator=<24ul>((uint64_t)v9, (uint64_t)v15);
  void v9[5] = v18;
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v10, &v19);
  uint64_t v6 = *(void *)(a3 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, v7);
  if (v10[0])
  {
    if (v12) {
      (*(void (**)(void))(*(void *)v10[0] + 40))();
    }
    uint64_t v12 = 0;
    memset(v10, 0, sizeof(v10));
    ++v11;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v9);
  re::StringID::destroyString((re::StringID *)v7);
  if (v19)
  {
    if (v23) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    ++v22;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v15);
  re::StringID::destroyString((re::StringID *)&v13);
}

void re::AudioSharedSceneManager::setIsExternalSourceControl(re::AudioSharedSceneManager *this, char a2)
{
  uint64_t v2 = (char *)this + 16;
  *((unsigned char *)this + 288) = a2;
  uint64_t v3 = *((void *)this + 69);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = ___ZN2re18AudioManager_PHASE24setExternalSourceControlEb_block_invoke;
  v4[3] = &__block_descriptor_41_e5_v8__0l;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

uint64_t re::AudioSharedSceneManager::getIsExternalSourceControl(re::AudioSharedSceneManager *this)
{
  return *((unsigned __int8 *)this + 288);
}

void re::AudioSharedSceneManager::setIsSTSControl(re::AudioSharedSceneManager *this, int a2)
{
  *((unsigned char *)this + 72) = a2;
  uint64_t v2 = *((void *)this + 10);
  if (a2)
  {
    if (v2) {
      return;
    }
LABEL_5:
    re::AudioManager::configureSTS((re::AudioSharedSceneManager *)((char *)this + 16));
    return;
  }
  if (v2) {
    goto LABEL_5;
  }
}

uint64_t re::AudioSharedSceneManager::getIsSTSControl(re::AudioSharedSceneManager *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t re::AudioSharedSceneManager::setIsHostingSharedAudioSimulation(uint64_t this, char a2)
{
  *(unsigned char *)(this + 568) = a2;
  return this;
}

uint64_t re::AudioSharedSceneManager::getIsHostingSharedAudioSimulation(re::AudioSharedSceneManager *this)
{
  return *((unsigned __int8 *)this + 568);
}

void re::AudioSharedSceneManager::triggerNotification(uint64_t a1, int a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  re::AudioManager_PHASE::triggerNotification((re::AudioManager *)(a1 + 16), a2);
  if (a2 == 3)
  {
    v5[0] = &unk_26E704D10;
    v5[1] = a1;
    v5[3] = v5;
    re::AudioManager_PHASE::loadAssetsOnReset(v4, (uint64_t)v5);
    std::__function::__value_func<std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__value_func[abi:ne180100](v5);
  }
}

void re::AudioSharedSceneManager::forceShutdown(id **this)
{
  [*this[41] cancel];
  std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear((uint64_t)(this + 42));
}

uint64_t re::AudioSharedSceneManager::updateEngine(re::AudioSharedSceneManager *this)
{
  return re::AudioManager_PHASE::updateEngine((re::AudioSharedSceneManager *)((char *)this + 16));
}

void re::AudioSharedSceneManager::simulateMediaServicesLostNotification(re::AudioSharedSceneManager *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  id v3 = objc_alloc(MEMORY[0x263F089F8]);
  id v5 = [*((id *)this + 1) audioSessionToFollow];
  uint64_t v4 = (void *)[v3 initWithName:@"AVAudioSessionMediaServicesWereLostNotification" object:v5 userInfo:MEMORY[0x263EFFA78]];
  [v2 servicesLost:v4];
}

void re::AudioSharedSceneManager::simulateMediaServicesResetNotification(re::AudioSharedSceneManager *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  id v3 = objc_alloc(MEMORY[0x263F089F8]);
  id v5 = [*((id *)this + 1) audioSessionToFollow];
  uint64_t v4 = (void *)[v3 initWithName:@"AVAudioSessionMediaServicesWereResetNotification" object:v5 userInfo:MEMORY[0x263EFFA78]];
  [v2 servicesReset:v4];
}

void re::AudioSharedSceneManager::loadAudio(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 16;
  uint64_t v4 = *(void *)(a2 + 8);
  id v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v6 = v4;
  v8[0] = &unk_26E704D90;
  v8[1] = a1;
  v8[3] = v8;
  re::AudioManager_PHASE::loadAudio(v3, &v6, (uint64_t)v8);
  std::__function::__value_func<void ()(std::shared_ptr<re::PersistedAssetData>)>::~__value_func[abi:nn180100](v8);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v5);
  }
}

void re::AudioSharedSceneManager::unloadAudio(re::AudioSharedSceneManager *this, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v8 = a2;
  id v4 = **((id **)this + 41);
  id v5 = (re *)[v4 isCancelled];
  if (v5)
  {
    uint64_t v6 = *re::audioLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[RE] [AudioSharedSceneManager] REEngine was deallocated. Cannot unload audio asset: %llu", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 69);
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 3221225472;
    uint64_t v10 = ___ZN2re18AudioManager_PHASE11unloadAssetEy_block_invoke;
    int v11 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v12 = (char *)this + 16;
    unint64_t v13 = a2;
    dispatch_async(v7, &buf);
    os_unfair_lock_lock((os_unfair_lock_t)this + 228);
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::__erase_unique<unsigned long long>((void *)this + 115, &v8);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 228);
  }
}

BOOL re::AudioSharedSceneManager::assetIsLoaded(os_unfair_lock_s *this, unint64_t a2)
{
  unint64_t v6 = a2;
  uint64_t v3 = this + 228;
  os_unfair_lock_lock(this + 228);
  BOOL v4 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[230]._os_unfair_lock_opaque, &v6) != 0;
  os_unfair_lock_unlock(v3);
  return v4;
}

void re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::~Callable()
{
}

uint64_t re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::operator()(uint64_t a1)
{
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v3);
  re::AudioManager_PHASE::beforeFrameUpdate(*(re::AudioManager_PHASE **)(a1 + 8));
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)22>::end((uint64_t)v3);
}

void *re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E704C60;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E704C60;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::~Callable()
{
}

void re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v3 = *a2;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(&v4);
  re::AudioManager_PHASE::afterFrameUpdate(*(re::AudioManager_PHASE **)(a1 + 8), v3);
}

void *re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E704CB8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E704CB8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::size()
{
  return 16;
}

void std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__func()
{
}

void *std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E704D10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E704D10;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v3 + 228);
  std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>>::unordered_map(a2, (uint64_t)&v3[230]);
  os_unfair_lock_unlock(v3 + 228);
}

uint64_t std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target_type()
{
}

void std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::~__func()
{
}

void *std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E704D90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E704D90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)a2;
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  id v5 = **(id **)(v4 + 328);
  unint64_t v6 = (re *)[v5 isCancelled];
  if (v6)
  {
    uint64_t v7 = *re::audioLogObjects(v6);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v8 = "[RE] [AudioSharedSceneManager] REEngine was deallocated. Cannot assign audio asset to assetGenerators";
    long long v9 = v7;
    uint32_t v10 = 2;
LABEL_16:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
    goto LABEL_12;
  }
  if (!v3 || !*v3)
  {
    unint64_t v13 = *re::audioLogObjects(v6);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    uint64_t v14 = v3[13];
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v14;
    unint64_t v8 = "[RE] [AudioSharedSceneManager] Cannot add asset: %llu to assetGenerators with a null generator block.";
    long long v9 = v13;
    uint32_t v10 = 12;
    goto LABEL_16;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 912));
  unint64_t v15 = v3[13];
  *(void *)long long buf = &v15;
  int v11 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v4 + 920, &v15, (uint64_t)&std::piecewise_construct, (void **)buf);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)v11[4];
  v11[3] = v3;
  v11[4] = v2;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v12);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 912));
LABEL_12:

  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

uint64_t std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target_type()
{
}

BOOL re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v47, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (uint64_t v10 = v9,
        uint64_t v11 = *(void *)(a3 + 8),
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9),
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11),
        v46[0] = v12,
        (v46[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v43, a5, 0);
    unint64_t v15 = v43;
    unint64_t v14 = v44;
    unint64_t v43 = a4;
    unint64_t v44 = v15;
    unint64_t v45 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v22 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v44);
        uint64_t v23 = *(id **)v22;
        uint64_t v24 = *(void *)(*(void *)v22 + 16);
        long long v25 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v46, v24);
        if (v25) {
          long long v26 = (re::PhysicsSimulation *)re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v25);
        }
        else {
          long long v26 = 0;
        }
        if ((*(unsigned char *)(v24 + 288) & 1) == 0) {
          goto LABEL_34;
        }
        uint64_t v27 = *(unsigned __int16 *)(v24 + 82);
        if (!*(_WORD *)(v24 + 82)) {
          goto LABEL_34;
        }
        uint64_t v28 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        int16x8_t v29 = vld1q_dup_s16(v28);
        uint64_t v30 = *(int16x8_t **)(v24 + 88);
        int v31 = 1;
        StringID v32 = v30;
        uint64_t v33 = *(unsigned __int16 *)(v24 + 82);
        while (1)
        {
          uint16x8_t v34 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v29, *v32), (int8x16_t)xmmword_23436BBD0);
          v34.i16[0] = vmaxvq_u16(v34);
          if (v34.i32[0]) {
            break;
          }
          v31 -= 8;
          ++v32;
          if (!--v33) {
            goto LABEL_25;
          }
        }
        if (v34.u16[0] - v31 < *(unsigned __int16 *)(v24 + 80)) {
          goto LABEL_34;
        }
LABEL_25:
        int8x16_t v35 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        int16x8_t v36 = vld1q_dup_s16(v35);
        int v37 = 1;
        while (1)
        {
          uint16x8_t v38 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v36, *v30), (int8x16_t)xmmword_23436BBD0);
          v38.i16[0] = vmaxvq_u16(v38);
          if (v38.i32[0]) {
            break;
          }
          v37 -= 8;
          ++v30;
          if (!--v27) {
            goto LABEL_34;
          }
        }
        if (v38.u16[0] - v37 < *(unsigned __int16 *)(v24 + 80) && v26 != 0)
        {
          id WeakRetained = (char *)objc_loadWeakRetained(v23 + 20);
          if (WeakRetained)
          {
            uint64_t v18 = (re::PhysicsSimulation *)(WeakRetained - 8);
          }
          else
          {
            uint64_t v18 = 0;
          }
          if (v26 != v18 || re::ecs2::BallSocketJointComponent::needsUpdate((re::ecs2::BallSocketJointComponent *)v23))
          {
            re::ecs2::BallSocketJointComponent::removeFromSimulation(v23);
            re::ecs2::BallSocketJointComponent::addToSimulation((re::ecs2::BallSocketJointComponent *)v23, v26, v19);
          }
          unint64_t v20 = v43;
          unint64_t v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v44);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(void *)(a3 + 32));
        }
        else
        {
LABEL_34:
          unint64_t v40 = v43;
          unint64_t v41 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v44);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v40, v41, *(void *)(a3 + 32));
          re::ecs2::BallSocketJointComponent::removeFromSimulation(v23);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v44);
      }
      while (v44 != a5 || (unsigned __int16)v45 != 0xFFFF || WORD1(v45) != 0xFFFF);
    }
    BOOL v16 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v16 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v47);
  return v16;
}

BOOL re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v47, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (uint64_t v10 = v9,
        uint64_t v11 = *(void *)(a3 + 8),
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9),
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11),
        v46[0] = v12,
        (v46[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v43, a5, 0);
    unint64_t v15 = v43;
    unint64_t v14 = v44;
    unint64_t v43 = a4;
    unint64_t v44 = v15;
    unint64_t v45 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v22 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v44);
        uint64_t v23 = *(id **)v22;
        uint64_t v24 = *(void *)(*(void *)v22 + 16);
        long long v25 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v46, v24);
        if (v25) {
          long long v26 = (re::PhysicsSimulation *)re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v25);
        }
        else {
          long long v26 = 0;
        }
        if ((*(unsigned char *)(v24 + 288) & 1) == 0) {
          goto LABEL_34;
        }
        uint64_t v27 = *(unsigned __int16 *)(v24 + 82);
        if (!*(_WORD *)(v24 + 82)) {
          goto LABEL_34;
        }
        uint64_t v28 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        int16x8_t v29 = vld1q_dup_s16(v28);
        uint64_t v30 = *(int16x8_t **)(v24 + 88);
        int v31 = 1;
        StringID v32 = v30;
        uint64_t v33 = *(unsigned __int16 *)(v24 + 82);
        while (1)
        {
          uint16x8_t v34 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v29, *v32), (int8x16_t)xmmword_23436BBD0);
          v34.i16[0] = vmaxvq_u16(v34);
          if (v34.i32[0]) {
            break;
          }
          v31 -= 8;
          ++v32;
          if (!--v33) {
            goto LABEL_25;
          }
        }
        if (v34.u16[0] - v31 < *(unsigned __int16 *)(v24 + 80)) {
          goto LABEL_34;
        }
LABEL_25:
        int8x16_t v35 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        int16x8_t v36 = vld1q_dup_s16(v35);
        int v37 = 1;
        while (1)
        {
          uint16x8_t v38 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v36, *v30), (int8x16_t)xmmword_23436BBD0);
          v38.i16[0] = vmaxvq_u16(v38);
          if (v38.i32[0]) {
            break;
          }
          v37 -= 8;
          ++v30;
          if (!--v27) {
            goto LABEL_34;
          }
        }
        if (v38.u16[0] - v37 < *(unsigned __int16 *)(v24 + 80) && v26 != 0)
        {
          id WeakRetained = (char *)objc_loadWeakRetained(v23 + 20);
          if (WeakRetained)
          {
            uint64_t v18 = (re::PhysicsSimulation *)(WeakRetained - 8);
          }
          else
          {
            uint64_t v18 = 0;
          }
          if (v26 != v18 || re::ecs2::BallSocketJointComponent::needsUpdate((re::ecs2::BallSocketJointComponent *)v23))
          {
            re::ecs2::HingeJointComponent::removeFromSimulation(v23);
            re::ecs2::HingeJointComponent::addToSimulation((re::ecs2::HingeJointComponent *)v23, v26, v19);
          }
          unint64_t v20 = v43;
          unint64_t v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v44);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(void *)(a3 + 32));
        }
        else
        {
LABEL_34:
          unint64_t v40 = v43;
          unint64_t v41 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v44);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v40, v41, *(void *)(a3 + 32));
          re::ecs2::HingeJointComponent::removeFromSimulation(v23);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v44);
      }
      while (v44 != a5 || (unsigned __int16)v45 != 0xFFFF || WORD1(v45) != 0xFFFF);
    }
    BOOL v16 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v16 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v47);
  return v16;
}

BOOL re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v46, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (uint64_t v10 = v9,
        uint64_t v11 = *(void *)(a3 + 8),
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9),
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11),
        v45[0] = v12,
        (v45[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v42, a5, 0);
    unint64_t v15 = v42;
    unint64_t v14 = v43;
    unint64_t v42 = a4;
    unint64_t v43 = v15;
    unint64_t v44 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v21 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v43);
        uint64_t v22 = *(void *)v21;
        uint64_t v23 = *(void *)(*(void *)v21 + 16);
        uint64_t v24 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v45, v23);
        if (v24) {
          uint64_t v25 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        if ((*(unsigned char *)(v23 + 288) & 1) == 0) {
          goto LABEL_34;
        }
        uint64_t v26 = *(unsigned __int16 *)(v23 + 82);
        if (!*(_WORD *)(v23 + 82)) {
          goto LABEL_34;
        }
        uint64_t v27 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        int16x8_t v28 = vld1q_dup_s16(v27);
        int16x8_t v29 = *(int16x8_t **)(v23 + 88);
        int v30 = 1;
        int v31 = v29;
        uint64_t v32 = *(unsigned __int16 *)(v23 + 82);
        while (1)
        {
          uint16x8_t v33 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v28, *v31), (int8x16_t)xmmword_23436BBD0);
          v33.i16[0] = vmaxvq_u16(v33);
          if (v33.i32[0]) {
            break;
          }
          v30 -= 8;
          ++v31;
          if (!--v32) {
            goto LABEL_25;
          }
        }
        if (v33.u16[0] - v30 < *(unsigned __int16 *)(v23 + 80)) {
          goto LABEL_34;
        }
LABEL_25:
        uint16x8_t v34 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        int16x8_t v35 = vld1q_dup_s16(v34);
        int v36 = 1;
        while (1)
        {
          uint16x8_t v37 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v35, *v29), (int8x16_t)xmmword_23436BBD0);
          v37.i16[0] = vmaxvq_u16(v37);
          if (v37.i32[0]) {
            break;
          }
          v36 -= 8;
          ++v29;
          if (!--v26) {
            goto LABEL_34;
          }
        }
        if (v37.u16[0] - v36 < *(unsigned __int16 *)(v23 + 80) && v25 != 0)
        {
          id WeakRetained = (char *)objc_loadWeakRetained((id *)(v22 + 128));
          if (WeakRetained)
          {
            uint64_t v18 = WeakRetained - 8;
          }
          else
          {
            uint64_t v18 = 0;
          }
          if ((char *)v25 != v18 || *(unsigned char *)(v22 + 25)) {
            re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays((re::ecs2::PhysicsConstraintsComponent *)v22, 0);
          }
          unint64_t v19 = v42;
          unint64_t v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v43);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(void *)(a3 + 32));
        }
        else
        {
LABEL_34:
          unint64_t v39 = v42;
          unint64_t v40 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v43);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v39, v40, *(void *)(a3 + 32));
          re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays((re::ecs2::PhysicsConstraintsComponent *)v22, 1);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v43);
      }
      while (v43 != a5 || (unsigned __int16)v44 != 0xFFFF || WORD1(v44) != 0xFFFF);
    }
    BOOL v16 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v16 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v46);
  return v16;
}

uint64_t re::ecs2::ECSForceEffectEventDelegate::computeForces(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 8))
  {
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
    uint64_t v4 = *(unsigned int *)(*(void *)(result + 16) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(result + 32)));
    if (v4 != 0x7FFFFFFF)
    {
      uint64_t v6 = *(void *)(result + 24);
      if (*(void *)(v6 + 48 * v4 + 16) == a3)
      {
LABEL_6:
        uint64_t v8 = v6 + 48 * v4;
        unint64_t v9 = *(void *)(v8 + 24);
        if (v9)
        {
          uint64_t v10 = *(void *)(v8 + 24);
          do
          {
            uint64_t v11 = v10;
            uint64_t v10 = *(void *)(v10 + 24);
          }
          while (v10);
          uint64_t v12 = *(void *)(v11 + 16);
          uint64_t v13 = *(const void **)(v6 + 48 * v4 + 32);
          if (v12 && v13 != 0)
          {
            uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v12 + 56) + 32))(*(void *)(v12 + 56));
            uint64_t result = re::ServiceLocator::serviceOrNull<re::Engine>(v15);
            if (result)
            {
              BOOL v16 = *(re::EventBus **)(result + 1384);
              if (v16)
              {
                uint64_t v17 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>(*(void *)(result + 1384), v9, (unint64_t)v13);
                uint64_t v18 = (char *)v17
                    + (void)re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>((uint64_t)v16, v9, 0);
                unint64_t v19 = (char *)re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>((uint64_t)v16, 0, (unint64_t)v13)+ (void)v18;
                uint64_t result = (uint64_t)re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>((uint64_t)v16, 0, 0);
                if (&v19[result])
                {
                  long long v32 = 0u;
                  long long v33 = 0u;
                  long long v34 = 0u;
                  long long v35 = 0u;
                  uint64_t v40 = 0;
                  long long v38 = 0u;
                  long long v39 = 0u;
                  long long v36 = 0u;
                  long long v37 = 0u;
                  unint64_t v31 = v9;
                  LODWORD(v32) = *(_DWORD *)(a2 + 8);
                  *((void *)&v32 + 1) = *(void *)(a2 + 16);
                  uint64_t v20 = *(void *)(a2 + 32);
                  *(void *)&long long v33 = *(void *)(a2 + 24);
                  *((void *)&v33 + 1) = v20;
                  uint64_t v21 = *(void *)(a2 + 64);
                  *(void *)&long long v34 = *(void *)(a2 + 48);
                  *((void *)&v34 + 1) = v21;
                  uint64_t v22 = *(void *)(a2 + 96);
                  *(void *)&long long v35 = *(void *)(a2 + 80);
                  *((void *)&v35 + 1) = v22;
                  uint64_t v23 = *(void *)(a2 + 128);
                  *(void *)&long long v36 = *(void *)(a2 + 112);
                  *((void *)&v36 + 1) = v23;
                  uint64_t v24 = *(void *)(a2 + 160);
                  *(void *)&long long v37 = *(void *)(a2 + 144);
                  *((void *)&v37 + 1) = v24;
                  uint64_t v25 = *(void *)(a2 + 192);
                  *(void *)&long long v38 = *(void *)(a2 + 176);
                  *((void *)&v38 + 1) = v25;
                  uint64_t v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                  if (v26)
                  {
                    unint64_t v27 = *(void *)(v6 + 48 * v4 + 40);
                    unint64_t v28 = *(void *)(v26 + 48);
                    if (v28 <= v27)
                    {
                      uint64_t v41 = 0;
                      long long v53 = 0u;
                      long long v54 = 0u;
                      long long v51 = 0u;
                      long long v52 = 0u;
                      long long v50 = 0u;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      int v42 = 136315906;
                      unint64_t v43 = "operator[]";
                      __int16 v44 = 1024;
                      int v45 = 797;
                      __int16 v46 = 2048;
                      unint64_t v47 = v27;
                      __int16 v48 = 2048;
                      unint64_t v49 = v28;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                    }
                    int16x8_t v29 = (void *)(*(void *)(v26 + 64) + 272 * v27);
                    *(void *)&long long v39 = v29[29];
                    *((void *)&v39 + 1) = v29[27];
                    uint64_t v40 = v29[32];
                  }
                  uint64_t Type = re::EventBus::getTypeId<REEntityForceEffectComputeForcesEvent>();
                  return re::EventBus::publish(v16, v9, Type, (uint64_t)&v31, 0x90uLL, v13);
                }
              }
            }
          }
        }
      }
      else
      {
        while (1)
        {
          int v7 = *(_DWORD *)(v6 + 48 * v4 + 8);
          uint64_t v4 = v7 & 0x7FFFFFFF;
          if ((v7 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v6 + 48 * v4 + 16) == a3) {
            goto LABEL_6;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v4 = ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
  if (v6 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (*(void *)(v8 + 48 * v6 + 16) != v2)
  {
    while (1)
    {
      unsigned int v9 = v6;
      LODWORD(v6) = *(_DWORD *)(v8 + 48 * v6 + 8) & 0x7FFFFFFF;
      if (v6 == 0x7FFFFFFF) {
        return 0;
      }
      if (*(void *)(v8 + 48 * v6 + 16) == v2)
      {
        *(_DWORD *)(v8 + 48 * v9 + 8) = *(_DWORD *)(v8 + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 48 * v6 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v8 + 48 * v6 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = v10 + 48 * v6;
  int v14 = *(_DWORD *)(v11 + 8);
  uint64_t v13 = (int *)(v11 + 8);
  int v12 = v14;
  if (v14 < 0)
  {
    *uint64_t v13 = v12 & 0x7FFFFFFF;
    uint64_t v10 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v10 + 48 * v6 + 8);
  }
  int v15 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v10 + 48 * v6 + 8) = *(_DWORD *)(a1 + 36) | v12 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v15 + 1;
  return 1;
}

uint64_t re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::addNew(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 48 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 48 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 48 * v10;
  return v12 + 24;
}

void re::ecs2::ECSForceEffectEventDelegate::~ECSForceEffectEventDelegate(re::ecs2::ECSForceEffectEventDelegate *this)
{
  *(void *)this = &unk_26E704E10;
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E704E10;
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ECSForceEffectEventDelegate::transformFromPhysics(re::ecs2::ECSForceEffectEventDelegate *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::ECSForceEffectEventDelegate::transformToPhysics(re::ecs2::ECSForceEffectEventDelegate *this)
{
  return (uint64_t)this + 128;
}

re::EventBus::EventInfo *re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t Type = re::EventBus::getTypeId<REEntityForceEffectComputeForcesEvent>();
  uint64_t v6 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v6 == -1) {
    return 0;
  }
  uint64_t result = *(re::EventBus::EventInfo **)(*(void *)(a1 + 32) + 48 * v6 + 8);
  if (result)
  {
    uint64_t result = (re::EventBus::EventInfo *)re::EventBus::EventInfo::getSubscriptions(result, a2, a3);
    if (result) {
      return (re::EventBus::EventInfo *)*((void *)result + 15);
    }
  }
  return result;
}

uint64_t re::EventBus::getTypeId<REEntityForceEffectComputeForcesEvent>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CDC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8CDC8))
  {
    _MergedGlobals_297 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"37REEntityForceEffectComputeForcesEvent" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF8CDC8);
  }
  return _MergedGlobals_297;
}

uint64_t re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, long long *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 48 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 16) + 48 * v9;
  long long v14 = *a5;
  *(void *)(v13 + 40) = *((void *)a5 + 2);
  *(_OWORD *)(v13 + 24) = v14;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 48 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 48 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 48 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 48 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 48 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 48 * v17 + 16) = *(void *)v13;
            uint64_t v21 = *(void *)(a1 + 16) + 48 * v17;
            long long v22 = *(_OWORD *)(v13 + 8);
            *(void *)(v21 + 40) = *(void *)(v13 + 24);
            *(_OWORD *)(v21 + 24) = v22;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 48;
          --v10;
        }
        while (v10);
      }
      _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

re::ecs2::OpacityManagerStateTracking *re::ecs2::OpacityManagerStateTracking::OpacityManagerStateTracking(re::ecs2::OpacityManagerStateTracking *this)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::HierarchyStateTracking((uint64_t)this);
  *(void *)uint64_t v2 = &unk_26E704E70;
  *(void *)(v2 + 296) = 0;
  *(_OWORD *)(v2 + 248) = 0u;
  v2 += 248;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[3] = re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 4;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)v2, (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::HierarchyStateTracking(uint64_t a1)
{
  *(void *)a1 = &unk_26E704F50;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v2 = a1 + 56;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v3 = a1 + 104;
  *(void *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v4 = a1 + 152;
  *(void *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v5 = a1 + 200;
  *(void *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

void re::ecs2::OpacityManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v60);
  int v58 = 0;
  memset(v57, 0, sizeof(v57));
  uint64_t v59 = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v57, (uint64_t)v60, 3);
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 6;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(a2 + 16);
    int v53 = *(_DWORD *)(a2 + 32);
    long long v54 = (void *)(a1 + 56);
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      unint64_t v56 = 0;
      unint64_t v56 = *(void *)(v9 + 24 * v8 + 16);
      if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)v57, (uint64_t *)&v56))
      {
        unint64_t v14 = v56;
        uint64_t v15 = *(void *)(v56 + 24);
        if (!v15 || (*(unsigned char *)(v15 + 288) & 0x80) != 0)
        {
LABEL_17:
          uint64_t v55 = 0;
          if ((*(unsigned char *)(v14 + 288) & 1) == 0) {
            goto LABEL_92;
          }
          uint64_t v16 = *(void *)(a1 + 296);
          if (*v54)
          {
            unint64_t v17 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27));
            uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(a1 + 80)));
            if (v18 != 0x7FFFFFFF)
            {
              uint64_t v19 = *(void *)(a1 + 72);
              do
              {
                if (*(void *)(v19 + 48 * v18 + 16) == v14) {
                  goto LABEL_92;
                }
                LODWORD(v18) = *(_DWORD *)(v19 + 48 * v18 + 8) & 0x7FFFFFFF;
              }
              while (v18 != 0x7FFFFFFF);
            }
          }
          (*(void (**)(uint64_t *__return_ptr))(**(void **)v16 + 8))(&v74);
          if ((_BYTE)v74) {
            uint64_t v20 = v75;
          }
          else {
            uint64_t v20 = 0;
          }
          unint64_t v21 = *(void *)(v14 + 24);
          if (v21)
          {
            while ((*(unsigned char *)(v21 + 288) & 0x80) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr))(**(void **)v16 + 8))(&v74);
              uint64_t v22 = (_BYTE)v74 ? v75 : 0;
              if (v20 != v22) {
                break;
              }
              if (*v54)
              {
                unint64_t v23 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
                uint64_t v24 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * ((v23 ^ (v23 >> 31)) % *(unsigned int *)(a1 + 80)));
                if (v24 != 0x7FFFFFFF)
                {
                  uint64_t v25 = *(void *)(a1 + 72);
                  while (*(void *)(v25 + 48 * v24 + 16) != v21)
                  {
                    LODWORD(v24) = *(_DWORD *)(v25 + 48 * v24 + 8) & 0x7FFFFFFF;
                    if (v24 == 0x7FFFFFFF) {
                      goto LABEL_37;
                    }
                  }
                  uint64_t v28 = v25 + 48 * v24;
                  uint64_t v27 = *(void *)(v28 + 32);
                  unint64_t v21 = *(void *)(v28 + 24);
LABEL_48:
                  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v74);
                  uint64_t v67 = 0;
                  uint64_t v68 = 0;
                  int v69 = 1;
                  uint64_t v71 = 0;
                  unint64_t v72 = 0;
                  uint64_t v70 = 0;
                  int v73 = 0;
                  re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::init((uint64_t)&v67, (uint64_t)&v74, 1uLL);
                  *(void *)&long long v65 = v14;
                  *((void *)&v65 + 1) = v21;
                  *(void *)&long long v66 = v27;
                  *((void *)&v66 + 1) = v20;
                  __n128 v29 = re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::add((uint64_t)&v67, (uint64_t)&v65);
                  while (2)
                  {
                    unint64_t v30 = v72;
                    do
                    {
LABEL_50:
                      if (!v30)
                      {
                        while (v68)
                          re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(&v67);
                        if (v67 && (v69 & 1) == 0) {
                          (*(void (**)(__n128))(*(void *)v67 + 40))(v29);
                        }
                        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v74);
                        goto LABEL_92;
                      }
                      unint64_t v31 = (long long *)re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)&v67, --v30);
                      long long v32 = v31[1];
                      long long v65 = *v31;
                      long long v66 = v32;
                      re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)&v67, v30);
                      unint64_t v72 = v30;
                      ++v73;
                      unint64_t v33 = v65;
                    }
                    while ((*(unsigned char *)(v65 + 288) & 1) == 0);
                    long long v34 = *(float **)(v65 + 152);
                    if (v34)
                    {
                      uint64_t v35 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v65 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                      float v36 = v34[7];
                      if (v35) {
                        *((float *)&v66 + 1) = v36 * *((float *)&v66 + 1);
                      }
                      else {
                        *(float *)&long long v66 = v36 * *(float *)&v66;
                      }
                      re::ecs2::HierarchicalFadeComponent::getFadeGroupID((re::ecs2::HierarchicalFadeComponent *)v34, (uint64_t)&v61);
                      if ((_BYTE)v61) {
                        long long v38 = &v62;
                      }
                      else {
                        long long v38 = (uint64_t *)&v65 + 1;
                      }
                      uint64_t v37 = *v38;
                      *((void *)&v65 + 1) = *v38;
                      unint64_t v33 = v65;
                    }
                    else
                    {
                      uint64_t v37 = *((void *)&v65 + 1);
                    }
                    v29.n128_u32[0] = v66;
                    if (*(float *)&v66 != 1.0 || v37 != 0 || *((float *)&v66 + 1) != 1.0)
                    {
                      uint64_t v61 = v37;
                      uint64_t v62 = v66;
                      LOBYTE(v6re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0;
                      unint64_t v41 = 0x94D049BB133111EBLL
                          * ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) >> 27));
                      unint64_t v42 = v41 ^ (v41 >> 31);
                      if (*v54)
                      {
                        unint64_t v43 = v42 % *(unsigned int *)(a1 + 80);
                        uint64_t v44 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v43);
                        if (v44 != 0x7FFFFFFF)
                        {
                          uint64_t v45 = *(void *)(a1 + 72);
                          while (*(void *)(v45 + 48 * v44 + 16) != v33)
                          {
                            LODWORD(v44) = *(_DWORD *)(v45 + 48 * v44 + 8) & 0x7FFFFFFF;
                            if (v44 == 0x7FFFFFFF) {
                              goto LABEL_75;
                            }
                          }
                          goto LABEL_76;
                        }
                      }
                      else
                      {
                        LODWORD(v4re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0;
                      }
LABEL_75:
                      re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove((uint64_t)v54, v43, v42, &v65, (uint64_t)&v61);
                      ++*(_DWORD *)(a1 + 96);
                      unint64_t v33 = v65;
                    }
LABEL_76:
                    uint64_t v46 = *(void *)(v33 + 328);
                    if (v46)
                    {
                      unint64_t v47 = *(uint64_t **)(v33 + 344);
                      uint64_t v48 = 8 * v46;
                      do
                      {
                        uint64_t v49 = *v47;
                        (*(void (**)(uint64_t *__return_ptr))(**(void **)v16 + 8))(&v61);
                        if ((_BYTE)v61) {
                          uint64_t v50 = v62;
                        }
                        else {
                          uint64_t v50 = 0;
                        }
                        if (*((void *)&v66 + 1) == v50)
                        {
                          uint64_t v61 = v49;
                          uint64_t v62 = *((void *)&v65 + 1);
                          uint64_t v63 = v66;
                        }
                        else
                        {
                          uint64_t v61 = v49;
                          uint64_t v62 = 0;
                          uint64_t v63 = _D8;
                        }
                        uint64_t v64 = v50;
                        __n128 v29 = re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::add((uint64_t)&v67, (uint64_t)&v61);
                        ++v47;
                        v48 -= 8;
                      }
                      while (v48);
                      continue;
                    }
                    goto LABEL_50;
                  }
                }
              }
LABEL_37:
              unint64_t v21 = *(void *)(v21 + 24);
              if (!v21) {
                goto LABEL_46;
              }
            }
            unint64_t v21 = 0;
          }
LABEL_46:
          uint64_t v27 = _D8;
          goto LABEL_48;
        }
        while (1)
        {
          uint64_t v55 = v15;
          if (re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)v57, &v55)|| re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a2, &v55))
          {
            break;
          }
          uint64_t v15 = *(void *)(v55 + 24);
          if (!v15 || (*(unsigned char *)(v15 + 288) & 0x80) != 0)
          {
            unint64_t v14 = v56;
            goto LABEL_17;
          }
        }
        uint64_t v26 = v56;
        while (1)
        {
          uint64_t v74 = v26;
          if (v55 == v26) {
            break;
          }
          re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v57, &v74);
          uint64_t v26 = *(void *)(v74 + 24);
          if (v26 && (*(unsigned char *)(v26 + 288) & 0x80) != 0) {
            uint64_t v26 = 0;
          }
        }
LABEL_92:
        LODWORD(v4) = v53;
      }
      uint64_t v9 = *(void *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v5 + 1)) {
        int v51 = v5 + 1;
      }
      else {
        int v51 = *(_DWORD *)(a2 + 32);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v51 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v52 = v8;
        if ((*(_DWORD *)(v9 + 24 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_100;
        }
      }
      int v52 = v51;
LABEL_100:
      LODWORD(v5) = v52;
    }
    while (v4 != v52);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v57);
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v60);
}

__n128 re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::setBucketsCapacity((void *)a1, (v4 + 32) >> 5);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v6 = a1 + 24;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(v6 + 8 * (v4 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v8 = (_OWORD *)(v7 + 32 * (v4 & 0x1F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *uint64_t v8 = *(_OWORD *)a2;
  v8[1] = v10;
  return result;
}

void re::ecs2::OpacityManager::updateOpacityData(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 304) = a2;
  re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::updatePerEntityStateData(a1 + 8);
  *(void *)(a1 + 304) = 0;
}

void re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::updatePerEntityStateData(uint64_t a1)
{
  uint64_t v1 = a1 + 104;
  uint64_t v2 = a1 + 200;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a1 + 104);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v2);
}

uint64_t re::ecs2::OpacityManager::getResolvedFadeOpacity(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 64, &v5);
  if (!v2) {
    return 1065353216;
  }
  uint64_t v3 = 20;
  if (!*(unsigned char *)(v2 + 16)) {
    uint64_t v3 = 12;
  }
  return COERCE_UNSIGNED_INT(*(float *)(v2 + 8) * *(float *)(v2 + v3));
}

float re::ecs2::OpacityManager::computeAndGetResolvedFadeOpacity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 312);
  if (!v3) {
    return -1.0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  *(void *)(a1 + 304) = &v6;
  re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::updatePerEntityStateData(a1 + 8);
  *(void *)(a1 + 304) = 0;
  LODWORD(result) = re::ecs2::OpacityManager::getResolvedFadeOpacity(a1, a2);
  return result;
}

void re::ecs2::OpacityManagerStateTracking::~OpacityManagerStateTracking(re::ecs2::OpacityManagerStateTracking *this)
{
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 34);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::~HierarchyStateTracking((uint64_t *)this);
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 34);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::~HierarchyStateTracking((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::OpacityManagerStateTracking::trackedComponents(re::ecs2::OpacityManagerStateTracking *this)
{
  return *((void *)this + 33);
}

uint64_t re::ecs2::OpacityManagerStateTracking::trackedActivationComponents(re::ecs2::OpacityManagerStateTracking *this)
{
  return *((void *)this + 36);
}

void re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
    v22[0] = 0;
    v22[1] = 0;
    int v23 = 1;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    int v27 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = a2;
    uint64_t v4 = v26;
    while (v4)
    {
      unint64_t v5 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, v4 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, v26 - 1);
      uint64_t v4 = --v26;
      ++v27;
      if (*(void *)(a1 + 56))
      {
        unint64_t v6 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
        unint64_t v7 = (v6 ^ (v6 >> 31)) % *(unsigned int *)(a1 + 80);
        uint64_t v8 = *(void *)(a1 + 64);
        uint64_t v9 = *(unsigned int *)(v8 + 4 * v7);
        if (v9 != 0x7FFFFFFF)
        {
          uint64_t v10 = *(void *)(a1 + 72);
          if (*(void *)(v10 + 48 * v9 + 16) == v5)
          {
            *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v10 + 48 * v9 + 8) & 0x7FFFFFFF;
LABEL_10:
            uint64_t v12 = *(void *)(a1 + 72);
            uint64_t v13 = v12 + 48 * v9;
            int v16 = *(_DWORD *)(v13 + 8);
            uint64_t v15 = (int *)(v13 + 8);
            int v14 = v16;
            if (v16 < 0)
            {
              int *v15 = v14 & 0x7FFFFFFF;
              uint64_t v12 = *(void *)(a1 + 72);
              int v14 = *(_DWORD *)(v12 + 48 * v9 + 8);
            }
            *(_DWORD *)(v12 + 48 * v9 + 8) = *(_DWORD *)(a1 + 92) | v14 & 0x80000000;
            --*(_DWORD *)(a1 + 84);
            int v17 = *(_DWORD *)(a1 + 96) + 1;
            *(_DWORD *)(a1 + 92) = v9;
            *(_DWORD *)(a1 + 96) = v17;
          }
          else
          {
            while (1)
            {
              uint64_t v11 = v9;
              uint64_t v9 = *(_DWORD *)(v10 + 48 * v9 + 8) & 0x7FFFFFFF;
              if (v9 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v10 + 48 * v9 + 16) == v5)
              {
                *(_DWORD *)(v10 + 48 * v11 + 8) = *(_DWORD *)(v10 + 48 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 48 * v9 + 8) & 0x7FFFFFFF;
                goto LABEL_10;
              }
            }
          }
        }
      }
      uint64_t v18 = *(void *)(v5 + 328);
      if (v18)
      {
        uint64_t v19 = *(uint64_t **)(v5 + 344);
        uint64_t v20 = 8 * v18;
        do
        {
          uint64_t v21 = *v19++;
          *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = v21;
          v20 -= 8;
        }
        while (v20);
        uint64_t v4 = v26;
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
    if (v22[0])
    {
      if ((v23 & 1) == 0) {
        (*(void (**)(void))(*(void *)v22[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
  }
}

void re::ecs2::OpacityManager::~OpacityManager(re::ecs2::OpacityManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 35);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32);
  re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::~HierarchyStateTracking(v2);
}

{
  uint64_t *v2;
  uint64_t vars8;

  uint64_t v2 = (uint64_t *)((char *)this + 8);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 35);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32);
  re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::~HierarchyStateTracking(v2);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::OpacityManager::fadeOpacityPerEntity(re::ecs2::OpacityManager *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::OpacityManager::registerScene(re::ecs2::OpacityManager *this, re::EventBus **a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v44 = (re::ecs2::Scene *)a2;
  uint64_t v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = (re::ecs2::OpacityManager *)((char *)this + 8);
  v38[0] = 0;
  v38[1] = 0;
  int v39 = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  int v43 = 0;
  unint64_t v5 = (re *)(*(uint64_t (**)(re *))(*(void *)v4 + 16))(v4);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)v5;
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      uint64_t v46 = re::globalAllocators(v5)[2];
      uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
      *uint64_t v10 = &unk_26E704F90;
      v10[1] = v4;
      v10[2] = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      void v10[3] = 0;
      unint64_t v47 = v10;
      uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v45, v9, 0);
      uint64_t v13 = v12;
      int v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
      void *v14 = v11;
      v14[1] = v13;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v45);
      re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v4, v2, (uint64_t)v38, v9);
      unint64_t v5 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v4, v2, (uint64_t)v38, v9);
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v15 = (re *)(*(uint64_t (**)(re *))(*(void *)v4 + 24))(v4);
  if (v16)
  {
    int v17 = (uint64_t *)v15;
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v17++;
      re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v4, v2, (uint64_t)v38, v19);
      uint64_t v15 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v4, v2, (uint64_t)v38, v19);
      v18 -= 8;
    }
    while (v18);
  }
  uint64_t v46 = re::globalAllocators(v15)[2];
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
  void *v20 = &unk_26E705098;
  v20[1] = v4;
  v20[2] = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  void v20[3] = 0;
  unint64_t v47 = v20;
  uint64_t v21 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v45, 0, 0);
  uint64_t v23 = v22;
  uint64_t v24 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *uint64_t v24 = v21;
  v24[1] = v23;
  uint64_t v25 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v45);
  uint64_t v46 = re::globalAllocators(v25)[2];
  uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
  void *v26 = &unk_26E7050F0;
  v26[1] = v4;
  _OWORD v26[2] = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  v26[3] = 0;
  unint64_t v47 = v26;
  uint64_t v27 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v45, 0, 0);
  uint64_t v29 = v28;
  unint64_t v30 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *unint64_t v30 = v27;
  v30[1] = v29;
  unint64_t v31 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)v45);
  uint64_t v46 = re::globalAllocators(v31)[2];
  long long v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
  void *v32 = &unk_26E705148;
  v32[1] = v4;
  v32[2] = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  v32[3] = 0;
  unint64_t v47 = v32;
  uint64_t v33 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v45, 0, 0);
  uint64_t v35 = v34;
  float v36 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *float v36 = v33;
  v36[1] = v35;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v45);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 160, (uint64_t *)&v44, (uint64_t)v38);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 16, (uint64_t *)&v44);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v38);
  uint64_t result = v38[0];
  if (v38[0])
  {
    if ((v39 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v38[0] + 40))();
    }
  }
  return result;
}

uint64_t re::ecs2::OpacityManager::unregisterScene(re::ecs2::OpacityManager *this, re::ecs2::Scene *a2)
{
  int v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 16, (uint64_t *)&v14);
  uint64_t v3 = *((void *)v14 + 13);
  uint64_t v4 = *(void *)(v3 + 328);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 344);
    uint64_t v6 = 8 * v4;
    do
    {
      if (*(unsigned char *)(*(void *)v5 + 288)) {
        (*(void (**)(char *))(*((void *)this + 1) + 40))((char *)this + 8);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  unint64_t v7 = (char *)this + 160;
  uint64_t result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    uint64_t v9 = *((void *)v14 + 36);
    if (v9)
    {
      uint64_t v10 = result;
      uint64_t v11 = *(void *)(result + 40);
      if (v11)
      {
        for (unint64_t i = 0; i != v11; ++i)
        {
          uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(void *)v13, *(void *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

uint64_t *re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::~HierarchyStateTracking(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E704F50;
  uint64_t v2 = a1 + 1;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 13);
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(a1 + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
  return a1;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::trackedComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::trackedActivationComponents()
{
  return 0;
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *uint64_t v8 = &unk_26E704FE8;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  uint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *uint64_t v8 = &unk_26E705040;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  uint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704F90;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704F90;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E704FE8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E704FE8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E705040;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E705040;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E705098;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E705098;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (!*(unsigned char *)(a2 + 371))
  {
    uint64_t v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7050F0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7050F0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E705148;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E705148;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 1024, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 48 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = v13 + 48 * v9;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a5;
  int v15 = *(unsigned __int8 *)(a5 + 16);
  *(unsigned char *)(v14 + 40) = v15;
  if (v15) {
    *(_DWORD *)(v13 + 48 * v9 + 44) = *(_DWORD *)(a5 + 20);
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

__n128 re::ecs2::ibrutils::inferContentPlaneGeometry@<Q0>(re::ecs2::ibrutils *this@<X0>, const re::ecs2::Entity *a2@<X1>, uint64_t a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)_MergedGlobals_298, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(_MergedGlobals_298))
  {
    xmmword_26AF8CDE0 = 0u;
    unk_26AF8CDF0 = 0u;
    xmmword_26AF8CE00 = 0u;
    unk_26AF8CE10 = xmmword_2343A38A0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(void *)&xmmword_26AF8CE20 = _D0;
    __cxa_guard_release(_MergedGlobals_298);
  }
  uint64_t v5 = *((void *)this + 22);
  if (v5 && (uint64_t v6 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v5 + 32))) != 0)
  {
    unsigned int v7 = (float32x4_t *)v6;
    long long v8 = (re::ecs2::TransformComponent *)*((void *)this + 30);
    re::ecs2::TransformComponent::worldMatrix4x4F(v8, 1, (uint64_t)&v56);
    unsigned int v9 = (re::ecs2::TransformComponent **)*((void *)v8 + 2);
    if (v9)
    {
      re::ecs2::TransformComponent::worldOrientation(v9, (const re::ecs2::Entity *)1);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
    }
    else
    {
      unint64_t v16 = (void *)((char *)v8 + 48);
      uint64_t v11 = *((void *)v8 + 6);
      uint64_t v13 = v16[1];
    }
    simd_float4 v61 = (simd_float4)xmmword_23435FD50;
    simd_float4 v62 = (simd_float4)xmmword_23435FD60;
    simd_float4 v63 = (simd_float4)xmmword_23435FD80;
    simd_float4 v64 = (simd_float4)xmmword_23435FBB0;
    re::MeshAsset::aabbFromMesh(v7, (float32x4_t *)&v61, (uint64_t)&v54);
    uint64_t v18 = 0;
    uint64x2_t v19 = (uint64x2_t)v59;
    float32x4_t v20 = vmulq_f32(v56, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v58, v58, 0xCuLL), v58, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v57, v57), (int8x16_t)v57, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), v58, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v57, (int8x16_t)v57, 0xCuLL), (int8x16_t)v57, 8uLL)));
    float v21 = -1.0;
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0] > 0.0)float v21 = 1.0; {
    uint32x4_t v22 = (uint32x4_t)vcgtq_f32(v54, v55);
    }
    v22.i32[3] = v22.i32[2];
    _ZF = (vmaxvq_u32(v22) & 0x80000000) == 0;
    float32x4_t v24 = vmulq_f32(v56, v56);
    v24.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
    float32x4_t v25 = vmulq_f32((float32x4_t)v57, (float32x4_t)v57);
    v24.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
    v17.n128_u64[0] = (unint64_t)vmul_f32(vmaxnm_f32(vsub_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v54.f32), 0), vmul_n_f32(*(float32x2_t *)v24.f32, v21));
    float v26 = 0.0;
    float32x4_t v27 = vaddq_f32(v55, v54);
    double v28 = COERCE_DOUBLE(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v27.f32), (float32x2_t)0x3F0000003F000000));
    float v29 = vmuls_lane_f32(0.5, v27, 2);
    if (_ZF) {
      float v26 = v29;
    }
    if (_ZF) {
      double v30 = v28;
    }
    else {
      double v30 = 0.0;
    }
    float32x4_t v47 = vaddq_f32(v59, vmlaq_n_f32(vmlaq_n_f32(vmulq_lane_f32(v56, *(float32x2_t *)&v30, 1), (float32x4_t)v57, *(float *)&v30), (float32x4_t)v58, v26));
    *(float *)&v19.i32[1] = -v17.n128_f32[1];
    uint64_t v31 = v11;
    float v32 = *(float *)&v13;
    float v33 = v32 + v32;
    float v34 = (float)(*(float *)&v31 + *(float *)&v31) * *(float *)&v31;
    float v35 = (float)(*((float *)&v11 + 1) + *((float *)&v11 + 1)) * *((float *)&v11 + 1);
    float v36 = (float)(v32 + v32) * v32;
    float v37 = (float)(*(float *)&v31 + *(float *)&v31) * *((float *)&v11 + 1);
    float v38 = (float)(*(float *)&v31 + *(float *)&v31) * *(float *)&v13;
    float v39 = (float)(*((float *)&v11 + 1) + *((float *)&v11 + 1)) * *(float *)&v13;
    float v40 = (float)(*(float *)&v31 + *(float *)&v31) * *((float *)&v13 + 1);
    float v41 = (float)(*((float *)&v11 + 1) + *((float *)&v11 + 1)) * *((float *)&v13 + 1);
    v42.i32[3] = 0;
    v42.f32[0] = 1.0 - (float)(v35 + v36);
    v42.f32[1] = v37 + (float)(v33 * *((float *)&v13 + 1));
    v43.i32[3] = 0;
    v42.f32[2] = v38 - v41;
    float32_t v44 = 1.0 - (float)(v34 + v36);
    v45.i32[3] = 0;
    v45.f32[0] = v37 - (float)(v33 * *((float *)&v13 + 1));
    v45.f32[1] = v44;
    v45.f32[2] = v39 + v40;
    __n128 v53 = v17;
    float32x4_t v46 = vmulq_n_f32(v42, v17.n128_f32[0]);
    v47.i32[3] = 1.0;
    v60[0] = xmmword_23435FD50;
    v60[1] = xmmword_23435FD60;
    float32x4_t v48 = vmulq_n_f32(v45, *(float *)vshrq_n_u64(v19, 0x20uLL).i32);
    uint64_t v60[2] = xmmword_23435FD80;
    v60[3] = xmmword_2343A38B0;
    do
    {
      v43.f32[2] = 1.0 - (float)(v34 + v35);
      v43.f32[1] = v39 - v40;
      v43.f32[0] = v38 + v41;
      *(float32x4_t *)((char *)&v61 + v18 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, COERCE_FLOAT(v60[v18])), v48, *(float32x2_t *)&v60[v18], 1), v43, (float32x4_t)v60[v18], 2), v47, (float32x4_t)v60[v18], 3);
      ++v18;
    }
    while (v18 != 4);
    v65.columns[2] = v63;
    v65.columns[3] = v64;
    v65.columns[0] = v61;
    v65.columns[1] = v62;
    *(simd_float4x4 *)a3 = __invert_f4(v65);
    __n128 result = v53;
    *(void *)(a3 + 64) = v53.n128_u64[0];
  }
  else
  {
    long long v14 = unk_26AF8CE10;
    *(_OWORD *)(a3 + 32) = xmmword_26AF8CE00;
    *(_OWORD *)(a3 + 48) = v14;
    *(_OWORD *)(a3 + 64) = xmmword_26AF8CE20;
    __n128 result = (__n128)unk_26AF8CDF0;
    *(_OWORD *)a3 = xmmword_26AF8CDE0;
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

void *re::ecs2::allocInfo_FrameCountComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CE38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8CE38))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8CE50, "FrameCountComponent");
    __cxa_guard_release(&qword_26AF8CE38);
  }
  return &unk_26AF8CE50;
}

void re::ecs2::initInfo_FrameCountComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x4A8E0D736060CEB6;
  v13[1] = "FrameCountComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_299, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_299);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8CE40 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint64_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_frameCount";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8CE48 = v11;
      __cxa_guard_release(&_MergedGlobals_299);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8CE40;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::FrameCountComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::FrameCountComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::FrameCountComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::FrameCountComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::FrameCountComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6860;
}

uint64_t re::internal::defaultDestruct<re::ecs2::FrameCountComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::FrameCountComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F6860;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::FrameCountComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_FrameCountComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrameCountComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FrameCountComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FrameCountComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FrameCountComponent>, this);
}

void *re::ecs2::allocInfo_RenderOptionsService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_300, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_300))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8CED0, "RenderOptionsService");
    __cxa_guard_release(&_MergedGlobals_300);
  }
  return &unk_26AF8CED0;
}

void re::ecs2::initInfo_RenderOptionsService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x31DB530E229D1B1ALL;
  v5[1] = "RenderOptionsService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_RenderOptionsService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_RenderOptionsService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderOptionsService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderOptionsService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderOptionsService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderOptionsService>, this);
}

void re::ecs2::HierarchyStateTracking<re::ecs2::EntityRenderOptions>::updatePerEntityStateData(uint64_t a1)
{
  uint64_t v1 = a1 + 104;
  uint64_t v2 = a1 + 200;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a1 + 104);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v2);
}

void *re::ecs2::RenderOptions::forEntity(re::ecs2::RenderOptions *this, unint64_t a2)
{
  if (!a2) {
    return &re::ecs2::EntityRenderOptions::invisibleRenderOptions(void)::s_invisibleRenderOptions;
  }
  if ((*(unsigned char *)(a2 + 288) & 0x41) == 0) {
    return &re::ecs2::EntityRenderOptions::invisibleRenderOptions(void)::s_invisibleRenderOptions;
  }
  uint64_t v2 = *(void *)this;
  if (*(void *)(*(void *)this + 56))
  {
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    uint64_t v4 = *(unsigned int *)(*(void *)(v2 + 64) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(v2 + 80)));
    if (v4 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(v2 + 72);
      if (*(void *)(v7 + 56 * v4 + 16) == a2) {
        return (void *)(v7 + 56 * v4 + 24);
      }
      while (1)
      {
        LODWORD(v4) = *(_DWORD *)(v7 + 56 * v4 + 8) & 0x7FFFFFFF;
        if (v4 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v7 + 56 * v4 + 16) == a2) {
          return (void *)(v7 + 56 * v4 + 24);
        }
      }
    }
  }
  if ((atomic_exchange(re::ecs2::RenderOptions::forEntity(re::ecs2::Entity const*)const::errorLogged, 1u) & 1) == 0)
  {
    uint64_t v5 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v8 = 0;
    }
  }
  return &re::ecs2::EntityRenderOptions::defaultRenderOptions(void)::s_defaultRenderOptions;
}

void *re::ecs2::allocInfo_PassthroughDarkeningComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CF50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8CF50))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8CFE0, "PassthroughDarkeningComponent");
    __cxa_guard_release(&qword_26AF8CF50);
  }
  return &unk_26AF8CFE0;
}

void re::ecs2::initInfo_PassthroughDarkeningComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v31[0] = 0x3BE276F3A69CE7DCLL;
  v31[1] = "PassthroughDarkeningComponent";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CF58, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8CF58);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8CF68 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "lightspillEnabled";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8CF70 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::Optional<re::Matrix3x3<float>>>::get();
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "darkeningMatrix";
      *(void *)(v13 + 16) = &qword_26AF8CFA0;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF8CF78 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      unint64_t v16 = re::introspect_float((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "lightSpillIntensity";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x6000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF8CF80 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      float32x4_t v20 = re::introspect_BOOL((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "chromaticAdaptationSuspended";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x6400000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF8CF88 = v21;
      uint32x4_t v22 = re::introspectionAllocator((re *)v21);
      float32x4_t v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "glowIntensity";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x6800000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF8CF90 = v25;
      float v26 = re::introspectionAllocator((re *)v25);
      double v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "glowSampleSpread";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x6C00000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF8CF98 = v29;
      __cxa_guard_release(&qword_26AF8CF58);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF8CF68;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::PassthroughDarkeningComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PassthroughDarkeningComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::PassthroughDarkeningComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PassthroughDarkeningComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v30 = v32;
}

void re::IntrospectionInfo<re::Optional<re::Matrix3x3<float>>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8CF60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8CF60))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF8CFA0);
    qword_26AF8CFA0 = (uint64_t)&unk_26E7051A0;
    __cxa_guard_release(&qword_26AF8CF60);
  }
  if ((_MergedGlobals_301 & 1) == 0)
  {
    uint64_t v0 = re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
    if ((_MergedGlobals_301 & 1) == 0)
    {
      uint64_t v1 = v0;
      _MergedGlobals_301 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8CFA0, 0);
      qword_26AF8CFB0 = 0x400000000DLL;
      dword_26AF8CFB8 = v2;
      word_26AF8CFBC = 0;
      *(void *)&xmmword_26AF8CFC0 = 0;
      *((void *)&xmmword_26AF8CFC0 + 1) = 0xFFFFFFFFLL;
      qword_26AF8CFD0 = v1;
      unk_26AF8CFD8 = 0;
      qword_26AF8CFA0 = (uint64_t)&unk_26E7051A0;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF8CFA0, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginOptionalType((uint64_t)&v13, v11, 0x40uLL, 0x10uLL, &v12);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v13, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Matrix3x3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Matrix3x3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF8CFC0 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::PassthroughDarkeningComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EE208;
  *(unsigned char *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 96) = 1065353216;
  *(unsigned char *)(v3 + 100) = 0;
  double result = 0.12500003;
  *(void *)(v3 + 104) = 0x3FC000003F800000;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PassthroughDarkeningComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PassthroughDarkeningComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EE208;
  *(unsigned char *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 96) = 1065353216;
  *(unsigned char *)(v1 + 100) = 0;
  double result = 0.12500003;
  *(void *)(v1 + 104) = 0x3FC000003F800000;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PassthroughDarkeningComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PassthroughDarkeningComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PassthroughDarkeningComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PassthroughDarkeningComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PassthroughDarkeningComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PassthroughDarkeningComponent>, this);
}

void *re::IntrospectionOptional<re::Matrix3x3<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Matrix3x3<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::Matrix3x3<float>>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Matrix3x3<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Matrix3x3<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Matrix3x3<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Matrix3x3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  double result = a1 + 16;
  if (!v2) {
    return 0;
  }
  return result;
}

double re::TypeBuilderHelper::registerOptional<re::Matrix3x3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, long long *a2)
{
  if (a2)
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[2];
    int v2 = (_OWORD *)(a1 + 16);
    if (*(unsigned char *)a1)
    {
      long long v3 = *a2;
      long long v4 = a2[2];
      *(_OWORD *)(a1 + 32) = a2[1];
      *(_OWORD *)(a1 + 48) = v4;
      *int v2 = v3;
    }
    else
    {
      *(unsigned char *)a1 = 1;
      *int v2 = v6;
      *(_OWORD *)(a1 + 32) = v7;
      *(void *)&long long v3 = v8;
      *(_OWORD *)(a1 + 48) = v8;
    }
  }
  else if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
  }
  return *(double *)&v3;
}

void *re::allocInfo_VideoService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_302, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_302))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D060, "VideoService");
    __cxa_guard_release(&_MergedGlobals_302);
  }
  return &unk_26AF8D060;
}

void re::initInfo_VideoService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x3F1D323CEE935BB4;
  v5[1] = "VideoService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_VideoService(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::VideoService>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::VideoService>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::VideoService>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::VideoService>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::VideoService>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E705220;
}

uint64_t re::internal::defaultDestruct<re::VideoService>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void *re::internal::defaultConstructV2<re::VideoService>(void *result)
{
  *double result = &unk_26E705220;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::VideoService>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_VideoService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoService", (uint64_t (*)(re::internal *))re::allocInfo_VideoService, (re::IntrospectionBase *(*)(void))re::initInfo_VideoService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::VideoService>, this);
}

void re::VideoService::~VideoService(re::VideoService *this)
{
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willAddSystemToECSService(re::ecs2::NetworkAssetComponentSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::ServiceLocator::serviceOrNull<re::NetworkAssetService>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AssetService>(v3);
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = result;
  return result;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  *(void *)(this + 112) = 0;
  return this;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = this;
    long long v4 = (re::ecs2::Scene *)((char *)a2 + 200);
    uint64_t v5 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    uint64_t v8 = v3;
    long long v9 = re::ecs2::NetworkAssetComponentSystem::didAddComponents;
    uint64_t v10 = 0;
    uint64_t v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 128), (uint64_t)&v8);
    uint64_t v8 = v3;
    long long v9 = re::ecs2::NetworkAssetComponentSystem::willRemoveComponents;
    uint64_t v10 = 0;
    uint64_t v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 392), (uint64_t)&v8);
    uint64_t v6 = re::ecs2::SceneComponentTable::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    uint64_t v8 = v3;
    long long v9 = re::ecs2::NetworkAssetComponentSystem::didAddComponents;
    uint64_t v10 = 0;
    uint64_t v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    double v7 = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 128), (uint64_t)&v8);
    this = *(void *)(v3 + 104);
    if (this) {
      return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *, double))(*(void *)this + 184))(this, a2, v7);
    }
  }
  return this;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::didAddComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(void *)(a1 + 104))
  {
    if (*(void *)(a1 + 40)) {
      BOOL v5 = a4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        (*(void (**)(void, void, uint64_t, void))(**(void **)(a1 + 104) + 136))(*(void *)(a1 + 104), *(void *)(v8 + 32), v8 + 72, *(void *)(v8 + 16));
        v7 -= 8;
      }
      while (v7);
    }
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  uint32_t v26;
  _anonymous_namespace_ *v27;
  uint64_t v28;
  _anonymous_namespace_ *v29;
  re::AssetHandle *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33[3];
  uint8_t buf[4];
  unsigned char v35[20];
  long long v36;
  long long v37;
  long long v38;
  uint64_t v39;
  uint64_t v40;

  float v40 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 104))
  {
    long long v4 = a1;
    if (*(void *)(a1 + 40) && a4 != 0)
    {
      for (unint64_t i = 8 * a4; i; i -= 8)
      {
        long long v9 = *a3;
        uint64_t v10 = *(void *)(*a3 + 16);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 24);
          if (!v11 || (*(unsigned char *)(v11 + 288) & 0x80) != 0)
          {
            float32x4_t v20 = *re::assetsLogObjects((re *)a1);
            a1 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
            if (a1)
            {
              *(_WORD *)long long buf = 0;
              uint64_t v21 = v20;
              uint32x4_t v22 = "Could not find parent of AssetPreloadComponent Entity. Aborting asset preload.";
LABEL_28:
              float v26 = 2;
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v12 = *(void *)(v4 + 104);
            uint64_t v13 = *(void *)(v4 + 112);
            char v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v14)
            {
              int v15 = v14;
              unint64_t v16 = *(void *)(v14 + 32);
              a1 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 112))(v12, v16);
              if ((a1 & 1) == 0)
              {
                uint64_t v17 = *(void *)(v15 + 48);
                uint64_t v18 = v17 >> 1;
                if ((v17 & 1) == 0) {
                  uint64_t v18 = v17 >> 1;
                }
                if (v18)
                {
                  if (v17) {
                    uint64x2_t v19 = *(char **)(v15 + 56);
                  }
                  else {
                    uint64x2_t v19 = (char *)(v15 + 49);
                  }
                  float32x4_t v27 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetTypeWithName(*(re::internal::AssetTypeRegistry **)(v13 + 1040), v19);
                  if (v27)
                  {
                    double v28 = (uint64_t)v27;
                    *(_DWORD *)long long buf = 0;
                    *(_OWORD *)&v35[4] = 0u;
                    float v36 = 0u;
                    uint64_t v29 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v35[4], 0);
                    float v37 = 0u;
                    float v38 = 0u;
                    re::DynamicString::setCapacity(&v37, 0);
                    float v39 = 0;
                    re::AssetPath::initAssetIdAssetPath((uint64_t)buf, v16, v28);
                    (**(void (***)(uint64_t *__return_ptr, uint64_t, uint8_t *))v13)(v33, v13, buf);
                    long long v30 = (re::AssetHandle *)re::AssetHandle::operator=(v9 + 32, v33);
                    re::AssetHandle::loadAsync(v30);
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
                    if ((void)v37)
                    {
                      if (BYTE8(v37)) {
                        (*(void (**)(void))(*(void *)v37 + 40))();
                      }
                      float v37 = 0u;
                      float v38 = 0u;
                    }
                    a1 = *(void *)&v35[4];
                    if (*(void *)&v35[4] && (v35[12] & 1) != 0) {
                      a1 = (*(uint64_t (**)(void))(**(void **)&v35[4] + 40))();
                    }
                    goto LABEL_21;
                  }
                  uint64_t v31 = *re::assetsLogObjects(0);
                  a1 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
                  if (a1)
                  {
                    if (*(unsigned char *)(v15 + 48)) {
                      long long v32 = *(void *)(v15 + 56);
                    }
                    else {
                      long long v32 = v15 + 49;
                    }
                    *(_DWORD *)long long buf = 136315394;
                    *(void *)float v35 = v32;
                    *(_WORD *)&v35[8] = 2048;
                    *(void *)&v35[10] = v16;
                    uint64_t v21 = v31;
                    uint32x4_t v22 = "Could not find asset type named '%s' in the type registry. Aborting preload for asset %llu.";
                    float v26 = 22;
                    goto LABEL_29;
                  }
                }
                else
                {
                  uint64_t v25 = *re::assetsLogObjects((re *)a1);
                  a1 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
                  if (a1)
                  {
                    *(_DWORD *)long long buf = 134217984;
                    *(void *)float v35 = v16;
                    uint64_t v21 = v25;
                    uint32x4_t v22 = "NetworkAssetComponent for asset %llu does not have an assetType string. Aborting asset preload.";
                    float v26 = 12;
LABEL_29:
                    _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, v22, buf, v26);
                  }
                }
              }
            }
            else
            {
              float32x4_t v24 = *re::assetsLogObjects(0);
              a1 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
              if (a1)
              {
                *(_WORD *)long long buf = 0;
                uint64_t v21 = v24;
                uint32x4_t v22 = "Could not find NetworkAssetComponent for asset. Aborting asset preload.";
                goto LABEL_28;
              }
            }
          }
        }
        else
        {
          uint64_t v23 = *re::assetsLogObjects((re *)a1);
          a1 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if (a1)
          {
            *(_WORD *)long long buf = 0;
            uint64_t v21 = v23;
            uint32x4_t v22 = "Could not find entity for AssetPreloadComponent. Aborting asset preload.";
            goto LABEL_28;
          }
        }
LABEL_21:
        ++a3;
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willRemoveComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(void *)(a1 + 104))
  {
    if (*(void *)(a1 + 40) && a4 != 0)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3;
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 104) + 112))(*(void *)(a1 + 104), *(void *)(*a3 + 32));
        if ((*(unsigned int (**)(void, void, uint64_t))(**(void **)(a1 + 104) + 144))(*(void *)(a1 + 104), *(void *)(v8 + 32), v8 + 72)&& (v9 & 1) == 0)
        {
          re::AssetManager::cancelLoadingAssetId(*(os_unfair_lock_s **)(a1 + 112), *(void *)(v8 + 32));
        }
        ++a3;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return 0;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = this;
    long long v4 = (re::ecs2::Scene *)((char *)a2 + 200);
    uint64_t v5 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v7 = v3;
    *((void *)&v7 + 1) = re::ecs2::NetworkAssetComponentSystem::didAddComponents;
    uint64_t v8 = 0;
    char v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 128, &v7);
    *(void *)&long long v7 = v3;
    *((void *)&v7 + 1) = re::ecs2::NetworkAssetComponentSystem::willRemoveComponents;
    uint64_t v8 = 0;
    char v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 392, &v7);
    uint64_t v6 = re::ecs2::SceneComponentTable::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v7 = v3;
    *((void *)&v7 + 1) = re::ecs2::NetworkAssetComponentSystem::didAddComponents;
    uint64_t v8 = 0;
    char v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 128, &v7);
    this = *(void *)(v3 + 104);
    if (this) {
      return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(void *)this + 192))(this, a2);
    }
  }
  return this;
}

void *re::ecs2::allocInfo_NetworkAssetComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D0E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D0E0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D1E8, "NetworkAssetComponent");
    __cxa_guard_release(&qword_26AF8D0E0);
  }
  return &unk_26AF8D1E8;
}

void re::ecs2::initInfo_NetworkAssetComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v30[0] = 0x93E695FE988D5B36;
  v30[1] = "NetworkAssetComponent";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D0E8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8D0E8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8D120 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint64_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "assetId";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8D128 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      char v14 = re::IntrospectionInfo<re::DynamicString>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "assetType";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8D130 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      re::IntrospectionInfo<re::DynamicArray<re::AssetLoadDescriptor>>::get();
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "loadDescriptors";
      *(void *)(v17 + 16) = &qword_26AF8D158;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF8D138 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "dependencies";
      *(void *)(v20 + 16) = qword_26AF8D198;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x7000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF8D140 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "isMutable";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0xA000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF8D148 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      float32x4_t v27 = re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "metadata";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0xA800000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF8D150 = v28;
      __cxa_guard_release(&qword_26AF8D0E8);
    }
  }
  *((void *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF8D120;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkAssetComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkAssetComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::NetworkAssetComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkAssetComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

void re::IntrospectionInfo<re::DynamicArray<re::AssetLoadDescriptor>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D110))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8D158);
    qword_26AF8D158 = (uint64_t)&unk_26E7052D8;
    __cxa_guard_release(&qword_26AF8D110);
  }
  if ((_MergedGlobals_303 & 1) == 0)
  {
    uint64_t Descriptor = re::introspect_AssetLoadDescriptor((re::IntrospectionBase **)1);
    if ((_MergedGlobals_303 & 1) == 0)
    {
      uint64_t v1 = Descriptor;
      _MergedGlobals_303 = 1;
      int v2 = *(_DWORD *)(Descriptor + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8D158, 0);
      qword_26AF8D168 = 0x2800000003;
      dword_26AF8D170 = v2;
      word_26AF8D174 = 0;
      *(void *)&xmmword_26AF8D178 = 0;
      *((void *)&xmmword_26AF8D178 + 1) = 0xFFFFFFFFLL;
      qword_26AF8D188 = v1;
      unk_26AF8D190 = 0;
      qword_26AF8D158 = (uint64_t)&unk_26E7052D8;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF8D158, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF8D178 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D118))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)qword_26AF8D198);
    qword_26AF8D198[0] = (uint64_t)&unk_26E705370;
    __cxa_guard_release(&qword_26AF8D118);
  }
  if ((byte_26AF8D0D9 & 1) == 0)
  {
    int v2 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    long long v4 = re::introspect_uint64_t((re *)1, v3);
    if ((byte_26AF8D0D9 & 1) == 0)
    {
      uint64_t v5 = v4;
      byte_26AF8D0D9 = 1;
      int v6 = v4[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF8D198, 0);
      unk_26AF8D1A8 = 0x3000000007;
      unk_26AF8D1B0 = v6;
      unk_26AF8D1B4 = 0;
      *(void *)&xmmword_26AF8D1B8 = 0;
      *((void *)&xmmword_26AF8D1B8 + 1) = 0xFFFFFFFFLL;
      *(void *)algn_26AF8D1C8 = v2;
      *(void *)&algn_26AF8D1C8[8] = 0;
      *(void *)&algn_26AF8D1C8[16] = v5;
      qword_26AF8D1E0 = 0;
      qword_26AF8D198[0] = (uint64_t)&unk_26E705370;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)qword_26AF8D198, (const re::IntrospectionBase *)&v25);
      if (v26) {
        long long v9 = v27;
      }
      else {
        long long v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = v2[2];
      long long v20 = *((_OWORD *)v5 + 2);
      long long v21 = v10;
      uint64_t v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        float v26 = "_CompareFunc";
        uint64_t v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          uint64_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15 {
          || (unint64_t v16 = *v31,
        }
              uint64_t v25 = v14,
              float v26 = v16,
              LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = -1,
              (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF8D1B8 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::ecs2::NetworkAssetComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::NetworkAssetComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::NetworkAssetComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::NetworkAssetComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_NetworkAssetComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkAssetComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkAssetComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkAssetComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkAssetComponent>, this);
}

void *re::ecs2::allocInfo_AssetPreloadComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D0F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D0F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D260, "AssetPreloadComponent");
    __cxa_guard_release(&qword_26AF8D0F0);
  }
  return &unk_26AF8D260;
}

void re::ecs2::initInfo_AssetPreloadComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xBC3854CE9A184FC8;
  v9[1] = "AssetPreloadComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D100, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8D100);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8D0F8 = v7;
      __cxa_guard_release(&qword_26AF8D100);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8D0F8;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::AssetPreloadComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AssetPreloadComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::AssetPreloadComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AssetPreloadComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::AssetPreloadComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6C92B0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AssetPreloadComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::AssetPreloadComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6C92B0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AssetPreloadComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AssetPreloadComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetPreloadComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AssetPreloadComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AssetPreloadComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AssetPreloadComponent>, this);
}

void *re::ecs2::allocInfo_NetworkAssetComponentSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D108))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D2D8, "NetworkAssetComponentSystem");
    __cxa_guard_release(&qword_26AF8D108);
  }
  return &unk_26AF8D2D8;
}

void re::ecs2::initInfo_NetworkAssetComponentSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x2BD7885563705754;
  v5[1] = "NetworkAssetComponentSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_NetworkAssetComponentSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkAssetComponentSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkAssetComponentSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::NetworkAssetComponentSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::NetworkAssetComponentSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::NetworkAssetComponentSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkAssetComponentSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::NetworkAssetComponentSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  re::ecs2::System::System(a3, 1);
  void *v3 = &unk_26E705250;
}

void *re::internal::defaultDestruct<re::ecs2::NetworkAssetComponentSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::NetworkAssetComponentSystem>(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  re::ecs2::System::System(a1, 1);
  *uint64_t v1 = &unk_26E705250;
}

void *re::internal::defaultDestructV2<re::ecs2::NetworkAssetComponentSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_NetworkAssetComponentSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkAssetComponentSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkAssetComponentSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkAssetComponentSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkAssetComponentSystem>, this);
}

void re::ecs2::NetworkAssetComponentSystem::~NetworkAssetComponentSystem(re::ecs2::NetworkAssetComponentSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::NetworkAssetComponentSystem::typeInfo(re::ecs2::NetworkAssetComponentSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkAssetComponentSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkAssetComponentSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkAssetComponentSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkAssetComponentSystem>, 0);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  long long v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  long long v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    long long v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  long long v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  long long v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    long long v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void *re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AssetLoadDescriptor>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::AssetLoadDescriptor>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::AssetLoadDescriptor>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v12, 0);
  *((void *)&v14 + 1) = 0;
  long long v15 = 0uLL;
  LODWORD(v16[0]) = 0;
  memset((char *)v16 + 8, 0, 36);
  memset(v17, 0, sizeof(v17));
  re::DynamicString::setCapacity(&v17[8], 0);
  v9.n128_f64[0] = re::DynamicArray<re::AssetLoadDescriptor>::add(a4, (uint64_t)&v12);
  if (*(void *)&v17[8])
  {
    if (v17[16]) {
      (*(void (**)(double))(**(void **)&v17[8] + 40))(v9.n128_f64[0]);
    }
    __n128 v9 = 0uLL;
    memset(&v17[8], 0, 32);
  }
  if (*(void *)&v16[1])
  {
    if (*(void *)v17) {
      (*(void (**)(__n128))(**(void **)&v16[1] + 40))(v9);
    }
    *(void *)uint64_t v17 = 0;
    memset(&v16[1], 0, 24);
    ++DWORD2(v16[2]);
  }
  if (*((void *)&v14 + 1))
  {
    if (*((void *)&v16[0] + 1)) {
      (*(void (**)(__n128))(**((void **)&v14 + 1) + 40))(v9);
    }
    *((void *)&v16[0] + 1) = 0;
    long long v15 = 0uLL;
    *((void *)&v14 + 1) = 0;
    ++LODWORD(v16[0]);
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(__n128))(*v12 + 40))(v9);
  }
  unint64_t v10 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 144 * *((void *)a4 + 2) - 144);
  re::introspectionInitElement(a2, a3, a1[6], v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 144 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 144 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AssetLoadDescriptor>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::AssetLoadDescriptor>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::AssetLoadDescriptor>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 144 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 144;
        v11 -= 144;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 144 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 144 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  uint64_t v10 = 0;
  long long v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 14;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 56 * v10 + 16, *(void *)(a2 + 16) + 56 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 56 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

uint64_t re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, void *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 56 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 14;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::NetworkAssetComponent>(uint64_t a1)
{
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6C9228;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  uint64_t v3 = (void *)(v2 + 40);
  re::DynamicString::setCapacity(v3, 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(void *)(a1 + 148) = 0x7FFFFFFFLL;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 204) = 0x7FFFFFFFLL;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::NetworkAssetComponentSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::NetworkAssetComponentSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

double re::ShaderGraphMaterial::ShaderGraphMaterial(re::ShaderGraphMaterial *this, re::RenderManager *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0;
  *(void *)this = &unk_26E705410;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((void *)this + 28) = 0;
  *((void *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = a2;
  *((void *)this + 31) = 0xFFFFFFFFFFFFFFFLL;
  *((void *)this + 32) = 0;
  *((void *)this + 3re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0xFFFFFFFFFFFFFFFLL;
  return result;
}

void *re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(void *result)
{
  result[5] = 0;
  result[6] = 0;
  unint64_t v1 = result[2];
  result[3] = 0;
  result[4] = v1;
  if (v1 >= 0x10)
  {
    unint64_t v2 = 0;
    *(void *)&long long v3 = -1;
    *((void *)&v3 + 1) = -1;
    do
    {
      *(_OWORD *)(*result + 16 * v2++) = v3;
      unint64_t v1 = result[2];
    }
    while (v2 < v1 >> 4);
  }
  if (v1)
  {
    int v4 = (void *)result[1];
    uint64_t v5 = 16 * v1;
    do
    {
      *int v4 = 0;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

uint64_t re::ShaderGraphMaterial::handle@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 13, a2);
  if (result == -1)
  {
    uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 21, a2);
    if (result == -1)
    {
      LOWORD(v8) = 0;
      __int16 v9 = 0;
      char v12 = 0;
      uint64_t v10 = 0;
      char v11 = 0;
    }
    else
    {
      char v11 = 0;
      int v8 = *(_DWORD *)(a1[22] + 16 * result + 8);
      uint64_t v10 = (a1[26] + (a1[18] << 6) + (a1[18] >> 2) - 0x61C8864680B583E9) ^ a1[18];
      char v12 = 10;
      __int16 v9 = 1;
    }
  }
  else
  {
    uint64_t v7 = a1[14] + 16 * result;
    LOWORD(v8) = *(_WORD *)(v7 + 8);
    __int16 v9 = *(unsigned __int8 *)(v7 + 10);
    uint64_t v10 = (a1[26] + (a1[18] << 6) + (a1[18] >> 2) - 0x61C8864680B583E9) ^ a1[18];
    char v11 = *(unsigned char *)(v7 + 11);
    char v12 = 9;
  }
  *(void *)a3 = *a2;
  *(_WORD *)(a3 + 8) = v8;
  *(_WORD *)(a3 + 10) = v9;
  *(unsigned char *)(a3 + 12) = v12;
  *(void *)(a3 + 16) = v10;
  *(unsigned char *)(a3 + 24) = v11;
  return result;
}

uint64_t re::ShaderGraphMaterial::handle@<X0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        uint64_t v5 = a2 + 2;
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *(unsigned __int8 *)v5++;
          char v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v8 = v3;
  return re::ShaderGraphMaterial::handle(this, &v8, a3);
}

unint64_t re::ShaderGraphMaterial::getConstant(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 40) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + v2;
}

uint64_t re::ShaderGraphMaterial::colorGamut3FValue(uint64_t a1, uint64_t a2)
{
  return *(void *)re::ShaderGraphMaterial::getConstant(a1, a2);
}

void *re::ShaderGraphMaterial::colorGamut4FValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (void *)re::ShaderGraphMaterial::getConstant(a1, a2);
  uint64_t v6 = result[1];
  uint64_t v7 = *(void *)(a1 + 232);
  if (v7)
  {
    uint64_t v7 = *(void *)(v7 + 152);
    if (v7) {
      LOBYTE(v7) = *(unsigned char *)v7;
    }
  }
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v7;
  return result;
}

re::AssetHandle *re::ShaderGraphMaterial::assetHandleValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, re::AssetHandle *a3@<X8>)
{
  if (*(void *)(a1 + 80) <= (unint64_t)*(unsigned __int16 *)(a2 + 8))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = (const re::AssetHandle *)(*(void *)(a1 + 96) + 24 * *(unsigned __int16 *)(a2 + 8));
  return re::AssetHandle::AssetHandle(a3, v3);
}

BOOL re::ShaderGraphMaterial::hasParameter(re::ShaderGraphMaterial *this, const char *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    if (*a2)
    {
      char v3 = a2[1];
      if (v3)
      {
        char v4 = a2 + 2;
        do
        {
          uint64_t v2 = 31 * v2 + v3;
          int v5 = *(unsigned __int8 *)v4++;
          char v3 = v5;
        }
        while (v5);
      }
      v2 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v8 = v2;
  re::ShaderGraphMaterial::handle(this, &v8, (uint64_t)v7);
  return (v7[12] & 7) != 0;
}

uint64_t re::ShaderGraphMaterial::removeParameter(re::ShaderGraphMaterial *this, const char *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        int v5 = a2 + 2;
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *(unsigned __int8 *)v5++;
          char v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v13 = v3;
  uint64_t result = re::ShaderGraphMaterial::handle(this, &v13, (uint64_t)&v10);
  int v9 = v12 & 7;
  if ((v12 & 7) != 0)
  {
    if (v9 == 2)
    {
      uint64_t v13 = v10;
      return re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(&v13, (uint64_t *)this + 21, (uint64_t)this + 64);
    }
    else if (v9 == 1)
    {
      uint64_t v13 = v10;
      return re::removeNameMappedConstant(&v13, (uint64_t *)this + 13, (void *)this + 3, v11);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Trying to remove a paramter which exists but has an invalid type.", "!\"Unreachable code\"", "removeParameter", 237);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

re::AssetHandle *re::ShaderGraphMaterial::addTexture(uint64_t a1, uint64_t *a2, re::AssetHandle *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v6 = (_anonymous_namespace_ *)(a1 + 168);
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 168), a2);
  if (v7 == -1)
  {
    *(_DWORD *)long long buf = *(unsigned __int8 *)(a1 + 80);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v6, a2, (int *)buf);
    return re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(a1 + 64), a3);
  }
  else
  {
    uint64_t v8 = (unsigned int *)(*(void *)(a1 + 176) + 16 * v7 + 8);
    int v9 = *re::graphicsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *a2;
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned __int16 v11 = 0;
      }
      else if (v10)
      {
        unsigned __int16 v11 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v10);
      }
      else
      {
        unsigned __int16 v11 = "";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable texture (%s) that already exists. Overwiting with new value.", buf, 0xCu);
    }
    unint64_t v13 = *v8;
    if (*(void *)(a1 + 80) <= v13)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return (re::AssetHandle *)re::AssetHandle::operator=(*(void *)(a1 + 96) + 24 * v13, (uint64_t *)a3);
  }
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(_anonymous_namespace_ *a1, void *a2, int *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 != -1) {
    return *((void *)a1 + 1) + 16 * v6 + 8;
  }
  return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
}

uint64_t re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, a1);
  if (result != -1)
  {
    uint64_t v7 = a2[1] + 16 * result;
    re::DynamicArray<re::AssetHandle>::removeStableAt(a3, *(unsigned int *)(v7 + 8));
    unsigned int v8 = *(_DWORD *)(v7 + 8);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::mapValues<void re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(re::WeakStringID,re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &,re::DynamicArray<re::AssetHandle> &)::{lambda(re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &)#1}>(a2, &v8);
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(a2, a1);
  }
  return result;
}

double re::ShaderGraphMaterial::setConstant@<D0>(void *a1@<X0>, uint64_t *a2@<X1>, size_t a3@<X2>, void *a4@<X3>, uint8_t a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v19 = *a2;
  re::ShaderGraphMaterial::handle(a1, &v19, a6);
  uint64_t v19 = 0;
  if ((*(unsigned char *)(a6 + 12) & 7) != 0)
  {
    re::ShaderGraphMaterial::setConstant(v13, (int)a1, a6, a3, a4);
  }
  else
  {
    uint64_t v18 = *a2;
    re::ShaderGraphMaterial::addConstant(a1, &v18, a3, a4, a5);
    uint64_t v18 = 0;
    uint64_t v14 = *a2;
    re::ShaderGraphMaterial::handle(a1, &v14, (uint64_t)&v15);
    *(void *)a6 = v15;
    double result = *(double *)&v16;
    *(_OWORD *)(a6 + 8) = v16;
    *(unsigned char *)(a6 + 24) = v17;
  }
  return result;
}

void *re::ShaderGraphMaterial::addConstant(void *a1, uint64_t *a2, size_t a3, const void *a4, uint8_t a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v10 = (_anonymous_namespace_ *)(a1 + 13);
  uint64_t v11 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 13, a2);
  if (v11 == -1)
  {
    uint64_t v15 = a1[5] + 3;
    *(_WORD *)long long buf = v15 & 0xFFFC;
    buf[2] = a3;
    buf[3] = a5;
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(v10, a2, (int *)buf);
    unint64_t v12 = (unsigned __int16)v15 & 0xFFFC;
    re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 3), v12 + a3);
    if (a1[5] > v12) {
      return memcpy((void *)(a1[7] + v12), a4, a3);
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)long long buf = 0u;
    a3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  else
  {
    uint64_t v10 = (_anonymous_namespace_ *)(a1[14] + 16 * v11 + 8);
    unint64_t v12 = *re::graphicsLogObjects((re *)v11);
    if (!os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    uint64_t v13 = *a2;
    if (*a2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v13)
      {
        uint64_t v14 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v13);
      }
      else
      {
        uint64_t v14 = "";
      }
      goto LABEL_10;
    }
  }
  uint64_t v14 = 0;
LABEL_10:
  *(_DWORD *)long long buf = 136315138;
  *(void *)&uint8_t buf[4] = v14;
  _os_log_impl(&dword_233120000, (os_log_t)v12, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable constant (%s) that already exists. Overwiting with new values.", buf, 0xCu);
LABEL_11:
  unint64_t v12 = *(unsigned __int16 *)v10;
  if (a1[5] <= v12)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return memcpy((void *)(a1[7] + v12), a4, a3);
}

__n128 re::ShaderGraphMaterial::setConstant@<Q0>(uint64_t *__return_ptr a1@<X8>, size_t __n@<X2>, void *__s2@<X3>, void *a4@<X0>, uint64_t a5@<X1>, uint8_t a6@<W4>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a5 + 12) & 8) != 0)
  {
    unint64_t v12 = (__n128 *)(a5 + 8);
    unint64_t v11 = *(unsigned __int16 *)(a5 + 8);
    unint64_t v13 = a4[5];
    if (v13 <= v11)
    {
      v15[1] = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v16 = 136315906;
      char v17 = "operator[]";
      __int16 v18 = 1024;
      int v19 = 789;
      __int16 v20 = 2048;
      unint64_t v21 = v11;
      __int16 v22 = 2048;
      unint64_t v23 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v14 = (void *)(a4[7] + v11);
    if (memcmp(v14, __s2, __n)) {
      memcpy(v14, __s2, __n);
    }
    *a1 = *(void *)a5;
    __n128 result = *v12;
    *(__n128 *)(a1 + 1) = *v12;
    *((unsigned char *)a1 + 24) = *(unsigned char *)(a5 + 24);
  }
  else
  {
    v15[0] = *(void *)a5;
    result.n128_f64[0] = re::ShaderGraphMaterial::setConstant(a4, v15, __n, __s2, a6, (uint64_t)a1);
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(_anonymous_namespace_ *a1, void *a2, int *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 != -1) {
    return *((void *)a1 + 1) + 16 * v6 + 8;
  }
  return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(a1, a2, a3);
}

uint64_t re::DrawingManager::addRenderFrameDeltaForNextFrame<re::MaterialParameterTableDelta,re::MaterialParameterTable>(uint64_t a1, uint64_t *a2)
{
  char v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = re::PerFrameAllocatorManager::perFrameAllocator(v4[6], *(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 48) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 40) << 60));
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 568, 8);
  bzero((void *)(v6 + 8), 0x230uLL);
  *(void *)uint64_t v6 = &unk_26E6E2CE0;
  objc_initWeak((id *)(v6 + 8), 0);
  *(void *)uint64_t v6 = &unk_26E70DC60;
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 40) = 0;
  *(void *)(v6 + 528) = 0;
  *(unsigned char *)(v6 + 536) = 0;
  *(unsigned char *)(v6 + 548) = 0;
  *(unsigned char *)(v6 + 564) = 0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_DWORD *)(v6 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_DWORD *)(v6 + 160) = 0;
  *(_DWORD *)(v6 + 200) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_DWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_DWORD *)(v6 + 280) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_DWORD *)(v6 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_DWORD *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_DWORD *)(v6 + 400) = 0;
  *(_DWORD *)(v6 + 440) = 0;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_DWORD *)(v6 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  uint64_t v7 = *a2;
  off_26E70DC68(v6, v5);
  if (v7) {
    unsigned int v8 = (void *)(v7 + 8);
  }
  else {
    unsigned int v8 = 0;
  }
  objc_storeWeak((id *)(v6 + 8), v8);
  if (!*(void *)(a1 + 624))
  {
    *(void *)(a1 + 624) = v5;
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((void *)(a1 + 624), 0);
    *(_DWORD *)(a1 + 640) += 2;
  }
  uint64_t v10 = v6;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(a1 + 624, &v10);
  return v6;
}

double re::ShaderGraphMaterial::setBool@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        uint64_t v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(this, &v10, 1uLL, &v9, 2u, a4);
}

double re::ShaderGraphMaterial::setFloat@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, float a3@<S0>, uint64_t a4@<X8>)
{
  float v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        uint64_t v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(this, &v10, 4uLL, &v9, 1u, a4);
}

double re::ShaderGraphMaterial::setInt@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        uint64_t v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(this, &v10, 4uLL, &v9, 3u, a4);
}

double re::ShaderGraphMaterial::setUint@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        uint64_t v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(this, &v10, 4uLL, &v9, 7u, a4);
}

double re::ShaderGraphMaterial::setVector2F@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        uint64_t v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 8uLL, &v9, 0x20u, a4);
}

double re::ShaderGraphMaterial::setInt2@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        uint64_t v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 8uLL, &v9, 4u, a3);
}

double re::ShaderGraphMaterial::setUint2@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        uint64_t v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 8uLL, &v9, 8u, a3);
}

double re::ShaderGraphMaterial::setVector3F@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        int v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = v5;
  return re::ShaderGraphMaterial::setConstant(a1, &v11, 0x10uLL, v10, 0x21u, a5);
}

double re::ShaderGraphMaterial::setColorGamut3F@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v19[0] = a3;
  v19[1] = a4;
  uint64_t v8 = a1[29];
  if (v8 && (double v9 = *(unsigned __int8 **)(v8 + 152)) != 0) {
    unsigned int v10 = *v9;
  }
  else {
    unsigned int v10 = 0;
  }
  *(void *)&long long v11 = re::ColorGamut3F::as(v19, v10, 1);
  DWORD2(v11) = v12;
  long long v18 = v11;
  if (a2)
  {
    uint64_t v13 = *a2;
    if (*a2)
    {
      char v14 = a2[1];
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v13 = 31 * v13 + v14;
          int v16 = *v15++;
          char v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v13;
  return re::ShaderGraphMaterial::setConstant(a1, &v20, 0x10uLL, &v18, 0x14u, a5);
}

double re::ShaderGraphMaterial::setColorGamut3F@<D0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v16[0] = a3;
  v16[1] = a4;
  uint64_t v8 = a1[29];
  if (v8 && (double v9 = *(unsigned __int8 **)(v8 + 152)) != 0) {
    unsigned int v10 = *v9;
  }
  else {
    unsigned int v10 = 0;
  }
  *(void *)&long long v11 = re::ColorGamut3F::as(v16, v10, 1);
  DWORD2(v11) = v12;
  long long v15 = v11;
  uint64_t v14 = *a2;
  return re::ShaderGraphMaterial::setConstant(a1, &v14, 0x10uLL, &v15, 0x14u, a5);
}

double re::ShaderGraphMaterial::setInt3@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 0x10uLL, &v9, 5u, a3);
}

double re::ShaderGraphMaterial::setUint3@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 0x10uLL, &v9, 9u, a3);
}

double re::ShaderGraphMaterial::setVector4F@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        int v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = v5;
  return re::ShaderGraphMaterial::setConstant(a1, &v11, 0x10uLL, v10, 0x22u, a5);
}

double re::ShaderGraphMaterial::setColorGamut4F@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1[29];
  if (v7 && (int v8 = *(unsigned __int8 **)(v7 + 152)) != 0) {
    unsigned int v9 = *v8;
  }
  else {
    unsigned int v9 = 0;
  }
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)v15);
  long long v16 = *(_OWORD *)v15;
  if (a2)
  {
    uint64_t v10 = *a2;
    if (*a2)
    {
      char v11 = a2[1];
      if (v11)
      {
        int v12 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v10 = 31 * v10 + v11;
          int v13 = *v12++;
          char v11 = v13;
        }
        while (v13);
      }
      v10 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v15[0] = v10;
  return re::ShaderGraphMaterial::setConstant(a1, v15, 0x10uLL, &v16, 0x15u, a4);
}

double re::ShaderGraphMaterial::setColorGamut4F@<D0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1[29];
  if (v7 && (int v8 = *(unsigned __int8 **)(v7 + 152)) != 0) {
    unsigned int v9 = *v8;
  }
  else {
    unsigned int v9 = 0;
  }
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)&v12);
  long long v13 = v12;
  uint64_t v11 = *a2;
  return re::ShaderGraphMaterial::setConstant(a1, &v11, 0x10uLL, &v13, 0x15u, a4);
}

double re::ShaderGraphMaterial::setInt4@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 0x10uLL, &v9, 6u, a3);
}

double re::ShaderGraphMaterial::setUint4@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 0x10uLL, &v9, 0xAu, a3);
}

double re::ShaderGraphMaterial::setMatrix2x2F@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        int v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = v5;
  return re::ShaderGraphMaterial::setConstant(a1, &v11, 0x10uLL, v10, 0x30u, a5);
}

double re::ShaderGraphMaterial::setMatrix3x3F@<D0>(void *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v9 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v9, 0x30uLL, a3, 0x31u, a4);
}

double re::ShaderGraphMaterial::setMatrix4x4F@<D0>(void *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v9 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v9, 0x40uLL, a3, 0x32u, a4);
}

double re::ShaderGraphMaterial::setAssetHandle@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, const re::AssetHandle *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v9 = v4;
  return re::ShaderGraphMaterial::setAssetHandle(this, &v9, (uint64_t *)a3, a4);
}

double re::ShaderGraphMaterial::setAssetHandle@<D0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *a2;
  re::ShaderGraphMaterial::handle(a1, &v15, a4);
  uint64_t v15 = 0;
  if ((*(unsigned char *)(a4 + 12) & 7) != 0)
  {
    *(void *)&double result = re::ShaderGraphMaterial::setAssetHandle((uint64_t)a1, a4, a3, (uint64_t)v9).n128_u64[0];
  }
  else
  {
    uint64_t v14 = *a2;
    re::ShaderGraphMaterial::addTexture((uint64_t)a1, &v14, (re::AssetHandle *)a3);
    uint64_t v14 = 0;
    uint64_t v10 = *a2;
    re::ShaderGraphMaterial::handle(a1, &v10, (uint64_t)&v11);
    *(void *)a4 = v11;
    double result = *(double *)&v12;
    *(_OWORD *)(a4 + 8) = v12;
    *(unsigned char *)(a4 + 24) = v13;
  }
  return result;
}

__n128 re::ShaderGraphMaterial::setAssetHandle@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 12) & 8) != 0)
  {
    int v8 = (__n128 *)(a2 + 8);
    unint64_t v7 = *(unsigned __int16 *)(a2 + 8);
    unint64_t v9 = *(void *)(a1 + 80);
    if (v9 <= v7)
    {
      v11[1] = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      char v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 789;
      __int16 v16 = 2048;
      unint64_t v17 = v7;
      __int16 v18 = 2048;
      unint64_t v19 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v10 = *(void *)(a1 + 96);
    if (*(void *)(v10 + 24 * *(unsigned __int16 *)(a2 + 8) + 8) != a3[1]) {
      re::AssetHandle::operator=(v10 + 24 * *(unsigned __int16 *)(a2 + 8), a3);
    }
    *(void *)a4 = *(void *)a2;
    __n128 result = *v8;
    *(__n128 *)(a4 + 8) = *v8;
    *(unsigned char *)(a4 + 24) = *(unsigned char *)(a2 + 24);
  }
  else
  {
    v11[0] = *(void *)a2;
    re::ShaderGraphMaterial::setAssetHandle(a1, v11);
  }
  return result;
}

void re::ShaderGraphMaterial::~ShaderGraphMaterial(re::ShaderGraphMaterial *this)
{
  re::ShaderGraphMaterial::~ShaderGraphMaterial(this);
  JUMPOUT(0x237DBCBD0);
}

{
  char *v2;
  uint64_t v3;

  *(void *)this = &unk_26E705410;
  uint64_t v2 = (char *)this + 24;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 64);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 104);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 168);
  uint64_t v3 = *((void *)this + 32);
  if (v3)
  {

    *((void *)this + 32) = 0;
  }
  *((void *)this + 3re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0xFFFFFFFFFFFFFFFLL;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 168);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 64);
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, int *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  int v17 = *a3;
  uint64_t v18 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v18 = *a2;
  *(_DWORD *)(v18 + 8) = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateHashes((uint64_t)a1, *((void *)a1 + 1) + 16 * v16);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

double re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = v3 ^ *(void *)(result + 40);
  unint64_t v5 = 0xBF58476D1CE4E5B9
     * ((*(unsigned __int16 *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 11) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 10) << 16)) ^ ((unint64_t)*(unsigned __int8 *)(a2 + 11) >> 6));
  unint64_t v6 = *(void *)(result + 48) ^ v3 ^ ((v3 << 6)
                                      + (v3 >> 2)
                                      - 0x61C8864680B583E9
                                      + ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v5 ^ (v5 >> 27))) >> 31)));
  *(void *)(result + 40) = v4;
  *(void *)(result + 48) = v6;
  return result;
}

void *re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    __n128 result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    void *v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      __n128 result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    unint64_t v9 = v3[2];
    if (v9)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v9; ++i)
      {
        uint64_t v12 = v3[1] + v10;
        *(void *)uint64_t v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        unint64_t v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    *__n128 result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

double re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::init(v22, v4, a2);
  v20[0] = a1;
  unint64_t v6 = a1[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a1;
    unint64_t v9 = v6 >> 4;
    __n128 v10 = (__n128)xmmword_2343680E0;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    uint64_t v21 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(v22, *(void *)(v20[0] + 8) + 16 * v12, *(void *)(v20[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        uint64_t v12 = v21;
      }
      while (v21 != -1);
      unint64_t v6 = a1[2];
    }
  }
LABEL_9:
  uint64_t v13 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = a1[7];
  long long v14 = v22[0];
  long long v15 = v22[1];
  v22[0] = *(_OWORD *)a1;
  *(void *)&v22[1] = v6;
  long long v16 = v22[2];
  long long v17 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v22[3];
  a1[7] = v13;
  *(_OWORD *)((char *)&v22[2] + 8) = v17;
  long long v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v14;
  *((_OWORD *)a1 + 1) = v15;
  *((_OWORD *)a1 + 2) = v16;
  *(_OWORD *)((char *)&v22[1] + 8) = v18;
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v22);
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, _DWORD *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = v9 % v10;
  while (1)
  {
    unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40) {
      break;
    }
    if (v12 + 1 == v10) {
      unint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v14 = v11 + 16 * v12;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v12;
  LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v17 = *a2;
  *(_DWORD *)(v17 + 8) = v14;
  uint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v18;
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateHashes((uint64_t)a1, *((void *)a1 + 1) + 16 * v16);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

void *re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  __n128 result = re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(a1);
  v14[0] = a2;
  unint64_t v5 = a2[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        return result;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    for (i = v10; i != -1; uint64_t v10 = i)
    {
      uint64_t v11 = *(void *)(v14[0] + 8) + 16 * v10;
      uint64_t v12 = *(void *)v11;
      int v13 = *(_DWORD *)(v11 + 8);
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(a1, &v12, &v13);
      __n128 result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

void *re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  __n128 result = re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(a1);
  v14[0] = a2;
  unint64_t v5 = a2[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        return result;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    for (i = v10; i != -1; uint64_t v10 = i)
    {
      uint64_t v11 = *(void *)(v14[0] + 8) + 16 * v10;
      uint64_t v12 = *(void *)v11;
      int v13 = *(_DWORD *)(v11 + 8);
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(a1, &v12, &v13);
      __n128 result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, _DWORD *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = v9 % v10;
  while (1)
  {
    unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40) {
      break;
    }
    if (v12 + 1 == v10) {
      unint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v14 = v11 + 16 * v12;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v12;
  LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v17 = *a2;
  *(_DWORD *)(v17 + 8) = v14;
  uint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v18;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, v17);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

double re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::doResize(a1, v3);
}

double re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  unint64_t v6 = a1[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a1;
    unint64_t v9 = v6 >> 4;
    __n128 v10 = (__n128)xmmword_2343680E0;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    uint64_t v21 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(v22, *(void *)(v20[0] + 8) + 16 * v12, *(void *)(v20[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        uint64_t v12 = v21;
      }
      while (v21 != -1);
      unint64_t v6 = a1[2];
    }
  }
LABEL_9:
  uint64_t v13 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = a1[7];
  long long v14 = v22[0];
  long long v15 = v22[1];
  v22[0] = *(_OWORD *)a1;
  *(void *)&v22[1] = v6;
  long long v16 = v22[2];
  long long v17 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v22[3];
  a1[7] = v13;
  *(_OWORD *)((char *)&v22[2] + 8) = v17;
  long long v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v14;
  *((_OWORD *)a1 + 1) = v15;
  *((_OWORD *)a1 + 2) = v16;
  *(_OWORD *)((char *)&v22[1] + 8) = v18;
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v22);
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, int *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  int v17 = *a3;
  uint64_t v18 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v18 = *a2;
  *(_DWORD *)(v18 + 8) = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, v18);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

uint64_t *re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::mapValues<void re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(re::WeakStringID,re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &,re::DynamicArray<re::AssetHandle> &)::{lambda(re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &)#1}>(uint64_t *result, unsigned int *a2)
{
  v12[0] = result;
  unint64_t v2 = result[2];
  if (v2 >= 0x10)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    unint64_t v7 = v2 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v12[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        return result;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash(v4, *(void *)(v4 + 8) + 16 * v9);
      uint64_t v10 = *(void *)(v4 + 8) + 16 * i;
      unsigned int v11 = *(_DWORD *)(v10 + 8);
      if (v11 >= *a2) {
        *(_DWORD *)(v10 + 8) = v11 - 1;
      }
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash(v4, v10);
      __n128 result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v12);
    }
  }
  return result;
}

BOOL re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, a1[1] + 16 * v3);
    unint64_t v9 = a1[2];
    *(void *)(a1[1] + 16 * v4) = 0;
    uint64_t v10 = a1[4];
    if (v7) {
      ++v10;
    }
    unint64_t v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v10;
    if (v9 >= 0x11 && v11 < v9 >> 2) {
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::resize(a1, 0);
    }
  }
  return v4 != -1;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(a2 + 8) ^ ((unint64_t)*(unsigned int *)(a2 + 8) >> 30));
  *(void *)(result + 48) ^= v3 ^ ((v3 << 6)
                                  + (v3 >> 2)
                                  + ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v4 ^ (v4 >> 27))) >> 31))
                                  - 0x61C8864680B583E9);
  return result;
}

double re::MaterialParameterTable::MaterialParameterTable(re::MaterialParameterTable *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E705458;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = &unk_26E6D3970;
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 98) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 50) = 0;
  *((_DWORD *)this + 88) = 0;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_DWORD *)this + 106) = 1;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
  *((void *)this + 60) = 0;
  *((_DWORD *)this + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 67) = 0;
  *((_DWORD *)this + 136) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((void *)this + 98) = 0;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 4re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((void *)this + 85) = &unk_26E6D78A0;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 868) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_DWORD *)this + 266) = 0;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 9re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(void *)((char *)this + 1068) = 0x7FFFFFFFLL;
  *((unsigned char *)this + 1080) = 0;
  *((unsigned char *)this + 1092) = 0;
  *((_WORD *)this + 560) = 0;
  *((unsigned char *)this + 11re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
  return result;
}

void re::MaterialParameterTable::~MaterialParameterTable(re::MaterialParameterTable *this)
{
  re::MaterialParameterTable::~MaterialParameterTable(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::ShaderParameterTable *v2;

  *(void *)this = &unk_26E705458;
  unint64_t v2 = (re::MaterialParameterTable *)((char *)this + 24);
  re::ShaderParameterTable::deinit((re::MaterialParameterTable *)((char *)this + 24));
  re::TextureParameterTable::deinit((re::MaterialParameterTable *)((char *)this + 552));
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 129);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 129);
  re::TextureParameterTable::~TextureParameterTable((re::MaterialParameterTable *)((char *)this + 552));
  re::ShaderParameterTable::~ShaderParameterTable(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

void re::make::shared::object<re::MaterialParameterTable>(re *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = re::globalAllocators(a1);
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 1128, 8);
  bzero(v4, 0x468uLL);
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)v4);
  *a2 = v4;
}

void *re::allocInfo_AudioSceneService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_304, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_304))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D358, "AudioSceneService");
    __cxa_guard_release(&_MergedGlobals_304);
  }
  return &unk_26AF8D358;
}

void re::initInfo_AudioSceneService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x75B63B8F740DDEBELL;
  v5[1] = "AudioSceneService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::initInfo_AudioSceneService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_AudioSceneService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSceneService", (uint64_t (*)(re::internal *))re::allocInfo_AudioSceneService, (re::IntrospectionBase *(*)(void))re::initInfo_AudioSceneService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioSceneService>, this);
}

void *re::ecs2::allocInfo_AudioGeneratorComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_305, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_305))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D3F8, "AudioGeneratorComponent");
    __cxa_guard_release(&_MergedGlobals_305);
  }
  return &unk_26AF8D3F8;
}

void re::ecs2::initInfo_AudioGeneratorComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x9619D97E206E8B80;
  v12[1] = "AudioGeneratorComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D3D8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8D3D8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8D3E8 = v7;
      char v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_AudioSourceSyncState((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "syncState";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2800000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8D3F0 = v10;
      __cxa_guard_release(&qword_26AF8D3D8);
    }
  }
  *((void *)this + 2) = 0x48000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8D3E8;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioGeneratorComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioGeneratorComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::AudioGeneratorComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioGeneratorComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

re::ecs2::AudioGeneratorComponent *re::internal::defaultConstruct<re::ecs2::AudioGeneratorComponent>(int a1, int a2, re::ecs2::AudioGeneratorComponent *this)
{
  return re::ecs2::AudioGeneratorComponent::AudioGeneratorComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioGeneratorComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioGeneratorComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioGeneratorComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioGeneratorComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioGeneratorComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioGeneratorComponent>, this);
}

void *re::ecs2::allocInfo_AudioGeneratorSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D3E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D3E0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D470, "AudioGeneratorSystem");
    __cxa_guard_release(&qword_26AF8D3E0);
  }
  return &unk_26AF8D470;
}

void re::ecs2::initInfo_AudioGeneratorSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x7ACD467487E77098;
  v5[1] = "AudioGeneratorSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AudioGeneratorSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioGeneratorSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioGeneratorSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioGeneratorSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioGeneratorSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::AudioGeneratorSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioGeneratorSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::AudioGeneratorSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1);
  void *v3 = &unk_26E7054F8;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::AudioGeneratorSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AudioGeneratorSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1);
  *unint64_t v1 = &unk_26E7054F8;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::AudioGeneratorSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AudioGeneratorSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioGeneratorSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioGeneratorSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioGeneratorSystem>, this);
}

re::ecs2::AudioGeneratorComponent *re::ecs2::AudioGeneratorComponent::AudioGeneratorComponent(re::ecs2::AudioGeneratorComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E7054A0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  uint64_t v3 = v2 + 40;
  *(void *)(v2 + 72) = 9;
  *(_DWORD *)(v2 + 80) = 1065353216;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 104) = 0;
  *(void *)(v2 + 108) = 1065353216;
  *(unsigned char *)(v2 + 116) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v2 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = _D0;
  *(_DWORD *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 144) = 1065353216;
  *(unsigned char *)(v2 + 152) = 0;
  *(unsigned char *)(v2 + 192) = 0;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  uint64_t v9 = (void *)(v2 + 200);
  uint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v9, 0);
  *((_DWORD *)this + 58) = 1;
  *(void *)((char *)this + 236) = 0x3E051EB800000000;
  *((_DWORD *)this + 61) = 1106247680;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  v3 += 224;
  re::DynamicString::setCapacity((void *)v3, 0);
  *((_WORD *)this + 148) = 0;
  long long v11 = re::AudioSourceState::AudioSourceState((re::ecs2::AudioGeneratorComponent *)((char *)this + 304));
  *((_OWORD *)this + 70) = xmmword_2343A3A50;
  *((_DWORD *)this + 284) = 0;
  uint64_t v12 = re::globalAllocators(v11);
  long long v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 8, 4);
  *long long v13 = 0;
  *((void *)this + 4) = v13;
  return this;
}

void re::ecs2::AudioGeneratorComponent::~AudioGeneratorComponent(re::ecs2::AudioGeneratorComponent *this)
{
  *(void *)this = &unk_26E7054A0;
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3[2] + 40))(v3[2], v2);
  }
  re::AudioSourceState::~AudioSourceState((re::ecs2::AudioGeneratorComponent *)((char *)this + 304));
  re::DynamicString::deinit((re::ecs2::AudioGeneratorComponent *)((char *)this + 264));
  re::DynamicString::deinit((re::ecs2::AudioGeneratorComponent *)((char *)this + 200));
  if (*((unsigned char *)this + 152)) {
    re::DynamicString::deinit((re::ecs2::AudioGeneratorComponent *)((char *)this + 160));
  }
  re::AssetHandle::~AssetHandle((re::ecs2::AudioGeneratorComponent *)((char *)this + 48));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::AudioGeneratorComponent::~AudioGeneratorComponent(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AudioGeneratorSystem::willAddSystemToECSService(re::ecs2::AudioGeneratorSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = result;
  return result;
}

uint64_t re::ecs2::AudioGeneratorSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  return this;
}

void *re::ecs2::AudioGeneratorSystem::update(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t result = (void *)result[13];
    if (result)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
      if (result)
      {
        long long v4 = result;
        uint64_t v5 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v27);
        uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v5);
        if (isStatisticCollectionEnabled)
        {
          uint64_t v7 = re::profilerThreadContext(isStatisticCollectionEnabled);
          uint64_t v8 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          unint64_t v9 = v8 ? *(void *)(v8 + 24) : 0;
          uint64_t v10 = *(int64x2_t **)(v7 + 152);
          if (v10)
          {
            unint64_t v11 = v10[568].u64[0];
            if (v11 >= v9) {
              unint64_t v11 = v9;
            }
            v10[568].i64[0] = v11;
            unint64_t v12 = v10[568].u64[1];
            if (v12 <= v9) {
              unint64_t v12 = v9;
            }
            v10[568].i64[1] = v12;
            int64x2_t v13 = vdupq_n_s64(1uLL);
            v13.i64[0] = v9;
            v10[569] = vaddq_s64(v10[569], v13);
            *(unsigned char *)(v7 + 184) = 0;
          }
        }
        uint64_t v14 = (re::ecs2::SceneComponentTable *)(a2 + 200);
        re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26, 3061, v2);
        unint64_t v15 = *(void *)(*(void *)(a2 + 104) + 272);
        uint64_t v16 = re::ecs2::SceneComponentTable::get(v14, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v17 = *(void *)(v16 + 24);
        if (v17)
        {
          unint64_t v18 = v15 >> 1;
          uint64_t v19 = *(uint64_t **)(v16 + 40);
          uint64_t v20 = 8 * v17;
          do
          {
            uint64_t v21 = *v19++;
            re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v21 + 16), (const re::ecs2::Entity *)1, v25);
            long long v22 = v25[1];
            long long v23 = v25[2];
            long long v24 = v25[3];
            *(_OWORD *)(v21 + 624) = v25[0];
            *(_OWORD *)(v21 + 640) = v22;
            *(_OWORD *)(v21 + 656) = v23;
            *(_OWORD *)(v21 + 672) = v24;
            *(void *)(v21 + 752) = v18;
            (*(void (**)(void *, uint64_t))(*v4 + 280))(v4, v21 + 304);
            v20 -= 8;
          }
          while (v20);
        }
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26);
        return (void *)re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v27);
      }
    }
  }
  return result;
}

void re::ecs2::AudioGeneratorSystem::~AudioGeneratorSystem(re::ecs2::AudioGeneratorSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AudioGeneratorSystem::typeInfo(re::ecs2::AudioGeneratorSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioGeneratorSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioGeneratorSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioGeneratorSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::AudioGeneratorSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioGeneratorSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::ecs2::PinComponent::pinByName@<X0>(re::ecs2::PinComponent *this@<X0>, const re::StringID *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t result = re::ecs2::PinComponent::indexOfPin((BOOL)v15, this, a2);
  if (v15[0])
  {
    unint64_t v6 = v16;
    unint64_t v7 = *((void *)this + 6);
    if (v7 <= v16)
    {
      uint64_t v17 = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v18 = 136315906;
      uint64_t v19 = "operator[]";
      __int16 v20 = 1024;
      int v21 = 797;
      __int16 v22 = 2048;
      unint64_t v23 = v6;
      __int16 v24 = 2048;
      unint64_t v25 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *((void *)this + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 16) = &unk_26E703090;
    uint64_t v9 = v8 + 208 * v6;
    re::StringID::StringID((re::StringID *)(a3 + 24), (const StringID *)(v9 + 8));
    long long v10 = *(_OWORD *)(v9 + 32);
    long long v11 = *(_OWORD *)(v9 + 48);
    long long v12 = *(_OWORD *)(v9 + 80);
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(a3 + 96) = v12;
    *(_OWORD *)(a3 + 48) = v10;
    *(_OWORD *)(a3 + 64) = v11;
    uint64_t result = re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(a3 + 112, (uint64_t *)(v9 + 96));
    long long v13 = *(_OWORD *)(v9 + 160);
    *(_OWORD *)(a3 + 160) = *(_OWORD *)(v9 + 144);
    *(_OWORD *)(a3 + 176) = v13;
    int v14 = *(unsigned __int8 *)(v9 + 176);
    *(unsigned char *)(a3 + 192) = v14;
    if (v14)
    {
      return (uint64_t)re::StringID::StringID((re::StringID *)(a3 + 200), (const StringID *)(v8 + 208 * v6 + 184));
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

BOOL re::ecs2::PinComponent::indexOfPin(BOOL this, const re::StringID *a2, void *a3)
{
  uint64_t v4 = this;
  if ((*a3 > 1uLL || (v5 = (unsigned char *)a3[1]) == 0 || *v5) && (uint64_t v6 = *((void *)a2 + 6)) != 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)(*((void *)a2 + 8) + 8);
    while (1)
    {
      this = re::StringID::operator==(v8, a3);
      if (this) {
        break;
      }
      ++v7;
      v8 += 26;
      if (v6 == v7) {
        goto LABEL_8;
      }
    }
    *(unsigned char *)uint64_t v4 = 1;
    *(void *)(v4 + 8) = v7;
  }
  else
  {
LABEL_8:
    *(unsigned char *)uint64_t v4 = 0;
  }
  return this;
}

unsigned char *re::ecs2::PinComponent::addPin(re::ecs2::PinComponent *this, const re::ecs2::Pin *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t *)((char *)a2 + 8);
  re::ecs2::PinComponent::indexOfPin((BOOL)v21, this, (void *)a2 + 1);
  if (v21[0])
  {
    unint64_t v5 = v22;
    unint64_t v6 = *((void *)this + 6);
    if (v6 <= v22)
    {
      uint64_t v23 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      unint64_t v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      unint64_t v29 = v5;
      __int16 v30 = 2048;
      unint64_t v31 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v7 = *((void *)this + 8) + 208 * v22;
    re::StringID::operator=((unint64_t *)(v7 + 8), v4);
    long long v8 = *((_OWORD *)a2 + 2);
    long long v9 = *((_OWORD *)a2 + 3);
    long long v10 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v7 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v7 + 80) = v10;
    *(_OWORD *)(v7 + 32) = v8;
    *(_OWORD *)(v7 + 48) = v9;
    re::DynamicArray<re::ecs2::PinAlignment>::operator=(v7 + 96, (uint64_t *)a2 + 12);
    long long v11 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v7 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v7 + 160) = v11;
    return re::Optional<re::StringID>::operator=((unsigned char *)(v7 + 176), (uint64_t *)a2 + 22);
  }
  else
  {
    unint64_t v13 = *((void *)this + 6);
    if (v13 >= *((void *)this + 5))
    {
      re::DynamicArray<re::ecs2::Pin>::growCapacity((void *)this + 4, v13 + 1);
      unint64_t v13 = *((void *)this + 6);
    }
    uint64_t v14 = *((void *)this + 8);
    uint64_t v15 = v14 + 208 * v13;
    *(void *)uint64_t v15 = &unk_26E703090;
    re::StringID::StringID((re::StringID *)(v15 + 8), (const StringID *)v4);
    long long v16 = *((_OWORD *)a2 + 2);
    long long v17 = *((_OWORD *)a2 + 3);
    long long v18 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v15 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v15 + 80) = v18;
    *(_OWORD *)(v15 + 32) = v16;
    *(_OWORD *)(v15 + 48) = v17;
    uint64_t result = (unsigned char *)re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(v15 + 96, (uint64_t *)a2 + 12);
    long long v19 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v15 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v15 + 160) = v19;
    int v20 = *((unsigned __int8 *)a2 + 176);
    *(unsigned char *)(v15 + 176) = v20;
    if (v20) {
      uint64_t result = re::StringID::StringID((re::StringID *)(v14 + 208 * v13 + 184), (const StringID *)((char *)a2 + 184));
    }
    ++*((void *)this + 6);
    ++*((_DWORD *)this + 14);
  }
  return result;
}

uint64_t re::ecs2::PinComponent::removePin(uint64_t this, const re::StringID *a2)
{
  uint64_t v2 = this;
  unint64_t v3 = *(void *)(this + 48);
  if (v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(v2 + 64);
      long long v8 = (uint64_t *)(v7 + 208 * v6 + 8);
      this = re::StringID::operator==(v8, a2);
      if (this) {
        break;
      }
LABEL_8:
      if (v6 != v5)
      {
        uint64_t v10 = v7 + 208 * v5;
        re::StringID::operator=((unint64_t *)(v10 + 8), v8);
        uint64_t v11 = v7 + 208 * v6;
        long long v12 = *(_OWORD *)(v11 + 32);
        long long v13 = *(_OWORD *)(v11 + 48);
        long long v14 = *(_OWORD *)(v11 + 80);
        *(_OWORD *)(v10 + 64) = *(_OWORD *)(v11 + 64);
        *(_OWORD *)(v10 + 80) = v14;
        *(_OWORD *)(v10 + 32) = v12;
        *(_OWORD *)(v10 + 48) = v13;
        re::DynamicArray<re::ecs2::PinAlignment>::operator=(v10 + 96, (uint64_t *)(v11 + 96));
        long long v15 = *(_OWORD *)(v11 + 160);
        *(_OWORD *)(v10 + 144) = *(_OWORD *)(v11 + 144);
        *(_OWORD *)(v10 + 160) = v15;
        this = (uint64_t)re::Optional<re::StringID>::operator=((unsigned char *)(v10 + 176), (uint64_t *)(v11 + 176));
        unint64_t v3 = *(void *)(v2 + 48);
      }
      ++v6;
      ++v5;
      if (v6 >= v3) {
        goto LABEL_11;
      }
    }
    long long v9 = (void *)(v7 + 208 * v6 + 216);
    while (++v6 < v3)
    {
      this = re::StringID::operator==(v9, a2);
      v9 += 26;
      if (!this)
      {
        long long v8 = v9 - 26;
        goto LABEL_8;
      }
    }
LABEL_11:
    if (v5 != v3)
    {
      uint64_t v16 = *(void *)(v2 + 64) + 208 * v5;
      uint64_t v17 = -208 * v5 + 208 * v3;
      this = v16;
      long long v18 = (void (***)(uint64_t))v16;
      do
      {
        long long v19 = *v18;
        v18 += 26;
        (*v19)(this);
        v16 += 208;
        this = (uint64_t)v18;
        v17 -= 208;
      }
      while (v17);
      *(void *)(v2 + 48) = v5;
      ++*(_DWORD *)(v2 + 56);
    }
  }
  int v20 = *(const re::ecs2::Entity **)(v2 + 16);
  if (v20)
  {
    int v21 = v20;
    do
    {
      unint64_t v22 = v21;
      int v21 = (const re::ecs2::Entity *)*((void *)v21 + 3);
    }
    while (v21);
    uint64_t v23 = *((void *)v22 + 2);
    if (v23)
    {
      this = *(void *)(v23 + 56);
      if (this)
      {
        uint64_t v24 = (*(uint64_t (**)(uint64_t, const re::StringID *))(*(void *)this + 32))(this, a2);
        this = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v24);
        if (this)
        {
          this = (uint64_t)re::ecs2::PhysicsSimulationService::physicsSimulationForEntity((re::ecs2::PhysicsSimulationService *)this, v20);
          if (this) {
            *(unsigned char *)(this + 240) = 1;
          }
        }
      }
    }
  }
  return this;
}

void (***re::DynamicArray<re::ecs2::Pin>::clear(void (***result)(void)))(void)
{
  unint64_t v1 = result;
  uint64_t v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    unint64_t v3 = (void (***)(void))result[4];
    uint64_t v4 = 208 * (void)v2;
    uint64_t result = v3;
    uint64_t v5 = (void (***)(void))v1[4];
    do
    {
      unint64_t v6 = *v5;
      v5 += 26;
      (*v6)(result);
      v3 += 26;
      uint64_t result = v5;
      v4 -= 208;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void *re::ecs2::allocInfo_PinComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D4F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D4F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D558, "PinComponent");
    __cxa_guard_release(&qword_26AF8D4F8);
  }
  return &unk_26AF8D558;
}

void re::ecs2::initInfo_PinComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v25 = 0x3AE3A3F729C1AE10;
  v26[0] = "PinComponent";
  re::StringID::destroyString((re::StringID *)&v25);
  *((_OWORD *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D4F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8D4F0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8D508 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D500, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8D500))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8D518);
        qword_26AF8D518 = (uint64_t)&unk_26E705638;
        __cxa_guard_release(&qword_26AF8D500);
      }
      if ((_MergedGlobals_306 & 1) == 0)
      {
        uint64_t v9 = re::ecs2::introspect_Pin((re::IntrospectionBase **)1);
        if ((_MergedGlobals_306 & 1) == 0)
        {
          uint64_t v10 = v9;
          _MergedGlobals_306 = 1;
          int v11 = *(_DWORD *)(v9 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8D518, 0);
          qword_26AF8D528 = 0x2800000003;
          dword_26AF8D530 = v11;
          word_26AF8D534 = 0;
          *(void *)&xmmword_26AF8D538 = 0;
          *((void *)&xmmword_26AF8D538 + 1) = 0xFFFFFFFFLL;
          qword_26AF8D548 = v10;
          unk_26AF8D550 = 0;
          qword_26AF8D518 = (uint64_t)&unk_26E705638;
          re::IntrospectionRegistry::add(v12, v13);
          re::getPrettyTypeName((re *)&qword_26AF8D518, (const re::IntrospectionBase *)&v25);
          if (v26[0]) {
            long long v14 = (const char *)v26[1];
          }
          else {
            long long v14 = (char *)v26 + 1;
          }
          if (v25 && (v26[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v25 + 40))();
          }
          long long v22 = *(_OWORD *)(v10 + 32);
          long long v15 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v23);
          if (v15)
          {
            uint64_t v16 = *v15;
            *((void *)&v21 + 1) = v16;
          }
          else
          {
            long long v24 = v22;
            re::TypeBuilder::beginListType((uint64_t)&v25, v23, 1, 0x28uLL, 8uLL, &v24);
            re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v25, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v25, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v17);
          }
          xmmword_26AF8D538 = v21;
          re::StringID::destroyString((re::StringID *)v23);
        }
      }
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "m_pins";
      *(void *)(v18 + 16) = &qword_26AF8D518;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2000000001;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8D510 = v18;
      __cxa_guard_release(&qword_26AF8D4F0);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8D508;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::PinComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PinComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::PinComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PinComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v20;
}

void re::internal::defaultConstruct<re::ecs2::PinComponent>(int a1, int a2, ArcSharedObject *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E7055B0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::PinComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::PinComponent>(ArcSharedObject *a1)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E7055B0;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::PinComponent>(void *a1)
{
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PinComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PinComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PinComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PinComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PinComponent>, this);
}

void re::ecs2::PinComponent::~PinComponent(re::ecs2::PinComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::ecs2::PinAlignment>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::ecs2::PinAlignment>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::ecs2::PinAlignment>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

unsigned char *re::Optional<re::StringID>::operator=(unsigned char *a1, uint64_t *a2)
{
  int v3 = *a1;
  int v4 = *(unsigned __int8 *)a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    uint64_t v6 = (re::StringID *)(a1 + 8);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      re::StringID::destroyString(v6);
      *a1 = 0;
    }
    else
    {
      if (v3) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v4 == 0;
      }
      if (v8)
      {
        re::StringID::operator=((unint64_t *)v6, a2 + 1);
      }
      else
      {
        *a1 = 1;
        re::StringID::StringID(v6, (const StringID *)(a2 + 1));
      }
    }
  }
  return a1;
}

void *re::IntrospectionDynamicArray<re::ecs2::Pin>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::Pin>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::Pin>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::Pin>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::Pin>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::Pin>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::Pin>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::Pin>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::Pin>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::ecs2::Pin>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::ecs2::Pin>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::ecs2::Pin>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::Pin>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  v11[0] = &unk_26E703090;
  v11[1] = 0;
  void v11[2] = "";
  long long v12 = 0u;
  uint64_t v13 = 0;
  uint64_t v14 = 0x3F80000000000000;
  *(void *)&long long v8 = 0x7F0000007FLL;
  *((void *)&v8 + 1) = 0x7F0000007FLL;
  int32x4_t v15 = vdupq_n_s32(0x7F800000u);
  long long v16 = v8;
  uint64_t v21 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  int v20 = 0;
  long long v22 = 0u;
  uint64_t v23 = 0;
  uint64_t v24 = 0x3F80000000000000;
  char v25 = 0;
  re::DynamicArray<re::ecs2::Pin>::add(this, (uint64_t)v11);
  re::ecs2::Pin::~Pin((re::ecs2::Pin *)v11);
  uint64_t v9 = (re::IntrospectionBase *)(*((void *)this + 4) + 208 * *((void *)this + 2) - 208);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::Pin>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::Pin>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 208 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 208 * a3;
}

uint64_t re::DynamicArray<re::ecs2::Pin>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    int v3 = *(void (****)(void))(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 208 * v4;
        uint64_t v6 = *(void (****)(void))(a1 + 32);
        BOOL v7 = v6;
        do
        {
          long long v8 = *v7;
          v7 += 26;
          (*v8)(v3);
          v6 += 26;
          int v3 = v7;
          v5 -= 208;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        int v3 = *(void (****)(void))(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::ecs2::Pin>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v10 = 208 * a2;
    unint64_t v11 = a2;
    do
    {
      uint64_t result = (void *)(**(uint64_t (***)(uint64_t))(v3[4] + v10))(v3[4] + v10);
      ++v11;
      v10 += 208;
    }
    while (v11 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::ecs2::Pin>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 208 * v4 + 96;
      int32x4_t v7 = vdupq_n_s32(0x7F800000u);
      *(void *)&long long v8 = 0x7F0000007FLL;
      *((void *)&v8 + 1) = 0x7F0000007FLL;
      do
      {
        uint64_t v9 = v3[4] + v6;
        *(void *)(v9 - 96) = &unk_26E703090;
        *(void *)(v9 - 88) = 0;
        *(void *)(v9 - 80) = "";
        *(_OWORD *)(v9 - 64) = 0uLL;
        *(void *)(v9 - 48) = 0;
        *(void *)(v9 - 40) = 0x3F80000000000000;
        *(int32x4_t *)(v9 - re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = v7;
        *(_OWORD *)(v9 - 16) = v8;
        *(void *)(v9 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)uint64_t v9 = 0;
        *(_DWORD *)(v9 + 24) = 0;
        *(_OWORD *)(v9 + 48) = 0uLL;
        *(void *)(v9 + 64) = 0;
        *(void *)(v9 + 72) = 0x3F80000000000000;
        *(unsigned char *)(v9 + 80) = 0;
        v6 += 208;
        --v5;
      }
      while (v5);
    }
  }
  uint64_t v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::Pin>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::Pin>::clear((void (***)(void))a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::Pin>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::Pin>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  long long v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::Pin>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 208 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 208;
        v11 -= 208;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 208 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 208 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(re::ecs2::MeshDeformationComponent *this, const re::ecs2::MeshComponent *a2)
{
  if (a2 && (v3 = *((void *)a2 + 5)) != 0 && (unsigned int v4 = atomic_load((unsigned int *)(v3 + 704)), v4 != 2))
  {
    re::AssetHandle::loadAsync((const re::ecs2::MeshComponent *)((char *)a2 + 32));
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 1;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    unsigned int v7 = atomic_load((unsigned int *)(v6 + 704));
    if (v7 != 2)
    {
      re::AssetHandle::loadAsync((re::ecs2::MeshDeformationComponent *)((char *)this + 32));
      return 0;
    }
  }
  return result;
}

void *re::ecs2::MeshDeformationComponent::clearRuntimeMeshDeformationData(re::ecs2::MeshDeformationComponent *this)
{
  v6[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = (id *)((char *)this + 384);
  inited = (re *)objc_initWeak(&location, 0);
  memset(v6, 0, 24);
  v6[3] = re::globalAllocators(inited)[2];
  v6[4] = 0;
  re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset(v2, &location, 0, (uint64_t)v6);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v6);
  objc_destroyWeak(&location);
  id location = 0;
  uint64_t result = re::MeshDeformationRuntimeData::clear((re::ecs2::MeshDeformationComponent *)((char *)this + 232));
  *((void *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
  *((void *)this + 30) = 0;
  return result;
}

BOOL re::ecs2::MeshDeformationComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  unint64_t v8 = v22;
  unint64_t v9 = v23;
  unint64_t v22 = a4;
  unint64_t v23 = v8;
  unint64_t v24 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      int32x4_t v15 = *(re::ecs2::MeshDeformationComponent **)v14;
      uint64_t v16 = *(void *)(*(void *)(*(void *)v14 + 16) + 176);
      if (v16 && *(void *)(v16 + 40))
      {
        unint64_t v17 = v22;
        unint64_t v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v17, v18, *(void *)(a3 + 40));
      }
      else
      {
        unint64_t v19 = v22;
        unint64_t v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(void *)(a3 + 32));
        re::ecs2::MeshDeformationComponent::clearRuntimeMeshDeformationData(v15);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::MeshDeformationComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  uint64_t v8 = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(*(void *)(*(void *)(*(void *)(a1 + 8) + 104)
                                                                              + 648));
  if (v8) {
    unsigned int v95 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
  }
  else {
    unsigned int v95 = 0;
  }
  uint64_t v93 = *(void *)(*(void *)(a1 + 8) + 120);
  uint64_t v96 = *(void **)(*(void *)(a1 + 8) + 112);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v120, a5, 0);
  unint64_t v101 = a4;
  long long v102 = v120;
  if ((void)v120 != a5
    || (WORD4(v120) == 0xFFFFLL ? (BOOL v9 = (DWORD2(v120) & 0xFFFF0000) == 4294901760) : (BOOL v9 = 0), !v9))
  {
    unint64_t v10 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v95) ^ ((0xBF58476D1CE4E5B9 * v95) >> 27));
    uint64_t v89 = a5;
    uint64_t v90 = (v10 ^ (v10 >> 31)) - 0x61C8864680B583E9;
    while (1)
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v102);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v99, (const re::AssetHandle *)(*(void *)(v13 + 176) + 32));
      unint64_t v14 = v100;
      if (v100) {
        uint64_t v15 = *(void *)(v100 + 664);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = *(unsigned int *)(v100 + 260);
      uint64_t v17 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)v99);
      if (!v17)
      {
        if (v100 && (unsigned int v29 = atomic_load((unsigned int *)(v100 + 704)), v29 == 3))
        {
          unint64_t v30 = v101;
          unint64_t v31 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v102);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v30, v31, *(void *)(a3 + 32));
          re::ecs2::MeshDeformationComponent::clearRuntimeMeshDeformationData((re::ecs2::MeshDeformationComponent *)v12);
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)v99);
        }
        goto LABEL_89;
      }
      unint64_t v18 = v17;
      unint64_t v19 = (0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27);
      unint64_t v20 = v15 ^ ((0x94D049BB133111EBLL * v19) >> 31) ^ (0x94D049BB133111EBLL * v19);
      unint64_t v21 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
      unint64_t v22 = ((v20 << 6) - 0x61C8864680B583E9 + (v20 >> 2) + (v21 ^ (v21 >> 31))) ^ v20;
      unint64_t v23 = (re::ecs2::EntityComponentCollection *)(v13 + 32);
      uint64_t v24 = *(void *)(v18 + 392);
      unint64_t v25 = *(void *)(v18 + 376);
      uint64_t v26 = re::ecs2::EntityComponentCollection::get(v23, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v26)
      {
        int v27 = (re::MeshNameMap *)(v26 + 216);
        uint64_t v24 = *(void *)(v26 + 208);
        unint64_t v97 = *(void *)(v26 + 192);
        unint64_t v28 = 0xBF58476D1CE4E5B9
            * (*(unsigned int *)(v26 + 700) ^ ((unint64_t)*(unsigned int *)(v26 + 700) >> 30));
        v22 ^= (v22 << 6)
             - 0x61C8864680B583E9
             + (v22 >> 2)
             + ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) >> 31));
      }
      else
      {
        unint64_t v97 = v25;
        int v27 = (re::MeshNameMap *)(v18 + 448);
      }
      if (!*(void *)(v12 + 40)) {
        goto LABEL_27;
      }
      long long v32 = re::MeshDeformationAsset::assetType((re::MeshDeformationAsset *)v26);
      uint64_t v33 = re::AssetHandle::assetWithType((re::AssetHandle *)(v12 + 32), (const re::AssetType *)v32, 1);
      unint64_t v34 = *(void *)(v12 + 40);
      if (!v33) {
        break;
      }
      long long v35 = (unint64_t *)v33;
      if (v34) {
        uint64_t v36 = *(void *)(v34 + 664);
      }
      else {
        uint64_t v36 = 0;
      }
      unint64_t v39 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
      v22 ^= (v22 << 6) - 0x61C8864680B583E9 + (v22 >> 2) + (v36 ^ (v39 >> 31) ^ v39);
      if (*(void *)(v12 + 56))
      {
        *(void *)(v12 + 56) = 0;
        re::DynamicArray<re::DeformationStackDefinition>::deinit(v12 + 152);
        re::DynamicArray<re::MeshDeformationIndex>::deinit(v12 + 192);
        re::ecs2::Component::markDirty((void *)v12);
      }
      char v38 = 0;
LABEL_35:
      if (v95)
      {
        v22 ^= v90 + (v22 << 6) + (v22 >> 2);
        if (*(void *)(v12 + 64) != v22)
        {
          float v40 = (unint64_t *)(v12 + 72);
          if ((unint64_t *)(v12 + 72) != v35)
          {
            unint64_t v41 = *v35;
            if (*v40)
            {
              float32x4_t v42 = (void *)(v12 + 72);
              if (v41)
              {
                re::DynamicArray<re::DeformationStackDefinition>::copy(v42, (uint64_t)v35);
                ++*(_DWORD *)(v12 + 96);
              }
              else
              {
                re::DynamicArray<re::DeformationStackDefinition>::clear((uint64_t)v42);
              }
            }
            else if (v41)
            {
              unint64_t v43 = v35[2];
              *(void *)(v12 + 72) = v41;
              re::DynamicArray<re::DeformationStackDefinition>::setCapacity((void *)(v12 + 72), v43);
              ++*(_DWORD *)(v12 + 96);
              re::DynamicArray<re::DeformationStackDefinition>::copy((void *)(v12 + 72), (uint64_t)v35);
            }
          }
          if (v40 != v35)
          {
            unint64_t v44 = v35[5];
            if (*(void *)(v12 + 112))
            {
              float32x4_t v45 = (void *)(v12 + 112);
              if (v44)
              {
                re::DynamicArray<re::MeshDeformationIndex>::copy(v45, (uint64_t)(v35 + 5));
                ++*(_DWORD *)(v12 + 136);
              }
              else
              {
                re::DynamicArray<re::MeshDeformationIndex>::clear((uint64_t)v45);
              }
            }
            else if (v44)
            {
              unint64_t v46 = v35[7];
              *(void *)(v12 + 112) = v44;
              re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)(v12 + 112), v46);
              ++*(_DWORD *)(v12 + 136);
              re::DynamicArray<re::MeshDeformationIndex>::copy((void *)(v12 + 112), (uint64_t)(v35 + 5));
            }
          }
          re::MeshDeformationAsset::forceVertexFrameSkinning((re::MeshDeformationAsset *)(v12 + 72));
          *(void *)(v12 + 64) = v22;
        }
        long long v35 = (unint64_t *)(v12 + 72);
      }
      else if (*(void *)(v12 + 64))
      {
        *(void *)(v12 + 64) = 0;
        re::DynamicArray<re::DeformationStackDefinition>::deinit(v12 + 72);
        re::DynamicArray<re::MeshDeformationIndex>::deinit(v12 + 112);
      }
      float32x4_t v47 = (re::MeshDeformationRuntimeData *)(v12 + 232);
      re::MeshDeformationRuntimeData::update<re::MeshAsset>((re::MeshDeformationRuntimeData *)(v12 + 232), v96[5], v93, v35, v18, v27, v22);
      float32x4_t v48 = *(void **)(v12 + 392);
      if (!v48 || *v48 != *(void *)(v12 + 248))
      {
        uint64_t v49 = v96[17];
        if (v49) {
          uint64_t v50 = (void *)(v49 + 8);
        }
        else {
          uint64_t v50 = 0;
        }
        inited = (re *)objc_initWeak(&location, v50);
        int v52 = re::globalAllocators(inited);
        uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52[2] + 32))(v52[2], 128, 8);
        *(_OWORD *)(v53 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0u;
        *(_OWORD *)(v53 + 48) = 0u;
        *(_OWORD *)(v53 + 64) = 0u;
        *(_OWORD *)(v53 + 80) = 0u;
        *(_OWORD *)(v53 + 96) = 0u;
        *(_OWORD *)(v53 + 112) = 0u;
        *(_OWORD *)uint64_t v53 = 0u;
        *(_OWORD *)(v53 + 16) = 0u;
        uint64_t v55 = v96[4];
        uint64_t v54 = v96[5];
        unint64_t v56 = *(void *)(v12 + 256);
        *(void *)uint64_t v53 = *(void *)(v12 + 248);
        *(void *)(v53 + 16) = v56;
        char v92 = v38;
        uint64_t v94 = v54;
        if (v56)
        {
          if (v56 >> 61) {
            goto LABEL_98;
          }
          uint64_t v58 = 8 * v56;
                                                              + 32))();
          *(void *)(v53 + 24) = v59;
          if (!v59)
          {
LABEL_99:
            re::internal::assertLog((re::internal *)4, v60, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
LABEL_100:
            re::internal::assertLog((re::internal *)6, v67, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v56);
            _os_crash();
            __break(1u);
LABEL_101:
            re::internal::assertLog((re::internal *)4, v63, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
LABEL_102:
            re::internal::assertLog((re::internal *)4, v69, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
          }
          unint64_t v61 = v56 - 1;
          if (v56 != 1)
          {
            do
            {
              *(_DWORD *)float32x4_t v59 = -1;
              *((_WORD *)v59 + 2) = -1;
              float32x4_t v59 = (_anonymous_namespace_ *)((char *)v59 + 8);
              --v61;
            }
            while (v61);
          }
          *(_DWORD *)float32x4_t v59 = -1;
          *((_WORD *)v59 + 2) = -1;
          *(void *)(v53 + 64) = v56;
          *(void *)(v53 + 72) = v62;
          if (!v62) {
            goto LABEL_101;
          }
          simd_float4 v64 = v62;
          if (v56 != 1)
          {
            bzero(v62, v58 - 8);
            simd_float4 v64 = (void *)((char *)v64 + v58 - 8);
          }
          *simd_float4 v64 = 0;
        }
        else
        {
          *(void *)(v53 + 64) = 0;
        }
        *(void *)(v53 + 112) = v56;
        if (v56)
        {
          if (v56 >= 0x555555555555556) {
            goto LABEL_100;
          }
          *(void *)(v53 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v68;
          if (!v68) {
            goto LABEL_102;
          }
          uint64_t v70 = v68;
          if (v56 != 1)
          {
            bzero(v68, 48 * v56 - 48);
            v70 += 3 * v56 - 3;
          }
          v70[1] = 0u;
          v70[2] = 0u;
          *uint64_t v70 = 0u;
        }
        unsigned int v71 = *(void *)(v12 + 368) - 1;
        v110[0] = v12 + 232;
        v110[1] = v71;
        uint64_t v106 = v12 + 232;
        unsigned int v107 = v71;
        int v108 = 0;
        __int16 v109 = 0;
        unint64_t v72 = (re *)re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v110, (uint64_t)v103);
        int v73 = 0;
        unsigned int v74 = 0;
        while (v73 != v104 || v109 != v105)
        {
          unint64_t v75 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v106);
          unint64_t v76 = re::MeshDeformationRuntimeData::meshDeformationHandle(v47, v75, WORD2(v75));
          uint64_t v77 = re::MeshDeformationRuntimeData::deformationStackHandle(v47, v76);
          unint64_t v56 = v74;
          unint64_t v78 = *(void *)(v53 + 16);
          if (v78 <= v74)
          {
            uint64_t v111 = 0;
            long long v123 = 0u;
            long long v124 = 0u;
            long long v121 = 0u;
            long long v122 = 0u;
            long long v120 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v112 = 136315906;
            uint64_t v113 = "operator[]";
            __int16 v114 = 1024;
            int v115 = 468;
            __int16 v116 = 2048;
            uint64_t v117 = v74;
            __int16 v118 = 2048;
            unint64_t v119 = v78;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_94:
            uint64_t v111 = 0;
            long long v123 = 0u;
            long long v124 = 0u;
            long long v121 = 0u;
            long long v122 = 0u;
            long long v120 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v112 = 136315906;
            uint64_t v113 = "operator[]";
            __int16 v114 = 1024;
            int v115 = 468;
            __int16 v116 = 2048;
            uint64_t v117 = v74;
            __int16 v118 = 2048;
            unint64_t v119 = v78;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_95:
            uint64_t v111 = 0;
            long long v123 = 0u;
            long long v124 = 0u;
            long long v121 = 0u;
            long long v122 = 0u;
            long long v120 = 0u;
            unint64_t v75 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v112 = 136315906;
            uint64_t v113 = "operator[]";
            __int16 v114 = 1024;
            int v115 = 468;
            __int16 v116 = 2048;
            uint64_t v117 = v74;
            __int16 v118 = 2048;
            unint64_t v119 = v78;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_96:
            re::internal::assertLog((re::internal *)6, v82, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v83, v97);
            _os_crash();
            __break(1u);
LABEL_97:
            uint64_t v111 = 0;
            long long v123 = 0u;
            long long v124 = 0u;
            long long v121 = 0u;
            long long v122 = 0u;
            long long v120 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v112 = 136315906;
            uint64_t v113 = "operator[]";
            __int16 v114 = 1024;
            int v115 = 468;
            __int16 v116 = 2048;
            uint64_t v117 = v74;
            __int16 v118 = 2048;
            unint64_t v119 = v75;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_98:
            re::internal::assertLog((re::internal *)6, v57, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v56);
            _os_crash();
            __break(1u);
            goto LABEL_99;
          }
          uint64_t v79 = *(void *)(v53 + 24) + 8 * v74;
          *(_DWORD *)uint64_t v79 = v75;
          *(_WORD *)(v79 + 4) = WORD2(v75);
          unint64_t v78 = *(void *)(v53 + 40);
          if (v78 <= v74) {
            goto LABEL_94;
          }
          *(void *)(*(void *)(v53 + 48) + 8 * v74) = v77;
          unint64_t v78 = *(void *)(v53 + 112);
          if (v78 <= v74) {
            goto LABEL_95;
          }
          __int16 v80 = (re::DeformationBufferAllocator *)(*(void *)(v53 + 120) + 48 * v74);
          long long v81 = (unsigned __int8 *)re::DataArray<re::DeformationStack>::get(v94 + 1416, v77);
          re::DeformationBufferAllocator::init(v80, *v81);
          uint64_t v83 = v75;
          if (v97 <= v75) {
            goto LABEL_96;
          }
          uint64_t v84 = re::DataArray<re::MeshInstance>::get(v55 + 72, *(void *)(v24 + 8 * v75));
          uint64_t v85 = re::DataArray<re::MeshModel>::get(v55 + 8, *(void *)(v84 + 16));
          unint64_t v75 = *(void *)(v53 + 64);
          if (v75 <= v74) {
            goto LABEL_97;
          }
          *(void *)(*(void *)(v53 + 72) + 8 * v74++) = v85 + 96;
          unint64_t v72 = (re *)re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v106);
          int v73 = v108;
        }
        *(void *)&long long v122 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        *((void *)&v121 + 1) = re::globalAllocators(v72)[2];
        *(void *)&long long v122 = 0;
        re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset((id *)(v12 + 384), &location, (void *)v53, (uint64_t)&v120);
        re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v120);
        objc_destroyWeak(&location);
        id location = 0;
        a5 = v89;
        char v38 = v92;
      }
      if ((v38 & 1) == 0)
      {
        unint64_t v86 = v101;
        unint64_t v87 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v102);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v86, v87, *(void *)(a3 + 48));
      }
LABEL_89:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v99);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v102);
      if ((void)v102 == a5 && WORD4(v102) == 0xFFFF && WORD5(v102) == 0xFFFF) {
        return *(_DWORD *)(a5 + 40) != 0;
      }
    }
    if (v34 && (unsigned int v37 = atomic_load((unsigned int *)(v34 + 704)), v37 != 3))
    {
      re::AssetHandle::loadAsync((re::AssetHandle *)(v12 + 32));
      char v38 = 1;
    }
    else
    {
LABEL_27:
      char v38 = 0;
    }
    if (v22 != *(void *)(v12 + 56))
    {
      *(void *)(v12 + 56) = v22;
      re::DynamicArray<re::DeformationStackDefinition>::deinit(v12 + 152);
      re::DynamicArray<re::MeshDeformationIndex>::deinit(v12 + 192);
      re::MeshDeformationAsset::init(v12 + 152, v18, 0, 0);
      unint64_t v22 = *(void *)(v12 + 56);
    }
    long long v35 = (unint64_t *)(v12 + 152);
    goto LABEL_35;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::MeshDeformationSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a3;
  v19[1] = a4;
  uint64_t v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v18);
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    unint64_t v10 = v9 ? *(void *)(v9 + 24) : 0;
    uint64_t v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      unint64_t v12 = v11[444].u64[0];
      if (v12 >= v10) {
        unint64_t v12 = v10;
      }
      v11[444].i64[0] = v12;
      unint64_t v13 = v11[444].u64[1];
      if (v13 <= v10) {
        unint64_t v13 = v10;
      }
      v11[444].i64[1] = v13;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[445] = vaddq_s64(v11[445], v14);
      *(unsigned char *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 3039, a1);
  uint64_t v15 = *(void *)(a1 + 104);
  if (!v15 || (*(unsigned char *)(v15 + 424) & 0x10) != 0) {
    re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::updateForScene(a1 + 168, a2, (uint64_t)v19, 0);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v18);
}

uint64_t re::ecs2::MeshDeformationSystem::willAddSystemToECSService(re::ecs2::MeshDeformationSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  unint64_t v5 = (uint64_t *)re::ServiceLocator::service<re::AssetService>(v4);
  uint64_t v6 = re::MeshDeformationAsset::assetType((re::MeshDeformationAsset *)v5);
  uint64_t result = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(v5[130], (unint64_t)v6);
  *((void *)this + re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 15) = result;
  return result;
}

void *re::ecs2::MeshDeformationSystem::willRemoveSystemFromECSService(void *this)
{
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  return this;
}

void re::ecs2::MeshDeformationSystem::willAddSceneToECSService(re::ecs2::MeshDeformationSystem *this, re::ecs2::Scene *a2)
{
}

uint64_t re::ecs2::MeshDeformationSystem::willRemoveSceneFromECSService(re::ecs2::MeshDeformationSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 168, (uint64_t)a2);
}

void *re::ecs2::allocInfo_MeshDeformationComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_307, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_307))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D5F8, "MeshDeformationComponent");
    __cxa_guard_release(&_MergedGlobals_307);
  }
  return &unk_26AF8D5F8;
}

void re::ecs2::initInfo_MeshDeformationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x590DB2F18B38DE74;
  v13[1] = "MeshDeformationComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D5D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8D5D8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8D5E8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      unint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "meshDeformationAssetHandle";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8D5F0 = v11;
      __cxa_guard_release(&qword_26AF8D5D8);
    }
  }
  *((void *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8D5E8;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshDeformationComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshDeformationComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::MeshDeformationComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshDeformationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

uint64_t re::internal::defaultConstruct<re::ecs2::MeshDeformationComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::MeshDeformationComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshDeformationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshDeformationComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshDeformationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshDeformationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshDeformationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshDeformationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshDeformationComponent>, this);
}

void *re::ecs2::allocInfo_MeshDeformationSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D5E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D5E0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D670, "MeshDeformationSystem");
    __cxa_guard_release(&qword_26AF8D5E0);
  }
  return &unk_26AF8D670;
}

void re::ecs2::initInfo_MeshDeformationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xA362AF4CADF32224;
  v5[1] = "MeshDeformationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_MeshDeformationSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshDeformationSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshDeformationSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshDeformationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshDeformationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::MeshDeformationSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshDeformationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::MeshDeformationSystem *re::internal::defaultConstruct<re::ecs2::MeshDeformationSystem>(int a1, int a2, re::ecs2::MeshDeformationSystem *this)
{
  return re::ecs2::MeshDeformationSystem::MeshDeformationSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::MeshDeformationSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 21);
  a3[16] = &unk_26E7056D0;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 18);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MeshDeformationSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 21);
  a1[16] = &unk_26E7056D0;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 18);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshDeformationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshDeformationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshDeformationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshDeformationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshDeformationSystem>, this);
}

uint64_t re::ecs2::MeshDeformationComponentStateImpl::dependsOnComponents(re::ecs2::MeshDeformationComponentStateImpl *this)
{
  return *((void *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshDeformationComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::MeshDeformationSystem::~MeshDeformationSystem(re::ecs2::MeshDeformationSystem *this)
{
  *((void *)this + 16) = &unk_26E7056D0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 18);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21);
  *((void *)this + 16) = &unk_26E7056D0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 18);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::MeshDeformationSystem::typeInfo(re::ecs2::MeshDeformationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshDeformationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshDeformationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshDeformationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshDeformationSystem>, 0);
}

uint64_t re::DynamicArray<re::DeformationStackDefinition>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::DeformationStackDefinition>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition *,re::DeformationStackDefinition *,re::DeformationStackDefinition *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * a1[2]), a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = 5 * v9;
      uint64_t v11 = (uint64_t *)(*(void *)(a2 + 32) + 8 * v10);
      uint64_t result = a1[4] + 8 * v10;
      uint64_t v12 = 40 * v4 - 8 * v10;
      do
      {
        uint64_t v13 = re::DynamicArray<re::DeformationDefinition>::DynamicArray(result, v11);
        v11 += 5;
        uint64_t result = v13 + 40;
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition *,re::DeformationStackDefinition *,re::DeformationStackDefinition *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * v4), a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = a1[4] + 40 * v4;
      uint64_t v8 = 40 * v6 - 40 * v4;
      do
      {
        uint64_t result = re::DynamicArray<re::DeformationDefinition>::deinit(v7);
        v7 += 40;
        v8 -= 40;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition *,re::DeformationStackDefinition *,re::DeformationStackDefinition *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::DynamicArray<re::DeformationDefinition>::operator=(a3, v4);
      v4 += 5;
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::DeformationDefinition>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::DeformationDefinition>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::DeformationDefinition>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::DeformationDefinition>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::DeformationDefinition>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::DeformationDefinition>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 32);
    uint64_t v4 = 40 * v2;
    do
    {
      re::FixedArray<CoreIKTransform>::deinit(v3 + 2);
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::DynamicArray<re::MeshDeformationIndex>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex *,re::MeshDeformationIndex *,re::MeshDeformationIndex *>((uint64_t)&v15, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 48 * a1[2]), a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = v9 + 48 * v4;
      uint64_t v11 = a1[4];
      uint64_t v12 = 48 * v8;
      do
      {
        uint64_t v13 = v9 + v12;
        *(unsigned char *)(v11 + v12) = *(unsigned char *)(v9 + v12);
        re::StringID::StringID((re::StringID *)(v11 + v12 + 8), (const StringID *)(v9 + v12 + 8));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 24), (const StringID *)(v9 + v12 + 24));
        *(void *)(v11 + v12 + 40) = *(void *)(v9 + v12 + 40);
        v9 += 48;
        v11 += 48;
      }
      while (v13 + 48 != v10);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex *,re::MeshDeformationIndex *,re::MeshDeformationIndex *>((uint64_t)&v14, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 48 * v4), a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = 48 * v5 - 48 * v4;
      uint64_t v7 = (re::StringID *)(a1[4] + 48 * v4 + 24);
      do
      {
        re::StringID::destroyString(v7);
        re::StringID::destroyString((re::StringID *)((char *)v7 - 16));
        uint64_t v7 = (re::StringID *)((char *)v7 + 48);
        v6 -= 48;
      }
      while (v6);
    }
  }
  a1[2] = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex *,re::MeshDeformationIndex *,re::MeshDeformationIndex *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 3;
  do
  {
    *(unsigned char *)a4 = *((unsigned char *)v6 - 24);
    re::StringID::operator=((unint64_t *)(a4 + 8), v6 - 2);
    re::StringID::operator=((unint64_t *)(a4 + 24), v6);
    *(void *)(a4 + 40) = v6[2];
    a4 += 48;
    uint64_t v7 = v6 + 3;
    v6 += 6;
  }
  while (v7 != v5);
  return v5;
}

_anonymous_namespace_ *re::FixedArray<re::ecs2::ComponentTypeBase const*>::FixedArray(_anonymous_namespace_ *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    re::FixedArray<re::ecs2::ComponentTypeBase const*>::copy(a1, (const void **)a2);
  }
  return a1;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::MeshDeformationComponent>(uint64_t a1)
{
  *(void *)(a1 + 4re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0u;
  uint64_t v2 = (id *)(a1 + 384);
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6DFE08;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_DWORD *)(v3 + 216) = 0;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_DWORD *)(v3 + 176) = 0;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 2re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
  *(_OWORD *)(v3 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  *(void *)(v3 + 240) = 0;
  *(void *)(v3 + 248) = -1;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  inited = (re *)objc_initWeak(v2, 0);
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 424) = re::globalAllocators(inited)[2];
  *(void *)(a1 + 4re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::MeshDeformationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshDeformationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

double re::ecs2::RigidBodyComponent::updateRigidBody(re::ecs2::RigidBodyComponent *this, re::ecs2::ColliderComponent *a2)
{
  if (*((_DWORD *)this + 30) != *(_DWORD *)(*((void *)this + 42) + 208))
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 35);
    if (WeakRetained)
    {
      WeakRetained[232] = 1;
    }
  }
  re::RigidBody::setMotionType(*((void *)this + 42), *((_DWORD *)this + 30));
  uint64_t v5 = (unsigned char *)*((void *)this + 42);
  v5[304] = *((unsigned char *)this + 132);
  (*(void (**)(void))(*(void *)v5 + 432))();
  uint64_t v6 = (_DWORD *)*((void *)this + 42);
  v6[55] = *((_DWORD *)this + 34);
  (*(void (**)(void))(*(void *)v6 + 432))();
  (*(void (**)(void, void))(**((void **)this + 42) + 184))(*((void *)this + 42), *((unsigned __int8 *)this + 140));
  (*(void (**)(void, void))(**((void **)this + 42) + 192))(*((void *)this + 42), *((unsigned __int8 *)this + 141));
  (*(void (**)(void, void))(**((void **)this + 42) + 200))(*((void *)this + 42), *((unsigned __int8 *)this + 142));
  (*(void (**)(void, void))(**((void **)this + 42) + 136))(*((void *)this + 42), *((unsigned __int8 *)this + 143));
  (*(void (**)(void, void))(**((void **)this + 42) + 144))(*((void *)this + 42), *((unsigned __int8 *)this + 144));
  (*(void (**)(void, void))(**((void **)this + 42) + 152))(*((void *)this + 42), *((unsigned __int8 *)this + 145));
  (*(void (**)(void))(**((void **)this + 42) + 288))();
  v7.n128_u32[0] = *((_DWORD *)this + 37);
  v8.n128_u32[0] = *((_DWORD *)this + 38);
  (*(void (**)(__n128, __n128))(**((void **)this + 42) + 336))(v7, v8);
  (*(void (**)(void))(**((void **)this + 42) + 344))();
  uint64_t v9 = (float32x4_t *)*((void *)this + 42);
  *(_DWORD *)(v9[4].i64[1] + 88) = *(_DWORD *)(v9[4].i64[1] + 88) & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 15) >> 2) & 1));
  float32x4_t v10 = *((float32x4_t *)this + 10);
  uint32x4_t v11 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v10));
  v11.i32[3] = v11.i32[2];
  if ((vmaxvq_u32(v11) & 0x80000000) != 0)
  {
    v9[15] = vaddq_f32(v10, v9[15]);
    *((_OWORD *)this + 10) = 0u;
  }
  float32x4_t v12 = *((float32x4_t *)this + 11);
  uint32x4_t v13 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v12));
  v13.i32[3] = v13.i32[2];
  if ((vmaxvq_u32(v13) & 0x80000000) != 0)
  {
    *(float32x4_t *)(*((void *)this + 42) + 256) = vaddq_f32(v12, *(float32x4_t *)(*((void *)this + 42) + 256));
    *((_OWORD *)this + 11) = 0u;
  }
  float32x4_t v14 = *((float32x4_t *)this + 12);
  uint32x4_t v15 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v14));
  v15.i32[3] = v15.i32[2];
  if ((vmaxvq_u32(v15) & 0x80000000) != 0)
  {
    *(float32x4_t *)(*((void *)this + 42) + 272) = vaddq_f32(v14, *(float32x4_t *)(*((void *)this + 42) + 272));
    *((_OWORD *)this + 12) = 0u;
  }
  float32x4_t v16 = *((float32x4_t *)this + 13);
  uint32x4_t v17 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v16));
  v17.i32[3] = v17.i32[2];
  if ((vmaxvq_u32(v17) & 0x80000000) != 0)
  {
    *(float32x4_t *)(*((void *)this + 42) + 288) = vaddq_f32(v16, *(float32x4_t *)(*((void *)this + 42) + 288));
    v16.i64[0] = 0;
    *((_OWORD *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  }
  return *(double *)v16.i64;
}

void re::ecs2::RigidBodyComponent::removeFromSimulation(re::ecs2::RigidBodyComponent *this)
{
  v10[4] = *MEMORY[0x263EF8340];
  if (*((void *)this + 42))
  {
    uint64_t v2 = (id *)((char *)this + 280);
    id WeakRetained = (re::RigidBody ***)objc_loadWeakRetained((id *)this + 35);
    if (WeakRetained)
    {
      unint64_t v4 = WeakRetained;
      re::PhysicsJointCollection::deleteJointsReferencingRigidBody((const re::RigidBody *)(WeakRetained + 16), *((const re::RigidBody **)this + 42));
      re::RigidBodyCollection::remove(v4 + 9, *((re::RigidBody **)this + 42));
      objc_destroyWeak(v2);
      *((void *)this + 35) = 0;
    }
    uint64_t v5 = *((void *)this + 42);
    v10[0] = &unk_26E705818;
    void v10[3] = v10;
    v9[3] = v9;
    uint64_t v8 = v5;
    v9[0] = &unk_26E705818;
    std::__function::__value_func<void ()(re::RigidBody *)>::~__value_func[abi:nn180100](v10);
    std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>>::operator=[abi:nn180100]((uint64_t *)this + 44, &v8);
    std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>>::~unique_ptr[abi:nn180100](&v8);
    *((void *)this + 42) = 0;
    re::AssetHandle::operator=((uint64_t)this + 248, (uint64_t *)this + 12);
    uint64_t v6 = *((void *)this + 2);
    if (v6)
    {
      __n128 v7 = (re::ecs2::ColliderComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v7) {
        re::ecs2::ColliderComponent::removeFromSimulation(v7);
      }
    }
  }
}

uint64_t *std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(re::RigidBody *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  std::__function::__value_func<void ()(re::RigidBody *)>::operator=[abi:nn180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void re::ecs2::RigidBodyComponent::teleport(re::ecs2::RigidBodyComponent *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(re::ecs2::NetworkComponent **)(v2 + 200);
  if (v3 && *((void *)v3 + 4))
  {
    if (!RESyncableIsAuthoritative()) {
      return;
    }
    uint64_t v2 = *((void *)this + 2);
  }
  ++*((_DWORD *)this + 31);
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4)
  {
    uint64_t v5 = (const re::ecs2::Component *)v4;
    *(unsigned char *)(v4 + 80) = *((_DWORD *)this + 31);
    re::ecs2::Component::markDirty((void *)v4);
    if (v3)
    {
      re::ecs2::NetworkComponent::markDirty(v3, v5);
    }
  }
}

re::ecs2::RigidBodyComponentStateImpl *re::ecs2::RigidBodyComponentStateImpl::RigidBodyComponentStateImpl(re::ecs2::RigidBodyComponentStateImpl *this)
{
  v4[3] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E7057B0;
  *((void *)this + 2) = 0;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0;
  *((void *)this + 1) = 0;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[1] = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v4[2] = re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  v3[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::RigidBodyComponentStateImpl *)((char *)this + 8), (uint64_t)v3);
  return this;
}

BOOL re::ecs2::RigidBodyComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (uint64_t v10 = v9,
        uint64_t v11 = *(void *)(a3 + 8),
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9),
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11),
        v44[0] = v12,
        (v44[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v41, a5, 0);
    unint64_t v15 = v41;
    unint64_t v14 = v42;
    unint64_t v41 = a4;
    unint64_t v42 = v15;
    unint64_t v43 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v22 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v42);
        uint64_t v23 = *(void *)v22;
        uint64_t v24 = *(void *)(*(void *)v22 + 16);
        unint64_t v25 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v24 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = *(unsigned __int16 *)(v24 + 82);
          if (!*(_WORD *)(v24 + 82)) {
            goto LABEL_28;
          }
          unint64_t v28 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          unsigned int v29 = *(int16x8_t **)(v24 + 88);
          int16x8_t v30 = vld1q_dup_s16(v28);
          int v31 = 1;
          while (1)
          {
            uint16x8_t v32 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v30, *v29), (int8x16_t)xmmword_23436BBD0);
            v32.i16[0] = vmaxvq_u16(v32);
            if (v32.i32[0]) {
              break;
            }
            v31 -= 8;
            ++v29;
            if (!--v27) {
              goto LABEL_28;
            }
          }
          if (v32.u16[0] - v31 < *(unsigned __int16 *)(v24 + 80))
          {
            uint64_t v33 = *re::ecsComponentsLogObjects(v25);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              __int16 v40 = 0;
              _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "Rigid Body component cannot exist on the same entity that contains a character controller component. Deactivating component.", (uint8_t *)&v40, 2u);
            }
          }
          else
          {
LABEL_28:
            unint64_t v34 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v44, v24);
            if (v34) {
              uint64_t v35 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            if (*(unsigned char *)(v24 + 288))
            {
              uint64_t v16 = *((void *)v26 + 5);
              if (v16)
              {
                if (v35)
                {
                  uint32x4_t v17 = *(float32x4_t **)(v23 + 336);
                  if (!v17
                    || *(void *)(v23 + 104) != *(void *)(v23 + 256)
                    || !re::MassFrame::operator==((float32x4_t *)(v23 + 32), v17 + 5)
                    || *((void *)v26 + 10) != v16)
                  {
                    goto LABEL_17;
                  }
                  id WeakRetained = (char *)objc_loadWeakRetained((id *)(v23 + 280));
                  if (WeakRetained)
                  {
                    unint64_t v19 = WeakRetained - 8;
                  }
                  else
                  {
                    unint64_t v19 = 0;
                  }
                  if (v19 != (char *)v35) {
LABEL_17:
                  }
                    re::ecs2::RigidBodyComponent::removeFromSimulation((re::ecs2::RigidBodyComponent *)v23);
                  unint64_t v20 = v41;
                  unint64_t v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v42);
                  re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(void *)(a3 + 40));
                  goto LABEL_33;
                }
              }
            }
          }
        }
        unint64_t v36 = v41;
        unint64_t v37 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v42);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v36, v37, *(void *)(a3 + 32));
        re::ecs2::RigidBodyComponent::removeFromSimulation((re::ecs2::RigidBodyComponent *)v23);
LABEL_33:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v42);
      }
      while (v42 != a5 || (unsigned __int16)v43 != 0xFFFF || WORD1(v43) != 0xFFFF);
    }
    BOOL v38 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v38 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45);
  return v38;
}

BOOL re::ecs2::RigidBodyComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v66, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a3[1] + 56) + 32))(*(void *)(a3[1] + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (!v9) {
    goto LABEL_7;
  }
  uint64_t v57 = a3;
  uint64_t v10 = a3[1];
  uint64_t v11 = v9;
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v9 + 24))();
  uint64_t v56 = v11;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 40))(v11, v10);
  v65[0] = v12;
  v65[1] = v13;
  if (!v13)
  {
LABEL_7:
    BOOL v14 = 0;
    goto LABEL_8;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  unint64_t v62 = a4;
  uint64_t v63 = *(void *)buf;
  uint64_t v64 = *(void *)&buf[8];
  if (*(void *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 0xFFFF0000)
  {
    while (1)
    {
      uint64_t v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v63);
      uint64_t v17 = *(void *)v16;
      uint64_t v18 = *(void *)(*(void *)v16 + 16);
      unint64_t v19 = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v18 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      unint64_t v20 = (re::ecs2::ColliderComponent *)v19;
      unint64_t v21 = (re::CollisionShapeAsset *)(v19 + 4);
      uint64_t v22 = v19[5];
      if (v22 && (unsigned int v23 = atomic_load((unsigned int *)(v22 + 704)), v23 == 2))
      {
        char v24 = 1;
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v19 + 4));
        char v24 = 0;
      }
      if (*(void *)(v17 + 104))
      {
        unint64_t v25 = re::PhysicsMaterialAsset::assetType((re::PhysicsMaterialAsset *)v19);
        uint64_t v26 = re::AssetHandle::assetWithType((re::AssetHandle *)(v17 + 96), (const re::AssetType *)v25, 1);
        if (!v26)
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)(v17 + 96));
LABEL_24:
          re::ecs2::RigidBodyComponent::removeFromSimulation((re::ecs2::RigidBodyComponent *)v17);
          goto LABEL_32;
        }
        unint64_t v27 = *(void *)(v26 + 8);
      }
      else
      {
        unint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory + 24))(re::PhysicsFactory::m_defaultFactory);
      }
      if (v27) {
        char v28 = v24;
      }
      else {
        char v28 = 0;
      }
      if ((v28 & 1) == 0) {
        goto LABEL_24;
      }
      if (*(void *)(v17 + 336)) {
        goto LABEL_22;
      }
      uint64_t v33 = (float32x4_t *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v65, v18);
      re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v18, (const re::ecs2::Entity *)1, buf);
      re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(v33, (uint64_t)buf, v58);
      float32x4_t v68 = (float32x4_t)xmmword_23435FBB0;
      *(_OWORD *)long long buf = 0u;
      long long v67 = 0u;
      unint64_t v34 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)v58, (int32x4_t *)buf, &v68, &v67);
      float32x4_t v59 = *(float32x4_t *)buf;
      float32x4_t v60 = v68;
      long long v61 = v67;
      v35.i64[0] = __PAIR64__(v67, DWORD1(v67));
      v35.i64[1] = __PAIR64__(*(unsigned int *)buf, DWORD2(v67));
      if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, vorrq_s8((int8x16_t)vcltzq_f32(v35), (int8x16_t)vcgezq_f32(v35)))) & 0xF) != 0|| (int8x16_t v36 = (int8x16_t)vmulq_f32(v68, v68), v37 = vaddv_f32(vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL))), v37 != 1.0)&& fabsf(v37 + -1.0) > 0.00001)
      {
        BOOL v38 = *re::ecsComponentsLogObjects(v34);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_233120000, v38, OS_LOG_TYPE_ERROR, "NaN or non-unit rotation detected in transform (RigidBody). Skipping.", buf, 2u);
        }
        re::ecs2::RigidBodyComponent::removeFromSimulation((re::ecs2::RigidBodyComponent *)v17);
        unint64_t v29 = v62;
        unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v63);
        int v31 = (re::ecs2::ComponentBucketsBase *)v57[2];
        unint64_t v32 = v57[4];
        goto LABEL_31;
      }
      uint64_t v39 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v18 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      re::internal::RigidBodyUpdateStagingData::RigidBodyUpdateStagingData((uint64_t)v58, v17, v39, *(void *)(v18 + 200));
      uint64_t v40 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation((re::ecs2::PhysicsSimulationData *)v33);
      unsigned int v55 = DWORD1(v58[0]);
      float v41 = (*(float (**)(uint64_t))(*(void *)v56 + 120))(v56);
      (*(void (**)(uint64_t))(*(void *)v56 + 136))(v56);
      if (*(float *)(v17 + 148) < 0.0) {
        *(float *)(v17 + 148) = v41;
      }
      if (*(float *)(v17 + 152) < 0.0) {
        *(_DWORD *)(v17 + 152) = v42;
      }
      unint64_t v43 = *(void *)(re::AssetHandle::asset<re::CollisionShapeAsset>(v21) + 8);
      unint64_t v44 = *(float32x4_t **)(v17 + 352);
      unint64_t v45 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27));
      unint64_t v46 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27));
      uint64_t v47 = (((v45 ^ (v45 >> 31)) << 6) + ((v45 ^ (v45 >> 31)) >> 2) + (v46 ^ (v46 >> 31)) - 0x61C8864680B583E9) ^ v45 ^ (v45 >> 31);
      if (!v44) {
        break;
      }
      if (v47 != *(void *)(v17 + 344) || !re::MassFrame::operator==((float32x4_t *)(v17 + 32), v44 + 5))
      {
        *(void *)(v17 + 352) = 0;
        std::function<void ()(re::RigidBody *)>::operator()(v17 + 360, (uint64_t)v44);
LABEL_46:
        *(void *)long long buf = v27;
        unint64_t v44 = (float32x4_t *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint8_t *, uint64_t))(*(void *)re::PhysicsFactory::m_defaultFactory + 40))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v43, v17 + 32, buf, 1);
        goto LABEL_47;
      }
      *(void *)(v17 + 352) = 0;
LABEL_47:
      *(void *)(v17 + 336) = v44;
      *(void *)(v17 + 344) = v47;
      re::RigidBodyCollection::add((re::RigidBodyCollection *)(v40 + 80), (re::RigidBody *)v44);
      objc_storeWeak((id *)(v17 + 280), (id)(v40 + 8));
      *(_OWORD *)long long buf = v61;
      float32x4_t v70 = v60;
      float32x4_t v48 = *(_OWORD **)(v17 + 336);
      float32x4_t v49 = v60;
      v48[1] = v61;
      v48[2] = v49;
      (*(void (**)(_OWORD *, uint8_t *))(*(void *)v48 + 64))(v48, buf);
      re::ecs2::RigidBodyComponent::updateRigidBody((re::ecs2::RigidBodyComponent *)v17, v20);
      re::AssetHandle::operator=(v17 + 248, (uint64_t *)(v17 + 96));
      int v50 = *(_DWORD *)(v17 + 120);
      *(_DWORD *)(v17 + 272) = *(_DWORD *)(v17 + 124);
      *(_DWORD *)(v17 + 288) = v50;
      re::ecs2::ColliderComponent::setUnmanagedCollisionObject((re::CollisionObject **)v20, *(re::CollisionObject **)(*(void *)(v17 + 336) + 72));
      uint64_t v51 = *((void *)v20 + 8);
      int v52 = *(void **)(*(void *)(v17 + 336) + 72);
      if (v52[4] != v51)
      {
        v52[4] = v51;
        (*(void (**)(void *))(*v52 + 80))(v52);
        int v52 = *(void **)(*(void *)(v17 + 336) + 72);
      }
      re::CollisionObject::setScale((uint64_t)v52, &v59);
      uint64_t v53 = *(uint64_t **)(v17 + 336);
      *(void *)(v53[9] + 40) = *(void *)(v17 + 16);
      uint64_t v54 = *v53;
      if (*(unsigned char *)(v17 + 25)) {
        (*(void (**)(void))(v54 + 304))();
      }
      else {
        (*(void (**)(void))(v54 + 312))();
      }
      re::RigidBody::setMotionType(*(void *)(v17 + 336), v55);
LABEL_22:
      re::ecs2::RigidBodyComponent::updateRigidBody((re::ecs2::RigidBodyComponent *)v17, v20);
      unint64_t v29 = v62;
      unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v63);
      int v31 = (re::ecs2::ComponentBucketsBase *)v57[2];
      unint64_t v32 = v57[6];
LABEL_31:
      re::ecs2::ComponentBucketsBase::moveComponent(v31, v29, v30, v32);
LABEL_32:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v63);
      if (v63 == a5 && (unsigned __int16)v64 == 0xFFFF && WORD1(v64) == 0xFFFF) {
        goto LABEL_6;
      }
    }
    *(void *)(v17 + 352) = 0;
    goto LABEL_46;
  }
LABEL_6:
  BOOL v14 = *(_DWORD *)(a5 + 40) != 0;
LABEL_8:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v66);
  return v14;
}

BOOL re::ecs2::RigidBodyComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v143, 3047, a1);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v10);
  if (!v11
    || (uint64_t v12 = v11,
        uint64_t v13 = *(void *)(a3 + 8),
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11),
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v13),
        v142[0] = v14,
        (v142[1] = v15) == 0))
  {
    BOOL v16 = 0;
    goto LABEL_8;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v150, a5, 0);
  uint64_t v140 = a4;
  float32x4_t v141 = v150;
  if (v150.i64[0] != a5 || v150.u16[4] != 0xFFFFLL || (v150.i32[2] & 0xFFFF0000) != 0xFFFF0000)
  {
    uint64_t v122 = a5;
    while (1)
    {
      uint64_t v18 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v141);
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(*(void *)v18 + 16);
      unint64_t v21 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v142, v20);
      uint64_t v22 = (uint64_t)v21;
      if (!a6 || re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v21) == a6) {
        break;
      }
LABEL_102:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v141);
      if (v141.i64[0] == a5 && v141.u16[4] == 0xFFFF && v141.u16[5] == 0xFFFF) {
        goto LABEL_6;
      }
    }
    re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v20, (const re::ecs2::Entity *)1, &v150);
    re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace((float32x4_t *)v22, (uint64_t)&v150, v139);
    float32x4_t v150 = 0u;
    int32x4_t v144 = (int32x4_t)xmmword_23435FBB0;
    *(_OWORD *)unint64_t v154 = 0u;
    re::decomposeScaleRotationTranslation<float>((uint64_t)v139, (int32x4_t *)&v150, &v144, v154);
    long long v137 = *(_OWORD *)v154;
    int32x4_t v138 = v144;
    float32x4_t v136 = v150;
    uint64_t v23 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v20 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    re::internal::RigidBodyUpdateStagingData::RigidBodyUpdateStagingData((uint64_t)&v132, v19, v23, *(void *)(v20 + 200));
    if (v133)
    {
      char v24 = (float *)(v19 + 304);
      float v25 = *(float *)(v19 + 320);
      if (v25 != *(float *)v138.i32 && vabds_f32(v25, *(float *)v138.i32) > 0.001
        || (float v26 = *(float *)(v19 + 324), v26 != *(float *)&v138.i32[1])
        && vabds_f32(v26, *(float *)&v138.i32[1]) > 0.001
        || (float v27 = *(float *)(v19 + 328), v27 != *(float *)&v138.i32[2])
        && vabds_f32(v27, *(float *)&v138.i32[2]) > 0.001
        || (float v28 = *(float *)(v19 + 332), v28 != *(float *)&v138.i32[3])
        && vabds_f32(v28, *(float *)&v138.i32[3]) > 0.001
        || *v24 != *(float *)&v137 && vabds_f32(*v24, *(float *)&v137) > 0.001
        || (float v29 = *(float *)(v19 + 308), v29 != *((float *)&v137 + 1)) && vabds_f32(v29, *((float *)&v137 + 1)) > 0.001
        || (float v30 = *(float *)(v19 + 312), v30 != *((float *)&v137 + 2)) && vabds_f32(v30, *((float *)&v137 + 2)) > 0.001)
      {
        int v31 = *(_OWORD **)(v19 + 336);
        int32x4_t v32 = v138;
        v31[1] = v137;
        void v31[2] = v32;
        (*(void (**)(_OWORD *, long long *))(*(void *)v31 + 64))(v31, &v137);
        int32x4_t v33 = v138;
        *(_OWORD *)char v24 = v137;
        *(int32x4_t *)(v19 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v33;
      }
LABEL_48:
      if (!v23)
      {
LABEL_99:
        re::CollisionObject::setScale(*(void *)(*(void *)(v19 + 336) + 72), &v136);
        *(_DWORD *)(v19 + 272) = *(_DWORD *)(v19 + 124);
        uint64_t v120 = *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v20 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 64);
        long long v121 = *(void **)(*(void *)(v19 + 336) + 72);
        if (v121[4] != v120)
        {
          v121[4] = v120;
          (*(void (**)(void *))(*v121 + 80))(v121);
        }
        *(_DWORD *)(v19 + 288) = v135;
        a5 = v122;
        goto LABEL_102;
      }
      v150.i8[0] = 0;
      v144.i8[0] = 0;
      int v110 = *(_DWORD *)(v19 + 288);
      if (v110 != 2 || v135 == 2)
      {
        if (!v135)
        {
          v150.i8[0] = 1;
          float32x4_t v151 = 0uLL;
          v144.i8[0] = 1;
          float32x4_t v145 = 0uLL;
          goto LABEL_61;
        }
        if (v135 != 1)
        {
          int v112 = *(_DWORD *)(v23 + 144);
          if (v112 == *(_DWORD *)(v23 + 148))
          {
            int v113 = *(_DWORD *)(v23 + 176);
            if (v113 == *(_DWORD *)(v23 + 180))
            {
              if (v110 != 2 || v133 || v135 != 2)
              {
                *(_DWORD *)(v23 + 148) = v112;
                *(_DWORD *)(v23 + 180) = v113;
LABEL_91:
                if (!v133)
                {
                  int v118 = *(unsigned __int8 *)(v23 + 25);
                  if (v118 != (*(unsigned int (**)(void))(**(void **)(v19 + 336) + 296))(*(void *)(v19 + 336)))
                  {
                    uint64_t v119 = **(void **)(v19 + 336);
                    if (*(unsigned char *)(v23 + 25)) {
                      (*(void (**)(void))(v119 + 304))();
                    }
                    else {
                      (*(void (**)(void))(v119 + 312))();
                    }
                  }
                }
                *(unsigned char *)(v23 + 26) = 0;
                goto LABEL_99;
              }
              int v114 = 0;
LABEL_83:
              v150.i8[0] = 1;
              goto LABEL_84;
            }
            int v117 = 0;
            __int16 v116 = (float32x4_t *)(v23 + 160);
            goto LABEL_78;
          }
          int v114 = 0;
          int v115 = 1;
          v150.i8[0] = 1;
LABEL_69:
          float32x4_t v151 = *(float32x4_t *)(v23 + 128);
          int v113 = *(_DWORD *)(v23 + 176);
          if (v113 == *(_DWORD *)(v23 + 180))
          {
            if (v110 != 2 || v133 || v135 != 2) {
              goto LABEL_61;
            }
LABEL_84:
            float32x4_t v151 = *(float32x4_t *)(v23 + 96);
            if (!v114) {
              v144.i8[0] = 1;
            }
            float32x4_t v145 = *(float32x4_t *)(v23 + 112);
            *(_DWORD *)(v23 + 148) = v112;
            goto LABEL_87;
          }
          *(_OWORD *)&v154[15] = *(_OWORD *)(v23 + 160);
          if (!v115) {
            goto LABEL_76;
          }
          __int16 v116 = (float32x4_t *)(v23 + 160);
          int v117 = 1;
LABEL_78:
          int v114 = 1;
          v144.i8[0] = 1;
          float32x4_t v145 = *v116;
          goto LABEL_79;
        }
        v150.i8[0] = 1;
        float32x4_t v111 = *(float32x4_t *)(v23 + 112);
        float32x4_t v151 = *(float32x4_t *)(v23 + 96);
        v144.i8[0] = 1;
        float32x4_t v145 = v111;
      }
      else
      {
        v150.i8[0] = 1;
        float32x4_t v151 = 0uLL;
        v144.i8[0] = 1;
        float32x4_t v145 = 0uLL;
        if (!v135) {
          goto LABEL_61;
        }
      }
      int v112 = *(_DWORD *)(v23 + 144);
      if (v112 == *(_DWORD *)(v23 + 148))
      {
        int v113 = *(_DWORD *)(v23 + 176);
        if (v113 != *(_DWORD *)(v23 + 180))
        {
          *(_OWORD *)&v154[15] = *(_OWORD *)(v23 + 160);
          int v114 = 1;
LABEL_76:
          float32x4_t v145 = *(float32x4_t *)&v154[15];
          int v117 = 1;
LABEL_79:
          if (v110 != 2 || v133 || v135 != 2)
          {
            *(_DWORD *)(v23 + 148) = v112;
            *(_DWORD *)(v23 + 180) = v113;
            if (!v117)
            {
LABEL_89:
              if (v114) {
                (*(void (**)(void, float32x4_t *))(**(void **)(v19 + 336) + 240))(*(void *)(v19 + 336), &v145);
              }
              goto LABEL_91;
            }
LABEL_88:
            (*(void (**)(void, float32x4_t *))(**(void **)(v19 + 336) + 224))(*(void *)(v19 + 336), &v151);
            int v114 = v144.u8[0];
            goto LABEL_89;
          }
          if (v117) {
            goto LABEL_84;
          }
          goto LABEL_83;
        }
LABEL_61:
        *(_DWORD *)(v23 + 148) = *(_DWORD *)(v23 + 144);
        int v113 = *(_DWORD *)(v23 + 176);
LABEL_87:
        *(_DWORD *)(v23 + 180) = v113;
        goto LABEL_88;
      }
      int v115 = 0;
      int v114 = 1;
      goto LABEL_69;
    }
    uint64_t v34 = *(void *)(v20 + 240);
    if (v34)
    {
      if (!v23) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v34 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v20 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!v23) {
        goto LABEL_37;
      }
    }
    if (v134)
    {
      (*(void (**)(float32x4_t *__return_ptr))(**(void **)(v19 + 336) + 40))(&v127);
      float v35 = v128;
      float v36 = v129;
      float v37 = v35 + v35;
      float v38 = v36 + v36;
      float v39 = v130;
      float v40 = v39 + v39;
      float v41 = v35 * (float)(v35 + v35);
      float v42 = v36 * (float)(v36 + v36);
      float v43 = v39 * (float)(v39 + v39);
      float v44 = v37 * v129;
      float v45 = v37 * v130;
      float v46 = v38 * v130;
      float v47 = v38 * v131;
      float v48 = v40 * v131;
      v49.i32[3] = 0;
      v49.f32[0] = 1.0 - (float)(v42 + v43);
      v49.f32[1] = (float)(v37 * v129) + v48;
      v49.f32[2] = (float)(v37 * v130) - v47;
      float v50 = v37 * v131;
      float32_t v51 = 1.0 - (float)(v41 + v43);
      v52.i32[3] = 0;
      v52.f32[0] = v44 - v48;
      v52.f32[1] = v51;
      v52.f32[2] = v46 + v50;
      v53.i32[3] = 0;
      v53.f32[0] = v45 + v47;
      v53.f32[1] = v46 - v50;
      v53.f32[2] = 1.0 - (float)(v41 + v42);
      float32x4_t v150 = vmulq_n_f32(v49, v136.f32[0]);
      float32x4_t v151 = vmulq_n_f32(v52, *(float *)vshrq_n_u64((uint64x2_t)v136, 0x20uLL).i32);
      float32x4_t v54 = v127;
      v54.i32[3] = 1.0;
      float32x4_t v152 = vmulq_laneq_f32(v53, v136, 2);
      float32x4_t v153 = v54;
      re::ecs2::PhysicsSimulationData::localTransformFromPhysicsSimulationSpace(v22, (uint64_t)&v150, v20, (uint64_t)v126);
      re::lerp<float>(v126, (float32x4_t *)(v23 + 32), &v123, 0.1);
      long long v56 = v124;
      long long v55 = v125;
      *(float32x4_t *)(v34 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = v123;
      *(_OWORD *)(v34 + 48) = v56;
      *(_OWORD *)(v34 + 64) = v55;
      re::ecs2::Component::markDirty((void *)v34);
      uint64_t v57 = *(void *)(v20 + 24);
      if (v57)
      {
        if ((*(unsigned char *)(v57 + 288) & 0x80) != 0) {
          uint64_t v58 = 0;
        }
        else {
          uint64_t v58 = *(re::ecs2::TransformComponent ***)(v20 + 24);
        }
      }
      else
      {
        uint64_t v58 = 0;
      }
      re::ecs2::TransformComponent::worldMatrix4x4F(v58, (const re::ecs2::Entity *)1, v154);
      uint64_t v82 = 0;
      float32x4_t v83 = *(float32x4_t *)(v22 + 176);
      float32x4_t v84 = *(float32x4_t *)(v22 + 192);
      float32x4_t v85 = *(float32x4_t *)(v22 + 208);
      float32x4_t v86 = *(float32x4_t *)(v22 + 224);
      int32x4_t v144 = *(int32x4_t *)v154;
      float32x4_t v145 = *(float32x4_t *)&v154[16];
      float32x4_t v146 = v155;
      long long v147 = v156;
      do
      {
        *(float32x4_t *)((char *)&v150 + v82) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v83, COERCE_FLOAT(*(_OWORD *)((char *)&v144 + v82))), v84, *(float32x2_t *)&v144.i8[v82], 1), v85, *(float32x4_t *)((char *)&v144 + v82), 2), v86, *(float32x4_t *)((char *)&v144 + v82), 3);
        v82 += 16;
      }
      while (v82 != 64);
      uint64_t v87 = 0;
      float32x4_t v88 = v150;
      float32x4_t v89 = v151;
      float v90 = *(float *)&v124;
      float v91 = v90 + v90;
      float v92 = *((float *)&v124 + 2);
      float v93 = v92 + v92;
      float v94 = v90 * (float)(v90 + v90);
      float v95 = *((float *)&v124 + 1) * (float)(*((float *)&v124 + 1) + *((float *)&v124 + 1));
      float v96 = v92 * (float)(v92 + v92);
      float v97 = v91 * *((float *)&v124 + 1);
      float v98 = v91 * *((float *)&v124 + 2);
      float v99 = (float)(*((float *)&v124 + 1) + *((float *)&v124 + 1)) * *((float *)&v124 + 2);
      float v100 = v91 * *((float *)&v124 + 3);
      float v101 = (float)(*((float *)&v124 + 1) + *((float *)&v124 + 1)) * *((float *)&v124 + 3);
      v102.i32[3] = 0;
      v102.f32[0] = 1.0 - (float)(v95 + v96);
      v102.f32[1] = v97 + (float)(v93 * *((float *)&v124 + 3));
      v102.f32[2] = v98 - v101;
      v103.i32[3] = 0;
      v103.f32[0] = v97 - (float)(v93 * *((float *)&v124 + 3));
      v103.f32[1] = 1.0 - (float)(v94 + v96);
      v103.f32[2] = v99 + v100;
      float32x4_t v104 = v152;
      float32x4_t v105 = v153;
      v106.i32[3] = 0;
      v106.f32[0] = v98 + v101;
      v106.f32[1] = v99 - v100;
      v106.f32[2] = 1.0 - (float)(v94 + v95);
      long long v107 = v125;
      HIDWORD(v107) = 1.0;
      int32x4_t v144 = (int32x4_t)vmulq_n_f32(v102, v123.f32[0]);
      float32x4_t v145 = vmulq_n_f32(v103, *(float *)vshrq_n_u64((uint64x2_t)v123, 0x20uLL).i32);
      float32x4_t v146 = vmulq_laneq_f32(v106, v123, 2);
      long long v147 = v107;
      do
      {
        *(float32x4_t *)((char *)&v150 + v87) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, COERCE_FLOAT(*(_OWORD *)((char *)&v144 + v87))), v89, *(float32x2_t *)&v144.i8[v87], 1), v104, *(float32x4_t *)((char *)&v144 + v87), 2), v105, *(float32x4_t *)((char *)&v144 + v87), 3);
        v87 += 16;
      }
      while (v87 != 64);
      int32x4_t v144 = 0u;
      long long v149 = xmmword_23435FBB0;
      float32x4_t v148 = 0u;
      re::decomposeScaleRotationTranslation<float>((uint64_t)&v150, &v144, &v149, &v148);
      float32x4_t v150 = v148;
      float32x4_t v151 = (float32x4_t)v149;
      int v108 = *(_OWORD **)(v19 + 336);
      long long v109 = v149;
      v108[1] = v148;
      v108[2] = v109;
      long long v81 = *(void (**)(void))(*(void *)v108 + 64);
LABEL_47:
      v81();
      goto LABEL_48;
    }
LABEL_37:
    if (v135 == 2 && *(_DWORD *)(v19 + 124) == *(_DWORD *)(v19 + 272))
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(v19 + 336) + 40))(v154);
      float v59 = *(float *)&v154[16];
      float v60 = v59 + v59;
      float v61 = *(float *)&v154[24];
      float v62 = v61 + v61;
      float v63 = v59 * (float)(v59 + v59);
      float v64 = *(float *)&v154[20] * (float)(*(float *)&v154[20] + *(float *)&v154[20]);
      float v65 = v61 * (float)(v61 + v61);
      float v66 = v60 * *(float *)&v154[20];
      float v67 = v60 * *(float *)&v154[24];
      float v68 = (float)(*(float *)&v154[20] + *(float *)&v154[20]) * *(float *)&v154[24];
      float v69 = (float)(*(float *)&v154[20] + *(float *)&v154[20]) * *(float *)&v154[28];
      float v70 = v62 * *(float *)&v154[28];
      v71.i32[3] = 0;
      v71.f32[0] = 1.0 - (float)(v64 + v65);
      v71.f32[1] = (float)(v60 * *(float *)&v154[20]) + v70;
      v71.f32[2] = (float)(v60 * *(float *)&v154[24]) - v69;
      float v72 = v60 * *(float *)&v154[28];
      float32_t v73 = 1.0 - (float)(v63 + v65);
      v74.i32[3] = 0;
      v74.f32[0] = v66 - v70;
      v74.f32[1] = v73;
      v74.f32[2] = v68 + v72;
      v75.i32[3] = 0;
      v75.f32[0] = v67 + v69;
      v75.f32[1] = v68 - v72;
      v75.f32[2] = 1.0 - (float)(v63 + v64);
      float32x4_t v150 = vmulq_n_f32(v71, v136.f32[0]);
      float32x4_t v151 = vmulq_n_f32(v74, *(float *)vshrq_n_u64((uint64x2_t)v136, 0x20uLL).i32);
      float32x4_t v76 = *(float32x4_t *)v154;
      v76.i32[3] = 1.0;
      float32x4_t v152 = vmulq_laneq_f32(v75, v136, 2);
      float32x4_t v153 = v76;
      re::ecs2::PhysicsSimulationData::localTransformFromPhysicsSimulationSpace(v22, (uint64_t)&v150, v20, (uint64_t)&v144);
      float32x4_t v78 = v145;
      float32x4_t v77 = v146;
      *(int32x4_t *)(v34 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = v144;
      *(float32x4_t *)(v34 + 48) = v78;
      *(float32x4_t *)(v34 + 64) = v77;
      re::ecs2::Component::markDirty((void *)v34);
      goto LABEL_48;
    }
    uint64_t v79 = *(_OWORD **)(v19 + 336);
    int32x4_t v80 = v138;
    v79[1] = v137;
    v79[2] = v80;
    long long v81 = *(void (**)(void))(*(void *)v79 + 64);
    goto LABEL_47;
  }
LABEL_6:
  BOOL v16 = *(_DWORD *)(a5 + 40) != 0;
LABEL_8:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v143);
  return v16;
}

void re::ecs2::RigidBodyComponentStateImpl::simToECS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v73, 3047, a1);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a4 + 8) + 56) + 32))(*(void *)(*(void *)(a4 + 8) + 56));
  uint64_t v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(a4 + 8);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v13);
    v72[0] = v14;
    v72[1] = v15;
    if (v15)
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v74, a6, 0);
      uint64_t v70 = a5;
      float32x4_t v71 = v74;
      if (v74.i64[0] != a6 || v74.u16[4] != 0xFFFFLL || (v74.i32[2] & 0xFFFF0000) != 0xFFFF0000)
      {
        do
        {
          uint64_t v51 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v71);
          uint64_t v52 = *(void *)v51;
          uint64_t v53 = *(void *)(*(void *)v51 + 16);
          uint64_t v54 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v53 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          long long v55 = *(re::ecs2::NetworkComponent **)(v53 + 200);
          re::internal::RigidBodyUpdateStagingData::RigidBodyUpdateStagingData((uint64_t)v69, v52, v54, (uint64_t)v55);
          if (v69[1])
          {
            long long v56 = (float32x4_t *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v72, v53);
            if (re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation((re::ecs2::PhysicsSimulationData *)v56) == a2)
            {
              re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v53, (const re::ecs2::Entity *)1, &v74);
              re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(v56, (uint64_t)&v74, &v66);
              float32x4_t v60 = (float32x4_t)v67;
              float32x4_t v61 = v68;
              float32x4_t v59 = v66;
              float32x4_t v16 = vmulq_f32(v66, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v68, (int8x16_t)v68, 0xCuLL), (int8x16_t)v68, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v67, v67), (int8x16_t)v67, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v67, (int8x16_t)v67, 0xCuLL), (int8x16_t)v67, 8uLL)));
              BOOL v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0] <= 0.0;
              float v18 = -1.0;
              if (!v17) {
                float v18 = 1.0;
              }
              float v63 = v18;
              (*(void (**)(float32x4_t *__return_ptr))(**(void **)(v52 + 336) + 40))(&v74);
              float32x4_t v19 = v75;
              float32x4_t v62 = v74;
              (*(void (**)(float *__return_ptr))(**(void **)(v52 + 336) + 40))(v65);
              uint64_t v20 = *(void *)(v53 + 240);
              if (!v20) {
                uint64_t v20 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v53 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              }
              if (!re::areAlmostEqual<float>(v65, (float *)(v52 + 304)))
              {
                float32x4_t v21 = vmulq_f32(v59, v59);
                float32x4_t v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)));
                float32x4_t v23 = vmulq_f32(v60, v60);
                v22.f32[0] = sqrtf(v22.f32[0]);
                float32x4_t v24 = vmulq_f32(v61, v61);
                v22.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
                v22.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
                float v25 = v19.f32[0] * (float)(v19.f32[0] + v19.f32[0]);
                float v26 = v19.f32[1] * (float)(v19.f32[1] + v19.f32[1]);
                float v27 = v19.f32[2] * (float)(v19.f32[2] + v19.f32[2]);
                float v28 = (float)(v19.f32[0] + v19.f32[0]) * v19.f32[1];
                float v29 = (float)(v19.f32[0] + v19.f32[0]) * v19.f32[2];
                float v30 = (float)(v19.f32[1] + v19.f32[1]) * v19.f32[2];
                v23.f32[0] = (float)(v19.f32[0] + v19.f32[0]) * v19.f32[3];
                v24.f32[0] = (float)(v19.f32[1] + v19.f32[1]) * v19.f32[3];
                float v31 = (float)(v19.f32[2] + v19.f32[2]) * v19.f32[3];
                v32.i32[3] = 0;
                v32.f32[0] = 1.0 - (float)(v26 + v27);
                v33.i32[3] = 0;
                v32.f32[1] = v28 + v31;
                v32.f32[2] = v29 - v24.f32[0];
                v33.f32[0] = v29 + v24.f32[0];
                v33.f32[1] = v30 - v23.f32[0];
                v33.f32[2] = 1.0 - (float)(v25 + v26);
                float32x4_t v34 = vmulq_n_f32(v22, v63);
                float32x4_t v35 = vmulq_laneq_f32(v33, v34, 2);
                v36.i32[3] = 0;
                v36.i64[0] = __PAIR64__(1.0 - (float)(v25 + v27), v28 - v31);
                v36.f32[2] = v30 + v23.f32[0];
                float32x4_t v74 = vmulq_n_f32(v32, v34.f32[0]);
                float32x4_t v75 = vmulq_n_f32(v36, v34.f32[1]);
                float32x4_t v37 = v62;
                v37.i32[3] = 1.0;
                float32x4_t v76 = v35;
                float32x4_t v77 = v37;
                re::ecs2::PhysicsSimulationData::localTransformFromPhysicsSimulationSpace((uint64_t)v56, (uint64_t)&v74, v53, (uint64_t)v64);
                long long v39 = v64[1];
                long long v38 = v64[2];
                *(_OWORD *)(v20 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = v64[0];
                *(_OWORD *)(v20 + 48) = v39;
                *(_OWORD *)(v20 + 64) = v38;
                re::ecs2::Component::markDirty((void *)v20);
                if (v69[0])
                {
                  if (((*(uint64_t (**)(void))(**(void **)(v52 + 336) + 296))(*(void *)(v52 + 336)) & 1) == 0) {
                    re::ecs2::NetworkComponent::markDirty(v55, (const re::ecs2::Component *)v20);
                  }
                }
              }
              (*(void (**)(float32x4_t *__return_ptr))(**(void **)(v52 + 336) + 40))(&v74);
              float32x4_t v40 = v75;
              *(float32x4_t *)(v52 + 304) = v74;
              *(float32x4_t *)(v52 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v40;
              if (v54)
              {
                if (v69[2])
                {
                  uint64_t v41 = 0;
                  uint64_t v42 = 0;
                  *(void *)(v54 + 96) = 0;
                  *(void *)(v54 + 104) = 0;
                  *(_DWORD *)(v54 + 152) = *(_DWORD *)(v54 + 148);
                }
                else
                {
                  *(void *)(v54 + 96) = (*(uint64_t (**)(void))(**(void **)(v52 + 336) + 216))(*(void *)(v52 + 336));
                  *(void *)(v54 + 104) = v43;
                  *(_DWORD *)(v54 + 152) = *(_DWORD *)(v54 + 148);
                  uint64_t v41 = (*(uint64_t (**)(void))(**(void **)(v52 + 336) + 232))(*(void *)(v52 + 336));
                }
                int v44 = *(_DWORD *)(v54 + 180);
                *(void *)(v54 + 112) = v41;
                *(void *)(v54 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v42;
                *(_DWORD *)(v54 + 184) = v44;
                int v45 = *(unsigned __int8 *)(v54 + 25);
                int v46 = (*(uint64_t (**)(void))(**(void **)(v52 + 336) + 296))();
                *(unsigned char *)(v54 + 25) = v46;
                if (v45) {
                  char v47 = v46;
                }
                else {
                  char v47 = 0;
                }
                if ((v47 & 1) == 0 && v69[0])
                {
                  re::ecs2::Component::markDirty((void *)v54);
                  re::ecs2::NetworkComponent::markDirty(v55, (const re::ecs2::Component *)v54);
                  int v46 = *(unsigned __int8 *)(v54 + 25);
                }
                if (v45 != v46)
                {
                  uint64_t v48 = v56[1].i64[1];
                  if (v48)
                  {
                    uint64_t v49 = *(void *)(v52 + 336);
                    uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 296))(v49);
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v49, v50);
                  }
                }
              }
            }
          }
          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v71);
        }
        while (v71.i64[0] != a6 || v71.u16[4] != 0xFFFF || v71.u16[5] != 0xFFFF);
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v73);
}

void *re::ecs2::allocInfo_RigidBodyComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_308))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D6F8, "RigidBodyComponent");
    __cxa_guard_release(&_MergedGlobals_308);
  }
  return &unk_26AF8D6F8;
}

void re::ecs2::initInfo_RigidBodyComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v82[0] = 0x1479C03CF7280260;
  v82[1] = "RigidBodyComponent";
  re::StringID::destroyString((re::StringID *)v82);
  *((_OWORD *)this + 2) = v83;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D6F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8D6F0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8D770 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "setSleepOnCreation";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8D778 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_MassFrame((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "massFrame";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x2000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8D780 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_AssetHandle((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "material";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x6000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8D788 = v18;
      float32x4_t v19 = re::introspectionAllocator((re *)v18);
      float32x4_t v21 = re::introspect_MotionType((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "motionType";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x7800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF8D790 = v22;
      float32x4_t v23 = re::introspectionAllocator((re *)v22);
      float v25 = re::introspect_uint32_t((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "version_deprecated";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x8000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF8D798 = v26;
      float v27 = re::introspectionAllocator((re *)v26);
      float v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)float v28 = 5;
      *((void *)v28 + 1) = "version";
      *((void *)v28 + 2) = "version_deprecated";
      qword_26AF8D7A0 = (uint64_t)v28;
      float v29 = re::introspectionAllocator(v28);
      float v31 = re::introspect_BOOL((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "isCCDEnabled";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x8400000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF8D7A8 = v32;
      float32x4_t v33 = re::introspectionAllocator((re *)v32);
      float32x4_t v35 = re::introspect_float((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = "ccdVelocityThreshold";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x8800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF8D7B0 = v36;
      float32x4_t v37 = re::introspectionAllocator((re *)v36);
      long long v39 = re::introspect_BOOL((re *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "lockRotationX";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x8C00000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF8D7B8 = v40;
      uint64_t v41 = re::introspectionAllocator((re *)v40);
      uint64_t v43 = re::introspect_BOOL((re *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = "lockRotationY";
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x8D00000009;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 48) = 0;
      *(void *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF8D7C0 = v44;
      int v45 = re::introspectionAllocator((re *)v44);
      char v47 = re::introspect_BOOL((re *)1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + 8) = "lockRotationZ";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x8E0000000ALL;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 48) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26AF8D7C8 = v48;
      uint64_t v49 = re::introspectionAllocator((re *)v48);
      uint64_t v51 = re::introspect_BOOL((re *)1, v50);
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *(void *)(v52 + 8) = "lockTranslationX";
      *(void *)(v52 + 16) = v51;
      *(void *)(v52 + 24) = 0;
      *(void *)(v52 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x8F0000000BLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(void *)(v52 + 48) = 0;
      *(void *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_26AF8D7D0 = v52;
      uint64_t v53 = re::introspectionAllocator((re *)v52);
      long long v55 = re::introspect_BOOL((re *)1, v54);
      uint64_t v56 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 72, 8);
      *(_DWORD *)uint64_t v56 = 1;
      *(void *)(v56 + 8) = "lockTranslationY";
      *(void *)(v56 + 16) = v55;
      *(void *)(v56 + 24) = 0;
      *(void *)(v56 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x900000000CLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(void *)(v56 + 48) = 0;
      *(void *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_26AF8D7D8 = v56;
      uint64_t v57 = re::introspectionAllocator((re *)v56);
      float32x4_t v59 = re::introspect_BOOL((re *)1, v58);
      uint64_t v60 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 72, 8);
      *(_DWORD *)uint64_t v60 = 1;
      *(void *)(v60 + 8) = "lockTranslationZ";
      *(void *)(v60 + 16) = v59;
      *(void *)(v60 + 24) = 0;
      *(void *)(v60 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x910000000DLL;
      *(_DWORD *)(v60 + 40) = 0;
      *(void *)(v60 + 48) = 0;
      *(void *)(v60 + 56) = 0;
      *(_DWORD *)(v60 + 64) = 0;
      qword_26AF8D7E0 = v60;
      float32x4_t v61 = re::introspectionAllocator((re *)v60);
      float v63 = re::introspect_BOOL((re *)1, v62);
      uint64_t v64 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v61 + 32))(v61, 72, 8);
      *(_DWORD *)uint64_t v64 = 1;
      *(void *)(v64 + 8) = "canSleep";
      *(void *)(v64 + 16) = v63;
      *(void *)(v64 + 24) = 0;
      *(void *)(v64 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x920000000ELL;
      *(_DWORD *)(v64 + 40) = 0;
      *(void *)(v64 + 48) = 0;
      *(void *)(v64 + 56) = 0;
      *(_DWORD *)(v64 + 64) = 0;
      qword_26AF8D7E8 = v64;
      float v65 = re::introspectionAllocator((re *)v64);
      int32x4_t v67 = re::introspect_BOOL((re *)1, v66);
      uint64_t v68 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v65 + 32))(v65, 72, 8);
      *(_DWORD *)uint64_t v68 = 1;
      *(void *)(v68 + 8) = "remoteAuthorityAllowed";
      *(void *)(v68 + 16) = v67;
      *(void *)(v68 + 24) = 0;
      *(void *)(v68 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x930000000FLL;
      *(_DWORD *)(v68 + 40) = 0;
      *(void *)(v68 + 48) = 0;
      *(void *)(v68 + 56) = 0;
      *(_DWORD *)(v68 + 64) = 0;
      qword_26AF8D7F0 = v68;
      float v69 = re::introspectionAllocator((re *)v68);
      float32x4_t v71 = re::introspect_float((re *)1, v70);
      uint64_t v72 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v69 + 32))(v69, 72, 8);
      *(_DWORD *)uint64_t v72 = 1;
      *(void *)(v72 + 8) = "linearDamping";
      *(void *)(v72 + 16) = v71;
      *(void *)(v72 + 24) = 0;
      *(void *)(v72 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x9400000010;
      *(_DWORD *)(v72 + 40) = 0;
      *(void *)(v72 + 48) = 0;
      *(void *)(v72 + 56) = 0;
      *(_DWORD *)(v72 + 64) = 0;
      qword_26AF8D7F8 = v72;
      float32_t v73 = re::introspectionAllocator((re *)v72);
      float32x4_t v75 = re::introspect_float((re *)1, v74);
      uint64_t v76 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v73 + 32))(v73, 72, 8);
      *(_DWORD *)uint64_t v76 = 1;
      *(void *)(v76 + 8) = "angularDamping";
      *(void *)(v76 + 16) = v75;
      *(void *)(v76 + 24) = 0;
      *(void *)(v76 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x9800000011;
      *(_DWORD *)(v76 + 40) = 0;
      *(void *)(v76 + 48) = 0;
      *(void *)(v76 + 56) = 0;
      *(_DWORD *)(v76 + 64) = 0;
      qword_26AF8D800 = v76;
      float32x4_t v77 = re::introspectionAllocator((re *)v76);
      uint64_t v79 = re::introspect_BOOL((re *)1, v78);
      uint64_t v80 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v77 + 32))(v77, 72, 8);
      *(_DWORD *)uint64_t v80 = 1;
      *(void *)(v80 + 8) = "gravityEnabled";
      *(void *)(v80 + 16) = v79;
      *(void *)(v80 + 24) = 0;
      *(void *)(v80 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0x9C00000012;
      *(_DWORD *)(v80 + 40) = 0;
      *(void *)(v80 + 48) = 0;
      *(void *)(v80 + 56) = 0;
      *(_DWORD *)(v80 + 64) = 0;
      qword_26AF8D808 = v80;
      __cxa_guard_release(&qword_26AF8D6F0);
    }
  }
  *((void *)this + 2) = 0x19000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 20;
  *((void *)this + 8) = &qword_26AF8D770;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::RigidBodyComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RigidBodyComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::RigidBodyComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RigidBodyComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v81 = v83;
}

uint64_t re::internal::defaultConstruct<re::ecs2::RigidBodyComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::RigidBodyComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::RigidBodyComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RigidBodyComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RigidBodyComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigidBodyComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RigidBodyComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RigidBodyComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RigidBodyComponent>, this);
}

uint64_t re::ecs2::RigidBodyComponentStateImpl::dependsOnComponents(re::ecs2::RigidBodyComponentStateImpl *this)
{
  return *((void *)this + 3);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::RigidBodyComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::internal::RigidBodyUpdateStagingData::RigidBodyUpdateStagingData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)a1 = a4 != 0;
  if (!a4) {
    goto LABEL_11;
  }
  if (*(void *)(a4 + 32))
  {
    int IsAuthoritative = RESyncableIsAuthoritative();
    if (*(unsigned char *)a1) {
      int v9 = IsAuthoritative;
    }
    else {
      int v9 = 0;
    }
  }
  else
  {
    int v9 = 1;
    int IsAuthoritative = 1;
  }
  *(unsigned char *)(a1 + 1) = IsAuthoritative;
  if (v9 && !*(unsigned char *)(a2 + 147))
  {
    if (*(void *)(a4 + 32))
    {
      int IsAuthoritative = RESyncableGetOwnerPeerID() == 0;
LABEL_12:
      *(unsigned char *)(a1 + 1) = IsAuthoritative;
      goto LABEL_13;
    }
LABEL_11:
    int IsAuthoritative = 1;
    goto LABEL_12;
  }
LABEL_13:
  int v10 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 4) = v10;
  BOOL v12 = v10 == 2 && a3 != 0 && IsAuthoritative == 0;
  if (v12 && *(unsigned char *)(a3 + 25)) {
    *(_DWORD *)(a1 + 4) = 1;
  }
  int v13 = *(_DWORD *)(a2 + 124);
  int v14 = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 2) = v13 != v14;
  BOOL v15 = v13 == v14 && a3 != 0;
  *(unsigned char *)(a1 + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v15;
  return a1;
}

void std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26E705818;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E705818;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::operator()(uint64_t result, void *a2)
{
  uint64_t v2 = (void (***)(void))*a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    (**v2)(*a2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40);
    return v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::RigidBody *)>::operator=[abi:nn180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(re::RigidBody *)>::operator=[abi:nn180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(re::RigidBody *)>::operator=[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::RigidBodyComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6E0608;
  *(void *)(v2 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0x3F80000000000000;
  *(int32x4_t *)(v2 + 64) = vdupq_n_s32(0x3DCCCCCDu);
  *(_DWORD *)(v2 + 80) = 1065353216;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 2;
  *(void *)(v2 + 124) = 0;
  *(unsigned char *)(v2 + 1re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0;
  *(void *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 144) = 16842752;
  *(void *)(v2 + 148) = 0xBD4CCCCDBCA3D70ALL;
  *(unsigned char *)(v2 + 156) = 1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 0;
  objc_initWeak((id *)(v2 + 280), 0);
  *(_DWORD *)(a1 + 288) = 2;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(void *)(a1 + 328) = 0x3F80000000000000;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  return a1;
}

void re::ecs2::UpdateRenderServicesDataSystem::willAddSystemToECSService(re::ecs2::UpdateRenderServicesDataSystem *this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = re::ServiceLocator::serviceOrNull<re::ecs2::ClippingService>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v3);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 2re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::ServiceLocator::serviceOrNull<re::ecs2::TintService>(v5);
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 24) = re::ServiceLocator::serviceOrNull<re::ecs2::VisualProxyScopeService>(v6);
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 25) = re::ServiceLocator::serviceOrNull<re::ecs2::EnvironmentLightingService>(v7);
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 26) = re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(v8);
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(v9);
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  {
    re::introspect<re::ecs2::UILayerGeometryService>(void)::info = re::ecs2::introspect_UILayerGeometryService(0);
  }
  uint64_t v11 = re::introspect<re::ecs2::UILayerGeometryService>(void)::info;
  re::StringID::invalid((re::StringID *)v13);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v10 + 16))(v10, v11, v13);
  re::StringID::destroyString((re::StringID *)v13);
  *((void *)this + 28) = v12;
}

double re::ecs2::UpdateRenderServicesDataSystem::willRemoveSystemFromECSService(re::ecs2::UpdateRenderServicesDataSystem *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void *re::ecs2::UpdateRenderServicesDataSystem::updateScenes(void *result, uint64_t a2)
{
  uint64_t v2 = result[13];
  if (v2 && (*(unsigned char *)(v2 + 424) & 0x10) != 0)
  {
    uint64_t v4 = result;
    uint64_t v5 = result[27];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
    }
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v4[17] + 24))(v4[17]);
    uint64_t v6 = v4[21];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 40))(v6, &v14);
    }
    uint64_t v7 = v4[22];
    if (v7) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 24))(v7, &v14);
    }
    uint64_t v8 = v4[23];
    if (v8) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 24))(v8, &v14);
    }
    uint64_t v9 = v4[25];
    if (v9) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 24))(v9, &v14);
    }
    uint64_t v10 = v4[28];
    if (v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, a2);
    }
    if (v4[20])
    {
      uint64_t v11 = v4[18];
      if (v11)
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
        (*(void (**)(void, void, uint64_t *, uint64_t *, void, void))(*(void *)v4[20] + 40))(v4[20], v4[14], &v14, &v13, v4[5], v4[27]);
      }
    }
    uint64_t v12 = v4[24];
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
    }
    double result = (void *)v4[26];
    if (result) {
      return (void *)(*(uint64_t (**)(void *, uint64_t *))(*result + 48))(result, &v14);
    }
  }
  return result;
}

uint64_t re::ecs2::UpdateRenderServicesDataSystem::willAddSceneToECSService(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[21];
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, a2);
  }
  uint64_t v5 = a1[22];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 72))(v5, a2);
  }
  uint64_t v6 = a1[23];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
  }
  uint64_t v7 = a1[20];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2);
  }
  uint64_t v8 = a1[24];
  if (v8) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
  }
  uint64_t v9 = a1[18];
  if (v9) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2);
  }
  uint64_t v10 = a1[25];
  if (v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a2);
  }
  uint64_t v11 = a1[27];
  if (v11) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2);
  }
  uint64_t result = a1[28];
  if (result)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v13();
  }
  return result;
}

uint64_t re::ecs2::UpdateRenderServicesDataSystem::willRemoveSceneFromECSService(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[21];
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 56))(v4, a2);
  }
  uint64_t v5 = a1[22];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2);
  }
  uint64_t v6 = a1[23];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2);
  }
  uint64_t v7 = a1[20];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 56))(v7, a2);
  }
  uint64_t v8 = a1[24];
  if (v8) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a2);
  }
  uint64_t v9 = a1[18];
  if (v9) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2);
  }
  uint64_t v10 = a1[25];
  if (v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, a2);
  }
  uint64_t v11 = a1[27];
  if (v11) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 24))(v11, a2);
  }
  uint64_t result = a1[28];
  if (result)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v13();
  }
  return result;
}

void *re::ecs2::allocInfo_UpdateRenderServicesDataSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_309, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_309))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8D818, "UpdateRenderServicesDataSystem");
    __cxa_guard_release(&_MergedGlobals_309);
  }
  return &unk_26AF8D818;
}

void re::ecs2::initInfo_UpdateRenderServicesDataSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xF8A39FED7E88AF6CLL;
  v5[1] = "UpdateRenderServicesDataSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_UpdateRenderServicesDataSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::UpdateRenderServicesDataSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::UpdateRenderServicesDataSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::UpdateRenderServicesDataSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::UpdateRenderServicesDataSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::UpdateRenderServicesDataSystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::UpdateRenderServicesDataSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::UpdateRenderServicesDataSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E7058A8;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(void *)(v3 + 224) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::UpdateRenderServicesDataSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::UpdateRenderServicesDataSystem>(uint64_t a1)
{
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E7058A8;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(void *)(v1 + 224) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::UpdateRenderServicesDataSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_UpdateRenderServicesDataSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"UpdateRenderServicesDataSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_UpdateRenderServicesDataSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_UpdateRenderServicesDataSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::UpdateRenderServicesDataSystem>, this);
}

void re::ecs2::UpdateRenderServicesDataSystem::~UpdateRenderServicesDataSystem(re::ecs2::UpdateRenderServicesDataSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::UpdateRenderServicesDataSystem::typeInfo(re::ecs2::UpdateRenderServicesDataSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"UpdateRenderServicesDataSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_UpdateRenderServicesDataSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_UpdateRenderServicesDataSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::UpdateRenderServicesDataSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::UpdateRenderServicesDataSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::UpdateRenderServicesDataSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

re::ecs2::LightGroupStateTracking *re::ecs2::LightGroupStateTracking::LightGroupStateTracking(re::ecs2::LightGroupStateTracking *this)
{
  v5[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = (_OWORD *)re::ecs2::HierarchyStateTracking<unsigned long long>::HierarchyStateTracking((uint64_t)this);
  *(void *)uint64_t v2 = &unk_26E705938;
  *(_OWORD *)((char *)v2 + 248) = 0u;
  uint64_t v2 = (_OWORD *)((char *)v2 + 248);
  v2[1] = 0u;
  v4[0] = v5;
  v4[1] = 1;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)v2, (uint64_t)v4);
  return this;
}

void re::ecs2::LightGroupStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    long long v6 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 6;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = (void *)(a1 + 56);
    uint64_t v10 = *(void *)(a2 + 16);
    int v34 = *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v53 = *(void *)(v10 + 24 * v8 + 16);
      if (!re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(a1 + 56, &v53))break; {
LABEL_49:
      }
      uint64_t v10 = *(void *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v5 + 1)) {
        int v32 = v5 + 1;
      }
      else {
        int v32 = *(_DWORD *)(v2 + 32);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v32 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v33 = v8;
        if ((*(_DWORD *)(v10 + 24 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_56;
        }
      }
      int v33 = v32;
LABEL_56:
      LODWORD(v5) = v33;
      if (v4 == v33) {
        return;
      }
    }
    uint64_t v52 = 0;
    uint64_t v11 = v53;
    uint64_t v12 = *(void *)(v53 + 24);
    if (!v12 || (*(unsigned char *)(v12 + 288) & 0x80) != 0)
    {
LABEL_17:
      uint64_t v13 = &v52;
    }
    else
    {
      v51[0] = *(void *)(v53 + 24);
      uint64_t v13 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 56, v51);
      if (!v13)
      {
        do
        {
          uint64_t v11 = v51[0];
          uint64_t v14 = *(void *)(v51[0] + 24);
          if (!v14 || (*(unsigned char *)(v14 + 288) & 0x80) != 0) {
            goto LABEL_17;
          }
          v51[0] = *(void *)(v51[0] + 24);
          uint64_t v15 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 56, v51);
        }
        while (!v15);
        uint64_t v13 = (uint64_t *)v15;
      }
    }
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v51);
    v45[0] = 0;
    v45[1] = 0;
    int v46 = 1;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v47 = 0;
    int v50 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v45, (uint64_t)v51, 1uLL);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = 1;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = 0;
    int v44 = 0;
    re::BucketArray<unsigned long long,32ul>::init((uint64_t)&v38, (uint64_t)v51, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v45) = v11;
    *(void *)re::BucketArray<unsigned long long,32ul>::addUninitialized((uint64_t)&v38) = *v13;
    while (1)
    {
      if (!v49)
      {
        uint64_t v30 = v43;
        if (v43)
        {
          unint64_t v31 = 0;
          do
            re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v38, v31++);
          while (v30 != v31);
        }
        while (v39)
          re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(&v38);
        LODWORD(v4) = v34;
        uint64_t v2 = a2;
        if (v38 && (v40 & 1) == 0) {
          (*(void (**)(void))(*(void *)v38 + 40))();
        }
        re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v45);
        if (v45[0] && (v46 & 1) == 0) {
          (*(void (**)(void))(*(void *)v45[0] + 40))();
        }
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v51);
        goto LABEL_49;
      }
      unint64_t v37 = 0;
      unint64_t v17 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v45, v49 - 1);
      uint64_t v36 = 0;
      unint64_t v37 = v17;
      if (!v43)
      {
        re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
        _os_crash();
        __break(1u);
        return;
      }
      uint64_t v36 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v38, v43 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v45, --v49);
      ++v50;
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v38, --v43);
      ++v44;
      uint64_t v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v37 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v18
        || (uint64_t v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v53 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) != 0)
      {
        uint64_t v36 = *(void *)(*(void *)(v18 + 16) + 296);
      }
      unint64_t v19 = v37;
      unint64_t v20 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
      unint64_t v21 = v20 ^ (v20 >> 31);
      if (!*v9) {
        break;
      }
      unint64_t v22 = v21 % *(unsigned int *)(a1 + 80);
      uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v22);
      if (v23 == 0x7FFFFFFF) {
        goto LABEL_31;
      }
      uint64_t v24 = *(void *)(a1 + 72);
      while (*(void *)(v24 + 32 * v23 + 16) != v37)
      {
        uint64_t v23 = *(_DWORD *)(v24 + 32 * v23 + 8) & 0x7FFFFFFF;
        if (v23 == 0x7FFFFFFF) {
          goto LABEL_31;
        }
      }
LABEL_32:
      uint64_t v25 = *(void *)(v19 + 328);
      if (v25)
      {
        uint64_t v26 = *(uint64_t **)(v19 + 344);
        uint64_t v27 = 8 * v25;
        do
        {
          uint64_t v28 = *v26++;
          *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v45) = v28;
          float v29 = (void *)re::BucketArray<unsigned long long,32ul>::addUninitialized((uint64_t)&v38);
          *float v29 = v36;
          v27 -= 8;
        }
        while (v27);
      }
    }
    LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
LABEL_31:
    re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(a1 + 56, v22, v21, &v37, &v36);
    ++*(_DWORD *)(a1 + 96);
    unint64_t v19 = v37;
    goto LABEL_32;
  }
}

void re::ecs2::LightManager::update(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 280) = a2;
  re::ecs2::HierarchyStateTracking<unsigned long long>::updatePerEntityStateData(a1 + 8);
  *(void *)(a1 + 280) = 0;
}

uint64_t re::ecs2::LightManager::registerScene(re::ecs2::LightManager *this, re::ecs2::Scene *a2)
{
  return re::ecs2::HierarchyStateTracking<unsigned long long>::registerScene((re::ecs2::LightManager *)((char *)this + 8), (uint64_t)a2);
}

uint64_t re::ecs2::LightManager::unregisterScene(re::ecs2::LightManager *this, re::ecs2::Scene *a2)
{
  return re::ecs2::HierarchyStateTracking<unsigned long long>::unregisterScene((uint64_t)this + 8, (uint64_t)a2);
}

void re::ecs2::LightGroupStateTracking::~LightGroupStateTracking(re::ecs2::LightGroupStateTracking *this)
{
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<unsigned long long>::~HierarchyStateTracking((uint64_t *)this);
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<unsigned long long>::~HierarchyStateTracking((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::LightGroupStateTracking::trackedComponents(re::ecs2::LightGroupStateTracking *this)
{
  return *((void *)this + 33);
}

void re::ecs2::LightManager::~LightManager(re::ecs2::LightManager *this)
{
}

{
  uint64_t vars8;

  re::SmallHashTable<unsigned long long,unsigned short,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashTable((uint64_t)this + 288);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32);
  re::ecs2::HierarchyStateTracking<unsigned long long>::~HierarchyStateTracking((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::LightManager::lightGroupIdForEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 64, &v3);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::ecs2::LightManager::lightContextIdForEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  uint64_t v3 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 64, &v12);
  if (v3) {
    unint64_t v4 = *v3;
  }
  else {
    unint64_t v4 = 0;
  }
  if (*(_DWORD *)(a1 + 604))
  {
    if (*(void *)(a1 + 576))
    {
      unint64_t v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
      uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 584) + 4 * ((v5 ^ (v5 >> 31)) % *(unsigned int *)(a1 + 600)));
      if (v6 != 0x7FFFFFFF)
      {
        uint64_t v7 = *(void *)(a1 + 592);
        while (*(void *)(v7 + 24 * v6 + 8) != v4)
        {
          LODWORD(v6) = *(_DWORD *)(v7 + 24 * v6) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF) {
            return 0;
          }
        }
        uint64_t v8 = (unsigned __int16 *)(v7 + 24 * v6 + 16);
        return *v8;
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 304);
    if (v10)
    {
      uint64_t v8 = (unsigned __int16 *)(a1 + 328);
      uint64_t v11 = 16 * v10;
      while (*((void *)v8 - 1) != v4)
      {
        v8 += 8;
        v11 -= 16;
        if (!v11) {
          return 0;
        }
      }
      return *v8;
    }
  }
  return 0;
}

uint64_t re::ecs2::LightManager::lightGroupIdPerEntity(re::ecs2::LightManager *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::LightManager::mutableLightContextIdTable(re::ecs2::LightManager *this)
{
  return (uint64_t)this + 288;
}

uint64_t re::SmallHashTable<unsigned long long,unsigned short,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashTable(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  ++*(_DWORD *)(a1 + 24);
  uint64_t v2 = (uint64_t *)(a1 + 288);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 288));
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(v2);
  *(void *)(a1 + 16) = 0;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t *re::BucketArray<unsigned long long,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<unsigned long long,32ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<unsigned long long,32ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 256, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<unsigned long long,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<unsigned long long,32ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 32) >> 5);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x1F);
}

re *re::VideoManager::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  v13[5] = *MEMORY[0x263EF8340];
  *((void *)a1 + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = a2;
  uint64_t result = (re *)re::ServiceLocator::serviceOrNull<re::EventBus>(a2);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = re::globalAllocators(result)[2];
    v13[0] = &unk_26E705A28;
    v13[1] = a1;
    v13[3] = v7;
    uint64_t v13[4] = v13;
    *((void *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::EventBus::subscribe<re::ecs2::Entity,RENetworkAssetAddedEvent>(v6, 0, (uint64_t)v13, 0, 0);
    *((void *)a1 + re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 15) = v8;
    uint64_t v9 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::destroyCallable((uint64_t)v13);
    uint64_t v10 = re::globalAllocators(v9)[2];
    v12[0] = &unk_26E705A90;
    v12[1] = a1;
    v12[3] = v10;
    v12[4] = v12;
    *((void *)a1 + 16) = re::EventBus::subscribe<re::ecs2::Entity,RENetworkAssetRemovedEvent>(v6, 0, (uint64_t)v12, 0, 0);
    *((void *)a1 + 17) = v11;
    return (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::destroyCallable((uint64_t)v12);
  }
  return result;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v14[8] = *MEMORY[0x263EF8340];
  uint64_t Type = re::EventBus::getTypeId<RENetworkAssetAddedEvent>();
  unint64_t EventInfo = re::EventBus::addOrGetEventInfo(a1, Type);
  re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(a3, a5, v14);
  uint64_t v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v14);
  return v12;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v14[8] = *MEMORY[0x263EF8340];
  uint64_t Type = re::EventBus::getTypeId<RENetworkAssetRemovedEvent>();
  unint64_t EventInfo = re::EventBus::addOrGetEventInfo(a1, Type);
  re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(a3, a5, v14);
  uint64_t v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v14);
  return v12;
}

uint64_t re::VideoManager::deinit(re::VideoManager *this)
{
  re::VideoProcessor::deinit((pthread_t **)this + 19);
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    uint64_t result = re::ServiceLocator::serviceOrNull<re::EventBus>(result);
    if (result)
    {
      uint64_t v3 = result;
      re::EventBus::unsubscribe(result, *((void *)this + 14), *((void *)this + 15));
      uint64_t result = re::EventBus::unsubscribe(v3, *((void *)this + 16), *((void *)this + 17));
    }
  }
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0;
  return result;
}

void re::VideoManager::~VideoManager(re::VideoManager *this)
{
}

{
  uint64_t vars8;

  re::VideoManager::~VideoManager(this);
  JUMPOUT(0x237DBCBD0);
}

void re::VideoManager::initializeVideoProcessorIfNeeded(re::VideoManager *this, re::RenderManager *a2)
{
  unint64_t v2 = (re::VideoManager *)((char *)this + 152);
  if (*((void *)this + 19)) {
    return;
  }
  if (!a2)
  {
    uint64_t v4 = *re::videoLogObjects(this);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v5 = "Unable to initialize RE Video Processor. The given RenderManager is not valid.";
LABEL_10:
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, v5, buf, 2u);
    return;
  }
  uint64_t v3 = *((void *)a2 + 7);
  if (v3)
  {
    id v7 = *((id *)a2 + 23);
    id v6 = *(id *)(v3 + 248);
    re::VideoProcessor::init(v2, &v7, &v6);

    return;
  }
  uint64_t v4 = *re::videoLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    uint64_t v5 = "Unable to initialize RE Video Processor. The given ShaderManager is not valid.";
    goto LABEL_10;
  }
}

void re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = a3[1];
    uint64_t v6 = *(void *)(a1 + 8) + 8;
    do
    {
      uint64_t v7 = *(void *)v5;
      if (*(unsigned char *)(*(void *)v5 + 144)) {
        uint64_t v8 = *(const char **)(v7 + 152);
      }
      else {
        uint64_t v8 = (const char *)(v7 + 145);
      }
      uint64_t v9 = re::VideoAsset::assetType((re::VideoAsset *)a1);
      a1 = strcmp(v8, (const char *)*v9);
      if (!a1)
      {
        uint64_t v11 = *a3;
        a1 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v6, &v11);
      }
      v5 += 8;
      --v3;
    }
    while (v3);
  }
  return 0;
}

void *re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E705A28;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E705A28;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::size()
{
  return 16;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
  }
  return result;
}

void re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = a3[1];
    uint64_t v6 = *(void *)(a1 + 8) + 8;
    do
    {
      uint64_t v7 = *(void *)v5;
      if (*(unsigned char *)(*(void *)v5 + 144)) {
        uint64_t v8 = *(const char **)(v7 + 152);
      }
      else {
        uint64_t v8 = (const char *)(v7 + 145);
      }
      uint64_t v9 = re::VideoAsset::assetType((re::VideoAsset *)a1);
      a1 = strcmp(v8, (const char *)*v9);
      if (!a1)
      {
        uint64_t v11 = *a3;
        a1 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v6, &v11);
      }
      v5 += 8;
      --v3;
    }
    while (v3);
  }
  return 0;
}

void *re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E705A90;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E705A90;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::size()
{
  return 16;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
  }
  return result;
}

uint64_t (***re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, void *a3@<X8>))(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = 0;
  if (a2)
  {
    uint64_t v6 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v6)[2];
    a3[7] = 0;
    uint64_t v5 = &unk_26E705AF8;
  }
  else
  {
    uint64_t v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v4)[2];
    a3[7] = 0;
    uint64_t v5 = &unk_26E705B50;
  }
  *a3 = v5;
  a3[4] = v9;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v8);
  a3[7] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::destroyCallable((uint64_t)v8);
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E705AF8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E705AF8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
  return 1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E705AF8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E705AF8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E705B50;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E705B50;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E705B50;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E705B50;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t (***re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, void *a3@<X8>))(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = 0;
  if (a2)
  {
    uint64_t v6 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v6)[2];
    a3[7] = 0;
    uint64_t v5 = &unk_26E705BA8;
  }
  else
  {
    uint64_t v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v4)[2];
    a3[7] = 0;
    uint64_t v5 = &unk_26E705C00;
  }
  *a3 = v5;
  a3[4] = v9;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v8);
  a3[7] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::destroyCallable((uint64_t)v8);
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E705BA8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E705BA8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
  return 1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E705BA8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E705BA8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E705C00;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E705C00;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E705C00;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E705C00;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter(uint64_t a1, int a2, unsigned __int8 *a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 104) = 10;
  *(unsigned char *)(a1 + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 26re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  re::ecs2::SerializedMaterialParameter::setValue((unsigned __int8 *)a1, a2, a3);
  return a1;
}

void re::ecs2::SerializedMaterialParameter::setValue(unsigned __int8 *a1, int a2, unsigned __int8 *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *a1 = a2;
  if (a2 > 47)
  {
    if (a2 > 63)
    {
      if (a2 == 64 || a2 == 128 || a2 == 192)
      {
LABEL_12:
        uint64_t v6 = *re::graphicsLogObjects((re *)a1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          int v7 = *a1;
          v8[0] = 67109120;
          v8[1] = v7;
          _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot memcpy data in SerializedMaterialParameter for parameter type %hhu", (uint8_t *)v8, 8u);
        }
      }
    }
    else if ((a2 - 48) < 3)
    {
LABEL_3:
      memcpy(a1 + 16, a3, v5);
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        goto LABEL_12;
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 20:
      case 21:
      case 32:
      case 33:
      case 34:
        goto LABEL_3;
      case 2:
        a1[16] = *a3;
        break;
      default:
        return;
    }
  }
}

uint64_t re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter(uint64_t a1, const re::AssetHandle *a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v3 = a1 + 80;
  *(_WORD *)(a1 + 104) = 10;
  *(unsigned char *)(a1 + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 26re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, a2);
  *(unsigned char *)a1 = 64;
  re::AssetHandle::operator=(v3, v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return a1;
}

uint64_t re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter(uint64_t a1, char a2, uint64_t *a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 104) = 10;
  *(unsigned char *)(a1 + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 26re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  re::ecs2::SerializedMaterialParameter::setValue((unsigned char *)a1, a2, a3);
  return a1;
}

uint64_t re::ecs2::SerializedMaterialParameter::setValue(unsigned char *a1, char a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v3 = (uint64_t)(a1 + 208);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v5, a3);
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v3, (uint64_t)v5);
  uint64_t result = v5[0];
  if (v5[0])
  {
    if (v5[4]) {
      return (*(uint64_t (**)(void))(*(void *)v5[0] + 40))();
    }
  }
  return result;
}

uint64_t anonymous namespace'::calculateByteSize(int a1)
{
  if (a1 > 47)
  {
    if (a1 <= 63)
    {
      switch(a1)
      {
        case '0':
          return 16;
        case '1':
          return 48;
        case '2':
          return 64;
      }
    }
    return 0;
  }
  uint64_t result = 1;
  switch(a1)
  {
    case 1:
    case 3:
    case 7:
      uint64_t result = 4;
      break;
    case 2:
      return result;
    case 4:
    case 8:
    case 32:
      uint64_t result = 8;
      break;
    case 5:
    case 6:
    case 9:
    case 10:
    case 33:
    case 34:
      return 16;
    case 20:
    case 21:
      uint64_t result = 20;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t re::OptionalMaterialSamplerData::operator=(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = *(unsigned char *)a2;
  int v2 = *(unsigned __int8 *)(a2 + 1);
  if (*(unsigned char *)(result + 1)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 == 0;
  }
  if (!v3)
  {
    if (*(unsigned char *)(result + 1)) {
      BOOL v4 = v2 == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4)
    {
      *(unsigned char *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
    }
    else
    {
      if (*(unsigned char *)(result + 1)) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = v2 == 0;
      }
      if (!v5) {
        *(unsigned char *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 1;
      }
      *(unsigned char *)(result + 2) = *(unsigned char *)(a2 + 2);
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 3);
  if (*(unsigned char *)(result + 3)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7)
  {
    if (*(unsigned char *)(result + 3)) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      *(unsigned char *)(result + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0;
    }
    else
    {
      if (!*(unsigned char *)(result + 3) && *(unsigned char *)(a2 + 3)) {
        *(unsigned char *)(result + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 1;
      }
      *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 4);
    }
  }
  if (*(unsigned char *)(result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *(unsigned char *)(a2 + 8) == 0;
  }
  if (!v9)
  {
    if (!*(unsigned char *)(result + 8) || *(unsigned char *)(a2 + 8))
    {
      if (!*(unsigned char *)(result + 8) && *(unsigned char *)(a2 + 8)) {
        *(unsigned char *)(result + 8) = 1;
      }
      *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      *(unsigned char *)(result + 8) = 0;
    }
  }
  if (*(unsigned char *)(result + 16) || *(unsigned char *)(a2 + 16))
  {
    if (!*(unsigned char *)(result + 16) || *(unsigned char *)(a2 + 16))
    {
      if (!*(unsigned char *)(result + 16) && *(unsigned char *)(a2 + 16)) {
        *(unsigned char *)(result + 16) = 1;
      }
      *(_DWORD *)(result + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *(_DWORD *)(a2 + 20);
    }
    else
    {
      *(unsigned char *)(result + 16) = 0;
    }
  }
  if (*(unsigned char *)(result + 24) || *(unsigned char *)(a2 + 24))
  {
    if (!*(unsigned char *)(result + 24) || *(unsigned char *)(a2 + 24))
    {
      if (!*(unsigned char *)(result + 24) && *(unsigned char *)(a2 + 24)) {
        *(unsigned char *)(result + 24) = 1;
      }
      *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
    }
    else
    {
      *(unsigned char *)(result + 24) = 0;
    }
  }
  if (*(unsigned char *)(result + 32) || *(unsigned char *)(a2 + 32))
  {
    if (!*(unsigned char *)(result + 32) || *(unsigned char *)(a2 + 32))
    {
      if (!*(unsigned char *)(result + 32) && *(unsigned char *)(a2 + 32)) {
        *(unsigned char *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 1;
      }
      *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
    }
    else
    {
      *(unsigned char *)(result + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
    }
  }
  if (*(unsigned char *)(result + 40) || *(unsigned char *)(a2 + 40))
  {
    if (!*(unsigned char *)(result + 40) || *(unsigned char *)(a2 + 40))
    {
      if (!*(unsigned char *)(result + 40) && *(unsigned char *)(a2 + 40)) {
        *(unsigned char *)(result + 40) = 1;
      }
      *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
    }
    else
    {
      *(unsigned char *)(result + 40) = 0;
    }
  }
  if (*(unsigned char *)(result + 48) || *(unsigned char *)(a2 + 48))
  {
    if (!*(unsigned char *)(result + 48) || *(unsigned char *)(a2 + 48))
    {
      if (!*(unsigned char *)(result + 48) && *(unsigned char *)(a2 + 48)) {
        *(unsigned char *)(result + 48) = 1;
      }
      *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
    }
    else
    {
      *(unsigned char *)(result + 48) = 0;
    }
  }
  if (*(unsigned char *)(result + 56) || *(unsigned char *)(a2 + 56))
  {
    if (!*(unsigned char *)(result + 56) || *(unsigned char *)(a2 + 56))
    {
      if (!*(unsigned char *)(result + 56) && *(unsigned char *)(a2 + 56)) {
        *(unsigned char *)(result + 56) = 1;
      }
      *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
    }
    else
    {
      *(unsigned char *)(result + 56) = 0;
    }
  }
  if (*(unsigned char *)(result + 64) || *(unsigned char *)(a2 + 64))
  {
    if (!*(unsigned char *)(result + 64) || *(unsigned char *)(a2 + 64))
    {
      if (!*(unsigned char *)(result + 64) && *(unsigned char *)(a2 + 64)) {
        *(unsigned char *)(result + 64) = 1;
      }
      *(_DWORD *)(result + 68) = *(_DWORD *)(a2 + 68);
    }
    else
    {
      *(unsigned char *)(result + 64) = 0;
    }
  }
  if (*(unsigned char *)(result + 72) || *(unsigned char *)(a2 + 72))
  {
    if (!*(unsigned char *)(result + 72) || *(unsigned char *)(a2 + 72))
    {
      if (!*(unsigned char *)(result + 72) && *(unsigned char *)(a2 + 72)) {
        *(unsigned char *)(result + 72) = 1;
      }
      *(_DWORD *)(result + 76) = *(_DWORD *)(a2 + 76);
    }
    else
    {
      *(unsigned char *)(result + 72) = 0;
    }
  }
  if (*(unsigned char *)(result + 80) || *(unsigned char *)(a2 + 80))
  {
    if (!*(unsigned char *)(result + 80) || *(unsigned char *)(a2 + 80))
    {
      if (!*(unsigned char *)(result + 80) && *(unsigned char *)(a2 + 80)) {
        *(unsigned char *)(result + 80) = 1;
      }
      *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 84);
    }
    else
    {
      *(unsigned char *)(result + 80) = 0;
    }
  }
  if (*(unsigned char *)(result + 88) || *(unsigned char *)(a2 + 88))
  {
    if (!*(unsigned char *)(result + 88) || *(unsigned char *)(a2 + 88))
    {
      if (!*(unsigned char *)(result + 88))
      {
        if (*(unsigned char *)(a2 + 88)) {
          *(unsigned char *)(result + 88) = 1;
        }
      }
      *(void *)(result + 96) = *(void *)(a2 + 96);
    }
    else
    {
      *(unsigned char *)(result + 88) = 0;
    }
  }
  return result;
}

re::DynamicString *re::ecs2::SerializedMaterialParameter::toString(re::ecs2::SerializedMaterialParameter *this, unsigned __int8 *a2)
{
  int v2 = a2;
  BOOL v3 = this;
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = 0;
  if (*a2 <= 0x2Fu)
  {
    switch(*a2)
    {
      case 1u:
      case 0x14u:
      case 0x15u:
      case 0x20u:
      case 0x21u:
      case 0x22u:
        goto LABEL_6;
      case 2u:
        if (a2[16]) {
          uint64_t v30 = "true";
        }
        else {
          uint64_t v30 = "false";
        }
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        goto LABEL_4;
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
        uint64_t v4 = 1;
LABEL_4:
        uint64_t v6 = 1;
        goto LABEL_6;
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
        __break(1u);
        JUMPOUT(0x233973B14);
      default:
        *(_OWORD *)this = 0u;
        *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
        return (re::DynamicString *)re::DynamicString::setCapacity(v3, 0);
    }
  }
  if (*a2 <= 0x3Fu)
  {
LABEL_6:
    unsigned int v7 = 2;
    unsigned int v8 = 1;
    if (*a2 <= 0x1Fu)
    {
      int v9 = 3;
      int v10 = 4;
      switch(*a2)
      {
        case 4u:
        case 8u:
          goto LABEL_29;
        case 5u:
        case 9u:
          goto LABEL_8;
        case 6u:
        case 0xAu:
          goto LABEL_18;
        case 0x14u:
          goto LABEL_66;
        case 0x15u:
          unsigned int v7 = 5;
          goto LABEL_29;
        default:
          goto LABEL_25;
      }
    }
    if (*a2 > 0x2Fu)
    {
      if (v5 == 48)
      {
LABEL_18:
        unsigned int v7 = 4;
        goto LABEL_29;
      }
      if (v5 == 49)
      {
LABEL_24:
        unsigned int v8 = 3;
        goto LABEL_25;
      }
      if (v5 != 50) {
        goto LABEL_25;
      }
      unsigned int v7 = 16;
    }
    else if (v5 != 32)
    {
      if (v5 != 33)
      {
        if (v5 != 34)
        {
LABEL_25:
          if (v5 <= 0x32)
          {
            if (((1 << v5) & 0x50005002005DELL) != 0)
            {
              unsigned int v7 = v8;
              goto LABEL_29;
            }
            if (v5 == 20)
            {
              int v10 = v8;
LABEL_66:
              unsigned int v7 = 5;
              int v11 = 1;
              unsigned int v8 = v10;
              goto LABEL_30;
            }
            if (v5 == 49)
            {
              unsigned int v7 = 4;
              int v11 = 3;
              goto LABEL_30;
            }
          }
          int v9 = v8;
LABEL_8:
          unsigned int v7 = 4;
          int v11 = 1;
          unsigned int v8 = v9;
          goto LABEL_30;
        }
        goto LABEL_18;
      }
      goto LABEL_24;
    }
LABEL_29:
    int v11 = 1;
    unsigned int v8 = v7;
LABEL_30:
    unsigned int v14 = v11 * v8;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
    re::DynamicString::setCapacity(v3, 0);
    if (v11 * v8 != 1) {
      re::DynamicString::append(v3, "[", 1uLL);
    }
    int v15 = 0;
    uint64_t v16 = v5 & 0xFE;
    uint64_t v33 = v8 - 1;
    uint64_t v31 = 4 * v7;
    uint64_t v32 = v8;
    int v17 = 1;
    uint64_t v18 = 16;
    int v34 = v11;
    unsigned int v35 = v8;
    int v39 = v11 * v8;
    do
    {
      int v37 = v17;
      int v38 = v15;
      unsigned int v19 = v17;
      uint64_t v36 = v18;
      uint64_t v21 = v32;
      uint64_t v20 = v33;
      do
      {
        if (v6)
        {
          if (v4) {
            uint64_t result = (re::DynamicString *)re::DynamicString::appendf(v3, "%uu");
          }
          else {
            uint64_t result = (re::DynamicString *)re::DynamicString::appendf(v3, "%di");
          }
        }
        else if (v16 != 20 || v20)
        {
          uint64_t result = (re::DynamicString *)re::DynamicString::appendf(v3, "%ff");
        }
        else
        {
          uint64_t v22 = v2[32];
          uint64_t v23 = v16;
          uint64_t v24 = v6;
          uint64_t v25 = v2;
          uint64_t v26 = v4;
          uint64_t v27 = re::ColorHelpers::getColorGamutSerializationLiteral(re::ColorGamut const&)::kGamutToLiterals[v22];
          size_t v28 = strlen(v27);
          float v29 = v27;
          uint64_t v4 = v26;
          int v2 = v25;
          uint64_t v6 = v24;
          uint64_t v16 = v23;
          unsigned int v14 = v39;
          uint64_t result = (re::DynamicString *)re::DynamicString::append(v3, v29, v28);
        }
        if (v19 < v14) {
          uint64_t result = (re::DynamicString *)re::DynamicString::appendf(v3, ", ");
        }
        --v20;
        v18 += 4;
        ++v19;
        --v21;
      }
      while (v21);
      int v15 = v38 + 1;
      uint64_t v18 = v36 + v31;
      int v17 = v37 + v35;
    }
    while (v38 + 1 != v34);
    if (*v2 == 48) {
      uint64_t result = (re::DynamicString *)re::DynamicString::append(v3, ", matrix", 8uLL);
    }
    if (v14 != 1)
    {
      return (re::DynamicString *)re::DynamicString::append(v3, "]", 1uLL);
    }
    return result;
  }
  if (v5 == 64)
  {
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
    re::DynamicString::setCapacity(v3, 0);
    v41[0] = 0;
    re::AssetSerializationScheme::commonCodingKey(v3, (re::DynamicString *)(v2 + 80), (const re::AssetHandle *)0xD, v41);
    return (re::DynamicString *)re::Optional<re::AssetPath>::~Optional(v41);
  }
  else
  {
    if ((atomic_exchange(re::ecs2::SerializedMaterialParameter::toString(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      uint64_t v12 = *re::graphicsLogObjects(this);
      this = (re::ecs2::SerializedMaterialParameter *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      if (this)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "Buffer and sampler types cannot be converted to string\n", buf, 2u);
      }
    }
    *(_OWORD *)BOOL v3 = 0u;
    *((_OWORD *)v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
    return (re::DynamicString *)re::DynamicString::setCapacity(v3, 0);
  }
}

void *re::IntrospectionInfo<float [16]>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<float [16]>::get(BOOL)::info);
  }
  if (a1)
  {
    if (re::IntrospectionInfo<float [16]>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<float [16]>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    int v3 = re::IntrospectionInfo<float [16]>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    if (v3) {
      return &re::IntrospectionInfo<float [16]>::get(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::IntrospectionInfo<float [16]>::get(BOOL)::isInitialized)
    {
LABEL_14:
      int v11 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v11);
      return &re::IntrospectionInfo<float [16]>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<float [16]>::get(BOOL)::isInitialized = 1;
  unsigned int v7 = (const re::IntrospectionBase *)re::introspect_float((re *)1, a2);
  re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<float [16]>::get(BOOL)::info, v7, 16);
  re::IntrospectionRegistry::add(v8, v9);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<float [16]>::get(BOOL)::info, (const re::IntrospectionBase *)&v14);
  if (BYTE8(v14)) {
    int v10 = v15;
  }
  else {
    int v10 = (char *)&v14 + 9;
  }
  if (void)v14 && (BYTE8(v14)) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  long long v14 = *((_OWORD *)v7 + 2);
  xmmword_268774DB8 = v13;
  re::StringID::destroyString((re::StringID *)v16);
  if ((a1 & 1) == 0) {
    goto LABEL_14;
  }
  return &re::IntrospectionInfo<float [16]>::get(BOOL)::info;
}

void *re::ecs2::allocInfo_SerializedMaterialParameter(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D8A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8DDD0, "SerializedMaterialParameter");
    __cxa_guard_release(&qword_26AF8D8A8);
  }
  return &unk_26AF8DDD0;
}

void re::ecs2::initInfo_SerializedMaterialParameter(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v25[0] = 0xCB7C4AF26B0E69FCLL;
  v25[1] = "SerializedMaterialParameter";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D8A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8D8A0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unsigned int v7 = re::introspect_MaterialParameterType((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "ValueType";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF8D9E8 = v8;
      int v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::IntrospectionInfo<float [16]>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_floatValues";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF8D9F0 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      int v15 = re::introspect_AssetHandle((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_assetHandleValue";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x5000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF8D9F8 = v16;
      int v17 = re::introspectionAllocator((re *)v16);
      uint64_t v18 = re::introspect_OptionalMaterialSamplerData((re::IntrospectionBase **)1);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "m_samplerValue";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x6800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8DA00 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "m_bufferData";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0xD000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF8DA08 = v23;
      __cxa_guard_release(&qword_26AF8D8A0);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF8D9E8;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::SerializedMaterialParameter>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SerializedMaterialParameter>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::SerializedMaterialParameter>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SerializedMaterialParameter>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

uint64_t re::internal::defaultConstruct<re::ecs2::SerializedMaterialParameter>(int a1, int a2, re::ecs2::SerializedMaterialParameter *this)
{
  return re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)this);
}

void re::internal::defaultDestruct<re::ecs2::SerializedMaterialParameter>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 256) = 0;
  re::DynamicArray<unsigned long>::deinit(a3 + 208);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 80));
}

void re::internal::defaultDestructV2<re::ecs2::SerializedMaterialParameter>(uint64_t a1)
{
  *(void *)(a1 + 256) = 0;
  re::DynamicArray<unsigned long>::deinit(a1 + 208);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
}

re::ecs2::SerializableMaterialParameterBlock *re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(re::ecs2::SerializableMaterialParameterBlock *this, const re::ecs2::SerializableMaterialParameterBlock *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)uint64_t v4 = &unk_26E705C78;
  *(_OWORD *)(v4 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0u;
  *(_DWORD *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(void *)((char *)this + 52) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *((_OWORD *)this + 4) = 0u;
  *(void *)((char *)this + 100) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0u;
  *(void *)((char *)this + 148) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_DWORD *)this + 48) = 0;
  *((_OWORD *)this + 10) = 0u;
  *(void *)((char *)this + 196) = 0x7FFFFFFFLL;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *(void *)((char *)this + 244) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0u;
  *((_DWORD *)this + 72) = 0;
  *(void *)((char *)this + 292) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 0;
  *(void *)((char *)this + 340) = 0x7FFFFFFFLL;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0u;
  *((_OWORD *)this + 2re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_DWORD *)this + 96) = 0;
  *(void *)((char *)this + 388) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 100) = 0;
  *((unsigned char *)this + 404) = 0;
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v4 + 16, (uint64_t)a2 + 16);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 64, (uint64_t)a2 + 64);
  re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 112, (uint64_t)a2 + 112);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 160, (uint64_t)a2 + 160);
  re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=((uint64_t)this + 208, (uint64_t)a2 + 208);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 256, (uint64_t)a2 + 256);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 304, (uint64_t)a2 + 304);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 352, (uint64_t)a2 + 352);
  *((unsigned char *)this + 404) = *((unsigned char *)a2 + 404);
  *((_DWORD *)this + 100) = 0;
  return this;
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t *re::ecs2::SerializableMaterialParameterBlock::allocator(re::ecs2::SerializableMaterialParameterBlock *this)
{
}

unsigned __int8 *re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(uint64_t a1, char *a2, int a3, unsigned __int8 *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 304;
  if (a2)
  {
    uint64_t v8 = *a2;
    if (*a2)
    {
      char v9 = a2[1];
      if (v9)
      {
        int v10 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v8 = 31 * v8 + v9;
          int v11 = *v10++;
          char v9 = v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  v16[0] = 2 * v8;
  v16[1] = a2;
  uint64_t v12 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, v16);
  re::StringID::destroyString((re::StringID *)v16);
  if (v12 && *v12 == a3)
  {
    re::ecs2::SerializedMaterialParameter::setValue(v12, a3, a4);
  }
  else
  {
    *(void *)&v15.var0 = 0;
    v15.var1 = "";
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v16, a3, a4);
    uint64_t v12 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, &v15, (uint64_t)v16, 2);
    uint64_t v23 = 0;
    if (v18)
    {
      if (v22) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 40))(v18, v22);
      }
      uint64_t v22 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v18 = 0;
      ++v21;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
    re::StringID::destroyString((re::StringID *)&v15);
  }
  return v12;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(uint64_t a1, StringID *a2, int a3, unsigned __int8 *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 304;
  uint64_t v8 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, a2);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    if (*v8 == a3)
    {
      re::ecs2::SerializedMaterialParameter::setValue(v8, a3, a4);
      return v9;
    }
    var1 = a2->var1;
    *(void *)&v14.var0 = 0;
    v14.var1 = "";
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v15, a3, a4);
    uint64_t v11 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, &v14, (uint64_t)v15, 2);
    goto LABEL_7;
  }
  if ((*(unsigned char *)&a2->var0 & 1) == 0)
  {
    int v10 = a2->var1;
    *(void *)&v14.var0 = 0;
    v14.var1 = "";
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v15, a3, a4);
    uint64_t v11 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, &v14, (uint64_t)v15);
LABEL_7:
    uint64_t v9 = v11;
    uint64_t v22 = 0;
    if (v17)
    {
      if (v21) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 40))(v17, v21);
      }
      uint64_t v21 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = 0;
      ++v20;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
    re::StringID::destroyString((re::StringID *)&v14);
    return v9;
  }
  re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v15, a3, a4);
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, a2, (uint64_t)v15);
  uint64_t v22 = 0;
  if (v17)
  {
    if (v21) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
    uint64_t v21 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    ++v20;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  return v9;
}

void re::ecs2::SerializableMaterialParameterBlock::BOOLValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = (unsigned char *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *v9 == 2)
  {
    BOOL v10 = v9[16] != 0;
    *a3 = 1;
    a3[1] = v10;
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 320 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 320 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 320 * v4 + 32;
}

void re::ecs2::SerializableMaterialParameterBlock::floatValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 1)
  {
    int v10 = *(_DWORD *)(v9 + 16);
    *(unsigned char *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::intValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 3)
  {
    int v10 = *(_DWORD *)(v9 + 16);
    *(unsigned char *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::uintValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 7)
  {
    int v10 = *(_DWORD *)(v9 + 16);
    *(unsigned char *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::vector2FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 32)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::vector3FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 33)
  {
    *(void *)&long long v10 = *(void *)(v9 + 16);
    DWORD2(v10) = *(_DWORD *)(v9 + 24);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::vector4FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 34)
  {
    long long v10 = *(_OWORD *)(v9 + 16);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  *(void *)&long long v5 = a3;
  *((void *)&v5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = a4;
  long long v49 = v5;
  int v50 = BYTE4(a4);
  char v6 = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1, a2, 20, (unsigned __int8 *)&v49);
  long long v14 = *(_OWORD *)v6;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v15, (const re::AssetHandle *)(v6 + 80));
  v15[24] = v6[104];
  if (v6[105]) {
    unsigned __int8 v17 = v6[106];
  }
  if (v6[107]) {
    unsigned __int8 v19 = v6[108];
  }
  if (v6[112]) {
    int v21 = *((_DWORD *)v6 + 29);
  }
  if (v6[120]) {
    int v23 = *((_DWORD *)v6 + 31);
  }
  if (v6[128]) {
    int v25 = *((_DWORD *)v6 + 33);
  }
  if (v6[136]) {
    int v27 = *((_DWORD *)v6 + 35);
  }
  if (v6[144]) {
    int v29 = *((_DWORD *)v6 + 37);
  }
  if (v6[152]) {
    int v31 = *((_DWORD *)v6 + 39);
  }
  if (v6[160]) {
    int v33 = *((_DWORD *)v6 + 41);
  }
  if (v6[168]) {
    int v35 = *((_DWORD *)v6 + 43);
  }
  if (v6[176]) {
    int v37 = *((_DWORD *)v6 + 45);
  }
  if (v6[184]) {
    int v39 = *((_DWORD *)v6 + 47);
  }
  if (v6[192]) {
    uint64_t v41 = *((void *)v6 + 25);
  }
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v42, (uint64_t *)v6 + 26);
  unsigned __int8 v13 = v6[280];
  long long v47 = *(_OWORD *)(v6 + 264);
  unsigned __int8 v48 = v13;
  char v45 = 1;
  ++*(_DWORD *)(a1 + 400);
  uint64_t v46 = 0;
  if (v42[0])
  {
    if (v44) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v42[0] + 40))(v42[0], v44, v7, v8, v9, v10, v11, v12, v14, *((void *)&v14 + 1));
    }
    uint64_t v44 = 0;
    memset(v42, 0, sizeof(v42));
    ++v43;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
}

void re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F(uint64_t a1, StringID *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  *(void *)&long long v5 = a3;
  *((void *)&v5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = a4;
  long long v49 = v5;
  int v50 = BYTE4(a4);
  uint64_t v6 = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1, a2, 20, (unsigned __int8 *)&v49);
  long long v14 = *(_OWORD *)v6;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v15, (const re::AssetHandle *)(v6 + 80));
  v15[24] = *(unsigned char *)(v6 + 104);
  if (*(unsigned char *)(v6 + 105)) {
    char v17 = *(unsigned char *)(v6 + 106);
  }
  if (*(unsigned char *)(v6 + 107)) {
    char v19 = *(unsigned char *)(v6 + 108);
  }
  if (*(unsigned char *)(v6 + 112)) {
    int v21 = *(_DWORD *)(v6 + 116);
  }
  if (*(unsigned char *)(v6 + 120)) {
    int v23 = *(_DWORD *)(v6 + 124);
  }
  if (*(unsigned char *)(v6 + 128)) {
    int v25 = *(_DWORD *)(v6 + 132);
  }
  if (*(unsigned char *)(v6 + 136)) {
    int v27 = *(_DWORD *)(v6 + 140);
  }
  if (*(unsigned char *)(v6 + 144)) {
    int v29 = *(_DWORD *)(v6 + 148);
  }
  if (*(unsigned char *)(v6 + 152)) {
    int v31 = *(_DWORD *)(v6 + 156);
  }
  if (*(unsigned char *)(v6 + 160)) {
    int v33 = *(_DWORD *)(v6 + 164);
  }
  if (*(unsigned char *)(v6 + 168)) {
    int v35 = *(_DWORD *)(v6 + 172);
  }
  if (*(unsigned char *)(v6 + 176)) {
    int v37 = *(_DWORD *)(v6 + 180);
  }
  if (*(unsigned char *)(v6 + 184)) {
    int v39 = *(_DWORD *)(v6 + 188);
  }
  if (*(unsigned char *)(v6 + 192)) {
    uint64_t v41 = *(void *)(v6 + 200);
  }
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v42, (uint64_t *)(v6 + 208));
  char v13 = *(unsigned char *)(v6 + 280);
  long long v47 = *(_OWORD *)(v6 + 264);
  char v48 = v13;
  char v45 = 1;
  ++*(_DWORD *)(a1 + 400);
  uint64_t v46 = 0;
  if (v42[0])
  {
    if (v44) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v42[0] + 40))(v42[0], v44, v7, v8, v9, v10, v11, v12, v14, *((void *)&v14 + 1));
    }
    uint64_t v44 = 0;
    memset(v42, 0, sizeof(v42));
    ++v43;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
}

void re::ecs2::SerializableMaterialParameterBlock::colorGamut3FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v12[0] = 2 * v5;
  v12[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v12);
  re::StringID::destroyString((re::StringID *)v12);
  if (v9 && *(unsigned char *)v9 == 20)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    unint64_t v11 = *(unsigned int *)(v9 + 24) | ((unint64_t)*(unsigned __int8 *)(v9 + 32) << 32);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 4) = v10;
    *(void *)(a3 + 12) = v11;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(uint64_t a1, char *a2, long long *a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  long long v47 = *a3;
  int v48 = *((unsigned __int8 *)a3 + 16);
  uint64_t v4 = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1, a2, 21, (unsigned __int8 *)&v47);
  long long v12 = *(_OWORD *)v4;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)(v4 + 80));
  unsigned char v13[24] = v4[104];
  if (v4[105]) {
    unsigned __int8 v15 = v4[106];
  }
  if (v4[107]) {
    unsigned __int8 v17 = v4[108];
  }
  if (v4[112]) {
    int v19 = *((_DWORD *)v4 + 29);
  }
  if (v4[120]) {
    int v21 = *((_DWORD *)v4 + 31);
  }
  if (v4[128]) {
    int v23 = *((_DWORD *)v4 + 33);
  }
  if (v4[136]) {
    int v25 = *((_DWORD *)v4 + 35);
  }
  if (v4[144]) {
    int v27 = *((_DWORD *)v4 + 37);
  }
  if (v4[152]) {
    int v29 = *((_DWORD *)v4 + 39);
  }
  if (v4[160]) {
    int v31 = *((_DWORD *)v4 + 41);
  }
  if (v4[168]) {
    int v33 = *((_DWORD *)v4 + 43);
  }
  if (v4[176]) {
    int v35 = *((_DWORD *)v4 + 45);
  }
  if (v4[184]) {
    int v37 = *((_DWORD *)v4 + 47);
  }
  if (v4[192]) {
    uint64_t v39 = *((void *)v4 + 25);
  }
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v40, (uint64_t *)v4 + 26);
  unsigned __int8 v11 = v4[280];
  long long v45 = *(_OWORD *)(v4 + 264);
  unsigned __int8 v46 = v11;
  char v43 = 1;
  ++*(_DWORD *)(a1 + 400);
  uint64_t v44 = 0;
  if (v40[0])
  {
    if (v42) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v40[0] + 40))(v40[0], v42, v5, v6, v7, v8, v9, v10, v12, *((void *)&v12 + 1));
    }
    uint64_t v42 = 0;
    memset(v40, 0, sizeof(v40));
    ++v41;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
}

void re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(uint64_t a1, StringID *a2, long long *a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  long long v47 = *a3;
  int v48 = *((unsigned __int8 *)a3 + 16);
  uint64_t v4 = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1, a2, 21, (unsigned __int8 *)&v47);
  long long v12 = *(_OWORD *)v4;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)(v4 + 80));
  unsigned char v13[24] = *(unsigned char *)(v4 + 104);
  if (*(unsigned char *)(v4 + 105)) {
    char v15 = *(unsigned char *)(v4 + 106);
  }
  if (*(unsigned char *)(v4 + 107)) {
    char v17 = *(unsigned char *)(v4 + 108);
  }
  if (*(unsigned char *)(v4 + 112)) {
    int v19 = *(_DWORD *)(v4 + 116);
  }
  if (*(unsigned char *)(v4 + 120)) {
    int v21 = *(_DWORD *)(v4 + 124);
  }
  if (*(unsigned char *)(v4 + 128)) {
    int v23 = *(_DWORD *)(v4 + 132);
  }
  if (*(unsigned char *)(v4 + 136)) {
    int v25 = *(_DWORD *)(v4 + 140);
  }
  if (*(unsigned char *)(v4 + 144)) {
    int v27 = *(_DWORD *)(v4 + 148);
  }
  if (*(unsigned char *)(v4 + 152)) {
    int v29 = *(_DWORD *)(v4 + 156);
  }
  if (*(unsigned char *)(v4 + 160)) {
    int v31 = *(_DWORD *)(v4 + 164);
  }
  if (*(unsigned char *)(v4 + 168)) {
    int v33 = *(_DWORD *)(v4 + 172);
  }
  if (*(unsigned char *)(v4 + 176)) {
    int v35 = *(_DWORD *)(v4 + 180);
  }
  if (*(unsigned char *)(v4 + 184)) {
    int v37 = *(_DWORD *)(v4 + 188);
  }
  if (*(unsigned char *)(v4 + 192)) {
    uint64_t v39 = *(void *)(v4 + 200);
  }
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v40, (uint64_t *)(v4 + 208));
  char v11 = *(unsigned char *)(v4 + 280);
  long long v45 = *(_OWORD *)(v4 + 264);
  char v46 = v11;
  char v43 = 1;
  ++*(_DWORD *)(a1 + 400);
  uint64_t v44 = 0;
  if (v40[0])
  {
    if (v42) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v40[0] + 40))(v40[0], v42, v5, v6, v7, v8, v9, v10, v12, *((void *)&v12 + 1));
    }
    uint64_t v42 = 0;
    memset(v40, 0, sizeof(v40));
    ++v41;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
}

void re::ecs2::SerializableMaterialParameterBlock::colorGamut4FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v12[0] = 2 * v5;
  v12[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v12);
  re::StringID::destroyString((re::StringID *)v12);
  if (v9 && *(unsigned char *)v9 == 21)
  {
    long long v10 = *(_OWORD *)(v9 + 16);
    int v11 = *(_DWORD *)(v9 + 32);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 4) = v10;
    *(unsigned char *)(a3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v11;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::int2Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 4)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::int3Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 5)
  {
    *(void *)&long long v10 = *(void *)(v9 + 16);
    DWORD2(v10) = *(_DWORD *)(v9 + 24);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::int4Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 6)
  {
    long long v10 = *(_OWORD *)(v9 + 16);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::uint2Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 8)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::uint3Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 9)
  {
    *(void *)&long long v10 = *(void *)(v9 + 16);
    DWORD2(v10) = *(_DWORD *)(v9 + 24);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::uint4Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(unsigned char *)v9 == 10)
  {
    long long v10 = *(_OWORD *)(v9 + 16);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::matrix2x2FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v12[0] = 2 * v5;
  v12[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v12);
  re::StringID::destroyString((re::StringID *)v12);
  if (v9 && *(unsigned char *)v9 == 48)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    uint64_t v11 = *(void *)(v9 + 24);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v11;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::matrix3x3FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v13[0] = 2 * v5;
  v13[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v13);
  re::StringID::destroyString((re::StringID *)v13);
  if (v9 && *(unsigned char *)v9 == 49)
  {
    *(void *)&long long v10 = *(void *)(v9 + 16);
    *(void *)&long long v11 = *(void *)(v9 + 32);
    *(void *)&long long v12 = *(void *)(v9 + 48);
    DWORD2(v10) = *(_DWORD *)(v9 + 24);
    DWORD2(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v9 + 40);
    DWORD2(v12) = *(_DWORD *)(v9 + 56);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
    *(_OWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = v11;
    *(_OWORD *)(a3 + 48) = v12;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::matrix4x4FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v14[0] = 2 * v5;
  v14[1] = a2;
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v14);
  re::StringID::destroyString((re::StringID *)v14);
  if (v9 && *(unsigned char *)v9 == 50)
  {
    long long v10 = *(_OWORD *)(v9 + 16);
    long long v11 = *(_OWORD *)(v9 + 32);
    long long v12 = *(_OWORD *)(v9 + 48);
    long long v13 = *(_OWORD *)(v9 + 64);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
    *(_OWORD *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = v11;
    *(_OWORD *)(a3 + 48) = v12;
    *(_OWORD *)(a3 + 64) = v13;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::setTexture(uint64_t a1, char *a2, const re::AssetHandle *a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  re::AssetHandle::AssetHandle((re::AssetHandle *)v17, a3);
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        int v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)&v20[0] = 2 * v6;
  *((void *)&v20[0] + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = a2;
  uint64_t v10 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, v20);
  re::StringID::destroyString((re::StringID *)v20);
  if (v10 && *(unsigned char *)v10 == 64)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v20, (const re::AssetHandle *)v17);
    *(unsigned char *)uint64_t v10 = 64;
    re::AssetHandle::operator=(v10 + 80, (uint64_t *)v20);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
  }
  else
  {
    *(void *)&v19.var0 = 0;
    v19.var1 = "";
    re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v17);
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v20, (const re::AssetHandle *)v18);
    uint64_t v10 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 304, &v19, (uint64_t)v20, 2);
    uint64_t v54 = 0;
    if (v48)
    {
      if (v52) {
        (*(void (**)(void))(*(void *)v48 + 40))();
      }
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v48 = 0;
      ++v51;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::StringID::destroyString((re::StringID *)&v19);
  }
  v20[0] = *(_OWORD *)v10;
  long long v12 = *(_OWORD *)(v10 + 16);
  long long v13 = *(_OWORD *)(v10 + 32);
  long long v14 = *(_OWORD *)(v10 + 64);
  void v20[3] = *(_OWORD *)(v10 + 48);
  v20[4] = v14;
  v20[1] = v12;
  void v20[2] = v13;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v21, (const re::AssetHandle *)(v10 + 80));
  v21[24] = *(unsigned char *)(v10 + 104);
  if (*(unsigned char *)(v10 + 105)) {
    char v23 = *(unsigned char *)(v10 + 106);
  }
  if (*(unsigned char *)(v10 + 107)) {
    char v25 = *(unsigned char *)(v10 + 108);
  }
  if (*(unsigned char *)(v10 + 112)) {
    int v27 = *(_DWORD *)(v10 + 116);
  }
  if (*(unsigned char *)(v10 + 120)) {
    int v29 = *(_DWORD *)(v10 + 124);
  }
  if (*(unsigned char *)(v10 + 128)) {
    int v31 = *(_DWORD *)(v10 + 132);
  }
  if (*(unsigned char *)(v10 + 136)) {
    int v33 = *(_DWORD *)(v10 + 140);
  }
  if (*(unsigned char *)(v10 + 144)) {
    int v35 = *(_DWORD *)(v10 + 148);
  }
  if (*(unsigned char *)(v10 + 152)) {
    int v37 = *(_DWORD *)(v10 + 156);
  }
  if (*(unsigned char *)(v10 + 160)) {
    int v39 = *(_DWORD *)(v10 + 164);
  }
  if (*(unsigned char *)(v10 + 168)) {
    int v41 = *(_DWORD *)(v10 + 172);
  }
  if (*(unsigned char *)(v10 + 176)) {
    int v43 = *(_DWORD *)(v10 + 180);
  }
  if (*(unsigned char *)(v10 + 184)) {
    int v45 = *(_DWORD *)(v10 + 188);
  }
  if (*(unsigned char *)(v10 + 192)) {
    uint64_t v47 = *(void *)(v10 + 200);
  }
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v48, (uint64_t *)(v10 + 208));
  char v53 = *(unsigned char *)(v10 + 248);
  uint64_t v54 = *(void *)(v10 + 256);
  char v15 = *(unsigned char *)(v10 + 280);
  long long v55 = *(_OWORD *)(v10 + 264);
  char v56 = v15;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  uint64_t v16 = re::AssetHandle::loadedAsset<re::TextureAsset>(a3);
  if (v16) {
    char v53 = (*(_DWORD *)(v16 + 388) - 3) < 2;
  }
  ++*(_DWORD *)(a1 + 400);
  uint64_t v54 = 0;
  if (v48)
  {
    if (v52) {
      (*(void (**)(void))(*(void *)v48 + 40))();
    }
    uint64_t v52 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v48 = 0;
    ++v51;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
}

void re::ecs2::SerializableMaterialParameterBlock::setTexture(uint64_t a1, StringID *a2, const re::AssetHandle *a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  re::AssetHandle::AssetHandle((re::AssetHandle *)v17, a3);
  uint64_t v6 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, a2);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    if (*(unsigned char *)v6 == 64)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v20, (const re::AssetHandle *)v17);
      *(unsigned char *)uint64_t v7 = 64;
      re::AssetHandle::operator=(v7 + 80, (uint64_t *)v20);
      int v8 = (re::AssetHandle *)v20;
LABEL_17:
      re::AssetHandle::~AssetHandle(v8);
      goto LABEL_18;
    }
    var1 = a2->var1;
    *(void *)&v19.var0 = 0;
    v19.var1 = "";
    re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v17);
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v20, (const re::AssetHandle *)v18);
    uint64_t v10 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 304, &v19, (uint64_t)v20, 2);
  }
  else
  {
    if (*(unsigned char *)&a2->var0)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v17);
      re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v20, (const re::AssetHandle *)v18);
      uint64_t v7 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 304, a2, (uint64_t)v20);
      uint64_t v54 = 0;
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
        uint64_t v52 = 0;
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        uint64_t v48 = 0;
        ++v51;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
      int v8 = (re::AssetHandle *)v18;
      goto LABEL_17;
    }
    int v9 = a2->var1;
    *(void *)&v19.var0 = 0;
    v19.var1 = "";
    re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v17);
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v20, (const re::AssetHandle *)v18);
    uint64_t v10 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 304, &v19, (uint64_t)v20);
  }
  uint64_t v7 = v10;
  uint64_t v54 = 0;
  if (v48)
  {
    if (v52) {
      (*(void (**)(void))(*(void *)v48 + 40))();
    }
    uint64_t v52 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v48 = 0;
    ++v51;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
  re::StringID::destroyString((re::StringID *)&v19);
LABEL_18:
  v20[0] = *(_OWORD *)v7;
  long long v12 = *(_OWORD *)(v7 + 16);
  long long v13 = *(_OWORD *)(v7 + 32);
  long long v14 = *(_OWORD *)(v7 + 64);
  void v20[3] = *(_OWORD *)(v7 + 48);
  v20[4] = v14;
  v20[1] = v12;
  void v20[2] = v13;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v21, (const re::AssetHandle *)(v7 + 80));
  v21[24] = *(unsigned char *)(v7 + 104);
  if (*(unsigned char *)(v7 + 105)) {
    char v23 = *(unsigned char *)(v7 + 106);
  }
  if (*(unsigned char *)(v7 + 107)) {
    char v25 = *(unsigned char *)(v7 + 108);
  }
  if (*(unsigned char *)(v7 + 112)) {
    int v27 = *(_DWORD *)(v7 + 116);
  }
  if (*(unsigned char *)(v7 + 120)) {
    int v29 = *(_DWORD *)(v7 + 124);
  }
  if (*(unsigned char *)(v7 + 128)) {
    int v31 = *(_DWORD *)(v7 + 132);
  }
  if (*(unsigned char *)(v7 + 136)) {
    int v33 = *(_DWORD *)(v7 + 140);
  }
  if (*(unsigned char *)(v7 + 144)) {
    int v35 = *(_DWORD *)(v7 + 148);
  }
  if (*(unsigned char *)(v7 + 152)) {
    int v37 = *(_DWORD *)(v7 + 156);
  }
  if (*(unsigned char *)(v7 + 160)) {
    int v39 = *(_DWORD *)(v7 + 164);
  }
  if (*(unsigned char *)(v7 + 168)) {
    int v41 = *(_DWORD *)(v7 + 172);
  }
  if (*(unsigned char *)(v7 + 176)) {
    int v43 = *(_DWORD *)(v7 + 180);
  }
  if (*(unsigned char *)(v7 + 184)) {
    int v45 = *(_DWORD *)(v7 + 188);
  }
  if (*(unsigned char *)(v7 + 192)) {
    uint64_t v47 = *(void *)(v7 + 200);
  }
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v48, (uint64_t *)(v7 + 208));
  char v53 = *(unsigned char *)(v7 + 248);
  uint64_t v54 = *(void *)(v7 + 256);
  char v15 = *(unsigned char *)(v7 + 280);
  long long v55 = *(_OWORD *)(v7 + 264);
  char v56 = v15;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  uint64_t v16 = re::AssetHandle::loadedAsset<re::TextureAsset>(a3);
  if (v16) {
    char v53 = (*(_DWORD *)(v16 + 388) - 3) < 2;
  }
  ++*(_DWORD *)(a1 + 400);
  uint64_t v54 = 0;
  if (v48)
  {
    if (v52) {
      (*(void (**)(void))(*(void *)v48 + 40))();
    }
    uint64_t v52 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v48 = 0;
    ++v51;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
}

void re::ecs2::SerializableMaterialParameterBlock::textureValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 304;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)&long long v10 = 2 * v5;
  *((void *)&v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = a2;
  int v9 = (unsigned char *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, &v10);
  re::StringID::destroyString((re::StringID *)&v10);
  if (v9 && *v9 == 64)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v10, (const re::AssetHandle *)(v9 + 80));
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 8) = v10;
    long long v10 = 0uLL;
    *(void *)(a3 + 24) = v11;
    uint64_t v11 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::setBufferData(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)v7, a3);
    re::ecs2::SerializableMaterialParameterBlock::setValue<re::DynamicArray<unsigned char>>(a1, a2, 128, v7);
    uint64_t result = v7[0];
    if (v7[0])
    {
      if (v7[4]) {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v7[0] + 40))();
      }
    }
    ++*(_DWORD *)(a1 + 400);
  }
  return result;
}

unsigned char *re::ecs2::SerializableMaterialParameterBlock::setValue<re::DynamicArray<unsigned char>>(uint64_t a1, char *a2, int a3, uint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 304;
  if (a2)
  {
    uint64_t v8 = *a2;
    if (*a2)
    {
      char v9 = a2[1];
      if (v9)
      {
        long long v10 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v8 = 31 * v8 + v9;
          int v11 = *v10++;
          char v9 = v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  v16[0] = 2 * v8;
  v16[1] = a2;
  long long v12 = (unsigned char *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, v16);
  re::StringID::destroyString((re::StringID *)v16);
  if (v12 && *v12 == a3)
  {
    re::ecs2::SerializedMaterialParameter::setValue(v12, a3, a4);
  }
  else
  {
    *(void *)&v15.var0 = 0;
    v15.var1 = "";
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v16, a3, a4);
    long long v12 = (unsigned char *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, &v15, (uint64_t)v16, 2);
    uint64_t v23 = 0;
    if (v18)
    {
      if (v22) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 40))(v18, v22);
      }
      uint64_t v22 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v18 = 0;
      ++v21;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
    re::StringID::destroyString((re::StringID *)&v15);
  }
  return v12;
}

void re::ecs2::SerializableMaterialParameterBlock::setSampler(uint64_t a1, char *a2, char *a3)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  int v6 = a3[1];
  if (a3[1]) {
    char v20 = a3[2];
  }
  int v7 = a3[3];
  if (a3[3]) {
    char v21 = a3[4];
  }
  int v8 = a3[8];
  if (a3[8]) {
    int v22 = *((_DWORD *)a3 + 3);
  }
  int v9 = a3[16];
  if (a3[16]) {
    int v23 = *((_DWORD *)a3 + 5);
  }
  int v10 = a3[24];
  if (a3[24]) {
    int v24 = *((_DWORD *)a3 + 7);
  }
  int v11 = a3[32];
  if (a3[32]) {
    int v25 = *((_DWORD *)a3 + 9);
  }
  int v12 = a3[40];
  if (a3[40]) {
    int v26 = *((_DWORD *)a3 + 11);
  }
  int v32 = a3[48];
  if (a3[48]) {
    int v27 = *((_DWORD *)a3 + 13);
  }
  int v33 = a3[56];
  if (a3[56]) {
    int v28 = *((_DWORD *)a3 + 15);
  }
  int v34 = a3[64];
  if (a3[64]) {
    int v29 = *((_DWORD *)a3 + 17);
  }
  int v35 = a3[72];
  if (a3[72]) {
    int v4 = *((_DWORD *)a3 + 19);
  }
  int v36 = a3[80];
  if (a3[80]) {
    int v3 = *((_DWORD *)a3 + 21);
  }
  int v37 = a3[88];
  if (a3[88]) {
    uint64_t v30 = *((void *)a3 + 12);
  }
  if (a2)
  {
    uint64_t v13 = *a2;
    if (*a2)
    {
      char v14 = a2[1];
      if (v14)
      {
        StringID v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v13 = 31 * v13 + v14;
          int v16 = *v15++;
          char v14 = v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  char v17 = *a3;
  uint64_t v62 = 2 * v13;
  float v63 = a2;
  uint64_t v31 = a1 + 304;
  uint64_t v18 = (unsigned char *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, &v62);
  re::StringID::destroyString((re::StringID *)&v62);
  if (v18 && *v18 == 192)
  {
    LOBYTE(v62) = v17;
    BYTE1(v62) = v6;
    if (v6) {
      BYTE2(v62) = v20;
    }
    BYTE3(v62) = v7;
    if (v7) {
      BYTE4(v62) = v21;
    }
    LOBYTE(v6re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v8;
    if (v8) {
      HIDWORD(v6re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v22;
    }
    char v64 = v9;
    if (v9) {
      int v65 = v23;
    }
    char v66 = v10;
    if (v10) {
      int v67 = v24;
    }
    char v68 = v11;
    if (v11) {
      int v69 = v25;
    }
    char v70 = v12;
    if (v12) {
      int v71 = v26;
    }
    char v72 = v32;
    if (v32) {
      int v73 = v27;
    }
    char v74 = v33;
    if (v33) {
      int v75 = v28;
    }
    char v76 = v34;
    if (v34) {
      int v77 = v29;
    }
    char v78 = v35;
    if (v35) {
      int v79 = v4;
    }
    LOBYTE(v80) = v36;
    if (v36) {
      HIDWORD(v80) = v3;
    }
    LOBYTE(v8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v37;
    if (v37) {
      uint64_t v82 = v30;
    }
    *uint64_t v18 = -64;
    re::OptionalMaterialSamplerData::operator=((uint64_t)(v18 + 104), (uint64_t)&v62);
  }
  else
  {
    *(void *)&v39.var0 = 0;
    v39.var1 = "";
    LOBYTE(v62) = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v80 = 0;
    __int16 v83 = 10;
    char v84 = 0;
    char v85 = 0;
    char v86 = 0;
    char v87 = 0;
    char v88 = 0;
    char v89 = 0;
    char v90 = 0;
    char v91 = 0;
    char v92 = 0;
    char v93 = 0;
    char v94 = 0;
    char v95 = 0;
    uint64_t v100 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    int v99 = 0;
    uint64_t v98 = 0;
    char v101 = 0;
    char v103 = 0;
    *(void *)((char *)v102 + 5) = 0;
    v102[2] = 0;
    v102[0] = 0;
    v40[0] = v17;
    v40[1] = v6;
    if (v6) {
      v40[2] = v20;
    }
    void v40[3] = v7;
    if (v7) {
      v40[4] = v21;
    }
    v40[8] = v8;
    if (v8) {
      int v41 = v22;
    }
    char v42 = v9;
    if (v9) {
      int v43 = v23;
    }
    char v44 = v10;
    if (v10) {
      int v45 = v24;
    }
    char v46 = v11;
    if (v11) {
      int v47 = v25;
    }
    char v48 = v12;
    if (v12) {
      int v49 = v26;
    }
    char v50 = v32;
    if (v32) {
      int v51 = v27;
    }
    char v52 = v33;
    if (v33) {
      int v53 = v28;
    }
    char v54 = v34;
    if (v34) {
      int v55 = v29;
    }
    char v56 = v35;
    if (v35) {
      int v57 = v4;
    }
    char v58 = v36;
    if (v36) {
      int v59 = v3;
    }
    char v60 = v37;
    if (v37) {
      uint64_t v61 = v30;
    }
    LOBYTE(v62) = -64;
    re::OptionalMaterialSamplerData::operator=((uint64_t)&v83, (uint64_t)v40);
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v31, &v39, (uint64_t)&v62, 2);
    v102[0] = 0;
    if (v96)
    {
      if (v100) {
        (*(void (**)(void))(*(void *)v96 + 40))();
      }
      uint64_t v100 = 0;
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      uint64_t v96 = 0;
      ++v99;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v80);
    re::StringID::destroyString((re::StringID *)&v39);
  }
  ++*(_DWORD *)(a1 + 400);
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::valueType(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  int v2 = (char *)this + 304;
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        uint64_t v5 = a2 + 2;
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *(unsigned __int8 *)v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v9[0] = 2 * v3;
  v9[1] = a2;
  int v7 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v2, v9);
  re::StringID::destroyString((re::StringID *)v9);
  if (v7) {
    return *v7;
  }
  else {
    return 0;
  }
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::addPassTechniqueMapping(re::ecs2::SerializableMaterialParameterBlock *this, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v5 = (char *)this + 208;
  if (!re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 208, &v8)|| (uint64_t result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v5, &v8), !*(unsigned char *)result)|| *(void *)(result + 8) != a3)
  {
    uint64_t result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>((uint64_t)v5, (unint64_t *)&v8, &v7);
    ++*((_DWORD *)this + 100);
  }
  return result;
}

BOOL re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 32 * v3 + 8) == v2) {
    return 1;
  }
  do
  {
    uint64_t v3 = *(_DWORD *)(v5 + 32 * v3) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(void *)(v5 + 32 * v3 + 8) != v2);
  return result;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 32 * v3 + 8) != v2)
  {
    while (1)
    {
      uint64_t v3 = *(_DWORD *)(v5 + 32 * v3) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 32 * v3 + 8) == v2) {
        return v5 + 32 * v3 + 16;
      }
    }
    return 0;
  }
  return v5 + 32 * v3 + 16;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<unsigned long &>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 32 * v8 + 8) != v6)
  {
    uint64_t v8 = *(_DWORD *)(v9 + 32 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 32 * v8;
  uint64_t v11 = *a3;
  *(unsigned char *)(v10 + 16) = 1;
  *(void *)(v10 + 24) = v11;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 32 * v8;
  return v12 + 16;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::markPassTechniqueMappingRemoved(re::ecs2::SerializableMaterialParameterBlock *this, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v3 = (char *)this + 208;
  uint64_t result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 208, &v6);
  if (result)
  {
    uint64_t result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v3, &v6);
    if (*(unsigned char *)result)
    {
      v5[0] = 0;
      uint64_t result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace((uint64_t)v3, (unint64_t *)&v6, v5);
      ++*((_DWORD *)this + 100);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(uint64_t a1, unint64_t *a2, unsigned __int8 *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0;
    goto LABEL_21;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_21:
    unsigned int v18 = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 16) + 32 * v18;
    return v19 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 32 * v8 + 8) != v6)
  {
    uint64_t v8 = *(_DWORD *)(v9 + 32 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_21;
    }
  }
  uint64_t v10 = v9 + 32 * v8;
  int v13 = *(unsigned __int8 *)(v10 + 16);
  uint64_t v11 = (unsigned char *)(v10 + 16);
  int v12 = v13;
  int v14 = *a3;
  if (v13) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = v14 == 0;
  }
  if (!v15)
  {
    if (v12) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      *uint64_t v11 = 0;
    }
    else
    {
      if (v12) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v14 == 0;
      }
      if (v17)
      {
        uint64_t v21 = *((void *)a3 + 1);
        uint64_t v20 = v9 + 32 * v8;
      }
      else
      {
        *uint64_t v11 = 1;
        uint64_t v20 = v9 + 32 * v8;
        uint64_t v21 = *((void *)a3 + 1);
      }
      *(void *)(v20 + 24) = v21;
    }
  }
  ++*(_DWORD *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 16) + 32 * v8;
  return v19 + 16;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::tryGetPassTechniqueMapping@<X0>(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2;
  char v4 = (char *)this + 208;
  uint64_t result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 208, &v6);
  if (result
    && (uint64_t result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v4, &v6)) != 0&& *(unsigned char *)result)
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = *(void *)(result + 8);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

void re::ecs2::SerializableMaterialParameterBlock::samplerValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (char *)this + 304;
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        uint64_t v8 = a2 + 2;
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *(unsigned __int8 *)v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v36[0] = 2 * v6;
  v36[1] = a2;
  uint64_t v10 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v5, v36);
  re::StringID::destroyString((re::StringID *)v36);
  if (v10 && *v10 == 192)
  {
    int v22 = v10[105];
    if (v10[105]) {
      unsigned __int8 v15 = v10[106];
    }
    int v23 = v10[107];
    if (v10[107]) {
      unsigned __int8 v16 = v10[108];
    }
    int v24 = v10[112];
    if (v10[112]) {
      int v17 = *((_DWORD *)v10 + 29);
    }
    int v25 = v10[120];
    if (v10[120]) {
      int v18 = *((_DWORD *)v10 + 31);
    }
    int v26 = v10[128];
    if (v10[128]) {
      int v19 = *((_DWORD *)v10 + 33);
    }
    int v27 = v10[136];
    if (v10[136]) {
      int v11 = *((_DWORD *)v10 + 35);
    }
    int v28 = v10[144];
    if (v10[144]) {
      int v12 = *((_DWORD *)v10 + 37);
    }
    int v29 = v10[152];
    if (v10[152]) {
      int v13 = *((_DWORD *)v10 + 39);
    }
    int v30 = v10[160];
    if (v10[160]) {
      int v14 = *((_DWORD *)v10 + 41);
    }
    int v31 = v10[168];
    if (v10[168]) {
      int v3 = *((_DWORD *)v10 + 43);
    }
    int v32 = v10[176];
    if (v10[176]) {
      int v20 = *((_DWORD *)v10 + 45);
    }
    int v33 = v10[184];
    if (v10[184]) {
      int v21 = *((_DWORD *)v10 + 47);
    }
    unsigned __int8 v34 = v10[104];
    int v35 = v10[192];
    if (v10[192]) {
      uint64_t v10 = (unsigned __int8 *)*((void *)v10 + 25);
    }
    *(unsigned char *)a3 = 1;
    *(unsigned char *)(a3 + 8) = v34;
    *(unsigned char *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v22;
    if (v22) {
      *(unsigned char *)(a3 + 10) = v15;
    }
    *(unsigned char *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v23;
    if (v23) {
      *(unsigned char *)(a3 + 12) = v16;
    }
    *(unsigned char *)(a3 + 16) = v24;
    if (v24) {
      *(_DWORD *)(a3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = v17;
    }
    *(unsigned char *)(a3 + 24) = v25;
    if (v25) {
      *(_DWORD *)(a3 + 28) = v18;
    }
    *(unsigned char *)(a3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = v26;
    if (v26) {
      *(_DWORD *)(a3 + 36) = v19;
    }
    *(unsigned char *)(a3 + 40) = v27;
    if (v27) {
      *(_DWORD *)(a3 + 44) = v11;
    }
    *(unsigned char *)(a3 + 48) = v28;
    if (v28) {
      *(_DWORD *)(a3 + 52) = v12;
    }
    *(unsigned char *)(a3 + 56) = v29;
    if (v29) {
      *(_DWORD *)(a3 + 60) = v13;
    }
    *(unsigned char *)(a3 + 64) = v30;
    if (v30) {
      *(_DWORD *)(a3 + 68) = v14;
    }
    *(unsigned char *)(a3 + 72) = v31;
    if (v31) {
      *(_DWORD *)(a3 + 76) = v3;
    }
    *(unsigned char *)(a3 + 80) = v32;
    if (v32) {
      *(_DWORD *)(a3 + 84) = v20;
    }
    *(unsigned char *)(a3 + 88) = v33;
    if (v33) {
      *(_DWORD *)(a3 + 92) = v21;
    }
    *(unsigned char *)(a3 + 96) = v35;
    if (v35) {
      *(void *)(a3 + 104) = v10;
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::bindTextureToSampler(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2, const char *a3)
{
  *(void *)&v8.var0 = 0;
  v8.var1 = "";
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::StringID&>((uint64_t)this + 16, &v8, 2, &v7);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::ConstStringID const&>((uint64_t)this + 160, &v7, 2, re::kDefaultSamplerArrayNameID);
  re::StringID::destroyString((re::StringID *)&v7);
  re::StringID::destroyString((re::StringID *)&v8);
}

void re::ecs2::SerializableMaterialParameterBlock::setUVIndexForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2, int a3)
{
  int v7 = a3;
  uint64_t v5 = (char *)this + 64;
  *(void *)&v6.var0 = 0;
  v6.var1 = "";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)v5, &v6, &v7);
  re::StringID::destroyString((re::StringID *)&v6);
  ++*((_DWORD *)this + 100);
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::uvIndexForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  int v3 = (char *)this + 64;
  v6[0] = 0;
  v6[1] = "";
  char v4 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    return *v4;
  }
  else {
    return 0;
  }
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::tryUVIndexForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  int v3 = (char *)this + 64;
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void re::ecs2::SerializableMaterialParameterBlock::clearUVIndexForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  uint64_t v4 = (char *)this + 64;
  uint64_t v7 = 0;
  StringID v8 = "";
  uint64_t v5 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, &v7);
  re::StringID::destroyString((re::StringID *)&v7);
  if (v5)
  {
    uint64_t v7 = 0;
    StringID v8 = "";
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4, &v7);
    re::StringID::destroyString((re::StringID *)&v7);
    ++*((_DWORD *)this + 100);
  }
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::numberOfTexturesWithNonZeroUVIndex(re::ecs2::SerializableMaterialParameterBlock *this)
{
  uint64_t v2 = *((unsigned int *)this + 24);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (int *)*((void *)this + 10);
    while (1)
    {
      int v5 = *v4;
      v4 += 8;
      if (v5 < 0) {
        break;
      }
      if (v2 == ++v3)
      {
        LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *((_DWORD *)this + 24);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0;
  }
  if (v2 == v3) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v7 = v3;
  uint64_t v8 = *((void *)this + 10);
  do
  {
    if (*(_DWORD *)(v8 + 32 * v7 + 24)) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    if (v2 <= (int)v3 + 1) {
      int v9 = v3 + 1;
    }
    else {
      int v9 = v2;
    }
    int v10 = v3;
    while (1)
    {
      uint64_t v7 = (v10 + 1);
      if (v9 - 1 == v10) {
        break;
      }
      ++v10;
      LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v7;
      if ((*(_DWORD *)(v8 + 32 * v7) & 0x80000000) != 0) {
        goto LABEL_21;
      }
    }
    LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v9;
LABEL_21:
    ;
  }
  while (v2 != v3);
  return result;
}

void re::ecs2::SerializableMaterialParameterBlock::setSwizzleForTexture(_anonymous_namespace_ *a1, const char *a2, int a3)
{
  int v7 = a3;
  uint64_t v5 = (uint64_t)a1 + 112;
  *(void *)&v6.var0 = 0;
  v6.var1 = "";
  re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace<re::mtl::TextureSwizzleChannels&>(v5, &v6, &v7);
  re::StringID::destroyString((re::StringID *)&v6);
  ++*((_DWORD *)a1 + 100);
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace<re::mtl::TextureSwizzleChannels&>(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::mtl::TextureSwizzleChannels&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(unsigned char *)(v11 + 24) = 1;
  *(_DWORD *)(v11 + 25) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

void re::ecs2::SerializableMaterialParameterBlock::swizzleForTexture(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (char *)this + 112;
  v7[0] = 0;
  v7[1] = "";
  uint64_t v6 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v5, v7);
  re::StringID::destroyString((re::StringID *)v7);
  if (v6 && *(unsigned char *)v6)
  {
    *(unsigned char *)a3 = 1;
    *(_DWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v6 + 1);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::clearSwizzleForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  uint64_t v4 = (char *)this + 112;
  *(void *)&v8.var0 = 0;
  v8.var1 = "";
  uint64_t v5 = (unsigned char *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, &v8);
  re::StringID::destroyString((re::StringID *)&v8);
  if (v5)
  {
    if (*v5)
    {
      *(void *)&v8.var0 = 0;
      v8.var1 = "";
      v7[0] = 0;
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4, &v8, v7, 2);
    }
    else
    {
      *(void *)&v8.var0 = 0;
      v8.var1 = "";
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4, &v8);
    }
    re::StringID::destroyString((re::StringID *)&v8);
    ++*((_DWORD *)this + 100);
  }
}

void re::ecs2::SerializableMaterialParameterBlock::unbindTextureFromSamplers(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  uint64_t v3 = (char *)this + 16;
  v4[0] = 0;
  v4[1] = "";
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v3, v4);
  re::StringID::destroyString((re::StringID *)v4);
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v9 + 40 * v7 + 8), a2))
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 40 * v7);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v9 + 40 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 40 * v10) = *(_DWORD *)(v9 + 40 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 40 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 40 * v7) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + 40 * v7));
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::tryGetSamplerNameBoundToTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  v7[0] = 0;
  v7[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 16, v7);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  re::StringID::destroyString((re::StringID *)v7);
  return v5;
}

void re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(_anonymous_namespace_ *a1, const char *a2, int a3, const char *a4, const char *a5)
{
  uint64_t v9 = (uint64_t)a1 + 256;
  *(void *)&v15.var0 = 0;
  v15.var1 = "";
  int v12 = a3;
  v13[0] = 0;
  v13[1] = "";
  v14[0] = 0;
  v14[1] = "";
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::ecs2::SerializableParameterBinding>(v9, &v15, 2, (uint64_t)&v12);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)&v15);
}

unsigned __int8 *re::ecs2::SerializableMaterialParameterBlock::parameterBinding(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  uint64_t v2 = (char *)this + 256;
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        uint64_t v5 = a2 + 2;
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *(unsigned __int8 *)v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v11[0] = 2 * v3;
  v11[1] = a2;
  uint64_t v7 = (unsigned __int8 *)re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v2, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (!v7) {
    return 0;
  }
  int v9 = *v7;
  StringID v8 = v7 + 8;
  if (v9) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 72 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 72 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 72 * v4 + 24;
}

void re::ecs2::SerializableMaterialParameterBlock::markParameterBindingRemoved(re::ecs2::SerializableMaterialParameterBlock *this, char *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        uint64_t v5 = a2 + 2;
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *(unsigned __int8 *)v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *(void *)&v9.var0 = 2 * v3;
  v9.var1 = a2;
  uint64_t v7 = (unsigned char *)re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 256, &v9);
  if (v7 && *v7)
  {
    v8[0] = 0;
    re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)this + 256, &v9, v8);
    re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v8);
    ++*((_DWORD *)this + 100);
  }
  re::StringID::destroyString((re::StringID *)&v9);
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, unsigned __int8 *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 72 * v11;
    return v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 72 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 72 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::Optional<re::ecs2::SerializableParameterBinding>::operator=(v10 + 72 * v9 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 72 * v9;
  return v12 + 24;
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 320 * v11;
    return v12 + 32;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 320 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 320 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 320 * v9;
  return v12 + 32;
}

BOOL re::ecs2::SerializableMaterialParameterBlock::removeParameter(re::ecs2::SerializableMaterialParameterBlock *this, const re::StringID *a2)
{
  char v4 = (char *)this + 304;
  uint64_t v5 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 304, a2);
  if (v5)
  {
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4, a2);
    ++*((_DWORD *)this + 100);
  }
  return v5 != 0;
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v9 + 320 * v7 + 8), a2))
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 320 * v7);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v9 + 320 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 320 * v10) = *(_DWORD *)(v9 + 320 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                               + 320
                                                                                               * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 320 * v7) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(void *)(a1 + 16) + 320 * v7);
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 16) + 320 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(*(void *)(a1 + 16) + 320 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

_anonymous_namespace_ *re::ecs2::SerializableMaterialParameterBlock::populateMaterialParameterDataInMaterialFileFromBlock(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned int *)(a2 + 336);
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = *(_DWORD **)(a2 + 320);
    while ((*v5 & 0x80000000) == 0)
    {
      v5 += 80;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a2 + 336);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = (uint64_t)result + 56;
    uint64_t v50 = (uint64_t)result + 248;
    uint64_t v48 = a2 + 64;
    uint64_t v49 = a2 + 16;
    char v52 = (void *)((char *)result + 200);
    uint64_t v8 = *(void *)(a2 + 320);
    int v51 = result;
    do
    {
      uint64_t v9 = v8 + 320 * v6;
      int v12 = *(unsigned __int8 *)(v9 + 32);
      int v11 = (unsigned __int8 *)(v9 + 32);
      int v10 = v12;
      uint64_t v13 = (v12 - 1);
      if (v13 <= 0x3F)
      {
        if (((1 << v13) & 0x38003801803FFLL) != 0)
        {
          int v14 = *(const char **)(v8 + 320 * v6 + 16);
          re::ecs2::SerializedMaterialParameter::toString((re::ecs2::SerializedMaterialParameter *)&buf, v11);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(v7, (re::DynamicString *)&v55, (re::DynamicString *)&buf);
          if (void)buf && (BYTE8(buf)) {
            (*(void (**)(void, uint64_t))(*(void *)buf + 40))(buf, v67);
          }
          uint64_t result = (_anonymous_namespace_ *)v55;
          if (void)v55 && (BYTE8(v55))
          {
            uint64_t v15 = v56;
LABEL_17:
            uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t))(*(void *)result + 40))(result, v15);
            goto LABEL_18;
          }
          goto LABEL_18;
        }
        if (v13 == 63)
        {
          long long v55 = 0u;
          long long v56 = 0u;
          int v18 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v55, 0);
          int v57 = 0;
          long long v59 = 0u;
          long long v60 = 0u;
          int v19 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v59, 0);
          long long v61 = 0u;
          long long v62 = 0u;
          re::DynamicString::setCapacity(&v61, 0);
          unsigned __int8 v63 = 0;
          re::ecs2::SerializedMaterialParameter::toString((re::ecs2::SerializedMaterialParameter *)&v53, v11);
          re::MaterialTextureParam::MaterialTextureParam((re::MaterialTextureParam *)&buf, (const re::DynamicString *)&v53);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>((uint64_t)&v55, (uint64_t)&buf);
          if (v68 != -1) {
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v68]((int)&v65, (re::DynamicString *)&buf);
          }
          int v68 = -1;
          if (v53 && (v54 & 1) != 0) {
            (*(void (**)(void))(*(void *)v53 + 40))();
          }
          uint64_t v20 = v8 + 320 * v6;
          int v23 = *(char **)(v20 + 16);
          int v22 = (const char **)(v20 + 16);
          int v21 = v23;
          if (v23)
          {
            uint64_t v24 = *v21;
            if (*v21)
            {
              char v25 = v21[1];
              if (v25)
              {
                int v26 = (unsigned __int8 *)(v21 + 2);
                do
                {
                  uint64_t v24 = 31 * v24 + v25;
                  int v27 = *v26++;
                  char v25 = v27;
                }
                while (v27);
              }
            }
          }
          else
          {
            uint64_t v24 = 0;
          }
          uint64_t v53 = 2 * v24;
          char v54 = v21;
          uint64_t v30 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v49, &v53);
          if (v30)
          {
            int v31 = *(const char **)(v30 + 8);
            size_t v32 = strlen(v31);
            *(void *)&long long buf = v31;
            *((void *)&buf + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v32;
            re::DynamicString::operator=((re::DynamicString *)&v59, (uint64_t)&buf);
          }
          else
          {
            int v33 = *re::graphicsLogObjects(0);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf) = 136315138;
              *(void *)((char *)&buf + 4) = v54;
              _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, "Texture block for texture %s is missing sampler binding information.", (uint8_t *)&buf, 0xCu);
            }
          }
          unsigned __int8 v34 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v48, &v53);
          if (v34)
          {
            int v35 = *(_DWORD *)v34;
            if (!v63) {
              unsigned __int8 v63 = 1;
            }
            int v64 = v35;
          }
          int v36 = *v22;
          unint64_t v37 = re::Hash<re::DynamicString>::operator()((uint64_t)&v65, (uint64_t)&buf);
          unint64_t v38 = v37;
          if (*v52)
          {
            unint64_t v39 = v37 % *((unsigned int *)v51 + 56);
            uint64_t v40 = *(unsigned int *)(*((void *)v51 + 26) + 4 * v39);
            if (v40 != 0x7FFFFFFF)
            {
              uint64_t v41 = *((void *)v51 + 27);
              while (!re::DynamicString::operator==(v41 + 160 * v40 + 16, (uint64_t)&buf))
              {
                uint64_t v40 = *(_DWORD *)(v41 + 160 * v40 + 8) & 0x7FFFFFFF;
                if (v40 == 0x7FFFFFFF) {
                  goto LABEL_84;
                }
              }
              char v42 = (unsigned int *)(v41 + 160 * v40);
              re::DynamicString::deinit((re::DynamicString *)(v42 + 30));
              double v43 = re::DynamicString::deinit((re::DynamicString *)(v42 + 22));
              uint64_t v44 = v42[20];
              if (v44 != -1) {
                ((void (*)(char *, unsigned int *, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v44])(&v65, v42 + 12, v43);
              }
              v42[20] = -1;
              uint64_t v45 = *((void *)v51 + 27);
              uint64_t v46 = v45 + 160 * v40;
              *(unsigned char *)(v46 + 48) = 0;
              v46 += 48;
              *(_DWORD *)(v46 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>((unsigned int *)v46, (unsigned int *)&v55);
              re::DynamicString::DynamicString((re::DynamicString *)(v46 + 40), (const re::DynamicString *)&v59);
              re::DynamicString::DynamicString((re::DynamicString *)(v46 + 72), (const re::DynamicString *)&v61);
              int v47 = v63;
              *(unsigned char *)(v46 + 104) = v63;
              if (v47) {
                *(_DWORD *)(v45 + 160 * v40 + 156) = v64;
              }
              goto LABEL_85;
            }
          }
          else
          {
            LODWORD(v3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
          }
LABEL_84:
          re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy((uint64_t)v52, v39, v38, (re::DynamicString *)&buf, (uint64_t)&v55);
LABEL_85:
          ++*((_DWORD *)v51 + 60);
          if (void)buf && (BYTE8(buf)) {
            (*(void (**)(void, uint64_t))(*(void *)buf + 40))(buf, v67);
          }
          re::StringID::destroyString((re::StringID *)&v53);
          if ((void)v61)
          {
            if (BYTE8(v61)) {
              (*(void (**)(void))(*(void *)v61 + 40))();
            }
            long long v61 = 0u;
            long long v62 = 0u;
          }
          uint64_t result = (_anonymous_namespace_ *)v59;
          if ((void)v59)
          {
            if (BYTE8(v59)) {
              uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v59 + 40))();
            }
            long long v59 = 0u;
            long long v60 = 0u;
          }
          if (v57 != -1) {
            uint64_t result = (_anonymous_namespace_ *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v57]((int)&buf, (re::DynamicString *)&v55);
          }
          goto LABEL_18;
        }
      }
      if (v10 == 192)
      {
        uint64_t v28 = v8 + 320 * v6;
        int v29 = *(const char **)(v28 + 16);
        LOWORD(v55) = *(_WORD *)(v28 + 136);
        if (BYTE1(v55)) {
          BYTE2(v55) = *(unsigned char *)(v8 + 320 * v6 + 138);
        }
        BYTE3(v55) = *(unsigned char *)(v8 + 320 * v6 + 139);
        if (BYTE3(v55)) {
          BYTE4(v55) = *(unsigned char *)(v8 + 320 * v6 + 140);
        }
        BYTE8(v55) = *(unsigned char *)(v8 + 320 * v6 + 144);
        if (BYTE8(v55)) {
          HIDWORD(v55) = *(_DWORD *)(v8 + 320 * v6 + 148);
        }
        LOBYTE(v56) = *(unsigned char *)(v8 + 320 * v6 + 152);
        if ((_BYTE)v56) {
          DWORD1(v56) = *(_DWORD *)(v8 + 320 * v6 + 156);
        }
        BYTE8(v56) = *(unsigned char *)(v8 + 320 * v6 + 160);
        if (BYTE8(v56)) {
          HIDWORD(v56) = *(_DWORD *)(v8 + 320 * v6 + 164);
        }
        LOBYTE(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(unsigned char *)(v8 + 320 * v6 + 168);
        if ((_BYTE)v57) {
          int v58 = *(_DWORD *)(v8 + 320 * v6 + 172);
        }
        LOBYTE(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = *(unsigned char *)(v8 + 320 * v6 + 176);
        if ((_BYTE)v59) {
          DWORD1(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(v8 + 320 * v6 + 180);
        }
        BYTE8(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = *(unsigned char *)(v8 + 320 * v6 + 184);
        if (BYTE8(v59)) {
          HIDWORD(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(v8 + 320 * v6 + 188);
        }
        LOBYTE(v60) = *(unsigned char *)(v8 + 320 * v6 + 192);
        if ((_BYTE)v60) {
          DWORD1(v60) = *(_DWORD *)(v8 + 320 * v6 + 196);
        }
        BYTE8(v60) = *(unsigned char *)(v8 + 320 * v6 + 200);
        if (BYTE8(v60)) {
          HIDWORD(v60) = *(_DWORD *)(v8 + 320 * v6 + 204);
        }
        LOBYTE(v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = *(unsigned char *)(v8 + 320 * v6 + 208);
        if ((_BYTE)v61) {
          DWORD1(v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v8 + 320 * v6 + 212);
        }
        BYTE8(v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = *(unsigned char *)(v8 + 320 * v6 + 216);
        if (BYTE8(v61)) {
          HIDWORD(v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v8 + 320 * v6 + 220);
        }
        LOBYTE(v62) = *(unsigned char *)(v8 + 320 * v6 + 224);
        if ((_BYTE)v62) {
          *((void *)&v62 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = *(void *)(v8 + 320 * v6 + 232);
        }
        re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(v50, (re::DynamicString *)&buf, (uint64_t)&v55);
        uint64_t result = (_anonymous_namespace_ *)buf;
        if ((void)buf)
        {
          if (BYTE8(buf))
          {
            uint64_t v15 = v67;
            goto LABEL_17;
          }
        }
      }
LABEL_18:
      unsigned int v16 = *(_DWORD *)(a2 + 336);
      uint64_t v8 = *(void *)(a2 + 320);
      if (v16 <= (int)v4 + 1) {
        unsigned int v16 = v4 + 1;
      }
      while (1)
      {
        uint64_t v6 = (v4 + 1);
        if (v16 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        unsigned int v17 = v6;
        if ((*(_DWORD *)(v8 + 320 * v6) & 0x80000000) != 0) {
          goto LABEL_24;
        }
      }
      unsigned int v17 = v16;
LABEL_24:
      LODWORD(v4) = v17;
    }
    while (v3 != v17);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 152 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 152 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 152 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::OptionalMaterialSamplerData::operator=(v10 + 152 * v9 + 48, a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 152 * v9;
  return v12 + 48;
}

_anonymous_namespace_ *re::ecs2::MaterialParameterBlockArrayComponent::createFlattenedMaterialFileFromBlock@<X0>(_anonymous_namespace_ *a1@<X0>, unint64_t a2@<X1>, re::MaterialAsset *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a4, 0);
  *(_OWORD *)(a4 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)(a4 + 76) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(void *)(a4 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(a4 + 136) = 0;
  *(void *)(a4 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_DWORD *)(a4 + 184) = 0;
  *(void *)(a4 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_DWORD *)(a4 + 2re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
  *(void *)(a4 + 236) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_DWORD *)(a4 + 280) = 0;
  *(void *)(a4 + 284) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 296) = 0u;
  *(_OWORD *)(a4 + 312) = 0u;
  *(_DWORD *)(a4 + 328) = 0;
  *(void *)(a4 + 3re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x7FFFFFFFLL;
  *(unsigned char *)(a4 + 344) = 0;
  *(unsigned char *)(a4 + 346) = 0;
  *(unsigned char *)(a4 + 348) = 0;
  *(unsigned char *)(a4 + 350) = 0;
  *(unsigned char *)(a4 + 352) = 0;
  *(unsigned char *)(a4 + 354) = 0;
  *(unsigned char *)(a4 + 356) = 0;
  *(unsigned char *)(a4 + 358) = 0;
  *(unsigned char *)(a4 + 360) = 0;
  *(void *)(a4 + 400) = 0;
  *(void *)(a4 + 376) = 0;
  *(void *)(a4 + 384) = 0;
  *(_DWORD *)(a4 + 392) = 0;
  *(void *)(a4 + 368) = 0;
  if (*((void *)a3 + 1))
  {
    uint64_t result = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MaterialAsset>(a3);
    if (result)
    {
      uint64_t v9 = result;
      re::DynamicString::operator=((re::DynamicString *)a4, (_anonymous_namespace_ *)((char *)result + 8));
      re::AssetHandle::operator=(a4 + 32, (uint64_t *)v9 + 5);
      re::MaterialParameterData::operator=(a4 + 56, (uint64_t)v9 + 64);
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a4 + 296, (uint64_t)v9 + 304);
      re::MaterialRenderFlags::operator=((unsigned char *)(a4 + 344), (unsigned __int8 *)v9 + 352);
      uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::FunctionLink>::operator=(a4 + 368, (uint64_t *)v9 + 47);
    }
  }
  if (*((void *)a1 + 6) > a2)
  {
    uint64_t v10 = *((void *)a1 + 8);
    uint64_t v11 = *(void *)(v10 + 24 * a2);
    if (!v11) {
      uint64_t v11 = *(void *)(v10 + 24 * a2 + 8);
    }
    return re::ecs2::SerializableMaterialParameterBlock::populateMaterialParameterDataInMaterialFileFromBlock((_anonymous_namespace_ *)a4, v11);
  }
  return result;
}

void re::ecs2::introspect_SerializableParameterBindingType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D8B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF8D8B8);
    if (v24)
    {
      char v25 = re::introspectionAllocator(v24);
      int v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)int v26 = 1;
      *((void *)v26 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
      *((void *)v26 + 2) = "Invalid";
      qword_26AF8DA10 = (uint64_t)v26;
      int v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 1;
      *((void *)v28 + 2) = "Constant";
      qword_26AF8DA18 = (uint64_t)v28;
      int v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 2;
      *((void *)v30 + 2) = "Texture";
      qword_26AF8DA20 = (uint64_t)v30;
      int v31 = re::introspectionAllocator(v30);
      size_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)size_t v32 = 1;
      *((void *)v32 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 3;
      *((void *)v32 + 2) = "Buffer";
      qword_26AF8DA28 = (uint64_t)v32;
      int v33 = re::introspectionAllocator(v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = 4;
      *(void *)(v34 + 16) = "Sampler";
      qword_26AF8DA30 = v34;
      __cxa_guard_release(&qword_26AF8D8B8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D8C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D8C0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF8DBF8, "SerializableParameterBindingType", 4, 4, 1, 1);
    qword_26AF8DBF8 = (uint64_t)&unk_26E715E00;
    qword_26AF8DC38 = (uint64_t)&re::ecs2::introspect_SerializableParameterBindingType(BOOL)::enumTable;
    dword_26AF8DC08 = 9;
    __cxa_guard_release(&qword_26AF8D8C0);
  }
  if ((_MergedGlobals_310 & 1) == 0)
  {
    _MergedGlobals_310 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF8DBF8, a2);
    uint64_t v36 = 0x229A01AB15C6876ALL;
    unint64_t v37 = "SerializableParameterBindingType";
    v40[0] = 208862;
    v40[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v40);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v40);
      uint64_t v4 = (unsigned int *)qword_26AF8DC38;
      v39[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v38.var0 = 2 * v10;
            v38.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v14, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unsigned int v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v38.var0 = 2 * v18;
              v38.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v22, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v23);
      xmmword_26AF8DC18 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SerializableParameterBindingType", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_SerializableParameterBinding(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D8C8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8DE48, "SerializableParameterBinding");
    __cxa_guard_release(&qword_26AF8D8C8);
  }
  return &unk_26AF8DE48;
}

void re::ecs2::initInfo_SerializableParameterBinding(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0xB51CBC288A0F4BB6;
  v17[1] = "SerializableParameterBinding";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D8D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8D8D0);
    if (v4)
    {
      unint64_t v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      re::ecs2::introspect_SerializableParameterBindingType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "type";
      *(void *)(v7 + 16) = &qword_26AF8DBF8;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8D9B0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::StringID>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "structName";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8D9B8 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::IntrospectionInfo<re::StringID>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "memberName";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x1800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8D9C0 = v15;
      __cxa_guard_release(&qword_26AF8D8D0);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8D9B0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::SerializableParameterBinding>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SerializableParameterBinding>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::SerializableParameterBinding>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SerializableParameterBinding>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

re::StringID *re::internal::defaultConstruct<re::ecs2::SerializableParameterBinding>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v3 = (re::StringID *)(a3 + 6);
  re::StringID::invalid((re::StringID *)(a3 + 2));
  return re::StringID::invalid(v3);
}

void re::internal::defaultDestruct<re::ecs2::SerializableParameterBinding>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

re::StringID *re::internal::defaultConstructV2<re::ecs2::SerializableParameterBinding>(_DWORD *a1)
{
  *a1 = 0;
  uint64_t v1 = (re::StringID *)(a1 + 6);
  re::StringID::invalid((re::StringID *)(a1 + 2));
  return re::StringID::invalid(v1);
}

void re::internal::defaultDestructV2<re::ecs2::SerializableParameterBinding>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

void re::IntrospectionInfo<re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D940))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF8DCE0);
    qword_26AF8DCE0 = (uint64_t)&unk_26E705F90;
    __cxa_guard_release(&qword_26AF8D940);
  }
  if ((byte_26AF8D894 & 1) == 0)
  {
    uint64_t v2 = re::IntrospectionInfo<re::StringID>::get(1, a2);
    uint64_t v4 = re::IntrospectionInfo<re::StringID>::get(1, v3);
    if ((byte_26AF8D894 & 1) == 0)
    {
      uint64_t v5 = (uint64_t)v4;
      byte_26AF8D894 = 1;
      int v6 = v4[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DCE0, 0);
      qword_26AF8DCF0 = 0x3000000007;
      dword_26AF8DCF8 = v6;
      word_26AF8DCFC = 0;
      *(void *)&xmmword_26AF8DD00 = 0;
      *((void *)&xmmword_26AF8DD00 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      qword_26AF8DD10 = (uint64_t)v2;
      qword_26AF8DD18 = 0;
      qword_26AF8DD20 = v5;
      qword_26AF8DD28 = 0;
      qword_26AF8DCE0 = (uint64_t)&unk_26E705F90;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF8DCE0, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = v2[2];
      long long v20 = *(_OWORD *)(v5 + 32);
      long long v21 = v10;
      uint64_t v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        int v26 = "_CompareFunc";
        int v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          uint64_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15 {
          || (long long v16 = *v31,
        }
              uint64_t v25 = v14,
              int v26 = v16,
              LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = -1,
              (unsigned int v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF8DD00 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

void *re::ecs2::allocInfo_SerializableMaterialParameterBlock(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D8E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D8E8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8DEC0, "SerializableMaterialParameterBlock");
    __cxa_guard_release(&qword_26AF8D8E8);
  }
  return &unk_26AF8DEC0;
}

void re::ecs2::initInfo_SerializableMaterialParameterBlock(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v127 = 0x7FD177336AB796D4;
  float v128 = "SerializableMaterialParameterBlock";
  re::StringID::destroyString((re::StringID *)&v127);
  *((_OWORD *)this + 2) = v120;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D8E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8D8E0);
    if (v4)
    {
      int v6 = re::introspectionAllocator(v4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D928, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8D928))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF8DC40);
        qword_26AF8DC40 = (uint64_t)&unk_26E705DD0;
        __cxa_guard_release(&qword_26AF8D928);
      }
      if ((byte_26AF8D891 & 1) == 0)
      {
        uint64_t v7 = (re::ecs2 *)re::IntrospectionInfo<re::StringID>::get(1, v5);
        uint64_t v8 = (uint64_t)v7;
        uint64_t v9 = (void *)qword_26AF8D8B0;
        if (!qword_26AF8D8B0)
        {
          uint64_t v9 = re::ecs2::allocInfo_SerializedMaterialParameter(v7);
          qword_26AF8D8B0 = (uint64_t)v9;
          re::ecs2::initInfo_SerializedMaterialParameter((re::ecs2 *)v9, v10);
        }
        if ((byte_26AF8D891 & 1) == 0)
        {
          byte_26AF8D891 = 1;
          int v11 = *((_DWORD *)v9 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DC40, 0);
          qword_26AF8DC50 = 0x3000000007;
          dword_26AF8DC58 = v11;
          word_26AF8DC5C = 0;
          *(void *)&xmmword_26AF8DC60 = 0;
          *((void *)&xmmword_26AF8DC60 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
          qword_26AF8DC70 = v8;
          qword_26AF8DC78 = 0;
          qword_26AF8DC80 = (uint64_t)v9;
          qword_26AF8DC88 = 0;
          qword_26AF8DC40 = (uint64_t)&unk_26E705DD0;
          re::IntrospectionRegistry::add(v12, v13);
          re::getPrettyTypeName((re *)&qword_26AF8DC40, (const re::IntrospectionBase *)&v127);
          if (v128) {
            uint64_t v14 = v129;
          }
          else {
            uint64_t v14 = (char *)&v128 + 1;
          }
          if (v127 && (v128 & 1) != 0) {
            (*(void (**)(void))(*(void *)v127 + 40))();
          }
          long long v15 = *(_OWORD *)(v8 + 32);
          long long v122 = *((_OWORD *)v9 + 2);
          long long v123 = v15;
          long long v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v124);
          if (v16)
          {
            uint64_t v17 = *v16;
            *((void *)&v121 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v17;
          }
          else
          {
            uint64_t v127 = 0x449AD97C4B77BED4;
            float v128 = "_CompareFunc";
            uint64_t v18 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v127);
            if (v18)
            {
              uint64_t v19 = *v18;
              re::StringID::destroyString((re::StringID *)&v127);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v127);
              *(void *)&v132.var0 = 0x449AD97C4B77BED4;
              v132.var1 = "_CompareFunc";
              long long v20 = (void *)v127;
              uint64_t v19 = (uint64_t)v128;
              re::StringID::destroyString((re::StringID *)&v132);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v132, (uint64_t)&v128);
            if (!v20 {
              || (long long v21 = *v133,
            }
                  uint64_t v127 = v19,
                  float v128 = v21,
                  LODWORD(v12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = -1,
                  (uint64_t v22 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v132.var0 + 768, &v127)) == 0)|| !*(void *)v22)
            {
              long long v131 = v123;
              *(void *)&v130.var0 = v20;
              v130.var1 = (char *)v19;
            }
            long long v125 = v122;
            long long v126 = v123;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v127, v124, 1, 0x30uLL, 8uLL, &v126, &v125);
            re::TypeBuilder::setConstructor((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v127, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v127, v23);
          }
          xmmword_26AF8DC60 = v121;
          re::StringID::destroyString((re::StringID *)v124);
        }
      }
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "parameters";
      *(void *)(v24 + 16) = &qword_26AF8DC40;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x13000000001;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF8DA38 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      int v27 = re::introspect_uint32_t((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "m_networkVersion";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x19000000002;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF8DA40 = v28;
      StringID v30 = re::introspectionAllocator((re *)v28);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D930, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8D930))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF8DC90);
        qword_26AF8DC90 = (uint64_t)&unk_26E705E70;
        __cxa_guard_release(&qword_26AF8D930);
      }
      if ((byte_26AF8D892 & 1) == 0)
      {
        size_t v32 = re::introspect_size_t((re *)1, v29);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D938, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF8D938))
        {
          re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF8DA78);
          qword_26AF8DA78 = (uint64_t)&unk_26E705F10;
          __cxa_guard_release(&qword_26AF8D938);
        }
        if ((byte_26AF8D893 & 1) == 0)
        {
          int v33 = re::introspect_size_t((re *)1, v31);
          if ((byte_26AF8D893 & 1) == 0)
          {
            uint64_t v34 = (uint64_t)v33;
            byte_26AF8D893 = 1;
            int v35 = v33[6];
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DA78, 0);
            qword_26AF8DA88 = 0x100000000DLL;
            dword_26AF8DA90 = v35;
            word_26AF8DA94 = 0;
            *(void *)&xmmword_26AF8DA98 = 0;
            *((void *)&xmmword_26AF8DA98 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
            qword_26AF8DAA8 = v34;
            qword_26AF8DAB0 = 0;
            qword_26AF8DA78 = (uint64_t)&unk_26E705F10;
            re::IntrospectionRegistry::add(v36, v37);
            re::getPrettyTypeName((re *)&qword_26AF8DA78, (const re::IntrospectionBase *)&v127);
            if (v128) {
              StringID v38 = v129;
            }
            else {
              StringID v38 = (char *)&v128 + 1;
            }
            if (v127 && (v128 & 1) != 0) {
              (*(void (**)(void))(*(void *)v127 + 40))();
            }
            StringID v130 = *(StringID *)(v34 + 32);
            unint64_t v39 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v131);
            if (v39)
            {
              uint64_t v40 = *v39;
              *((void *)&v126 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v40;
            }
            else
            {
              StringID v132 = v130;
              re::TypeBuilder::beginOptionalType((uint64_t)&v127, (uint64_t *)&v131, 0x10uLL, 8uLL, (long long *)&v132);
              re::TypeBuilder::setOptionalAccessors((uint64_t)&v127, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
              re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v127, v41);
            }
            xmmword_26AF8DA98 = v126;
            re::StringID::destroyString((re::StringID *)&v131);
          }
        }
        if ((byte_26AF8D892 & 1) == 0)
        {
          byte_26AF8D892 = 1;
          int v42 = dword_26AF8DA90;
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DC90, 0);
          qword_26AF8DCA0 = 0x3000000007;
          dword_26AF8DCA8 = v42;
          word_26AF8DCAC = 0;
          *(void *)&xmmword_26AF8DCB0 = 0;
          *((void *)&xmmword_26AF8DCB0 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
          qword_26AF8DCC0 = (uint64_t)v32;
          qword_26AF8DCC8 = 0;
          qword_26AF8DCD0 = (uint64_t)&qword_26AF8DA78;
          qword_26AF8DCD8 = 0;
          qword_26AF8DC90 = (uint64_t)&unk_26E705E70;
          re::IntrospectionRegistry::add(v43, v44);
          re::getPrettyTypeName((re *)&qword_26AF8DC90, (const re::IntrospectionBase *)&v127);
          if (v128) {
            uint64_t v45 = v129;
          }
          else {
            uint64_t v45 = (char *)&v128 + 1;
          }
          if (v127 && (v128 & 1) != 0) {
            (*(void (**)(void))(*(void *)v127 + 40))();
          }
          long long v46 = v32[2];
          long long v122 = xmmword_26AF8DA98;
          long long v123 = v46;
          int v47 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v124);
          if (v47)
          {
            uint64_t v48 = *v47;
            *((void *)&v121 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v48;
          }
          else
          {
            uint64_t v127 = 0x449AD97C4B77BED4;
            float v128 = "_CompareFunc";
            uint64_t v49 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v127);
            if (v49)
            {
              uint64_t v50 = *v49;
              re::StringID::destroyString((re::StringID *)&v127);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v127);
              *(void *)&v132.var0 = 0x449AD97C4B77BED4;
              v132.var1 = "_CompareFunc";
              int v51 = (void *)v127;
              uint64_t v50 = (uint64_t)v128;
              re::StringID::destroyString((re::StringID *)&v132);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v132, (uint64_t)&v128);
            if (!v51 {
              || (char v52 = *v133,
            }
                  uint64_t v127 = v50,
                  float v128 = v52,
                  LODWORD(v12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = -1,
                  (uint64_t v53 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v132.var0 + 768, &v127)) == 0)|| !*(void *)v53)
            {
              long long v131 = v123;
              *(void *)&v130.var0 = v51;
              v130.var1 = (char *)v50;
            }
            long long v125 = v122;
            long long v126 = v123;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v127, v124, 1, 0x30uLL, 8uLL, &v126, &v125);
            re::TypeBuilder::setConstructor((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v127, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v127, v54);
          }
          xmmword_26AF8DCB0 = v121;
          re::StringID::destroyString((re::StringID *)v124);
        }
      }
      uint64_t v55 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v55 = 1;
      *(void *)(v55 + 8) = "passTechniqueMapping";
      *(void *)(v55 + 16) = &qword_26AF8DC90;
      *(void *)(v55 + 24) = 0;
      *(void *)(v55 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0xD000000003;
      *(_DWORD *)(v55 + 40) = 0;
      *(void *)(v55 + 48) = 0;
      *(void *)(v55 + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_26AF8DA48 = v55;
      long long v56 = re::introspectionAllocator((re *)v55);
      re::IntrospectionInfo<re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get((uint64_t)v56, v57);
      uint64_t v58 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v56 + 32))(v56, 72, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *(void *)(v58 + 8) = "textureToSamplerBindings";
      *(void *)(v58 + 16) = &qword_26AF8DCE0;
      *(void *)(v58 + 24) = 0;
      *(void *)(v58 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x1000000004;
      *(_DWORD *)(v58 + 40) = 0;
      *(void *)(v58 + 48) = 0;
      *(void *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_26AF8DA50 = v58;
      long long v59 = re::introspectionAllocator((re *)v58);
      re::IntrospectionInfo<re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get((uint64_t)v59, v60);
      uint64_t v61 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 72, 8);
      *(_DWORD *)uint64_t v61 = 1;
      *(void *)(v61 + 8) = "samplerToArrayBindings";
      *(void *)(v61 + 16) = &qword_26AF8DCE0;
      *(void *)(v61 + 24) = 0;
      *(void *)(v61 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0xA000000005;
      *(_DWORD *)(v61 + 40) = 0;
      *(void *)(v61 + 48) = 0;
      *(void *)(v61 + 56) = 0;
      *(_DWORD *)(v61 + 64) = 0;
      qword_26AF8DA58 = v61;
      long long v62 = re::introspectionAllocator((re *)v61);
      int v64 = re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(1, v63);
      uint64_t v65 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v62 + 32))(v62, 72, 8);
      *(_DWORD *)uint64_t v65 = 1;
      *(void *)(v65 + 8) = "textureToUVIndex";
      *(void *)(v65 + 16) = v64;
      *(void *)(v65 + 24) = 0;
      *(void *)(v65 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x4000000006;
      *(_DWORD *)(v65 + 40) = 0;
      *(void *)(v65 + 48) = 0;
      *(void *)(v65 + 56) = 0;
      *(_DWORD *)(v65 + 64) = 0;
      qword_26AF8DA60 = v65;
      uint64_t v67 = re::introspectionAllocator((re *)v65);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D948, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8D948))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF8DD30);
        qword_26AF8DD30 = (uint64_t)&unk_26E706030;
        __cxa_guard_release(&qword_26AF8D948);
      }
      if ((byte_26AF8D895 & 1) == 0)
      {
        uint64_t v68 = (uint64_t)re::IntrospectionInfo<re::StringID>::get(1, v66);
        uint64_t v69 = v68;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D950, memory_order_acquire) & 1) == 0)
        {
          uint64_t v68 = __cxa_guard_acquire(&qword_26AF8D950);
          if (v68)
          {
            re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF8DAB8);
            qword_26AF8DAB8 = (uint64_t)&unk_26E7060D0;
            __cxa_guard_release(&qword_26AF8D950);
          }
        }
        if ((byte_26AF8D896 & 1) == 0)
        {
          char v70 = (void *)qword_26AF8D8D8;
          if (qword_26AF8D8D8
            || (char v70 = re::ecs2::allocInfo_SerializableParameterBinding((re::ecs2 *)v68),
                qword_26AF8D8D8 = (uint64_t)v70,
                re::ecs2::initInfo_SerializableParameterBinding((re::ecs2 *)v70, v71),
                (byte_26AF8D896 & 1) == 0))
          {
            byte_26AF8D896 = 1;
            int v72 = *((_DWORD *)v70 + 6);
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DAB8, 0);
            qword_26AF8DAC8 = 0x300000000DLL;
            dword_26AF8DAD0 = v72;
            word_26AF8DAD4 = 0;
            *(void *)&xmmword_26AF8DAD8 = 0;
            *((void *)&xmmword_26AF8DAD8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
            qword_26AF8DAE8 = (uint64_t)v70;
            qword_26AF8DAF0 = 0;
            qword_26AF8DAB8 = (uint64_t)&unk_26E7060D0;
            re::IntrospectionRegistry::add(v73, v74);
            re::getPrettyTypeName((re *)&qword_26AF8DAB8, (const re::IntrospectionBase *)&v127);
            if (v128) {
              int v75 = v129;
            }
            else {
              int v75 = (char *)&v128 + 1;
            }
            if (v127 && (v128 & 1) != 0) {
              (*(void (**)(void))(*(void *)v127 + 40))();
            }
            StringID v130 = (StringID)*((_OWORD *)v70 + 2);
            char v76 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v131);
            if (v76)
            {
              uint64_t v77 = *v76;
              *((void *)&v126 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v77;
            }
            else
            {
              StringID v132 = v130;
              re::TypeBuilder::beginOptionalType((uint64_t)&v127, (uint64_t *)&v131, 0x30uLL, 8uLL, (long long *)&v132);
              re::TypeBuilder::setOptionalAccessors((uint64_t)&v127, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::ecs2::SerializableParameterBinding>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::ecs2::SerializableParameterBinding>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
              re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v127, v78);
            }
            xmmword_26AF8DAD8 = v126;
            re::StringID::destroyString((re::StringID *)&v131);
          }
        }
        if ((byte_26AF8D895 & 1) == 0)
        {
          byte_26AF8D895 = 1;
          int v79 = dword_26AF8DAD0;
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DD30, 0);
          qword_26AF8DD40 = 0x3000000007;
          dword_26AF8DD48 = v79;
          word_26AF8DD4C = 0;
          *(void *)&xmmword_26AF8DD50 = 0;
          *((void *)&xmmword_26AF8DD50 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
          qword_26AF8DD60 = v69;
          qword_26AF8DD68 = 0;
          qword_26AF8DD70 = (uint64_t)&qword_26AF8DAB8;
          qword_26AF8DD78 = 0;
          qword_26AF8DD30 = (uint64_t)&unk_26E706030;
          re::IntrospectionRegistry::add(v80, v81);
          re::getPrettyTypeName((re *)&qword_26AF8DD30, (const re::IntrospectionBase *)&v127);
          if (v128) {
            uint64_t v82 = v129;
          }
          else {
            uint64_t v82 = (char *)&v128 + 1;
          }
          if (v127 && (v128 & 1) != 0) {
            (*(void (**)(void))(*(void *)v127 + 40))();
          }
          long long v83 = *(_OWORD *)(v69 + 32);
          long long v122 = xmmword_26AF8DAD8;
          long long v123 = v83;
          char v84 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v124);
          if (v84)
          {
            uint64_t v85 = *v84;
            *((void *)&v121 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v85;
          }
          else
          {
            uint64_t v127 = 0x449AD97C4B77BED4;
            float v128 = "_CompareFunc";
            char v86 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v127);
            if (v86)
            {
              uint64_t v87 = *v86;
              re::StringID::destroyString((re::StringID *)&v127);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v127);
              *(void *)&v132.var0 = 0x449AD97C4B77BED4;
              v132.var1 = "_CompareFunc";
              char v88 = (void *)v127;
              uint64_t v87 = (uint64_t)v128;
              re::StringID::destroyString((re::StringID *)&v132);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v132, (uint64_t)&v128);
            if (!v88 {
              || (char v89 = *v133,
            }
                  uint64_t v127 = v87,
                  float v128 = v89,
                  LODWORD(v12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = -1,
                  (char v90 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v132.var0 + 768, &v127)) == 0)|| !*(void *)v90)
            {
              long long v131 = v123;
              *(void *)&v130.var0 = v88;
              v130.var1 = (char *)v87;
            }
            long long v125 = v122;
            long long v126 = v123;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v127, v124, 1, 0x30uLL, 8uLL, &v126, &v125);
            re::TypeBuilder::setConstructor((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v127, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v127, v91);
          }
          xmmword_26AF8DD50 = v121;
          re::StringID::destroyString((re::StringID *)v124);
        }
      }
      uint64_t v92 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v67 + 32))(v67, 72, 8);
      *(_DWORD *)uint64_t v92 = 1;
      *(void *)(v92 + 8) = "parameterBindings";
      *(void *)(v92 + 16) = &qword_26AF8DD30;
      *(void *)(v92 + 24) = 0;
      *(void *)(v92 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x10000000007;
      *(_DWORD *)(v92 + 40) = 0;
      *(void *)(v92 + 48) = 0;
      *(void *)(v92 + 56) = 0;
      *(_DWORD *)(v92 + 64) = 0;
      qword_26AF8DA68 = v92;
      char v94 = re::introspectionAllocator((re *)v92);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D958, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8D958))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF8DD80);
        qword_26AF8DD80 = (uint64_t)&unk_26E706150;
        __cxa_guard_release(&qword_26AF8D958);
      }
      if ((byte_26AF8D897 & 1) == 0)
      {
        char v95 = re::IntrospectionInfo<re::StringID>::get(1, v93);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D960, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF8D960))
        {
          re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF8DAF8);
          qword_26AF8DAF8 = (uint64_t)&unk_26E7061F0;
          __cxa_guard_release(&qword_26AF8D960);
        }
        if ((byte_26AF8D898 & 1) == 0)
        {
          uint64_t v96 = re::mtl::introspect_TextureSwizzleChannels((re::IntrospectionBase **)1);
          if ((byte_26AF8D898 & 1) == 0)
          {
            uint64_t v97 = v96;
            byte_26AF8D898 = 1;
            int v98 = *(_DWORD *)(v96 + 24);
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DAF8, 0);
            qword_26AF8DB08 = 0x50000000DLL;
            dword_26AF8DB10 = v98;
            word_26AF8DB14 = 0;
            *(void *)&xmmword_26AF8DB18 = 0;
            *((void *)&xmmword_26AF8DB18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
            qword_26AF8DB28 = v97;
            qword_26AF8DB30 = 0;
            qword_26AF8DAF8 = (uint64_t)&unk_26E7061F0;
            re::IntrospectionRegistry::add(v99, v100);
            re::getPrettyTypeName((re *)&qword_26AF8DAF8, (const re::IntrospectionBase *)&v127);
            if (v128) {
              char v101 = v129;
            }
            else {
              char v101 = (char *)&v128 + 1;
            }
            if (v127 && (v128 & 1) != 0) {
              (*(void (**)(void))(*(void *)v127 + 40))();
            }
            StringID v130 = *(StringID *)(v97 + 32);
            float32x4_t v102 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v131);
            if (v102)
            {
              uint64_t v103 = *v102;
              *((void *)&v126 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v103;
            }
            else
            {
              StringID v132 = v130;
              re::TypeBuilder::beginOptionalType((uint64_t)&v127, (uint64_t *)&v131, 5uLL, 1uLL, (long long *)&v132);
              re::TypeBuilder::setOptionalAccessors((uint64_t)&v127, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::TextureSwizzleChannels>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::TextureSwizzleChannels>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
              re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v127, v104);
            }
            xmmword_26AF8DB18 = v126;
            re::StringID::destroyString((re::StringID *)&v131);
          }
        }
        if ((byte_26AF8D897 & 1) == 0)
        {
          byte_26AF8D897 = 1;
          int v105 = dword_26AF8DB10;
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DD80, 0);
          qword_26AF8DD90 = 0x3000000007;
          dword_26AF8DD98 = v105;
          word_26AF8DD9C = 0;
          *(void *)&xmmword_26AF8DDA0 = 0;
          *((void *)&xmmword_26AF8DDA0 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
          qword_26AF8DDB0 = (uint64_t)v95;
          qword_26AF8DDB8 = 0;
          qword_26AF8DDC0 = (uint64_t)&qword_26AF8DAF8;
          qword_26AF8DDC8 = 0;
          qword_26AF8DD80 = (uint64_t)&unk_26E706150;
          re::IntrospectionRegistry::add(v106, v107);
          re::getPrettyTypeName((re *)&qword_26AF8DD80, (const re::IntrospectionBase *)&v127);
          if (v128) {
            int v108 = v129;
          }
          else {
            int v108 = (char *)&v128 + 1;
          }
          if (v127 && (v128 & 1) != 0) {
            (*(void (**)(void))(*(void *)v127 + 40))();
          }
          long long v109 = v95[2];
          long long v122 = xmmword_26AF8DB18;
          long long v123 = v109;
          int v110 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v124);
          if (v110)
          {
            uint64_t v111 = *v110;
            *((void *)&v121 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v111;
          }
          else
          {
            uint64_t v127 = 0x449AD97C4B77BED4;
            float v128 = "_CompareFunc";
            int v112 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v127);
            if (v112)
            {
              uint64_t v113 = *v112;
              re::StringID::destroyString((re::StringID *)&v127);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v127);
              *(void *)&v132.var0 = 0x449AD97C4B77BED4;
              v132.var1 = "_CompareFunc";
              int v114 = (void *)v127;
              uint64_t v113 = (uint64_t)v128;
              re::StringID::destroyString((re::StringID *)&v132);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v132, (uint64_t)&v128);
            if (!v114 {
              || (int v115 = *v133,
            }
                  uint64_t v127 = v113,
                  float v128 = v115,
                  LODWORD(v12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = -1,
                  (__int16 v116 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v132.var0 + 768, &v127)) == 0)|| !*(void *)v116)
            {
              long long v131 = v123;
              *(void *)&v130.var0 = v114;
              v130.var1 = (char *)v113;
            }
            long long v125 = v122;
            long long v126 = v123;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v127, v124, 1, 0x30uLL, 8uLL, &v126, &v125);
            re::TypeBuilder::setConstructor((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v127, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v127, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v127, v117);
          }
          xmmword_26AF8DDA0 = v121;
          re::StringID::destroyString((re::StringID *)v124);
        }
      }
      uint64_t v118 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v94 + 32))(v94, 72, 8);
      *(_DWORD *)uint64_t v118 = 1;
      *(void *)(v118 + 8) = "textureToSwizzle";
      *(void *)(v118 + 16) = &qword_26AF8DD80;
      *(void *)(v118 + 24) = 0;
      *(void *)(v118 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x7000000008;
      *(_DWORD *)(v118 + 40) = 0;
      *(void *)(v118 + 48) = 0;
      *(void *)(v118 + 56) = 0;
      *(_DWORD *)(v118 + 64) = 0;
      qword_26AF8DA70 = v118;
      __cxa_guard_release(&qword_26AF8D8E0);
    }
  }
  *((void *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 8;
  *((void *)this + 8) = &qword_26AF8DA38;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::SerializableMaterialParameterBlock>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SerializableMaterialParameterBlock>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::SerializableMaterialParameterBlock>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SerializableMaterialParameterBlock>;
  re::IntrospectionRegistry::add(this, v3);
  long long v119 = v120;
}

double re::internal::defaultConstruct<re::ecs2::SerializableMaterialParameterBlock>(int a1, int a2, re::ecs2::SerializableMaterialParameterBlock *this)
{
  *((void *)this + 50) = 0;
  *((_OWORD *)this + 2re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0u;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0u;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(this);
}

void *re::internal::defaultDestruct<re::ecs2::SerializableMaterialParameterBlock>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 44);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 38);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 32);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a3 + 26);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 20);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 14);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 8);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 2);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::SerializableMaterialParameterBlock>(re::ecs2::SerializableMaterialParameterBlock *this)
{
  *((void *)this + 50) = 0;
  *((_OWORD *)this + 2re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0u;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0u;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(this);
}

void *re::internal::defaultDestructV2<re::ecs2::SerializableMaterialParameterBlock>(uint64_t *a1)
{
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 44);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 38);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 32);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a1 + 26);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 14);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 8);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 2);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

void *re::ecs2::allocInfo_SerializableMaterialParameterBlockHandle(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D900, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D900))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8DF38, "SerializableMaterialParameterBlockHandle");
    __cxa_guard_release(&qword_26AF8D900);
  }
  return &unk_26AF8DF38;
}

void re::ecs2::initInfo_SerializableMaterialParameterBlockHandle(re::ecs2 *this, re::IntrospectionBase *a2)
{
  *(void *)&long long v21 = 0x4487493BFBA6DC64;
  *((void *)&v21 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = "SerializableMaterialParameterBlockHandle";
  re::StringID::destroyString((re::StringID *)&v21);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D8F8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8D8F8);
    if (v4)
    {
      uint64_t v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      int v6 = v5;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D968, memory_order_acquire) & 1) == 0)
      {
        uint64_t v5 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF8D968);
        if (v5)
        {
          re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF8DB38);
          __cxa_guard_release(&qword_26AF8D968);
        }
      }
      if ((byte_26AF8D899 & 1) == 0)
      {
        byte_26AF8D899 = 1;
        uint64_t v7 = (re::ecs2 *)qword_26AF8D8F0;
        if (!qword_26AF8D8F0)
        {
          uint64_t v7 = (re::ecs2 *)re::ecs2::allocInfo_SerializableMaterialParameterBlock(v5);
          qword_26AF8D8F0 = (uint64_t)v7;
          re::ecs2::initInfo_SerializableMaterialParameterBlock(v7, v8);
        }
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DB38, 0);
        qword_26AF8DB48 = 0x800000001;
        dword_26AF8DB50 = 8;
        word_26AF8DB54 = 0;
        *(void *)&xmmword_26AF8DB58 = 0;
        *((void *)&xmmword_26AF8DB58 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
        qword_26AF8DB38 = (uint64_t)&unk_26E6CDA08;
        qword_26AF8DB68 = (uint64_t)v7;
        unk_26AF8DB70 = 0;
        re::IntrospectionRegistry::add(v9, v10);
        re::getPrettyTypeName((re *)&qword_26AF8DB38, (const re::IntrospectionBase *)&v21);
        if (BYTE8(v21)) {
          int v11 = v22;
        }
        else {
          int v11 = (char *)&v21 + 9;
        }
        if (void)v21 && (BYTE8(v21)) {
          (*(void (**)(void))(*(void *)v21 + 40))();
        }
        if (v23 >> 1 == 94623636 && (v24 == "char*" || !strcmp(v24, "char*")))
        {
          long long v12 = v21;
        }
        else
        {
          long long v21 = *((_OWORD *)v7 + 2);
          long long v12 = v20;
        }
        xmmword_26AF8DB58 = v12;
        re::StringID::destroyString((re::StringID *)&v23);
      }
      uint64_t v13 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "blockRawPtr";
      *(void *)(v13 + 16) = &qword_26AF8DB38;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 1;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF8D9A0 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_uint32_t((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "m_networkVersion";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x1000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF8D9A8 = v17;
      __cxa_guard_release(&qword_26AF8D8F8);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8D9A0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::SerializableMaterialParameterBlockHandle>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SerializableMaterialParameterBlockHandle>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::SerializableMaterialParameterBlockHandle>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SerializableMaterialParameterBlockHandle>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v19;
}

double re::internal::defaultConstruct<re::ecs2::SerializableMaterialParameterBlockHandle>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
  *(void *)&double result = 1;
  a3[2] = 1;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::SerializableMaterialParameterBlockHandle>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a3)
  {

    *(void *)a3 = 0;
  }
}

double re::internal::defaultConstructV2<re::ecs2::SerializableMaterialParameterBlockHandle>(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  *(void *)&double result = 1;
  a1[2] = 1;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::SerializableMaterialParameterBlockHandle>(uint64_t a1)
{
  if (*(void *)a1)
  {

    *(void *)a1 = 0;
  }
}

uint64_t re::ecs2::ComponentType<re::ecs2::MaterialParameterBlockArrayComponent>::makeBindNode@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  void *v5 = &unk_26E706270;
  uint64_t result = re::BindPoint::BindPoint((uint64_t)(v5 + 1), a2);
  *(void *)(a3 + 16) = v5;
  return result;
}

void re::ecs2::MaterialParameterBlockArrayComponentVersionUtilities::downgradeMaterialParameterBlockArrayComponentFromFall2023(re::ecs2::MaterialParameterBlockArrayComponentVersionUtilities *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  unint64_t v5 = *((void *)this + 6);
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize((uint64_t)this + 112, v5);
  if (v5)
  {
    unint64_t v6 = 0;
    unint64_t v37 = v5;
    do
    {
      unint64_t v7 = *((void *)this + 6);
      if (v7 <= v6) {
        goto LABEL_46;
      }
      uint64_t v8 = *((void *)this + 8);
      StringID v38 = (unint64_t *)(v8 + 24 * v6);
      unint64_t v9 = *v38;
      unint64_t v7 = *v38;
      if (!*v38) {
        unint64_t v7 = *(void *)(v8 + 24 * v6 + 8);
      }
      uint64_t v10 = *(unsigned int *)(v7 + 336);
      if (v10)
      {
        uint64_t v11 = 0;
        long long v12 = *(_DWORD **)(v7 + 320);
        do
        {
          if ((*v12 & 0x80000000) != 0) {
            goto LABEL_12;
          }
          v12 += 80;
          ++v11;
        }
        while (v10 != v11);
        LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v7 + 336);
      }
      else
      {
        LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
      }
LABEL_12:
      if (v10 == v11) {
        goto LABEL_36;
      }
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = *(void *)(v7 + 320);
        int v15 = *(unsigned __int8 *)(v14 + 320 * v13 + 32);
        if (v15 == 21)
        {
          unint64_t v16 = *((void *)this + 6);
          if (v16 <= v6) {
            goto LABEL_43;
          }
          uint64_t v28 = *((void *)this + 8);
          long long v29 = *(re::ecs2::SerializableMaterialParameterBlock **)(v28 + 24 * v6);
          if (!v29) {
            long long v29 = *(re::ecs2::SerializableMaterialParameterBlock **)(v28 + 24 * v6 + 8);
          }
          re::ecs2::SerializableMaterialParameterBlock::colorGamut4FValue(v29, *(const char **)(v14 + 320 * v13 + 16), (uint64_t)v39);
          long long v41 = *(_OWORD *)&v39[4];
          int v42 = v40;
          unint64_t v16 = *((void *)this + 6);
          if (v16 <= v6) {
            goto LABEL_45;
          }
          uint64_t v30 = *((void *)this + 8) + 24 * v6;
          ++*(_DWORD *)(v30 + 16);
          uint64_t v20 = *(void *)v30;
          int v31 = *(char **)(*(void *)(v7 + 320) + 320 * v13 + 16);
          re::ColorGamut4F::as((uint64_t)&v41, 0, 3, (uint64_t)&v48);
          *(_OWORD *)double v43 = v48;
          uint64_t v24 = v43;
          uint64_t v25 = v20;
          int v26 = v31;
          int v27 = 34;
        }
        else
        {
          if (v15 != 20) {
            goto LABEL_27;
          }
          unint64_t v16 = *((void *)this + 6);
          if (v16 <= v6)
          {
            *(void *)&long long v41 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)double v43 = 136315906;
            *(void *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            __int16 v44 = 2048;
            unint64_t v45 = v6;
            __int16 v46 = 2048;
            unint64_t v47 = v16;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_43:
            *(void *)&long long v41 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)double v43 = 136315906;
            *(void *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            __int16 v44 = 2048;
            unint64_t v45 = v6;
            __int16 v46 = 2048;
            unint64_t v47 = v16;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_44:
            *(void *)unint64_t v39 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)double v43 = 136315906;
            *(void *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            __int16 v44 = 2048;
            unint64_t v45 = v6;
            __int16 v46 = 2048;
            unint64_t v47 = v16;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_45:
            *(void *)unint64_t v39 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)double v43 = 136315906;
            *(void *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            __int16 v44 = 2048;
            unint64_t v45 = v6;
            __int16 v46 = 2048;
            unint64_t v47 = v16;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_46:
            *(void *)unint64_t v39 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)double v43 = 136315906;
            *(void *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            __int16 v44 = 2048;
            unint64_t v45 = v6;
            __int16 v46 = 2048;
            unint64_t v47 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_47:
            *(void *)unint64_t v39 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)double v43 = 136315906;
            *(void *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            __int16 v44 = 2048;
            unint64_t v45 = v6;
            __int16 v46 = 2048;
            unint64_t v47 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_48:
            *(void *)unint64_t v39 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)double v43 = 136315906;
            *(void *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            __int16 v44 = 2048;
            unint64_t v45 = v6;
            __int16 v46 = 2048;
            unint64_t v47 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v17 = *((void *)this + 8);
          long long v18 = *(re::ecs2::SerializableMaterialParameterBlock **)(v17 + 24 * v6);
          if (!v18) {
            long long v18 = *(re::ecs2::SerializableMaterialParameterBlock **)(v17 + 24 * v6 + 8);
          }
          re::ecs2::SerializableMaterialParameterBlock::colorGamut3FValue(v18, *(const char **)(v14 + 320 * v13 + 16), (uint64_t)v39);
          long long v41 = *(_OWORD *)&v39[4];
          unint64_t v16 = *((void *)this + 6);
          if (v16 <= v6) {
            goto LABEL_44;
          }
          uint64_t v19 = *((void *)this + 8) + 24 * v6;
          ++*(_DWORD *)(v19 + 16);
          uint64_t v20 = *(void *)v19;
          long long v21 = *(char **)(*(void *)(v7 + 320) + 320 * v13 + 16);
          *(void *)&long long v22 = re::ColorGamut3F::as((uint64_t *)&v41, 0, 3);
          DWORD2(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = v23;
          long long v48 = v22;
          uint64_t v24 = (unsigned __int8 *)&v48;
          uint64_t v25 = v20;
          int v26 = v21;
          int v27 = 33;
        }
        re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v25, v26, v27, v24);
        ++*(_DWORD *)(v20 + 400);
LABEL_27:
        unsigned int v32 = *(_DWORD *)(v7 + 336);
        if (v32 <= (int)v11 + 1) {
          int v33 = v11 + 1;
        }
        else {
          int v33 = *(_DWORD *)(v7 + 336);
        }
        while (1)
        {
          uint64_t v13 = (v11 + 1);
          if (v33 - 1 == v11) {
            break;
          }
          LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v11 + 1;
          int v34 = v13;
          if ((*(_DWORD *)(*(void *)(v7 + 320) + 320 * v13) & 0x80000000) != 0) {
            goto LABEL_34;
          }
        }
        int v34 = v33;
LABEL_34:
        LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v34;
      }
      while (v32 != v34);
      unint64_t v5 = v37;
      unint64_t v9 = *v38;
LABEL_36:
      if (!v9) {
        unint64_t v9 = *(void *)(v8 + 24 * v6 + 8);
      }
      unint64_t v7 = *((void *)this + 16);
      if (v7 <= v6) {
        goto LABEL_47;
      }
      uint64_t v35 = *((void *)this + 18) + 408 * v6;
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 16, v9 + 16);
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 64, v9 + 64);
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 112, v9 + 112);
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 160, v9 + 160);
      re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=(v35 + 208, v9 + 208);
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 256, v9 + 256);
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 304, v9 + 304);
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 352, v9 + 352);
      *(unsigned char *)(v35 + 404) = *(unsigned char *)(v9 + 404);
      *(_DWORD *)(v35 + 400) = 0;
      unint64_t v7 = *((void *)this + 16);
      if (v7 <= v6) {
        goto LABEL_48;
      }
      *(_DWORD *)(*((void *)this + 18) + 408 * v6 + 400) = *(_DWORD *)(v8 + 24 * v6 + 16);
      ++v6;
    }
    while (v6 != v5);
  }
  *a2 = 1;
}

void *re::ecs2::allocInfo_MaterialParameterBlockArrayComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D918, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D918))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8DFB0, "MaterialParameterBlockArrayComponent");
    __cxa_guard_release(&qword_26AF8D918);
  }
  return &unk_26AF8DFB0;
}

void re::ecs2::initInfo_MaterialParameterBlockArrayComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v40 = 0x33A7E1F6E0F9D61ELL;
  long long v41 = "MaterialParameterBlockArrayComponent";
  re::StringID::destroyString((re::StringID *)&v40);
  *((_OWORD *)this + 2) = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D910, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8D910);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "ecs2::Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8D9C8 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      unint64_t v9 = v8;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D990, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF8D990);
        if (v8)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8DB78);
          qword_26AF8DB78 = (uint64_t)&unk_26E706540;
          __cxa_guard_release(&qword_26AF8D990);
        }
      }
      if ((byte_26AF8D89A & 1) == 0)
      {
        uint64_t v10 = (void *)qword_26AF8D8F0;
        if (qword_26AF8D8F0
          || (uint64_t v10 = re::ecs2::allocInfo_SerializableMaterialParameterBlock(v8),
              qword_26AF8D8F0 = (uint64_t)v10,
              re::ecs2::initInfo_SerializableMaterialParameterBlock((re::ecs2 *)v10, v11),
              (byte_26AF8D89A & 1) == 0))
        {
          byte_26AF8D89A = 1;
          int v12 = *((_DWORD *)v10 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DB78, 0);
          qword_26AF8DB88 = 0x2800000003;
          dword_26AF8DB90 = v12;
          word_26AF8DB94 = 0;
          *(void *)&xmmword_26AF8DB98 = 0;
          *((void *)&xmmword_26AF8DB98 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
          qword_26AF8DBA8 = (uint64_t)v10;
          qword_26AF8DBB0 = 0;
          qword_26AF8DB78 = (uint64_t)&unk_26E706540;
          re::IntrospectionRegistry::add(v13, v14);
          re::getPrettyTypeName((re *)&qword_26AF8DB78, (const re::IntrospectionBase *)&v40);
          if (v41) {
            int v15 = v42;
          }
          else {
            int v15 = (char *)&v41 + 1;
          }
          if (v40 && (v41 & 1) != 0) {
            (*(void (**)(void))(*(void *)v40 + 40))();
          }
          long long v37 = *((_OWORD *)v10 + 2);
          unint64_t v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
          if (v16)
          {
            uint64_t v17 = *v16;
            *((void *)&v36 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v17;
          }
          else
          {
            long long v39 = v37;
            re::TypeBuilder::beginListType((uint64_t)&v40, v38, 1, 0x28uLL, 8uLL, &v39);
            re::TypeBuilder::setConstructor((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v40, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v40, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v40, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v40, v18);
          }
          xmmword_26AF8DB98 = v36;
          re::StringID::destroyString((re::StringID *)v38);
        }
      }
      uint64_t v19 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "blocks";
      *(void *)(v19 + 16) = &qword_26AF8DB78;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x7000000001;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8D9D0 = v19;
      uint64_t v20 = (re::ecs2 *)re::introspectionAllocator((re *)v19);
      long long v21 = v20;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D998, memory_order_acquire) & 1) == 0)
      {
        uint64_t v20 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF8D998);
        if (v20)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8DBB8);
          qword_26AF8DBB8 = (uint64_t)&unk_26E7065D8;
          __cxa_guard_release(&qword_26AF8D998);
        }
      }
      if ((byte_26AF8D89B & 1) == 0)
      {
        long long v22 = (void *)qword_26AF8D908;
        if (qword_26AF8D908
          || (long long v22 = re::ecs2::allocInfo_SerializableMaterialParameterBlockHandle(v20),
              qword_26AF8D908 = (uint64_t)v22,
              re::ecs2::initInfo_SerializableMaterialParameterBlockHandle((re::ecs2 *)v22, v23),
              (byte_26AF8D89B & 1) == 0))
        {
          byte_26AF8D89B = 1;
          int v24 = *((_DWORD *)v22 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8DBB8, 0);
          qword_26AF8DBC8 = 0x2800000003;
          dword_26AF8DBD0 = v24;
          word_26AF8DBD4 = 0;
          *(void *)&xmmword_26AF8DBD8 = 0;
          *((void *)&xmmword_26AF8DBD8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
          qword_26AF8DBE8 = (uint64_t)v22;
          qword_26AF8DBF0 = 0;
          qword_26AF8DBB8 = (uint64_t)&unk_26E7065D8;
          re::IntrospectionRegistry::add(v25, v26);
          re::getPrettyTypeName((re *)&qword_26AF8DBB8, (const re::IntrospectionBase *)&v40);
          if (v41) {
            int v27 = v42;
          }
          else {
            int v27 = (char *)&v41 + 1;
          }
          if (v40 && (v41 & 1) != 0) {
            (*(void (**)(void))(*(void *)v40 + 40))();
          }
          long long v37 = *((_OWORD *)v22 + 2);
          uint64_t v28 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
          if (v28)
          {
            uint64_t v29 = *v28;
            *((void *)&v36 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v29;
          }
          else
          {
            long long v39 = v37;
            re::TypeBuilder::beginListType((uint64_t)&v40, v38, 1, 0x28uLL, 8uLL, &v39);
            re::TypeBuilder::setConstructor((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v40, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v40, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v40, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v40, v30);
          }
          xmmword_26AF8DBD8 = v36;
          re::StringID::destroyString((re::StringID *)v38);
        }
      }
      uint64_t v31 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "blockHandles";
      *(void *)(v31 + 16) = &qword_26AF8DBB8;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0x2000000002;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF8D9D8 = v31;
      unsigned int v32 = re::introspectionAllocator((re *)v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 64, 8);
      *(_DWORD *)uint64_t v33 = 6;
      *(void *)(v33 + 8) = 1;
      *(void *)(v33 + 16) = 0;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
      *(unsigned char *)(v33 + 40) = 1;
      *(void *)(v33 + 48) = re::ecs2::MaterialParameterBlockArrayComponentVersionUtilities::downgradeMaterialParameterBlockArrayComponentFromFall2023;
      *(_DWORD *)(v33 + 56) = 2;
      qword_26AF8D9E0 = v33;
      __cxa_guard_release(&qword_26AF8D910);
    }
  }
  *((void *)this + 2) = 0x9800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8D9C8;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialParameterBlockArrayComponent>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialParameterBlockArrayComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::MaterialParameterBlockArrayComponent>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialParameterBlockArrayComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v34 = v35;
}

double re::internal::defaultConstruct<re::ecs2::MaterialParameterBlockArrayComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 18) = 0;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6EC650;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)(v3 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MaterialParameterBlockArrayComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::MaterialParameterBlockArrayComponent>(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6EC650;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(void *)(v1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(v1 + 136) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MaterialParameterBlockArrayComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MaterialParameterBlockArrayComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParameterBlockArrayComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParameterBlockArrayComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParameterBlockArrayComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParameterBlockArrayComponent>, this);
}

void re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(re::ecs2::MaterialParameterBlockArrayComponent *this, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)this + 6);
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize((uint64_t)this + 32, a2);
  if (v4 < a2)
  {
    uint64_t v6 = 24 * v4;
    do
    {
      if (*((void *)this + 6) <= v4)
      {
        memset(v8, 0, sizeof(v8));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v7 = *((void *)this + 8) + v6;
      re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock>(v5, v8);
      ++*(_DWORD *)(v7 + 16);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v7, *(uint64_t *)&v8[0]);
      *(void *)(v7 + 8) = 0;
      if (*(void *)&v8[0]) {

      }
      ++v4;
      v6 += 24;
    }
    while (a2 != v4);
  }
}

void re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 24 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(v10 + v8);
      if (v11)
      {

        *(void *)(v10 + v8) = 0;
        unint64_t v4 = *(void *)(a1 + 16);
      }
      ++v9;
      v8 += 24;
    }
    while (v9 < v4);
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 24 * v4;
      do
      {
        uint64_t v7 = (void *)(*(void *)(a1 + 32) + v6);
        *uint64_t v7 = 0;
        v7[1] = 0;
        void v7[2] = 1;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void re::ecs2::MaterialParameterBlockArrayComponent::updateParameterBlockValue(re::ecs2::MaterialParameterBlockArrayComponent *this, const re::RenderManager *a2, const char **a3, re::ecs2::SerializedMaterialParameter *a4, re::MaterialParameterBlock *a5, re::ecs2::Scene *a6, BOOL *a7)
{
  uint64_t v7 = a5;
  uint64_t v108 = *MEMORY[0x263EF8340];
  *a7 = 0;
  unint64_t v8 = *((void *)this + 11);
  if (v8 <= (unint64_t)a5)
  {
    uint64_t v92 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v94 = 0u;
    memset(buf, 0, sizeof(buf));
    uint64_t v14 = (char *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)char v101 = 136315906;
    *(void *)&v101[4] = "operator[]";
    __int16 v102 = 1024;
    int v103 = 789;
    __int16 v104 = 2048;
    int v105 = v7;
    __int16 v106 = 2048;
    unint64_t v107 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_125;
  }
  uint64_t v7 = *(re::MaterialParameterBlock **)(*((void *)this + 13) + 8 * (void)a5);
  uint64_t v14 = (char *)a4 + 256;
  char v15 = *((unsigned char *)a4 + 268);
  if ((v15 & 7) == 0
    || (uint64_t v16 = *((void *)a4 + 34), isParameterType = re::MaterialParameterBlock::keysHash(v7), v16 != isParameterType))
  {
    isParameteruint64_t Type = re::MaterialParameterBlock::handle(v7, a3[1], (uint64_t)buf);
    *((void *)a4 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = *(void *)buf;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)&buf[8];
    *((unsigned char *)a4 + 280) = buf[24];
    char v15 = *((unsigned char *)a4 + 268);
  }
  int v18 = *(unsigned __int8 *)a4;
  if ((v15 & 7) != 0)
  {
    isParameteruint64_t Type = re::MaterialParameterHandle::isParameterType((uint64_t)v14, *(unsigned __int8 *)a4);
    if (!isParameterType) {
      return;
    }
  }
  if (v18 <= 47)
  {
    switch(v18)
    {
      case 0:
        uint64_t v19 = *re::graphicsLogObjects((re *)isParameterType);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          int v20 = *(unsigned __int8 *)a4;
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v20;
          _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "Unsupported m_material parameter type %hhu", buf, 8u);
        }
        return;
      case 1:
        *(_DWORD *)long long buf = *((_DWORD *)a4 + 4);
        int v24 = &v90;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 4;
        uint64_t v29 = 1;
        goto LABEL_93;
      case 2:
        buf[0] = *((unsigned char *)a4 + 16) != 0;
        int v24 = &v91;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 1;
        uint64_t v29 = 2;
        goto LABEL_93;
      case 3:
        *(_DWORD *)long long buf = *((_DWORD *)a4 + 4);
        int v24 = &v89;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 4;
        uint64_t v29 = 3;
        goto LABEL_93;
      case 4:
        *(void *)long long buf = *((void *)a4 + 2);
        int v24 = &v86;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 8;
        uint64_t v29 = 4;
        goto LABEL_93;
      case 5:
        *(_OWORD *)long long buf = *((_OWORD *)a4 + 1);
        int v24 = &v82;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 16;
        uint64_t v29 = 5;
        goto LABEL_93;
      case 6:
        *(_OWORD *)long long buf = *((_OWORD *)a4 + 1);
        int v24 = &v76;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 16;
        uint64_t v29 = 6;
        goto LABEL_93;
      case 7:
        *(_DWORD *)long long buf = *((_DWORD *)a4 + 4);
        int v24 = &v88;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 4;
        uint64_t v29 = 7;
        goto LABEL_93;
      case 8:
        *(void *)long long buf = *((void *)a4 + 2);
        int v24 = &v85;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 8;
        uint64_t v29 = 8;
        goto LABEL_93;
      case 9:
        *(_OWORD *)long long buf = *((_OWORD *)a4 + 1);
        int v24 = &v81;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 16;
        uint64_t v29 = 9;
        goto LABEL_93;
      case 10:
        *(_OWORD *)long long buf = *((_OWORD *)a4 + 1);
        int v24 = &v75;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 16;
        uint64_t v29 = 10;
        goto LABEL_93;
      case 20:
        if (!*((unsigned char *)a4 + 248)) {
          *((unsigned char *)a4 + 248) = 1;
        }
        uint64_t v32 = *((void *)a4 + 2);
        unint64_t v33 = *((unsigned int *)a4 + 6) | ((unint64_t)*((unsigned __int8 *)a4 + 32) << 32);
        long long v34 = &v74;
        goto LABEL_69;
      case 21:
        if (!*((unsigned char *)a4 + 248)) {
          *((unsigned char *)a4 + 248) = 1;
        }
        char v35 = *((_DWORD *)a4 + 8);
        long long v71 = *((_OWORD *)a4 + 1);
        char v72 = v35;
        long long v36 = &v73;
        long long v37 = &v71;
        goto LABEL_72;
      case 32:
        *(void *)long long buf = *((void *)a4 + 2);
        int v24 = &v87;
        uint64_t v25 = buf;
        int v26 = v7;
        int v27 = (uint64_t *)v14;
        size_t v28 = 8;
        uint64_t v29 = 32;
        goto LABEL_93;
      case 33:
        if (!*((unsigned char *)a4 + 248))
        {
          uint64_t v47 = *((void *)a4 + 2);
          *(void *)&uint8_t buf[8] = *((void *)a4 + 3);
          *(void *)long long buf = v47;
          int v24 = &v83;
          uint64_t v25 = buf;
          int v26 = v7;
          int v27 = (uint64_t *)v14;
          size_t v28 = 16;
          uint64_t v29 = 33;
          goto LABEL_93;
        }
        uint64_t v32 = *((void *)a4 + 2);
        unint64_t v33 = *((unsigned int *)a4 + 6);
        long long v34 = &v84;
LABEL_69:
        re::MaterialParameterBlock::setColorGamut3F(v7, (uint64_t *)v14, v32, v33, (uint64_t)v34);
        return;
      case 34:
        if (!*((unsigned char *)a4 + 248))
        {
          uint64_t v48 = *((void *)a4 + 2);
          *(void *)&uint8_t buf[8] = *((void *)a4 + 3);
          *(void *)long long buf = v48;
          int v24 = &v77;
          uint64_t v25 = buf;
          int v26 = v7;
          int v27 = (uint64_t *)v14;
          size_t v28 = 16;
          uint64_t v29 = 34;
          goto LABEL_93;
        }
        long long v78 = *((_OWORD *)a4 + 1);
        char v79 = 0;
        long long v36 = &v80;
        long long v37 = &v78;
LABEL_72:
        re::MaterialParameterBlock::setColorGamut4F(v7, (uint64_t *)v14, (uint64_t)v37, (uint64_t)v36);
        break;
      default:
        return;
    }
    return;
  }
  if (v18 > 63)
  {
    if (v18 != 64)
    {
      if (v18 != 128)
      {
        if (v18 != 192 || !a2) {
          return;
        }
        uint64_t v30 = (id *)*((void *)a2 + 6);
        buf[0] = *((unsigned char *)a4 + 104);
        buf[1] = *((unsigned char *)a4 + 105);
        if (buf[1]) {
          buf[2] = *((unsigned char *)a4 + 106);
        }
        buf[3] = *((unsigned char *)a4 + 107);
        if (buf[3]) {
          uint8_t buf[4] = *((unsigned char *)a4 + 108);
        }
        uint8_t buf[8] = *((unsigned char *)a4 + 112);
        if (buf[8]) {
          *(_DWORD *)&unsigned char buf[12] = *((_DWORD *)a4 + 29);
        }
        uint8_t buf[16] = *((unsigned char *)a4 + 120);
        if (buf[16]) {
          *(_DWORD *)&buf[20] = *((_DWORD *)a4 + 31);
        }
        uint8_t buf[24] = *((unsigned char *)a4 + 128);
        if (buf[24]) {
          *(_DWORD *)&buf[28] = *((_DWORD *)a4 + 33);
        }
        LOBYTE(v94) = *((unsigned char *)a4 + 136);
        if ((_BYTE)v94) {
          DWORD1(v94) = *((_DWORD *)a4 + 35);
        }
        BYTE8(v94) = *((unsigned char *)a4 + 144);
        if (BYTE8(v94)) {
          HIDWORD(v94) = *((_DWORD *)a4 + 37);
        }
        LOBYTE(v95) = *((unsigned char *)a4 + 152);
        if ((_BYTE)v95) {
          DWORD1(v95) = *((_DWORD *)a4 + 39);
        }
        BYTE8(v95) = *((unsigned char *)a4 + 160);
        if (BYTE8(v95)) {
          HIDWORD(v95) = *((_DWORD *)a4 + 41);
        }
        LOBYTE(v96) = *((unsigned char *)a4 + 168);
        if ((_BYTE)v96) {
          DWORD1(v96) = *((_DWORD *)a4 + 43);
        }
        BYTE8(v96) = *((unsigned char *)a4 + 176);
        if (BYTE8(v96)) {
          HIDWORD(v96) = *((_DWORD *)a4 + 45);
        }
        if (*((unsigned char *)a4 + 184)) {
          int v98 = *((_DWORD *)a4 + 47);
        }
        if (*((unsigned char *)a4 + 192)) {
          uint64_t v100 = *((void *)a4 + 25);
        }
        re::OptionalMaterialSamplerData::makeSamplerData((re::OptionalMaterialSamplerData *)buf, (uint64_t)v101);
        re::MaterialSamplerData::makeDescriptor((re::MaterialSamplerData *)v101, &v60);
        id v61 = objc_msgSend(*v30, sel_newSamplerStateWithDescriptor_, v60);
        re::MaterialParameterBlock::setSampler(v7, (uint64_t)v14, &v61, (uint64_t)v62);
        v62[0] = 0;
        if (v61)
        {

          id v61 = 0;
        }
        uint64_t v31 = v60;
        if (!v60) {
          return;
        }
        goto LABEL_123;
      }
      if (!a2 || !_os_feature_enabled_impl()) {
        return;
      }
      *(void *)long long buf = 0;
      if ((*((unsigned char *)a4 + 268) & 7) != 0)
      {
        double v43 = (void **)re::MaterialParameterBlock::bufferValue((uint64_t)v7, (uint64_t)v14);
        NS::SharedPtr<MTL::Texture>::operator=((void **)buf, v43);
        id v44 = objc_msgSend(*(id *)buf, sel_length);
        unint64_t v45 = *(void **)buf;
        if (v44 == *((id *)a4 + 28))
        {
          if (*(void *)buf) {
            goto LABEL_120;
          }
        }
        else
        {

          *(void *)long long buf = 0;
        }
      }
      id v53 = *((id *)a2 + 23);
      *(void *)char v101 = objc_msgSend(v53, sel_newBufferWithLength_options_, *((void *)a4 + 28), 0);
      NS::SharedPtr<MTL::Texture>::operator=((void **)buf, (void **)v101);
      if (*(void *)v101) {

      }
      unint64_t v45 = *(void **)buf;
LABEL_120:
      memcpy(objc_msgSend(v45, sel_contents), *((const void **)a4 + 30), *((void *)a4 + 28));
      unint64_t v58 = (unint64_t)*a3 >> 1;
      id v54 = *(id *)buf;
      id v55 = v54;
      int v56 = 0;
      unsigned int v57 = objc_msgSend(*(id *)buf, sel_length);
      re::MaterialParameterBlock::setBuffer(v7, (uint64_t *)&v58, (uint64_t)&v55, (uint64_t)v59);
      v59[0] = 0;
      if (v54) {

      }
      uint64_t v31 = *(void **)buf;
      if (!*(void *)buf) {
        return;
      }
LABEL_123:

      return;
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (re::ecs2::SerializedMaterialParameter *)((char *)a4 + 80));
    uint64_t v40 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)buf);
    if (!v40)
    {
      re::AssetHandle::loadAsync((re::AssetHandle *)buf);
      *a7 = 1;
LABEL_115:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
      return;
    }
    unint64_t v8 = v40;
    if (a6 && (uint64_t v41 = *((void *)a6 + 47)) != 0) {
      uint64_t v42 = *(void *)(v41 + 24);
    }
    else {
      uint64_t v42 = 1;
    }
    *(void *)(v40 + 104) = v42;
    uint64_t v46 = *(void *)(v40 + 96);
    if (v46
      && (!*(unsigned char *)(v46 + 295) && *(unsigned char *)(v46 + 46) && *(void *)(v46 + 376) < 2uLL
       || !*(unsigned char *)(v46 + 294)
       || *(void *)(v46 + 376) != v42))
    {
      re::DrawableQueue::setActiveRealityRendererScene((re::DrawableQueue *)v46, v42);
    }
    if (!a2) {
      goto LABEL_114;
    }
    if (*(_DWORD *)(v8 + 240))
    {
      long long v49 = *re::graphicsLogObjects((re *)v46);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        long long v50 = re::AssetHandle::assetInfo((re::AssetHandle *)buf);
        if (v50[17]) {
          long long v51 = (char *)v50[18];
        }
        else {
          long long v51 = (char *)v50 + 137;
        }
        *(_DWORD *)char v101 = 136315138;
        *(void *)&v101[4] = v51;
        _os_log_error_impl(&dword_233120000, v49, OS_LOG_TYPE_ERROR, "Invalid material parameter: texture not backed by Metal: %s", v101, 0xCu);
      }
      goto LABEL_115;
    }
    if (!re::MaterialAsset::isColorTextureParameter((re::MaterialAsset *)a3, (const re::StringID *)v42)
      && !*((unsigned char *)a4 + 248)
      || !re::TextureAsset::isLegacyLinearFormatWithSRGBData((re::TextureAsset *)v8))
    {
LABEL_114:
      re::MaterialParameterBlock::setTextureHandle(v7, (uint64_t)v14, (re::TextureHandle *)(v8 + 48), (uint64_t)v63);
      v63[0] = 0;
      goto LABEL_115;
    }
    long long v52 = (void *)(v8 + 136);
    if (*(void *)(v8 + 144) && *v52
      || (re::TextureAsset::addLegacyLinearFormatWithSRGBDataTexture((os_unfair_lock_s **)v8, (os_unfair_lock_s **)a2),
          *(void *)(v8 + 144))
      && *v52)
    {
      re::MaterialParameterBlock::setTextureHandle(v7, (uint64_t)v14, (re::TextureHandle *)(v8 + 136), (uint64_t)v65);
      v65[0] = 0;
      goto LABEL_115;
    }
LABEL_125:
    re::MaterialParameterBlock::setTextureHandle(v7, (uint64_t)v14, (re::TextureHandle *)(v8 + 48), (uint64_t)v64);
    v64[0] = 0;
    goto LABEL_115;
  }
  switch(v18)
  {
    case '0':
      *(_OWORD *)long long buf = *((_OWORD *)a4 + 1);
      int v24 = &v70;
      uint64_t v25 = buf;
      int v26 = v7;
      int v27 = (uint64_t *)v14;
      size_t v28 = 16;
      uint64_t v29 = 48;
      break;
    case '1':
      long long v38 = *((_OWORD *)a4 + 2);
      long long v39 = *((_OWORD *)a4 + 3);
      v68[0] = *((_OWORD *)a4 + 1);
      v68[1] = v38;
      v68[2] = v39;
      int v24 = &v69;
      uint64_t v25 = (uint8_t *)v68;
      int v26 = v7;
      int v27 = (uint64_t *)v14;
      size_t v28 = 48;
      uint64_t v29 = 49;
      break;
    case '2':
      long long v21 = *((_OWORD *)a4 + 2);
      long long v22 = *((_OWORD *)a4 + 3);
      long long v23 = *((_OWORD *)a4 + 4);
      v66[0] = *((_OWORD *)a4 + 1);
      v66[1] = v21;
      v66[2] = v22;
      v66[3] = v23;
      int v24 = &v67;
      uint64_t v25 = (uint8_t *)v66;
      int v26 = v7;
      int v27 = (uint64_t *)v14;
      size_t v28 = 64;
      uint64_t v29 = 50;
      break;
    default:
      return;
  }
LABEL_93:
  re::MaterialParameterBlock::setConstant(v28, v25, v26, v27, v29, (uint64_t)v24);
}

void *re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(void *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v1 = this[16];
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = this + 14;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize((uint64_t)(this + 4), v1);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    for (unint64_t i = 0; i != v1; ++i)
    {
      if (v2[6] <= i)
      {
        long long v11 = 0u;
        long long v12 = 0u;
        long long v9 = 0u;
        long long v10 = 0u;
        long long v8 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_11:
        long long v11 = 0u;
        long long v12 = 0u;
        long long v9 = 0u;
        long long v10 = 0u;
        long long v8 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v2[16] <= i) {
        goto LABEL_11;
      }
      uint64_t v7 = v2[8] + v5;
      re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock&>((re *)(v2[18] + v4), (re::ecs2::SerializableMaterialParameterBlock **)&v8);
      ++*(_DWORD *)(v7 + 16);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v7, v8);
      *(void *)(v7 + 8) = 0;
      if ((void)v8) {

      }
      v5 += 24;
      v4 += 408;
    }
    return re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::clear(v3);
  }
  return this;
}

void *re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::clear(void *result)
{
  unint64_t v1 = result;
  uint64_t v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[4];
    uint64_t v5 = 408 * v2;
    do
    {
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 352));
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 304));
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 256));
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v4 + v3 + 208));
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 160));
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 112));
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 64));
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 16));
      *(void *)(v4 + vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = &unk_26E6DECE0;
      double result = objc_destructInstance((id)(v4 + v3 + 8));
      v3 += 408;
    }
    while (v5 != v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

BOOL re::ecs2::MaterialParameterBlockArrayComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v162 = *MEMORY[0x263EF8340];
  long long v9 = (re *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 && *(void *)(v8 + 104))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v155, a5, 0);
    unint64_t v152 = a4;
    uint64_t v153 = *(void *)v155;
    uint64_t v154 = *(void *)&v155[8];
    uint64_t v130 = a5;
    if (*(void *)v155 != a5
      || *(unsigned __int16 *)&v155[8] != 0xFFFFLL
      || (*(_DWORD *)&v155[8] & 0xFFFF0000) != 4294901760)
    {
      StringID v132 = v9;
      do
      {
        long long v12 = *(re::ecs2::MaterialParameterBlockArrayComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v153);
        re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(v12);
        unint64_t v13 = *((void *)v12 + 6);
        if (*((void *)v12 + 11) < v13)
        {
          re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)v12 + 72, *((void *)v12 + 6));
          unint64_t v13 = *((void *)v12 + 6);
        }
        if (*(void *)v9)
        {
          if (v13)
          {
            unint64_t v14 = 0;
            uint64_t v15 = *((void *)v12 + 8);
            unsigned int v16 = 1;
            while (1)
            {
              if (*(_DWORD *)(v15 + 24 * v14 + 16))
              {
                unint64_t v17 = *((void *)v12 + 11);
                if (v17 <= v14) {
                  goto LABEL_242;
                }
                if (!*(void *)(*((void *)v12 + 13) + 8 * v14))
                {
                  re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>(v9, &v151);
                  unint64_t v17 = *((void *)v12 + 11);
                  if (v17 <= v14) {
                    goto LABEL_244;
                  }
                  uint64_t v18 = *((void *)v12 + 13);
                  uint64_t v19 = *(void *)(v18 + 8 * v14);
                  *(void *)(v18 + 8 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = v151;
                  float32x4_t v151 = (re::MaterialParameterBlock *)v19;
                  if (v19) {

                  }
                  unint64_t v13 = *((void *)v12 + 6);
                  if (v13 <= v14) {
                    goto LABEL_245;
                  }
                  uint64_t v15 = *((void *)v12 + 8);
                  *(void *)(v15 + 24 * v14 + 16) = 1;
                }
              }
              unint64_t v14 = v16;
              if (v13 <= v16++) {
                goto LABEL_27;
              }
            }
          }
          char v111 = 0;
          goto LABEL_216;
        }
        if (!v13)
        {
          char v111 = 0;
LABEL_216:
          uint64_t v112 = a3;
LABEL_217:
          unint64_t v113 = v152;
          unint64_t v114 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v153);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v112 + 16), v113, v114, *(void *)(v112 + 32));
          if ((v111 & 1) == 0) {
            goto LABEL_219;
          }
LABEL_218:
          re::ecs2::Component::markDirty(v12);
          goto LABEL_219;
        }
LABEL_27:
        unint64_t v14 = 0;
        unint64_t v21 = 0;
        int v137 = 1;
        unint64_t v135 = v13;
        int v139 = v12;
        do
        {
          unint64_t v17 = *((void *)v12 + 6);
          if (v17 <= v21)
          {
            uint64_t v149 = 0;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            *(_OWORD *)float32x4_t v155 = 0u;
            unint64_t v127 = v21;
            unint64_t v21 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v160 = 136315906;
            *(void *)&v160[4] = "operator[]";
            *(_WORD *)&v160[12] = 1024;
            *(_DWORD *)&v160[14] = 789;
            *(_WORD *)&v160[18] = 2048;
            *(void *)uint64_t v161 = v127;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_240:
            uint64_t v149 = 0;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            *(_OWORD *)float32x4_t v155 = 0u;
            unint64_t v128 = v21;
            unint64_t v21 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v160 = 136315906;
            *(void *)&v160[4] = "operator[]";
            *(_WORD *)&v160[12] = 1024;
            *(_DWORD *)&v160[14] = 789;
            *(_WORD *)&v160[18] = 2048;
            *(void *)uint64_t v161 = v128;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_241:
            uint64_t v149 = 0;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            *(_OWORD *)float32x4_t v155 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v160 = 136315906;
            *(void *)&v160[4] = "operator[]";
            *(_WORD *)&v160[12] = 1024;
            *(_DWORD *)&v160[14] = 789;
            *(_WORD *)&v160[18] = 2048;
            *(void *)uint64_t v161 = v21;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_242:
            uint64_t v149 = 0;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            *(_OWORD *)float32x4_t v155 = 0u;
            unint64_t v21 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v160 = 136315906;
            *(void *)&v160[4] = "operator[]";
            *(_WORD *)&v160[12] = 1024;
            *(_DWORD *)&v160[14] = 789;
            *(_WORD *)&v160[18] = 2048;
            *(void *)uint64_t v161 = v14;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_243:
            uint64_t v149 = 0;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            *(_OWORD *)float32x4_t v155 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v160 = 136315906;
            *(void *)&v160[4] = "operator[]";
            *(_WORD *)&v160[12] = 1024;
            *(_DWORD *)&v160[14] = 789;
            *(_WORD *)&v160[18] = 2048;
            *(void *)uint64_t v161 = v21;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_244:
            uint64_t v149 = 0;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            *(_OWORD *)float32x4_t v155 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v160 = 136315906;
            *(void *)&v160[4] = "operator[]";
            *(_WORD *)&v160[12] = 1024;
            *(_DWORD *)&v160[14] = 789;
            *(_WORD *)&v160[18] = 2048;
            *(void *)uint64_t v161 = v14;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_245:
            uint64_t v149 = 0;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            *(_OWORD *)float32x4_t v155 = 0u;
            unint64_t v129 = v13;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v160 = 136315906;
            *(void *)&v160[4] = "operator[]";
            *(_WORD *)&v160[12] = 1024;
            *(_DWORD *)&v160[14] = 789;
            *(_WORD *)&v160[18] = 2048;
            *(void *)uint64_t v161 = v14;
            *(_WORD *)&v161[8] = 2048;
            *(void *)&v161[10] = v129;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          unint64_t v17 = *((void *)v12 + 11);
          if (v17 <= v21) {
            goto LABEL_240;
          }
          unsigned int v136 = v14;
          unint64_t v14 = *(void *)(*((void *)v12 + 8) + 24 * v21);
          long long v22 = *(re::MaterialParameterBlock **)(*((void *)v12 + 13) + 8 * v21);
          if (v22)
          {
            long long v23 = (char *)v22 + 8;
            unint64_t v13 = v135;
          }
          if (*(unsigned char *)(v14 + 404)) {
            goto LABEL_37;
          }
          int v24 = v22;
          unint64_t v17 = *((void *)v12 + 6);
          if (v17 <= v21) {
            goto LABEL_243;
          }
          long long v22 = v24;
          if (*(_DWORD *)(*((void *)v12 + 8) + 24 * v21 + 16) != *(_DWORD *)(*((void *)v12 + 8) + 24 * v21 + 20))
          {
LABEL_37:
            if (!v22)
            {
              unint64_t v14 = v136;
              goto LABEL_209;
            }
            float32x4_t v141 = v22;
            BOOL v25 = *(unsigned __int8 *)(v14 + 404) != 0;
            *(unsigned char *)(v14 + 404) = 0;
            unint64_t v17 = *((void *)v12 + 6);
            if (v17 <= v21) {
              goto LABEL_241;
            }
            BOOL v133 = v25;
            unint64_t v134 = v5;
            *(_DWORD *)(*((void *)v12 + 8) + 24 * v21 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20) = *(_DWORD *)(*((void *)v12 + 8) + 24 * v21 + 16);
            uint64_t v26 = *(unsigned int *)(v14 + 336);
            if (v26)
            {
              uint64_t v27 = 0;
              size_t v28 = *(_DWORD **)(v14 + 320);
              uint64_t v29 = a3;
              while ((*v28 & 0x80000000) == 0)
              {
                v28 += 80;
                if (v26 == ++v27)
                {
                  LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = *(_DWORD *)(v14 + 336);
                  break;
                }
              }
            }
            else
            {
              LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = 0;
              uint64_t v29 = a3;
            }
            uint64_t v140 = (re::MaterialParameterBlock *)v21;
            if (v26 != v27)
            {
              uint64_t v30 = v27;
              do
              {
                uint64_t v31 = *(void *)(v14 + 320) + 320 * v30;
                uint64_t v32 = (StringID *)(v31 + 8);
                v155[0] = 0;
                re::ecs2::MaterialParameterBlockArrayComponent::updateParameterBlockValue(v139, *(const re::RenderManager **)v9, (const char **)(v31 + 8), (re::ecs2::SerializedMaterialParameter *)(v31 + 32), (re::MaterialParameterBlock *)v21, *(re::ecs2::Scene **)(v29 + 8), v155);
                if (v155[0])
                {
                  int v137 = 0;
                  *(unsigned char *)(v14 + 404) = 1;
                }
                re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v14 + 352, v32);
                if (*(_DWORD *)(v14 + 336) <= (v27 + 1)) {
                  int v33 = v27 + 1;
                }
                else {
                  int v33 = *(_DWORD *)(v14 + 336);
                }
                while (1)
                {
                  uint64_t v30 = (v27 + 1);
                  if (v33 - 1 == v27) {
                    break;
                  }
                  LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = v27 + 1;
                  int v34 = v30;
                  if ((*(_DWORD *)(*(void *)(v14 + 320) + 320 * v30) & 0x80000000) != 0) {
                    goto LABEL_57;
                  }
                }
                int v34 = v33;
LABEL_57:
                LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = v34;
              }
              while (v26 != v34);
            }
            *(void *)uint64_t v160 = 0;
            *(void *)&v160[8] = 0;
            *(_DWORD *)&v160[16] = 1;
            *(void *)&v161[4] = 0;
            *(void *)&v161[12] = 0;
            uint64_t v35 = *(unsigned int *)(v14 + 384);
            if (v35)
            {
              uint64_t v36 = 0;
              long long v37 = *(int **)(v14 + 368);
              long long v38 = (void *)&unk_26879F000;
              while (1)
              {
                int v39 = *v37;
                v37 += 6;
                if (v39 < 0) {
                  break;
                }
                if (v35 == ++v36)
                {
                  LODWORD(v36) = *(_DWORD *)(v14 + 384);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v36) = 0;
              long long v38 = (void *)&unk_26879F000;
            }
            if (v35 != v36)
            {
              uint64_t v40 = v36;
              unsigned int v41 = *(_DWORD *)(v14 + 384);
              do
              {
                uint64_t v42 = *(void *)(v14 + 368);
                if (!re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(v14 + 304, (void *)(v42 + 24 * v40 + 8)))
                {
                  uint64_t v43 = v42 + 24 * v40;
                  *(void *)float32x4_t v155 = *(void *)(v43 + 16);
                  re::DynamicOverflowArray<char const*,8ul>::add((int *)v160, v155);
                  re::MaterialParameterBlock::removeParameter(v141, *(const char **)(v43 + 16));
                  unsigned int v41 = *(_DWORD *)(v14 + 384);
                }
                if (v41 <= (int)v36 + 1) {
                  unsigned int v44 = v36 + 1;
                }
                else {
                  unsigned int v44 = v41;
                }
                while (1)
                {
                  uint64_t v40 = (v36 + 1);
                  if (v44 - 1 == v36) {
                    break;
                  }
                  LODWORD(v36) = v36 + 1;
                  unsigned int v45 = v40;
                  if ((*(_DWORD *)(*(void *)(v14 + 368) + 24 * v40) & 0x80000000) != 0) {
                    goto LABEL_75;
                  }
                }
                unsigned int v45 = v44;
LABEL_75:
                LODWORD(v36) = v45;
              }
              while (v35 != v45);
              long long v9 = v132;
              if (v160[16]) {
                uint64_t v46 = (char **)&v161[4];
              }
              else {
                uint64_t v46 = *(char ***)&v161[12];
              }
              long long v38 = (void *)&unk_26879F000;
              if (*(void *)&v160[8])
              {
                uint64_t v47 = &v46[*(void *)&v160[8]];
                do
                {
                  uint64_t v48 = *v46;
                  if (*v46)
                  {
                    uint64_t v49 = *v48;
                    if (*v48)
                    {
                      char v50 = v48[1];
                      if (v50)
                      {
                        long long v51 = (unsigned __int8 *)(v48 + 2);
                        do
                        {
                          uint64_t v49 = 31 * v49 + v50;
                          int v52 = *v51++;
                          char v50 = v52;
                        }
                        while (v52);
                      }
                    }
                  }
                  else
                  {
                    uint64_t v49 = 0;
                  }
                  *(void *)float32x4_t v155 = 2 * v49;
                  *(void *)&v155[8] = v48;
                  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v14 + 352, v155);
                  re::StringID::destroyString((re::StringID *)v155);
                  ++v46;
                }
                while (v46 != v47);
              }
            }
            if (*(void *)v9)
            {
              uint64_t v53 = *(unsigned int *)(v14 + 48);
              if (v53)
              {
                uint64_t v54 = 0;
                id v55 = *(int **)(v14 + 32);
                while (1)
                {
                  int v56 = *v55;
                  v55 += 10;
                  if (v56 < 0) {
                    break;
                  }
                  if (v53 == ++v54)
                  {
                    LODWORD(v54) = *(_DWORD *)(v14 + 48);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v54) = 0;
              }
              if (v53 != v54)
              {
                uint64_t v57 = v54;
                do
                {
                  uint64_t v58 = *(void *)(v14 + 32);
                  re::ecs2::SerializableMaterialParameterBlock::samplerValue((re::ecs2::SerializableMaterialParameterBlock *)v14, *(const char **)(v58 + 40 * v57 + 32), (uint64_t)v155);
                  if (v155[0])
                  {
                    uint64_t v59 = v58 + 40 * v57;
                    re::OptionalMaterialSamplerData::makeSamplerData((re::OptionalMaterialSamplerData *)&v155[8], (uint64_t)&v149);
                    uint64_t v148 = *(void *)(v59 + 8) >> 1;
                    uint64_t v147 = *(void *)(v59 + 24) >> 1;
                    unint64_t v60 = re::MaterialSamplerData::hash((re::MaterialSamplerData *)&v149);
                    re::MaterialParameterBlock::bindTextureToSampler(v141, &v148, &v147, v60);
                    uint64_t v147 = 0;
                    uint64_t v148 = 0;
                  }
                  unsigned int v61 = *(_DWORD *)(v14 + 48);
                  if (v61 <= (int)v54 + 1) {
                    unsigned int v61 = v54 + 1;
                  }
                  while (1)
                  {
                    uint64_t v57 = (v54 + 1);
                    if (v61 - 1 == v54) {
                      break;
                    }
                    LODWORD(v54) = v54 + 1;
                    unsigned int v62 = v57;
                    if ((*(_DWORD *)(*(void *)(v14 + 32) + 40 * v57) & 0x80000000) != 0) {
                      goto LABEL_106;
                    }
                  }
                  unsigned int v62 = v61;
LABEL_106:
                  LODWORD(v54) = v62;
                }
                while (v53 != v62);
              }
              uint64_t v63 = *(unsigned int *)(v14 + 96);
              if (v63)
              {
                uint64_t v64 = 0;
                uint64_t v65 = *(int **)(v14 + 80);
                long long v9 = v132;
                long long v38 = (void *)&unk_26879F000;
                while (1)
                {
                  int v66 = *v65;
                  v65 += 8;
                  if (v66 < 0) {
                    break;
                  }
                  if (v63 == ++v64)
                  {
                    LODWORD(v64) = *(_DWORD *)(v14 + 96);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v64) = 0;
                long long v9 = v132;
                long long v38 = &unk_26879F000;
              }
              if (v63 != v64)
              {
                uint64_t v67 = v64;
                do
                {
                  uint64_t v68 = *(void *)(v14 + 80) + 32 * v67;
                  uint64_t v146 = *(void *)(v68 + 8) >> 1;
                  re::MaterialParameterBlock::setUVIndexForTexture(v141, &v146, *(_DWORD *)(v68 + 24));
                  uint64_t v146 = 0;
                  if (*(_DWORD *)(v14 + 96) <= (v64 + 1)) {
                    int v69 = v64 + 1;
                  }
                  else {
                    int v69 = *(_DWORD *)(v14 + 96);
                  }
                  int v70 = v64;
                  while (1)
                  {
                    uint64_t v67 = (v70 + 1);
                    if (v69 - 1 == v70) {
                      break;
                    }
                    ++v70;
                    LODWORD(v64) = v67;
                    if ((*(_DWORD *)(*(void *)(v14 + 80) + 32 * v67) & 0x80000000) != 0) {
                      goto LABEL_123;
                    }
                  }
                  LODWORD(v64) = v69;
LABEL_123:
                  ;
                }
                while (v63 != v64);
              }
            }
            uint64_t v71 = *(unsigned int *)(v14 + 240);
            if (v71)
            {
              uint64_t v72 = 0;
              char v73 = *(int **)(v14 + 224);
              while (1)
              {
                int v74 = *v73;
                v73 += 8;
                if (v74 < 0) {
                  break;
                }
                if (v71 == ++v72)
                {
                  LODWORD(v72) = *(_DWORD *)(v14 + 240);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v72) = 0;
            }
            if (v71 != v72)
            {
              uint64_t v79 = v72;
              do
              {
                uint64_t v80 = *(void *)(v14 + 224) + 32 * v79;
                unint64_t v81 = *(void *)(v80 + 8);
                if (*(unsigned char *)(v80 + 16))
                {
                  uint64_t v82 = *(void *)(v80 + 24);
                  if (v38[415] != -1) {
                    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                  }
                  re::MaterialParameterBlock::addPassTechniqueMapping(v141, v81, v82, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
                }
                else
                {
                  if (v38[415] != -1) {
                    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                  }
                  re::MaterialParameterBlock::removePassTechniqueMapping(v141, v81, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
                }
                if (*(_DWORD *)(v14 + 240) <= (v72 + 1)) {
                  int v83 = v72 + 1;
                }
                else {
                  int v83 = *(_DWORD *)(v14 + 240);
                }
                while (1)
                {
                  uint64_t v79 = (v72 + 1);
                  if (v83 - 1 == v72) {
                    break;
                  }
                  LODWORD(v72) = v72 + 1;
                  int v84 = v79;
                  if ((*(_DWORD *)(*(void *)(v14 + 224) + 32 * v79) & 0x80000000) != 0) {
                    goto LABEL_151;
                  }
                }
                int v84 = v83;
LABEL_151:
                LODWORD(v72) = v84;
              }
              while (v71 != v84);
            }
            *(void *)&long long v157 = 0;
            *(void *)&long long v156 = 0;
            memset(v155, 0, sizeof(v155));
            DWORD2(v156) = 0;
            uint64_t v75 = *(unsigned int *)(v14 + 288);
            if (v75)
            {
              uint64_t v76 = 0;
              char v77 = *(int **)(v14 + 272);
              while (1)
              {
                int v78 = *v77;
                v77 += 18;
                if (v78 < 0) {
                  break;
                }
                if (v75 == ++v76)
                {
                  LODWORD(v76) = *(_DWORD *)(v14 + 288);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v76) = 0;
            }
            if (v75 != v76)
            {
              uint64_t v85 = v76;
              do
              {
                uint64_t v86 = *(void *)(v14 + 272);
                uint64_t v87 = v86 + 72 * v85;
                char v88 = (void *)(v87 + 8);
                if (*(unsigned char *)(v87 + 24))
                {
                  re::MaterialParameterBlock::handle(v141, *(const char **)(v86 + 72 * v85 + 16), (uint64_t)&v149);
                  if ((BYTE4(v150) & 7) == 0)
                  {
                    uint64_t v145 = *v88 >> 1;
                    re::MaterialParameterBlock::addBinding(v141, &v145, *(char **)(v86 + 72 * v85 + 48), *(char **)(v86 + 72 * v85 + 64), *(unsigned int *)(v86 + 72 * v85 + 32));
                    uint64_t v145 = 0;
                  }
                }
                else
                {
                  uint64_t v144 = *v88 >> 1;
                  re::MaterialParameterBlock::removeBinding((uint64_t *)v141, &v144);
                  uint64_t v144 = 0;
                  char v89 = *(char **)(v86 + 72 * v85 + 16);
                  if (v89)
                  {
                    uint64_t v90 = *v89;
                    if (*v89)
                    {
                      char v91 = v89[1];
                      if (v91)
                      {
                        uint64_t v92 = (unsigned __int8 *)(v89 + 2);
                        do
                        {
                          uint64_t v90 = 31 * v90 + v91;
                          int v93 = *v92++;
                          char v91 = v93;
                        }
                        while (v93);
                      }
                    }
                  }
                  else
                  {
                    uint64_t v90 = 0;
                  }
                  uint64_t v149 = 2 * v90;
                  float32x4_t v150 = v89;
                  re::DynamicArray<re::StringID>::add(v155, &v149);
                  re::StringID::destroyString((re::StringID *)&v149);
                }
                unsigned int v94 = *(_DWORD *)(v14 + 288);
                if (v94 <= (int)v76 + 1) {
                  unsigned int v94 = v76 + 1;
                }
                while (1)
                {
                  uint64_t v85 = (v76 + 1);
                  if (v94 - 1 == v76) {
                    break;
                  }
                  LODWORD(v76) = v76 + 1;
                  unsigned int v95 = v85;
                  if ((*(_DWORD *)(*(void *)(v14 + 272) + 72 * v85) & 0x80000000) != 0) {
                    goto LABEL_173;
                  }
                }
                unsigned int v95 = v94;
LABEL_173:
                LODWORD(v76) = v95;
              }
              while (v75 != v95);
              if ((void)v156)
              {
                long long v96 = (void *)v157;
                int32x4_t v138 = (void *)(v157 + 16 * v156);
                do
                {
                  if (*(void *)(v14 + 256))
                  {
                    unint64_t v97 = 0xBF58476D1CE4E5B9 * ((*v96 >> 31) ^ (*v96 >> 1));
                    unint64_t v98 = ((0x94D049BB133111EBLL * (v97 ^ (v97 >> 27))) ^ ((0x94D049BB133111EBLL * (v97 ^ (v97 >> 27))) >> 31))
                        % *(unsigned int *)(v14 + 280);
                    uint64_t v99 = *(void *)(v14 + 264);
                    uint64_t v100 = *(unsigned int *)(v99 + 4 * v98);
                    if (v100 != 0x7FFFFFFF)
                    {
                      uint64_t v101 = *(void *)(v14 + 272);
                      if (re::StringID::operator==((void *)(v101 + 72 * v100 + 8), v96))
                      {
                        *(_DWORD *)(v99 + 4 * v98) = *(_DWORD *)(v101 + 72 * v100) & 0x7FFFFFFF;
LABEL_183:
                        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(v14 + 272) + 72 * v100));
                        *(_DWORD *)(*(void *)(v14 + 272) + 72 * v100) = *(_DWORD *)(*(void *)(v14 + 272) + 72 * v100) & 0x80000000 | *(_DWORD *)(v14 + 292);
                        *(_DWORD *)(v14 + 292) = v100;
                        --*(_DWORD *)(v14 + 284);
                        ++*(_DWORD *)(v14 + 296);
                      }
                      else
                      {
                        while (1)
                        {
                          uint64_t v102 = v100;
                          uint64_t v100 = *(_DWORD *)(v101 + 72 * v100) & 0x7FFFFFFF;
                          if (v100 == 0x7FFFFFFF) {
                            break;
                          }
                          if (re::StringID::operator==((void *)(v101 + 72 * v100 + 8), v96))
                          {
                            *(_DWORD *)(v101 + 72 * v102) = *(_DWORD *)(v101 + 72 * v102) & 0x80000000 | *(_DWORD *)(v101 + 72 * v100) & 0x7FFFFFFF;
                            goto LABEL_183;
                          }
                        }
                      }
                    }
                  }
                  v96 += 2;
                }
                while (v96 != v138);
              }
            }
            uint64_t v103 = *(unsigned int *)(v14 + 144);
            if (v103)
            {
              uint64_t v104 = 0;
              int v105 = *(int **)(v14 + 128);
              unint64_t v5 = v134;
              long long v22 = v141;
              while (1)
              {
                int v106 = *v105;
                v105 += 8;
                if (v106 < 0) {
                  break;
                }
                if (v103 == ++v104)
                {
                  LODWORD(v104) = *(_DWORD *)(v14 + 144);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v104) = 0;
              unint64_t v5 = v134;
              long long v22 = v141;
            }
            if (v103 != v104)
            {
              uint64_t v107 = v104;
              do
              {
                uint64_t v108 = *(void *)(v14 + 128) + 32 * v107;
                if (*(unsigned char *)(v108 + 24))
                {
                  uint64_t v143 = *(void *)(v108 + 8) >> 1;
                  unint64_t v5 = v5 & 0xFFFFFFFF00000000 | *(unsigned int *)(v108 + 25);
                  re::MaterialParameterBlock::setSwizzleForTexture(v22, &v143, v5);
                  uint64_t v143 = 0;
                }
                else
                {
                  uint64_t v142 = *(void *)(v108 + 8) >> 1;
                  re::MaterialParameterBlock::resetSwizzleForTexture(v22, &v142);
                  uint64_t v142 = 0;
                }
                if (*(_DWORD *)(v14 + 144) <= (v104 + 1)) {
                  int v109 = v104 + 1;
                }
                else {
                  int v109 = *(_DWORD *)(v14 + 144);
                }
                while (1)
                {
                  uint64_t v107 = (v104 + 1);
                  if (v109 - 1 == v104) {
                    break;
                  }
                  LODWORD(v104) = v104 + 1;
                  int v110 = v107;
                  if ((*(_DWORD *)(*(void *)(v14 + 128) + 32 * v107) & 0x80000000) != 0) {
                    goto LABEL_203;
                  }
                }
                int v110 = v109;
LABEL_203:
                LODWORD(v104) = v110;
              }
              while (v103 != v110);
            }
            re::DynamicArray<re::StringID>::deinit((uint64_t)v155);
            if (*(void *)v160 && (v160[16] & 1) == 0) {
              (*(void (**)(void))(**(void **)v160 + 40))();
            }
            unint64_t v14 = v133 | v136;
            long long v12 = v139;
            unint64_t v21 = (unint64_t)v140;
LABEL_208:

            unint64_t v13 = v135;
            goto LABEL_209;
          }
          unint64_t v14 = v136;
          if (v24) {
            goto LABEL_208;
          }
LABEL_209:
          ++v21;
        }
        while (v21 != v13);
        char v111 = v14;
        if (v137)
        {
          uint64_t v112 = a3;
          goto LABEL_217;
        }
        if (v14) {
          goto LABEL_218;
        }
LABEL_219:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v153);
      }
      while (v153 != v130 || (unsigned __int16)v154 != 0xFFFF || WORD1(v154) != 0xFFFF);
    }
    return *(_DWORD *)(v130 + 40) != 0;
  }
  else
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v155, a5, 0);
    uint64_t v117 = *(void *)v155;
    uint64_t v118 = *(void *)&v155[8];
    *(void *)float32x4_t v155 = a4;
    *(void *)&v155[8] = v117;
    *(void *)&long long v156 = v118;
    uint64_t v119 = (unsigned __int16)v118;
    uint64_t v120 = v118 & 0xFFFF0000;
    if (v117 != a5 || v119 != 0xFFFF || v120 != 4294901760)
    {
      do
      {
        unint64_t v123 = *(void *)v155;
        unint64_t v124 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v155[8]);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v123, v124, *(void *)(a3 + 40));
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v155[8]);
      }
      while (*(void *)&v155[8] != a5 || (unsigned __int16)v156 != 0xFFFF || WORD1(v156) != 0xFFFF);
    }
    return 0;
  }
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    long long v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8)
                         + 4
                         * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                          % *(unsigned int *)(a1 + 24)));
    if (v5 != 0x7FFFFFFF)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v2 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v6 + 320 * v5 + 8), a2))
      {
        uint64_t v5 = *(_DWORD *)(v6 + 320 * v5) & 0x7FFFFFFF;
        if (v5 == 0x7FFFFFFF) {
          return v2 != 0x7FFFFFFF;
        }
      }
      uint64_t v2 = v5;
    }
  }
  return v2 != 0x7FFFFFFF;
}

int *re::DynamicOverflowArray<char const*,8ul>::add(int *result, void *a2)
{
  uint64_t v3 = result;
  if (!*(void *)result)
  {
    unint64_t v10 = *((void *)v3 + 1) + 1;
    unint64_t result = (int *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, v10);
    int v5 = v3[4] + 2;
    v3[4] = v5;
    goto LABEL_15;
  }
  unint64_t v4 = *((void *)result + 1);
  int v5 = result[4];
  if (v5)
  {
    if (v4 - 8 >= 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_15;
    }
    unint64_t v7 = v4 + 1;
    unint64_t v9 = 16;
    goto LABEL_11;
  }
  unint64_t v6 = *((void *)result + 3);
  BOOL v8 = v4 >= v6;
  unint64_t v7 = v4 + 1;
  BOOL v8 = !v8 || v6 >= v7;
  if (!v8)
  {
    unint64_t v9 = 2 * v6;
LABEL_11:
    if (v9 <= v7) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = v9;
    }
    unint64_t result = (int *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(result, v11);
    int v5 = v3[4];
  }
LABEL_15:
  if (v5) {
    long long v12 = v3 + 6;
  }
  else {
    long long v12 = (void *)*((void *)v3 + 4);
  }
  uint64_t v13 = *((void *)v3 + 1);
  v12[v13] = *a2;
  *((void *)v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v13 + 1;
  v3[4] += 2;
  return result;
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  unint64_t v5 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  unint64_t v6 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31)) % v2;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(v7 + 4 * v6);
  if (v8 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v10 + 24 * v8 + 8), a2))
  {
    while (1)
    {
      unsigned int v11 = v8;
      int v12 = *(_DWORD *)(v10 + 24 * v8);
      uint64_t v8 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v10 + 24 * v8 + 8), a2))
      {
        *(_DWORD *)(v10 + 24 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = *(_DWORD *)(v10 + 24 * v11) & 0x80000000 | *(_DWORD *)(v10
                                                                                               + 24 * v8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v10 + 24 * v8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = (int *)(v13 + 24 * v8);
  int v15 = *v14;
  if (*v14 < 0)
  {
    int *v14 = v15 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v13 + 24 * v8 + 8));
    uint64_t v13 = *(void *)(a1 + 16);
    int v15 = *(_DWORD *)(v13 + 24 * v8);
  }
  int v16 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v13 + 24 * v8) = *(_DWORD *)(a1 + 36) | v15 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v16 + 1;
  return 1;
}

BOOL re::ecs2::MaterialParameterBlockArrayComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v53, a5, 0);
  unint64_t v58 = a4;
  uint64_t v59 = v53;
  uint64_t v60 = v54;
  uint64_t v50 = a5;
  if (v53 != a5 || (unsigned __int16)v54 != 0xFFFFLL || (v54 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v9 = *(void **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v59);
      re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(v9);
      uint64_t v10 = v9[6];
      if (!v10) {
        goto LABEL_75;
      }
      unsigned int v11 = (uint64_t *)v9[8];
      long long v51 = &v11[3 * v10];
      int v12 = 1;
      do
      {
        uint64_t v13 = *v11;
        uint64_t v14 = *v11;
        if (!*v11) {
          uint64_t v14 = v11[1];
        }
        int v15 = *(unsigned __int8 *)(v14 + 404);
        int v16 = *((_DWORD *)v11 + 4);
        if (v15 || v16 != *((_DWORD *)v11 + 5))
        {
          *(unsigned char *)(v13 + 404) = 0;
          *((_DWORD *)v11 + 5) = v16;
          uint64_t v17 = *(unsigned int *)(v13 + 336);
          if (v17)
          {
            uint64_t v18 = 0;
            uint64_t v19 = *(_DWORD **)(v13 + 320);
            while ((*v19 & 0x80000000) == 0)
            {
              v19 += 80;
              if (v17 == ++v18)
              {
                LODWORD(v18) = *(_DWORD *)(v13 + 336);
                break;
              }
            }
          }
          else
          {
            LODWORD(v18) = 0;
          }
          if (v17 != v18)
          {
            uint64_t v20 = v18;
            do
            {
              uint64_t v21 = *(void *)(v13 + 320);
              uint64_t v22 = v21 + 320 * v20;
              re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(*v11 + 352, (StringID *)(v22 + 8));
              if (*(unsigned char *)(v22 + 32) == 64)
              {
                re::AssetHandle::AssetHandle((re::AssetHandle *)&v53, (const re::AssetHandle *)(v21 + 320 * v20 + 112));
                if (!v54
                  || (unsigned int v23 = atomic_load((unsigned int *)(v54 + 704)), v23 != 2)
                  && (unsigned int v24 = atomic_load((unsigned int *)(v54 + 704)), v24 != 3))
                {
                  re::AssetHandle::loadAsync((re::AssetHandle *)&v53);
                  *(unsigned char *)(*v11 + 404) = 1;
                  int v12 = 2;
                }
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v53);
              }
              unsigned int v25 = *(_DWORD *)(v13 + 336);
              if (v25 <= (int)v18 + 1) {
                unsigned int v25 = v18 + 1;
              }
              while (1)
              {
                uint64_t v20 = (v18 + 1);
                if (v25 - 1 == v18) {
                  break;
                }
                LODWORD(v18) = v18 + 1;
                unsigned int v26 = v20;
                if ((*(_DWORD *)(*(void *)(v13 + 320) + 320 * v20) & 0x80000000) != 0) {
                  goto LABEL_34;
                }
              }
              unsigned int v26 = v25;
LABEL_34:
              LODWORD(v18) = v26;
            }
            while (v17 != v26);
          }
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          int v55 = 1;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v27 = *v11;
          if (!*v11) {
            uint64_t v27 = v11[1];
          }
          uint64_t v28 = *(unsigned int *)(v27 + 384);
          if (v28)
          {
            uint64_t v29 = 0;
            uint64_t v30 = *(int **)(v27 + 368);
            while (1)
            {
              int v31 = *v30;
              v30 += 6;
              if (v31 < 0) {
                break;
              }
              if (v28 == ++v29)
              {
                LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = *(_DWORD *)(v27 + 384);
                break;
              }
            }
          }
          else
          {
            LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
          }
          if (v28 != v29)
          {
            uint64_t v32 = v29;
            unsigned int v33 = *(_DWORD *)(v27 + 384);
            do
            {
              uint64_t v34 = *v11;
              if (!*v11) {
                uint64_t v34 = v11[1];
              }
              uint64_t v35 = *(void *)(v27 + 368);
              if (!re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(v34 + 304, (void *)(v35 + 24 * v32 + 8)))
              {
                v52[0] = *(void *)(v35 + 24 * v32 + 16);
                re::DynamicOverflowArray<char const*,8ul>::add((int *)&v53, v52);
                unsigned int v33 = *(_DWORD *)(v27 + 384);
              }
              if (v33 <= (int)v29 + 1) {
                unsigned int v36 = v29 + 1;
              }
              else {
                unsigned int v36 = v33;
              }
              while (1)
              {
                uint64_t v32 = (v29 + 1);
                if (v36 - 1 == v29) {
                  break;
                }
                LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v29 + 1;
                unsigned int v37 = v32;
                if ((*(_DWORD *)(*(void *)(v27 + 368) + 24 * v32) & 0x80000000) != 0) {
                  goto LABEL_56;
                }
              }
              unsigned int v37 = v36;
LABEL_56:
              LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v37;
            }
            while (v28 != v37);
            if (v55) {
              long long v38 = (char **)&v56;
            }
            else {
              long long v38 = v57;
            }
            if (v54)
            {
              int v39 = &v38[v54];
              do
              {
                uint64_t v40 = *v38;
                if (*v38)
                {
                  uint64_t v41 = *v40;
                  if (*v40)
                  {
                    char v42 = v40[1];
                    if (v42)
                    {
                      uint64_t v43 = (unsigned __int8 *)(v40 + 2);
                      do
                      {
                        uint64_t v41 = 31 * v41 + v42;
                        int v44 = *v43++;
                        char v42 = v44;
                      }
                      while (v44);
                    }
                  }
                }
                else
                {
                  uint64_t v41 = 0;
                }
                uint64_t v45 = *v11 + 352;
                v52[0] = 2 * v41;
                v52[1] = v40;
                re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v45, v52);
                re::StringID::destroyString((re::StringID *)v52);
                ++v38;
              }
              while (v38 != v39);
            }
          }
          if (v53 && (v55 & 1) == 0) {
            (*(void (**)(void))(*(void *)v53 + 40))();
          }
        }
        v11 += 3;
      }
      while (v11 != v51);
      if (v12 != 2)
      {
LABEL_75:
        unint64_t v46 = v58;
        unint64_t v47 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v59);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v46, v47, *(void *)(a3 + 32));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v59);
    }
    while (v59 != v50 || (unsigned __int16)v60 != 0xFFFF || WORD1(v60) != 0xFFFF);
  }
  return *(_DWORD *)(v50 + 40) != 0;
}

uint64_t re::ecs2::MaterialParameterBlockArrayComponentStateImpl::processUpdatingComponents()
{
  return 0;
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v39[0] = a2;
  v39[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v38);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40));
  if (v5)
  {
    unint64_t v6 = (id *)v4;
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    do
    {
      id WeakRetained = (char *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        uint64_t v10 = WeakRetained;
        uint64_t v11 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 192), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v11) {
          uint64_t v12 = *(void *)(v11 + 24);
        }
        else {
          uint64_t v12 = 0;
        }
        v7 += v12;
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v37, 3111, a1);
  uint64_t v13 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v45, (uint64_t *)(a1 + 288));
  v48[2] = *(void *)(a1 + 328);
  int v41 = 1;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  v40[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v40, 0);
  v41 += 2;
  unint64_t v14 = *(void *)(a1 + 328);
  if ((v14 & 0x3F) != 0) {
    unint64_t v15 = (v14 >> 6) + 1;
  }
  else {
    unint64_t v15 = v14 >> 6;
  }
  uint64_t v44 = *(void *)(a1 + 328);
  uint64_t v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v40, v15, &v49);
  int v16 = *(_DWORD *)(a1 + 304);
  if (v16) {
    uint64_t v17 = (void *)(a1 + 312);
  }
  else {
    uint64_t v17 = *(void **)(a1 + 320);
  }
  uint64_t v18 = *(void *)(a1 + 296);
  uint64_t v19 = (uint64_t *)(a1 + 312);
  while (1)
  {
    uint64_t v20 = a1 + 312;
    if ((v16 & 1) == 0) {
      uint64_t v20 = *(void *)(a1 + 320);
    }
    if (v17 == (void *)(v20 + 8 * v18)) {
      break;
    }
    *v17++ = 0;
    int v16 = *(_DWORD *)(a1 + 304);
  }
  uint64_t v21 = v48;
  if ((v47 & 1) == 0) {
    uint64_t v21 = (unint64_t *)v48[1];
  }
  uint64_t v22 = v46;
  if ((v46 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v23 = 0;
    while (1)
    {
      unint64_t v25 = *v21++;
      unint64_t v24 = v25;
      if (v25) {
        break;
      }
      v23 -= 64;
      if (!--v22) {
        goto LABEL_33;
      }
    }
    unint64_t v26 = __clz(__rbit64(v24));
    if (v26 + 1 != v23)
    {
      unint64_t FirstBitSet = v26 - v23;
      do
      {
        uint64_t v28 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 120, FirstBitSet);
        if (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::update(v28, (uint64_t)v39))re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v40, FirstBitSet); {
        else
        }
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v40, FirstBitSet);
        unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v45, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_33:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 288, (uint64_t)v40);
  if (*(unsigned char *)(a1 + 352))
  {
    unint64_t v29 = *(void *)(a1 + 296);
    int v30 = *(_DWORD *)(a1 + 304);
    if (v29 >= 0xB)
    {
      if ((v30 & 1) == 0) {
        uint64_t v19 = *(uint64_t **)(a1 + 320);
      }
      uint64_t v31 = 8 * v29;
      while (!*v19)
      {
        ++v19;
        v31 -= 8;
        if (!v31) {
          goto LABEL_49;
        }
      }
      goto LABEL_47;
    }
    if ((v30 & 1) == 0) {
      uint64_t v19 = *(uint64_t **)(a1 + 320);
    }
    if (v29)
    {
      uint64_t v32 = 0;
      uint64_t v33 = 8 * v29;
      do
      {
        uint64_t v34 = *v19++;
        v32 |= v34;
        v33 -= 8;
      }
      while (v33);
      if (v32)
      {
LABEL_47:
        uint64_t v35 = *(re::ecs2::System **)(a1 + 336);
        if (!*((unsigned char *)v35 + 86)) {
          re::ecs2::System::queueToRun(v35, 0.0);
        }
      }
    }
  }
LABEL_49:
  if (v40[0] && (v41 & 1) == 0) {
    (*(void (**)(void))(*(void *)v40[0] + 40))();
  }
  if (v45 && (v47 & 1) == 0) {
    (*(void (**)(void))(*(void *)v45 + 40))();
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v37);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v38);
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a3;
  v19[1] = a4;
  if (a2)
  {
    uint64_t v5 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v18);
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 3111, v5);
    uint64_t v20 = a2;
    unint64_t v6 = *(void *)(*(void *)(v5 + 184)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v5 + 176), &v20)+ 8);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v5 + 288, v6);
    uint64_t v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 120, v6);
    if (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::update(v7, (uint64_t)v19))re::DynamicBitset<unsigned long long,256ul>::setBit(v5 + 288, v6); {
    if (!*(unsigned char *)(v5 + 352))
    }
      goto LABEL_22;
    unint64_t v8 = *(void *)(v5 + 296);
    int v9 = *(_DWORD *)(v5 + 304);
    if (v8 >= 0xB)
    {
      if (v9) {
        uint64_t v10 = (void *)(v5 + 312);
      }
      else {
        uint64_t v10 = *(void **)(v5 + 320);
      }
      uint64_t v12 = 8 * v8;
      while (!*v10)
      {
        ++v10;
        v12 -= 8;
        if (!v12) {
          goto LABEL_22;
        }
      }
LABEL_20:
      int v16 = *(re::ecs2::System **)(v5 + 336);
      if (!*((unsigned char *)v16 + 86)) {
        re::ecs2::System::queueToRun(v16, 0.0);
      }
      goto LABEL_22;
    }
    if (v9)
    {
      uint64_t v11 = (uint64_t *)(v5 + 312);
      if (!v8)
      {
LABEL_22:
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v18);
      }
    }
    else
    {
      uint64_t v11 = *(uint64_t **)(v5 + 320);
      if (!v8) {
        goto LABEL_22;
      }
    }
    uint64_t v13 = 0;
    uint64_t v14 = 8 * v8;
    do
    {
      uint64_t v15 = *v11++;
      v13 |= v15;
      v14 -= 8;
    }
    while (v14);
    if (!v13) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  return result;
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::willAddSystemToECSService(re::ecs2::MaterialParameterBlockArraySystem *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 408))(result);
    if (result) {
      *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
    }
  }
  return result;
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 112) = 0;
  return this;
}

void re::ecs2::MaterialParameterBlockArraySystem::willAddSceneToECSService(re::ecs2::MaterialParameterBlockArraySystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 120;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::MaterialParameterBlockArraySystem *)((char *)this + 240);
  unint64_t v6 = *((void *)this + 31);
  int v7 = *((_DWORD *)this + 64);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)this + 264);
    }
    else {
      unint64_t v8 = (void *)*((void *)this + 34);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)this + 264);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)this + 34);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 240, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MaterialParameterBlockArraySystem *)((char *)this + 176), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = (char *)this + 288;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 20);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 15, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 136)) {
    uint64_t v19 = (char *)this + 144;
  }
  else {
    uint64_t v19 = (char *)*((void *)this + 19);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 20);
  ++*((_DWORD *)this + 42);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 20);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 20) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MaterialParameterBlockArraySystem *)((char *)this + 176), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 20);
  unint64_t v29 = *((void *)this + 35);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 35) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 35) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 256)) {
      uint64_t v33 = (char *)this + 264;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 34);
    }
    *(void *)&v33[8 * *((void *)this + 31) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 20);
  unint64_t v35 = *((void *)this + 41);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::MaterialParameterBlockArraySystem *)((char *)this + 288), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 41) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 304)) {
      int v39 = (char *)this + 312;
    }
    else {
      int v39 = (char *)*((void *)this + 40);
    }
    *(void *)&v39[8 * *((void *)this + 37) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = (char *)this + 288;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 352)) {
    return;
  }
  unint64_t v40 = *((void *)this + 37);
  int v41 = *((_DWORD *)this + 76);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)((char *)this + 312);
    }
    else {
      uint64_t v42 = (void *)*((void *)this + 40);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    uint64_t v48 = (re::ecs2::System *)*((void *)this + 42);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 312);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 40);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::willRemoveSceneFromECSService(re::ecs2::MaterialParameterBlockArraySystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 176);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 22, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 23) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 240, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 288, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 120, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      *unint64_t v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_MaterialParameterBlockArraySystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D920, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D920))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E028, "MaterialParameterBlockArraySystem");
    __cxa_guard_release(&qword_26AF8D920);
  }
  return &unk_26AF8E028;
}

void re::ecs2::initInfo_MaterialParameterBlockArraySystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xE97A9D082EEB5ABALL;
  v5[1] = "MaterialParameterBlockArraySystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x16800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_MaterialParameterBlockArraySystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialParameterBlockArraySystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialParameterBlockArraySystem>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::MaterialParameterBlockArraySystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MaterialParameterBlockArraySystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::MaterialParameterBlockArraySystem>;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialParameterBlockArraySystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::MaterialParameterBlockArraySystem *re::internal::defaultConstruct<re::ecs2::MaterialParameterBlockArraySystem>(int a1, int a2, re::ecs2::MaterialParameterBlockArraySystem *this)
{
  return re::ecs2::MaterialParameterBlockArraySystem::MaterialParameterBlockArraySystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::MaterialParameterBlockArraySystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MaterialParameterBlockArraySystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MaterialParameterBlockArraySystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParameterBlockArraySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParameterBlockArraySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParameterBlockArraySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParameterBlockArraySystem>, this);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MaterialParameterBlockArrayComponent>::dependsOnComponents()
{
  return 0;
}

void re::ecs2::BasicComponentStateImpl<re::ecs2::MaterialParameterBlockArrayComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(re::ecs2::Component **)(a3 + 192);
  if (v3)
  {
    uint64_t v5 = 24;
    unint64_t v6 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v5), v3);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v10 = v7;
        unint64_t v6 = v8;
        goto LABEL_11;
      }
      v5 += 8;
    }
    while (v5 != 56);
    unint64_t v10 = -1;
LABEL_11:
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::setComponentState(a2, v10, v6);
  }
}

void re::ecs2::MaterialParameterBlockArraySystem::~MaterialParameterBlockArraySystem(re::ecs2::MaterialParameterBlockArraySystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::typeInfo(re::ecs2::MaterialParameterBlockArraySystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParameterBlockArraySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParameterBlockArraySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParameterBlockArraySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParameterBlockArraySystem>, 0);
}

void re::ecs2::SerializableMaterialParameterBlock::~SerializableMaterialParameterBlock(re::ecs2::SerializableMaterialParameterBlock *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 38);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 26);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, v8 + v6 + 8, (StringID *)(v8 + v6 + 8));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 32);
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26E705DB0[v4])(&v5, result, a2);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, re::DynamicString *a2, re::DynamicString *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<0ul,re::DynamicString,re::DynamicString>(*a1, a2, a3);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(re::DynamicString **a1, uint64_t *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<1ul,re::AssetHandle,re::AssetHandle>(*a1, a2, a3);
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<0ul,re::DynamicString,re::DynamicString>(uint64_t a1, re::DynamicString *this, re::DynamicString *a3)
{
  if (*(_DWORD *)(a1 + 32)) {
    return (re::DynamicString *)std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,re::DynamicString>(a1, a3);
  }
  else {
    return re::DynamicString::operator=(this, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,re::DynamicString>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  if (v4 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v4]((int)&v10, (re::DynamicString *)a1);
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 24) = a2[3];
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *a2 = 0;
  uint64_t v6 = a2[2];
  a2[3] = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v5;
  *(void *)(a1 + 16) = v6;
  a2[1] = v8;
  a2[2] = v7;
  *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  return a1;
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<1ul,re::AssetHandle,re::AssetHandle>(re::DynamicString *result, uint64_t *a2, uint64_t *a3)
{
  if (*((_DWORD *)result + 8) != 1) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<1ul,re::AssetHandle>(result, a3);
  }
  uint64_t v3 = a2[1];
  a2[1] = a3[1];
  a3[1] = v3;
  uint64_t v4 = *a2;
  *a2 = 0;
  *a2 = *a3;
  *a3 = v4;
  uint64_t v5 = a2[2];
  a2[2] = a3[2];
  a3[2] = v5;
  return result;
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<1ul,re::AssetHandle>(re::DynamicString *a1, void *a2)
{
  uint64_t v4 = *((unsigned int *)a1 + 8);
  if (v4 != -1) {
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v4]((int)&v8, a1);
  }
  *(void *)a1 = 0;
  *((void *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)a1 + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = a2[1];
  a2[1] = 0;
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = 0;
  *(void *)a1 = *a2;
  *a2 = v5;
  uint64_t v6 = *((void *)a1 + 2);
  *((void *)a1 + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = a2[2];
  a2[2] = v6;
  *((_DWORD *)a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 1;
  return a1;
}

void re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 408 * a2 + 208;
    unint64_t v9 = a2;
    do
    {
      char v10 = (uint64_t *)(*(void *)(a1 + 32) + v8);
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 + 18);
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 + 12);
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 + 6);
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v10);
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 - 6);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 - 12);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 - 18);
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 - 24);
      *(v10 - re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 26) = (uint64_t)&unk_26E6DECE0;
      objc_destructInstance(v10 - 25);
      ++v9;
      v8 += 408;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 408 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(void *)(v7 + 400) = 0;
        *(_OWORD *)(v7 + 36re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 35re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 3re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20) = 0u;
        *(_OWORD *)(v7 + 27re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
        *(_OWORD *)(v7 + re::SmallHashTable<unsigned long long,unsigned short,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashTable((uint64_t)this + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 20re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 19re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
        *(_OWORD *)(v7 + 1re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 11re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
        *(_OWORD *)(v7 + 12re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v7);
        v6 += 408;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x198uLL))
        {
          uint64_t v2 = 408 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 408 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 408, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 408 * v9;
        do
        {
          re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)&v7[v10 / 8], (const re::ecs2::SerializableMaterialParameterBlock *)(v8 + v10));
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 352));
          re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 304));
          re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 256));
          re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v8 + v10 + 208));
          re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 160));
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 112));
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 64));
          re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 16));
          *(void *)(v8 + v10) = &unk_26E6DECE0;
          objc_destructInstance((id)(v8 + v10 + 8));
          v10 += 408;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(re::ecs2::SerializableMaterialParameterBlock *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)uint64_t v1 = &unk_26E705C78;
  double result = 0.0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_DWORD *)(v1 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(v1 + 5re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  *(void *)(v1 + 100) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 11re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v1 + 12re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(v1 + 1re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0;
  *(void *)(v1 + 14re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 19re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(v1 + 196) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 20re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_DWORD *)(v1 + 240) = 0;
  *(void *)(v1 + 2re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 27re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_DWORD *)(v1 + re::SmallHashTable<unsigned long long,unsigned short,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashTable((uint64_t)this + 288) = 0;
  *(void *)(v1 + 29re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 3re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(v1 + 336) = 0;
  *(void *)(v1 + 340) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 35re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v1 + 36re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(v1 + 384) = 0;
  *(void *)(v1 + 38re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 400) = 0;
  *(unsigned char *)(v1 + 404) = 0;
  return result;
}

uint64_t re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter(uint64_t this)
{
  *(unsigned char *)this = 0;
  *(void *)(this + 8re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(this + 96) = 0;
  *(void *)(this + 80) = 0;
  *(_WORD *)(this + 104) = 10;
  *(unsigned char *)(this + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0;
  *(unsigned char *)(this + 11re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *(unsigned char *)(this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20) = 0;
  *(unsigned char *)(this + 12re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(unsigned char *)(this + 136) = 0;
  *(unsigned char *)(this + 1re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0;
  *(unsigned char *)(this + 15re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *(unsigned char *)(this + 160) = 0;
  *(unsigned char *)(this + 16re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(unsigned char *)(this + 176) = 0;
  *(unsigned char *)(this + 184) = 0;
  *(unsigned char *)(this + 19re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(this + 240) = 0;
  *(void *)(this + 20re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(this + 216) = 0;
  *(_DWORD *)(this + 2re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  *(void *)(this + 224) = 0;
  *(unsigned char *)(this + 24re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(this + 27re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *(unsigned char *)(this + 280) = 0;
  *(void *)(this + 256) = 0;
  *(void *)(this + 26re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  return this;
}

void re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (const StringID *)(v8 + v6 + 24));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 40;
    }
  }
}

void re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, const StringID *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 40 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 40 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 40 * v9;
  *(_DWORD *)(v12 + vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 40 * v9 + 8), a4);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 40 * v9 + 24), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 40 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 40 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 40 * v9;
  *(_DWORD *)(v12 + vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 40 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 40 * v9;
  uint64_t v16 = *a5;
  *(void *)(v15 + 24) = *(void *)(v15 + 24) & 0xFFFFFFFFFFFFFFFELL | *a5 & 1;
  *(void *)(v15 + 24) = *a5 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(void *)(v15 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = a5[1];
  *a5 = 0;
  a5[1] = (uint64_t)"";
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        unint64_t v11 = *(unsigned int *)(a1 + 24);
        unint64_t v12 = v10 % v11;
        uint64_t v13 = *(unsigned int *)(a1 + 36);
        if (v13 == 0x7FFFFFFF)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 32);
          int v14 = v13;
          if (v13 == v11)
          {
            re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v12 = v10 % *(unsigned int *)(a1 + 24);
            int v14 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v14 + 1;
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 32 * v13);
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 32 * v13);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        uint64_t v17 = 32 * v13;
        *(_DWORD *)(v15 + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = v16 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v12);
        re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v13 + 8), (const StringID *)(v8 + v6 + 8));
        uint64_t v18 = *(void *)(a1 + 16) + 32 * v13;
        int v19 = *(unsigned __int8 *)(v8 + v6 + 24);
        *(unsigned char *)(v18 + 24) = v19;
        if (v19) {
          *(_DWORD *)(v18 + 25) = *(_DWORD *)(v8 + v6 + 25);
        }
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v13;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(void *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v16, v4, a2);
      long long v5 = *(_OWORD *)v16;
      *(_OWORD *)int v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v16[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v16[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&unsigned char v16[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            unint64_t v13 = 0xBF58476D1CE4E5B9 * ((*(void *)(v12 - 16) >> 31) ^ (*(void *)(v12 - 16) >> 1));
            unint64_t v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 32;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2) {
      signed int v15 = a2;
    }
    else {
      signed int v15 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, unsigned __int8 *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 32 * v8;
  *(_DWORD *)(v11 + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v12 | 0x80000000;
  uint64_t v14 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v8 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 32 * v8;
  int v16 = *a5;
  *(unsigned char *)(v15 + 24) = v16;
  if (v16) {
    *(_DWORD *)(v15 + 25) = *(_DWORD *)(a5 + 1);
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        uint64_t v9 = v8 + v6;
        unint64_t v10 = *(void *)(v8 + v6 + 8);
        unint64_t v11 = *(unsigned int *)(a1 + 24);
        unint64_t v12 = v10 % v11;
        uint64_t v13 = *(unsigned int *)(a1 + 36);
        if (v13 == 0x7FFFFFFF)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 32);
          int v14 = v13;
          if (v13 == v11)
          {
            re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v12 = v10 % *(unsigned int *)(a1 + 24);
            int v14 = *(_DWORD *)(a1 + 32);
            unint64_t v10 = *(void *)(v9 + 8);
          }
          *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v14 + 1;
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 32 * v13);
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 32 * v13);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        uint64_t v17 = 32 * v13;
        *(_DWORD *)(v15 + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = v16 | 0x80000000;
        uint64_t v18 = *(void *)(a1 + 8);
        *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v13) & 0x80000000 | *(_DWORD *)(v18 + 4 * v12);
        *(void *)(*(void *)(a1 + 16) + 32 * v13 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v10;
        uint64_t v19 = *(void *)(a1 + 16) + 32 * v13;
        LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(unsigned __int8 *)(v9 + 16);
        *(unsigned char *)(v19 + 16) = v17;
        if (v17) {
          *(void *)(v19 + 24) = *(void *)(v8 + v6 + 24);
        }
        *(_DWORD *)(v18 + 4 * v1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v13;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 32 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 32;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(void *)&v14[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v14, v4, a2);
      long long v5 = *(_OWORD *)v14;
      *(_OWORD *)int v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v14[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v14[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&unsigned char v14[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        unint64_t v12 = (void *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v12 - 1) & 0x80000000) != 0) {
            re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *v12 % (unint64_t)*(unsigned int *)(a1 + 24), *v12, v12, v12 + 1);
          }
          ++v11;
          v12 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2) {
      signed int v13 = a2;
    }
    else {
      signed int v13 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, unsigned __int8 *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 32 * v8;
  *(_DWORD *)(v11 + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v12 | 0x80000000;
  uint64_t v14 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v8 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *a4;
  uint64_t v15 = *(void *)(a1 + 16) + 32 * v8;
  int v16 = *a5;
  *(unsigned char *)(v15 + 16) = v16;
  if (v16) {
    *(void *)(v15 + 24) = *((void *)a5 + 1);
  }
  *(_DWORD *)(v14 + 4 * are::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        unint64_t v11 = *(unsigned int *)(a1 + 24);
        unint64_t v12 = v10 % v11;
        uint64_t v13 = *(unsigned int *)(a1 + 36);
        if (v13 == 0x7FFFFFFF)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 32);
          int v14 = v13;
          if (v13 == v11)
          {
            re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v12 = v10 % *(unsigned int *)(a1 + 24);
            int v14 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v14 + 1;
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 72 * v13);
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 72 * v13);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        uint64_t v17 = 72 * v13;
        *(_DWORD *)(v15 + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = v16 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v12);
        re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 72 * v13 + 8), (const StringID *)(v8 + v6 + 8));
        uint64_t v18 = *(void *)(a1 + 16);
        int v19 = *(unsigned __int8 *)(v8 + v6 + 24);
        *(unsigned char *)(v18 + 72 * v13 + 24) = v19;
        if (v19)
        {
          uint64_t v20 = (_DWORD *)(v18 + 72 * v13);
          v20[8] = *(_DWORD *)(v8 + v6 + 32);
          re::StringID::StringID((re::StringID *)(v20 + 10), (const StringID *)(v8 + v6 + 40));
          re::StringID::StringID((re::StringID *)(v20 + 14), (const StringID *)(v8 + v6 + 56));
        }
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v13;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 72;
    }
  }
}

void re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 72;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(void *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v16, v4, a2);
      long long v5 = *(_OWORD *)v16;
      *(_OWORD *)int v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v16[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v16[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&unsigned char v16[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            unint64_t v13 = 0xBF58476D1CE4E5B9 * ((*(void *)(v12 - 16) >> 31) ^ (*(void *)(v12 - 16) >> 1));
            unint64_t v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 72;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2) {
      signed int v15 = a2;
    }
    else {
      signed int v15 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, unsigned __int8 *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 72 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 72 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 72 * v8;
  *(_DWORD *)(v11 + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v12 | 0x80000000;
  uint64_t v14 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 72 * v8 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16);
  int v16 = *a5;
  *(unsigned char *)(v15 + 72 * v8 + 24) = v16;
  if (v16)
  {
    uint64_t v17 = v15 + 72 * v8;
    *(_DWORD *)(v17 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = *((_DWORD *)a5 + 2);
    uint64_t v18 = *((void *)a5 + 2);
    *(void *)(v17 + 40) = *(void *)(v17 + 40) & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
    *(void *)(v17 + 40) = *((void *)a5 + 2) & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
    *(void *)(v17 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *((void *)a5 + 3);
    *((void *)a5 + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
    *((void *)a5 + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = "";
    uint64_t v19 = *((void *)a5 + 4);
    *(void *)(v17 + 56) = *(void *)(v17 + 56) & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    *(void *)(v17 + 56) = *((void *)a5 + 4) & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    *(void *)(v17 + 64) = *((void *)a5 + 5);
    *((void *)a5 + 4) = 0;
    *((void *)a5 + 5) = "";
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<unsigned long &>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 32 * v8;
  *(_DWORD *)(v11 + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v8 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 32 * v8;
  uint64_t v15 = *a5;
  *(unsigned char *)(v14 + 16) = 1;
  *(void *)(v14 + 24) = v15;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::StringID&>(uint64_t a1, StringID *a2, int a3, const StringID *a4)
{
  unint64_t v7 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v13 = *(unsigned int *)(a1 + 36);
    if (v13 == 0x7FFFFFFF)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 32);
      int v14 = v13;
      if (v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v8 % *(unsigned int *)(a1 + 24);
        int v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v14 + 1;
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 40 * v13);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 40 * v13);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    uint64_t v17 = 40 * v13;
    *(_DWORD *)(v15 + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = v16 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 40 * v13 + 8), a2);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 40 * v13 + 24), a4);
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 16) + 40 * v13;
    return v18 + 24;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v12 + 40 * v10 + 8), a2))
  {
    uint64_t v10 = *(_DWORD *)(v12 + 40 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v18 = v12 + 40 * v10;
      break;
    case 2:
    case 3:
      re::StringID::destroyString((re::StringID *)(v12 + 40 * v10 + 24));
      re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 40 * v10 + 24), a4);
      ++*(_DWORD *)(a1 + 40);
      uint64_t v18 = *(void *)(a1 + 16) + 40 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v18 + 24;
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::ConstStringID const&>(uint64_t a1, StringID *a2, int a3, void *a4)
{
  unint64_t v7 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v13 = *(unsigned int *)(a1 + 36);
    if (v13 == 0x7FFFFFFF)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 32);
      int v14 = v13;
      if (v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v8 % *(unsigned int *)(a1 + 24);
        int v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v14 + 1;
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 40 * v13);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 40 * v13);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    uint64_t v17 = 40 * v13;
    *(_DWORD *)(v15 + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = v16 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 40 * v13 + 8), a2);
    uint64_t v18 = *(void *)(a1 + 16) + 40 * v13;
    *(void *)(v18 + 24) &= ~1uLL;
    *(void *)(v18 + 24) = 2 * *a4;
    *(void *)(v18 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = a4[1];
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 16) + 40 * v13;
    return v19 + 24;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v12 + 40 * v10 + 8), a2))
  {
    uint64_t v10 = *(_DWORD *)(v12 + 40 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v19 = v12 + 40 * v10;
      break;
    case 2:
    case 3:
      re::StringID::destroyString((re::StringID *)(v12 + 40 * v10 + 24));
      uint64_t v21 = *(void *)(a1 + 16) + 40 * v10;
      *(void *)(v21 + 24) &= ~1uLL;
      *(void *)(v21 + 24) = 2 * *a4;
      *(void *)(v21 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = a4[1];
      ++*(_DWORD *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 16) + 40 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v19 + 24;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::mtl::TextureSwizzleChannels&>(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 32 * v9;
  *(unsigned char *)(v15 + 24) = 1;
  *(_DWORD *)(v15 + 25) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, unsigned __int8 *a3, int a4)
{
  unint64_t v7 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 32 * v13;
    return v14 + 24;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v12 + 32 * v10 + 8), a2))
  {
    uint64_t v10 = *(_DWORD *)(v12 + 32 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a4)
  {
    case 0:
    case 1:
      uint64_t v14 = v12 + 32 * v10;
      break;
    case 2:
    case 3:
      uint64_t v16 = v12 + 32 * v10;
      int v19 = *(unsigned __int8 *)(v16 + 24);
      uint64_t v17 = (unsigned char *)(v16 + 24);
      int v18 = v19;
      int v20 = *a3;
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v20 == 0;
      }
      if (!v21)
      {
        if (v18) {
          BOOL v22 = v20 == 0;
        }
        else {
          BOOL v22 = 0;
        }
        if (v22)
        {
          *uint64_t v17 = 0;
        }
        else
        {
          if (!v18 && *a3) {
            *uint64_t v17 = 1;
          }
          *(_DWORD *)(v12 + 32 * v10 + 25) = *(_DWORD *)(a3 + 1);
        }
      }
      ++*(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 16) + 32 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 24;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::ecs2::SerializableParameterBinding>(uint64_t a1, StringID *a2, int a3, uint64_t a4)
{
  unint64_t v7 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v13 = *(unsigned int *)(a1 + 36);
    if (v13 == 0x7FFFFFFF)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 32);
      int v14 = v13;
      if (v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v8 % *(unsigned int *)(a1 + 24);
        int v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v14 + 1;
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 72 * v13);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 72 * v13);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    uint64_t v17 = 72 * v13;
    *(_DWORD *)(v15 + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = v16 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 72 * v13 + 8), a2);
    uint64_t v18 = *(void *)(a1 + 16) + 72 * v13;
    *(unsigned char *)(v18 + 24) = 1;
    *(_DWORD *)(v18 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = *(_DWORD *)a4;
    uint64_t v19 = *(void *)(a4 + 8);
    *(void *)(v18 + 40) = *(void *)(v18 + 40) & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    *(void *)(v18 + 40) = *(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    *(void *)(v18 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(void *)(a4 + 16);
    *(void *)(a4 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a4 + 16) = "";
    uint64_t v20 = *(void *)(a4 + 24);
    *(void *)(v18 + 56) = *(void *)(v18 + 56) & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
    *(void *)(v18 + 56) = *(void *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
    *(void *)(v18 + 64) = *(void *)(a4 + 32);
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = "";
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 16) + 72 * v13;
    return v21 + 24;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v12 + 72 * v10 + 8), a2))
  {
    uint64_t v10 = *(_DWORD *)(v12 + 72 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v21 = v12 + 72 * v10;
      break;
    case 2:
    case 3:
      re::Optional<re::ecs2::SerializableParameterBinding>::~Optional((unsigned char *)(v12 + 72 * v10 + 24));
      uint64_t v23 = *(void *)(a1 + 16) + 72 * v10;
      *(unsigned char *)(v23 + 24) = 1;
      *(_DWORD *)(v23 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = *(_DWORD *)a4;
      uint64_t v24 = *(void *)(a4 + 8);
      *(void *)(v23 + 40) = *(void *)(v23 + 40) & 0xFFFFFFFFFFFFFFFELL | v24 & 1;
      *(void *)(v23 + 40) = *(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFFELL | v24 & 1;
      *(void *)(v23 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(void *)(a4 + 16);
      *(void *)(a4 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(a4 + 16) = "";
      uint64_t v25 = *(void *)(a4 + 24);
      *(void *)(v23 + 56) = *(void *)(v23 + 56) & 0xFFFFFFFFFFFFFFFELL | v25 & 1;
      *(void *)(v23 + 56) = *(void *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL | v25 & 1;
      *(void *)(v23 + 64) = *(void *)(a4 + 32);
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = "";
      ++*(_DWORD *)(a1 + 40);
      uint64_t v21 = *(void *)(a1 + 16) + 72 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v21 + 24;
}

uint64_t re::Optional<re::ecs2::SerializableParameterBinding>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      re::StringID::destroyString((re::StringID *)(a1 + 32));
      re::StringID::destroyString((re::StringID *)(a1 + 16));
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        *(_DWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)a2 + 2);
        uint64_t v8 = *((void *)a2 + 2);
        uint64_t v9 = *((void *)a2 + 3);
        *((void *)a2 + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
        *((void *)a2 + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = "";
        uint64_t v10 = *(void *)(a1 + 16);
        uint64_t v11 = *(void *)(a1 + 24);
        *(void *)(a1 + 16) = v8;
        *(void *)(a1 + 24) = v9;
        unint64_t v19 = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
        uint64_t v20 = v11;
        re::StringID::destroyString((re::StringID *)&v19);
        uint64_t v12 = *((void *)a2 + 4);
        uint64_t v13 = *((void *)a2 + 5);
        *((void *)a2 + 4) = 0;
        *((void *)a2 + 5) = "";
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(a1 + 40);
        *(void *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v12;
        *(void *)(a1 + 40) = v13;
        unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
        uint64_t v20 = v15;
        re::StringID::destroyString((re::StringID *)&v19);
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *(_DWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)a2 + 2);
        uint64_t v16 = *((void *)a2 + 2);
        *(void *)(a1 + 16) = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
        *(void *)(a1 + 16) = *((void *)a2 + 2) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *((void *)a2 + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
        *((void *)a2 + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = "";
        uint64_t v17 = *((void *)a2 + 4);
        *(void *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
        *(void *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = *((void *)a2 + 4) & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        *((void *)a2 + 4) = 0;
        *((void *)a2 + 5) = "";
      }
    }
  }
  return a1;
}

uint64_t re::ecs2::SerializedMaterialParameter::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v5;
  re::AssetHandle::operator=(a1 + 80, (uint64_t *)(a2 + 80));
  re::OptionalMaterialSamplerData::operator=(a1 + 104, a2 + 104);
  re::DynamicArray<BOOL>::operator=(a1 + 208, (uint64_t *)(a2 + 208));
  *(unsigned char *)(a1 + 24re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  char v7 = *(unsigned char *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(unsigned char *)(a1 + 280) = v7;
  return a1;
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t a3, int a4)
{
  unint64_t v7 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 320 * v13;
    return v14 + 32;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v12 + 320 * v10 + 8), a2))
  {
    uint64_t v10 = *(_DWORD *)(v12 + 320 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a4)
  {
    case 0:
    case 1:
      uint64_t v14 = v12 + 320 * v10;
      break;
    case 2:
    case 3:
      uint64_t v16 = v12 + 320 * v10;
      *(_OWORD *)(v16 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = *(_OWORD *)a3;
      long long v17 = *(_OWORD *)(a3 + 16);
      long long v18 = *(_OWORD *)(a3 + 32);
      long long v19 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v16 + 80) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v16 + 96) = v19;
      *(_OWORD *)(v16 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v17;
      *(_OWORD *)(v16 + 64) = v18;
      re::AssetHandle::operator=(v16 + 112, (uint64_t *)(a3 + 80));
      re::OptionalMaterialSamplerData::operator=(v16 + 136, a3 + 104);
      re::DynamicArray<BOOL>::operator=(v16 + 240, (uint64_t *)(a3 + 208));
      *(unsigned char *)(v16 + 280) = *(unsigned char *)(a3 + 248);
      *(void *)(v16 + re::SmallHashTable<unsigned long long,unsigned short,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashTable((uint64_t)this + 288) = *(void *)(a3 + 256);
      long long v20 = *(_OWORD *)(a3 + 264);
      *(unsigned char *)(v16 + 31re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = *(unsigned char *)(a3 + 280);
      *(_OWORD *)(v16 + 296) = v20;
      ++*(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 16) + 320 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 32;
}

void *re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  HIDWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
  long long v18 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  BYTE8(v1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 10;
  BYTE11(v1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  BYTE8(v1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0;
  BYTE8(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  BYTE8(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 15) = 0;
  BYTE8(v16) = 0;
  BYTE8(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0;
  long long v21 = 0uLL;
  long long v20 = 0uLL;
  long long v19 = 0uLL;
  *(void *)((char *)&v22 + 5) = 0;
  long long v23 = 0uLL;
  *(void *)&long long v22 = 0;
  unint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a4, a5, (uint64_t)v10, 2);
  *(void *)&long long v22 = 0;
  if ((void)v19)
  {
    if ((void)v21) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    *(void *)&long long v21 = 0;
    *(void *)&long long v20 = 0;
    long long v19 = 0uLL;
    ++DWORD2(v20);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(_DWORD **)(a2 + 16);
    while ((*v7 & 0x80000000) == 0)
    {
      v7 += 80;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v9 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 320 * v9 + 8, *(void *)(a2 + 16) + 320 * v9 + 32);
    if (!result) {
      break;
    }
    int v10 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v9 = (v6 + 1);
      if (v10 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v11 = v9;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 320 * v9) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v11 = v10;
LABEL_18:
    LODWORD(v6) = v11;
  }
  while (v5 != v11);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1, a4, (uint64_t)Instance, 2);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v7 = a1[3];
        unsigned int v8 = *(_DWORD *)(v7 + 32);
        unsigned int v9 = v4 + 1;
        do
        {
          LODWORD(v5) = v9;
          *((_DWORD *)a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v9;
          if (v9 >= v8) {
            break;
          }
          int v10 = *(_DWORD *)(*(void *)(v7 + 16) + 320 * v9++);
        }
        while ((v10 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(_DWORD **)(v2 + 16);
        while ((*v6 & 0x80000000) == 0)
        {
          v6 += 80;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 320 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 320 * *(unsigned int *)(a1 + 32) + 32;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, unint64_t *a5)
{
  v10[0] = 0;
  unsigned int v8 = (re::IntrospectionBase *)re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(a4, a5, v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 8, *(void *)(a2 + 16) + 32 * v10 + 16);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void *re::IntrospectionOptional<unsigned long>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<unsigned long>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<unsigned long>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<unsigned long>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<unsigned long>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<unsigned long>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)uint64_t result = 1;
    }
    *(void *)(result + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a1);
  return re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, unint64_t *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (unsigned __int8 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, v10);
  re::StringID::destroyString((re::StringID *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 10;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 40 * v10 + 8, *(void *)(a2 + 16) + 40 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 40 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 40 * v11;
    return v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 40 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 40 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v14 = v10 + 40 * v9;
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  *a3 = 0;
  a3[1] = (uint64_t)"";
  uint64_t v17 = *(void *)(v14 + 24);
  uint64_t v18 = *(void *)(v14 + 32);
  *(void *)(v14 + 24) = v15;
  *(void *)(v14 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v16;
  v19[0] = v15 & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
  v19[1] = v18;
  re::StringID::destroyString((re::StringID *)v19);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 40 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (uint64_t *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 40 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 40 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 40 * v4 + 24;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 40 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 10;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 40 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 40 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  v10[0] = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, v10);
  re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 18;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 72 * v10 + 8, *(void *)(a2 + 16) + 72 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 72 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void *re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    re::StringID::invalid((re::StringID *)&v4);
    re::StringID::invalid((re::StringID *)((char *)&v5 + 8));
    v7[0] = 1;
    int v8 = 0;
    uint64_t v9 = v4;
    long long v10 = v5;
    uint64_t v4 = 0;
    *(void *)&long long v5 = "";
    int v11 = v6;
    *((void *)&v5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
    uint64_t v6 = "";
    re::Optional<re::ecs2::SerializableParameterBinding>::operator=(a2, v7);
    re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v7);
    re::StringID::destroyString((re::StringID *)((char *)&v5 + 8));
    re::StringID::destroyString((re::StringID *)&v4);
  }
  else
  {
    v7[0] = 0;
    re::Optional<re::ecs2::SerializableParameterBinding>::operator=(a2, v7);
    re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v7);
  }
}

uint64_t re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::ecs2::SerializableParameterBinding>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned char *re::TypeBuilderHelper::registerOptional<re::ecs2::SerializableParameterBinding>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, int *a2)
{
  if (a2)
  {
    v5[0] = 1;
    int v6 = *a2;
    re::StringID::StringID((re::StringID *)&v7, (const StringID *)(a2 + 2));
    re::StringID::StringID((re::StringID *)&v8, (const StringID *)(a2 + 6));
  }
  else
  {
    v5[0] = 0;
  }
  re::Optional<re::ecs2::SerializableParameterBinding>::operator=(a1, v5);
  return re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v5);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (unsigned __int8 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 72 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        int v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 18;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 72 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 72 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  v10[0] = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a4, a5, v10, 2);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 8, *(void *)(a2 + 16) + 32 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void *re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 84148994;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::TextureSwizzleChannels>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 1;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::TextureSwizzleChannels>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)uint64_t result = 1;
    }
    *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (unsigned __int8 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1, a4, Instance, 2);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::internal::MaterialParameterBlockArrayComponentBindNodeImpl::~MaterialParameterBlockArrayComponentBindNodeImpl(re::internal::MaterialParameterBlockArrayComponentBindNodeImpl *this)
{
  uint64_t v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindNodeImpl<re::internal::MaterialParameterBlockArrayComponentBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<re::internal::MaterialParameterBlockArrayComponentBindNodeImpl>::copyInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E706270;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<re::internal::MaterialParameterBlockArrayComponentBindNodeImpl>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E706270;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<re::internal::MaterialParameterBlockArrayComponentBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  if ((char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) != "8") {
    return 0;
  }
  return re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

double re::internal::MaterialParameterBlockArrayComponentBindNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double re::internal::MaterialParameterBlockArrayComponentBindNodeImpl::relativeNodeForKey@<D0>(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v4 = *(const char **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v12 = 0;
  if (*v4 == 45 || (uint64_t v6 = a1, a1 = (re *)sscanf(v4, "%zu", &v12), a1 != 1))
  {
    int v11 = *re::foundationBindingLogObjects(a1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = v5;
      LOWORD(vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 2080;
      *(void *)((char *)&v14 + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v4;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Failed to bind to material. Invalid binding key \"%.*s\". Index expected.", buf, 0x12u);
    }
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(void *)long long buf = *((void *)v6 + 1);
    int v7 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v14, (uint64_t *)v6 + 2);
    re::BindPoint::addToBindPointStack<re::internal::SerializableMaterialParameterBlockBindPointImpl,unsigned long &>(buf, &v12);
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)uint64_t v9 = &unk_26E7063D8;
    *(void *)(v9 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(void *)buf;
    *(_DWORD *)(v9 + 40) = 0;
    *(void *)(v9 + 16) = v14;
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 24) = *((void *)&v14 + 1);
    *(void *)(v9 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
    *(void *)(v9 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    *(void *)(v9 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v17;
    uint64_t v17 = 0;
    ++v16;
    *(_DWORD *)(v9 + 40) = 1;
    *(void *)(a3 + 16) = v9;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v14);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v14);
  }
  return result;
}

double re::internal::MaterialParameterBlockArrayComponentBindNodeImpl::bindPointForKey@<D0>(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(const char **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v12 = 0;
  if (*v5 == 45 || (uint64_t v8 = a1, a1 = (re *)sscanf(v5, "%zu", &v12), a1 != 1))
  {
    int v11 = *re::foundationBindingLogObjects(a1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 68157954;
      int v14 = v6;
      __int16 v15 = 2080;
      int v16 = v5;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Failed to bind to material. Invalid binding key \"%.*s\". Index expected.", buf, 0x12u);
    }
    *(void *)(a4 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  }
  else
  {
    *(void *)(a4 + 40) = 0;
    *(void *)a4 = a2;
    *(void *)(a4 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
    re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (re *)((char *)v8 + 8));
    re::BindPoint::addToBindPointStack<re::internal::SerializableMaterialParameterBlockBindPointImpl,unsigned long &>((void *)a4, &v12);
  }
  return result;
}

void re::BindPoint::addToBindPointStack<re::internal::SerializableMaterialParameterBlockBindPointImpl,unsigned long &>(void *a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v6);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v6);
  uint64_t v4 = a1[5] + 32 * a1[3];
  uint64_t v5 = *a2;
  *(void *)(v4 - re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = &unk_26E706308;
  *(void *)(v4 - 24) = v5;
}

void re::internal::SerializableMaterialParameterBlockBindPointImpl::~SerializableMaterialParameterBlockBindPointImpl(re::internal::SerializableMaterialParameterBlockBindPointImpl *this)
{
}

void *re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E706308;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E706308;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::equals(uint64_t a1, void *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::implTypeInfo(void)const::typeInfo
      && *(void *)(a1 + 8) == a2[1];
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4 = 0x9E3779B97F4A7C17;
  v10[0] = a3;
  v10[1] = a4;
  unint64_t v5 = *(void *)(a1 + 8);
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v6 + 48))(v6, 0, v7, v8)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v4) ^ v5;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::isWeak()
{
  return 1;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::isAlive(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  v12[0] = this;
  uint64_t result = (uint64_t)re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 8);
  v12[1] = result;
  void v12[2] = v8;
  if (result)
  {
    if (a4)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 64))(v9, v12, v10, v11);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void re::internal::SerializableMaterialParameterBlockBindPointImpl::makeAlive(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  unint64_t v8 = *(void *)(a1 + 8);
  if (*((void *)this + 6) <= v8) {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(this, v8 + 1);
  }
  if (a4)
  {
    v14[0] = this;
    Blocuint64_t k = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(void *)(a1 + 8));
    uint64_t v10 = *(void *)(a1 + 8);
    v14[1] = Block;
    void v14[2] = v10;
    uint64_t v11 = *a3;
    uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v11 + 72))(v11, v14, v12, v13);
  }
}

void *re::internal::SerializableMaterialParameterBlockBindPointImpl::baseValueUntyped(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  v12[0] = this;
  uint64_t result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 8);
  v12[1] = result;
  void v12[2] = v8;
  if (result)
  {
    if (a4)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 88))(v9, v12, v10, v11);
    }
  }
  return result;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::supportsOverrideValue(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  if (!a4) {
    return 0;
  }
  v13[0] = this;
  Blocuint64_t k = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 8);
  v13[1] = Block;
  void v13[2] = v8;
  uint64_t v9 = *a3;
  uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 96))(v9, v13, v10, v11);
}

void *re::internal::SerializableMaterialParameterBlockBindPointImpl::isOverridden(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  if (!a4) {
    return 0;
  }
  v12[0] = this;
  uint64_t result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 8);
  v12[1] = result;
  void v12[2] = v8;
  if (result)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
    return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 104))(v9, v12, v10, v11);
  }
  return result;
}

void *re::internal::SerializableMaterialParameterBlockBindPointImpl::setIsOverridden(void *result, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v14[0] = a3;
  v14[1] = a4;
  if (a4)
  {
    uint64_t v8 = result;
    v13[0] = this;
    uint64_t result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, result[1]);
    uint64_t v9 = v8[1];
    v13[1] = result;
    void v13[2] = v9;
    if (result)
    {
      uint64_t v10 = *a3;
      uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 112))(v10, v13, v11, v12, a5);
    }
  }
  return result;
}

void *re::internal::SerializableMaterialParameterBlockBindPointImpl::overrideValueUntyped(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  if (!a4) {
    return 0;
  }
  v12[0] = this;
  uint64_t result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 8);
  v12[1] = result;
  void v12[2] = v8;
  if (result)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
    return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 120))(v9, v12, v10, v11);
  }
  return result;
}

void *re::internal::SerializableMaterialParameterBlockBindPointImpl::markAsWritten(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = this;
  uint64_t result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(void *)(a1 + 8));
  unint64_t v9 = *(void *)(a1 + 8);
  v13[1] = result;
  void v13[2] = v9;
  if (result)
  {
    if (v9 < *((void *)this + 6)) {
      ++*(_DWORD *)(*((void *)this + 8) + 24 * v9 + 16);
    }
    uint64_t result = re::ecs2::Component::markDirty(this);
    if (a4)
    {
      uint64_t v10 = *a3;
      uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v10 + 128))(v10, v13, v11, v12);
    }
  }
  return result;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::boundOwner()
{
  return 0;
}

void *re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(void *this, unint64_t a2)
{
  if (this)
  {
    uint64_t v3 = this;
    if (this[6] > a2)
    {
LABEL_3:
      uint64_t v4 = (_DWORD *)(v3[8] + 24 * a2);
      ++v4[4];
      return *(void **)v4;
    }
    uint64_t v5 = this[2];
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 176);
      if (v6)
      {
        if (*(void *)(v6 + 72) > a2)
        {
          re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles((re::ecs2::MaterialParameterBlockArrayComponent *)this, a2 + 1);
          if (v3[6] > a2) {
            goto LABEL_3;
          }
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
    }
    return 0;
  }
  return this;
}

void re::internal::SerializableMaterialParameterBlockBindNodeImpl::~SerializableMaterialParameterBlockBindNodeImpl(re::internal::SerializableMaterialParameterBlockBindNodeImpl *this)
{
  uint64_t v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindNodeImpl<re::internal::SerializableMaterialParameterBlockBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<re::internal::SerializableMaterialParameterBlockBindNodeImpl>::copyInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7063D8;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<re::internal::SerializableMaterialParameterBlockBindNodeImpl>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7063D8;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<re::internal::SerializableMaterialParameterBlockBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  if ((char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) != "8") {
    return 0;
  }
  return re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

double re::internal::SerializableMaterialParameterBlockBindNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindNodeImpl::relativeNodeForKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  size_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  uint64_t v5 = *(const char **)a2;
  uint64_t v12 = *(void *)(result + 8);
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)v13, (uint64_t *)(result + 16));
  *(void *)&v14.var0 = 0;
  v14.var1 = "";
  re::BindPoint::addToBindPointStack<re::internal::SerializedMaterialParameterBindPointImpl,re::StringID>(&v12, &v14);
  re::StringID::destroyString((re::StringID *)&v14);
  if (re::BindPoint::isAlive((re::BindPoint *)&v12))
  {
    uint64_t v8 = re::BindPoint::baseValueUntyped((re::BindPoint *)&v12);
    if (v8)
    {
      uint64_t v9 = v8;
      unsigned int v10 = *(unsigned __int8 *)(v8 - 16);
      if (v10 <= 0x20)
      {
        switch(*(unsigned char *)(v8 - 16))
        {
          case 1:
            uint64_t v11 = re::introspect<float>();
            goto LABEL_27;
          case 2:
            uint64_t v11 = (uint64_t)re::introspect<BOOL>();
            goto LABEL_27;
          case 3:
            uint64_t v11 = (uint64_t)re::introspect<int>();
            goto LABEL_27;
          case 4:
          case 5:
          case 6:
            goto LABEL_19;
          case 7:
            uint64_t v11 = (uint64_t)re::introspect<unsigned int>();
            goto LABEL_27;
          default:
            if (v10 == 21)
            {
              uint64_t v11 = re::introspect<re::ColorGamut4F>();
            }
            else
            {
              if (v10 != 32) {
                goto LABEL_19;
              }
              uint64_t v11 = re::introspect<re::Vector2<float>>();
            }
            break;
        }
        goto LABEL_27;
      }
      if (*(unsigned __int8 *)(v8 - 16) <= 0x2Fu)
      {
        if (v10 == 33)
        {
          uint64_t v11 = re::introspect<re::Vector3<float>>();
          goto LABEL_27;
        }
        if (v10 == 34)
        {
          uint64_t v11 = re::introspect<re::Vector4<float>>();
          goto LABEL_27;
        }
      }
      else
      {
        switch(v10)
        {
          case '0':
            uint64_t v11 = re::introspect<re::Matrix2x2<float>>();
            goto LABEL_27;
          case '1':
            uint64_t v11 = (uint64_t)re::introspect<re::Matrix3x3<float>>();
            goto LABEL_27;
          case '2':
            uint64_t v11 = re::introspect<re::Matrix4x4<float>>();
LABEL_27:
            *(void *)&v14.var0 = v11;
            v14.var1 = 0;
            uint64_t v15 = v9;
            char v16 = 0;
            goto LABEL_28;
        }
      }
    }
  }
LABEL_19:
  *a3 = 0u;
  a3[1] = 0u;
LABEL_28:
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v13);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v13);
}

double re::internal::SerializableMaterialParameterBlockBindNodeImpl::bindPointForKey@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = *(void *)(a3 + 8);
  if (v5)
  {
    uint64_t v6 = *(const char **)a3;
    *(void *)(a4 + 40) = 0;
    *(void *)a4 = a2;
    *(void *)(a4 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
    re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (const re::BindPoint *)(a1 + 8));
    *(void *)&v10.var0 = 0;
    v10.var1 = "";
    re::BindPoint::addToBindPointStack<re::internal::SerializedMaterialParameterBindPointImpl,re::StringID>((void *)a4, &v10);
    re::StringID::destroyString((re::StringID *)&v10);
  }
  else
  {
    *(void *)(a4 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  }
  return result;
}

re::StringID *re::BindPoint::addToBindPointStack<re::internal::SerializedMaterialParameterBindPointImpl,re::StringID>(void *a1, const StringID *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v6);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v6);
  uint64_t v4 = a1[5] + 32 * a1[3];
  *(void *)(v4 - re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = &unk_26E706470;
  return re::StringID::StringID((re::StringID *)(v4 - 24), a2);
}

char **re::introspect<BOOL>()
{
  uint64_t v0 = &off_268773000;
  {
    uint64_t v0 = &off_268773000;
    if (v2)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v3);
      uint64_t v0 = &off_268773000;
    }
  }
  return v0[187];
}

uint64_t re::introspect<float>()
{
  unint64_t v0 = 0x268771000uLL;
  {
    unint64_t v0 = 0x268771000;
    if (v2)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v3);
      unint64_t v0 = 0x268771000;
    }
  }
  return *(void *)(v0 + 3632);
}

char **re::introspect<int>()
{
  unint64_t v0 = &off_268773000;
  {
    unint64_t v0 = &off_268773000;
    if (v2)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v3);
      unint64_t v0 = &off_268773000;
    }
  }
  return v0[267];
}

char **re::introspect<unsigned int>()
{
  unint64_t v0 = &off_268773000;
  {
    unint64_t v0 = &off_268773000;
    if (v2)
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v3);
      unint64_t v0 = &off_268773000;
    }
  }
  return v0[269];
}

uint64_t re::introspect<re::Vector2<float>>()
{
  unint64_t v0 = 0x268771000uLL;
  {
    unint64_t v0 = 0x268771000;
    if (v2)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      unint64_t v0 = 0x268771000;
    }
  }
  return *(void *)(v0 + 3664);
}

uint64_t re::introspect<re::Vector3<float>>()
{
  unint64_t v0 = 0x268771000uLL;
  {
    unint64_t v0 = 0x268771000;
    if (v2)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      unint64_t v0 = 0x268771000;
    }
  }
  return *(void *)(v0 + 3680);
}

uint64_t re::introspect<re::Vector4<float>>()
{
  unint64_t v0 = 0x268771000uLL;
  {
    unint64_t v0 = 0x268771000;
    if (v2)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      unint64_t v0 = 0x268771000;
    }
  }
  return *(void *)(v0 + 3696);
}

uint64_t re::introspect<re::Matrix2x2<float>>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D978, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D978))
  {
    qword_26AF8D970 = re::introspect_Matrix2x2F(0);
    __cxa_guard_release(&qword_26AF8D978);
  }
  return qword_26AF8D970;
}

char **re::introspect<re::Matrix3x3<float>>()
{
  unint64_t v0 = &off_268773000;
  {
    unint64_t v0 = &off_268773000;
    if (v2)
    {
      re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
      unint64_t v0 = &off_268773000;
    }
  }
  return v0[271];
}

uint64_t re::introspect<re::Matrix4x4<float>>()
{
  unint64_t v0 = &qword_268772000;
  {
    unint64_t v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
      unint64_t v0 = &qword_268772000;
    }
  }
  return v0[102];
}

uint64_t re::introspect<re::ColorGamut4F>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8D988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8D988))
  {
    qword_26AF8D980 = re::introspect_ColorGamut4F(0);
    __cxa_guard_release(&qword_26AF8D988);
  }
  return qword_26AF8D980;
}

void re::internal::SerializedMaterialParameterBindPointImpl::~SerializedMaterialParameterBindPointImpl(re::internal::SerializedMaterialParameterBindPointImpl *this)
{
}

{
  uint64_t vars8;

  re::StringID::destroyString((re::internal::SerializedMaterialParameterBindPointImpl *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::implTypeInfo(void)const::typeInfo;
}

re::StringID *re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E706470;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

uint64_t re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::moveInto(uint64_t result, void *a2)
{
  *a2 = &unk_26E706470;
  uint64_t v2 = *(void *)(result + 8);
  a2[1] = a2[1] & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[1] = *(void *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[2] = *(void *)(result + 16);
  *(void *)(result + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(result + 16) = "";
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::equals(uint64_t a1, void *a2)
{
  if ((_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) != &re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::implTypeInfo(void)const::typeInfo) {
    return 0;
  }
  return re::StringID::operator==((void *)(a1 + 8), a2 + 1);
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4 = 0x9E3779B97F4A7C17;
  v10[0] = a3;
  v10[1] = a4;
  unint64_t v5 = *(void *)(a1 + 8);
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v6 + 48))(v6, 0, v7, v8)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 1 << 6) + (v5 >> 3) + v4) ^ (v5 >> 1);
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::isWeak()
{
  return 1;
}

BOOL re::internal::SerializedMaterialParameterBindPointImpl::isAlive(re::internal::SerializedMaterialParameterBindPointImpl *a1, void *a2)
{
  return re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2) != 0;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::baseValueUntyped(re::internal::SerializedMaterialParameterBindPointImpl *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t Parameter = re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2);
  if (Parameter && a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, Parameter, v8, v9);
  }
  return Parameter;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::supportsOverrideValue(re::internal::SerializedMaterialParameterBindPointImpl *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t Parameter = re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2);
  uint64_t v7 = *a3;
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, Parameter, v8, v9);
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::isOverridden(re::internal::SerializedMaterialParameterBindPointImpl *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t result = re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 104))(v8, v7, v9, v10);
  }
  return result;
}

re::internal::SerializedMaterialParameterBindPointImpl *re::internal::SerializedMaterialParameterBindPointImpl::setIsOverridden(re::internal::SerializedMaterialParameterBindPointImpl *result, void *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    uint64_t result = (re::internal::SerializedMaterialParameterBindPointImpl *)re::internal::SerializedMaterialParameterBindPointImpl::getParameter(result, a2);
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (re::internal::SerializedMaterialParameterBindPointImpl *)(*(uint64_t (**)(uint64_t, re::internal::SerializedMaterialParameterBindPointImpl *, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 112))(v9, v8, v10, v11, a5);
    }
  }
  return result;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::overrideValueUntyped(re::internal::SerializedMaterialParameterBindPointImpl *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t result = re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 120))(v8, v7, v9, v10);
  }
  return result;
}

re::internal::SerializedMaterialParameterBindPointImpl *re::internal::SerializedMaterialParameterBindPointImpl::markAsWritten(re::internal::SerializedMaterialParameterBindPointImpl *result, void *a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    uint64_t result = (re::internal::SerializedMaterialParameterBindPointImpl *)re::internal::SerializedMaterialParameterBindPointImpl::getParameter(result, a2);
    if (result)
    {
      uint64_t v7 = result;
      re::ecs2::Component::markDirty((void *)*a2);
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (re::internal::SerializedMaterialParameterBindPointImpl *)(*(uint64_t (**)(uint64_t, re::internal::SerializedMaterialParameterBindPointImpl *, uint64_t, uint64_t))(*(void *)v8 + 128))(v8, v7, v9, v10);
    }
  }
  return result;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::boundOwner()
{
  return 0;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::getParameter(re::internal::SerializedMaterialParameterBindPointImpl *this, void *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (!a2 || !a2[1]) {
    return 0;
  }
  uint64_t v2 = (void *)*a2;
  if (*a2)
  {
    unint64_t v3 = a2[2];
    if (v2[6] > v3)
    {
      uint64_t v4 = (StringID *)((char *)this + 8);
      uint64_t v5 = v2[8] + 24 * v3;
      ++*(_DWORD *)(v5 + 16);
      uint64_t v6 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(*(void *)v5 + 304, (void *)this + 1);
      if (v6) {
        goto LABEL_25;
      }
      uint64_t v7 = v2[2];
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 176);
        if (v8)
        {
          if (*(void *)(v8 + 72) > v3)
          {
            uint64_t v9 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(void *)(v8 + 88) + 24 * v3));
            if (v9)
            {
              long long v37 = 0u;
              long long v38 = 0u;
              long long v35 = 0u;
              long long v36 = 0u;
              long long v32 = 0u;
              long long v30 = 0u;
              long long v31 = 0u;
              long long v28 = 0u;
              long long v29 = 0u;
              long long v26 = 0u;
              long long v27 = 0u;
              long long v25 = 0u;
              memset(v24, 0, sizeof(v24));
              BYTE8(vre::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 26) = 10;
              BYTE8(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27) = 0;
              BYTE8(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
              BYTE8(v3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
              uint64_t v34 = 0;
              *(void *)&long long v35 = 0;
              uint64_t v33 = 0;
              DWORD2(v35) = 0;
              *(void *)((char *)&v37 + 5) = 0;
              *(void *)&long long v37 = 0;
              uint64_t v10 = *(void *)(v9 + 1664);
              uint64_t v11 = v10 + 224;
              uint64_t v19 = *(void *)&v4->var0 >> 1;
              re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v10 + 224), &v19, (uint64_t)&v20);
              uint64_t v19 = 0;
              re::internal::SerializedMaterialParameterBindPointImpl::tryPopulateParameter((uint64_t)v24, (uint64_t)&v20, v10 + 224);
              if (LOBYTE(v24[0])) {
                goto LABEL_16;
              }
              uint64_t v12 = *(void *)(v10 + 16);
              if (v12) {
                id v13 = (id)(v12 + 8);
              }
              uint64_t v18 = *(void *)&v4->var0 >> 1;
              re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v12 + 248), &v18, (uint64_t)v47);
              uint64_t v20 = v47[0];
              long long v21 = *(_OWORD *)&v47[1];
              char v22 = v47[3];
              uint64_t v18 = 0;
              re::internal::SerializedMaterialParameterBindPointImpl::tryPopulateParameter((uint64_t)v24, (uint64_t)&v20, v11);
              if (v12) {

              }
              if (LOBYTE(v24[0]))
              {
LABEL_16:
                unint64_t v14 = v2[6];
                if (v14 <= v3)
                {
                  uint64_t v23 = 0;
                  long long v49 = 0u;
                  long long v50 = 0u;
                  long long v48 = 0u;
                  memset(v47, 0, sizeof(v47));
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  int v39 = 136315906;
                  unint64_t v40 = "operator[]";
                  __int16 v41 = 1024;
                  int v42 = 789;
                  __int16 v43 = 2048;
                  unint64_t v44 = v3;
                  __int16 v45 = 2048;
                  unint64_t v46 = v14;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                uint64_t v15 = v2[8] + 24 * v3;
                ++*(_DWORD *)(v15 + 16);
                uint64_t v16 = *(void *)v15;
                ++*(_DWORD *)(v16 + 400);
                uint64_t v6 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v16 + 304, v4, (uint64_t)v24);
              }
              else
              {
                uint64_t v6 = 0;
              }
              *(void *)&long long v37 = 0;
              if (v33)
              {
                if ((void)v36) {
                  (*(void (**)(void))(*(void *)v33 + 40))();
                }
                *(void *)&long long v36 = 0;
                uint64_t v34 = 0;
                *(void *)&long long v35 = 0;
                uint64_t v33 = 0;
                ++DWORD2(v35);
              }
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v25);
              goto LABEL_25;
            }
          }
        }
      }
    }
  }
  uint64_t v6 = 0;
LABEL_25:
  if (v6) {
    return v6 + 16;
  }
  else {
    return 0;
  }
}

void re::internal::SerializedMaterialParameterBindPointImpl::tryPopulateParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 12) & 7) != 0)
  {
    if (re::MaterialParameterHandle::isParameterType(a2, 1))
    {
      v11.n128_u32[0] = re::MaterialParameterTable::floatValue(a3, a2);
      int v6 = 1;
      goto LABEL_10;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 32))
    {
      v11.n128_u64[0] = re::MaterialParameterTable::vector2FValue(a3, a2);
      int v6 = 32;
      goto LABEL_10;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 34))
    {
      v11.n128_u64[0] = re::MaterialParameterTable::vector4FValue(a3, a2);
      v11.n128_u64[1] = v7;
      int v6 = 34;
      goto LABEL_10;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 3))
    {
      v11.n128_u32[0] = re::MaterialParameterTable::intValue(a3, a2);
      int v6 = 3;
LABEL_10:
      re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v12, v6, (unsigned __int8 *)&v11);
      long long v8 = v12[3];
      *(_OWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v12[2];
      *(_OWORD *)(a1 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v8;
      *(_OWORD *)(a1 + 64) = v12[4];
      long long v9 = v12[1];
      *(_OWORD *)a1 = v12[0];
      *(_OWORD *)(a1 + 16) = v9;
      re::AssetHandle::operator=(a1 + 80, v13);
      re::OptionalMaterialSamplerData::operator=(a1 + 104, (uint64_t)&v14);
      re::DynamicArray<BOOL>::operator=(a1 + 208, &v15);
      *(unsigned char *)(a1 + 24re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v20;
      *(void *)(a1 + 256) = v21;
      *(_OWORD *)(a1 + 264) = v22;
      *(unsigned char *)(a1 + 280) = v23;
      uint64_t v21 = 0;
      if (v15)
      {
        if (v19) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v19);
        }
        uint64_t v19 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v15 = 0;
        ++v18;
      }
LABEL_14:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
      return;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 7))
    {
      v11.n128_u32[0] = re::MaterialParameterTable::intValue(a3, a2);
      int v10 = 7;
      goto LABEL_26;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 4))
    {
      v11.n128_u64[0] = re::MaterialParameterTable::int2Value(a3, a2);
      int v10 = 4;
      goto LABEL_26;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 8))
    {
      v11.n128_u64[0] = re::MaterialParameterTable::int2Value(a3, a2);
      int v10 = 8;
      goto LABEL_26;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 6))
    {
      __n128 v11 = re::MaterialParameterTable::int4Value(a3, a2);
      int v10 = 6;
      goto LABEL_26;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 10))
    {
      __n128 v11 = re::MaterialParameterTable::int4Value(a3, a2);
      int v10 = 10;
LABEL_26:
      re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v12, v10, (unsigned __int8 *)&v11);
      re::ecs2::SerializedMaterialParameter::operator=(a1, (uint64_t)v12);
      uint64_t v21 = 0;
      if (v15)
      {
        if (v19) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v19);
        }
        uint64_t v19 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v15 = 0;
        ++v18;
      }
      goto LABEL_14;
    }
  }
}

void *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  long long v18 = 0u;
  re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)&v18);
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= v9)
  {
    unint64_t v11 = v10 + 1;
    if (v9 < v10 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v12 = 2 * v9;
        BOOL v13 = v9 == 0;
        unint64_t v14 = 8;
        if (!v13) {
          unint64_t v14 = v12;
        }
        if (v14 <= v11) {
          unint64_t v15 = v11;
        }
        else {
          unint64_t v15 = v14;
        }
        re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((void *)a4, v15);
      }
      else
      {
        re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((void *)a4, v11);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v10 = *(void *)(a4 + 16);
  }
  re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)(*(void *)(a4 + 32) + 408 * v10), (const re::ecs2::SerializableMaterialParameterBlock *)&v18);
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v26);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v25);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v24);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v23);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v22);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v21);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v20);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v19);
  *(void *)&long long v18 = &unk_26E6DECE0;
  objc_destructInstance((char *)&v18 + 8);
  uint64_t v16 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 408 * *(void *)(a4 + 16) - 408);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v16);
  return v16;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 408 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 408 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  *(void *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::clear((void *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 408 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 408;
        v11 -= 408;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 408 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 408 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  BOOL v13 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 24 * v8);
  *(void *)BOOL v13 = 0;
  *((void *)v13 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)v13 + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 1;
  *(void *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 24 * v9;
        unint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *unint64_t v11 = *v8;
          if (v12) {
            id v13 = (id)(v12 + 8);
          }
          v11[1] = 0;
          void v11[2] = 1;
          if (*v8)
          {

            *unint64_t v8 = 0;
          }
          v8 += 3;
          v11 += 3;
          v10 -= 24;
        }
        while (v10);
        unint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  *(void *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = 24 * v2;
    do
    {
      if (*(void *)v3)
      {

        *(void *)uint64_t v3 = 0;
      }
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock>(re *a1@<X0>, void *a2@<X8>)
{
  int v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 408, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)(v4 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 11re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v4 + 12re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v4 + 1re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 19re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v4 + 20re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 27re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v4 + re::SmallHashTable<unsigned long long,unsigned short,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashTable((uint64_t)this + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 3re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 35re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v4 + 36re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(void *)(v4 + 400) = 0;
  re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v4);
  *a2 = v5;
}

re::ecs2::SerializableMaterialParameterBlock *re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock&>@<X0>(re *a1@<X0>, re::ecs2::SerializableMaterialParameterBlock **a2@<X8>)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::ecs2::SerializableMaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 408, 8);
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(v5, a1);
  *a2 = result;
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::update(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 224);
  unint64_t v5 = a1[3];
  unint64_t v6 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v5);
  if (*(_DWORD *)(v6 + 40)) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 24))(v4, a2, a1, v5, v6, 0);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = a1[5];
  unint64_t v9 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v8);
  if (*(_DWORD *)(v9 + 40)) {
    uint64_t v7 = v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 32))(v4, a2, a1, v8, v9, 0);
  }
  unint64_t v10 = a1[6];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    return v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 40))(v4, a2, a1, v10, v11, 0);
  }
  return v7;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *unint64_t v10 = &unk_26E706670;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    int v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E7066C8;
    v16[1] = a1;
    uint64_t v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    _OWORD v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    char v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    void *v22 = &unk_26E706720;
    v22[1] = a1;
    uint64_t v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    _OWORD v22[3] = 0;
    char v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    long long v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    void *v28 = &unk_26E706778;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    int v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      uint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        long long v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        void *v37 = &unk_26E706670;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        __int16 v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        int v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        __int16 v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E7066C8;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        void *v49 = &unk_26E706720;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E706778;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 192);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 192);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 192);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 192);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706670;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706670;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7066C8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7066C8;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706720;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706720;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706778;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706778;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::MaterialParameterBlockArraySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MaterialParameterBlockArraySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

re::ecs2::Component *re::CAREUtil::GetOrAddCAREComponent(void *a1, re::ecs2::ComponentTypeBase *a2, int a3, uint64_t a4, unsigned char *a5)
{
  int v9 = a1;
  if (!a5)
  {
    uint64_t v18 = (re::ecs2::Component *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 4), a2);
    if (v18) {
      return v18;
    }
  }
  uint64_t v10 = (re::ecs2::EntityComponentCollection *)(v9 + 4);
  uint64_t v11 = v9[25];
  BOOL v12 = a3 == 1;
  if (!v11) {
    goto LABEL_16;
  }
  if (!a4)
  {
    do
    {
      uint64_t v14 = v9;
      int v9 = (void *)v9[3];
    }
    while (v9);
    uint64_t v15 = v14[2];
    if (!v15
      || (uint64_t v16 = *(void *)(v15 + 56)) == 0
      || (uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16),
          (a4 = re::ServiceLocator::serviceOrNull<re::EntitlementService>(v17)) == 0))
    {
LABEL_16:
      if (a3) {
        goto LABEL_17;
      }
LABEL_24:
      if (a5) {
        *a5 = 0;
      }
      uint64_t v18 = (re::ecs2::Component *)re::ecs2::EntityComponentCollection::get(v10, a2);
      if (!v18)
      {
        (*(void (**)(re::ecs2::Component **__return_ptr, re::ecs2::ComponentTypeBase *))(*(void *)a2 + 32))(&v23, a2);
        if (v11) {
          re::ecs2::NetworkComponent::disableSyncForComponent((_anonymous_namespace_ **)v11, v23);
        }
        long long v22 = v23;
        if (v23) {
          uint64_t v21 = (char *)v23 + 8;
        }
        re::ecs2::EntityComponentCollection::add((uint64_t)v10, (uint64_t *)&v22, 1);
        if (v22)
        {

          long long v22 = 0;
        }
        uint64_t v18 = v23;
        if (v23) {
      }
        }
      return v18;
    }
  }
  if (*(void *)(v11 + 32)) {
    Owneruint64_t PeerID = RESyncableGetOwnerPeerID();
  }
  else {
    Owneruint64_t PeerID = 0;
  }
  int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a4 + 80))(a4, OwnerPeerID);
  if (v19 != 1)
  {
    if (v19 == 2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  BOOL v12 = 0;
  if (!a3) {
    goto LABEL_24;
  }
LABEL_17:
  if (v12) {
    goto LABEL_24;
  }
  if (a5) {
    *a5 = 1;
  }
  return (re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd(v10, a2);
}

re::ecs2::EnvironmentLightingManagerStateTracking *re::ecs2::EnvironmentLightingManagerStateTracking::EnvironmentLightingManagerStateTracking(re::ecs2::EnvironmentLightingManagerStateTracking *this)
{
  void v5[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::HierarchyStateTracking((uint64_t)this);
  *(void *)uint64_t v2 = &unk_26E7067D0;
  *(void *)(v2 + 296) = 0;
  *(_OWORD *)(v2 + 24re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  v2 += 248;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 2;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)v2, (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::HierarchyStateTracking(uint64_t a1)
{
  *(void *)a1 = &unk_26E7068A0;
  *(_OWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 7re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_DWORD *)(a1 + 8re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v2 = a1 + 56;
  *(void *)(a1 + 9re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v3 = a1 + 104;
  *(void *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 16re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 15re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  uint64_t v4 = a1 + 152;
  *(void *)(a1 + 18re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 2re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v5 = a1 + 200;
  *(void *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

void re::ecs2::EnvironmentLightingManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 6;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v47 = (unint64_t *)(a1 + 56);
    unsigned int v45 = *(_DWORD *)(a2 + 32);
    unsigned int v9 = v45;
    do
    {
      unint64_t v10 = *(void *)(v8 + 24 * v7 + 16);
      uint64_t v11 = *(void *)(a1 + 296);
      if (!*(void *)(a1 + 56)
        || (unint64_t v12 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27)),
            uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * ((v12 ^ (v12 >> 31)) % *(unsigned int *)(a1 + 80))),
            v13 == 0x7FFFFFFF))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr))(**(void **)v11 + 8))(&v57);
        if ((_BYTE)v57) {
          unint64_t v15 = v58;
        }
        else {
          unint64_t v15 = 0;
        }
        unint64_t v16 = *(void *)(v10 + 24);
        unsigned __int32 v17 = 1.0;
        while (v16)
        {
          if ((*(unsigned char *)(v16 + 288) & 0x80) != 0) {
            break;
          }
          (*(void (**)(uint64_t *__return_ptr))(**(void **)v11 + 8))(&v57);
          uint64_t v18 = (_BYTE)v57 ? v58 : 0;
          if (v15 != v18) {
            break;
          }
          if (*v47)
          {
            unint64_t v19 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
            uint64_t v20 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * ((v19 ^ (v19 >> 31)) % *(unsigned int *)(a1 + 80)));
            if (v20 != 0x7FFFFFFF)
            {
              uint64_t v21 = *(void *)(a1 + 72);
              while (*(void *)(v21 + 32 * v20 + 16) != v16)
              {
                uint64_t v20 = *(_DWORD *)(v21 + 32 * v20 + 8) & 0x7FFFFFFF;
                if (v20 == 0x7FFFFFFF) {
                  goto LABEL_28;
                }
              }
              unsigned __int32 v17 = *(_DWORD *)(v21 + 32 * v20 + 24);
              break;
            }
          }
LABEL_28:
          if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
          {
            unint64_t v10 = v16;
          }
          unint64_t v16 = *(void *)(v16 + 24);
        }
        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v57);
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        int v52 = 1;
        uint64_t v54 = 0;
        unint64_t v55 = 0;
        uint64_t v53 = 0;
        int v56 = 0;
        re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::init((uint64_t)&v50, (uint64_t)&v57, 1uLL);
        v48.n128_u64[0] = v10;
        v48.n128_u32[2] = v17;
        unint64_t v49 = v15;
        __n128 v22 = re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::add((uint64_t)&v50, &v48);
LABEL_34:
        unint64_t v23 = v55;
        while (v23)
        {
          uint64_t v24 = re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)&v50, --v23);
          unint64_t v25 = *(void *)v24;
          float v26 = *(float *)(v24 + 8);
          unint64_t v27 = *(void *)(v24 + 16);
          re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)&v50, v23);
          unint64_t v55 = v23;
          ++v56;
          if (*(unsigned char *)(v25 + 288))
          {
            uint64_t v28 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v25 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            if (v28) {
              float v26 = *(float *)(v28 + 28);
            }
            if (v26 != 1.0)
            {
              unint64_t v29 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) >> 27));
              unint64_t v30 = v29 ^ (v29 >> 31);
              unint64_t v31 = *v47;
              if (!*v47
                || (unint64_t v31 = v30 % *(unsigned int *)(a1 + 80),
                    uint64_t v32 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v31),
                    v32 == 0x7FFFFFFF))
              {
LABEL_45:
                uint64_t v34 = *(unsigned int *)(a1 + 92);
                if (v34 == 0x7FFFFFFF)
                {
                  uint64_t v34 = *(unsigned int *)(a1 + 88);
                  int v35 = v34;
                  if (v34 == *(_DWORD *)(a1 + 80))
                  {
                    re::HashTable<re::ecs2::Entity const*,re::ecs2::EnvironmentLightingWeight,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v47, 2 * *(_DWORD *)(a1 + 84));
                    unint64_t v31 = v30 % *(unsigned int *)(a1 + 80);
                    int v35 = *(_DWORD *)(a1 + 88);
                  }
                  *(_DWORD *)(a1 + 8re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v35 + 1;
                  uint64_t v36 = *(void *)(a1 + 72);
                  int v37 = *(_DWORD *)(v36 + 32 * v34 + 8);
                }
                else
                {
                  uint64_t v36 = *(void *)(a1 + 72);
                  int v37 = *(_DWORD *)(v36 + 32 * v34 + 8);
                  *(_DWORD *)(a1 + 9re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v37 & 0x7FFFFFFF;
                }
                *(_DWORD *)(v36 + 32 * v34 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v37 | 0x80000000;
                *(_DWORD *)(*(void *)(a1 + 72) + 32 * v34 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 72) + 32 * v34 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 64) + 4 * v31);
                *(void *)(*(void *)(a1 + 72) + 32 * v34) = v30;
                *(void *)(*(void *)(a1 + 72) + 32 * v34 + 16) = v25;
                *(float *)(*(void *)(a1 + 72) + 32 * v34 + 24) = v26;
                *(_DWORD *)(*(void *)(a1 + 64) + 4 * v3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v34;
                ++*(_DWORD *)(a1 + 84);
                ++*(_DWORD *)(a1 + 96);
              }
              else
              {
                uint64_t v33 = *(void *)(a1 + 72);
                while (*(void *)(v33 + 32 * v32 + 16) != v25)
                {
                  uint64_t v32 = *(_DWORD *)(v33 + 32 * v32 + 8) & 0x7FFFFFFF;
                  if (v32 == 0x7FFFFFFF) {
                    goto LABEL_45;
                  }
                }
              }
            }
            uint64_t v38 = *(void *)(v25 + 328);
            if (v38)
            {
              uint64_t v39 = *(unint64_t **)(v25 + 344);
              uint64_t v40 = 8 * v38;
              do
              {
                unint64_t v41 = *v39;
                (*(void (**)(__n128 *__return_ptr))(**(void **)v11 + 8))(&v48);
                if (v48.n128_u8[0]) {
                  unint64_t v42 = v48.n128_u64[1];
                }
                else {
                  unint64_t v42 = 0;
                }
                v48.n128_u64[0] = v41;
                if (v27 == v42)
                {
                  v48.n128_f32[2] = v26;
                  unint64_t v49 = v27;
                }
                else
                {
                  v48.n128_u32[2] = 1065353216;
                  unint64_t v49 = v42;
                }
                __n128 v22 = re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::add((uint64_t)&v50, &v48);
                ++v39;
                v40 -= 8;
              }
              while (v40);
              goto LABEL_34;
            }
          }
        }
        while (v51)
          re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(&v50);
        if (v50 && (v52 & 1) == 0) {
          (*(void (**)(__n128))(*(void *)v50 + 40))(v22);
        }
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v57);
        LODWORD(vre::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v45;
        unsigned int v9 = *(_DWORD *)(a2 + 32);
        uint64_t v8 = *(void *)(a2 + 16);
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 72);
        while (*(void *)(v14 + 32 * v13 + 16) != v10)
        {
          uint64_t v13 = *(_DWORD *)(v14 + 32 * v13 + 8) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_14;
          }
        }
      }
      if (v9 <= (int)v4 + 1) {
        unsigned int v43 = v4 + 1;
      }
      else {
        unsigned int v43 = v9;
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v43 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        unsigned int v44 = v7;
        if ((*(_DWORD *)(v8 + 24 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_74;
        }
      }
      unsigned int v44 = v43;
LABEL_74:
      LODWORD(v4) = v44;
    }
    while (v3 != v44);
  }
}

__n128 re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::setBucketsCapacity((void *)a1, (v4 + 32) >> 5);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v6 = a1 + 24;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(v6 + 8 * (v4 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v8 = (__n128 *)(v7 + 24 * (v4 & 0x1F));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *uint64_t v8 = result;
  return result;
}

void re::ecs2::EnvironmentLightingManager::updateEnvironmentLightingData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 304) = a2;
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(a1 + 8, a1 + 112);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v4);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v3 + 200);
  *(void *)(v3 + 296) = 0;
}

void re::ecs2::EnvironmentLightingManagerStateTracking::~EnvironmentLightingManagerStateTracking(re::ecs2::EnvironmentLightingManagerStateTracking *this)
{
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 34);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::~HierarchyStateTracking((uint64_t *)this);
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 34);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::~HierarchyStateTracking((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::EnvironmentLightingManagerStateTracking::trackedComponents(re::ecs2::EnvironmentLightingManagerStateTracking *this)
{
  return *((void *)this + 33);
}

uint64_t re::ecs2::EnvironmentLightingManagerStateTracking::trackedActivationComponents(re::ecs2::EnvironmentLightingManagerStateTracking *this)
{
  return *((void *)this + 36);
}

void re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v30);
    v24[0] = 0;
    v24[1] = 0;
    int v25 = 1;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    int v29 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v24, (uint64_t)v30, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v24) = a2;
    uint64_t v4 = v28;
    while (v4)
    {
      unint64_t v5 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v24, v4 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v24, v28 - 1);
      uint64_t v4 = --v28;
      ++v29;
      if (*(void *)(a1 + 56))
      {
        unint64_t v6 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
        unint64_t v7 = (v6 ^ (v6 >> 31)) % *(unsigned int *)(a1 + 80);
        uint64_t v8 = *(void *)(a1 + 64);
        uint64_t v9 = *(unsigned int *)(v8 + 4 * v7);
        if (v9 != 0x7FFFFFFF)
        {
          uint64_t v10 = *(void *)(a1 + 72);
          uint64_t v11 = v10 + 32 * v9;
          if (*(void *)(v11 + 16) == v5)
          {
            *(_DWORD *)(v8 + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
LABEL_10:
            uint64_t v14 = *(void *)(a1 + 72);
            uint64_t v15 = v14 + 32 * v9;
            int v18 = *(_DWORD *)(v15 + 8);
            unsigned __int32 v17 = (int *)(v15 + 8);
            int v16 = v18;
            if (v18 < 0)
            {
              *unsigned __int32 v17 = v16 & 0x7FFFFFFF;
              uint64_t v14 = *(void *)(a1 + 72);
              int v16 = *(_DWORD *)(v14 + 32 * v9 + 8);
            }
            *(_DWORD *)(v14 + 32 * v9 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 92) | v16 & 0x80000000;
            --*(_DWORD *)(a1 + 84);
            int v19 = *(_DWORD *)(a1 + 96) + 1;
            *(_DWORD *)(a1 + 9re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v9;
            *(_DWORD *)(a1 + 96) = v19;
          }
          else
          {
            while (1)
            {
              uint64_t v12 = v9;
              uint64_t v9 = *(_DWORD *)(v10 + 32 * v9 + 8) & 0x7FFFFFFF;
              if (v9 == 0x7FFFFFFF) {
                break;
              }
              uint64_t v13 = v10 + 32 * v9;
              if (*(void *)(v13 + 16) == v5)
              {
                *(_DWORD *)(v10 + 32 * v12 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v10 + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
                goto LABEL_10;
              }
            }
          }
        }
      }
      uint64_t v20 = *(void *)(v5 + 328);
      if (v20)
      {
        uint64_t v21 = *(uint64_t **)(v5 + 344);
        uint64_t v22 = 8 * v20;
        do
        {
          uint64_t v23 = *v21++;
          *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v24) = v23;
          v22 -= 8;
        }
        while (v22);
        uint64_t v4 = v28;
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v24);
    if (v24[0])
    {
      if ((v25 & 1) == 0) {
        (*(void (**)(void))(*(void *)v24[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v30);
  }
}

void re::ecs2::EnvironmentLightingManager::~EnvironmentLightingManager(re::ecs2::EnvironmentLightingManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 35);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32);
  re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::~HierarchyStateTracking(v2);
}

{
  uint64_t *v2;
  uint64_t vars8;

  uint64_t v2 = (uint64_t *)((char *)this + 8);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 35);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 32);
  re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::~HierarchyStateTracking(v2);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::EnvironmentLightingManager::environmentLightingWeightPerEntity(re::ecs2::EnvironmentLightingManager *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::EnvironmentLightingManager::registerScene(re::ecs2::EnvironmentLightingManager *this, re::EventBus **a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  unsigned int v44 = (re::ecs2::Scene *)a2;
  uint64_t v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = (re::ecs2::EnvironmentLightingManager *)((char *)this + 8);
  v38[0] = 0;
  v38[1] = 0;
  int v39 = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  int v43 = 0;
  unint64_t v5 = (re *)(*(uint64_t (**)(re *))(*(void *)v4 + 16))(v4);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)v5;
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      uint64_t v46 = re::globalAllocators(v5)[2];
      uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
      *uint64_t v10 = &unk_26E7068E0;
      v10[1] = v4;
      void v10[2] = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      void v10[3] = 0;
      uint64_t v47 = v10;
      uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v45, v9, 0);
      uint64_t v13 = v12;
      uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
      void *v14 = v11;
      v14[1] = v13;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v45);
      re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v4, v2, (uint64_t)v38, v9);
      unint64_t v5 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v4, v2, (uint64_t)v38, v9);
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v15 = (re *)(*(uint64_t (**)(re *))(*(void *)v4 + 24))(v4);
  if (v16)
  {
    unsigned __int32 v17 = (uint64_t *)v15;
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v17++;
      re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v4, v2, (uint64_t)v38, v19);
      uint64_t v15 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v4, v2, (uint64_t)v38, v19);
      v18 -= 8;
    }
    while (v18);
  }
  uint64_t v46 = re::globalAllocators(v15)[2];
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
  void *v20 = &unk_26E7069E8;
  v20[1] = v4;
  void v20[2] = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  _OWORD v20[3] = 0;
  uint64_t v47 = v20;
  uint64_t v21 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v45, 0, 0);
  uint64_t v23 = v22;
  uint64_t v24 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *uint64_t v24 = v21;
  v24[1] = v23;
  int v25 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v45);
  uint64_t v46 = re::globalAllocators(v25)[2];
  uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
  void *v26 = &unk_26E706A40;
  v26[1] = v4;
  _OWORD v26[2] = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  _OWORD v26[3] = 0;
  uint64_t v47 = v26;
  uint64_t v27 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v45, 0, 0);
  uint64_t v29 = v28;
  unint64_t v30 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *unint64_t v30 = v27;
  v30[1] = v29;
  unint64_t v31 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)v45);
  uint64_t v46 = re::globalAllocators(v31)[2];
  uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v46 + 32))(v46, 32, 0);
  void *v32 = &unk_26E706A98;
  v32[1] = v4;
  v32[2] = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  v32[3] = 0;
  uint64_t v47 = v32;
  uint64_t v33 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v45, 0, 0);
  uint64_t v35 = v34;
  uint64_t v36 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *uint64_t v36 = v33;
  v36[1] = v35;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v45);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 160, (uint64_t *)&v44, (uint64_t)v38);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 16, (uint64_t *)&v44);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v38);
  uint64_t result = v38[0];
  if (v38[0])
  {
    if ((v39 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v38[0] + 40))();
    }
  }
  return result;
}

uint64_t re::ecs2::EnvironmentLightingManager::unregisterScene(re::ecs2::EnvironmentLightingManager *this, re::ecs2::Scene *a2)
{
  uint64_t v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 16, (uint64_t *)&v14);
  uint64_t v3 = *((void *)v14 + 13);
  uint64_t v4 = *(void *)(v3 + 328);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 344);
    uint64_t v6 = 8 * v4;
    do
    {
      if (*(unsigned char *)(*(void *)v5 + 288)) {
        (*(void (**)(char *))(*((void *)this + 1) + 40))((char *)this + 8);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  unint64_t v7 = (char *)this + 160;
  uint64_t result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    uint64_t v9 = *((void *)v14 + 36);
    if (v9)
    {
      uint64_t v10 = result;
      uint64_t v11 = *(void *)(result + 40);
      if (v11)
      {
        for (unint64_t i = 0; i != v11; ++i)
        {
          uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(void *)v13, *(void *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

uint64_t *re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::~HierarchyStateTracking(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E7068A0;
  uint64_t v2 = a1 + 1;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 13);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
  return a1;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::trackedComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::trackedActivationComponents()
{
  return 0;
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *uint64_t v8 = &unk_26E706938;
  v8[1] = a1;
  _DWORD v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  uint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  *uint64_t v8 = &unk_26E706990;
  v8[1] = a1;
  _DWORD v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  uint64_t v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *uint64_t v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7068E0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7068E0;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706938;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706938;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706990;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706990;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7069E8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7069E8;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (!*(unsigned char *)(a2 + 371))
  {
    uint64_t v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706A40;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706A40;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706A98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706A98;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 768, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 24 * (a2 & 0x1F);
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::EnvironmentLightingWeight,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = v7;
        int v14 = DWORD1(v9);
        do
        {
          uint64_t v15 = (uint64_t *)(*(void *)&v24[16] + v11);
          if ((*(_DWORD *)(*(void *)&v24[16] + v11 + 8) & 0x80000000) != 0)
          {
            unint64_t v16 = *v15;
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = *v15 % v17;
            uint64_t v19 = *(unsigned int *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              uint64_t v19 = *(unsigned int *)(a1 + 32);
              int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::EnvironmentLightingWeight,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v14));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 32 * v19 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v22 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v19 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v19 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(void *)(*(void *)(a1 + 16) + 32 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v16;
            *(void *)(*(void *)(a1 + 16) + 32 * v19 + 16) = v15[2];
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v19 + 24) = *((_DWORD *)v15 + 6);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v1re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v19;
            int v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v14;
            unsigned int v10 = *(_DWORD *)&v24[32];
          }
          ++v12;
          v11 += 32;
        }
        while (v12 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void *re::ecs2::allocInfo_AREnvironmentProbeComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_311, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_311))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E100, "AREnvironmentProbeComponent");
    __cxa_guard_release(&_MergedGlobals_311);
  }
  return &unk_26AF8E100;
}

void re::ecs2::initInfo_AREnvironmentProbeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v28[0] = 0xBEA5DE57511179DELL;
  v28[1] = "AREnvironmentProbeComponent";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v29;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E0A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8E0A8);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8E0D0 = v7;
      unsigned int v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "extents";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x4000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8E0D8 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_AssetHandle((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "texture";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8E0E0 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      unint64_t v17 = re::introspect_uint32_t((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "priority";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x5C00000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8E0E8 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      uint64_t v21 = re::introspect_float((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "weight";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x5800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF8E0F0 = v22;
      signed int v23 = re::introspectionAllocator((re *)v22);
      int v25 = re::introspect_BOOL((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "useAsBackground";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x5000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF8E0F8 = v26;
      __cxa_guard_release(&qword_26AF8E0A8);
    }
  }
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 6;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &qword_26AF8E0D0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::AREnvironmentProbeComponent>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AREnvironmentProbeComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::AREnvironmentProbeComponent>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AREnvironmentProbeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v27 = v29;
}

double re::internal::defaultConstruct<re::ecs2::AREnvironmentProbeComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E8300;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(v3 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x7F800000u);
  *(unsigned char *)(v3 + 80) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v3 + 84) = result;
  *(_DWORD *)(v3 + 9re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::AREnvironmentProbeComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::AREnvironmentProbeComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E8300;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(v1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  *(int32x4_t *)(v1 + 64) = vdupq_n_s32(0x7F800000u);
  *(unsigned char *)(v1 + 80) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 84) = result;
  *(_DWORD *)(v1 + 9re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::AREnvironmentProbeComponent>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AREnvironmentProbeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AREnvironmentProbeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AREnvironmentProbeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AREnvironmentProbeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AREnvironmentProbeComponent>, this);
}

void *re::ecs2::allocInfo_ProbeClusterExclusionComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E0B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E0B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E178, "ProbeClusterExclusionComponent");
    __cxa_guard_release(&qword_26AF8E0B0);
  }
  return &unk_26AF8E178;
}

void re::ecs2::initInfo_ProbeClusterExclusionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xFC7C25AD817EA972;
  v9[1] = "ProbeClusterExclusionComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E0C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8E0C0);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8E0B8 = v7;
      __cxa_guard_release(&qword_26AF8E0C0);
    }
  }
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 1;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &qword_26AF8E0B8;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::ProbeClusterExclusionComponent>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ProbeClusterExclusionComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::ProbeClusterExclusionComponent>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ProbeClusterExclusionComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::ProbeClusterExclusionComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F4200;
}

void *re::internal::defaultDestruct<re::ecs2::ProbeClusterExclusionComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ProbeClusterExclusionComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F4200;
}

void *re::internal::defaultDestructV2<re::ecs2::ProbeClusterExclusionComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ProbeClusterExclusionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProbeClusterExclusionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProbeClusterExclusionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProbeClusterExclusionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProbeClusterExclusionComponent>, this);
}

void *re::ecs2::allocInfo_AREnvironmentProbeSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E0C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E0C8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E1F0, "AREnvironmentProbeSystem");
    __cxa_guard_release(&qword_26AF8E0C8);
  }
  return &unk_26AF8E1F0;
}

void re::ecs2::initInfo_AREnvironmentProbeSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x1E17583E47DC4EFALL;
  v5[1] = "AREnvironmentProbeSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x1F800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &re::ecs2::initInfo_AREnvironmentProbeSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::AREnvironmentProbeSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AREnvironmentProbeSystem>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::AREnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = re::internal::defaultRelease<re::ecs2::AREnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::AREnvironmentProbeSystem>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AREnvironmentProbeSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::AREnvironmentProbeSystem *re::internal::defaultConstruct<re::ecs2::AREnvironmentProbeSystem>(int a1, int a2, re::ecs2::AREnvironmentProbeSystem *this)
{
  return re::ecs2::AREnvironmentProbeSystem::AREnvironmentProbeSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AREnvironmentProbeSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a3 + 55));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &unk_26E706AF0;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 22);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AREnvironmentProbeSystem>(void *a1)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 55));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &unk_26E706AF0;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 22);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AREnvironmentProbeSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AREnvironmentProbeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AREnvironmentProbeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AREnvironmentProbeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AREnvironmentProbeSystem>, this);
}

BOOL re::ecs2::AREnvironmentProbeComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  unint64_t v8 = v21;
  unint64_t v9 = v22;
  unint64_t v21 = a4;
  unint64_t v22 = v8;
  unint64_t v23 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = *(void *)(*(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22)
                      + 40);
      unint64_t v15 = v21;
      unint64_t v16 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
      if (v14) {
        uint64_t v17 = 40;
      }
      else {
        uint64_t v17 = 32;
      }
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v15, v16, *(void *)(a3 + v17));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::AREnvironmentProbeComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v27, a5, 0);
  unint64_t v8 = v27;
  unint64_t v9 = v28;
  unint64_t v27 = a4;
  unint64_t v28 = v8;
  unint64_t v29 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    while (1)
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(*(void *)v14 + 40);
      if (!v16) {
        break;
      }
      unsigned int v17 = atomic_load((unsigned int *)(v16 + 704));
      if (v17 == 3)
      {
        unint64_t v18 = v27;
        unint64_t v19 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
        int v20 = (re::ecs2::ComponentBucketsBase *)a3[2];
        unint64_t v21 = a3[4];
      }
      else
      {
        uint64_t v22 = *(void *)(v15 + 40);
        if (!v22) {
          break;
        }
        unsigned int v23 = atomic_load((unsigned int *)(v22 + 704));
        if (v23 != 2) {
          break;
        }
        unint64_t v18 = v27;
        unint64_t v19 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
        int v20 = (re::ecs2::ComponentBucketsBase *)a3[2];
        unint64_t v21 = a3[6];
      }
      re::ecs2::ComponentBucketsBase::moveComponent(v20, v18, v19, v21);
LABEL_16:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
      if (v28 == a5 && (unsigned __int16)v29 == 0xFFFF && WORD1(v29) == 0xFFFF) {
        return *(_DWORD *)(a5 + 40) != 0;
      }
    }
    re::AssetHandle::loadAsync((re::AssetHandle *)(v15 + 32));
    goto LABEL_16;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AREnvironmentProbeComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 112);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 104)) != 0 && (v7 = *(void *)(v6 + 320)) != 0)
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
    uint64_t v22 = a4;
    float32x4_t v23 = v21;
    if (v21.i64[0] == a5 && v21.u16[4] == 0xFFFFLL && (v21.i32[2] & 0xFFFF0000) == 0xFFFF0000) {
      return *(_DWORD *)(a5 + 40) != 0;
    }
    while (1)
    {
      uint64_t v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      uint64_t v11 = *(float32x4_t **)v10;
      uint64_t v12 = *(void *)(*(void *)v10 + 16);
      uint64_t v13 = *(void **)(v12 + 296);
      uint64_t v14 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(*(void *)v10 + 32));
      if (*(_DWORD *)(v14 + 240)) {
        break;
      }
      uint64_t v15 = v14;
      uint64_t v16 = (id *)(v14 + 160);
      id v17 = objc_msgSend(*(id *)(v14 + 160), sel_hash);
      v21.i64[0] = (uint64_t)v13;
      uint64_t v18 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 16), &v21);
      if (v18 == -1)
      {
        re::ecs2::TransformComponent::worldSRT((re::ecs2::TransformComponent **)v12, (const re::ecs2::Entity *)1, (uint64_t)&v21);
        float32x4_t v21 = vmulq_f32(v21, v11[4]);
        if (*(_DWORD *)(v15 + 240)) {
          break;
        }
        re::ProbeManager::addProbe(v7, v13, v16, v11[5].i8[0], (long long *)&v21, v11[5].f32[1]);
      }
      else if (*(id *)(*(void *)(v7 + 24) + 16 * v18 + 8) != v17)
      {
        if (*(_DWORD *)(v15 + 240)) {
          break;
        }
        re::ProbeManager::updateProbe(v7, (uint64_t)v13, v16, v11[5].f32[1]);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
      if (v23.i64[0] == a5 && v23.u16[4] == 0xFFFF && v23.u16[5] == 0xFFFF) {
        return *(_DWORD *)(a5 + 40) != 0;
      }
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "renderManager && renderManager->probeManager()", "processUpdatingComponents", 121);
    _os_crash();
    __break(1u);
  }
  uint64_t v20 = std::__throw_bad_variant_access[abi:nn180100]();
  return re::ecs2::AREnvironmentProbeSystem::updateScenes(v20);
}

uint64_t re::ecs2::AREnvironmentProbeSystem::updateScenes(uint64_t result, id **a2, uint64_t a3, uint64_t a4)
{
  float v4 = *(float *)&a3;
  uint64_t v6 = result;
  v77[0] = a3;
  v77[1] = a4;
  uint64_t v7 = *(void *)(result + 104);
  if (v7 && (*(unsigned char *)(v7 + 424) & 0x10) == 0 || a4 != 1) {
    return result;
  }
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v76);
  unint64_t v8 = a2[1];
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *a2;
    uint64_t v11 = 8 * (void)v8;
    do
    {
      uint64_t v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)((char *)*v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v12) {
        uint64_t v13 = *(void *)(v12 + 24);
      }
      else {
        uint64_t v13 = 0;
      }
      v9 += v13;
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v75, 3067, v6);
  uint64_t v15 = *(void *)(v6 + 112);
  if (!v15 || (uint64_t v16 = *(void *)(v15 + 104)) == 0 || !*(void *)(v16 + 320))
  {
    re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) ", "m_renderManager && m_renderManager->probeManager()", "updateScenes", 173);
    _os_crash();
    __break(1u);
    goto LABEL_82;
  }
  if (!re::RenderFrameBox::get(v16 + 344, 0xFFFFFFFFFFFFFFFuLL))
  {
LABEL_82:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "m_renderManager->renderFrame()", "updateScenes", 174);
    unint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  uint64_t v18 = *(void **)(v6 + 112);
  uint64_t v19 = v18[13];
  if (!v19)
  {
    uint64_t v68 = 0;
    goto LABEL_18;
  }
  uint64_t v68 = (re::RenderFrame *)re::RenderFrameBox::get(v19 + 344, 0xFFFFFFFFFFFFFFFuLL);
  uint64_t v18 = *(void **)(v6 + 112);
  uint64_t v20 = v18[13];
  if (!v20)
  {
LABEL_18:
    uint64_t v21 = 0;
    goto LABEL_19;
  }
  uint64_t v21 = *(void *)(v20 + 320);
LABEL_19:
  float v22 = *(float *)(v21 + 820);
  float32x4_t v23 = (float32x4_t *)v18[36];
  uint64_t v24 = v18[19];
  int v25 = *(unsigned __int8 *)(v24 + 172);
  unsigned __int8 v74 = *(unsigned char *)(v24 + 172);
  uint64_t v26 = v18[11];
  if (v26)
  {
    id v69 = (id)0xB313D2E5205756C4;
    id v70 = "colorpipe:enableISPTonemapping";
    re::DebugSettingsManager::getWithErrorCode<BOOL>(v26, &v69, &v74);
    re::StringID::destroyString((re::StringID *)&v69);
    int v25 = v74;
  }
  float v27 = 1.0;
  if (!v25) {
    float v27 = *(float *)(v24 + 12488);
  }
  uint64_t v28 = v23[76].i64[0];
  if (v28)
  {
    (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
    v29.i32[3] = 0;
    v30.i32[3] = 0;
    v31.i32[3] = 0;
  }
  else
  {
    float32x4_t v29 = v23[77];
    float32x4_t v30 = v23[78];
    float32x4_t v31 = v23[79];
  }
  float32x4_t v32 = vmulq_n_f32(v29, v22 * v27);
  float32x4_t v33 = vmulq_n_f32(v30, v22 * v27);
  float32x4_t v34 = vmulq_n_f32(v31, v22 * v27);
  v32.i32[3] = 0;
  v33.i32[3] = 0;
  v34.i32[3] = 0;
  uint32x4_t v35 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v21 + 880), v34), (int8x16_t)vceqq_f32(*(float32x4_t *)(v21 + 864), v33)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v21 + 848), v32));
  v35.i32[3] = v35.i32[2];
  if ((vminvq_u32(v35) & 0x80000000) == 0)
  {
    *(float32x4_t *)(v21 + 84re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v32;
    *(float32x4_t *)(v21 + 864) = v33;
    *(float32x4_t *)(v21 + 880) = v34;
    *(unsigned char *)(v21 + 184) = 1;
  }
  if (*(unsigned __int8 *)(v21 + 896) != v74)
  {
    *(unsigned char *)(v21 + 896) = v74;
    *(unsigned char *)(v21 + 184) = 1;
  }
  uint64_t v36 = a2[1];
  if (v36)
  {
    int v37 = *a2;
    uint64_t v67 = (uint64_t)&(*a2)[(void)v36];
    while (1)
    {
      uint64_t v38 = (re::ecs2::RenderingSubsystem *)*v37;
      id v69 = *v37;
      unint64_t v39 = *(void *)(*(void *)(v6 + 264)
                      + 16
                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 256), &v69)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v6 + 368, v39);
      uint64_t v40 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v6 + 200, v39);
      uint64_t v41 = *(void *)(*v40 + 224);
      unint64_t v42 = v40[3];
      unint64_t v43 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v40[2] + 8, v42);
      if (*(_DWORD *)(v43 + 40)) {
        int v44 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v41 + 24))(v41, v77, v40, v42, v43, 0);
      }
      else {
        int v44 = 0;
      }
      unint64_t v45 = v40[5];
      unint64_t v46 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v40[2] + 8, v45);
      if (*(_DWORD *)(v46 + 40)) {
        v44 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v41 + 32))(v41, v77, v40, v45, v46, 0);
      }
      unint64_t v47 = v40[6];
      unint64_t v48 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v40[2] + 8, v47);
      if (*(_DWORD *)(v48 + 40)) {
        break;
      }
      if (v44) {
        goto LABEL_39;
      }
LABEL_40:
      if (*(unsigned char *)(v6 + 432))
      {
        unint64_t v49 = *(void *)(v6 + 376);
        int v50 = *(_DWORD *)(v6 + 384);
        if (v49 < 0xB)
        {
          uint64_t v53 = (uint64_t *)(v6 + 392);
          if ((v50 & 1) == 0) {
            uint64_t v53 = *(uint64_t **)(v6 + 400);
          }
          if (!v49) {
            goto LABEL_58;
          }
          uint64_t v54 = 0;
          uint64_t v55 = 8 * v49;
          do
          {
            uint64_t v56 = *v53++;
            v54 |= v56;
            v55 -= 8;
          }
          while (v55);
          if (!v54) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v51 = (void *)(v6 + 392);
          if ((v50 & 1) == 0) {
            uint64_t v51 = *(void **)(v6 + 400);
          }
          uint64_t v52 = 8 * v49;
          while (!*v51)
          {
            ++v51;
            v52 -= 8;
            if (!v52) {
              goto LABEL_58;
            }
          }
        }
        uint64_t v57 = *(re::ecs2::System **)(v6 + 416);
        if (!*((unsigned char *)v57 + 86)) {
          re::ecs2::System::queueToRun(v57, 0.0);
        }
      }
LABEL_58:
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v38, 0, (re::DynamicString **)v68, &v69);
      unint64_t v73 = (unint64_t)v69 >> 1;
      uint64_t v58 = **(void **)(re::RenderFrameData::stream((re::RenderFrame *)((char *)v68 + 264), (const re::WeakStringID *)&v73)+ 48);
      (*(void (**)(void))(v58 + 880))();
      re::StringID::destroyString((re::StringID *)&v69);
      if (++v37 == (id *)v67)
      {
        float v59 = *(float *)v77;
        goto LABEL_61;
      }
    }
    if (((v44 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v41 + 40))(v41, v77, v40, v47, v48, 0)) & 1) == 0)goto LABEL_40; {
LABEL_39:
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 368, v39);
    goto LABEL_40;
  }
  float v59 = v4;
LABEL_61:
  re::ProbeManager::update((re::ProbeManager *)v21, v59);
  uint64_t v60 = (*(uint64_t (**)(void))(**(void **)(v6 + 40) + 32))(*(void *)(v6 + 40));
  uint64_t v61 = re::ServiceLocator::serviceOrNull<re::FrameAnalysisService>(v60);
  if (v61)
  {
    if (*(unsigned char *)(v21 + 232)) {
      BOOL v62 = 1;
    }
    else {
      BOOL v62 = *(void *)(v21 + 208) != 0;
    }
    *(unsigned char *)(v61 + 13re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v62;
  }
  unint64_t v63 = *(void *)(v21 + 152);
  if (v63)
  {
    unint64_t v64 = 0;
    unint64_t v65 = (unsigned char *)(*(void *)(v21 + 168) + 16);
    BOOL v66 = 1;
    do
    {
      if (*(v65 - 16) && *v65) {
        break;
      }
      ++v64;
      v65 += 160;
      BOOL v66 = v63 > v64;
    }
    while (v63 != v64);
    if (v66 && *(unsigned char *)v21)
    {
      id v69 = 0;
      id v70 = 0;
      v71[0] = 0;
      NS::SharedPtr<MTL::Texture>::operator=(&v69, (void **)(v21 + 80));
      NS::SharedPtr<MTL::Texture>::operator=(&v70, (void **)(v21 + 88));
      NS::SharedPtr<MTL::Texture>::operator=(v71, (void **)(v21 + 128));
      v71[1] = *(id *)(v21 + 96);
      char v72 = *(unsigned char *)(v21 + 824);
      (*(void (**)(void, id *))(**((void **)v68 + 40) + 144))(*((void *)v68 + 40), &v69);
      if (v71[0])
      {

        v71[0] = 0;
      }
      if (v70)
      {

        id v70 = 0;
      }
      if (v69) {
    }
      }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v75);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v76);
}

void re::ecs2::AREnvironmentProbeSystem::willAddSceneToECSService(re::ecs2::AREnvironmentProbeSystem *this, re::EventBus **a2)
{
  v73[11] = *MEMORY[0x263EF8340];
  uint64_t v52 = (re::ecs2::Scene *)a2;
  float v4 = (char *)this + 200;
  v61[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::AREnvironmentProbeSystem *)((char *)this + 320);
  unint64_t v6 = *((void *)this + 41);
  int v7 = *((_DWORD *)this + 84);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)this + 344);
    }
    else {
      unint64_t v8 = (void *)*((void *)this + 44);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 344);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 44);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v53 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 320, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v53);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::AREnvironmentProbeSystem *)((char *)this + 256), v61, (uint64_t *)&v53);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v53);
    uint64_t v15 = (char *)this + 368;
    unint64_t v16 = v53;
    goto LABEL_49;
  }
LABEL_17:
  long long v60 = 0u;
  long long v53 = 0u;
  *(void *)&long long v54 = 0;
  *((void *)&v54 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = -1;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v57 = 0;
  uint64_t v58 = 1;
  long long v59 = 0uLL;
  unint64_t v17 = *((void *)this + 30);
  *(void *)&long long v60 = 0;
  unint64_t v18 = *((void *)this + 26);
  DWORD2(v60) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 25, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 26);
  }
  if (v18 <= v17 >> 2)
  {
    v61[1] = 0;
    memset(v73, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v65 = 136315906;
    BOOL v66 = "operator[]";
    __int16 v67 = 1024;
    int v68 = 858;
    __int16 v69 = 2048;
    unint64_t v70 = v17 >> 2;
    __int16 v71 = 2048;
    unint64_t v72 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_71;
  }
  if (*((unsigned char *)this + 216)) {
    uint64_t v19 = (char *)this + 224;
  }
  else {
    uint64_t v19 = (char *)*((void *)this + 29);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 30);
  ++*((_DWORD *)this + 62);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v53;
  long long v23 = v54;
  long long v24 = v55;
  *(void *)(v21 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v56;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v56 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v53);
  uint64_t v26 = *((void *)this + 30);
  if (!v26)
  {
LABEL_71:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::init(v27, (uint64_t)v4, v61[0]);
  v73[0] = *((void *)this + 30) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::AREnvironmentProbeSystem *)((char *)this + 256), v61, v73);
  unint64_t v28 = *((void *)this + 30);
  unint64_t v29 = *((void *)this + 45);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 45) = v28;
  *(void *)&long long v53 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v53);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 45) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 336)) {
      float32x4_t v33 = (char *)this + 344;
    }
    else {
      float32x4_t v33 = (char *)*((void *)this + 44);
    }
    *(void *)&v33[8 * *((void *)this + 41) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 30);
  unint64_t v35 = *((void *)this + 51);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v34;
  *(void *)&long long v53 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::AREnvironmentProbeSystem *)((char *)this + 368), v36, &v53);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 51) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 384)) {
      unint64_t v39 = (char *)this + 392;
    }
    else {
      unint64_t v39 = (char *)*((void *)this + 50);
    }
    *(void *)&v39[8 * *((void *)this + 47) - 8] &= v37;
  }
  unint64_t v16 = v73[0];
  uint64_t v15 = (char *)this + 368;
LABEL_49:
  uint64_t v40 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 432)) {
    goto LABEL_67;
  }
  unint64_t v41 = *((void *)this + 47);
  int v42 = *((_DWORD *)this + 96);
  if (v41 < 0xB)
  {
    if (v42)
    {
      int v44 = (uint64_t *)((char *)this + 392);
      if (!v41) {
        goto LABEL_67;
      }
    }
    else
    {
      int v44 = (uint64_t *)*((void *)this + 50);
      if (!v41) {
        goto LABEL_67;
      }
    }
    uint64_t v46 = 0;
    uint64_t v47 = 8 * v41;
    do
    {
      uint64_t v48 = *v44++;
      v46 |= v48;
      v47 -= 8;
    }
    while (v47);
    if (!v46) {
      goto LABEL_67;
    }
  }
  else
  {
    if (v42) {
      unint64_t v43 = (void *)((char *)this + 392);
    }
    else {
      unint64_t v43 = (void *)*((void *)this + 50);
    }
    uint64_t v45 = 8 * v41;
    while (!*v43)
    {
      ++v43;
      v45 -= 8;
      if (!v45) {
        goto LABEL_67;
      }
    }
  }
  uint64_t v40 = (re::ecs2::System *)*((void *)this + 52);
  if (!*((unsigned char *)v40 + 86)) {
    re::ecs2::System::queueToRun(v40, 0.0);
  }
LABEL_67:
  unint64_t v49 = a2[36];
  if (v49)
  {
    uint64_t v63 = re::globalAllocators(v40)[2];
    int v50 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v63 + 32))(v63, 32, 0);
    *int v50 = &unk_26E706BE8;
    v50[1] = this;
    v50[2] = re::ecs2::AREnvironmentProbeSystem::componentWillDeactivateHandler;
    v50[3] = 0;
    unint64_t v64 = v50;
    *(void *)&long long v53 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v62, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    *((void *)&v53 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v51;
    re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::addNew((re::ecs2::AREnvironmentProbeSystem *)((char *)this + 440), (uint64_t *)&v52, &v53);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v62);
  }
}

uint64_t re::ecs2::AREnvironmentProbeSystem::componentWillDeactivateHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 168) + 112);
  if (v2 && (v3 = *(void *)(v2 + 104)) != 0 && (float v4 = *(re::ProbeManager **)(v3 + 320)) != 0)
  {
    unint64_t v5 = *(void *)(a2 + 296);
    unint64_t v7 = v5;
    if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 2, &v7) != -1)re::ProbeManager::removeProbe(v4, v5); {
    return 0;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "renderManager && renderManager->probeManager()", "willDeactivateComponent", 62);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::AREnvironmentProbeSystem::willRemoveSceneFromECSService(re::ecs2::AREnvironmentProbeSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v17 = a2;
  unint64_t v18 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 256);
  uint64_t v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 32, &v18);
  if (v4 != -1)
  {
    uint64_t v5 = *((void *)this + 33) + 16 * v4;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 320, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 368, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 200, *(void *)(v5 + 8));
    if (*v6)
    {
      unint64_t v7 = v6;
      *unint64_t v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v18);
  }
  uint64_t result = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)this + 55, (uint64_t *)&v17);
  if (result != -1)
  {
    if (*((void *)v17 + 36)) {
      re::EventBus::unsubscribe(*((void *)v17 + 36), *(void *)(*((void *)this + 56) + 24 * result + 8), *(void *)(*((void *)this + 56) + 24 * result + 16));
    }
    return re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::remove((uint64_t *)this + 55, (uint64_t *)&v17);
  }
  return result;
}

uint64_t re::ecs2::AREnvironmentProbeComponentStateImpl::dependsOnComponents(re::ecs2::AREnvironmentProbeComponentStateImpl *this)
{
  return *((void *)this + 4);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AREnvironmentProbeComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

void re::ecs2::AREnvironmentProbeSystem::~AREnvironmentProbeSystem(re::ecs2::AREnvironmentProbeSystem *this)
{
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20) = &unk_26E706AF0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 440);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25);
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20) = &unk_26E706AF0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AREnvironmentProbeSystem::typeInfo(re::ecs2::AREnvironmentProbeSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AREnvironmentProbeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AREnvironmentProbeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AREnvironmentProbeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AREnvironmentProbeSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706BE8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706BE8;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::AREnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AREnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E706C40;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    int v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E706C98;
    v16[1] = a1;
    uint64_t v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    _OWORD v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    void *v22 = &unk_26E706CF0;
    v22[1] = a1;
    uint64_t v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    _OWORD v22[3] = 0;
    char v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    void *v28 = &unk_26E706D48;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    unsigned __int8 v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        __int16 v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        void *v37 = &unk_26E706C40;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        __int16 v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        unint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        int v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        int v68 = 0;
        unint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E706C98;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        int v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        int v65 = 0;
        unint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        void *v49 = &unk_26E706CF0;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        int v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        BOOL v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E706D48;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        BOOL v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706C40;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706C40;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706C98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706C98;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706CF0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706CF0;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706D48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706D48;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::allocInfo_Static3DTextComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E270, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E270))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E2F8, "Static3DTextComponent");
    __cxa_guard_release(&qword_26AF8E270);
  }
  return &unk_26AF8E2F8;
}

void re::ecs2::initInfo_Static3DTextComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v63[0] = 0x685065A25BB6F622;
  v63[1] = "Static3DTextComponent";
  re::StringID::destroyString((re::StringID *)v63);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v64;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_312, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_312);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8E280 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mExtrusionDepth";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8E288 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_float((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mFontSize";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8E290 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_uint8_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mSegmentDensity";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2400000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF8E298 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_uint8_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mGenerateMetaDataForRayTracing";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF8E2A0 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_uint8_t((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mInstanceGlyphs";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2900000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF8E2A8 = v27;
      unint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_uint8_t((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mAlignment";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2500000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF8E2B0 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      unint64_t v34 = re::introspect_uint8_t((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mLineBreakMode";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2600000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF8E2B8 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      uint64_t v38 = re::introspect_uint8_t((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mVerticalAlignment";
      *(void *)(v39 + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2700000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF8E2C0 = v39;
      uint64_t v40 = re::introspectionAllocator((re *)v39);
      uint64_t v41 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mTextFrameSize";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x5800000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_26AF8E2C8 = v42;
      unint64_t v43 = re::introspectionAllocator((re *)v42);
      uint64_t v45 = re::IntrospectionInfo<re::DynamicString>::get(1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mFontName";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x600000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF8E2D0 = v46;
      uint64_t v47 = re::introspectionAllocator((re *)v46);
      unint64_t v49 = re::IntrospectionInfo<re::DynamicString>::get(1, v48);
      uint64_t v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 72, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *(void *)(v50 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mTextString";
      *(void *)(v50 + 16) = v49;
      *(void *)(v50 + 24) = 0;
      *(void *)(v50 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x800000000BLL;
      *(_DWORD *)(v50 + 40) = 0;
      *(void *)(v50 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_26AF8E2D8 = v50;
      uint64_t v51 = re::introspectionAllocator((re *)v50);
      uint64_t v52 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v53 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 72, 8);
      *(_DWORD *)uint64_t v53 = 1;
      *(void *)(v53 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mTextFrameOrigin";
      *(void *)(v53 + 16) = v52;
      *(void *)(v53 + 24) = 0;
      *(void *)(v53 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x500000000CLL;
      *(_DWORD *)(v53 + 40) = 0;
      *(void *)(v53 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v53 + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_26AF8E2E0 = v53;
      long long v54 = re::introspectionAllocator((re *)v53);
      uint64_t v56 = re::introspect_uint8_t((re *)1, v55);
      uint64_t v57 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v54 + 32))(v54, 72, 8);
      *(_DWORD *)uint64_t v57 = 1;
      *(void *)(v57 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mGenerateSides";
      *(void *)(v57 + 16) = v56;
      *(void *)(v57 + 24) = 0;
      *(void *)(v57 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2A0000000DLL;
      *(_DWORD *)(v57 + 40) = 0;
      *(void *)(v57 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v57 + 56) = 0;
      *(_DWORD *)(v57 + 64) = 0;
      qword_26AF8E2E8 = v57;
      uint64_t v58 = re::introspectionAllocator((re *)v57);
      long long v60 = re::introspect_uint8_t((re *)1, v59);
      uint64_t v61 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v58 + 32))(v58, 72, 8);
      *(_DWORD *)uint64_t v61 = 1;
      *(void *)(v61 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "mGenerateBack";
      *(void *)(v61 + 16) = v60;
      *(void *)(v61 + 24) = 0;
      *(void *)(v61 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2B0000000ELL;
      *(_DWORD *)(v61 + 40) = 0;
      *(void *)(v61 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v61 + 56) = 0;
      *(_DWORD *)(v61 + 64) = 0;
      qword_26AF8E2F0 = v61;
      __cxa_guard_release(&_MergedGlobals_312);
    }
  }
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 15;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &qword_26AF8E280;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::Static3DTextComponent>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::Static3DTextComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::Static3DTextComponent>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::Static3DTextComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v62 = v64;
}

uint64_t re::internal::defaultConstruct<re::ecs2::Static3DTextComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::Static3DTextComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::Static3DTextComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 31));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 27));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 20));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 16));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 12));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::Static3DTextComponent>(void *a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 31));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 27));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 20));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 12));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_Static3DTextComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Static3DTextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Static3DTextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Static3DTextComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Static3DTextComponent>, this);
}

void *re::ecs2::allocInfo_Static3DTextSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E278, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E278))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E370, "Static3DTextSystem");
    __cxa_guard_release(&qword_26AF8E278);
  }
  return &unk_26AF8E370;
}

void re::ecs2::initInfo_Static3DTextSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xB93D0EB0A66DD936;
  v5[1] = "Static3DTextSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &re::ecs2::initInfo_Static3DTextSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::Static3DTextSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::Static3DTextSystem>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::Static3DTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = re::internal::defaultRelease<re::ecs2::Static3DTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::Static3DTextSystem>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::Static3DTextSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::Static3DTextSystem *re::internal::defaultConstruct<re::ecs2::Static3DTextSystem>(int a1, int a2, re::ecs2::Static3DTextSystem *this)
{
  return re::ecs2::Static3DTextSystem::Static3DTextSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::Static3DTextSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::FixedArray<CoreIKTransform>::deinit(a3 + 45);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::Static3DTextSystem>(void *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1 + 45);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_Static3DTextSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Static3DTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Static3DTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Static3DTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Static3DTextSystem>, this);
}

BOOL re::ecs2::Static3DTextComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v38, a5, 0);
  unint64_t v63 = a4;
  v64[0] = v38[0];
  if (v38[0].i64[0] != a5 || v38[0].u16[4] != 0xFFFFLL || (v38[0].i32[2] & 0xFFFF0000) != 4294901760)
  {
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      uint64_t v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v64);
      uint64_t v14 = *(void *)v13;
      if (!*(void *)(*(void *)v13 + 168)
        || *(unsigned char *)(v14 + 44)
        || *(float *)(v14 + 28) != *(float *)(v14 + 184)
        || *(float *)(v14 + 32) != *(float *)(v14 + 188)
        || *(unsigned __int8 *)(v14 + 36) != *(unsigned __int8 *)(v14 + 192)
        || *(unsigned __int8 *)(v14 + 37) != *(unsigned __int8 *)(v14 + 193)
        || *(unsigned __int8 *)(v14 + 38) != *(unsigned __int8 *)(v14 + 194)
        || *(unsigned __int8 *)(v14 + 39) != *(unsigned __int8 *)(v14 + 195)
        || *(unsigned __int8 *)(v14 + 40) != *(unsigned __int8 *)(v14 + 196)
        || *(unsigned __int8 *)(v14 + 41) != *(unsigned __int8 *)(v14 + 197)
        || *(unsigned __int8 *)(v14 + 42) != *(unsigned __int8 *)(v14 + 198)
        || *(unsigned __int8 *)(v14 + 43) != *(unsigned __int8 *)(v14 + 199)
        || (uint32x2_t v15 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)(v14 + 80), *(float32x2_t *)(v14 + 200))),
            (vpmax_u32(v15, v15).u32[0] & 0x80000000) != 0)
        || (uint32x2_t v16 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)(v14 + 88), *(float32x2_t *)(v14 + 208))),
            (vpmax_u32(v16, v16).u32[0] & 0x80000000) != 0)
        || re::DynamicString::operator!=(v14 + 96, v14 + 216)
        || re::DynamicString::operator!=(v14 + 128, v14 + 248))
      {
        unint64_t v17 = re::Hash<re::DynamicString>::operator()((uint64_t)v38, v14 + 128);
        unint64_t v18 = re::Hash<re::DynamicString>::operator()((uint64_t)v38, v14 + 96);
        uint64_t v19 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"Static3DTextComponent/%f/%f/%f/%f/%f/%f/%i/%i/%i/%i/%i/%i/%i/%i/%lu/%lu.compiledmesh", (re::DynamicString *)&v60, *(float *)(v14 + 28), *(float *)(v14 + 32), *(float *)(v14 + 80), *(float *)(v14 + 84), *(float *)(v14 + 88), *(float *)(v14 + 92), *(unsigned __int8 *)(v14 + 36), *(unsigned __int8 *)(v14 + 37), *(unsigned __int8 *)(v14 + 38), *(unsigned __int8 *)(v14 + 39), *(unsigned __int8 *)(v14 + 42), *(unsigned __int8 *)(v14 + 43), *(unsigned __int8 *)(v14 + 40), *(unsigned __int8 *)(v14 + 41), v17, v18);
        *((void *)&v49 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
        long long v50 = 0uLL;
        uint64_t v20 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v49, 0);
        *((void *)&v51 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
        long long v52 = 0uLL;
        re::DynamicString::setCapacity(&v51, 0);
        int32x2_t v53 = _D8;
        char v54 = 5;
        long long v55 = 0uLL;
        char v56 = 0;
        __int16 v57 = 4;
        int v58 = 16843009;
        BOOL v59 = 0;
        re::DynamicString::operator=((re::DynamicString *)&v51, (re::DynamicString *)(v14 + 96));
        re::DynamicString::operator=((re::DynamicString *)&v49, (re::DynamicString *)(v14 + 128));
        int32x2_t v53 = vrev64_s32(*(int32x2_t *)(v14 + 28));
        char v54 = *(unsigned char *)(v14 + 36);
        long long v55 = *(_OWORD *)(v14 + 80);
        char v56 = *(unsigned char *)(v14 + 38);
        LOBYTE(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(unsigned char *)(v14 + 37);
        HIBYTE(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(unsigned char *)(v14 + 39);
        LOBYTE(v5re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(v14 + 42) != 0;
        BYTE1(v5re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(v14 + 43) != 0;
        BOOL v59 = *(unsigned char *)(v14 + 41) != 0;
        re::MeshPrimitiveProvider::makeDescriptor((re::MeshPrimitiveProvider *)&v49, 0, *(unsigned char *)(v14 + 40) != 0, (uint64_t)v38);
        (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 8) + 40))(&v36);
        long long v21 = *(_OWORD *)(v14 + 160);
        *(_OWORD *)(v14 + 160) = v36;
        long long v36 = v21;
        uint64_t v22 = *(void *)(v14 + 176);
        *(void *)(v14 + 176) = v37;
        uint64_t v37 = v22;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
        *(void *)(v14 + 184) = *(void *)(v14 + 28);
        int v23 = *(_DWORD *)(v14 + 40);
        *(_DWORD *)(v14 + 19re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = *(_DWORD *)(v14 + 36);
        *(_DWORD *)(v14 + 196) = v23;
        *(_OWORD *)(v14 + 200) = *(_OWORD *)(v14 + 80);
        re::DynamicString::operator=((re::DynamicString *)(v14 + 216), (re::DynamicString *)(v14 + 96));
        re::DynamicString::operator=((re::DynamicString *)(v14 + 248), (re::DynamicString *)(v14 + 128));
        *(unsigned char *)(v14 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = *(unsigned char *)(v14 + 41);
        *(unsigned char *)(v14 + re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0;
        if ((void)v47)
        {
          if (BYTE8(v47)) {
            (*(void (**)(void))(*(void *)v47 + 40))();
          }
          long long v47 = 0u;
          long long v48 = 0u;
        }
        if (v42)
        {
          if (v46) {
            (*(void (**)(void))(*(void *)v42 + 40))();
          }
          uint64_t v46 = 0;
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          uint64_t v42 = 0;
          ++v45;
        }
        if ((void)v39)
        {
          if (v41) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          uint64_t v41 = 0;
          *(void *)&long long v40 = 0;
          long long v39 = 0uLL;
          ++DWORD2(v40);
        }
        if (v38[0].i64[0] && (v38[0].i8[8] & 1) != 0) {
          (*(void (**)(void))(*(void *)v38[0].i64[0] + 40))();
        }
        if ((void)v51)
        {
          if (BYTE8(v51)) {
            (*(void (**)(void))(*(void *)v51 + 40))();
          }
          long long v51 = 0u;
          long long v52 = 0u;
        }
        if (void)v49 && (BYTE8(v49)) {
          (*(void (**)(void))(*(void *)v49 + 40))();
        }
        if (v60 && (v61 & 1) != 0) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 40))(v60, v62);
        }
      }
      uint64_t v24 = *(void *)(v14 + 16);
      uint64_t v25 = *(void **)(v24 + 176);
      if (!v25) {
        uint64_t v25 = (void *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v24 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      uint64_t v26 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v14 + 160));
      if (v26)
      {
        if (v25[5] != *(void *)(v14 + 168))
        {
          uint64_t v27 = (float32x4_t *)v26;
          re::AssetHandle::operator=((uint64_t)(v25 + 4), (uint64_t *)(v14 + 160));
          re::ecs2::Component::markDirty(v25);
          v38[0] = (float32x4_t)xmmword_23435FD50;
          v38[1] = (float32x4_t)xmmword_23435FD60;
          long long v39 = xmmword_23435FD80;
          long long v40 = xmmword_23435FBB0;
          re::MeshAsset::aabbFromMesh(v27, v38, (uint64_t)&v49);
          long long v28 = v50;
          *(_OWORD *)(v14 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v49;
          *(_OWORD *)(v14 + 64) = v28;
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v14 + 160));
        uint64_t v29 = *(void *)(v14 + 168);
        if (!v29) {
          goto LABEL_59;
        }
        unsigned int v30 = atomic_load((unsigned int *)(v29 + 704));
        if (v30 != 3) {
          goto LABEL_59;
        }
      }
      unint64_t v31 = v63;
      unint64_t v32 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v64);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v31, v32, *(void *)(a3 + 32));
LABEL_59:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v64);
    }
    while (*(void *)&v64[0] != a5 || WORD4(v64[0]) != 0xFFFF || WORD5(v64[0]) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

uint64_t re::ecs2::Static3DTextSystem::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    int32x4_t v11 = vdupq_n_s32(0x7F800000u);
    do
    {
      uint64_t v6 = *a3++;
      long long v7 = *(_OWORD *)(v6 + 160);
      uint64_t v8 = *(void *)(v6 + 176);
      *(void *)(v6 + 16re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v6 + 176) = 0;
      *(void *)(v6 + 160) = 0;
      long long v12 = v7;
      uint64_t v13 = v8;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
      *(void *)&long long v9 = 0x7F0000007FLL;
      *((void *)&v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v6 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v11;
      *(_OWORD *)(v6 + 64) = v9;
      *(unsigned char *)(v6 + re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::Static3DTextSystem::willAddSystemToECSService(re::ecs2::Static3DTextSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AssetService>(v2);
  *((void *)this + re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = result;
  return result;
}

uint64_t re::ecs2::Static3DTextSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 35re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  return this;
}

void re::ecs2::Static3DTextSystem::willAddSceneToECSService(re::ecs2::Static3DTextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(void *)&long long v50 = this;
  *((void *)&v50 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::ecs2::Static3DTextSystem::deactivateComponent;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::createSubscription<re::ecs2::Static3DTextSystem>(re::ecs2::Static3DTextSystem *,REEventHandlerResult (re::ecs2::Static3DTextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Slice<re::ecs2::Static3DTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::Subscription const&,re::Slice<re::ecs2::Static3DTextComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)&v50);
  long long v48 = a2;
  unint64_t v5 = *((void *)this + 29);
  int v6 = *((_DWORD *)this + 60);
  if (v5 >= 0xB)
  {
    if (v6) {
      long long v7 = (void *)((char *)this + 248);
    }
    else {
      long long v7 = (void *)*((void *)this + 32);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    uint64_t v8 = (uint64_t *)((char *)this + 248);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)*((void *)this + 32);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v50 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 224, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, v50);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::init(v13, (uint64_t)this + 104, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::Static3DTextSystem *)((char *)this + 160), &v48, (uint64_t *)&v50);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 224, v50);
    uint64_t v14 = (char *)this + 272;
    unint64_t v15 = v50;
    goto LABEL_49;
  }
LABEL_17:
  long long v57 = 0u;
  long long v50 = 0u;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = -1;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v54 = 0;
  uint64_t v55 = 1;
  long long v56 = 0uLL;
  unint64_t v16 = *((void *)this + 18);
  *(void *)&long long v57 = 0;
  unint64_t v17 = *((void *)this + 14);
  DWORD2(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 13, (v16 + 4) >> 2);
    unint64_t v17 = *((void *)this + 14);
  }
  if (v17 <= v16 >> 2)
  {
    uint64_t v49 = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    BOOL v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v16 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 120)) {
    unint64_t v18 = (char *)this + 128;
  }
  else {
    unint64_t v18 = (char *)*((void *)this + 17);
  }
  uint64_t v19 = *(void *)&v18[8 * (v16 >> 2)];
  ++*((void *)this + 18);
  ++*((_DWORD *)this + 38);
  uint64_t v20 = v19 + 112 * (v16 & 3);
  long long v21 = v50;
  long long v22 = v51;
  long long v23 = v52;
  *(void *)(v20 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v53;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v23;
  *(_OWORD *)uint64_t v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v53 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v50);
  uint64_t v25 = *((void *)this + 18);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v48, v49);
    _os_crash();
    __break(1u);
  }
  uint64_t v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::init(v26, (uint64_t)this + 104, (uint64_t)v48);
  *(void *)&v66[0] = *((void *)this + 18) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::Static3DTextSystem *)((char *)this + 160), &v48, (uint64_t *)v66);
  unint64_t v27 = *((void *)this + 18);
  unint64_t v28 = *((void *)this + 33);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *((void *)this + 3re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v27;
  *(void *)&long long v50 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::Static3DTextSystem *)((char *)this + 224), v29, &v50);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *((void *)this + 33) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*((unsigned char *)this + 240)) {
      unint64_t v32 = (char *)this + 248;
    }
    else {
      unint64_t v32 = (char *)*((void *)this + 32);
    }
    *(void *)&v32[8 * *((void *)this + 29) - 8] &= v30;
  }
  unint64_t v33 = *((void *)this + 18);
  unint64_t v34 = *((void *)this + 39);
  if ((v33 & 0x3F) != 0) {
    unint64_t v35 = (v33 >> 6) + 1;
  }
  else {
    unint64_t v35 = v33 >> 6;
  }
  *((void *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = v33;
  *(void *)&long long v50 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::Static3DTextSystem *)((char *)this + 272), v35, &v50);
  if (v33 && v34 > v33)
  {
    uint64_t v36 = 63;
    uint64_t v37 = *((void *)this + 39) & 0x3FLL;
    if (v37 && v37 != 63) {
      uint64_t v36 = ~(-1 << v37);
    }
    if (*((unsigned char *)this + 288)) {
      uint64_t v38 = (char *)this + 296;
    }
    else {
      uint64_t v38 = (char *)*((void *)this + 38);
    }
    *(void *)&v38[8 * *((void *)this + 35) - 8] &= v36;
  }
  unint64_t v15 = *(void *)&v66[0];
  uint64_t v14 = (char *)this + 272;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v14, v15);
  if (!*((unsigned char *)this + 336)) {
    return;
  }
  unint64_t v39 = *((void *)this + 35);
  int v40 = *((_DWORD *)this + 72);
  if (v39 >= 0xB)
  {
    if (v40) {
      uint64_t v41 = (void *)((char *)this + 296);
    }
    else {
      uint64_t v41 = (void *)*((void *)this + 38);
    }
    uint64_t v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43) {
        return;
      }
    }
LABEL_65:
    long long v47 = (re::ecs2::System *)*((void *)this + 40);
    if (!*((unsigned char *)v47 + 86)) {
      re::ecs2::System::queueToRun(v47, 0.0);
    }
    return;
  }
  if (v40)
  {
    uint64_t v42 = (uint64_t *)((char *)this + 296);
    if (!v39) {
      return;
    }
  }
  else
  {
    uint64_t v42 = (uint64_t *)*((void *)this + 38);
    if (!v39) {
      return;
    }
  }
  uint64_t v44 = 0;
  uint64_t v45 = 8 * v39;
  do
  {
    uint64_t v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::Static3DTextSystem::willRemoveSceneFromECSService(re::ecs2::Static3DTextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(void *)&long long v18 = this;
  *((void *)&v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::ecs2::Static3DTextSystem::deactivateComponent;
  uint64_t v19 = 0;
  uint64_t v20 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::createSubscription<re::ecs2::Static3DTextSystem>(re::ecs2::Static3DTextSystem *,REEventHandlerResult (re::ecs2::Static3DTextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Slice<re::ecs2::Static3DTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::Subscription const&,re::Slice<re::ecs2::Static3DTextComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v18);
  *(void *)&long long v18 = a2;
  unint64_t v5 = (uint64_t *)((char *)this + 160);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 20, &v18);
  if (result != -1)
  {
    uint64_t v7 = *((void *)this + 21) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 224, *(void *)(v7 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 272, *(void *)(v7 + 8));
    uint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, *(void *)(v7 + 8));
    if (*v8)
    {
      uint64_t v9 = v8;
      *uint64_t v8 = 0;
      uint64_t v10 = v8 + 1;
      uint64_t v11 = *(void *)(v8[1] + 288);
      if (v11)
      {
        uint64_t v12 = v8[12];
        if (v12)
        {
          for (unint64_t i = 0; i != v12; ++i)
          {
            uint64_t v14 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v9 + 7), i);
            re::EventBus::unsubscribe(v11, *(void *)v14, *(void *)(v14 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v9 + 7));
      uint64_t v15 = 0;
      unint64_t v16 = v9 + 3;
      do
      {
        unint64_t v17 = (re::ecs2::ComponentBucketsBase *)v9[2];
        if (*(void *)v17) {
          re::ecs2::ComponentBucketsBase::removeBucket(v17, v16[v15]);
        }
        v16[v15++] = -1;
      }
      while (v15 != 4);
      *uint64_t v10 = 0;
      v10[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v5, &v18);
  }
  return result;
}

uint64_t re::ecs2::Static3DTextSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v27[0] = a3;
  v27[1] = a4;
  if (a2)
  {
    uint64_t v5 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v26);
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25, 3023, v5);
    uint64_t v28 = a2;
    unint64_t v6 = *(void *)(*(void *)(v5 + 168)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v5 + 160), &v28)+ 8);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v5 + 272, v6);
    uint64_t v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 104, v6);
    uint64_t v8 = *(void *)(*v7 + 224);
    unint64_t v9 = v7[3];
    unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
    if (*(_DWORD *)(v10 + 40)) {
      int v11 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v8 + 24))(v8, v27, v7, v9, v10, 0);
    }
    else {
      int v11 = 0;
    }
    unint64_t v12 = v7[5];
    unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
    if (*(_DWORD *)(v13 + 40)) {
      v11 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v27, v7, v12, v13, 0);
    }
    unint64_t v14 = v7[6];
    unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
    if (*(_DWORD *)(v15 + 40))
    {
      if (((v11 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v8 + 40))(v8, v27, v7, v14, v15, 0)) & 1) == 0)goto LABEL_10; {
    }
      }
    else if (!v11)
    {
LABEL_10:
      if (*(unsigned char *)(v5 + 336))
      {
        unint64_t v16 = *(void *)(v5 + 280);
        int v17 = *(_DWORD *)(v5 + 288);
        if (v16 >= 0xB)
        {
          if (v17) {
            long long v18 = (void *)(v5 + 296);
          }
          else {
            long long v18 = *(void **)(v5 + 304);
          }
          uint64_t v20 = 8 * v16;
          while (!*v18)
          {
            ++v18;
            v20 -= 8;
            if (!v20) {
              goto LABEL_30;
            }
          }
LABEL_28:
          uint64_t v24 = *(re::ecs2::System **)(v5 + 320);
          if (!*((unsigned char *)v24 + 86)) {
            re::ecs2::System::queueToRun(v24, 0.0);
          }
          goto LABEL_30;
        }
        if ((v17 & 1) == 0)
        {
          uint64_t v19 = *(uint64_t **)(v5 + 304);
          if (!v16) {
            goto LABEL_30;
          }
LABEL_25:
          uint64_t v21 = 0;
          uint64_t v22 = 8 * v16;
          do
          {
            uint64_t v23 = *v19++;
            v21 |= v23;
            v22 -= 8;
          }
          while (v22);
          if (!v21) {
            goto LABEL_30;
          }
          goto LABEL_28;
        }
        uint64_t v19 = (uint64_t *)(v5 + 296);
        if (v16) {
          goto LABEL_25;
        }
      }
LABEL_30:
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v26);
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v5 + 272, v6);
    goto LABEL_10;
  }
  return result;
}

BOOL re::internal::FontNameAndGlyphIndexCacheKey::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8) && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16))
  {
    CFStringRef v2 = *(const __CFString **)a1;
    CFStringRef v3 = *(const __CFString **)a2;
    if (v2 == v3 || v2 && v3 && CFEqual(v2, v3)) {
      return 1;
    }
  }
  return result;
}

uint64_t re::ecs2::Static3DTextComponentStateImpl::dependsOnComponents(re::ecs2::Static3DTextComponentStateImpl *this)
{
  return *((void *)this + 4);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::Static3DTextComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::Static3DTextComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::Static3DTextComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::Static3DTextSystem::~Static3DTextSystem(re::ecs2::Static3DTextSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 45);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::Static3DTextSystem::typeInfo(re::ecs2::Static3DTextSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Static3DTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Static3DTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Static3DTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Static3DTextSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::Static3DTextComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 27re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 19re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 20re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 1re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0u;
  *(_OWORD *)(a1 + 11re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)(a1 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 12re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  CFStringRef v2 = (void *)(a1 + 128);
  *(_OWORD *)(a1 + 96) = 0u;
  CFStringRef v3 = (void *)(a1 + 96);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E6E07A0;
  *(void *)(v4 + 2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0x3F8000003E800000;
  *(_DWORD *)(v4 + 36) = 1029;
  *(unsigned char *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 16843009;
  *(void *)&long long v5 = 0x7F0000007FLL;
  *((void *)&v5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v4 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)CFStringRef v3 = 0u;
  *(_OWORD *)(v4 + 11re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(_OWORD *)(a1 + 1re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = 0u;
  *(_OWORD *)CFStringRef v2 = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 16re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0x3F8000003E800000;
  *(void *)(a1 + 19re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x101010000000405;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 2re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  unint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a1 + 216), 0);
  *(_OWORD *)(a1 + 24re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  re::DynamicString::setCapacity((void *)(a1 + 248), 0);
  return a1;
}

id re::internal::defaultRetain<re::ecs2::Static3DTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::Static3DTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::createSubscription<re::ecs2::Static3DTextSystem>(re::ecs2::Static3DTextSystem *,REEventHandlerResult (re::ecs2::Static3DTextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Slice<re::ecs2::Static3DTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::Subscription const&,re::Slice<re::ecs2::Static3DTextComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E706E90;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    int v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E706EE8;
    v16[1] = a1;
    uint64_t v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    _OWORD v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    void *v22 = &unk_26E706F40;
    v22[1] = a1;
    uint64_t v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    _OWORD v22[3] = 0;
    char v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    void *v28 = &unk_26E706F98;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    unsigned __int8 v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    unint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        __int16 v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        void *v37 = &unk_26E706E90;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        __int16 v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        int v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E706EE8;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        int v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        long long v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        void *v49 = &unk_26E706F40;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E706F98;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        BOOL v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  CFStringRef v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    CFStringRef v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706E90;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706E90;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706EE8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706EE8;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706F40;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706F40;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E706F98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E706F98;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::allocInfo_AudioSessionComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_313, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_313))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E418, "AudioSessionComponent");
    __cxa_guard_release(&_MergedGlobals_313);
  }
  return &unk_26AF8E418;
}

void re::ecs2::initInfo_AudioSessionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x95BFFC8E07900DBALL;
  v17[1] = "AudioSessionComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E3F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8E3F0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8E400 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicString>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "audioSessionUUIDToControl";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8E408 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "audioSessionIDToJoin";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x4000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8E410 = v15;
      __cxa_guard_release(&qword_26AF8E3F0);
    }
  }
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 3;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &qword_26AF8E400;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioSessionComponent>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioSessionComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::AudioSessionComponent>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioSessionComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

re::ecs2::AudioSessionComponent *re::internal::defaultConstruct<re::ecs2::AudioSessionComponent>(int a1, int a2, re::ecs2::AudioSessionComponent *this)
{
  return re::ecs2::AudioSessionComponent::AudioSessionComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioSessionComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioSessionComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioSessionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSessionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioSessionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioSessionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioSessionComponent>, this);
}

void *re::ecs2::allocInfo_AudioSessionSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E3F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E3F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E490, "AudioSessionSystem");
    __cxa_guard_release(&qword_26AF8E3F8);
  }
  return &unk_26AF8E490;
}

void re::ecs2::initInfo_AudioSessionSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x42CCCA7DAA7DA89ELL;
  v5[1] = "AudioSessionSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x1A800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &re::ecs2::initInfo_AudioSessionSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioSessionSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioSessionSystem>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::AudioSessionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = re::internal::defaultRelease<re::ecs2::AudioSessionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::AudioSessionSystem>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioSessionSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::AudioSessionSystem *re::internal::defaultConstruct<re::ecs2::AudioSessionSystem>(int a1, int a2, re::ecs2::AudioSessionSystem *this)
{
  return re::ecs2::AudioSessionSystem::AudioSessionSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AudioSessionSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)(a3 + 184));
  re::DynamicArray<unsigned long>::deinit(a3 + 120);

  *(void *)a3 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::AudioSessionSystem>(uint64_t a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)(a1 + 184));
  re::DynamicArray<unsigned long>::deinit(a1 + 120);

  *(void *)a1 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_AudioSessionSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSessionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioSessionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioSessionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioSessionSystem>, this);
}

re::ecs2::AudioSessionComponent *re::ecs2::AudioSessionComponent::AudioSessionComponent(re::ecs2::AudioSessionComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E706FF0;
  *(_OWORD *)(v2 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v2 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0u;
  uint64_t v3 = (void *)(v2 + 32);
  long long v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *((_DWORD *)this + 16) = 0;
  *((unsigned char *)this + 6re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 5) = 0u;
  re::DynamicString::setCapacity((void *)this + 10, 0);
  *((_OWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 15) = 0u;
  *((_OWORD *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0u;
  *((_OWORD *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0u;
  *((_OWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0u;
  uint64_t v5 = [[REAudioSessionComponentWrapper alloc] initWithComponent:this];
  long long v6 = (void *)*((void *)this + 17);
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = v5;

  return this;
}

void re::ecs2::AudioSessionComponent::~AudioSessionComponent(id *this)
{
  *this = &unk_26E706FF0;
  [this[17] setComponent:0];
  re::ecs2::AudioSessionComponent::clearControllerObjects((re::ecs2::AudioSessionComponent *)this);

  re::DynamicString::deinit((re::DynamicString *)(this + 10));
  objc_destroyWeak(this + 9);
  re::DynamicString::deinit((re::DynamicString *)(this + 4));
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  re::ecs2::AudioSessionComponent::~AudioSessionComponent(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::AudioSessionComponent::clearControllerObjects(re::ecs2::AudioSessionComponent *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v3 = re::ecs2::AudioSessionComponent::audioService(*((re::ecs2::AudioSessionComponent **)this + 2));
    if (*((void *)this + 16)) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 368))(v3);
      *((void *)this + 16) = 0;
    }
    uint64_t v5 = (re::ecs2::AudioPlayerComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v5)
    {
      re::ecs2::AudioSessionComponent::clearControllerObjectsOnPlayerComponent(this, v5);
    }
  }
}

uint64_t re::ecs2::AudioSessionComponent::currentlyAppliedInputModeOverride(re::ecs2::AudioSessionComponent *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return *((unsigned __int8 *)this + 68);
  }
  uint64_t v3 = (re::ecs2::AudioPlayerComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t result = *((unsigned __int8 *)this + 68);
  if (v3)
  {
    uint64_t v5 = *((void *)this + 15);
    if (v5)
    {
      return re::ecs2::AudioPlayerComponent::getInputModeOverride(v3, v5);
    }
  }
  return result;
}

uint64_t re::ecs2::AudioSessionComponent::audioService(re::ecs2::AudioSessionComponent *this)
{
  if (!this) {
    return 0;
  }
  do
  {
    uint64_t v1 = this;
    this = (re::ecs2::AudioSessionComponent *)*((void *)this + 3);
  }
  while (this);
  uint64_t v2 = *((void *)v1 + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  uint64_t v5 = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v4);
  if (!v5) {
    return 0;
  }
  long long v6 = *(uint64_t (**)(void))(*(void *)v5 + 16);
  return v6();
}

void re::ecs2::AudioSessionComponent::clearControllerObjectsOnPlayerComponent(re::ecs2::AudioSessionComponent *this, re::ecs2::AudioPlayerComponent *a2)
{
  unint64_t v4 = *((void *)this + 14);
  if (v4)
  {
    re::ecs2::AudioPlayerComponent::destroy(a2, v4);
    *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  }
  unint64_t v5 = *((void *)this + 15);
  if (v5)
  {
    re::ecs2::AudioPlayerComponent::destroy(a2, v5);
    *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 15) = 0;
  }
}

unint64_t re::ecs2::AudioSessionComponent::prepareExternalStreamControllerUsingCurrentState(re::ecs2::AudioSessionComponent *this, re::ecs2::AudioPlayerComponent *a2, NSUUID *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v5 = a3;
  if (v5
    || ((*((unsigned char *)this + 40) & 1) != 0 ? (long long v6 = (char *)*((void *)this + 6)) : (long long v6 = (char *)this + 41),
        [NSString stringWithUTF8String:v6],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        unint64_t v5 = (NSUUID *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v7],
        v7,
        v5))
  {
    double v9 = -24.0;
    if (objc_opt_respondsToSelector())
    {
      [MEMORY[0x263F14930] recommendedTargetLKFSForVoiceStreams];
      double v9 = v10;
    }
    if (objc_opt_respondsToSelector())
    {
      [MEMORY[0x263F14930] recommendedAbsoluteCalibrationLevelForVoiceStreamsAtRecommendedTargetLKFS];
      double v12 = v11;
    }
    else
    {
      double v12 = 68.0;
    }
    unint64_t v13 = re::ecs2::AudioPlayerComponent::prepare((uint64_t)a2, v5, 1, 2, v9, v12);
    char v14 = objc_opt_respondsToSelector();
    LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 15) = 0.75;
    if (v14)
    {
      objc_msgSend(MEMORY[0x263F14930], "recommendedRolloffFactorForVoiceStreams", v15);
      *(float *)&double v15 = v15;
    }
    *((_DWORD *)a2 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = LODWORD(v15);
    re::ecs2::AudioPlayerComponent::overrideInputMode(a2, v13, *((unsigned char *)this + 68));
  }
  else
  {
    uint64_t v17 = *re::audioLogObjects(v8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if (*((unsigned char *)this + 40)) {
        long long v18 = (char *)*((void *)this + 6);
      }
      else {
        long long v18 = (char *)this + 41;
      }
      int v19 = 136315138;
      unint64_t v20 = v18;
      _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "cannot prepare external stream controller for audio session with invalid uuid string %s", (uint8_t *)&v19, 0xCu);
    }
    return 0;
  }
  return v13;
}

void re::ecs2::AudioSessionComponent::updateControllerObjectsIfSomethingChanged(re::ecs2::AudioSessionComponent *this, uint64_t a2, re::AudioService *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 2);
  if (!v3 || *((void *)this + 18) == a2 && re::DynamicString::operator==((uint64_t)this + 80, (uint64_t)this + 32)) {
    return;
  }
  uint64_t v7 = *(re::ecs2::NetworkComponent **)(v3 + 200);
  if (v7 && re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v3 + 200))
    || !re::DynamicString::operator!=((uint64_t)this + 80, (uint64_t)this + 32))
  {
    goto LABEL_23;
  }
  unint64_t v8 = (re::ecs2::AudioPlayerComponent *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v8)
  {
    double v9 = v8;
    re::ecs2::AudioSessionComponent::clearControllerObjectsOnPlayerComponent(this, v8);
    unint64_t v10 = *((void *)this + 5);
    unint64_t v11 = v10 >> 1;
    if ((v10 & 1) == 0) {
      unint64_t v11 = v10 >> 1;
    }
    if (v11)
    {
      if (v10) {
        double v12 = (char *)*((void *)this + 6);
      }
      else {
        double v12 = (char *)this + 41;
      }
      char v14 = [NSString stringWithUTF8String:v12];
      double v15 = (NSUUID *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v14];
      if (v15)
      {
        uint64_t v16 = re::ecs2::AudioPlayerComponent::prepare(v9, v14);
        *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = v16;
        re::ecs2::AudioPlayerComponent::setDeferToSystemAcousticTuning((re::ecs2::AudioPlayerComponent **)v9, v16, 1);
        *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 15) = re::ecs2::AudioSessionComponent::prepareExternalStreamControllerUsingCurrentState(this, v9, v15);
      }
      else
      {
        uint64_t v17 = *re::audioLogObjects(0);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v23 = v14;
          _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "failed to create NSUUID with AVAudioSession uuid string %@", buf, 0xCu);
        }
      }
    }
    if (v7) {
      re::ecs2::NetworkComponent::markDirty(v7, v9);
    }
LABEL_23:
    if (a3 && (*(unsigned int (**)(re::AudioService *))(*(void *)a3 + 496))(a3))
    {
      if (*((void *)this + 16))
      {
        (*(void (**)(re::AudioService *))(*(void *)a3 + 368))(a3);
        *((void *)this + 16) = 0;
      }
      unint64_t v18 = *((void *)this + 5);
      if (v18) {
        unint64_t v19 = v18 >> 1;
      }
      else {
        unint64_t v19 = v18 >> 1;
      }
      if (a2 != -1)
      {
        if (v19)
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v20, (re::ecs2::AudioSessionComponent *)((char *)this + 32));
          *((void *)this + 16) = (*(uint64_t (**)(re::AudioService *, uint64_t, uint64_t *))(*(void *)a3 + 360))(a3, a2, &v20);
          if (v20)
          {
            if (v21) {
              (*(void (**)(void))(*(void *)v20 + 40))();
            }
          }
        }
      }
    }
    return;
  }
  unint64_t v13 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "failed to create AudioPlayerComponent", buf, 2u);
  }
}

void re::ecs2::AudioSessionComponent::updateInputModeOverrideOnControllerObjectsIfSomethingChanged(re::ecs2::AudioSessionComponent *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((unsigned __int8 *)this + 68) != *((unsigned __int8 *)this + 160)
    || *((void *)this + 14) != *((void *)this + 21)
    || *((void *)this + 15) != *((void *)this + 22))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      InputModeOverride = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (InputModeOverride)
      {
        unint64_t v4 = InputModeOverride;
        unint64_t v5 = *(re::ecs2::NetworkComponent **)(v2 + 200);
        if (!v5
          || (InputModeOverride = (re *)re::ecs2::NetworkComponent::owningProcessType(v5), !InputModeOverride))
        {
          uint64_t v6 = *((void *)this + 15);
          if (v6)
          {
            InputModeOverride = (re *)re::ecs2::AudioPlayerComponent::getInputModeOverride(v4, v6);
            if (InputModeOverride != *((unsigned __int8 *)this + 68))
            {
              re::ecs2::AudioPlayerComponent::destroy(v4, *((void *)this + 15));
              InputModeOverride = (re *)re::ecs2::AudioSessionComponent::prepareExternalStreamControllerUsingCurrentState(this, v4, 0);
              *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 15) = InputModeOverride;
            }
          }
          uint64_t v7 = *re::audioLogObjects(InputModeOverride);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            int v8 = *((unsigned __int8 *)this + 68);
            if (*((unsigned char *)this + 40)) {
              double v9 = (char *)*((void *)this + 6);
            }
            else {
              double v9 = (char *)this + 41;
            }
            v10[0] = 67109378;
            v10[1] = v8;
            __int16 v11 = 2080;
            double v12 = v9;
            _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "overriding input mode to %u for session %s (NOTE: skipping AUSM override since that is managed elsewhere)", (uint8_t *)v10, 0x12u);
          }
          if (v5) {
            re::ecs2::NetworkComponent::markDirty(v5, v4);
          }
        }
      }
    }
  }
}

void re::ecs2::AudioSessionComponent::joinSession(re::ecs2::AudioSessionComponent *this, AVAudioSession *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  objc_storeWeak((id *)this + 9, v3);
  uint64_t v4 = re::ecs2::AudioSessionComponent::audioService(*((re::ecs2::AudioSessionComponent **)this + 2));
  if (v4)
  {
    int v5 = (*(uint64_t (**)(uint64_t, AVAudioSession *))(*(void *)v4 + 760))(v4, v3);
  }
  else
  {
    uint64_t v6 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134218242;
      int v8 = this;
      __int16 v9 = 2112;
      unint64_t v10 = v3;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "AudioSessionComponent@%p does not have audio service, storing opaque identifer for %@ instead", (uint8_t *)&v7, 0x16u);
    }
    int v5 = [(AVAudioSession *)v3 opaqueSessionID];
  }
  *((_DWORD *)this + 16) = v5;
  re::ecs2::Component::markDirty(this);
}

re::ecs2::AudioSessionComponent *re::ecs2::AudioSessionComponent::NearestAudioSessionUpEntityHierarchy(re::ecs2::AudioSessionComponent *this, re::ecs2::Entity *a2)
{
  if (!this) {
    goto LABEL_10;
  }
  uint64_t v3 = this;
  while (1)
  {
    uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::AudioSessionComponent *)((char *)v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v4) {
      break;
    }
LABEL_6:
    uint64_t v3 = (re::ecs2::AudioSessionComponent *)*((void *)v3 + 3);
    if (!v3)
    {
LABEL_7:
      this = 0;
      goto LABEL_9;
    }
  }
  uint64_t v5 = v4;
  uint64_t v6 = (id *)(v4 + 72);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 72));

  if (!WeakRetained)
  {
    if (*(_DWORD *)(v5 + 64)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  this = (re::ecs2::AudioSessionComponent *)objc_loadWeakRetained(v6);
LABEL_9:
  uint64_t v2 = vars8;
LABEL_10:
  return this;
}

void *re::ecs2::AudioSessionComponent::clearStateFollowingMediaServicesCrash(re::ecs2::AudioSessionComponent *this)
{
  uint64_t v2 = (re::ecs2::AudioSessionComponent *)*((void *)this + 2);
  uint64_t result = (void *)re::ecs2::AudioSessionComponent::audioService(v2);
  if (v2) {
    BOOL v4 = result == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return result;
  }
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = (re::ecs2::NetworkComponent *)*((void *)v2 + 25);
  if (v6 && re::ecs2::NetworkComponent::owningProcessType(v6))
  {
    *((_DWORD *)this + 16) = 0;
LABEL_11:
    return objc_storeWeak((id *)this + 9, 0);
  }
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 544))(v5);
  *((_DWORD *)this + 16) = 0;
  if (v7) {
    goto LABEL_11;
  }
  return re::ecs2::Component::markDirty(this);
}

BOOL re::ecs2::AudioSessionComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a3 + 8);
  if (!v5) {
    return 0;
  }
  unint64_t v10 = *(void *)(*(void *)(v5 + 104) + 272);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11) {
    double v12 = (re::AudioService *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
  }
  else {
    double v12 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  unint64_t v42 = a4;
  uint64_t v43 = v37;
  uint64_t v44 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    uint64_t v16 = v10 >> 1;
    do
    {
      uint64_t v17 = *(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v43);
      re::ecs2::AudioSessionComponentStateImpl::retrieveAVAudioSessionForIPhoneTarget((uint64_t)v40, a1, v17);
      if (v41 != -1) {
        ((void (*)(uint64_t *, char *))off_26E707158[v41])(&v37, v40);
      }
      int v41 = -1;
      if (*(_DWORD *)(v17 + 64)) {
        BOOL v18 = v12 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18) {
        (*(void (**)(re::AudioService *))(*(void *)v12 + 768))(v12);
      }
      uint64_t v19 = *(void *)(v17 + 16);
      if (v19)
      {
        int v20 = *(_DWORD *)(v19 + 288);
        if (v20) {
          uint64_t v21 = v16;
        }
        else {
          uint64_t v21 = -1;
        }
        re::ecs2::AudioSessionComponent::updateControllerObjectsIfSomethingChanged((re::ecs2::AudioSessionComponent *)v17, v21, v12);
        re::ecs2::AudioSessionComponent::updateInputModeOverrideOnControllerObjectsIfSomethingChanged((re::ecs2::AudioSessionComponent *)v17);
        *(void *)(v17 + 1re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = v21;
        re::DynamicString::operator=((re::DynamicString *)(v17 + 80), (re::DynamicString *)(v17 + 32));
        *(unsigned char *)(v17 + 160) = *(unsigned char *)(v17 + 68);
        *(_OWORD *)(v17 + 16re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_OWORD *)(v17 + 112);
        if (v20)
        {
          unint64_t v22 = v42;
          unint64_t v23 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v43);
          uint64_t v24 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v22, v23, *(void *)(a3 + 40));
          uint64_t v25 = *re::audioLogObjects(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v26 = *(re::ecs2::Entity **)(v17 + 16);
            unint64_t v27 = v25;
            re::ecs2::Entity::debugDescription(v26, (re::DynamicString *)&v37);
            uint64_t v28 = (char *)&v38 + 1;
            if (v38) {
              uint64_t v28 = v39;
            }
            *(_DWORD *)long long buf = 134218242;
            uint64_t v46 = v17;
            __int16 v47 = 2080;
            long long v48 = v28;
            uint64_t v29 = v27;
            uint64_t v30 = "AudioSessionComponentStateImpl::processDirtyComponents: setting state to 'prepare' for AudioSessionCom"
                  "ponent %p on entity %s";
LABEL_39:
            _os_log_debug_impl(&dword_233120000, v29, OS_LOG_TYPE_DEBUG, v30, buf, 0x16u);

            if (v37 && (v38 & 1) != 0) {
              (*(void (**)(void))(*(void *)v37 + 40))();
            }
            goto LABEL_32;
          }
          goto LABEL_32;
        }
      }
      else
      {
        re::ecs2::AudioSessionComponent::updateControllerObjectsIfSomethingChanged((re::ecs2::AudioSessionComponent *)v17, -1, v12);
        re::ecs2::AudioSessionComponent::updateInputModeOverrideOnControllerObjectsIfSomethingChanged((re::ecs2::AudioSessionComponent *)v17);
        *(void *)(v17 + 1re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = -1;
        re::DynamicString::operator=((re::DynamicString *)(v17 + 80), (re::DynamicString *)(v17 + 32));
        *(unsigned char *)(v17 + 160) = *(unsigned char *)(v17 + 68);
        *(_OWORD *)(v17 + 16re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_OWORD *)(v17 + 112);
      }
      unint64_t v31 = v42;
      unint64_t v32 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v43);
      uint64_t v33 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v31, v32, *(void *)(a3 + 32));
      unint64_t v34 = *re::audioLogObjects(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = *(re::ecs2::Entity **)(v17 + 16);
        unint64_t v27 = v34;
        re::ecs2::Entity::debugDescription(v35, (re::DynamicString *)&v37);
        uint64_t v36 = (char *)&v38 + 1;
        if (v38) {
          uint64_t v36 = v39;
        }
        *(_DWORD *)long long buf = 134218242;
        uint64_t v46 = v17;
        __int16 v47 = 2080;
        long long v48 = v36;
        uint64_t v29 = v27;
        uint64_t v30 = "AudioSessionComponentStateImpl::processDirtyComponents: setting state to 'inactive' for AudioSessionCompon"
              "ent %p on entity %s";
        goto LABEL_39;
      }
LABEL_32:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v43);
    }
    while (v43 != a5 || (unsigned __int16)v44 != 0xFFFF || WORD1(v44) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

void re::ecs2::AudioSessionComponentStateImpl::retrieveAVAudioSessionForIPhoneTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 2;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5 && (uint64_t v6 = *(void *)(a2 + 16)) != 0)
  {
    do
    {
      uint64_t v7 = v5;
      uint64_t v5 = *(void *)(v5 + 24);
    }
    while (v5);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 16))(v6, *(void *)(v7 + 16));
  }
  else
  {
    uint64_t v8 = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a3 + 72));
  unint64_t v10 = WeakRetained;
  int v11 = *(_DWORD *)(a3 + 64);
  if (!v11)
  {
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_29;
  }
  if (!WeakRetained)
  {
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 1;
    if (!v8) {
      goto LABEL_29;
    }
LABEL_20:
    (*(void (**)(unsigned char *__return_ptr, uint64_t, void))(*(void *)v8 + 752))(buf, v8, *(unsigned int *)(a3 + 64));
    uint64_t v17 = *(unsigned int *)(a1 + 8);
    if (v17 == -1)
    {
      if (*(_DWORD *)&buf[8] == -1)
      {
LABEL_27:
        if (*(_DWORD *)(a1 + 8) == 3) {
          objc_storeWeak((id *)(a3 + 72), *(id *)a1);
        }
        goto LABEL_29;
      }
    }
    else if (*(_DWORD *)&buf[8] == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_26E707158[v17])(&v22, a1);
      *(_DWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = -1;
      goto LABEL_25;
    }
    uint64_t v22 = a1;
    ((void (*)(uint64_t *, uint64_t, unsigned char *))off_26E707198[*(unsigned int *)&buf[8]])(&v22, a1, buf);
LABEL_25:
    if (*(_DWORD *)&buf[8] != -1) {
      ((void (*)(uint64_t *, unsigned char *))off_26E707158[*(unsigned int *)&buf[8]])(&v22, buf);
    }
    goto LABEL_27;
  }
  double v12 = (re *)[WeakRetained opaqueSessionID];
  if (v11 == v12)
  {
    *(void *)long long buf = v10;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:nn180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(a1, (void **)a1, (void **)buf);

    goto LABEL_29;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 8);
  if (v13 != -1)
  {
    if (v13 == 1) {
      goto LABEL_17;
    }
    double v12 = (re *)((uint64_t (*)(unsigned char *, uint64_t))off_26E707158[v13])(buf, a1);
  }
  *(_DWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 1;
LABEL_17:
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 + 296);
  uint64_t v16 = *re::audioLogObjects(v12);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    BOOL v18 = v16;
    uint64_t v19 = *(void *)(v14 + 280);
    int v20 = *(_DWORD *)(a3 + 64);
    int v21 = [v10 opaqueSessionID];
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = v19;
    __int16 v24 = 2048;
    uint64_t v25 = v15;
    __int16 v26 = 1024;
    int v27 = v20;
    __int16 v28 = 1024;
    int v29 = v21;
    _os_log_debug_impl(&dword_233120000, v18, OS_LOG_TYPE_DEBUG, "Need to update AVAudioSession for entity(%s, %llu). new audioSessionID(%u) old audioSessionID(%u)", buf, 0x22u);
  }
  objc_storeWeak((id *)(a3 + 72), 0);
  if (v8) {
    goto LABEL_20;
  }
LABEL_29:
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    unint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

double re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::AudioSessionComponentStateImpl *a1, double result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a4;
  uint64_t v6 = *(void *)(a4 + 8);
  if (v6)
  {
    unint64_t v10 = *(void *)(*(void *)(v6 + 104) + 272);
    uint64_t v11 = *((void *)a1 + 2);
    uint64_t v12 = v11 ? (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11) : 0;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v28, a6, 0);
    uint64_t v24 = a5;
    uint64_t v25 = v28;
    __int16 v26 = v29;
    BOOL v13 = v28 == (uint64_t *)a6 && (unsigned __int16)v29 == 0xFFFFLL;
    if (!v13 || (v29 & 0xFFFF0000) != 4294901760)
    {
      while (1)
      {
        unint64_t v23 = 0;
        uint64_t v15 = *(re::ecs2::AudioSessionComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25);
        unint64_t v23 = v15;
        if (*((_DWORD *)v15 + 16)) {
          BOOL v16 = v12 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (!v16)
        {
          (*(void (**)(uint64_t))(*(void *)v12 + 768))(v12);
          uint64_t v15 = v23;
        }
        re::ecs2::AudioSessionComponentStateImpl::retrieveAVAudioSessionForIPhoneTarget((uint64_t)&v21, (uint64_t)a1, (uint64_t)v15);
        double v17 = re::ecs2::AudioSessionComponentStateImpl::processUpdatingRootTransform(a1, (float32x4_t *)v23, v10 >> 1);
        __int16 v28 = &v27;
        int v29 = &v24;
        uint64_t v30 = &v23;
        unint64_t v31 = &v23;
        unint64_t v32 = &v27;
        uint64_t v33 = &v24;
        unint64_t v34 = &v23;
        uint64_t v35 = &v27;
        uint64_t v36 = &v24;
        uint64_t v37 = &v23;
        if (v22 == -1) {
          break;
        }
        uint64_t v38 = &v28;
        ((void (*)(uint64_t ***, uint64_t *, double))off_26E707178[v22])(&v38, &v21, v17);
        if (v22 != -1) {
          ((void (*)(uint64_t **, uint64_t *))off_26E707158[v22])(&v28, &v21);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
        if (v25 == (uint64_t *)a6 && (unsigned __int16)v26 == 0xFFFF && WORD1(v26) == 0xFFFF) {
          return result;
        }
      }
      BOOL v18 = (re::ecs2::AudioSessionComponentStateImpl *)std::__throw_bad_variant_access[abi:nn180100]();
      return re::ecs2::AudioSessionComponentStateImpl::processUpdatingRootTransform(v18, v19, v20);
    }
  }
  return result;
}

double re::ecs2::AudioSessionComponentStateImpl::processUpdatingRootTransform(re::ecs2::AudioSessionComponentStateImpl *this, float32x4_t *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1].i64[0];
  if (!v5)
  {
LABEL_5:
    a3 = -1;
LABEL_14:
    float32x4_t v11 = a2[13];
    float32x4_t v29 = a2[12];
    float32x4_t v30 = v11;
    float32x4_t v12 = a2[14];
    float32x4_t v13 = a2[15];
    goto LABEL_19;
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    do
    {
      uint64_t v8 = v5;
      uint64_t v5 = *(void *)(v5 + 24);
    }
    while (v5);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 16))(v7, *(void *)(v8 + 16));
    uint64_t v5 = a2[1].i64[0];
    if (!v5) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if ((*(_DWORD *)(v5 + 288) & 1) == 0) {
    a3 = -1;
  }
  if (v9) {
    BOOL v10 = a2[8].i64[0] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    goto LABEL_14;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v5, (const re::ecs2::Entity *)1, v24);
  re::audio::cleanUpTransformForPHASE(v24, v14, v15, v16, (uint64_t)&v25);
  double v17 = a2 + 12;
  uint64_t v18 = a2[8].i64[0];
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v26, a2[13]), (int8x16_t)vceqq_f32(v25, a2[12])), vandq_s8((int8x16_t)vceqq_f32(v27, a2[14]), (int8x16_t)vceqq_f32(v28, a2[15])))) & 0x80000000) == 0|| v18 != a2[9].i64[1])
  {
    v24[0] = v25;
    v24[1] = v26;
    void v24[2] = v27;
    _OWORD v24[3] = v28;
    (*(void (**)(uint64_t, uint64_t, float32x4_t *))(*(void *)v9 + 376))(v9, v18, v24);
    double v17 = &v25;
  }
  float32x4_t v19 = v17[1];
  float32x4_t v29 = *v17;
  float32x4_t v30 = v19;
  float32x4_t v12 = v17[2];
  float32x4_t v13 = v17[3];
LABEL_19:
  float32x4_t v31 = v12;
  float32x4_t v32 = v13;
  float32x4_t v20 = v30;
  a2[12] = v29;
  a2[13] = v20;
  double result = *(double *)v31.i64;
  float32x4_t v22 = v32;
  a2[14] = v31;
  a2[15] = v22;
  uint64_t v23 = a2[8].i64[0];
  a2[9].i64[0] = a3;
  a2[9].i64[1] = v23;
  return result;
}

BOOL re::ecs2::AudioSessionComponentStateImpl::processUpdatingComponents(re::ecs2::AudioSessionComponentStateImpl *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 8);
  if (!v5) {
    return 0;
  }
  unint64_t v9 = *(void *)(*(void *)(v5 + 104) + 272);
  uint64_t v10 = *((void *)a1 + 2);
  if (v10) {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
  }
  else {
    uint64_t v11 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v24, a5, 0);
  uint64_t v13 = v24;
  uint64_t v14 = v25;
  uint64_t v24 = a4;
  uint64_t v25 = v13;
  uint64_t v26 = v14;
  uint64_t v15 = (unsigned __int16)v14;
  uint64_t v16 = v14 & 0xFFFF0000;
  if (v13 != a5 || v15 != 0xFFFF || v16 != 4294901760)
  {
    do
    {
      uint64_t v19 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25);
      float32x4_t v20 = *(float32x4_t **)v19;
      if (*(_DWORD *)(*(void *)v19 + 64)) {
        BOOL v21 = v11 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21) {
        (*(void (**)(uint64_t))(*(void *)v11 + 768))(v11);
      }
      re::ecs2::AudioSessionComponentStateImpl::processUpdatingRootTransform(a1, v20, v9 >> 1);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
    }
    while (v25 != a5 || (unsigned __int16)v26 != 0xFFFF || WORD1(v26) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AudioSessionSystem::willAddSystemToECSService(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 32))(*(void *)(this + 40));
    uint64_t v4 = re::ServiceLocator::serviceOrNull<re::Engine>(v3);
    if (v4) {
      re::ObjCObject::operator=((id *)(v2 + 104), (id *)(v4 + 432));
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
    this = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v5);
    *(void *)(v2 + 11re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = this;
    *(void *)(v2 + 176) = this;
  }
  return this;
}

uint64_t re::ecs2::AudioSessionSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 11re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(this + 176) = 0;
  return this;
}

uint64_t re::ecs2::AudioSessionSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  v71[11] = *MEMORY[0x263EF8340];
  long long v53 = a2;
  if (!a2) {
    return this;
  }
  uint64_t v2 = this;
  uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v55 = v2;
  *((void *)&v55 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::ecs2::AudioSessionSystem::willRemoveComponents;
  *(void *)&long long v56 = 0;
  *((void *)&v56 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::createSubscription<re::ecs2::AudioSessionSystem>(re::ecs2::AudioSessionSystem *,REEventHandlerResult (re::ecs2::AudioSessionSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Slice<re::ecs2::AudioSessionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioSessionComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 392), (uint64_t)&v55);
  re::DynamicArray<re::TransitionCondition *>::add((void *)(v2 + 120), &v53);
  uint64_t v4 = (uint64_t)v53;
  v54[0] = (uint64_t)v53;
  unint64_t v5 = *(void *)(v2 + 312);
  int v6 = *(_DWORD *)(v2 + 320);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(v2 + 328);
    }
    else {
      uint64_t v7 = *(void **)(v2 + 336);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_18;
      }
    }
    goto LABEL_17;
  }
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(v2 + 328);
    if (!v5) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v8 = *(uint64_t **)(v2 + 336);
    if (!v5) {
      goto LABEL_18;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_17:
    *(void *)&long long v55 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v2 + 304, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v2 + 184, v55);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::init(v13, v2 + 184, v4);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v2 + 240), v54, (uint64_t *)&v55);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v2 + 304, v55);
    uint64_t v14 = v2 + 352;
    unint64_t v15 = v55;
    goto LABEL_50;
  }
LABEL_18:
  long long v62 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v55 = 0u;
  *(void *)&long long v56 = 0;
  long long v57 = 0u;
  *((void *)&v56 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = -1;
  *(void *)&long long v59 = 0;
  DWORD2(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = 1;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  unint64_t v16 = *(void *)(v2 + 224);
  *(void *)&long long v62 = 0;
  unint64_t v17 = *(void *)(v2 + 192);
  DWORD2(v6re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,4ul>::setBucketsCapacity((uint64_t *)(v2 + 184), (v16 + 4) >> 2);
    unint64_t v17 = *(void *)(v2 + 192);
  }
  if (v17 <= v16 >> 2)
  {
    v54[1] = 0;
    memset(v71, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v63 = 136315906;
    uint64_t v64 = "operator[]";
    __int16 v65 = 1024;
    int v66 = 858;
    __int16 v67 = 2048;
    unint64_t v68 = v16 >> 2;
    __int16 v69 = 2048;
    unint64_t v70 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  if (*(unsigned char *)(v2 + 200)) {
    uint64_t v18 = v2 + 208;
  }
  else {
    uint64_t v18 = *(void *)(v2 + 216);
  }
  uint64_t v19 = *(void *)(v18 + 8 * (v16 >> 2));
  ++*(void *)(v2 + 224);
  ++*(_DWORD *)(v2 + 232);
  uint64_t v20 = v19 + 112 * (v16 & 3);
  long long v21 = v55;
  long long v22 = v56;
  long long v23 = v57;
  *(void *)(v20 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v58;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v23;
  *(_OWORD *)uint64_t v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v58 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v55);
  uint64_t v25 = *(void *)(v2 + 224);
  if (!v25)
  {
LABEL_73:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v2 + 184, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::init(v26, v2 + 184, v54[0]);
  v71[0] = *(void *)(v2 + 224) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v2 + 240), v54, v71);
  unint64_t v27 = *(void *)(v2 + 224);
  unint64_t v28 = *(void *)(v2 + 344);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(v2 + 3re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44) = v27;
  *(void *)&long long v55 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v2 + 304), v29, &v55);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(v2 + 344) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(v2 + 320)) {
      uint64_t v32 = v2 + 328;
    }
    else {
      uint64_t v32 = *(void *)(v2 + 336);
    }
    *(void *)(v32 + 8 * *(void *)(v2 + 312) - 8) &= v30;
  }
  unint64_t v33 = *(void *)(v2 + 224);
  unint64_t v34 = *(void *)(v2 + 392);
  if ((v33 & 0x3F) != 0) {
    unint64_t v35 = (v33 >> 6) + 1;
  }
  else {
    unint64_t v35 = v33 >> 6;
  }
  *(void *)(v2 + 39re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v33;
  *(void *)&long long v55 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v2 + 352), v35, &v55);
  if (v33 && v34 > v33)
  {
    uint64_t v36 = 63;
    uint64_t v37 = *(void *)(v2 + 392) & 0x3FLL;
    if (v37 && v37 != 63) {
      uint64_t v36 = ~(-1 << v37);
    }
    if (*(unsigned char *)(v2 + 368)) {
      uint64_t v38 = v2 + 376;
    }
    else {
      uint64_t v38 = *(void *)(v2 + 384);
    }
    *(void *)(v38 + 8 * *(void *)(v2 + 360) - 8) &= v36;
  }
  unint64_t v15 = v71[0];
  uint64_t v14 = v2 + 352;
LABEL_50:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(v2 + 416)) {
    goto LABEL_68;
  }
  unint64_t v39 = *(void *)(v2 + 360);
  int v40 = *(_DWORD *)(v2 + 368);
  if (v39 >= 0xB)
  {
    if (v40) {
      int v41 = (void *)(v2 + 376);
    }
    else {
      int v41 = *(void **)(v2 + 384);
    }
    uint64_t v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43) {
        goto LABEL_68;
      }
    }
    goto LABEL_66;
  }
  if (v40)
  {
    unint64_t v42 = (uint64_t *)(v2 + 376);
    if (!v39) {
      goto LABEL_68;
    }
  }
  else
  {
    unint64_t v42 = *(uint64_t **)(v2 + 384);
    if (!v39) {
      goto LABEL_68;
    }
  }
  uint64_t v44 = 0;
  uint64_t v45 = 8 * v39;
  do
  {
    uint64_t v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
  {
LABEL_66:
    __int16 v47 = *(re::ecs2::System **)(v2 + 400);
    if (!*((unsigned char *)v47 + 86)) {
      re::ecs2::System::queueToRun(v47, 0.0);
    }
  }
LABEL_68:
  this = *(void *)(v2 + 112);
  if (this)
  {
    unint64_t v48 = *(void *)(*((void *)v53 + 13) + 272);
    this = (*(uint64_t (**)(uint64_t))(*(void *)this + 16))(this);
    if (this)
    {
      uint64_t v49 = this;
      unint64_t v50 = v48 >> 1;
      v52[0] = MEMORY[0x263EF8330];
      v52[1] = 3221225472;
      void v52[2] = ___ZN2re4ecs218AudioSessionSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke;
      v52[3] = &__block_descriptor_48_e5_v8__0l;
      v52[4] = v2;
      v52[5] = v53;
      (*(void (**)(uint64_t, uint64_t, unint64_t, void *))(*(void *)this + 32))(this, 773, v50, v52);
      v51[0] = MEMORY[0x263EF8330];
      v51[1] = 3221225472;
      v51[2] = ___ZN2re4ecs218AudioSessionSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke_2;
      v51[3] = &__block_descriptor_48_e5_v8__0l;
      v51[4] = v2;
      v51[5] = v53;
      return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, void *))(*(void *)v49 + 32))(v49, 517, v50, v51);
    }
  }
  return this;
}

void *___ZN2re4ecs218AudioSessionSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke(void *result)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v2 = result[4];
    double result = *(void **)(v2 + 112);
    if (result)
    {
      double result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v1);
      if (result)
      {
        uint64_t v3 = result;
        uint64_t v4 = *(void *)(v2 + 112);
        if (v4)
        {
          unint64_t v5 = (re::audio *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v1);
          if (v5)
          {
            int v6 = v5;
            MediaserverdPID = re::audio::getMediaserverdPID(v5);
            uint64_t v8 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v1 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            uint64_t v9 = *(void *)(v8 + 24);
            if (v9)
            {
              uint64_t v10 = *(uint64_t **)(v8 + 40);
              uint64_t v11 = (unint64_t)MediaserverdPID & 0xFF00000000;
              uint64_t v12 = 8 * v9;
              int v33 = (int)MediaserverdPID;
              do
              {
                uint64_t v13 = *v10;
                uint64_t v14 = *(void *)(*v10 + 16);
                if (!v14) {
                  break;
                }
                unint64_t v15 = *(re::ecs2::NetworkComponent **)(v14 + 200);
                if (v15)
                {
                  uint64_t v16 = re::ecs2::NetworkComponent::owningProcessType(v15);
                  if (v16) {
                    goto LABEL_32;
                  }
                }
                uint64_t v16 = (*(uint64_t (**)(re::audio *))(*(void *)v6 + 544))(v6);
                if ((v16 & 1) != 0
                  || (id v17 = objc_loadWeakRetained((id *)(v13 + 72)),
                      int v18 = [v17 opaqueSessionID],
                      v17,
                      BOOL v19 = v18 == *(_DWORD *)(v13 + 64),
                      LODWORD(MediaserverdPID) = v33,
                      v19))
                {
LABEL_32:
                  unsigned int v20 = *(_DWORD *)(v13 + 64);
                  long long v21 = *re::audioLogObjects((re *)v16);
                  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
                  if (v11 && v20 >> 12 == MediaserverdPID)
                  {
                    if (v22)
                    {
                      int v23 = *(_DWORD *)(v13 + 64);
                      *(_DWORD *)long long buf = 67109376;
                      *(_DWORD *)unint64_t v35 = v23;
                      *(_WORD *)&v35[4] = 2048;
                      *(void *)&v35[6] = v13;
                      _os_log_debug_impl(&dword_233120000, v21, OS_LOG_TYPE_DEBUG, "[RE/ECS] [AudioSessionSystem] service reset callback, found updated AudioSessionID 0x%x for component %p", buf, 0x12u);
                    }
                  }
                  else
                  {
                    if (v22)
                    {
                      MediaserverdPID = v21;
                      id WeakRetained = objc_loadWeakRetained((id *)(v13 + 72));
                      int v29 = *(_DWORD *)(v13 + 64);
                      *(_DWORD *)long long buf = 134218496;
                      *(void *)unint64_t v35 = v13;
                      *(_WORD *)&v35[8] = 2048;
                      *(void *)&v35[10] = WeakRetained;
                      __int16 v36 = 1024;
                      int v37 = v29;
                      _os_log_debug_impl(&dword_233120000, MediaserverdPID, OS_LOG_TYPE_DEBUG, "[RE/ECS] [AudioSessionSystem] service reset callback, resetting audio session for component %p (session %p, sessionID 0x%x)", buf, 0x1Cu);

                      LODWORD(MediaserverdPID) = v33;
                    }
                    re::ecs2::AudioSessionComponent::clearStateFollowingMediaServicesCrash((re::ecs2::AudioSessionComponent *)v13);
                  }
                }
                else
                {
                  id v24 = objc_loadWeakRetained((id *)(v13 + 72));
                  *(_DWORD *)(v13 + 64) = (*(uint64_t (**)(re::audio *, id))(*(void *)v6 + 760))(v6, v24);

                  uint64_t v26 = *re::audioLogObjects(v25);
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                  {
                    int v30 = *(_DWORD *)(v13 + 64);
                    *(_DWORD *)long long buf = 67109376;
                    *(_DWORD *)unint64_t v35 = v30;
                    *(_WORD *)&v35[4] = 2048;
                    *(void *)&v35[6] = v13;
                    _os_log_debug_impl(&dword_233120000, v26, OS_LOG_TYPE_DEBUG, "[RE/ECS] [AudioSessionSystem] service reset callback, updated AudioSessionID 0x%x for component %p", buf, 0x12u);
                  }
                  re::ecs2::Component::markDirty((void *)v13);
                }
                ++v10;
                v12 -= 8;
              }
              while (v12);
            }
          }
        }
        uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v3 + 88);
        uint64_t v32 = *(void *)(*(void *)(v1 + 104) + 272) >> 1;
        return (void *)v31(v3, 2, v32, 1);
      }
    }
  }
  return result;
}

void *___ZN2re4ecs218AudioSessionSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke_2(void *result)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = result[5];
  if (v1)
  {
    double result = *(void **)(result[4] + 112);
    if (result)
    {
      double result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v1);
      if (result)
      {
        double result = (void *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v1 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        uint64_t v2 = result[3];
        if (v2)
        {
          uint64_t v3 = (re::ecs2::AudioSessionComponent **)result[5];
          uint64_t v4 = 8 * v2;
          while (1)
          {
            unint64_t v5 = *v3;
            int v6 = (id *)((char *)*v3 + 72);
            double result = objc_loadWeakRetained(v6);
            if (result) {
              break;
            }
            if (*((_DWORD *)v5 + 16)) {
              goto LABEL_9;
            }
LABEL_12:
            ++v3;
            v4 -= 8;
            if (!v4) {
              return result;
            }
          }

LABEL_9:
          uint64_t v7 = *re::audioLogObjects((re *)result);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v8 = v7;
            id WeakRetained = objc_loadWeakRetained(v6);
            int v10 = *((_DWORD *)v5 + 16);
            *(_DWORD *)long long buf = 134218496;
            uint64_t v12 = v5;
            __int16 v13 = 2048;
            id v14 = WeakRetained;
            __int16 v15 = 1024;
            int v16 = v10;
            _os_log_debug_impl(&dword_233120000, v8, OS_LOG_TYPE_DEBUG, "[RE/ECS] [AudioSessionSystem] service lost callback, resetting audio session for component %p (session %p, sessionID 0x%x)", buf, 0x1Cu);
          }
          double result = re::ecs2::AudioSessionComponent::clearStateFollowingMediaServicesCrash(v5);
          goto LABEL_12;
        }
      }
    }
  }
  return result;
}

void *re::ecs2::AudioSessionSystem::willRemoveSceneFromECSService(void *this, re::ecs2::Scene *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v18 = a2;
  if (a2)
  {
    uint64_t v2 = this;
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v19 = v2;
    *((void *)&v19 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::ecs2::AudioSessionSystem::willRemoveComponents;
    uint64_t v20 = 0;
    long long v21 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::createSubscription<re::ecs2::AudioSessionSystem>(re::ecs2::AudioSessionSystem *,REEventHandlerResult (re::ecs2::AudioSessionSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Slice<re::ecs2::AudioSessionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioSessionComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v19);
    re::DynamicArray<unsigned long long>::remove((uint64_t)(v2 + 15), &v18);
    *(void *)&long long v19 = v18;
    uint64_t v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v2 + 30, &v19);
    if (v4 != -1)
    {
      uint64_t v5 = v2[31] + 16 * v4;
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)(v2 + 38), *(void *)(v5 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)(v2 + 44), *(void *)(v5 + 8));
      int v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)(v2 + 23), *(void *)(v5 + 8));
      if (*v6)
      {
        uint64_t v7 = v6;
        *int v6 = 0;
        uint64_t v8 = v6 + 1;
        uint64_t v9 = *(void *)(v6[1] + 288);
        if (v9)
        {
          uint64_t v10 = v6[12];
          if (v10)
          {
            for (unint64_t i = 0; i != v10; ++i)
            {
              uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
              re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
        uint64_t v13 = 0;
        id v14 = v7 + 3;
        do
        {
          __int16 v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
          if (*(void *)v15) {
            re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
          }
          v14[v13++] = -1;
        }
        while (v13 != 4);
        *uint64_t v8 = 0;
        v8[1] = 0;
      }
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v2 + 30, &v19);
    }
    this = (void *)v2[14];
    if (this)
    {
      this = (void *)(*(uint64_t (**)(void *, re::ecs2::Scene *))(*this + 16))(this, v18);
      if (this)
      {
        uint64_t v16 = (uint64_t)this;
        uint64_t v17 = *(void *)(*((void *)v18 + 13) + 272) >> 1;
        (*(void (**)(void *, uint64_t, uint64_t))(*this + 40))(this, 773, v17);
        return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 40))(v16, 773, v17);
      }
    }
  }
  return this;
}

uint64_t re::ecs2::AudioSessionSystem::willRemoveComponents(uint64_t a1, uint64_t a2, re::ecs2::AudioSessionComponent **a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      int v6 = *a3++;
      re::ecs2::AudioSessionComponent::clearControllerObjects(v6);
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::AudioSessionSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v36[0] = a3;
  v36[1] = a4;
  if (a2)
  {
    uint64_t v4 = result;
    if (*(void *)(result + 40))
    {
      int v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v35);
      uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
      if (isStatisticCollectionEnabled)
      {
        uint64_t v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
        uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        unint64_t v10 = v9 ? *(void *)(v9 + 24) : 0;
        uint64_t v11 = *(int64x2_t **)(v8 + 152);
        if (v11)
        {
          unint64_t v12 = v11[576].u64[0];
          if (v12 >= v10) {
            unint64_t v12 = v10;
          }
          v11[576].i64[0] = v12;
          unint64_t v13 = v11[576].u64[1];
          if (v13 <= v10) {
            unint64_t v13 = v10;
          }
          v11[576].i64[1] = v13;
          int64x2_t v14 = vdupq_n_s64(1uLL);
          v14.i64[0] = v10;
          v11[577] = vaddq_s64(v11[577], v14);
          *(unsigned char *)(v8 + 184) = 0;
        }
      }
      re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34, 3115, v4);
      uint64_t v37 = a2;
      unint64_t v15 = *(void *)(*(void *)(v4 + 248)
                      + 16
                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 240), &v37)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v4 + 352, v15);
      uint64_t v16 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4 + 184, v15);
      uint64_t v17 = *(void *)(*v16 + 224);
      unint64_t v18 = v16[3];
      unint64_t v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v18);
      if (*(_DWORD *)(v19 + 40)) {
        int v20 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v17 + 24))(v17, v36, v16, v18, v19, 0);
      }
      else {
        int v20 = 0;
      }
      unint64_t v21 = v16[5];
      unint64_t v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v21);
      if (*(_DWORD *)(v22 + 40)) {
        v20 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v17 + 32))(v17, v36, v16, v21, v22, 0);
      }
      unint64_t v23 = v16[6];
      unint64_t v24 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v23);
      if (*(_DWORD *)(v24 + 40))
      {
        if (((v20 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v17 + 40))(v17, v36, v16, v23, v24, 0)) & 1) == 0)goto LABEL_21; {
      }
        }
      else if (!v20)
      {
LABEL_21:
        if (*(unsigned char *)(v4 + 416))
        {
          unint64_t v25 = *(void *)(v4 + 360);
          int v26 = *(_DWORD *)(v4 + 368);
          if (v25 >= 0xB)
          {
            if (v26) {
              unint64_t v27 = (void *)(v4 + 376);
            }
            else {
              unint64_t v27 = *(void **)(v4 + 384);
            }
            uint64_t v29 = 8 * v25;
            while (!*v27)
            {
              ++v27;
              v29 -= 8;
              if (!v29) {
                goto LABEL_41;
              }
            }
LABEL_39:
            int v33 = *(re::ecs2::System **)(v4 + 400);
            if (!*((unsigned char *)v33 + 86)) {
              re::ecs2::System::queueToRun(v33, 0.0);
            }
            goto LABEL_41;
          }
          if ((v26 & 1) == 0)
          {
            unint64_t v28 = *(uint64_t **)(v4 + 384);
            if (!v25) {
              goto LABEL_41;
            }
LABEL_36:
            uint64_t v30 = 0;
            uint64_t v31 = 8 * v25;
            do
            {
              uint64_t v32 = *v28++;
              v30 |= v32;
              v31 -= 8;
            }
            while (v31);
            if (!v30) {
              goto LABEL_41;
            }
            goto LABEL_39;
          }
          unint64_t v28 = (uint64_t *)(v4 + 376);
          if (v25) {
            goto LABEL_36;
          }
        }
LABEL_41:
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v35);
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 352, v15);
      goto LABEL_21;
    }
  }
  return result;
}

void re::ecs2::AudioSessionSystem::~AudioSessionSystem(re::ecs2::AudioSessionSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 23);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AudioSessionSystem::typeInfo(re::ecs2::AudioSessionSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSessionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioSessionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioSessionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioSessionSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AudioSessionComponent>::dependsOnComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AudioSessionComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, id *a2)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_0,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_1,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_2,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audiosession_state::InvalidSessionID,std::__variant_detail::_Trait::RetrievingSession,std::__variant_detail::_Trait::SessionUnavailable,std::__variant_detail::_Trait::SessionAvailable> &>(uint64_t *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v3 = *(uint64_t **)(*a1 + 56);
  uint64_t v2 = *(void *)(*a1 + 64);
  uint64_t v4 = *v3;
  unint64_t v5 = *(void *)v2;
  unint64_t v6 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)(v2 + 8));
  unint64_t v7 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v4 + 16), v5, v6, *(void *)(v4 + 32));
  unint64_t v8 = *re::audioLogObjects(v7);
  uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    uint64_t v10 = **(void **)(v1 + 72);
    unint64_t v11 = *(re::ecs2::Entity **)(v10 + 16);
    unint64_t v12 = v8;
    re::ecs2::Entity::debugDescription(v11, (re::DynamicString *)&v14);
    if (v15) {
      unint64_t v13 = *(unsigned char **)&v16[7];
    }
    else {
      unint64_t v13 = v16;
    }
    *(_DWORD *)long long buf = 134349314;
    uint64_t v18 = v10;
    __int16 v19 = 2082;
    int v20 = v13;
    _os_log_debug_impl(&dword_233120000, v12, OS_LOG_TYPE_DEBUG, "[RE/ECS] [processPreparingComponents] invalid session ID. Setting state to 'inactive' for AudioSessionComponent %{public}p on entity %{public}s", buf, 0x16u);

    uint64_t result = v14;
    if (v14)
    {
      if (v15) {
        return (*(uint64_t (**)(void))(*(void *)v14 + 40))();
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_0,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_1,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_2,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audiosession_state::InvalidSessionID,std::__variant_detail::_Trait::RetrievingSession,std::__variant_detail::_Trait::SessionUnavailable,std::__variant_detail::_Trait::SessionAvailable> &>(re *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *re::audioLogObjects(a1);
  uint64_t result = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    uint64_t v4 = **(void **)(v1 + 24);
    int v5 = *(_DWORD *)(v4 + 64);
    unint64_t v6 = *(re::ecs2::Entity **)(v4 + 16);
    unint64_t v7 = v2;
    re::ecs2::Entity::debugDescription(v6, (re::DynamicString *)&v9);
    if (v10) {
      unint64_t v8 = *(unsigned char **)&v11[7];
    }
    else {
      unint64_t v8 = v11;
    }
    *(_DWORD *)long long buf = 134349826;
    uint64_t v13 = v4;
    __int16 v14 = 1026;
    int v15 = v5;
    __int16 v16 = 1026;
    int v17 = v5;
    __int16 v18 = 2080;
    __int16 v19 = v8;
    _os_log_debug_impl(&dword_233120000, v7, OS_LOG_TYPE_DEBUG, "[RE/ECS] [processPreparingComponents] keeping state 'prepare' for AudioSessionComponent %{public}p audioSessionID(%{public}u, 0x%{public}x) on entity {public}%s", buf, 0x22u);

    uint64_t result = v9;
    if (v9)
    {
      if (v10) {
        return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_0,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_1,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_2,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audiosession_state::InvalidSessionID,std::__variant_detail::_Trait::RetrievingSession,std::__variant_detail::_Trait::SessionUnavailable,std::__variant_detail::_Trait::SessionAvailable> &>(uint64_t *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v3 = *(uint64_t **)(*a1 + 32);
  uint64_t v2 = *(void *)(*a1 + 40);
  uint64_t v4 = *v3;
  unint64_t v5 = *(void *)v2;
  unint64_t v6 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)(v2 + 8));
  unint64_t v7 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v4 + 16), v5, v6, *(void *)(v4 + 32));
  unint64_t v8 = *re::audioLogObjects(v7);
  uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    uint64_t v10 = **(void **)(v1 + 48);
    int v11 = *(_DWORD *)(v10 + 64);
    unint64_t v12 = *(re::ecs2::Entity **)(v10 + 16);
    uint64_t v13 = v8;
    re::ecs2::Entity::debugDescription(v12, (re::DynamicString *)&v15);
    if (v16) {
      __int16 v14 = *(unsigned char **)&v17[7];
    }
    else {
      __int16 v14 = v17;
    }
    *(_DWORD *)long long buf = 134349826;
    uint64_t v19 = v10;
    __int16 v20 = 1026;
    int v21 = v11;
    __int16 v22 = 1026;
    int v23 = v11;
    __int16 v24 = 2082;
    unint64_t v25 = v14;
    _os_log_debug_impl(&dword_233120000, v13, OS_LOG_TYPE_DEBUG, "[RE/ECS] [processPreparingComponents] session not available. Setting state to 'inactive' for AudioSessionComponent %{public}p audioSessionID(%{public}u, 0x%{public}x) on entity %{public}s", buf, 0x22u);

    uint64_t result = v15;
    if (v15)
    {
      if (v16) {
        return (*(uint64_t (**)(void))(*(void *)v15 + 40))();
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_0,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_1,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_2,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audiosession_state::InvalidSessionID,std::__variant_detail::_Trait::RetrievingSession,std::__variant_detail::_Trait::SessionUnavailable,std::__variant_detail::_Trait::SessionAvailable> &>(uint64_t ***a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v4 = *v3;
  unint64_t v5 = *v2;
  unint64_t v6 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v2 + 4);
  unint64_t v7 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v4 + 16), v5, v6, *(void *)(v4 + 48));
  unint64_t v8 = *re::audioLogObjects(v7);
  uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    uint64_t v10 = *v1[2];
    int v11 = *(_DWORD *)(v10 + 64);
    unint64_t v12 = *(re::ecs2::Entity **)(v10 + 16);
    uint64_t v13 = v8;
    re::ecs2::Entity::debugDescription(v12, (re::DynamicString *)&v15);
    if (v16) {
      __int16 v14 = *(unsigned char **)&v17[7];
    }
    else {
      __int16 v14 = v17;
    }
    *(_DWORD *)long long buf = 134349826;
    uint64_t v19 = v10;
    __int16 v20 = 1026;
    int v21 = v11;
    __int16 v22 = 1026;
    int v23 = v11;
    __int16 v24 = 2082;
    unint64_t v25 = v14;
    _os_log_debug_impl(&dword_233120000, v13, OS_LOG_TYPE_DEBUG, "[RE/ECS] [processPreparingComponents] setting state to 'updating' for AudioSessionComponent %{public}p audioSessionID(%{public}u, 0x%{public}x) on entity %{public}s", buf, 0x22u);

    uint64_t result = v15;
    if (v15)
    {
      if (v16) {
        return (*(uint64_t (**)(void))(*(void *)v15 + 40))();
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E707158[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (v2 == 1) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E707158[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (v2 == 2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E707158[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t *a1, void **a2, void **a3)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:nn180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(uint64_t a1, void **a2, void **a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 3)
  {
    ((void (*)(char *, uint64_t))off_26E707158[v5])(&v9, a1);
LABEL_7:
    unint64_t v8 = *a3;
    *a3 = 0;
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 3;
    return;
  }
  unint64_t v6 = *a3;
  *a3 = 0;
  unint64_t v7 = *a2;
  *a2 = v6;
}

id re::internal::defaultRetain<re::ecs2::AudioSessionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioSessionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::createSubscription<re::ecs2::AudioSessionSystem>(re::ecs2::AudioSessionSystem *,REEventHandlerResult (re::ecs2::AudioSessionSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Slice<re::ecs2::AudioSessionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioSessionComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  char v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E7071C8;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    int v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    __int16 v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    char v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E707220;
    v16[1] = a1;
    uint64_t v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    _OWORD v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    __int16 v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v20 = v17;
    v20[1] = v19;
    int v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    __int16 v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    void *v22 = &unk_26E707278;
    v22[1] = a1;
    uint64_t v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    _OWORD v22[3] = 0;
    char v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    void *v28 = &unk_26E7072D0;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    unsigned __int8 v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        __int16 v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        void *v37 = &unk_26E7071C8;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        __int16 v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        unint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E707220;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        unint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        __int16 v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        __int16 v65 = 0;
        uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        void *v49 = &unk_26E707278;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        __int16 v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E7072D0;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    __int16 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    char v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    char v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    char v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    __int16 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    char v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    char v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    char v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    __int16 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    char v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    char v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    char v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    __int16 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    char v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    char v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    char v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    char v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    char v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    char v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    char v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7071C8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7071C8;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E707220;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E707220;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E707278;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E707278;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7072D0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7072D0;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::ecs2::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderRaw>>(uint64_t a1, uint64_t a2)
{
  re::snapshot::Reader<re::snapshot::DecoderRaw>::field<0,re::ecs2::Component>(a1, (unsigned char *)a2);
  re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::SkeletalPose>((const char **)a1, (void *)(a2 + 56));
  *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  unint64_t v8 = 0;
  if (!re::snapshot::DecoderRaw::beginArray((re::snapshot::DecoderRaw *)a1, &v8)) {
    goto LABEL_16;
  }
  unint64_t v4 = v8;
  if (v8 != -1 && *(void *)(a2 + 104) < v8)
  {
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)(a2 + 96), v8);
    goto LABEL_9;
  }
  if (v8)
  {
LABEL_9:
    unint64_t v6 = v4 + 1;
    unint64_t v7 = 1;
    do
    {
      if (v4 != -1 && v6 > v7)
      {
        re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((void *)(a2 + 96), v7);
        re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::Matrix4x4<float>>((re::snapshot::Decoder *)a1, (void *)(*(void *)(a2 + 128) + 40 * *(void *)(a2 + 112) - 40));
      }
      ++v7;
    }
    while (v7 - v4 != 1);
    goto LABEL_14;
  }
  unint64_t v6 = 1;
  LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 1;
LABEL_14:
  if (v6 != v7) {
    re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d", v4, v7 - 1);
  }
LABEL_16:
  *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
  re::snapshot::Reader<re::snapshot::DecoderRaw>::field<3,re::AssetHandle>(a1, (const re::IntrospectionBase *)(a2 + 32));
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::field<3,re::AssetHandle>(uint64_t a1, const re::IntrospectionBase *a2)
{
  uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v5 = a2;
    uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    a2 = v5;
    if (v4)
    {
      re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v5);
      uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      a2 = v5;
    }
  }
  re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t *)a1, a2, (uint64_t)v3[446]);
  *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
}

uint64_t re::ecs2::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>(uint64_t a1, uint64_t a2)
{
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<0,re::ecs2::Component>(a1, (float *)a2);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,re::DynamicArray<re::SkeletalPose>>(a1, (void *)(a2 + 56));
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(a1, (void *)(a2 + 96));
  return re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,re::AssetHandle>(a1, (float *)(a2 + 32));
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,re::DynamicArray<re::SkeletalPose>>(uint64_t a1, void *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<1>(a1);
  if (result)
  {
    re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderOPACK>,re::SkeletalPose>((re::snapshot::DecoderOPACK *)a1, a2);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(void *)(a1 + 24) || (int v6 = *v5, v6 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v5 + 1;
      uint64_t result = (v6 - 8);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(uint64_t a1, void *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<2>(a1);
  if (result)
  {
    re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderOPACK>,re::DynamicArray<re::Matrix4x4<float>>>((re::snapshot::DecoderOPACK *)a1, a2);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(void *)(a1 + 24) || (int v6 = *v5, v6 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v5 + 1;
      uint64_t result = (v6 - 8);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,re::AssetHandle>(uint64_t a1, float *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<3>(a1);
  if (result)
  {
    uint64_t v5 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    {
      uint64_t v5 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      if (v8)
      {
        re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v9);
        uint64_t v5 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      }
    }
    re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t *)a1, a2, (uint64_t)v5[446]);
    int v6 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v6 >= *(void *)(a1 + 24) || (int v7 = *v6, v7 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v7 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v6 + 1;
      uint64_t result = (v7 - 8);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = result;
  }
  return result;
}

void re::ecs2::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderRaw>>(unsigned int *a1, uint64_t a2)
{
  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<0,re::ecs2::Component>(a1, a2);
  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<1,re::DynamicArray<re::SkeletalPose>>(a1, a2 + 56);
  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(a1, a2 + 96);
  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<3,re::AssetHandle>(a1, a2 + 32);
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::field<1,re::DynamicArray<re::SkeletalPose>>(unsigned int *a1, uint64_t a2)
{
  uint64_t __src = *(void *)(a2 + 16);
  re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    uint64_t v6 = 88 * v4;
    do
    {
      {
        {
          re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
        }
      }
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v5, re::introspect<re::SkeletalPose>(void)::info);
      v5 += 88;
      v6 -= 88;
    }
    while (v6);
  }
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(unsigned int *a1, uint64_t a2)
{
  uint64_t __src = *(void *)(a2 + 16);
  uint64_t result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = 40 * v5;
    int v8 = (uint64_t *)(v6 + 16);
    do
    {
      uint64_t __src = *v8 << 6;
      re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
      int v9 = (void *)v8[2];
      uint64_t v10 = *v8;
      v8 += 5;
      uint64_t result = re::snapshot::Encoder::writeRaw<true>(a1, v9, v10 << 6);
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::field<3,re::AssetHandle>(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v6 = (const re::IntrospectionBase *)a2;
    uint64_t v7 = a1;
    uint64_t v2 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    int v5 = v4;
    a2 = (uint64_t)v6;
    a1 = v7;
    if (v5)
    {
      re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v6);
      uint64_t v2 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      a2 = (uint64_t)v6;
      a1 = v7;
    }
  }
  uint64_t v3 = (uint64_t)v2[446];
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, v3);
}

unsigned int *re::ecs2::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(re::snapshot::EncoderOPACK *a1, uint64_t a2)
{
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<0,re::ecs2::Component>(a1, a2);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,re::DynamicArray<re::SkeletalPose>>(a1, a2 + 56);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(a1, a2 + 96);
  return re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,re::AssetHandle>(a1, a2 + 32);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,re::DynamicArray<re::SkeletalPose>>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 1);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + v4) = 9;
  }
  unint64_t v6 = *(void *)(a2 + 16);
  re::snapshot::EncoderOPACK::beginArray((unsigned int *)this, v6);
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = 88 * v7;
    do
    {
      {
        re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      }
      re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)this, v8, re::introspect<re::SkeletalPose>(void)::info);
      v8 += 88;
      v9 -= 88;
    }
    while (v9);
  }
  return re::snapshot::EncoderOPACK::endArray((unsigned int *)this, v6);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 2);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + v4) = 10;
  }
  return re::snapshot::operator<<<re::snapshot::Writer<re::snapshot::EncoderOPACK>,re::DynamicArray<re::Matrix4x4<float>>>((uint64_t)this, a2);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,re::AssetHandle>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 3);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + v4) = 11;
  }
  unint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    unint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v9)
    {
      re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v10);
      unint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  uint64_t v7 = (uint64_t)v6[446];
  return re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)this, a2, v7);
}

unint64_t re::ecs2::SkeletalPoseComponent::calculateRigMappingDataDepHash(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[24];
  if (v2 != a2[7])
  {
    unint64_t v3 = a2[5];
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 664);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
    unint64_t v2 = v4 ^ (v5 >> 31) ^ v5;
  }
  if (*(void *)(*(void *)(a1 + 16) + 168)) {
    unint64_t v6 = 0xBF58476D1CE4E5B9;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v7 = ((v2 << 6)
      + (v2 >> 2)
      - 0x61C8864680B583E9
      + ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31))) ^ v2;
  unint64_t v8 = *(unsigned int *)(a1 + 120) ^ ((unint64_t)*(unsigned int *)(a1 + 120) >> 30);
  return (((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27))) >> 31))
        + (v7 << 6)
        + (v7 >> 2)
        - 0x61C8864680B583E9) ^ v7;
}

void *re::ecs2::SkeletalPoseComponent::ensureSkeletalPoseRigMappingDataUpToDate(void *this, const re::SkeletalPoseDefinitionAsset *a2, const re::MeshAsset *a3, const re::MeshNameMap *a4, const re::RigRuntimeData *a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (this[60] != a6)
  {
    uint64_t v11 = this;
    uint64_t v12 = (_anonymous_namespace_ *)(this + 59);
    if (re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled((re::DeformerFeatureFlags *)this))
    {
      uint64_t v13 = v11[2];
      if (v13)
      {
        uint64_t v14 = v11[2];
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = *(void *)(v14 + 24);
        }
        while (v14);
        uint64_t v16 = *(void *)(v15 + 16);
        if (v16)
        {
          uint64_t v17 = *(void *)(v16 + 56);
          if (v17)
          {
            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
            unint64_t v19 = (re *)re::ServiceLocator::serviceOrNull<re::FrameManager>(v18);
            if (v19)
            {
              __int16 v20 = v19;
              unint64_t v21 = *re::ecsComponentsLogObjects(v19);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                uint64_t v22 = *((void *)v20 + 3) & 0xFFFFFFFFFFFFFFFLL;
                uint64_t v23 = *(void *)(v13 + 280);
                int v24 = 134218242;
                uint64_t v25 = v22;
                __int16 v26 = 2080;
                uint64_t v27 = v23;
                _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_INFO, "[DeformerLogging] Frame[%llu]: Updating Skeletal Pose Mesh Mapping for Entity - %s", (uint8_t *)&v24, 0x16u);
              }
            }
          }
        }
      }
    }
    return (void *)re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(v12, (unint64_t)a2, (uint64_t)a5, a3, (unint64_t *)a4, a6);
  }
  return this;
}

unint64_t re::ecs2::SkeletalPoseComponent::skeletalPose(re::ecs2::SkeletalPoseComponent *this, unint64_t a2, int a3)
{
  if (*((void *)this + 475) <= a2)
  {
    if (*((void *)this + 9) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return *((void *)this + 11) + 88 * a2;
  }
  else
  {
    unint64_t v3 = (re::BindPoint *)(*((void *)this + 476) + 48 * a2);
    if (a3)
    {
      return re::BindPoint::valueUntyped(v3);
    }
    else
    {
      return re::BindPoint::baseValueUntyped(v3);
    }
  }
}

double re::ecs2::SkeletalPoseComponent::constructPosesAndBindPoints(re::ecs2::SkeletalPoseComponent *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (*((void *)this + 2))
  {
    unint64_t v2 = *((void *)this + 9);
    unint64_t v3 = (char *)this + 3792;
    uint64_t v4 = (_anonymous_namespace_ *)re::FixedArray<re::BindPoint>::deinit((void *)this + 474);
    re::makeEntityBindNodeForComponent(this, (uint64_t)v21);
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    re::DynamicString::setCapacity(&v16, 0);
    if (v2)
    {
      uint64_t v6 = 0;
      for (unint64_t i = 0; i != v2; ++i)
      {
        re::DynamicString::assignf((re::DynamicString *)&v16, "SkeletalPose.skeletalPoses[%zu]", i);
        unint64_t v8 = v18;
        if ((v17 & 1) == 0) {
          unint64_t v8 = (char *)&v17 + 1;
        }
        uint64_t v9 = v17 >> 1;
        if (v17) {
          uint64_t v9 = v17 >> 1;
        }
        v13[0] = (uint64_t)v8;
        v13[1] = v9;
        re::BindNode::bindPointWithOverride<re::SkeletalPose>(v21, v13, (uint64_t)&v14);
        unint64_t v10 = *((void *)this + 475);
        if (v10 <= i)
        {
          uint64_t v20 = 0;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v30 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v22 = 136315906;
          uint64_t v23 = "operator[]";
          __int16 v24 = 1024;
          int v25 = 468;
          __int16 v26 = 2048;
          unint64_t v27 = i;
          __int16 v28 = 2048;
          unint64_t v29 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v11 = (void *)(*((void *)this + 476) + v6);
        *uint64_t v11 = v14;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v11 + 1), (uint64_t)v15);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v15);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v15);
        v6 += 48;
      }
    }
    if (v16)
    {
      if (v17) {
        (*(void (**)(void))(*v16 + 40))();
      }
    }
    return re::BindNode::deinit((re::BindNode *)v21);
  }
  return result;
}

uint64_t re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(re::ecs2::SkeletalPoseComponent *this, uint64_t a2)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  int v2 = *((unsigned __int8 *)this + 3816);
  if (!*((unsigned char *)this + 3816)) {
    return 0;
  }
  if (v2 == 1)
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)this + 2);
    if (v5)
    {
      uint64_t v6 = (re::ecs2::EntityComponentCollection *)(v5 + 32);
      uint64_t v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      uint64_t v8 = *(void *)(v5 + 176);
      BOOL v9 = !v7 || v8 == 0;
      if (!v9)
      {
        unint64_t v10 = (void *)v7;
        uint64_t result = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v8 + 32));
        if (!result) {
          return result;
        }
        uint64_t v11 = *(void *)(result + 392);
        uint64_t v85 = (re::MeshAsset *)result;
        unint64_t v12 = *(void *)(result + 376);
        uint64_t v13 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v13)
        {
          uint64_t v84 = *((void *)v13 + 26);
          unint64_t v86 = *((void *)v13 + 24);
        }
        else
        {
          unint64_t v86 = v12;
          uint64_t v84 = v11;
        }
        uint64_t v14 = v10[21];
        unint64_t v15 = v10[19];
        unint64_t v16 = v10[14];
        uint64_t v103 = v10[16];
        unint64_t v104 = v16;
        re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v4 + 478, 0);
        *((_DWORD *)v4 + 960) += 2;
        if ((v15 & 0x3F) != 0) {
          unint64_t v17 = (v15 >> 6) + 1;
        }
        else {
          unint64_t v17 = v15 >> 6;
        }
        *((void *)v4 + 48re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = v15;
        v113[0] = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::SkeletalPoseComponent *)((char *)v4 + 3824), v17, v113);
        *((void *)v4 + 486) = 0;
        ++*((_DWORD *)v4 + 974);
        uint64_t v79 = (re::ecs2::SkeletalPoseComponent *)((char *)v4 + 3872);
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v4 + 484, v15);
        re::DynamicArray<re::SkeletalPose>::clear((re::ecs2::SkeletalPoseComponent *)((char *)v4 + 3912));
        unint64_t v81 = (re::ecs2::SkeletalPoseComponent *)((char *)v4 + 3912);
        uint64_t v18 = (_anonymous_namespace_ *)re::DynamicArray<re::SkeletalPose>::setCapacity((void *)v4 + 489, v15);
        int v101 = 0;
        long long v99 = 0u;
        long long v100 = 0u;
        uint64_t v102 = 0x7FFFFFFFLL;
        unint64_t v89 = v15;
        if (!v15)
        {
LABEL_88:
          *((unsigned char *)v4 + 3816) = 2;
          re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)&v99);
          return 1;
        }
        uint64_t v19 = v14;
        uint64_t v20 = 0;
        uint64_t v21 = *((void *)v85 + 55);
        uint64_t v82 = v21 + 8;
        uint64_t v83 = v21 + 72;
        uint64_t v80 = v4;
        while (1)
        {
          uint64_t v22 = v19 + 56 * v20;
          unsigned int v25 = *(_DWORD *)(v22 + 4);
          __int16 v24 = (int *)(v22 + 4);
          unsigned int v23 = v25;
          unint64_t v26 = 0xBF58476D1CE4E5B9 * (v25 ^ ((unint64_t)v25 >> 30));
          unint64_t v27 = (0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31);
          if (!DWORD2(v100)) {
            break;
          }
          unint64_t v28 = v27 % DWORD2(v100);
          uint64_t v29 = *(unsigned int *)(*((void *)&v99 + 1) + 4 * v28);
          if (v29 != 0x7FFFFFFF)
          {
            while (*(_DWORD *)(v100 + 16 * v29 + 12) != v23)
            {
              uint64_t v29 = *(_DWORD *)(v100 + 16 * v29 + 8) & 0x7FFFFFFF;
              if (v29 == 0x7FFFFFFF) {
                goto LABEL_26;
              }
            }
            goto LABEL_87;
          }
LABEL_26:
          long long v30 = (unsigned int *)(v19 + 56 * v20);
          uint64_t v31 = *(unsigned int *)(*((void *)&v99 + 1) + 4 * v28);
          if (v31 == 0x7FFFFFFF) {
            goto LABEL_32;
          }
          unint64_t v32 = v86;
          while (*(_DWORD *)(v100 + 16 * v31 + 12) != v23)
          {
            uint64_t v31 = *(_DWORD *)(v100 + 16 * v31 + 8) & 0x7FFFFFFF;
            if (v31 == 0x7FFFFFFF) {
              goto LABEL_33;
            }
          }
LABEL_34:
          unint64_t v33 = *v30;
          if (v32 > v33)
          {
            uint64_t v34 = v19 + 56 * v20;
            int v36 = *(_DWORD *)(v34 + 8);
            uint64_t v35 = (_DWORD *)(v34 + 8);
            unint64_t v37 = v36 + v23;
            if (*(void *)(v19 + 56 * v20 + 32) && v104 >= v37)
            {
              uint64_t v39 = re::DataArray<re::MeshInstance>::get(v83, *(void *)(v84 + 8 * v33));
              uint64_t v40 = *(void *)(re::DataArray<re::MeshModel>::get(v82, *(void *)(v39 + 16)) + 176);
              if (v40)
              {
                uint64_t v19 = v14;
                unint64_t v41 = *(void *)(v40 + 8) <= (unint64_t)**(unsigned __int16 **)(v14 + 56 * v20 + 48)
                    ? 0xFFFFFFFFLL
                    : *(unsigned int *)(*(void *)(v40 + 16) + 72 * **(unsigned __int16 **)(v14 + 56 * v20 + 48) + 4);
              }
              else
              {
                unint64_t v41 = 0xFFFFFFFFLL;
                uint64_t v19 = v14;
              }
              if (*((void *)v85 + 117) > v41)
              {
                unint64_t v42 = (uint64_t *)re::MeshAsset::skeletonAtIndex(v85, v41);
                uint64_t v19 = v14;
                uint64_t v43 = v42[3];
                if (v43 == *v35)
                {
                  uint64_t v44 = v42;
                  *(void *)&v92.var0 = 0;
                  v92.var1 = "";
                  long long v93 = 0u;
                  long long v94 = 0u;
                  long long v95 = 0u;
                  int v96 = 0;
                  uint64_t v97 = 0;
                  uint64_t v98 = 0;
                  v113[0] = v42[4];
                  v113[1] = v43;
                  uint64_t v45 = re::globalAllocators((re *)v42);
                  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v45[2] + 32))(v45[2], 256, 8);
                  v116.i64[0] = v46;
                  re::SkeletalPose::init((uint64_t *)&v92, v116.i64);
                  if (v46) {

                  }
                  uint64_t v90 = re::MutableSlice<re::Matrix4x4<float>>::range(&v103, *v24, v37);
                  unint64_t v91 = v47;
                  unint64_t v48 = v44[6];
                  uint64_t v49 = v94;
                  unint64_t v87 = *((void *)&v93 + 1);
                  uint64_t v88 = v44[7];
                  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v113);
                  int v109 = 1;
                  uint64_t v110 = 0;
                  uint64_t v111 = 0;
                  v108[0] = v113;
                  v108[1] = 0;
                  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v108, 0);
                  v109 += 2;
                  if ((v48 & 0x3F) != 0) {
                    unint64_t v50 = (v48 >> 6) + 1;
                  }
                  else {
                    unint64_t v50 = v48 >> 6;
                  }
                  unint64_t v112 = v48;
                  v116.i64[0] = 0;
                  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v108, v50, &v116);
                  uint64_t v105 = 0;
                  int v106 = 0;
                  uint64_t v107 = 0;
                  re::FixedArray<re::Matrix4x4<float>>::init<>(&v105, (uint64_t)v113, v48);
                  if (v48)
                  {
                    for (unint64_t i = 0; i != v48; ++i)
                    {
                      unint64_t v53 = *(unsigned int *)(v88 + 4 * i);
                      if (v48 <= v53)
                      {
                        if (v91 <= i)
                        {
                          re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v91);
                          _os_crash();
                          __break(1u);
LABEL_90:
                          *(void *)&long long v115 = 0;
                          long long v119 = 0u;
                          long long v120 = 0u;
                          long long v117 = 0u;
                          long long v118 = 0u;
                          int32x4_t v116 = 0u;
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)long long v121 = 136315906;
                          *(void *)&v121[4] = "operator[]";
                          *(_WORD *)&v121[12] = 1024;
                          *(_DWORD *)&v121[14] = 468;
                          *(_WORD *)&v121[18] = 2048;
                          *(void *)&v121[20] = v53;
                          *(_WORD *)&v121[28] = 2048;
                          *(void *)&v121[30] = v35;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_91:
                          re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, i, v87);
                          _os_crash();
                          __break(1u);
LABEL_92:
                          re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v91);
                          _os_crash();
                          __break(1u);
LABEL_93:
                          re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, i, v87);
                          _os_crash();
                          __break(1u);
LABEL_94:
                          re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v53, v91);
                          _os_crash();
                          __break(1u);
LABEL_95:
                          *(void *)&long long v115 = 0;
                          long long v119 = 0u;
                          long long v120 = 0u;
                          long long v117 = 0u;
                          long long v118 = 0u;
                          int32x4_t v116 = 0u;
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)long long v121 = 136315906;
                          *(void *)&v121[4] = "operator[]";
                          *(_WORD *)&v121[12] = 1024;
                          *(_DWORD *)&v121[14] = 468;
                          *(_WORD *)&v121[18] = 2048;
                          *(void *)&v121[20] = v53;
                          *(_WORD *)&v121[28] = 2048;
                          *(void *)&v121[30] = v35;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
                        }
                        *(_OWORD *)long long v121 = xmmword_23435FBB0;
                        long long v115 = 0u;
                        int32x4_t v116 = 0u;
                        re::decomposeScaleRotationTranslation<float>(v90 + (i << 6), &v116, v121, &v115);
                        if (v87 <= i) {
                          goto LABEL_91;
                        }
                        uint64_t v65 = v116.i64[1];
                        uint64_t v66 = v116.i64[0];
                        uint64_t v68 = *(void *)v121;
                        uint64_t v67 = *(void *)&v121[8];
                        uint64_t v69 = *((void *)&v115 + 1);
                        uint64_t v70 = v115;
                      }
                      else
                      {
                        if ((re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)v108, *(unsigned int *)(v88 + 4 * i)) & 1) == 0)
                        {
                          if (v91 <= v53) {
                            goto LABEL_94;
                          }
                          simd_float4x4 v124 = __invert_f4(*(simd_float4x4 *)(v90 + (v53 << 6)));
                          uint64_t v35 = v106;
                          if ((unint64_t)v106 <= v53) {
                            goto LABEL_95;
                          }
                          *(simd_float4x4 *)(v107 + (v53 << 6)) = v124;
                          re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v108, v53);
                        }
                        uint64_t v35 = v106;
                        if ((unint64_t)v106 <= v53) {
                          goto LABEL_90;
                        }
                        if (v91 <= i) {
                          goto LABEL_92;
                        }
                        uint64_t v55 = 0;
                        uint64_t v56 = (float32x4_t *)(v107 + (v53 << 6));
                        float32x4_t v57 = *v56;
                        float32x4_t v58 = v56[1];
                        float32x4_t v59 = v56[2];
                        float32x4_t v60 = v56[3];
                        uint64_t v61 = (_OWORD *)(v90 + (i << 6));
                        long long v62 = v61[1];
                        long long v63 = v61[2];
                        long long v64 = v61[3];
                        *(_OWORD *)long long v121 = *v61;
                        *(_OWORD *)&v121[16] = v62;
                        *(_OWORD *)&v121[32] = v63;
                        long long v122 = v64;
                        do
                        {
                          *(float32x4_t *)((char *)&v116 + v55) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, COERCE_FLOAT(*(_OWORD *)&v121[v55])), v58, *(float32x2_t *)&v121[v55], 1), v59, *(float32x4_t *)&v121[v55], 2), v60, *(float32x4_t *)&v121[v55], 3);
                          v55 += 16;
                        }
                        while (v55 != 64);
                        *(_OWORD *)long long v121 = 0u;
                        long long v114 = 0u;
                        long long v115 = xmmword_23435FBB0;
                        re::decomposeScaleRotationTranslation<float>((uint64_t)&v116, (int32x4_t *)v121, &v115, &v114);
                        if (v87 <= i) {
                          goto LABEL_93;
                        }
                        uint64_t v66 = *(void *)v121;
                        uint64_t v65 = *(void *)&v121[8];
                        uint64_t v67 = *((void *)&v115 + 1);
                        uint64_t v68 = v115;
                        uint64_t v69 = *((void *)&v114 + 1);
                        uint64_t v70 = v114;
                      }
                      __int16 v71 = (uint64_t *)(v49 + 48 * i);
                      uint64_t *v71 = v66;
                      v71[1] = v65;
                      id v71[2] = v68;
                      v71[3] = v67;
                      v71[4] = v70;
                      v71[5] = v69;
                    }
                  }
                  if (v105 && v106) {
                    (*(void (**)(void))(*(void *)v105 + 40))();
                  }
                  uint64_t v4 = v80;
                  if (v108[0] && (v109 & 1) == 0) {
                    (*(void (**)(void))(*(void *)v108[0] + 40))();
                  }
                  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v113);
                  unint64_t v72 = *((void *)v80 + 486);
                  unint64_t v73 = *((void *)v80 + 485);
                  if (v72 >= v73)
                  {
                    unint64_t v74 = v72 + 1;
                    if (v73 < v72 + 1)
                    {
                      if (*(void *)v79)
                      {
                        uint64_t v75 = 2 * v73;
                        BOOL v9 = v73 == 0;
                        unint64_t v76 = 8;
                        if (!v9) {
                          unint64_t v76 = v75;
                        }
                        if (v76 <= v74) {
                          unint64_t v77 = v74;
                        }
                        else {
                          unint64_t v77 = v76;
                        }
                        re::DynamicArray<re::RigNodeConstraint>::setCapacity(v79, v77);
                      }
                      else
                      {
                        re::DynamicArray<re::RigNodeConstraint>::setCapacity(v79, v74);
                        ++*((_DWORD *)v80 + 974);
                      }
                    }
                    unint64_t v72 = *((void *)v80 + 486);
                  }
                  int v78 = (uint64_t *)(*((void *)v80 + 488) + 16 * v72);
                  uint64_t *v78 = v90;
                  v78[1] = v91;
                  ++*((void *)v80 + 486);
                  ++*((_DWORD *)v80 + 974);
                  re::DynamicArray<re::SkeletalPose>::add(v81, &v92);
                  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v92);
                  uint64_t v19 = v14;
                }
              }
            }
          }
LABEL_87:
          if (++v20 == v89) {
            goto LABEL_88;
          }
        }
        LODWORD(v2re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
        long long v30 = (unsigned int *)(v19 + 56 * v20);
LABEL_32:
        unint64_t v32 = v86;
LABEL_33:
        re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsCopy((uint64_t)&v99, v28, v27, (uint64_t)v24, v24);
        ++HIDWORD(v102);
        unsigned int v23 = *v24;
        uint64_t v19 = v14;
        goto LABEL_34;
      }
    }
    return 0;
  }
  if (v2 == 2) {
    return 1;
  }
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected post update pose state: %u", "!\"Unreachable code\"", "ensurePostUpdatePoses", 132, *((unsigned __int8 *)this + 3816));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

re::SkeletalPose *re::DynamicArray<re::SkeletalPose>::clear(re::SkeletalPose *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  if (v2)
  {
    uint64_t result = (re::SkeletalPose *)*((void *)result + 4);
    uint64_t v3 = 88 * v2;
    do
    {
      re::SkeletalPose::~SkeletalPose(result);
      uint64_t result = (re::SkeletalPose *)(v4 + 88);
      v3 -= 88;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void *re::ecs2::SkeletalPoseComponent::calculateSkeletalPoseBufferWithRig(re::ecs2::SkeletalPoseComponent *this, re::ecs2::MeshComponent *a2, re::ecs2::RigComponent *a3, re::ecs2::SkeletalPoseBufferComponent *a4)
{
  float32x4_t v24[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  unint64_t v23 = re::ecs2::SkeletalPoseComponent::calculateRigMappingDataDepHash((uint64_t)this, a3);
  uint64_t v8 = (const re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>((re::ecs2::MeshComponent *)((char *)a2 + 32));
  uint64_t v9 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((void *)this + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v9) {
    unint64_t v10 = (const re::MeshNameMap *)(v9 + 216);
  }
  else {
    unint64_t v10 = (const re::MeshAsset *)((char *)v8 + 448);
  }
  uint64_t v11 = (const re::SkeletalPoseDefinitionAsset *)re::ecs2::SkeletalPoseComponent::skeletalPoseDefinitionAsset(this, a2, &v23);
  unint64_t v12 = (*((void *)v10 + 1) + (v23 << 6) + (v23 >> 2) - 0x61C8864680B583E9) ^ v23;
  unint64_t v13 = 0xBF58476D1CE4E5B9 * (*((void *)a4 + 16) ^ (*((void *)a4 + 16) >> 30));
  uint64_t v14 = (v12 << 6) + (v12 >> 2) - 0x61C8864680B583E9;
  unint64_t v15 = (((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31)) + v14) ^ v12;
  unint64_t v16 = (re::ecs2::RigComponent *)((char *)a3 + 184);
  unint64_t v17 = (_anonymous_namespace_ *)re::ecs2::SkeletalPoseComponent::ensureSkeletalPoseRigMappingDataUpToDate(this, v11, v8, v10, v16, v12);
  if (*((void *)this + 94) != v15)
  {
    re::ecs2::SkeletalPoseComponent::constructPosesAndBindPoints(this);
  }
  if (*((void *)this + 60) != v12) {
    re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>((re::ecs2::SkeletalPoseComponent *)((char *)this + 472), (unint64_t)v11, (uint64_t)v16, v8, (unint64_t *)v10, v12);
  }
  re::ecs2::SkeletalPoseBufferComponent::initializeBufferRanges(a4, v8, v10, (re::ecs2::SkeletalPoseComponent *)((char *)this + 472));
  unint64_t v18 = 0xBF58476D1CE4E5B9 * (*((void *)a4 + 16) ^ (*((void *)a4 + 16) >> 30));
  unint64_t v19 = (((0x94D049BB133111EBLL * (v18 ^ (v18 >> 27))) ^ ((0x94D049BB133111EBLL * (v18 ^ (v18 >> 27))) >> 31)) + v14) ^ v12;
  if (*((void *)this + 94) == v19)
  {
    re::SkeletalPoseRuntimeData::executeEvaluationTree((uint64_t)this + 736);
  }
  else
  {
    re::makeBindNode(*((re **)this + 2), (uint64_t)v24);
    uint64_t v20 = *((void *)this + 475);
    v22[0] = *((void *)this + 476);
    v22[1] = v20;
    re::SkeletalPoseRuntimeData::update<re::MeshAsset>((re::ecs2::SkeletalPoseComponent *)((char *)this + 736), v11, (uint64_t)v16, v8, (uint64_t)v10, (re::ecs2::SkeletalPoseComponent *)((char *)this + 472), v19, v22, *((void *)a4 + 16), *((void *)a4 + 14), (uint64_t)this + 96, v24);
    re::BindNode::deinit((re::BindNode *)v24);
  }
  return re::ecs2::Component::markDirty(a4);
}

uint64_t re::ecs2::SkeletalPoseComponent::skeletalPoseDefinitionAsset(re::ecs2::SkeletalPoseComponent *this, const re::ecs2::MeshComponent *a2, unint64_t *a3)
{
  uint64_t v6 = (re::ecs2::SkeletalPoseComponent *)((char *)this + 32);
  uint64_t v7 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::ecs2::SkeletalPoseComponent *)((char *)this + 32));
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = *((void *)a2 + 5);
    if (v9) {
      uint64_t v10 = *(void *)(v9 + 664);
    }
    else {
      uint64_t v10 = 0;
    }
    unint64_t v13 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
    unint64_t v14 = v10 ^ (v13 >> 31) ^ v13;
    unint64_t v15 = *((void *)this + 5);
    if (v15) {
      uint64_t v16 = *(void *)(v15 + 664);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v17 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
    *a3 ^= (*a3 << 6)
         + (*a3 >> 2)
         - 0x61C8864680B583E9
         + (((v14 << 6) + (v14 >> 2) + (v16 ^ (v17 >> 31) ^ v17) - 0x61C8864680B583E9) ^ v14);
    if (*((void *)this + 17))
    {
      *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = 0;
      re::SkeletalPoseDefinitionAsset::deinit((re::ecs2::SkeletalPoseComponent *)((char *)this + 152));
    }
  }
  else
  {
    if (*((void *)this + 5)) {
      re::AssetHandle::loadAsync(v6);
    }
    unint64_t v11 = *((void *)a2 + 5);
    if (v11) {
      uint64_t v12 = *(void *)(v11 + 664);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v18 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
    unint64_t v19 = v12 ^ (v18 >> 31) ^ v18;
    if (v19 != *((void *)this + 17))
    {
      *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7) = v19;
      re::SkeletalPoseDefinitionAsset::deinit((re::ecs2::SkeletalPoseComponent *)((char *)this + 152));
      uint64_t v20 = (const re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>((const re::ecs2::MeshComponent *)((char *)a2 + 32));
      re::SkeletalPoseDefinitionAsset::init((re::ecs2::SkeletalPoseComponent *)((char *)this + 152), v20, 0);
      unint64_t v19 = *((void *)this + 17);
    }
    *a3 ^= v19 + (*a3 << 6) + (*a3 >> 2) - 0x61C8864680B583E9;
    return (uint64_t)this + 152;
  }
  return v8;
}

void re::ecs2::SkeletalPoseSystem::willAddSceneToECSService(re::ecs2::SkeletalPoseSystem *this, re::EventBus **a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v17 = (re::ecs2::Scene *)a2;
  re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::addScene((uint64_t)this + 152, (uint64_t)a2);
  uint64_t v4 = a2[36];
  if (v4)
  {
    uint64_t v16 = 0;
    long long v13 = 0u;
    long long v14 = 1uLL;
    long long v15 = 0uLL;
    uint64_t v5 = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 104, (uint64_t *)&v17, (uint64_t)&v13);
    re::BucketArray<RESubscriptionHandle,4ul>::deinit((uint64_t)&v13);
    uint64_t v6 = (_anonymous_namespace_ *)v13;
    if ((void)v13)
    {
      if ((v14 & 1) == 0) {
        uint64_t v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v13 + 40))();
      }
    }
    uint64_t v19 = re::globalAllocators((re *)v7)[2];
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v19 + 32))(v19, 32, 0);
    *uint64_t v8 = &unk_26E7074F8;
    v8[1] = this;
    _DWORD v8[2] = re::ecs2::SkeletalPoseSystem::removedSkeletalPoseBufferHandler;
    v8[3] = 0;
    uint64_t v20 = v8;
    uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v4, (uint64_t)v18, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v11 = v10;
    uint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,4ul>::addUninitialized(v5);
    *uint64_t v12 = v9;
    v12[1] = v11;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v18);
  }
}

void re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  v56[0] = a2;
  uint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v48 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v48);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)&v48);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v48);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v48;
    goto LABEL_49;
  }
LABEL_17:
  long long v55 = 0u;
  long long v48 = 0u;
  *(void *)&long long v49 = 0;
  *((void *)&v49 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = -1;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v52 = 0;
  uint64_t v53 = 1;
  long long v54 = 0uLL;
  unint64_t v16 = *(void *)(a1 + 40);
  *(void *)&long long v55 = 0;
  unint64_t v17 = *(void *)(a1 + 8);
  DWORD2(v55) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v16 + 4) >> 2);
    unint64_t v17 = *(void *)(a1 + 8);
  }
  if (v17 <= v16 >> 2)
  {
    v56[1] = 0;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v57 = 136315906;
    float32x4_t v58 = "operator[]";
    __int16 v59 = 1024;
    int v60 = 858;
    __int16 v61 = 2048;
    unint64_t v62 = v16 >> 2;
    __int16 v63 = 2048;
    unint64_t v64 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v18 = a1 + 24;
  }
  else {
    uint64_t v18 = *(void *)(a1 + 32);
  }
  uint64_t v19 = *(void *)(v18 + 8 * (v16 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v20 = v19 + 112 * (v16 & 3);
  long long v21 = v48;
  long long v22 = v49;
  long long v23 = v50;
  *(void *)(v20 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v51;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v23;
  *(_OWORD *)uint64_t v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v51 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v48);
  uint64_t v25 = *(void *)(a1 + 40);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::init(v26, a1, v56[0]);
  *(void *)&v65[0] = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)v65);
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 160);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 160) = v27;
  *(void *)&long long v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v29, &v48);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 160) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v32 = a1 + 144;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 152);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 128) - 8) &= v30;
  }
  unint64_t v33 = *(void *)(a1 + 40);
  unint64_t v34 = *(void *)(a1 + 208);
  if ((v33 & 0x3F) != 0) {
    unint64_t v35 = (v33 >> 6) + 1;
  }
  else {
    unint64_t v35 = v33 >> 6;
  }
  *(void *)(a1 + 20re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v33;
  *(void *)&long long v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v35, &v48);
  if (v33 && v34 > v33)
  {
    uint64_t v36 = 63;
    uint64_t v37 = *(void *)(a1 + 208) & 0x3FLL;
    if (v37 && v37 != 63) {
      uint64_t v36 = ~(-1 << v37);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v38 = a1 + 192;
    }
    else {
      uint64_t v38 = *(void *)(a1 + 200);
    }
    *(void *)(v38 + 8 * *(void *)(a1 + 176) - 8) &= v36;
  }
  unint64_t v15 = *(void *)&v65[0];
  uint64_t v14 = a1 + 168;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v39 = *(void *)(a1 + 176);
  int v40 = *(_DWORD *)(a1 + 184);
  if (v39 >= 0xB)
  {
    if (v40) {
      unint64_t v41 = (void *)(a1 + 192);
    }
    else {
      unint64_t v41 = *(void **)(a1 + 200);
    }
    uint64_t v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43) {
        return;
      }
    }
LABEL_65:
    unint64_t v47 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v47 + 86)) {
      re::ecs2::System::queueToRun(v47, 0.0);
    }
    return;
  }
  if (v40)
  {
    unint64_t v42 = (uint64_t *)(a1 + 192);
    if (!v39) {
      return;
    }
  }
  else
  {
    unint64_t v42 = *(uint64_t **)(a1 + 200);
    if (!v39) {
      return;
    }
  }
  uint64_t v44 = 0;
  uint64_t v45 = 8 * v39;
  do
  {
    uint64_t v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::SkeletalPoseSystem::removedSkeletalPoseBufferHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  uint64_t v17 = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 208), &v17);
  if (v6 != -1)
  {
    uint64_t v7 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 152, *(void *)(*(void *)(a1 + 216) + 16 * v6 + 8));
    uint64_t v8 = *(re::ecs2::Component **)(a2 + 232);
    if (v8)
    {
      uint64_t v9 = v7;
      uint64_t v10 = 24;
      unint64_t v11 = 0xFFFFFFFFLL;
      do
      {
        unint64_t v12 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v9 + 16), *(void *)(v9 + v10), v8);
        if (v12 != -1 && (v13 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v15 = v12;
          unint64_t v11 = v13;
          goto LABEL_13;
        }
        v10 += 8;
      }
      while (v10 != 56);
      unint64_t v15 = -1;
LABEL_13:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::setComponentState(v9, v15, v11);
    }
  }
  return 0;
}

uint64_t re::ecs2::SkeletalPoseSystem::willRemoveSceneFromECSService(re::ecs2::SkeletalPoseSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v11 = a2;
  uint64_t v3 = (char *)this + 104;
  uint64_t v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v11);
  if (v4)
  {
    uint64_t v5 = *((void *)v11 + 36);
    if (v5)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(void *)(v4 + 40);
      if (v7)
      {
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v9 = re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v6, i);
          re::EventBus::unsubscribe(v5, *(void *)v9, *(void *)(v9 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v11);
  }
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 152, (uint64_t)v11);
}

BOOL re::ecs2::SkeletalPosePreparationStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  unint64_t v8 = v37;
  unint64_t v9 = v38;
  unint64_t v37 = a4;
  unint64_t v38 = v8;
  unint64_t v39 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v38);
      unint64_t v15 = *(uint64_t **)v14;
      uint64_t v16 = *(void *)(*(void *)v14 + 16);
      if (v16)
      {
        uint64_t v17 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(v15 + 4));
        if (v17)
        {
          uint64_t v18 = (void *)v17;
          if (v15[17])
          {
            v15[17] = 0;
            re::SkeletalPoseDefinitionAsset::deinit((re::SkeletalPoseDefinitionAsset *)(v15 + 19));
          }
          unint64_t v19 = v37;
          unint64_t v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v38);
          long long v21 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(void *)(a3 + 32));
          goto LABEL_29;
        }
        re::AssetHandle::loadAsync((re::AssetHandle *)(v15 + 4));
        uint64_t v24 = *(void *)(v16 + 176);
        if (!v24) {
          goto LABEL_23;
        }
        long long v21 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v24 + 32));
        if (v21)
        {
          uint64_t v25 = v21;
          unint64_t v26 = *(void *)(v24 + 40);
          if (v26) {
            uint64_t v27 = *(void *)(v26 + 664);
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v30 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27));
          unint64_t v31 = v27 ^ (v30 >> 31) ^ v30;
          if (v31 == v15[17])
          {
LABEL_23:
            uint64_t v18 = 0;
          }
          else
          {
            v15[17] = v31;
            uint64_t v18 = v15 + 19;
            re::SkeletalPoseDefinitionAsset::deinit((re::SkeletalPoseDefinitionAsset *)(v15 + 19));
            re::SkeletalPoseDefinitionAsset::init((re::SkeletalPoseDefinitionAsset *)(v15 + 19), v25, 0);
          }
          uint64_t v32 = v15[5];
          if (!v32 || (unsigned int v33 = atomic_load((unsigned int *)(v32 + 704)), v33 != 1))
          {
            unint64_t v34 = v37;
            unint64_t v35 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v38);
            long long v21 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v34, v35, *(void *)(a3 + 32));
          }
          if (!v18) {
            goto LABEL_31;
          }
LABEL_29:
          if ((void *)v15[18] != v18)
          {
            v15[18] = (uint64_t)v18;
          }
          goto LABEL_31;
        }
        re::AssetHandle::loadAsync((re::AssetHandle *)(v24 + 32));
        uint64_t v28 = *(void *)(v24 + 40);
        if (!v28) {
          goto LABEL_23;
        }
        unsigned int v29 = atomic_load((unsigned int *)(v28 + 704));
        if (v29 != 1) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t v22 = v37;
        unint64_t v23 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v38);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v22, v23, *(void *)(a3 + 32));
      }
LABEL_31:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v38);
    }
    while (v38 != a5 || (unsigned __int16)v39 != 0xFFFF || WORD1(v39) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

uint64_t re::ecs2::SkeletalPosePreparationSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a3;
  v7[1] = a4;
  if (a2)
  {
    uint64_t v5 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v6);
    re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::updateForScene(v5 + 104, a2, (uint64_t)v7);
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v6);
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a2;
  unint64_t v5 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v16)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v5);
  uint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v5);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::update(v6, a3)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v5);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v7 = *(void *)(a1 + 176);
    int v8 = *(_DWORD *)(a1 + 184);
    if (v7 >= 0xB)
    {
      if (v8) {
        unint64_t v9 = (void *)(a1 + 192);
      }
      else {
        unint64_t v9 = *(void **)(a1 + 200);
      }
      uint64_t v11 = 8 * v7;
      while (!*v9)
      {
        ++v9;
        v11 -= 8;
        if (!v11) {
          return;
        }
      }
LABEL_19:
      unint64_t v15 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v15 + 86)) {
        re::ecs2::System::queueToRun(v15, 0.0);
      }
      return;
    }
    if (v8)
    {
      uint64_t v10 = (uint64_t *)(a1 + 192);
      if (!v7) {
        return;
      }
    }
    else
    {
      uint64_t v10 = *(uint64_t **)(a1 + 200);
      if (!v7) {
        return;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = 8 * v7;
    do
    {
      uint64_t v14 = *v10++;
      v12 |= v14;
      v13 -= 8;
    }
    while (v13);
    if (v12) {
      goto LABEL_19;
    }
  }
}

void re::ecs2::SkeletalPosePreparationSystem::willAddSceneToECSService(re::ecs2::SkeletalPosePreparationSystem *this, re::ecs2::Scene *a2)
{
}

uint64_t re::ecs2::SkeletalPosePreparationSystem::willRemoveSceneFromECSService(re::ecs2::SkeletalPosePreparationSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 104, (uint64_t)a2);
}

void *re::ecs2::SkeletalPoseComponentStateImpl::SkeletalPoseComponentStateImpl(void *a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  *a1 = &unk_26E707368;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v5[3] = re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 4;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(a1 + 2), (uint64_t)v4);
  return a1;
}

BOOL re::ecs2::SkeletalPoseComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v26, a5, 0);
  unint64_t v8 = v26;
  unint64_t v9 = v27;
  unint64_t v26 = a4;
  unint64_t v27 = v8;
  unint64_t v28 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = *(re::ecs2::SkeletalPoseComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v27);
      uint64_t v15 = *((void *)v14 + 2);
      uint64_t v16 = (unint64_t *)(a3 + 32);
      if (v15)
      {
        uint64_t v16 = (unint64_t *)(a3 + 32);
        if (*(unsigned char *)(v15 + 288))
        {
          if (*((void *)v14 + 475) != *((void *)v14 + 9)) {
            re::ecs2::SkeletalPoseComponent::constructPosesAndBindPoints(v14);
          }
          uint64_t v17 = (re::ecs2::EntityComponentCollection *)(v15 + 32);
          uint64_t v18 = *(void *)(v15 + 176);
          uint64_t v19 = re::ecs2::EntityComponentCollection::get(v17, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          uint64_t v16 = (unint64_t *)(a3 + 32);
          if (v18)
          {
            if (v19) {
              BOOL v20 = *(void *)(v18 + 40) == 0;
            }
            else {
              BOOL v20 = 1;
            }
            if (v20) {
              uint64_t v16 = (unint64_t *)(a3 + 32);
            }
            else {
              uint64_t v16 = (unint64_t *)(a3 + 40);
            }
          }
        }
      }
      unint64_t v21 = v26;
      unint64_t v22 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v27);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v21, v22, *v16);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
    }
    while (v27 != a5 || (unsigned __int16)v28 != 0xFFFF || WORD1(v28) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::SkeletalPoseComponentStateImpl::processPreparingComponents(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  unint64_t v9 = (re::ProfilerConfig *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v124, a5, 0);
  long long v10 = v124[0];
  *(void *)&v124[0] = a4;
  *(_OWORD *)((char *)v124 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v10;
  BOOL v12 = (void)v10 == a5 && WORD4(v10) == 0xFFFFLL && (DWORD2(v10) & 0xFFFF0000) == 4294901760;
  long long v121 = a2;
  if (v12)
  {
    unint64_t v123 = 0;
  }
  else
  {
    unint64_t v123 = 0;
    do
    {
      uint64_t v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v124 + 4);
      uint64_t v14 = *(re::ecs2::SkeletalPoseComponent **)v13;
      uint64_t v15 = *(void **)(*(void *)v13 + 16);
      uint64_t v16 = (void *)v15[22];
      uint64_t v17 = v16[5];
      if (v17 && (unsigned int v18 = atomic_load((unsigned int *)(v17 + 704)), v18 == 2))
      {
        uint64_t v19 = (re::ecs2::RigComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        BOOL v20 = (re::ecs2::SkeletalPoseBufferComponent *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        re::ecs2::SkeletalPoseComponent::calculateSkeletalPoseBufferWithRig(v14, (re::ecs2::MeshComponent *)v16, v19, v20);
        unint64_t v21 = (re::ecs2::NetworkComponent *)v15[25];
        if (v21) {
          re::ecs2::NetworkComponent::markDirty(v21, v20);
        }
        v123 += *((void *)v14 + 91);
        uint64_t v22 = *((void *)v14 + 5);
        if (!v22 || (unsigned int v23 = atomic_load((unsigned int *)(v22 + 704)), v23 != 1))
        {
          unint64_t v24 = *(void *)&v124[0];
          unint64_t v25 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v124 + 4);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v24, v25, *(void *)(a3 + 48));
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v16 + 4));
      }
      unint64_t v9 = (re::ProfilerConfig *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)v124 + 4);
    }
    while (*((void *)&v124[0] + 1) != a5 || LOWORD(v124[1]) != 0xFFFF || WORD1(v124[1]) != 0xFFFF);
  }
  uint64_t v28 = *(void *)(a3 + 8);
  unsigned int v29 = *(re::EventBus **)(v28 + 288);
  if (v29)
  {
    uint64_t updated = re::EventBus::subscriptionCountInternal<re::ecs2::Scene,REAnimationSkeletalPoseUpdateCompleteEvent>(*(void *)(v28 + 288), v28);
    unint64_t v9 = (re::ProfilerConfig *)re::EventBus::subscriptionCountInternal<re::ecs2::Scene,REAnimationSkeletalPoseUpdateCompleteEvent>((uint64_t)v29, 0);
    if ((re::ProfilerConfig *)((char *)v9 + updated))
    {
      uint64_t v31 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v28 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v31)
      {
        uint64_t v32 = *(void *)(v31 + 24);
        if (v32)
        {
          unsigned int v33 = *(uint64_t **)(v31 + 40);
          uint64_t v34 = 8 * v32;
          do
          {
            uint64_t v35 = *v33++;
            *(unsigned char *)(v35 + 3816) = 1;
            v34 -= 8;
          }
          while (v34);
        }
      }
      LODWORD(v124[0]) = *v121;
      uint64_t Type = re::EventBus::getTypeId<REAnimationSkeletalPoseUpdateCompleteEvent>();
      re::EventBus::publish(v29, v28, Type, (uint64_t)v124, 4uLL, 0);
      unint64_t v9 = (re::ProfilerConfig *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v28 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v9)
      {
        uint64_t v37 = *((void *)v9 + 3);
        if (v37)
        {
          unint64_t v38 = (uint64_t *)*((void *)v9 + 5);
          long long v122 = &v38[v37];
          do
          {
            uint64_t v39 = *v38;
            if (*(unsigned char *)(*v38 + 3816) == 2)
            {
              uint64_t v40 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(v39 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v40)
              {
                uint64_t v41 = v40;
                unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v39 + 3824, 0);
                if (FirstBitSet != -1)
                {
                  for (unint64_t i = FirstBitSet;
                        i != -1;
                        unint64_t i = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v39 + 3824, i + 1))
                  {
                    unint64_t v45 = *(void *)(v39 + 3888);
                    if (v45 <= i) {
                      goto LABEL_71;
                    }
                    uint64_t v46 = (unint64_t *)(*(void *)(v39 + 3904) + 16 * i);
                    unint64_t v48 = *v46;
                    unint64_t v47 = v46[1];
                    unint64_t v49 = *(void *)(v41 + 128);
                    if (v48 >= v49 && v48 + (v47 << 6) <= v49 + (*(void *)(v41 + 112) << 6))
                    {
                      unint64_t v45 = *(void *)(v39 + 3928);
                      if (v45 <= i) {
                        goto LABEL_72;
                      }
                      uint64_t v51 = *(void *)(v39 + 3944);
                      if (v47 == *(void *)(v51 + 88 * i + 24))
                      {
                        uint64_t v52 = v51 + 88 * i;
                        uint64_t v53 = *(void *)(v52 + 80);
                        unint64_t v54 = *(void *)(v53 + 72);
                        if (v54)
                        {
                          unint64_t v55 = 0;
                          uint64_t v56 = *(void *)(v53 + 80);
                          uint64_t v57 = *(void *)(v52 + 32);
                          do
                          {
                            unint64_t v58 = *(unsigned int *)(v56 + 4 * v55);
                            if (v54 <= v58)
                            {
                              if (v47 <= v55) {
                                goto LABEL_69;
                              }
                              long long v93 = (float32x4_t *)(v57 + 48 * v55);
                              float32x4_t v91 = v93[2];
                              v91.i32[3] = 1.0;
                              float v94 = v93[1].f32[0];
                              float v95 = v93[1].f32[1];
                              float v96 = v94 + v94;
                              float v97 = v93[1].f32[2];
                              float v98 = v93[1].f32[3];
                              float v99 = (float)(v94 + v94) * v97;
                              float v100 = (float)(v95 + v95) * v98;
                              float v101 = v97 * (float)(v95 + v95);
                              float v102 = (float)(v94 + v94) * v98;
                              float v103 = v94 * (float)(v94 + v94);
                              float v104 = v95 * (float)(v95 + v95);
                              v105.i32[3] = 0;
                              v105.f32[0] = v99 + v100;
                              v105.f32[1] = v101 - v102;
                              v105.f32[2] = 1.0 - (float)(v103 + v104);
                              float32x4_t v92 = vmulq_laneq_f32(v105, *v93, 2);
                              float v106 = v96 * v95;
                              float v107 = (float)(v97 + v97) * v98;
                              float v108 = v97 * (float)(v97 + v97);
                              *(float *)&unsigned int v109 = v101 + v102;
                              v110.f32[0] = v106 - v107;
                              v110.f32[1] = 1.0 - (float)(v103 + v108);
                              v110.i64[1] = v109;
                              float32x4_t v89 = vmulq_n_f32(v110, *(float *)vshrq_n_u64(*(uint64x2_t *)v93, 0x20uLL).i32);
                              float32_t v111 = v106 + v107;
                              v112.i32[3] = 0;
                              v112.f32[0] = 1.0 - (float)(v108 + v104);
                              v112.f32[1] = v111;
                              v112.f32[2] = v99 - v100;
                              float32x4_t v90 = vmulq_n_f32(v112, COERCE_FLOAT(*v93));
                            }
                            else
                            {
                              if (v47 <= v58)
                              {
                                re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *(unsigned int *)(v56 + 4 * v55), v47);
                                _os_crash();
                                __break(1u);
LABEL_69:
                                re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v55, v47);
                                _os_crash();
                                __break(1u);
LABEL_70:
                                re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v55, v47);
                                _os_crash();
                                __break(1u);
LABEL_71:
                                float32x4_t v126 = 0u;
                                long long v127 = 0u;
                                float32x4_t v125 = 0u;
                                memset(v124, 0, sizeof(v124));
                                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                *(_DWORD *)unint64_t v128 = 136315906;
                                *(void *)&v128[4] = "operator[]";
                                *(_WORD *)&v128[12] = 1024;
                                *(_DWORD *)&v128[14] = 789;
                                *(_WORD *)&v128[18] = 2048;
                                *(void *)&v128[20] = i;
                                *(_WORD *)&v128[28] = 2048;
                                *(void *)&v128[30] = v45;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
LABEL_72:
                                float32x4_t v126 = 0u;
                                long long v127 = 0u;
                                float32x4_t v125 = 0u;
                                memset(v124, 0, sizeof(v124));
                                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                *(_DWORD *)unint64_t v128 = 136315906;
                                *(void *)&v128[4] = "operator[]";
                                *(_WORD *)&v128[12] = 1024;
                                *(_DWORD *)&v128[14] = 789;
                                *(_WORD *)&v128[18] = 2048;
                                *(void *)&v128[20] = i;
                                *(_WORD *)&v128[28] = 2048;
                                *(void *)&v128[30] = v45;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
                              }
                              if (v47 <= v55) {
                                goto LABEL_70;
                              }
                              unint64_t v59 = 0;
                              int v60 = (float32x4_t *)(v57 + 48 * v55);
                              float v61 = v60[1].f32[0];
                              float v62 = v60[1].f32[1];
                              float v63 = v60[1].f32[2];
                              float v64 = v60[1].f32[3];
                              float32x4_t v65 = *v60;
                              float32x4_t v66 = v60[2];
                              uint64_t v67 = (float32x4_t *)(v48 + (v58 << 6));
                              float v68 = v61 + v61;
                              float v69 = v62 + v62;
                              float v70 = v63 + v63;
                              float v71 = v61 * (float)(v61 + v61);
                              float v72 = v62 * (float)(v62 + v62);
                              float v73 = v63 * (float)(v63 + v63);
                              float v74 = v68 * v62;
                              float v75 = v68 * v63;
                              float v76 = v69 * v63;
                              float v77 = v68 * v64;
                              float v78 = v69 * v64;
                              float v79 = v70 * v64;
                              v80.i32[3] = 0;
                              v80.f32[0] = 1.0 - (float)(v72 + v73);
                              v80.f32[1] = v74 + v79;
                              v80.f32[2] = v75 - v78;
                              v81.i32[3] = 0;
                              v81.f32[0] = v74 - v79;
                              v81.f32[1] = 1.0 - (float)(v71 + v73);
                              v81.f32[2] = v76 + v77;
                              float32_t v82 = v76 - v77;
                              v83.i32[3] = 0;
                              v83.f32[0] = v75 + v78;
                              v83.f32[1] = v82;
                              v83.f32[2] = 1.0 - (float)(v71 + v72);
                              v66.i32[3] = 1.0;
                              float32x4_t v84 = vmulq_n_f32(v81, *(float *)vshrq_n_u64(*(uint64x2_t *)v60, 0x20uLL).i32);
                              float32x4_t v85 = *v67;
                              float32x4_t v86 = v67[1];
                              float32x4_t v87 = v67[2];
                              float32x4_t v88 = v67[3];
                              *(float32x4_t *)unint64_t v128 = vmulq_n_f32(v80, COERCE_FLOAT(*v60));
                              *(float32x4_t *)&v128[16] = v84;
                              *(float32x4_t *)&v128[32] = vmulq_laneq_f32(v83, v65, 2);
                              float32x4_t v129 = v66;
                              do
                              {
                                v124[v59 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v85, COERCE_FLOAT(*(_OWORD *)&v128[v59])), v86, *(float32x2_t *)&v128[v59], 1), v87, *(float32x4_t *)&v128[v59], 2), v88, *(float32x4_t *)&v128[v59], 3);
                                v59 += 16;
                              }
                              while (v59 != 64);
                              float32x4_t v90 = (float32x4_t)v124[0];
                              float32x4_t v89 = (float32x4_t)v124[1];
                              float32x4_t v92 = v125;
                              float32x4_t v91 = v126;
                            }
                            unint64_t v113 = (float32x4_t *)(v48 + (v55 << 6));
                            *unint64_t v113 = v90;
                            v113[1] = v89;
                            v113[2] = v92;
                            v113[3] = v91;
                            ++v55;
                          }
                          while (v55 != v54);
                        }
                      }
                    }
                  }
                }
              }
            }
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v39 + 3824);
            *(void *)(v39 + 3864) = 0;
            *(void *)(v39 + 388re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
            ++*(_DWORD *)(v39 + 3896);
            unint64_t v9 = re::DynamicArray<re::SkeletalPose>::clear((re::SkeletalPose *)(v39 + 3912));
            *(unsigned char *)(v39 + 3816) = 0;
            ++v38;
          }
          while (v38 != v122);
        }
      }
    }
  }
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v9);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v115 = re::profilerThreadContext(isStatisticCollectionEnabled);
    int32x4_t v116 = *(int64x2_t **)(v115 + 152);
    if (v116)
    {
      unint64_t v117 = v116[472].u64[0];
      if (v117 >= v123) {
        unint64_t v117 = v123;
      }
      v116[472].i64[0] = v117;
      unint64_t v118 = v116[472].u64[1];
      if (v118 <= v123) {
        unint64_t v118 = v123;
      }
      v116[472].i64[1] = v118;
      int64x2_t v119 = vdupq_n_s64(1uLL);
      v119.i64[0] = v123;
      v116[473] = vaddq_s64(v116[473], v119);
      *(unsigned char *)(v115 + 184) = 0;
    }
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::SkeletalPoseSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v43[0] = a2;
  v43[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v42);
  id WeakRetained = (id *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40));
  if (v5)
  {
    uint64_t v6 = WeakRetained;
    unint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    do
    {
      id WeakRetained = (id *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        unint64_t v9 = WeakRetained;
        uint64_t v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v10) {
          uint64_t v11 = *(void *)(v10 + 24);
        }
        else {
          uint64_t v11 = 0;
        }
        v7 += v11;
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)WeakRetained);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v13 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v14 = *(int64x2_t **)(v13 + 152);
    if (v14)
    {
      unint64_t v15 = v14[436].u64[0];
      if (v15 >= v7) {
        unint64_t v15 = v7;
      }
      v14[436].i64[0] = v15;
      unint64_t v16 = v14[436].u64[1];
      if (v16 <= v7) {
        unint64_t v16 = v7;
      }
      v14[436].i64[1] = v16;
      int64x2_t v17 = vdupq_n_s64(1uLL);
      v17.i64[0] = v7;
      v14[437] = vaddq_s64(v14[437], v17);
      *(unsigned char *)(v13 + 184) = 0;
    }
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  unsigned int v18 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v49, (uint64_t *)(a1 + 320));
  void v52[2] = *(void *)(a1 + 360);
  int v45 = 1;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  v44[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v44, 0);
  v45 += 2;
  unint64_t v19 = *(void *)(a1 + 360);
  if ((v19 & 0x3F) != 0) {
    unint64_t v20 = (v19 >> 6) + 1;
  }
  else {
    unint64_t v20 = v19 >> 6;
  }
  uint64_t v48 = *(void *)(a1 + 360);
  uint64_t v53 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v44, v20, &v53);
  int v21 = *(_DWORD *)(a1 + 336);
  if (v21) {
    uint64_t v22 = (void *)(a1 + 344);
  }
  else {
    uint64_t v22 = *(void **)(a1 + 352);
  }
  uint64_t v23 = *(void *)(a1 + 328);
  unint64_t v24 = (uint64_t *)(a1 + 344);
  while (1)
  {
    uint64_t v25 = a1 + 344;
    if ((v21 & 1) == 0) {
      uint64_t v25 = *(void *)(a1 + 352);
    }
    if (v22 == (void *)(v25 + 8 * v23)) {
      break;
    }
    *v22++ = 0;
    int v21 = *(_DWORD *)(a1 + 336);
  }
  unint64_t v26 = v52;
  if ((v51 & 1) == 0) {
    unint64_t v26 = (unint64_t *)v52[1];
  }
  uint64_t v27 = v50;
  if ((v50 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v28 = 0;
    while (1)
    {
      unint64_t v30 = *v26++;
      unint64_t v29 = v30;
      if (v30) {
        break;
      }
      v28 -= 64;
      if (!--v27) {
        goto LABEL_44;
      }
    }
    unint64_t v31 = __clz(__rbit64(v29));
    if (v31 + 1 != v28)
    {
      unint64_t FirstBitSet = v31 - v28;
      do
      {
        unsigned int v33 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 152, FirstBitSet);
        if (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::update(v33, (uint64_t)v43))re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v44, FirstBitSet); {
        else
        }
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v44, FirstBitSet);
        unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v49, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_44:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 320, (uint64_t)v44);
  if (*(unsigned char *)(a1 + 384))
  {
    unint64_t v34 = *(void *)(a1 + 328);
    int v35 = *(_DWORD *)(a1 + 336);
    if (v34 >= 0xB)
    {
      if ((v35 & 1) == 0) {
        unint64_t v24 = *(uint64_t **)(a1 + 352);
      }
      uint64_t v36 = 8 * v34;
      while (!*v24)
      {
        ++v24;
        v36 -= 8;
        if (!v36) {
          goto LABEL_60;
        }
      }
      goto LABEL_58;
    }
    if ((v35 & 1) == 0) {
      unint64_t v24 = *(uint64_t **)(a1 + 352);
    }
    if (v34)
    {
      uint64_t v37 = 0;
      uint64_t v38 = 8 * v34;
      do
      {
        uint64_t v39 = *v24++;
        v37 |= v39;
        v38 -= 8;
      }
      while (v38);
      if (v37)
      {
LABEL_58:
        uint64_t v40 = *(re::ecs2::System **)(a1 + 368);
        if (!*((unsigned char *)v40 + 86)) {
          re::ecs2::System::queueToRun(v40, 0.0);
        }
      }
    }
  }
LABEL_60:
  if (v44[0] && (v45 & 1) == 0) {
    (*(void (**)(void))(*(void *)v44[0] + 40))();
  }
  if (v49 && (v51 & 1) == 0) {
    (*(void (**)(void))(*(void *)v49 + 40))();
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v42);
}

uint64_t re::ecs2::SkeletalPoseSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  uint64_t v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v16);
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    unint64_t v10 = v9 ? *(void *)(v9 + 24) : 0;
    uint64_t v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      unint64_t v12 = v11[436].u64[0];
      if (v12 >= v10) {
        unint64_t v12 = v10;
      }
      v11[436].i64[0] = v12;
      unint64_t v13 = v11[436].u64[1];
      if (v13 <= v10) {
        unint64_t v13 = v10;
      }
      v11[436].i64[1] = v13;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[437] = vaddq_s64(v11[437], v14);
      *(unsigned char *)(v8 + 184) = 0;
    }
  }
  if (re::internal::enableSignposts(0, 0))
  {
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    kdebug_trace();
  }
  re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::updateForScene(a1 + 152, a2, (uint64_t)v17);
  if (re::internal::enableSignposts(0, 0))
  {
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    kdebug_trace();
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v16);
}

void *re::ecs2::allocInfo_SkeletalPoseComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E510, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E510))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E5F0, "SkeletalPoseComponent");
    __cxa_guard_release(&qword_26AF8E510);
  }
  return &unk_26AF8E5F0;
}

void re::ecs2::initInfo_SkeletalPoseComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x1C1B51CD3B030266;
  v17[1] = "SkeletalPoseComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E518, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8E518);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8E550 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalPose>>::get();
      uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "skeletalPoses";
      *(void *)(v9 + 16) = &qword_26AF8E570;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x3800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF8E558 = v9;
      unint64_t v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>::get();
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "modelSpaceTransforms";
      *(void *)(v11 + 16) = qword_26AF8E5B0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x6000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8E560 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      int64x2_t v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = "skeletalPoseDefinition";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = 0x2000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8E568 = v15;
      __cxa_guard_release(&qword_26AF8E518);
    }
  }
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0xF7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 4;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &qword_26AF8E550;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPoseComponent>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalPoseComponent>;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::SkeletalPoseComponent>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPoseComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::IntrospectionInfo<re::DynamicArray<re::SkeletalPose>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E540))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8E570);
    qword_26AF8E570 = (uint64_t)&unk_26E7076B0;
    __cxa_guard_release(&qword_26AF8E540);
  }
  if ((_MergedGlobals_314 & 1) == 0)
  {
    uint64_t v0 = re::introspect_SkeletalPose((re::IntrospectionBase **)1);
    if ((_MergedGlobals_314 & 1) == 0)
    {
      uint64_t v1 = v0;
      _MergedGlobals_314 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8E570, 0);
      qword_26AF8E580 = 0x2800000003;
      dword_26AF8E588 = v2;
      word_26AF8E58C = 0;
      *(void *)&xmmword_26AF8E590 = 0;
      *((void *)&xmmword_26AF8E590 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      qword_26AF8E5A0 = v1;
      unk_26AF8E5A8 = 0;
      qword_26AF8E570 = (uint64_t)&unk_26E7076B0;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF8E570, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF8E590 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E548, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E548))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_26AF8E5B0);
    qword_26AF8E5B0[0] = (uint64_t)&unk_26E707748;
    __cxa_guard_release(&qword_26AF8E548);
  }
  if ((byte_26AF8E509 & 1) == 0)
  {
    uint64_t v0 = re::IntrospectionInfo<re::DynamicArray<re::Matrix4x4<float>>>::get(1);
    if ((byte_26AF8E509 & 1) == 0)
    {
      uint64_t v1 = v0;
      byte_26AF8E509 = 1;
      int v2 = *((_DWORD *)v0 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF8E5B0, 0);
      unk_26AF8E5C0 = 0x2800000003;
      unk_26AF8E5C8 = v2;
      unk_26AF8E5CC = 0;
      *(void *)&xmmword_26AF8E5D0 = 0;
      *((void *)&xmmword_26AF8E5D0 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = 0xFFFFFFFFLL;
      unk_26AF8E5E0 = v1;
      unk_26AF8E5E8 = 0;
      qword_26AF8E5B0[0] = (uint64_t)&unk_26E707748;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)qword_26AF8E5B0, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *((_OWORD *)v1 + 2);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF8E5D0 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void *re::internal::defaultConstruct<re::ecs2::SkeletalPoseComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::SkeletalPoseComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::SkeletalPoseComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SkeletalPoseComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SkeletalPoseComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseComponent>, this);
}

void *re::ecs2::allocInfo_SkeletalPosePreparationSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E520, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E520))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E668, "SkeletalPosePreparationSystem");
    __cxa_guard_release(&qword_26AF8E520);
  }
  return &unk_26AF8E668;
}

void re::ecs2::initInfo_SkeletalPosePreparationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x6B6CEF3DEADF8BB8;
  v5[1] = "SkeletalPosePreparationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x17800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &re::ecs2::initInfo_SkeletalPosePreparationSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPosePreparationSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalPosePreparationSystem>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::SkeletalPosePreparationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = re::internal::defaultRelease<re::ecs2::SkeletalPosePreparationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::SkeletalPosePreparationSystem>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPosePreparationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::SkeletalPosePreparationSystem *re::internal::defaultConstruct<re::ecs2::SkeletalPosePreparationSystem>(int a1, int a2, re::ecs2::SkeletalPosePreparationSystem *this)
{
  return re::ecs2::SkeletalPosePreparationSystem::SkeletalPosePreparationSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalPosePreparationSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  a3[43] = &unk_26E707328;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 44);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalPosePreparationSystem>(void *a1)
{
  a1[43] = &unk_26E707328;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 44);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkeletalPosePreparationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPosePreparationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPosePreparationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPosePreparationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPosePreparationSystem>, this);
}

void *re::ecs2::allocInfo_SkeletalPoseSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E528))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E6E0, "SkeletalPoseSystem");
    __cxa_guard_release(&qword_26AF8E528);
  }
  return &unk_26AF8E6E0;
}

void re::ecs2::initInfo_SkeletalPoseSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x404DC95C0462D372;
  v5[1] = "SkeletalPoseSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = 0x1B000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = &re::ecs2::initInfo_SkeletalPoseSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPoseSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalPoseSystem>;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1) = re::internal::defaultRetain<re::ecs2::SkeletalPoseSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = re::internal::defaultRelease<re::ecs2::SkeletalPoseSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = re::internal::defaultConstructV2<re::ecs2::SkeletalPoseSystem>;
  *((void *)this + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPoseSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::SkeletalPoseSystem *re::internal::defaultConstruct<re::ecs2::SkeletalPoseSystem>(int a1, int a2, re::ecs2::SkeletalPoseSystem *this)
{
  return re::ecs2::SkeletalPoseSystem::SkeletalPoseSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalPoseSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  a3[49] = (uint64_t)&unk_26E707368;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 51);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 19);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 13);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalPoseSystem>(uint64_t *a1)
{
  a1[49] = (uint64_t)&unk_26E707368;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 51);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 19);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 13);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkeletalPoseSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseSystem>, this);
}

uint64_t re::ecs2::SkeletalPosePreparationStateImpl::dependsOnComponents(re::ecs2::SkeletalPosePreparationStateImpl *this)
{
  return *((void *)this + 3);
}

void re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(re::ecs2::Component **)(a3 + 232);
  if (v3)
  {
    uint64_t v5 = 24;
    unint64_t v6 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v5), v3);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v10 = v7;
        unint64_t v6 = v8;
        goto LABEL_11;
      }
      v5 += 8;
    }
    while (v5 != 56);
    unint64_t v10 = -1;
LABEL_11:
    re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::setComponentState(a2, v10, v6);
  }
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::SkeletalPosePreparationSystem::~SkeletalPosePreparationSystem(re::ecs2::SkeletalPosePreparationSystem *this)
{
  *((void *)this + 4re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = &unk_26E707328;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 44);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 4re::HashTable<re::ecs2::Scene *,re::DynamicOverflowArray<RESubscriptionHandle,1ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 3) = &unk_26E707328;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 44);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::SkeletalPosePreparationSystem::typeInfo(re::ecs2::SkeletalPosePreparationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPosePreparationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPosePreparationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPosePreparationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPosePreparationSystem>, 0);
}

uint64_t re::ecs2::SkeletalPoseComponentStateImpl::dependsOnComponents(re::ecs2::SkeletalPoseComponentStateImpl *this)
{
  return *((void *)this + 4);
}

void re::ecs2::SkeletalPoseSystem::~SkeletalPoseSystem(re::ecs2::SkeletalPoseSystem *this)
{
  *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = &unk_26E707368;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 51);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 19);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 9) = &unk_26E707368;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 51);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 19);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::SkeletalPoseSystem::typeInfo(re::ecs2::SkeletalPoseSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  int v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    int v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7074F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7074F8;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 16 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 16 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 16 * v8 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v11 | 0x80000000;
  uint64_t v12 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 16 * v8 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 16 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 16 * vre::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = a3;
  *(_DWORD *)(*(void *)(a1 + 16) + 16 * v8 + 1re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = *a5;
  *(_DWORD *)(v12 + 4 * are::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&unsigned char v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsCopy(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 12, *(void *)&v13[16] + v10 + 12);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 16;
        }
        while (v11 < v9);
      }
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unsigned int v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unsigned int v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E707550;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    void v10[3] = 0;
    float32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    long long v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    void *v16 = &unk_26E7075A8;
    v16[1] = a1;
    uint64_t v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    _OWORD v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    void *v22 = &unk_26E707600;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    _OWORD v22[3] = 0;
    float v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    unint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    void *v28 = &unk_26E707658;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    float v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        float v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        void *v37 = &unk_26E707550;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        float v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E7075A8;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        void *v49 = &unk_26E707600;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v53 = v50;
        v53[1] = v52;
        unint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        float v62 = 0;
        unint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E707658;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        float v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        unint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      long long v8 = (void *)(v4 + 192);
    }
    else {
      long long v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unsigned int v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 232);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      long long v8 = (void *)(v4 + 192);
    }
    else {
      long long v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unsigned int v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 232);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      long long v8 = (void *)(v4 + 192);
    }
    else {
      long long v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unsigned int v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 232);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      long long v8 = (void *)(v4 + 192);
    }
    else {
      long long v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unsigned int v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 232);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E707550;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E707550;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7075A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7075A8;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E707600;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E707600;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E707658;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E707658;
  *(void *)(a2 + re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::update(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 224);
  unint64_t v5 = a1[3];
  unint64_t v6 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v5);
  if (*(_DWORD *)(v6 + 40)) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 24))(v4, a2, a1, v5, v6, 0);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = a1[5];
  unint64_t v9 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v8);
  if (*(_DWORD *)(v9 + 40)) {
    uint64_t v7 = v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 32))(v4, a2, a1, v8, v9, 0);
  }
  unint64_t v10 = a1[6];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    return v7 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v4 + 40))(v4, a2, a1, v10, v11, 0);
  }
  return v7;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Scene,REAnimationSkeletalPoseUpdateCompleteEvent>(uint64_t a1, uint64_t a2)
{
  v9[0] = re::EventBus::getTypeId<REAnimationSkeletalPoseUpdateCompleteEvent>();
  uint64_t v4 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), v9);
  if (v4 == -1) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 48 * v4 + 8);
  if (!v5) {
    return 0;
  }
  if (!a2)
  {
    uint64_t v7 = v5 + 88;
    return *(void *)(v7 + 120);
  }
  v9[0] = a2;
  v9[1] = 0;
  uint64_t v6 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(v5 + 216), v9);
  if (v6 == -1) {
    return 0;
  }
  uint64_t v7 = *(void *)(v5 + 224) + 144 * v6 + 16;
  return *(void *)(v7 + 120);
}