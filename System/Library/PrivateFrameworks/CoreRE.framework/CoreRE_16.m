uint64_t re::EventBus::getTypeId<REAnimationSkeletalPoseUpdateCompleteEvent>()
{
  const char *v1;

  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E538, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E538))
  {
    qword_26AF8E530 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"42REAnimationSkeletalPoseUpdateCompleteEvent" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF8E538);
  }
  return qword_26AF8E530;
}

void *re::IntrospectionDynamicArray<re::SkeletalPose>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SkeletalPose>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SkeletalPose>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPose>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SkeletalPose>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SkeletalPose>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SkeletalPose>::deinit(a2);
  *(void *)a2 = a3;
  result = re::DynamicArray<re::SkeletalPose>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SkeletalPose>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::SkeletalPose>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::SkeletalPose>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::SkeletalPose>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SkeletalPose>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  *(void *)&v10[0].var0 = 0;
  memset(&v10[1], 0, 48);
  v10[0].var1 = "";
  uint64_t v13 = 0;
  re::DynamicArray<re::SkeletalPose>::add(this, v10);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v10);
  v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 88 * *((void *)this + 2) - 88);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPose>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPose>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 88 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 88 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  result = re::DynamicArray<re::SkeletalPose>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SkeletalPose>::clear((re::SkeletalPose *)a1);
  }
  else
  {
    re::DynamicArray<re::SkeletalPose>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SkeletalPose>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::SkeletalPose>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 88 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 88;
        v11 -= 88;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 88 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 88 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(a4 + 8);
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= v8)
  {
    unint64_t v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v11 = 2 * v8;
        BOOL v12 = v8 == 0;
        unint64_t v13 = 8;
        if (!v12) {
          unint64_t v13 = v11;
        }
        if (v13 <= v10) {
          unint64_t v14 = v10;
        }
        else {
          unint64_t v14 = v13;
        }
        re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v9 = *(void *)(a4 + 16);
  }
  uint64_t v15 = *(void *)(a4 + 32) + 40 * v9;
  *(void *)(v15 + 32) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)uint64_t v15 = 0;
  *(_DWORD *)(v15 + 24) = 1;
  uint64_t v16 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  v17 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 40 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 40 * v8;
      do
      {
        re::DynamicArray<unsigned long>::deinit(v9);
        v9 += 40;
        v10 -= 40;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      unint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 40 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 40;
        v14 -= 40;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::make::shared::unsafelyInplace<re::ecs2::SkeletalPoseComponent>(void *a1)
{
  a1[2] = 0;
  *((unsigned char *)a1 + 24) = 0;
  *a1 = &unk_26E6E0718;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *((_DWORD *)a1 + 54) = 0;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_DWORD *)a1 + 64) = 0;
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  *((_DWORD *)a1 + 74) = 0;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_DWORD *)a1 + 84) = 0;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *((_DWORD *)a1 + 94) = 0;
  *((_DWORD *)a1 + 104) = 0;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_DWORD *)a1 + 114) = 0;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 55) = 0u;
  *((_DWORD *)a1 + 30) = 0;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *((_DWORD *)a1 + 44) = 0;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_DWORD *)a1 + 20) = 0;
  a1[60] = -1;
  *((_DWORD *)a1 + 186) = 0;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)(a1 + 87) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 69) = 0u;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  a1[94] = -1;
  a1[102] = 0;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(a1 + 103));
  *((_OWORD *)a1 + 239) = 0u;
  a1[474] = 0;
  *(_OWORD *)(a1 + 475) = 0u;
  *((unsigned char *)a1 + 3816) = 0;
  *((_DWORD *)a1 + 960) = 1;
  a1[493] = 0;
  *(_OWORD *)(a1 + 481) = 0u;
  *(_OWORD *)(a1 + 483) = 0u;
  *(_OWORD *)(a1 + 485) = 0u;
  *((_DWORD *)a1 + 974) = 0;
  *((_OWORD *)a1 + 244) = 0u;
  *((_OWORD *)a1 + 245) = 0u;
  *((_DWORD *)a1 + 984) = 0;
  return a1;
}

void re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::SkeletalPose>(const char **a1, void *a2)
{
  unint64_t v15 = 0;
  if (re::snapshot::DecoderRaw::beginArray((re::snapshot::DecoderRaw *)a1, &v15))
  {
    unint64_t v4 = v15;
    if (v15 == -1 || a2[1] >= v15)
    {
      unint64_t v8 = --v15;
      if (!v4)
      {
        unint64_t v6 = 1;
        LODWORD(v7) = 1;
LABEL_9:
        if (v6 != v7) {
          re::snapshot::Decoder::error(a1, "count mismatch: expected %zu, got %d", v4, v7 - 1);
        }
        return;
      }
    }
    else
    {
      re::DynamicArray<re::SkeletalPose>::setCapacity(a2, v15);
      unint64_t v8 = v4 - 1;
      unint64_t v15 = v4 - 1;
    }
    unint64_t v6 = v4 + 1;
    unint64_t v7 = 1;
    do
    {
      if (v4 != -1 && v6 > v7)
      {
        re::DynamicArray<re::SkeletalPose>::resize((uint64_t)a2, v7);
        uint64_t v9 = a2[4];
        uint64_t v10 = a2[2];
        {
          uint64_t v13 = v10;
          uint64_t v14 = v9;
          uint64_t v10 = v13;
          uint64_t v9 = v14;
          if (v12)
          {
            re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
            uint64_t v10 = v13;
            uint64_t v9 = v14;
          }
        }
        re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t *)a1, (unsigned char *)(v9 + 88 * v10 - 88), re::introspect<re::SkeletalPose>(void)::info);
        unint64_t v8 = v15;
      }
      unint64_t v11 = v8;
      ++v7;
      unint64_t v15 = --v8;
    }
    while (v11);
    goto LABEL_9;
  }
}

uint64_t *re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::Matrix4x4<float>>(re::snapshot::Decoder *this, void *a2)
{
  unint64_t v15 = 0;
  unint64_t v4 = (size_t *)*((void *)this + 2);
  unint64_t v5 = *((void *)this + 3) - (void)v4;
  if (v5 >= 8)
  {
    size_t v8 = *v4;
    unint64_t v6 = v4 + 1;
    size_t v7 = v8;
    *((void *)this + 2) = v6;
    if ((v8 & 0x3F) != 0)
    {
      *((void *)this + 2) = (char *)v6 + v7;
      return re::snapshot::Decoder::error((const char **)this, "Bad data: %zu bytes, expected multiple of %zu");
    }
    else
    {
      re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)a2, v7 >> 6);
      uint64_t v14 = (void *)a2[4];
      return (uint64_t *)re::snapshot::Decoder::readRaw(this, v14, v7);
    }
  }
  re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v5);
  uint64_t result = (uint64_t *)re::snapshot::DecoderRaw::beginArray(this, &v15);
  if (!result) {
    return result;
  }
  unint64_t v10 = v15;
  if (v15 != -1 && a2[1] < v15)
  {
    uint64_t result = re::DynamicArray<re::Matrix4x4<float>>::setCapacity(a2, v15);
    goto LABEL_15;
  }
  if (v15)
  {
LABEL_15:
    unint64_t v12 = v10 + 1;
    unint64_t v13 = 1;
    do
    {
      if (v10 != -1 && v12 > v13)
      {
        re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)a2, v13);
        uint64_t result = re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::Vector4<float>,4ul>((uint64_t *)this, (_OWORD *)(a2[4] + (a2[2] << 6) - 64));
        *((_DWORD *)this + 8) = 0;
      }
      ++v13;
    }
    while (v13 - v10 != 1);
    goto LABEL_20;
  }
  unint64_t v12 = 1;
  LODWORD(v13) = 1;
LABEL_20:
  if (v12 != v13) {
    return re::snapshot::Decoder::error((const char **)this, "count mismatch: expected %zu, got %d");
  }
  return result;
}

BOOL re::snapshot::Decoder::readRaw(re::snapshot::Decoder *this, void *__dst, size_t __len)
{
  unint64_t v6 = (char *)*((void *)this + 2);
  size_t v7 = *((void *)this + 3) - (void)v6;
  if (v7 < __len)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", __len, v7);
  }
  else
  {
    if (__len)
    {
      memmove(__dst, v6, __len);
      unint64_t v6 = (char *)*((void *)this + 2);
    }
    *((void *)this + 2) = &v6[__len];
  }
  return v7 >= __len;
}

uint64_t *re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderOPACK>,re::SkeletalPose>(re::snapshot::DecoderOPACK *a1, void *a2)
{
  unint64_t v16 = 0;
  uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::beginArray(a1, &v16);
  if (result)
  {
    unint64_t v5 = v16;
    if (v16 != -1 && a2[1] < v16) {
      re::DynamicArray<re::SkeletalPose>::setCapacity(a2, v16);
    }
    unint64_t v7 = v5 + 1;
    uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::endArray(a1, &v16);
    unint64_t v8 = 1;
    if ((result & 1) == 0)
    {
      do
      {
        if (v5 == -1 || v7 <= v8)
        {
          unint64_t v11 = (unsigned __int8 *)*((void *)a1 + 2);
          if ((unint64_t)v11 >= *((void *)a1 + 3))
          {
            int v12 = 0;
          }
          else
          {
            *((void *)a1 + 2) = v11 + 1;
            int v12 = *v11;
          }
          re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v12);
        }
        else
        {
          re::DynamicArray<re::SkeletalPose>::resize((uint64_t)a2, v8);
          uint64_t v9 = a2[4];
          uint64_t v10 = a2[2];
          {
            uint64_t v14 = v10;
            uint64_t v15 = v9;
            uint64_t v10 = v14;
            uint64_t v9 = v15;
            if (v13)
            {
              re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
              uint64_t v10 = v14;
              uint64_t v9 = v15;
            }
          }
          re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t *)a1, (float *)(v9 + 88 * v10 - 88), re::introspect<re::SkeletalPose>(void)::info);
        }
        ++v8;
        uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::endArray(a1, &v16);
      }
      while (!result);
    }
    if (v7 != v8) {
      return re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d", v5, (int)v8 - 1);
    }
  }
  return result;
}

uint64_t *re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderOPACK>,re::DynamicArray<re::Matrix4x4<float>>>(re::snapshot::DecoderOPACK *a1, void *a2)
{
  unint64_t v31 = 0;
  uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::beginArray(a1, &v31);
  if (result)
  {
    unint64_t v5 = a2;
    unint64_t v6 = v31;
    v30 = v5;
    unint64_t v7 = v5[1];
    if (v31 != -1 && v7 < v31) {
      re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(v30, v31);
    }
    unint64_t v9 = v6 + 1;
    uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::endArray(a1, &v31);
    unint64_t v29 = v6;
    unint64_t v10 = 1;
    if ((result & 1) == 0)
    {
      unint64_t v11 = v30;
      do
      {
        if (v9 && v9 > v10)
        {
          re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(v11, v10);
          uint64_t v12 = v11[4];
          uint64_t v13 = v11[2] - 1;
          uint64_t v14 = v12 + 40 * v13;
          unint64_t v32 = 0;
          if (re::snapshot::DecoderOPACK::beginData(a1, &v32, 1))
          {
            size_t v15 = v32;
            if ((v32 & 0x3F) != 0)
            {
              *((void *)a1 + 2) += v32;
              re::snapshot::Decoder::error((const char **)a1, "Bad data: %zu bytes, expected multiple of %zu");
            }
            else
            {
              re::DynamicArray<re::Matrix4x4<float>>::resize(v12 + 40 * v13, v32 >> 6);
              re::snapshot::Decoder::readRaw(a1, *(void **)(v12 + 40 * v13 + 32), v15);
            }
          }
          else if (re::snapshot::DecoderOPACK::beginArray(a1, &v32))
          {
            unint64_t v18 = v32;
            if (v32 != -1 && *(void *)(v12 + 40 * v13 + 8) < v32) {
              re::DynamicArray<re::Matrix4x4<float>>::setCapacity((void *)(v12 + 40 * v13), v32);
            }
            unint64_t v19 = v18 + 1;
            if (re::snapshot::DecoderOPACK::endArray(a1, &v32))
            {
              LODWORD(v20) = 1;
            }
            else
            {
              uint64_t v22 = v12 + 40 * v13;
              v23 = (uint64_t *)(v22 + 32);
              v24 = (uint64_t *)(v22 + 16);
              unint64_t v20 = 1;
              do
              {
                if (v19 && v19 > v20)
                {
                  re::DynamicArray<re::Matrix4x4<float>>::resize(v14, v20);
                  uint64_t v25 = *v23;
                  uint64_t v26 = *v24;
                  if (re::snapshot::DecoderOPACK::beginObject(a1, 0))
                  {
                    re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,re::Vector4<float> [4]>((uint64_t)a1, (_OWORD *)(v25 + (v26 << 6) - 64));
                    re::snapshot::DecoderOPACK::endObject((uint64_t *)a1, 0);
                  }
                }
                else
                {
                  v27 = (unsigned __int8 *)*((void *)a1 + 2);
                  if ((unint64_t)v27 >= *((void *)a1 + 3))
                  {
                    int v28 = 0;
                  }
                  else
                  {
                    *((void *)a1 + 2) = v27 + 1;
                    int v28 = *v27;
                  }
                  re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v28);
                }
                ++v20;
              }
              while (!re::snapshot::DecoderOPACK::endArray(a1, &v32));
            }
            BOOL v21 = v19 == v20;
            unint64_t v11 = v30;
            if (!v21) {
              re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d");
            }
          }
        }
        else
        {
          unint64_t v16 = (unsigned __int8 *)*((void *)a1 + 2);
          if ((unint64_t)v16 >= *((void *)a1 + 3))
          {
            int v17 = 0;
          }
          else
          {
            *((void *)a1 + 2) = v16 + 1;
            int v17 = *v16;
          }
          re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v17);
        }
        ++v10;
        uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::endArray(a1, &v31);
      }
      while (!result);
    }
    if (v9 != v10) {
      return re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d", v29, (int)v10 - 1);
    }
  }
  return result;
}

unsigned int *re::snapshot::operator<<<re::snapshot::Writer<re::snapshot::EncoderOPACK>,re::DynamicArray<re::Matrix4x4<float>>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  re::snapshot::EncoderOPACK::beginArray((unsigned int *)a1, v4);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = v6 + 40 * v5;
    do
    {
      unint64_t v8 = *(void *)(v6 + 16);
      if ((*(unsigned char *)(a1 + 64) & 4) != 0)
      {
        re::snapshot::EncoderOPACK::beginData((unsigned int *)a1, v8 << 6, v8 << 6);
        re::snapshot::Encoder::writeRaw<true>((unsigned int *)a1, *(void **)(v6 + 32), *(void *)(v6 + 16) << 6);
      }
      else
      {
        re::snapshot::EncoderOPACK::beginArray((unsigned int *)a1, *(void *)(v6 + 16));
        uint64_t v9 = *(void *)(v6 + 16);
        if (v9)
        {
          uint64_t v10 = *(void *)(v6 + 32);
          uint64_t v11 = v9 << 6;
          do
          {
            re::snapshot::EncoderOPACK::beginObject((unsigned int *)a1);
            re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,re::Vector4<float> [4]>((re::snapshot::EncoderOPACK *)a1, v10);
            re::snapshot::EncoderOPACK::endObject((unsigned int *)a1);
            v10 += 64;
            v11 -= 64;
          }
          while (v11);
        }
        re::snapshot::EncoderOPACK::endArray((unsigned int *)a1, v8);
      }
      v6 += 40;
    }
    while (v6 != v7);
  }
  return re::snapshot::EncoderOPACK::endArray((unsigned int *)a1, v4);
}

id re::internal::defaultRetain<re::ecs2::SkeletalPosePreparationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SkeletalPosePreparationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::SkeletalPoseSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SkeletalPoseSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_RemoteEffectsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_315, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_315))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E788, "RemoteEffectsComponent");
    __cxa_guard_release(&_MergedGlobals_315);
  }
  return &unk_26AF8E788;
}

void re::ecs2::initInfo_RemoteEffectsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x8681CCD58A6CC542;
  v9[1] = "RemoteEffectsComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E768, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8E768);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8E760 = v7;
      __cxa_guard_release(&qword_26AF8E768);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8E760;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RemoteEffectsComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RemoteEffectsComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RemoteEffectsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RemoteEffectsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

double re::internal::defaultConstruct<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::RemoteEffectsComponent>(a3);
}

void re::internal::defaultDestruct<re::ecs2::RemoteEffectsComponent>(int a1, int a2, re::ecs2::RemoteEffectsComponent *this)
{
}

void re::ecs2::RemoteEffectsComponent::~RemoteEffectsComponent(re::ecs2::RemoteEffectsComponent *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::RemoteEffectsComponent::~RemoteEffectsComponent(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::WriteOptional<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  int v4 = a3;
  uint64_t result = RESyncBitWriterWriteBool();
  if (v4) {
    return MEMORY[0x237DBB060](a1, v6, 8);
  }
  return result;
}

uint64_t re::ecs2::ReadOptional<double>()
{
  return 0;
}

uint64_t re::ecs2::readFromReaderAndWriteToWriter(uint64_t a1, uint64_t a2)
{
  char v18 = 1;
  RESyncBitReaderReadBool();
  RESyncBitWriterWriteBool();
  char v17 = 1;
  RESyncBitReaderReadBool();
  RESyncBitWriterWriteBool();
  int v16 = 0;
  RESyncBitReaderReadUInt32();
  RESyncBitWriterWriteUInt32();
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v13 = _D0;
  int v14 = 1065353216;
  char v15 = 0;
  RESyncBitReaderReadData();
  MEMORY[0x237DBB060](a2, &v13, 16);
  RESyncBitReaderReadFloat();
  RESyncBitWriterWriteFloat();
  uint64_t v8 = re::ecs2::ReadOptional<double>();
  re::ecs2::WriteOptional<double>(a2, v8, v9);
  uint64_t v10 = re::ecs2::ReadOptional<double>();
  re::ecs2::WriteOptional<double>(a2, v10, v11);
  RESyncBitReaderReadBool();
  RESyncBitWriterWriteBool();
  RESyncBitReaderReadBool();
  RESyncBitWriterWriteBool();
  RESyncBitReaderReadUInt8();
  RESyncBitWriterWriteUInt8();
  RESyncBitReaderReadUInt32();
  return RESyncBitWriterWriteUInt32();
}

uint64_t re::ecs2::RemoteEffectsComponent::makeSyncInfo(re::ecs2::RemoteEffectsComponent *this)
{
  uint64_t v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetDebugName();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  return v1;
}

uint64_t ___ZN2re4ecs222RemoteEffectsComponent12makeSyncInfoEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 1;
}

uint64_t ___ZN2re4ecs222RemoteEffectsComponent12makeSyncInfoEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RESyncBitReaderReadBool();
  *(unsigned char *)(a3 + 45) = 1;
  RESyncBitReaderReadBool();
  *(unsigned char *)(a3 + 46) = 0;
  RESyncBitReaderReadUInt32();
  *(_DWORD *)(a3 + 40) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v12 = _D0;
  RESyncBitReaderReadData();
  *(void *)(a3 + 52) = v12;
  *(_DWORD *)(a3 + 60) = 1065353216;
  *(unsigned char *)(a3 + 64) = 0;
  RESyncBitReaderReadFloat();
  *(_DWORD *)(a3 + 68) = 1065353216;
  *(void *)(a3 + 72) = re::ecs2::ReadOptional<double>();
  *(unsigned char *)(a3 + 80) = v9;
  *(void *)(a3 + 88) = re::ecs2::ReadOptional<double>();
  *(unsigned char *)(a3 + 96) = v10;
  RESyncBitReaderReadBool();
  *(unsigned char *)(a3 + 47) = 0;
  RESyncBitReaderReadBool();
  *(unsigned char *)(a3 + 48) = 1;
  RESyncBitReaderReadUInt8();
  *(unsigned char *)(a3 + 44) = 0;
  RESyncBitReaderReadUInt32();
  *(_DWORD *)(a3 + 104) = 0;
  return 1;
}

uint64_t ___ZN2re4ecs222RemoteEffectsComponent12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::ecs2::readFromReaderAndWriteToWriter(a2, a3);
}

uint64_t ___ZN2re4ecs222RemoteEffectsComponent12makeSyncInfoEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t re::ecs2::RemoteEffectsComponent::initComponentType(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E780, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E780))
  {
    qword_26AF8E778 = re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsComponent, (void (*)(re::IntrospectionBase *))&unk_26AF8E770, 0);
    __cxa_guard_release(&qword_26AF8E780);
  }
  re::getPrettyTypeName((re *)qword_26AF8E778, (const re::IntrospectionBase *)&v25);
  uint64_t v2 = (re *)re::DynamicString::rfind((uint64_t)&v25, "Component", v23);
  if (v23[0])
  {
    uint64_t v3 = (v26[0] & 1) != 0 ? v26[0] >> 1 : LOBYTE(v26[0]) >> 1;
    if (v24 == v3 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v25, 0, v24, (re::DynamicString *)&v21);
      re::DynamicString::operator=((re::DynamicString *)&v25, (re::DynamicString *)&v21);
      uint64_t v2 = (re *)v21;
      if (v21)
      {
        if (v22) {
          uint64_t v2 = (re *)(*(uint64_t (**)(void))(*(void *)v21 + 40))();
        }
      }
    }
  }
  int v4 = re::globalAllocators(v2);
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 80, 8);
  uint64_t v6 = v5;
  if (v26[0]) {
    uint64_t v7 = (const char *)v26[1];
  }
  else {
    uint64_t v7 = (char *)v26 + 1;
  }
  *(void *)&v20.var0 = 0;
  v20.var1 = "";
  *(void *)uint64_t v6 = &unk_26E6E1EB8;
  *((void *)v6 + 1) = 0;
  *((_WORD *)v6 + 8) = -1;
  re::StringID::StringID((_anonymous_namespace_ *)((char *)v6 + 24), &v20);
  *((_DWORD *)v6 + 10) = 2;
  *(void *)uint64_t v6 = &unk_26E7078E8;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 6) = a1;
  *((void *)v6 + 9) = 0xFFFFFFFFLL;
  *((void *)v6 + 7) = re::ecs2::ComponentTypeBase::makeAllocator(*((re::ecs2::ComponentTypeBase **)v6 + 4), (const char *)0x70);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E780, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E780))
  {
    qword_26AF8E778 = re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsComponent, (void (*)(re::IntrospectionBase *))&unk_26AF8E770, 0);
    __cxa_guard_release(&qword_26AF8E780);
  }
  uint64_t v8 = qword_26AF8E778;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v27);
  char v9 = *(char **)(v8 + 48);
  if (v9)
  {
    uint64_t v10 = *v9;
    if (*v9)
    {
      char v11 = v9[1];
      if (v11)
      {
        uint64_t v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          uint64_t v10 = 31 * v10 + v11;
          int v13 = *v12++;
          char v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v21 = 2 * v10;
  uint64_t v22 = v9;
  int v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v21);
  if (v14)
  {
    uint64_t v15 = *v14;
  }
  else
  {
    int v16 = 0;
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  *((void *)v6 + 8) = v16;
  *((void *)v6 + 9) = v15;
  re::StringID::destroyString((re::StringID *)&v21);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v27);
  re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = v6;
  re::StringID::destroyString((re::StringID *)&v20);
  char v18 = re::ecs2::ComponentTypeRegistry::instance(v17);
  re::ecs2::ComponentTypeRegistry::add((re::ecs2::ComponentTypeRegistry *)v18, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t result = v25;
  if (v25 && (v26[0] & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v25 + 40))();
  }
  *((void *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
  + 1) = re::ecs2::RemoteEffectsComponent::clone;
  return result;
}

uint64_t re::ecs2::RemoteEffectsComponent::clone(re::ecs2::RemoteEffectsComponent *this, const Component *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                + 32))(&v9);
  uint64_t v3 = v9;
  CFArrayRef v4 = (const __CFArray *)*((void *)this + 4);
  CFArrayRef v5 = *(const __CFArray **)(v9 + 32);
  if (v5 != v4)
  {
    if (v5) {
      CFRelease(v5);
    }
    if (v4)
    {
      CFAllocatorRef Default = CFAllocatorGetDefault();
      CFArrayRef Copy = CFArrayCreateCopy(Default, v4);
    }
    else
    {
      CFArrayRef Copy = 0;
    }
    *(void *)(v3 + 32) = Copy;
  }
  return v3;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::make::shared::unsafelyInplace<re::ecs2::RemoteEffectsComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E707860;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 44) = 256;
  *(unsigned char *)(v1 + 48) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 52) = result;
  *(_DWORD *)(v1 + 60) = 1065353216;
  *(unsigned char *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 68) = 1065353216;
  *(unsigned char *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 80) = 0;
  *(unsigned char *)(v1 + 88) = 0;
  *(unsigned char *)(v1 + 96) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  return result;
}

double re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  CFArrayRef v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::~ComponentType(uint64_t a1)
{
  re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::~ComponentType(a1);
  JUMPOUT(0x237DBCBD0);
}

double re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doMakeComponent@<D0>(void *a1@<X8>)
{
  uint64_t v2 = (ArcSharedObject *)(*(uint64_t (**)(void, uint64_t, void))(**((void **)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((void *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 112, 0);
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E707860;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 44) = 256;
  *(unsigned char *)(v3 + 48) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v3 + 52) = result;
  *(_DWORD *)(v3 + 60) = 1065353216;
  *(unsigned char *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 68) = 1065353216;
  *(unsigned char *)(v3 + 72) = 0;
  *(unsigned char *)(v3 + 80) = 0;
  *(unsigned char *)(v3 + 88) = 0;
  *(unsigned char *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 656, 8);
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)uint64_t v3 = &unk_26E707958;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(void *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(void *)(v3 + 304) = 0;
  *(void *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(void *)(v3 + 320) = 0;
  *(void *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(void *)(v3 + 392) = 0;
  *(void *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(void *)(v3 + 408) = 0;
  *(void *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(void *)(v3 + 480) = 0;
  *(void *)(v3 + 488) = 0;
  *(void *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(void *)(v3 + 520) = 0;
  *(void *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(void *)(v3 + 528) = 0;
  *(void *)(v3 + 552) = 0;
  *(void *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(void *)(v3 + 576) = 0;
  *(void *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(void *)(v3 + 584) = 0;
  *(void *)(v3 + 608) = 0;
  *(void *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(void *)(v3 + 632) = 0;
  *(void *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(void *)(v3 + 640) = 0;
  CFArrayRef v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  CFArrayRef v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doGetComponentIntrospectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E780, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E780))
  {
    qword_26AF8E778 = re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsComponent, (void (*)(re::IntrospectionBase *))&unk_26AF8E770, 0);
    __cxa_guard_release(&qword_26AF8E780);
  }
  return qword_26AF8E778;
}

__n128 re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::~ComponentType(uint64_t a1)
{
  *(void *)a1 = &unk_26E7078E8;
  if (*(void *)(a1 + 48)) {
    RESyncRelease();
  }
  re::internal::destroyPersistent<re::Allocator>((re *)"~ComponentType", 46, *(void (****)(void))(a1 + 56));
  *(void *)a1 = &unk_26E6E1EB8;
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::~SceneComponentCollection(void *a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *a1 = &unk_26E707958;
  uint64_t v2 = (uint64_t)(a1 + 16);
  if (a1[16]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 16));
  }
  if (a1[27]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 27));
  }
  if (a1[38]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 38));
  }
  if (a1[49]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 60));
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)(a1 + 75));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 75));
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit((uint64_t)(a1 + 68));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 68));
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit((uint64_t)(a1 + 61));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 61));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 49));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 38));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 27));
  re::Event<re::Engine>::~Event(v2);
  re::ecs2::SceneComponentCollectionBase::~SceneComponentCollectionBase((re::ecs2::SceneComponentCollectionBase *)a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      CFArrayRef v5 = *(re::ecs2::Component ***)(a2 + 32);
      uint64_t v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      uint64_t v7 = 8 * v4;
      do
      {
        uint64_t v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::registerCallbacks(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2[3])
  {
    CFArrayRef v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RemoteEffectsComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    CFArrayRef v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RemoteEffectsComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    CFArrayRef v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RemoteEffectsComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    CFArrayRef v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RemoteEffectsComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::unregisterCallbacks(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2[3])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RemoteEffectsComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RemoteEffectsComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RemoteEffectsComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RemoteEffectsComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 24);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 32);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 40);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 48);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  long long v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    long long v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

BOOL re::ecs2::WrapSystemComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v79 = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v74, a5, 0);
  unint64_t v63 = a4;
  long long v64 = v74;
  if ((void)v74 != v5 || WORD4(v74) != 0xFFFFLL || (DWORD2(v74) & 0xFFFF0000) != 4294901760)
  {
    uint64_t v53 = a3;
    uint64_t v54 = v5;
    while (1)
    {
      uint64_t v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v64);
      char v11 = *(void **)v10;
      if (!*(void *)(*(void *)v10 + 240)) {
        break;
      }
      uint64_t v12 = v11[2];
      int v13 = (void *)v11[49];
      uint64_t v14 = *(void *)(v12 + 176);
      *(void *)&long long v74 = v11 + 29;
      *((void *)&v74 + 1) = 13;
      if (re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)&v74)) {
        break;
      }
      BOOL v15 = !v13 || v14 == 0;
      if (v15 || !*(void *)(v14 + 40)) {
        break;
      }
      v58 = (re::MeshDeformationRuntimeData *)(v11 + 29);
      uint64_t v16 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v14 + 32));
      if (v16)
      {
        char v17 = (re::ecs2::EntityComponentCollection *)(v12 + 32);
        uint64_t v18 = v16 + 448;
        v56 = v17;
        unint64_t v19 = (re *)re::ecs2::EntityComponentCollection::get(v17, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        StringID v20 = (re *)((char *)v19 + 216);
        if (!v19) {
          StringID v20 = (re::MeshNameMap *)v18;
        }
        v61 = v20;
        unint64_t v22 = v13[2];
        uint64_t v21 = v13[3];
        uint64_t v25 = v13 + 8;
        uint64_t v23 = v13[8];
        uint64_t v24 = v25[1];
        unint64_t v26 = *(void *)(v11[49] + 96);
        unint64_t v57 = *(void *)(v11[49] + 88);
        char v27 = re::globalAllocators(v19);
        int v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27[2] + 32))(v27[2], 24, 8);
        *((void *)v28 + 1) = 0;
        *((void *)v28 + 2) = 0;
        *(void *)int v28 = 0;
        *((void *)v28 + 1) = v22;
        v60 = v28;
        if (v22)
        {
          if (v22 >> 62) {
            goto LABEL_54;
          }
          unint64_t started = 4 * v22;
          *((void *)v60 + 2) = v31;
          if (v31)
          {
            v33 = v31;
            if (v22 != 1)
            {
              started -= 4;
              memset(v31, 255, started);
              v33 = (_DWORD *)((char *)v33 + started);
            }
            uint64_t v34 = 0;
            unint64_t v35 = 0;
            _DWORD *v33 = -1;
            v36 = (void *)(v26 + 128);
            uint64_t v37 = v21 + 4;
            unint64_t v59 = v22;
            while (v23 != v35)
            {
              v38 = *(void **)(*(void *)(v24 + 8 * v35) + 520);
              if (v38)
              {
                unint64_t started = *(unsigned __int16 *)(v37 + 2 * v34);
                unint64_t v26 = v38[4];
                if (v26 <= started) {
                  goto LABEL_50;
                }
                unint64_t started = *(unsigned __int16 *)(v38[5] + 2 * started);
                unint64_t v26 = v38[1];
                if (v26 <= started) {
                  goto LABEL_51;
                }
                v39 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v61 + 16, (void *)(v38[2] + 40 * started));
                if (v39)
                {
                  unint64_t v26 = *v39;
                  if (v26 != 0xFFFF)
                  {
                    unint64_t started = re::MeshNameMap::meshPartStartIndexForInstance(v61, v26);
                    unint64_t v22 = v59;
                    if (re::MeshNameMap::meshPartStartIndexForInstance(v61, v26) - started == 1)
                    {
                      int v40 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(v58, started);
                      unint64_t started = *((void *)v60 + 1);
                      if (started <= v35) {
                        goto LABEL_52;
                      }
                      v41 = (_DWORD *)(*((void *)v60 + 2) + v34);
                      _DWORD *v41 = v40;
                      if (v57 <= v35) {
                        goto LABEL_53;
                      }
                      ++*((unsigned char *)v36 - 115);
                      void *v36 = v41;
                    }
                  }
                }
              }
              ++v35;
              v36 += 21;
              v34 += 4;
              if (v22 == v35) {
                goto LABEL_36;
              }
            }
            re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v23, v23);
            _os_crash();
            __break(1u);
LABEL_50:
            uint64_t v65 = 0;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long v74 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v66 = 136315906;
            v67 = "operator[]";
            __int16 v68 = 1024;
            int v69 = 476;
            __int16 v70 = 2048;
            unint64_t v71 = started;
            __int16 v72 = 2048;
            unint64_t v73 = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_51:
            uint64_t v65 = 0;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long v74 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v66 = 136315906;
            v67 = "operator[]";
            __int16 v68 = 1024;
            int v69 = 476;
            __int16 v70 = 2048;
            unint64_t v71 = started;
            __int16 v72 = 2048;
            unint64_t v73 = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_52:
            uint64_t v65 = 0;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long v74 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v66 = 136315906;
            v67 = "operator[]";
            __int16 v68 = 1024;
            int v69 = 468;
            __int16 v70 = 2048;
            unint64_t v71 = v35;
            __int16 v72 = 2048;
            unint64_t v73 = started;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_53:
            re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v35, v57);
            _os_crash();
            __break(1u);
LABEL_54:
            re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, v22);
            _os_crash();
            __break(1u);
          }
          re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
LABEL_36:
        v42 = (id *)(re::ecs2::EntityComponentCollection::getOrAdd(v56, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 32);
        uint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 8) + 112) + 136);
        if (v43) {
          v44 = (void *)(v43 + 8);
        }
        else {
          v44 = 0;
        }
        inited = (re *)objc_initWeak(&location, v44);
        *(void *)&long long v76 = 0;
        long long v74 = 0u;
        long long v75 = 0u;
        *((void *)&v75 + 1) = re::globalAllocators(inited)[2];
        *(void *)&long long v76 = 0;
        re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::reset(v42, &location, v60, (uint64_t)&v74);
        re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v74);
        objc_destroyWeak(&location);
        id location = 0;
        unint64_t v46 = v63;
        unint64_t v47 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v64);
        a3 = v53;
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v53 + 16), v46, v47, *(void *)(v53 + 32));
        uint64_t v5 = v54;
      }
      else
      {
        uint64_t v48 = *(void *)(v14 + 40);
        if (v48)
        {
          unsigned int v49 = atomic_load((unsigned int *)(v48 + 704));
          if (v49 == 3) {
            break;
          }
        }
        re::AssetHandle::loadAsync((re::AssetHandle *)(v14 + 32));
      }
LABEL_43:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v64);
      if ((void)v64 == v5 && WORD4(v64) == 0xFFFF && WORD5(v64) == 0xFFFF) {
        return *(_DWORD *)(v5 + 40) != 0;
      }
    }
    unint64_t v50 = v63;
    unint64_t v51 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v64);
    re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v50, v51, *(void *)(a3 + 32));
    goto LABEL_43;
  }
  return *(_DWORD *)(v5 + 40) != 0;
}

uint64_t re::ecs2::WrapSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v12);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)a2;
    uint64_t v8 = a1 + 200;
    uint64_t v9 = 8 * v6;
    do
    {
      uint64_t v10 = *v7++;
      re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::updateForScene(v8, v10, (uint64_t)v13, 0);
      v9 -= 8;
    }
    while (v9);
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v12);
}

void re::ecs2::WrapSystem::willAddSceneToECSService(re::ecs2::WrapSystem *this, re::ecs2::Scene *a2)
{
}

uint64_t re::ecs2::WrapSystem::willRemoveSceneFromECSService(re::ecs2::WrapSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 200, (uint64_t)a2);
}

void *re::ecs2::allocInfo_WrapComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_316, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_316))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E820, "WrapComponent");
    __cxa_guard_release(&_MergedGlobals_316);
  }
  return &unk_26AF8E820;
}

void re::ecs2::initInfo_WrapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xC0AEF0E1D4DA9F66;
  v9[1] = "WrapComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E810, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8E810);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8E808 = v7;
      __cxa_guard_release(&qword_26AF8E810);
    }
  }
  *((void *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF8E808;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::WrapComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::WrapComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WrapComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WrapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

uint64_t re::internal::defaultConstruct<re::ecs2::WrapComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::WrapComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::WrapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::WrapComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_WrapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WrapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WrapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WrapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WrapComponent>, this);
}

void *re::ecs2::allocInfo_WrapSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8E818, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8E818))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E898, "WrapSystem");
    __cxa_guard_release(&qword_26AF8E818);
  }
  return &unk_26AF8E898;
}

void re::ecs2::initInfo_WrapSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x110E0641F85672;
  v5[1] = "WrapSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_WrapSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::WrapSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::WrapSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::WrapSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::WrapSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WrapSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WrapSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::WrapSystem *re::internal::defaultConstruct<re::ecs2::WrapSystem>(int a1, int a2, re::ecs2::WrapSystem *this)
{
  return re::ecs2::WrapSystem::WrapSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::WrapSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &unk_26E707A00;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 22);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::WrapSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &unk_26E707A00;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 22);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_WrapSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WrapSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WrapSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WrapSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WrapSystem>, this);
}

uint64_t re::ecs2::WrapSystemComponentStateImpl::dependsOnComponents(re::ecs2::WrapSystemComponentStateImpl *this)
{
  return *((void *)this + 4);
}

void re::ecs2::WrapSystem::~WrapSystem(re::ecs2::WrapSystem *this)
{
  *((void *)this + 20) = &unk_26E707A00;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25);
  *((void *)this + 20) = &unk_26E707A00;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::WrapSystem::typeInfo(re::ecs2::WrapSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WrapSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WrapSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WrapSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WrapSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::WrapComponent>(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F4B40;
  inited = (re *)objc_initWeak(v2, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = re::globalAllocators(inited)[2];
  *(void *)(a1 + 80) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::WrapSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::WrapSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void ___ZN2re4ecs216BillboardService18isBillboardEnabledEv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::BOOLValue((re::Defaults *)"enableBillboard", a2, &v3);
  if (v3) {
    uint64_t v2 = &v4;
  }
  else {
    uint64_t v2 = &re::ecs2::gIsBillboardEnabled;
  }
  re::ecs2::gIsBillboardEnabled = *v2;
}

void re::ecs2::BillboardService::setEnableBillboard(re::ecs2::BillboardService *this)
{
  int v1 = (int)this;
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  }
  if ((re::ecs2::gIsBillboardEnabled != 0) != v1)
  {
    re::ecs2::gIsBillboardEnabled = v1;
    uint64_t v2 = *re::ecsComponentsLogObjects(this);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (re::ecs2::gIsBillboardEnabled) {
        char v3 = "enabled";
      }
      else {
        char v3 = "disabled";
      }
      int v4 = 136315138;
      uint64_t v5 = v3;
      _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_DEFAULT, "re.enableBillboard is now %s.", (uint8_t *)&v4, 0xCu);
    }
  }
}

float ___ZN2re4ecs216BillboardService36getBillboardTransformChangeThresholdEv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::floatValue((re::Defaults *)"billboardTransformChangeThreshold", a2, (uint64_t)v4);
  if (v4[0]) {
    uint64_t v2 = (float *)&v5;
  }
  else {
    uint64_t v2 = (float *)&re::ecs2::gBillboardTransformChangeThreshold;
  }
  float result = *v2;
  re::ecs2::gBillboardTransformChangeThreshold = *(_DWORD *)v2;
  return result;
}

void *re::ecs2::allocInfo_BillboardService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_317, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_317))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E918, "BillboardService");
    __cxa_guard_release(&_MergedGlobals_317);
  }
  return &unk_26AF8E918;
}

void re::ecs2::initInfo_BillboardService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xBDC586F2E0B72D2CLL;
  v5[1] = "BillboardService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_BillboardService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_BillboardService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BillboardService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BillboardService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BillboardService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BillboardService>, this);
}

void *re::ecs2::allocInfo_EnvironmentLightingService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_318, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_318))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8E998, "EnvironmentLightingService");
    __cxa_guard_release(&_MergedGlobals_318);
  }
  return &unk_26AF8E998;
}

void re::ecs2::initInfo_EnvironmentLightingService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xA9E53BDC66725F2CLL;
  v5[1] = "EnvironmentLightingService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_EnvironmentLightingService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_EnvironmentLightingService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EnvironmentLightingService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_EnvironmentLightingService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_EnvironmentLightingService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::EnvironmentLightingService>, this);
}

re::ecs2::RenderOptionsManagerStateTracking *re::ecs2::RenderOptionsManagerStateTracking::RenderOptionsManagerStateTracking(re::ecs2::RenderOptionsManagerStateTracking *this)
{
  v5[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)re::ecs2::HierarchyStateTracking<re::ecs2::EntityRenderOptions>::HierarchyStateTracking((uint64_t)this);
  *uint64_t v2 = &unk_26E707B28;
  v2[32] = 0;
  v2[33] = 0;
  v2[31] = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 31), (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EntityRenderOptions>::HierarchyStateTracking(uint64_t a1)
{
  *(void *)a1 = &unk_26E6C8DD8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v2 = a1 + 56;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v3 = a1 + 104;
  *(void *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v4 = a1 + 152;
  *(void *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v5 = a1 + 200;
  *(void *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

void re::ecs2::RenderOptionsManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 6;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)(a2 + 16);
    __int16 v68 = (unint64_t *)(a1 + 56);
    unsigned int v9 = *(_DWORD *)(a2 + 32);
    unsigned int v66 = v9;
    do
    {
      unint64_t v10 = *(void *)(v8 + 24 * v7 + 16);
      if ((*(unsigned char *)(v10 + 288) & 0x41) != 0)
      {
        if (!*v68
          || (unint64_t v11 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27)),
              uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * ((v11 ^ (v11 >> 31)) % *(unsigned int *)(a1 + 80))),
              v12 == 0x7FFFFFFF))
        {
LABEL_15:
          unint64_t v14 = *(void *)(v10 + 24);
          if (!v14 || (*(unsigned char *)(v14 + 288) & 0x80) != 0)
          {
LABEL_25:
            unint64_t v19 = &re::ecs2::EntityRenderOptions::defaultRenderOptions(void)::s_defaultRenderOptions;
          }
          else
          {
            while (1)
            {
              unint64_t v15 = v14;
              if (*v68)
              {
                unint64_t v16 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27));
                uint64_t v17 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * ((v16 ^ (v16 >> 31)) % *(unsigned int *)(a1 + 80)));
                if (v17 != 0x7FFFFFFF) {
                  break;
                }
              }
LABEL_22:
              unint64_t v14 = *(void *)(v15 + 24);
              if (v14)
              {
                unint64_t v10 = v15;
                if ((*(unsigned char *)(v14 + 288) & 0x80) == 0) {
                  continue;
                }
              }
              unint64_t v10 = v15;
              goto LABEL_25;
            }
            uint64_t v18 = *(void *)(a1 + 72);
            while (*(void *)(v18 + 56 * v17 + 16) != v15)
            {
              LODWORD(v17) = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
              if (v17 == 0x7FFFFFFF) {
                goto LABEL_22;
              }
            }
            unint64_t v19 = (void *)(v18 + 56 * v17 + 24);
          }
          re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v135);
          v129[0] = 0;
          v129[1] = 0;
          int v130 = 1;
          uint64_t v132 = 0;
          uint64_t v133 = 0;
          uint64_t v131 = 0;
          int v134 = 0;
          re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v129, (uint64_t)v135, 1uLL);
          uint64_t v122 = 0;
          uint64_t v123 = 0;
          int v124 = 1;
          uint64_t v126 = 0;
          unint64_t v127 = 0;
          uint64_t v125 = 0;
          int v128 = 0;
          re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::init((uint64_t)&v122, (uint64_t)v135, 1uLL);
          *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v129) = v10;
          re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::add(&v122, (uint64_t)v19);
          while (v133)
          {
            StringID v20 = (unint64_t *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v129, v133 - 1);
            if (!v127)
            {
              re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
              _os_crash();
              __break(1u);
              return;
            }
            unint64_t v22 = *v20;
            unint64_t v23 = v127 - 1;
            uint64_t v24 = re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::operator[]((uint64_t)&v122, v127 - 1);
            unsigned __int8 v25 = *(unsigned char *)v24;
            unsigned __int8 v100 = *(unsigned char *)v24;
            unsigned __int8 v101 = *(unsigned char *)(v24 + 2);
            if (v101) {
              unsigned __int8 v102 = *(unsigned char *)(v24 + 3);
            }
            unsigned __int8 v103 = *(unsigned char *)(v24 + 4);
            if (v103) {
              unsigned __int8 v104 = *(unsigned char *)(v24 + 5);
            }
            unsigned __int8 v105 = *(unsigned char *)(v24 + 6);
            if (v105) {
              unsigned __int8 v106 = *(unsigned char *)(v24 + 7);
            }
            unsigned __int8 v26 = *(unsigned char *)(v24 + 8);
            unsigned __int8 v107 = v26;
            __int16 v27 = *(_WORD *)(v24 + 9);
            char v109 = *(unsigned char *)(v24 + 11);
            __int16 v108 = v27;
            unsigned __int8 v110 = *(unsigned char *)(v24 + 12);
            if (v110) {
              char v111 = *(unsigned char *)(v24 + 13);
            }
            unsigned __int8 v112 = *(unsigned char *)(v24 + 14);
            if (v112) {
              char v113 = *(unsigned char *)(v24 + 15);
            }
            unsigned __int8 v114 = *(unsigned char *)(v24 + 16);
            if (v114) {
              char v115 = *(unsigned char *)(v24 + 17);
            }
            unsigned __int8 v116 = *(unsigned char *)(v24 + 18);
            if (v116) {
              char v117 = *(unsigned char *)(v24 + 19);
            }
            unsigned __int8 v118 = *(unsigned char *)(v24 + 20);
            if (v118) {
              __int16 v119 = *(_WORD *)(v24 + 22);
            }
            int v28 = *(_DWORD *)(v24 + 24);
            char v121 = *(unsigned char *)(v24 + 28);
            int v120 = v28;
            v84[0] = v25;
            v85[0] = v101;
            if (v101) {
              v85[1] = v102;
            }
            v85[2] = v103;
            if (v103) {
              v85[3] = v104;
            }
            v85[4] = v105;
            if (v105) {
              v85[5] = v106;
            }
            v85[6] = v26;
            __int16 v86 = v108;
            char v87 = v109;
            unsigned __int8 v88 = v110;
            if (v110) {
              char v89 = v111;
            }
            unsigned __int8 v90 = v112;
            if (v112) {
              char v91 = v113;
            }
            unsigned __int8 v92 = v114;
            if (v114) {
              char v93 = v115;
            }
            unsigned __int8 v94 = v116;
            if (v116) {
              char v95 = v117;
            }
            unsigned __int8 v96 = v118;
            if (v118) {
              __int16 v97 = v119;
            }
            int v98 = v120;
            char v99 = v121;
            re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v129, --v133);
            ++v134;
            re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::operator[]((uint64_t)&v122, v23);
            unint64_t v127 = v23;
            ++v128;
            v69[0] = v101;
            if (v101) {
              v69[1] = v102;
            }
            v69[2] = v103;
            if (v103) {
              v69[3] = v104;
            }
            v69[4] = v105;
            if (v105) {
              v69[5] = v106;
            }
            v69[6] = v107;
            __int16 v70 = v108;
            char v71 = v109;
            unsigned __int8 v72 = v110;
            if (v110) {
              char v73 = v111;
            }
            unsigned __int8 v74 = v112;
            if (v112) {
              char v75 = v113;
            }
            unsigned __int8 v76 = v114;
            if (v114) {
              char v77 = v115;
            }
            unsigned __int8 v78 = v116;
            if (v116) {
              char v79 = v117;
            }
            unsigned __int8 v80 = v118;
            if (v118) {
              __int16 v81 = v119;
            }
            int v82 = v120;
            char v83 = v121;
            re::ecs2::RenderOptionsComponent::mixMeshFlags(v22, (uint64_t)v69, &v101, v85, v29, v30, v31, v32);
            re::ecs2::PortalCrossingFlagsComponent::overridePortalCrossingFlags((re::ecs2::PortalCrossingFlagsComponent *)v22, (const re::ecs2::Entity *)&v101, (re::HierarchicalMeshOverrideFlags *)v85, v33);
            re::ecs2::RenderOptionsComponent::mixVisibility((re::ecs2::RenderOptionsComponent *)v22, (const re::ecs2::Entity *)v100, &v100, v84, v34);
            unint64_t v35 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
            unint64_t v36 = v35 ^ (v35 >> 31);
            unint64_t v37 = *v68;
            if (!*v68
              || (unint64_t v37 = v36 % *(unsigned int *)(a1 + 80),
                  uint64_t v38 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v37),
                  v38 == 0x7FFFFFFF))
            {
LABEL_83:
              uint64_t v40 = *(unsigned int *)(a1 + 92);
              if (v40 == 0x7FFFFFFF)
              {
                uint64_t v40 = *(unsigned int *)(a1 + 88);
                int v41 = v40;
                if (v40 == *(_DWORD *)(a1 + 80))
                {
                  re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityRenderOptions,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v68, 2 * *(_DWORD *)(a1 + 84));
                  unint64_t v37 = v36 % *(unsigned int *)(a1 + 80);
                  int v41 = *(_DWORD *)(a1 + 88);
                }
                *(_DWORD *)(a1 + 88) = v41 + 1;
                uint64_t v42 = *(void *)(a1 + 72);
                int v43 = *(_DWORD *)(v42 + 56 * v40 + 8);
              }
              else
              {
                uint64_t v42 = *(void *)(a1 + 72);
                int v43 = *(_DWORD *)(v42 + 56 * v40 + 8);
                *(_DWORD *)(a1 + 92) = v43 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v42 + 56 * v40 + 8) = v43 | 0x80000000;
              *(_DWORD *)(*(void *)(a1 + 72) + 56 * v40 + 8) = *(_DWORD *)(*(void *)(a1 + 72) + 56 * v40 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 64) + 4 * v37);
              *(void *)(*(void *)(a1 + 72) + 56 * v40) = v36;
              *(void *)(*(void *)(a1 + 72) + 56 * v40 + 16) = v22;
              uint64_t v44 = *(void *)(a1 + 72);
              uint64_t v45 = v44 + 56 * v40;
              *(unsigned char *)(v45 + 24) = v100;
              int v46 = v101;
              *(unsigned char *)(v45 + 26) = v101;
              if (v46) {
                *(unsigned char *)(v44 + 56 * v40 + 27) = v102;
              }
              int v47 = v103;
              *(unsigned char *)(v44 + 56 * v40 + 28) = v103;
              if (v47) {
                *(unsigned char *)(v44 + 56 * v40 + 29) = v104;
              }
              int v48 = v105;
              *(unsigned char *)(v44 + 56 * v40 + 30) = v105;
              if (v48) {
                *(unsigned char *)(v44 + 56 * v40 + 31) = v106;
              }
              uint64_t v49 = v44 + 56 * v40;
              *(unsigned char *)(v49 + 32) = v107;
              __int16 v50 = v108;
              *(unsigned char *)(v49 + 35) = v109;
              *(_WORD *)(v49 + 33) = v50;
              int v51 = v110;
              *(unsigned char *)(v49 + 36) = v110;
              if (v51) {
                *(unsigned char *)(v44 + 56 * v40 + 37) = v111;
              }
              int v52 = v112;
              *(unsigned char *)(v44 + 56 * v40 + 38) = v112;
              if (v52) {
                *(unsigned char *)(v44 + 56 * v40 + 39) = v113;
              }
              int v53 = v114;
              *(unsigned char *)(v44 + 56 * v40 + 40) = v114;
              if (v53) {
                *(unsigned char *)(v44 + 56 * v40 + 41) = v115;
              }
              int v54 = v116;
              *(unsigned char *)(v44 + 56 * v40 + 42) = v116;
              if (v54) {
                *(unsigned char *)(v44 + 56 * v40 + 43) = v117;
              }
              int v55 = v118;
              *(unsigned char *)(v44 + 56 * v40 + 44) = v118;
              if (v55) {
                *(_WORD *)(v44 + 56 * v40 + 46) = v119;
              }
              uint64_t v56 = v44 + 56 * v40;
              int v57 = v120;
              *(unsigned char *)(v56 + 52) = v121;
              *(_DWORD *)(v56 + 48) = v57;
              *(_DWORD *)(*(void *)(a1 + 64) + 4 * v37) = v40;
              ++*(_DWORD *)(a1 + 84);
              ++*(_DWORD *)(a1 + 96);
            }
            else
            {
              uint64_t v39 = *(void *)(a1 + 72);
              while (*(void *)(v39 + 56 * v38 + 16) != v22)
              {
                LODWORD(v38) = *(_DWORD *)(v39 + 56 * v38 + 8) & 0x7FFFFFFF;
                if (v38 == 0x7FFFFFFF) {
                  goto LABEL_83;
                }
              }
            }
            uint64_t v58 = *(void *)(v22 + 328);
            if (v58)
            {
              unint64_t v59 = *(uint64_t **)(v22 + 344);
              uint64_t v60 = 8 * v58;
              do
              {
                if ((*(unsigned char *)(*v59 + 288) & 0x41) != 0)
                {
                  uint64_t v61 = *v59;
                  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v129) = v61;
                  re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::add(&v122, (uint64_t)v84);
                }
                ++v59;
                v60 -= 8;
              }
              while (v60);
            }
          }
          unint64_t v62 = v127;
          if (v127)
          {
            unint64_t v63 = 0;
            do
              re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::operator[]((uint64_t)&v122, v63++);
            while (v62 != v63);
          }
          while (v123)
            re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(&v122);
          LODWORD(v3) = v66;
          if (v122 && (v124 & 1) == 0) {
            (*(void (**)(void))(*(void *)v122 + 40))();
          }
          re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v129);
          if (v129[0] && (v130 & 1) == 0) {
            (*(void (**)(void))(*(void *)v129[0] + 40))();
          }
          re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v135);
          unsigned int v9 = *(_DWORD *)(a2 + 32);
          uint64_t v8 = *(void *)(a2 + 16);
        }
        else
        {
          uint64_t v13 = *(void *)(a1 + 72);
          while (*(void *)(v13 + 56 * v12 + 16) != v10)
          {
            LODWORD(v12) = *(_DWORD *)(v13 + 56 * v12 + 8) & 0x7FFFFFFF;
            if (v12 == 0x7FFFFFFF) {
              goto LABEL_15;
            }
          }
        }
      }
      if (v9 <= (int)v4 + 1) {
        unsigned int v64 = v4 + 1;
      }
      else {
        unsigned int v64 = v9;
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v64 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        unsigned int v65 = v7;
        if ((*(_DWORD *)(v8 + 24 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_131;
        }
      }
      unsigned int v65 = v64;
LABEL_131:
      LODWORD(v4) = v65;
    }
    while (v3 != v65);
  }
}

void *re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::add(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[5];
  unint64_t v5 = result[1];
  if (v4 + 1 > 32 * v5)
  {
    float result = re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::setBucketsCapacity(result, (v4 + 32) >> 5);
    unint64_t v5 = v3[1];
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v3[2]) {
    int v6 = v3 + 3;
  }
  else {
    int v6 = (void *)v3[4];
  }
  uint64_t v7 = v6[v4 >> 5];
  ++v3[5];
  ++*((_DWORD *)v3 + 12);
  uint64_t v8 = (unsigned char *)(v7 + 30 * (v4 & 0x1F));
  unsigned char *v8 = *(unsigned char *)a2;
  int v9 = *(unsigned __int8 *)(a2 + 2);
  v8[2] = v9;
  if (v9) {
    *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 3) = *(unsigned char *)(a2 + 3);
  }
  int v10 = *(unsigned __int8 *)(a2 + 4);
  *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 4) = v10;
  if (v10) {
    *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 5) = *(unsigned char *)(a2 + 5);
  }
  int v11 = *(unsigned __int8 *)(a2 + 6);
  *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 6) = v11;
  if (v11) {
    *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 7) = *(unsigned char *)(a2 + 7);
  }
  uint64_t v12 = v7 + 30 * (v4 & 0x1F);
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(a2 + 8);
  __int16 v13 = *(_WORD *)(a2 + 9);
  *(unsigned char *)(v12 + 11) = *(unsigned char *)(a2 + 11);
  *(_WORD *)(v12 + 9) = v13;
  int v14 = *(unsigned __int8 *)(a2 + 12);
  *(unsigned char *)(v12 + 12) = v14;
  if (v14) {
    *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 13) = *(unsigned char *)(a2 + 13);
  }
  int v15 = *(unsigned __int8 *)(a2 + 14);
  *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 14) = v15;
  if (v15) {
    *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 15) = *(unsigned char *)(a2 + 15);
  }
  int v16 = *(unsigned __int8 *)(a2 + 16);
  *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 16) = v16;
  if (v16) {
    *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 17) = *(unsigned char *)(a2 + 17);
  }
  int v17 = *(unsigned __int8 *)(a2 + 18);
  *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 18) = v17;
  if (v17) {
    *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 19) = *(unsigned char *)(a2 + 19);
  }
  int v18 = *(unsigned __int8 *)(a2 + 20);
  *(unsigned char *)(v7 + 30 * (v4 & 0x1F) + 20) = v18;
  if (v18) {
    *(_WORD *)(v7 + 30 * (v4 & 0x1F) + 22) = *(_WORD *)(a2 + 22);
  }
  uint64_t v19 = v7 + 30 * (v4 & 0x1F);
  int v20 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(v19 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(v19 + 24) = v20;
  return result;
}

void re::ecs2::RenderOptionsManagerStateTracking::~RenderOptionsManagerStateTracking(re::ecs2::RenderOptionsManagerStateTracking *this)
{
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<re::ecs2::EntityRenderOptions>::~HierarchyStateTracking((uint64_t *)this);
}

{
  uint64_t vars8;

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 31);
  re::ecs2::HierarchyStateTracking<re::ecs2::EntityRenderOptions>::~HierarchyStateTracking((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::RenderOptionsManagerStateTracking::trackedComponents(re::ecs2::RenderOptionsManagerStateTracking *this)
{
  return *((void *)this + 33);
}

uint64_t re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        unint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 960, 0);
          int v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          int v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            int v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 30 * (a2 & 0x1F);
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityRenderOptions,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v43, 0, 36);
      *(void *)&v43[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v43, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v43;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v43[8];
      *(_OWORD *)int v43 = v5;
      *(void *)&v43[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v43[24];
      *(_OWORD *)&v43[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v43[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7;
        int v13 = DWORD1(v9);
        uint64_t v14 = 48;
        do
        {
          uint64_t v15 = *(void *)&v43[16];
          uint64_t v16 = *(void *)&v43[16] + v14;
          if ((*(_DWORD *)(*(void *)&v43[16] + v14 - 40) & 0x80000000) != 0)
          {
            unint64_t v17 = *(void *)(v16 - 48);
            unint64_t v18 = *(unsigned int *)(a1 + 24);
            unint64_t v19 = v17 % v18;
            uint64_t v20 = *(unsigned int *)(a1 + 36);
            if (v20 == 0x7FFFFFFF)
            {
              uint64_t v20 = *(unsigned int *)(a1 + 32);
              int v21 = v20;
              if (v20 == v18)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityRenderOptions,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v13));
                unint64_t v19 = v17 % *(unsigned int *)(a1 + 24);
                int v21 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v21 + 1;
              uint64_t v22 = *(void *)(a1 + 16);
              int v23 = *(_DWORD *)(v22 + 56 * v20 + 8);
            }
            else
            {
              uint64_t v22 = *(void *)(a1 + 16);
              int v23 = *(_DWORD *)(v22 + 56 * v20 + 8);
              *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v22 + 56 * v20 + 8) = v23 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v20 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v20 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v19);
            *(void *)(*(void *)(a1 + 16) + 56 * v20) = v17;
            *(void *)(*(void *)(a1 + 16) + 56 * v20 + 16) = *(void *)(v16 - 32);
            uint64_t v24 = *(void *)(a1 + 16);
            uint64_t v25 = v24 + 56 * v20;
            *(unsigned char *)(v25 + 24) = *(unsigned char *)(v16 - 24);
            uint64_t v26 = v15 + v14;
            int v27 = *(unsigned __int8 *)(v15 + v14 - 22);
            *(unsigned char *)(v25 + 26) = v27;
            if (v27) {
              *(unsigned char *)(v24 + 56 * v20 + 27) = *(unsigned char *)(v26 - 21);
            }
            int v28 = *(unsigned __int8 *)(v26 - 20);
            *(unsigned char *)(v24 + 56 * v20 + 28) = v28;
            if (v28) {
              *(unsigned char *)(v24 + 56 * v20 + 29) = *(unsigned char *)(v15 + v14 - 19);
            }
            uint64_t v29 = v15 + v14;
            int v30 = *(unsigned __int8 *)(v15 + v14 - 18);
            *(unsigned char *)(v24 + 56 * v20 + 30) = v30;
            if (v30) {
              *(unsigned char *)(v24 + 56 * v20 + 31) = *(unsigned char *)(v29 - 17);
            }
            uint64_t v31 = v24 + 56 * v20;
            *(unsigned char *)(v31 + 32) = *(unsigned char *)(v29 - 16);
            __int16 v32 = *(_WORD *)(v29 - 15);
            *(unsigned char *)(v31 + 35) = *(unsigned char *)(v29 - 13);
            *(_WORD *)(v31 + 33) = v32;
            int v33 = *(unsigned __int8 *)(v29 - 12);
            *(unsigned char *)(v31 + 36) = v33;
            if (v33) {
              *(unsigned char *)(v24 + 56 * v20 + 37) = *(unsigned char *)(v15 + v14 - 11);
            }
            uint64_t v34 = v15 + v14;
            int v35 = *(unsigned __int8 *)(v15 + v14 - 10);
            *(unsigned char *)(v24 + 56 * v20 + 38) = v35;
            if (v35) {
              *(unsigned char *)(v24 + 56 * v20 + 39) = *(unsigned char *)(v34 - 9);
            }
            int v36 = *(unsigned __int8 *)(v34 - 8);
            *(unsigned char *)(v24 + 56 * v20 + 40) = v36;
            if (v36) {
              *(unsigned char *)(v24 + 56 * v20 + 41) = *(unsigned char *)(v15 + v14 - 7);
            }
            uint64_t v37 = v15 + v14;
            int v38 = *(unsigned __int8 *)(v15 + v14 - 6);
            *(unsigned char *)(v24 + 56 * v20 + 42) = v38;
            if (v38) {
              *(unsigned char *)(v24 + 56 * v20 + 43) = *(unsigned char *)(v37 - 5);
            }
            int v39 = *(unsigned __int8 *)(v37 - 4);
            *(unsigned char *)(v24 + 56 * v20 + 44) = v39;
            if (v39) {
              *(_WORD *)(v24 + 56 * v20 + 46) = *(_WORD *)(v15 + v14 - 2);
            }
            uint64_t v40 = v24 + 56 * v20;
            int v41 = *(_DWORD *)(v15 + v14);
            *(unsigned char *)(v40 + 52) = *(unsigned char *)(v15 + v14 + 4);
            *(_DWORD *)(v40 + 48) = v41;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v19) = v20;
            int v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            unsigned int v10 = *(_DWORD *)&v43[32];
          }
          ++v11;
          v14 += 56;
        }
        while (v11 < v10);
      }
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)v43);
    }
  }
  else
  {
    if (a2) {
      signed int v42 = a2;
    }
    else {
      signed int v42 = 3;
    }
  }
}

void *anonymous namespace'::createStateCommandsFromAssetData(uint64_t a1, re::StateGraph *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unint64_t v20 = 0;
  uint64_t result = (void *)re::StateGraph::findStateByName(this, (const re::StringID *)(a1 + 80), &v20);
  if (result)
  {
    uint64_t v4 = result;
    re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)v17, (uint64_t *)(a1 + 40));
    if (v18)
    {
      uint64_t v5 = v19;
      uint64_t v6 = v19 + 424 * v18;
      long long v7 = v4 + 6;
      do
      {
        uint64_t StateCommand = re::ecs2::StateCommandFactoryECS::createStateCommand((re *)*(unsigned __int8 *)(v5 + 400), (const StringID *)(v5 + 408));
        if (StateCommand)
        {
          uint64_t v9 = StateCommand;
          if (*(void *)(v5 + 16))
          {
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            while (1)
            {
              unint64_t v12 = *(void *)(v5 + 56);
              if (v12 <= v11) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 56))(v9, *(void *)(v5 + 32) + v10, *(void *)(*(void *)(v5 + 72) + 8 * v11++));
              v10 += 16;
              if (v11 >= *(void *)(v5 + 16)) {
                goto LABEL_9;
              }
            }
            uint64_t v21 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v32 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v22 = 136315906;
            int v23 = "operator[]";
            __int16 v24 = 1024;
            int v25 = 797;
            __int16 v26 = 2048;
            unint64_t v27 = v11;
            __int16 v28 = 2048;
            unint64_t v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_30;
          }
LABEL_9:
          if (*(void *)(v5 + 96))
          {
            uint64_t v13 = 0;
            unint64_t v11 = 0;
            while (1)
            {
              unint64_t v12 = *(void *)(v5 + 136);
              if (v12 <= v11) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t, float))(*(void *)v9 + 64))(v9, *(void *)(v5 + 112) + v13, *(float *)(*(void *)(v5 + 152) + 4 * v11++));
              v13 += 16;
              if (v11 >= *(void *)(v5 + 96)) {
                goto LABEL_13;
              }
            }
LABEL_30:
            uint64_t v21 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v32 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v22 = 136315906;
            int v23 = "operator[]";
            __int16 v24 = 1024;
            int v25 = 797;
            __int16 v26 = 2048;
            unint64_t v27 = v11;
            __int16 v28 = 2048;
            unint64_t v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_31:
            uint64_t v21 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v32 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v22 = 136315906;
            int v23 = "operator[]";
            __int16 v24 = 1024;
            int v25 = 797;
            __int16 v26 = 2048;
            unint64_t v27 = v11;
            __int16 v28 = 2048;
            unint64_t v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_32:
            uint64_t v21 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v32 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v22 = 136315906;
            int v23 = "operator[]";
            __int16 v24 = 1024;
            int v25 = 797;
            __int16 v26 = 2048;
            unint64_t v27 = v11;
            __int16 v28 = 2048;
            unint64_t v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_33;
          }
LABEL_13:
          if (*(void *)(v5 + 176))
          {
            uint64_t v14 = 0;
            unint64_t v11 = 0;
            do
            {
              unint64_t v12 = *(void *)(v5 + 216);
              if (v12 <= v11) {
                goto LABEL_31;
              }
              (*(void (**)(uint64_t, uint64_t, double))(*(void *)v9 + 72))(v9, *(void *)(v5 + 192) + v14, *(double *)(*(void *)(v5 + 232) + 8 * v11++));
              v14 += 16;
            }
            while (v11 < *(void *)(v5 + 176));
          }
          if (*(void *)(v5 + 256))
          {
            uint64_t v15 = 0;
            unint64_t v11 = 0;
            do
            {
              unint64_t v12 = *(void *)(v5 + 296);
              if (v12 <= v11) {
                goto LABEL_32;
              }
              (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 80))(v9, *(void *)(v5 + 272) + v15, *(unsigned __int8 *)(*(void *)(v5 + 312) + v11++));
              v15 += 16;
            }
            while (v11 < *(void *)(v5 + 256));
          }
          if (*(void *)(v5 + 336))
          {
            uint64_t v16 = 0;
            unint64_t v11 = 0;
            while (1)
            {
              unint64_t v12 = *(void *)(v5 + 376);
              if (v12 <= v11) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 88))(v9, *(void *)(v5 + 352) + v16, *(void *)(v5 + 392) + v16);
              ++v11;
              v16 += 16;
              if (v11 >= *(void *)(v5 + 336)) {
                goto LABEL_25;
              }
            }
LABEL_33:
            uint64_t v21 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v32 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v22 = 136315906;
            int v23 = "operator[]";
            __int16 v24 = 1024;
            int v25 = 797;
            __int16 v26 = 2048;
            unint64_t v27 = v11;
            __int16 v28 = 2048;
            unint64_t v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_25:
          *(void *)&long long v30 = v9;
          re::DynamicArray<re::TransitionCondition *>::add(v7, &v30);
        }
        v5 += 424;
      }
      while (v5 != v6);
    }
    return re::DynamicArray<re::SMAssetStateCommand>::deinit(v17);
  }
  return result;
}

void re::ecs2::LayeredStateMachine::deinit(uint64_t **this)
{
  int v1 = (re::ecs2::LayeredStateMachine *)this;
  unint64_t v2 = this[2];
  if (v2)
  {
    uint64_t v3 = this[3];
    uint64_t v4 = 8 * (void)v2;
    do
    {
      uint64_t v5 = *v3;
      if (*v3)
      {
        uint64_t v6 = re::globalAllocators((re *)this);
        this = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6[2] + 40))(v6[2], v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v1 + 1);
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)v1 + 32);
  *((unsigned char *)v1 + 88) = 0;
  *((void *)v1 + 10) = 0;
}

uint64_t re::ecs2::LayeredStateMachine::currentState(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 32, a3);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = *v5;
  if (*v5 >= *(void *)(a1 + 16) || v6 >= *(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v9 = *(unint64_t **)(*(void *)(a1 + 24) + 8 * v6);
  uint64_t v10 = *(void *)(a2 + 16) + 40 * v6;
  return re::StateMachine::currentState(v9, v10);
}

uint64_t re::ecs2::LayeredStateMachine::previousState(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 32, a3);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = *v5;
  if (*v5 >= *(void *)(a1 + 16) || v6 >= *(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8 * v6);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 16) + 40 * v6;
  return re::StateMachine::previousState(v8, v9);
}

unint64_t *re::ecs2::LayeredStateMachine::currentTransition(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 32, a3);
  if (result)
  {
    unint64_t v6 = *result;
    if (*result >= *(void *)(a1 + 16) || v6 >= *(void *)(a2 + 8)) {
      return 0;
    }
    else {
      return *(unint64_t **)(*(void *)(*(void *)(a1 + 24) + 8 * v6) + 32);
    }
  }
  return result;
}

uint64_t re::ecs2::StateMachineComponent::currentState(re::ecs2::StateMachineComponent *this, const re::StringID *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  if ((~*(_DWORD *)(v2 + 288) & 0x2008) != 0) {
    return 0;
  }
  uint64_t v5 = re::AssetHandle::loadedAsset<re::StateMachineAsset>((re::ecs2::StateMachineComponent *)((char *)this + 32));
  if (!v5) {
    return 0;
  }
  return re::ecs2::LayeredStateMachine::currentState((uint64_t)this + 80, v5 + 80, a2);
}

uint64_t re::AssetHandle::loadedAsset<re::StateMachineAsset>(re::StateMachineAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::StateMachineAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::ecs2::StateMachineComponent::previousState(re::ecs2::StateMachineComponent *this, const re::StringID *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  if ((~*(_DWORD *)(v2 + 288) & 0x2008) != 0) {
    return 0;
  }
  uint64_t v5 = re::AssetHandle::loadedAsset<re::StateMachineAsset>((re::ecs2::StateMachineComponent *)((char *)this + 32));
  if (!v5) {
    return 0;
  }
  return re::ecs2::LayeredStateMachine::previousState((uint64_t)this + 80, v5 + 80, a2);
}

unint64_t *re::ecs2::StateMachineComponent::currentTransition(re::ecs2::StateMachineComponent *this, const re::StringID *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  if ((~*(_DWORD *)(v2 + 288) & 0x2008) != 0) {
    return 0;
  }
  uint64_t v5 = re::AssetHandle::loadedAsset<re::StateMachineAsset>((re::ecs2::StateMachineComponent *)((char *)this + 32));
  if (!v5) {
    return 0;
  }
  return re::ecs2::LayeredStateMachine::currentTransition((uint64_t)this + 80, v5 + 80, a2);
}

void re::ecs2::StateMachineSystem::update(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::StateMachineComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 24);
      if (v5)
      {
        float v6 = *(float *)&a3;
        long long v7 = *(void **)(v4 + 40);
        unint64_t i = 0xBF58476D1CE4E5B9;
        uint64_t v9 = &v7[v5];
        v85 = v9;
        while (1)
        {
          uint64_t v10 = *v7;
          uint64_t v11 = *(void *)(*v7 + 16);
          if (!v11 || (~*(_DWORD *)(v11 + 288) & 0x2008) != 0) {
            goto LABEL_106;
          }
          unint64_t var1 = v10 + 56;
          uint64_t v13 = *(void *)(v10 + 64);
          if (v13)
          {
            unsigned int v14 = atomic_load((unsigned int *)(v13 + 704));
            if (v14 != 2) {
              goto LABEL_19;
            }
          }
          uint64_t v15 = (re::StateParameterBlackboardAsset *)re::AssetHandle::loadedAsset<re::StateMachineAsset>((re::StateMachineAsset *)(v10 + 32));
          if (!v15)
          {
            unint64_t var1 = v10 + 32;
            uint64_t v9 = v85;
LABEL_19:
            re::AssetHandle::loadAsync((re::AssetHandle *)var1);
            goto LABEL_106;
          }
          uint64_t v16 = v15;
          __int16 v86 = (re::StateParameterBlackboard *)(v10 + 32);
          if (!*(void *)(v10 + 456))
          {
            {
              re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
            }
            re::makeBindPoint((re *)re::introspect<re::ecs2::Entity>(void)::info, *(const re::IntrospectionBase **)(v10 + 16), (uint64_t)buf);
            *(void *)(v10 + 432) = *(void *)buf;
            re::DynamicArray<re::RigDataValue>::operator=(v10 + 440, (uint64_t)&buf[8]);
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
            uint64_t v15 = (re::StateParameterBlackboardAsset *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
          }
          uint64_t v87 = v10;
          if (*(void *)(v10 + 64))
          {
            unint64_t v17 = re::StateParameterBlackboardAsset::assetType(v15);
            unsigned __int8 v90 = (re::StateMachineBlackboardBinding *)re::AssetHandle::assetWithType((re::AssetHandle *)(v10 + 56), (const re::AssetType *)v17, 0);
            if (!v90)
            {
              uint64_t v18 = *re::assetsLogObjects(0);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                unsigned __int8 v80 = re::AssetHandle::assetInfo((re::AssetHandle *)(v10 + 56));
                if (v80[17]) {
                  __int16 v81 = (char *)v80[18];
                }
                else {
                  __int16 v81 = (char *)v80 + 137;
                }
                *(_DWORD *)buf = 136315138;
                *(void *)&buf[4] = v81;
                _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", buf, 0xCu);
              }
            }
            unint64_t v19 = *(void *)(v10 + 64);
            uint64_t v20 = v19 ? *(void *)(v19 + 664) : 0;
            unint64_t v21 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
            unint64_t v22 = v20 ^ (v21 >> 31) ^ v21;
            if (*(void *)(v10 + 424) != v22) {
              break;
            }
          }
LABEL_41:
          unint64_t v41 = *(void *)(v10 + 40);
          if (v41) {
            uint64_t v42 = *(void *)(v41 + 664);
          }
          else {
            uint64_t v42 = 0;
          }
          unint64_t v43 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) >> 27));
          unint64_t v44 = v42 ^ (v43 >> 31) ^ v43;
          uint64_t v89 = v10 + 432;
          char v91 = (re::StateMachineBlackboardBinding *)(v10 + 176);
          if (*(void *)(v10 + 160) == v44)
          {
            uint64_t v45 = 0;
            goto LABEL_78;
          }
          v84 = v7;
          unint64_t v82 = v44;
          char v83 = (uint64_t **)(v10 + 80);
          re::ecs2::LayeredStateMachine::deinit((uint64_t **)(v10 + 80));
          unint64_t v47 = *((void *)v16 + 7);
          if (!v47) {
            goto LABEL_60;
          }
          for (unint64_t i = 0; i < v47; ++i)
          {
            long long v7 = (void *)(*((void *)v16 + 9) + 40 * i);
            if (!v7[2]) {
              continue;
            }
            unint64_t v48 = 0;
            do
            {
              unint64_t v49 = *((void *)v16 + 11);
              if (v49 <= i)
              {
                unint64_t v92 = 0;
                long long v98 = 0u;
                long long v99 = 0u;
                long long v96 = 0u;
                long long v97 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v101 = 136315906;
                unsigned __int8 v102 = "operator[]";
                __int16 v103 = 1024;
                int v104 = 476;
                __int16 v105 = 2048;
                unsigned __int8 v106 = (void *)i;
                __int16 v107 = 2048;
                unint64_t v108 = v49;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_117:
                unint64_t v92 = 0;
                long long v98 = 0u;
                long long v99 = 0u;
                long long v96 = 0u;
                long long v97 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v101 = 136315906;
                unsigned __int8 v102 = "operator[]";
                __int16 v103 = 1024;
                int v104 = 797;
                __int16 v105 = 2048;
                unsigned __int8 v106 = (void *)v48;
                __int16 v107 = 2048;
                unint64_t v108 = v49;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_118;
              }
              uint64_t v50 = *((void *)v16 + 12);
              unint64_t v49 = *(void *)(v50 + 40 * i + 16);
              if (v49 <= v48) {
                goto LABEL_117;
              }
              uint64_t v51 = v7[4];
              int v52 = *(re::StateGraph **)(*(void *)(v50 + 40 * i + 32) + 8 * v48);
              if (*(unsigned char *)(v51 + 168 * v48 + 56)) {
              uint64_t v53 = v51 + 168 * v48;
              }
              uint64_t v54 = *(void *)(v53 + 16);
              if (v54)
              {
                unint64_t var1 = *(void *)(v53 + 32);
                unint64_t v55 = var1 + 104 * v54;
                do
                {
                  re::DynamicArray<re::SMAssetStateTransition>::DynamicArray((uint64_t)buf, (uint64_t *)var1);
                  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)&v97 + 8, (uint64_t *)(var1 + 40));
                  re::StringID::StringID((re::StringID *)v100, (const StringID *)(var1 + 80));
                  v100[4] = *(_DWORD *)(var1 + 96);
                  re::StringID::destroyString((re::StringID *)v100);
                  re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)&v97 + 1);
                  StateCommandsFromAssetData = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)buf);
                  var1 += 104;
                }
                while (var1 != v55);
              }
              ++v48;
            }
            while (v48 < v7[2]);
            unint64_t v47 = *((void *)v16 + 7);
            uint64_t v10 = v87;
          }
LABEL_60:
          unint64_t i = *((void *)v16 + 2);
          if (!i)
          {
            uint64_t v45 = 0;
            goto LABEL_77;
          }
          if (*(unsigned char *)(v10 + 168))
          {
            re::ecs2::LayeredStateMachine::deinit(v83);
            unint64_t i = *((void *)v16 + 2);
          }
          *(void *)(v10 + 96) = i;
          if (i)
          {
            if (!(i >> 61))
            {
                                                   + 32))();
              *(void *)(v10 + 104) = v56;
              if (v56)
              {
                unint64_t v59 = v56;
                if (i != 1)
                {
                  bzero(v56, 8 * i - 8);
                  v59 += i - 1;
                }
                *unint64_t v59 = 0;
                goto LABEL_69;
              }
LABEL_122:
              re::internal::assertLog((re::internal *)4, v58, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
              _os_crash();
              __break(1u);
            }
LABEL_121:
            re::internal::assertLog((re::internal *)6, v57, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, i);
            _os_crash();
            __break(1u);
            goto LABEL_122;
          }
LABEL_69:
          unint64_t v94 = 0;
          if (!*((void *)v16 + 2))
          {
LABEL_75:
            uint64_t v45 = 1;
            uint64_t v10 = v87;
            *(unsigned char *)(v87 + 168) = 1;
            *(void *)(v87 + 160) = v82;
LABEL_77:
            long long v7 = v84;
            unint64_t i = 0xBF58476D1CE4E5B9;
            goto LABEL_78;
          }
          unint64_t i = 0;
          while (1)
          {
            uint64_t v60 = *((void *)v16 + 4);
            uint64_t v61 = re::globalAllocators((re *)v56);
            uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v61[2] + 32))(v61[2], 48, 8);
            *(void *)&long long v63 = -1;
            *((void *)&v63 + 1) = -1;
            *(_OWORD *)uint64_t v62 = v63;
            *(_OWORD *)(v62 + 16) = v63;
            *(void *)(v62 + 32) = 0;
            *(void *)(v62 + 40) = 0;
            long long v7 = (void *)v94;
            unint64_t v64 = *(void *)(v87 + 96);
            if (v64 <= v94) {
              goto LABEL_119;
            }
            uint64_t v65 = v62;
            *(void *)(*(void *)(v87 + 104) + 8 * v94) = v62;
            re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v87 + 112, (StringID *)(v60 + 48 * i), &v94);
            long long v7 = (void *)v94;
            unint64_t v64 = *((void *)v16 + 11);
            if (v64 <= v94) {
              goto LABEL_120;
            }
            uint64_t v56 = (void *)re::StateMachine::init(v65, *((void *)v16 + 12) + 40 * v94, (uint64_t)v91, (void *)(v60 + 48 * i + 16), (const re::StringID *)(v60 + 48 * i + 32), v89);
            if (!v56) {
              break;
            }
            unint64_t i = v94 + 1;
            unint64_t v94 = i;
            if (i >= *((void *)v16 + 2)) {
              goto LABEL_75;
            }
          }
          re::ecs2::LayeredStateMachine::deinit(v83);
          uint64_t v45 = 0;
          long long v7 = v84;
          unint64_t i = 0xBF58476D1CE4E5B9;
          uint64_t v10 = v87;
LABEL_78:
          unsigned int v66 = v86;
          if (!*(void *)(v10 + 64))
          {
            uint64_t v72 = *(void *)(v10 + 16);
            if (v72)
            {
              if ((~*(_DWORD *)(v72 + 288) & 0x2008) == 0)
              {
                uint64_t v73 = *(void *)(v10 + 40);
                if (v73)
                {
                  unsigned int v74 = atomic_load((unsigned int *)(v73 + 704));
                  if (v74 == 2) {
                    re::StateMachineBlackboardBinding::updateFromGraphsAndParameterBinding(v91, v86, (const re::AssetHandle *)(v10 + 376), *(re::StateMachineParameterBinding **)(v10 + 16), (re::ecs2::Entity *)v45);
                  }
                }
              }
            }
          }
          if (*(void *)(v10 + 96))
          {
            uint64_t v67 = 0;
            unint64_t v49 = 0;
            while (1)
            {
              unint64_t var1 = *((void *)v16 + 11);
              if (var1 <= v49) {
                break;
              }
              re::StateMachine::update(*(unint64_t **)(*(void *)(v10 + 104) + 8 * v49++), *((void *)v16 + 12) + v67, (uint64_t)v91, v89, v6);
              v67 += 40;
              if (v49 >= *(void *)(v10 + 96)) {
                goto LABEL_83;
              }
            }
LABEL_118:
            unint64_t v92 = 0;
            long long v98 = 0u;
            long long v99 = 0u;
            long long v96 = 0u;
            long long v97 = 0u;
            *(_OWORD *)buf = 0u;
            unint64_t v64 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v101 = 136315906;
            unsigned __int8 v102 = "operator[]";
            __int16 v103 = 1024;
            int v104 = 476;
            __int16 v105 = 2048;
            unsigned __int8 v106 = (void *)v49;
            __int16 v107 = 2048;
            unint64_t v108 = var1;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_119:
            unint64_t v92 = 0;
            long long v98 = 0u;
            long long v99 = 0u;
            long long v96 = 0u;
            long long v97 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v101 = 136315906;
            unsigned __int8 v102 = "operator[]";
            __int16 v103 = 1024;
            int v104 = 468;
            __int16 v105 = 2048;
            unsigned __int8 v106 = v7;
            __int16 v107 = 2048;
            unint64_t v108 = v64;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_120:
            unint64_t v92 = 0;
            long long v98 = 0u;
            long long v99 = 0u;
            long long v96 = 0u;
            long long v97 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v101 = 136315906;
            unsigned __int8 v102 = "operator[]";
            __int16 v103 = 1024;
            int v104 = 476;
            __int16 v105 = 2048;
            unsigned __int8 v106 = v7;
            __int16 v107 = 2048;
            unint64_t v108 = v64;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_121;
          }
LABEL_83:
          uint64_t v68 = *(unsigned int *)(v10 + 360);
          if (v68)
          {
            uint64_t v69 = 0;
            __int16 v70 = *(int **)(v10 + 344);
            uint64_t v9 = v85;
            while (1)
            {
              int v71 = *v70;
              v70 += 8;
              if (v71 < 0) {
                break;
              }
              if (v68 == ++v69)
              {
                LODWORD(v69) = *(_DWORD *)(v10 + 360);
                break;
              }
            }
          }
          else
          {
            LODWORD(v69) = 0;
            uint64_t v9 = v85;
          }
          if (v68 != v69)
          {
            uint64_t v75 = v69;
            uint64_t v76 = *(void *)(v10 + 344);
            do
            {
              char v77 = *(unsigned char **)(v76 + 32 * v75 + 24);
              if (v77[56])
              {
                (*(void (**)(unsigned char *, re::StateParameterBlackboard *))(*(void *)v77 + 8))(v77, v66);
                v77[56] = 0;
                LODWORD(v68) = *(_DWORD *)(v10 + 360);
                uint64_t v76 = *(void *)(v10 + 344);
              }
              if (v68 <= (int)v69 + 1) {
                int v78 = v69 + 1;
              }
              else {
                int v78 = v68;
              }
              while (1)
              {
                uint64_t v75 = (v69 + 1);
                if (v78 - 1 == v69) {
                  break;
                }
                LODWORD(v69) = v69 + 1;
                int v79 = v75;
                if ((*(_DWORD *)(v76 + 32 * v75) & 0x80000000) != 0) {
                  goto LABEL_105;
                }
              }
              int v79 = v78;
LABEL_105:
              LODWORD(v69) = v79;
            }
            while (v68 != v79);
          }
LABEL_106:
          if (++v7 == v9) {
            return;
          }
        }
        unint64_t v88 = v22;
        int v23 = (re::StateParameterBlackboard *)(v10 + 176);
        re::StateParameterBlackboard::deinit((re::StateParameterBlackboard *)(v10 + 176));
        uint64_t v24 = *((void *)v90 + 2);
        if (v24)
        {
          int v25 = (StringID *)*((void *)v90 + 3);
          uint64_t v26 = 32 * v24;
          while (1)
          {
            re::makeBindNode(*(re **)(v87 + 16), (uint64_t)&v101);
            unint64_t var1 = (unint64_t)v25[1].var1;
            size_t v27 = strlen((const char *)var1);
            unint64_t v92 = var1;
            size_t v93 = v27;
            re::BindNode::bindPoint<long long>((re::BindNode **)&v101, (uint64_t *)&v92, (uint64_t)buf);
            if (!*((void *)&v96 + 1)) {
              break;
            }
            re::StateParameterBlackboard::addStateParameterInt(v23, v25, (const re::BindPoint *)buf);
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
            re::BindNode::deinit((re::BindNode *)&v101);
            v25 += 2;
            v26 -= 32;
            if (!v26) {
              goto LABEL_26;
            }
          }
        }
        else
        {
LABEL_26:
          uint64_t v28 = *((void *)v90 + 5);
          if (v28)
          {
            unint64_t v29 = (StringID *)*((void *)v90 + 6);
            uint64_t v30 = 32 * v28;
            while (1)
            {
              re::makeBindNode(*(re **)(v87 + 16), (uint64_t)&v101);
              unint64_t var1 = (unint64_t)v29[1].var1;
              size_t v31 = strlen((const char *)var1);
              unint64_t v92 = var1;
              size_t v93 = v31;
              re::BindNode::bindPoint<float>((re::BindNode **)&v101, (uint64_t *)&v92, (uint64_t)buf);
              if (!*((void *)&v96 + 1)) {
                break;
              }
              re::StateParameterBlackboard::addStateParameterFloat(v23, v29, (const re::BindPoint *)buf);
              re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
              re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
              re::BindNode::deinit((re::BindNode *)&v101);
              v29 += 2;
              v30 -= 32;
              if (!v30) {
                goto LABEL_30;
              }
            }
          }
          else
          {
LABEL_30:
            uint64_t v32 = *((void *)v90 + 8);
            if (v32)
            {
              long long v33 = (StringID *)*((void *)v90 + 9);
              uint64_t v34 = 32 * v32;
              while (1)
              {
                re::makeBindNode(*(re **)(v87 + 16), (uint64_t)&v101);
                unint64_t var1 = (unint64_t)v33[1].var1;
                size_t v35 = strlen((const char *)var1);
                unint64_t v92 = var1;
                size_t v93 = v35;
                re::BindNode::bindPoint<BOOL>((re::BindNode **)&v101, (uint64_t *)&v92, (uint64_t)buf);
                if (!*((void *)&v96 + 1)) {
                  break;
                }
                re::StateParameterBlackboard::addStateParameterBool(v23, v33, (const re::BindPoint *)buf);
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
                re::BindNode::deinit((re::BindNode *)&v101);
                v33 += 2;
                v34 -= 32;
                if (!v34) {
                  goto LABEL_34;
                }
              }
            }
            else
            {
LABEL_34:
              uint64_t v36 = *((void *)v90 + 11);
              if (!v36)
              {
LABEL_38:
                unint64_t v40 = v88;
LABEL_40:
                uint64_t v10 = v87;
                *(void *)(v87 + 424) = v40;
                unint64_t i = 0xBF58476D1CE4E5B9;
                goto LABEL_41;
              }
              uint64_t v37 = (StringID *)*((void *)v90 + 12);
              uint64_t v38 = 32 * v36;
              while (1)
              {
                re::makeBindNode(*(re **)(v87 + 16), (uint64_t)&v101);
                unint64_t var1 = (unint64_t)v37[1].var1;
                size_t v39 = strlen((const char *)var1);
                unint64_t v92 = var1;
                size_t v93 = v39;
                re::BindNode::bindPoint<BOOL>((re::BindNode **)&v101, (uint64_t *)&v92, (uint64_t)buf);
                if (!*((void *)&v96 + 1)) {
                  break;
                }
                re::StateParameterBlackboard::addStateParameterTrigger(v23, v37, (const re::BindPoint *)buf);
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
                re::BindNode::deinit((re::BindNode *)&v101);
                v37 += 2;
                v38 -= 32;
                if (!v38) {
                  goto LABEL_38;
                }
              }
            }
          }
        }
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
        re::BindNode::deinit((re::BindNode *)&v101);
        unint64_t v40 = 0;
        goto LABEL_40;
      }
    }
  }
}

void *re::ecs2::allocInfo_StateMachineComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EA18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EA18))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8EA48, "StateMachineComponent");
    __cxa_guard_release(&qword_26AF8EA18);
  }
  return &unk_26AF8EA48;
}

void re::ecs2::initInfo_StateMachineComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x700177634F73DE0ELL;
  v20[1] = "StateMachineComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_319, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_319);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8EA28 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "stateMachineAsset";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8EA30 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      unsigned int v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "stateParameterBlackboardAsset";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x3800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8EA38 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v17 = re::introspect_StateMachineParameterBinding((re::IntrospectionBase **)1);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "m_boundParameters";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x17800000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8EA40 = v18;
      __cxa_guard_release(&_MergedGlobals_319);
    }
  }
  *((void *)this + 2) = 0x1E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8EA28;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::StateMachineComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::StateMachineComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StateMachineComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StateMachineComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::StateMachineComponent>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::StateMachineComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::StateMachineComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::StateMachineComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_StateMachineComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateMachineComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateMachineComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateMachineComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateMachineComponent>, this);
}

void *re::ecs2::allocInfo_StateMachineSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EA20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EA20))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8EAC0, "StateMachineSystem");
    __cxa_guard_release(&qword_26AF8EA20);
  }
  return &unk_26AF8EAC0;
}

void re::ecs2::initInfo_StateMachineSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x628ABEEFE93FD8CALL;
  v5[1] = "StateMachineSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_StateMachineSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::StateMachineSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::StateMachineSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::StateMachineSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::StateMachineSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StateMachineSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StateMachineSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::StateMachineSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  *uint64_t v3 = &unk_26E707B80;
}

void *re::internal::defaultDestruct<re::ecs2::StateMachineSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::StateMachineSystem>(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *int v1 = &unk_26E707B80;
}

void *re::internal::defaultDestructV2<re::ecs2::StateMachineSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_StateMachineSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateMachineSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateMachineSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateMachineSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateMachineSystem>, this);
}

void re::ecs2::StateMachineSystem::~StateMachineSystem(re::ecs2::StateMachineSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::StateMachineSystem::typeInfo(re::ecs2::StateMachineSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateMachineSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateMachineSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateMachineSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateMachineSystem>, 0);
}

double re::make::shared::unsafelyInplace<re::ecs2::StateMachineComponent>(_OWORD *a1)
{
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  a1[11] = 0u;
  int v1 = a1 + 11;
  a1[5] = 0u;
  uint64_t v2 = a1 + 5;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6DD8;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *uint64_t v2 = &unk_26E6F6E60;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 132) = 0u;
  *(void *)(v3 + 148) = 0x7FFFFFFFLL;
  *(void *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 168) = 0;
  *(void *)int v1 = &unk_26E6F6E90;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_DWORD *)(v3 + 216) = 0;
  *(void *)(v3 + 220) = 0x7FFFFFFFLL;
  *(_DWORD *)(v3 + 264) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(void *)((char *)v1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)v1 + 104) = 0u;
  *(_OWORD *)((char *)v1 + 120) = 0u;
  *(_DWORD *)(v3 + 312) = 0;
  *(void *)((char *)v1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)v1 + 152) = 0u;
  *(_OWORD *)((char *)v1 + 168) = 0u;
  double result = 0.0;
  *(_DWORD *)(v3 + 360) = 0;
  *(void *)((char *)v1 + 188) = 0x7FFFFFFFLL;
  *(void *)(v3 + 408) = 0;
  *(void *)(v3 + 384) = 0;
  *(void *)(v3 + 392) = 0;
  *(_DWORD *)(v3 + 400) = 0;
  *(void *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(void *)(v3 + 472) = 0;
  *(_OWORD *)(v3 + 452) = 0u;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  return result;
}

id re::internal::defaultRetain<re::ecs2::StateMachineSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::StateMachineSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

double re::makeBindNode@<D0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = a1;
  if (a1)
  {
    uint64_t v9 = 0;
    long long v6 = 0u;
    long long v7 = 0u;
    int v8 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)uint64_t v4 = &unk_26E707E40;
    *(void *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 40) = 0;
    *(void *)(v4 + 16) = *((void *)&v6 + 1);
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 24) = v7;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 32) = *((void *)&v7 + 1);
    *((void *)&v6 + 1) = 0;
    long long v7 = 0uLL;
    *(void *)(v4 + 48) = v9;
    uint64_t v9 = 0;
    ++v8;
    *(_DWORD *)(v4 + 40) = 1;
    *(void *)(a2 + 16) = v4;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v6 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v6 + 8);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

id re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::ECSService>,re::ecs2::ECSService*&>(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  memset(v9, 0, sizeof(v9));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v9);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v9);
  uint64_t v5 = a1[5] + 32 * a1[3];
  uint64_t v6 = *a3;
  *(void *)(v5 - 32) = &unk_26E7085B8;
  if (v6) {
    long long v7 = (void *)(v6 + 8);
  }
  else {
    long long v7 = 0;
  }
  return objc_initWeak((id *)(v5 - 24), v7);
}

double re::makeBindNode@<D0>(re *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = this;
  if (this)
  {
    uint64_t v10 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    int v9 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)uint64_t v5 = &unk_26E707C08;
    *(void *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 40) = 0;
    *(void *)(v5 + 16) = *((void *)&v7 + 1);
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 24) = v8;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 32) = *((void *)&v8 + 1);
    *((void *)&v7 + 1) = 0;
    long long v8 = 0uLL;
    *(void *)(v5 + 48) = v10;
    uint64_t v10 = 0;
    ++v9;
    *(_DWORD *)(v5 + 40) = 1;
    *(void *)(a2 + 16) = v5;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v7 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v7 + 8);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  double result;
  long long v7;
  long long v8;
  int v9;
  uint64_t v10;
  re *v11;

  uint64_t v11 = this;
  if (this)
  {
    uint64_t v10 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    int v9 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)uint64_t v5 = &unk_26E707FA8;
    *(void *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 40) = 0;
    *(void *)(v5 + 16) = *((void *)&v7 + 1);
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 24) = v8;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 32) = *((void *)&v8 + 1);
    *((void *)&v7 + 1) = 0;
    long long v8 = 0uLL;
    *(void *)(v5 + 48) = v10;
    uint64_t v10 = 0;
    ++v9;
    *(_DWORD *)(v5 + 40) = 1;
    *(void *)(a2 + 16) = v5;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v7 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v7 + 8);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  _OWORD v8[2];
  int v9;
  uint64_t v10;
  re *v11;

  uint64_t v11 = this;
  if (this)
  {
    uint64_t v10 = 0;
    memset(v8, 0, sizeof(v8));
    int v9 = 0;
    uint64_t v5 = (*(uint64_t (**)(re *))(*(void *)v11 + 40))(v11);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v8 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v8 + 8);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

id re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::Scene>,re::ecs2::Scene*&>(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  memset(v9, 0, sizeof(v9));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v9);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v9);
  uint64_t v5 = a1[5] + 32 * a1[3];
  uint64_t v6 = *a3;
  *(void *)(v5 - 32) = &unk_26E708688;
  if (v6) {
    long long v7 = (void *)(v6 + 8);
  }
  else {
    long long v7 = 0;
  }
  return objc_initWeak((id *)(v5 - 24), v7);
}

id re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::Entity>,re::ecs2::Entity*&>(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  memset(v9, 0, sizeof(v9));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v9);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v9);
  uint64_t v5 = a1[5] + 32 * a1[3];
  uint64_t v6 = *a3;
  *(void *)(v5 - 32) = &unk_26E708758;
  if (v6) {
    long long v7 = (void *)(v6 + 8);
  }
  else {
    long long v7 = 0;
  }
  return objc_initWeak((id *)(v5 - 24), v7);
}

id re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::Component>,re::ecs2::Component*&>(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  memset(v9, 0, sizeof(v9));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v9);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v9);
  uint64_t v5 = a1[5] + 32 * a1[3];
  uint64_t v6 = *a3;
  *(void *)(v5 - 32) = &unk_26E708828;
  if (v6) {
    long long v7 = (void *)(v6 + 8);
  }
  else {
    long long v7 = 0;
  }
  return objc_initWeak((id *)(v5 - 24), v7);
}

double re::makeEntityBindNodeForComponent@<D0>(re *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v12 = this;
  if (this)
  {
    uint64_t v11 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    int v10 = 0;
    re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>(&v8);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)uint64_t v6 = &unk_26E707FA8;
    *(void *)(v6 + 8) = v8;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 16) = *((void *)&v8 + 1);
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 24) = v9;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 32) = *((void *)&v9 + 1);
    *((void *)&v8 + 1) = 0;
    long long v9 = 0uLL;
    *(void *)(v6 + 48) = v11;
    uint64_t v11 = 0;
    ++v10;
    *(_DWORD *)(v6 + 40) = 1;
    *(void *)(a2 + 16) = v6;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v8 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v8 + 8);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::Component>,re::ecs2::Component const*&>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  memset(v8, 0, sizeof(v8));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v8);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v8);
  uint64_t v5 = a1[5] + 32 * a1[3];
  if (*a3) {
    uint64_t v6 = (void *)(*a3 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  objc_initWeak((id *)v8, v6);
  *(void *)(v5 - 24) = 0;
  long long v7 = (id *)(v5 - 24);
  *(v7 - 1) = &unk_26E708828;
  objc_moveWeak(v7, (id *)v8);
  objc_destroyWeak((id *)v8);
}

void re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  memset(v2, 0, sizeof(v2));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v2);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v2);
  *(void *)(a1[5] + 32 * a1[3] - 32) = &unk_26E7088F8;
}

void anonymous namespace'::SceneBindNodeImpl::~SceneBindNodeImpl(_anonymous_namespace_::SceneBindNodeImpl *this)
{
  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindNodeImpl<anonymous namespace'::SceneBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<anonymous namespace'::SceneBindNodeImpl>::copyInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E707C08;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<anonymous namespace'::SceneBindNodeImpl>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E707C08;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<anonymous namespace'::SceneBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  if ((char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) != "8") {
    return 0;
  }
  return re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

uint64_t anonymous namespace'::SceneBindNodeImpl::nodeForURI@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(const char **)a2;
  size_t v5 = *(void *)(a2 + 8);
  long long v7 = (_anonymous_namespace_ *)strncmp(*(const char **)a2, "scene", v5);
  if (v7 || aScene_1[v5])
  {
    uint64_t result = strncmp(v6, "service", v5);
    if (result || aService[v5])
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    else
    {
      {
        {
          re::introspect<re::ecs2::ECSService>(void)::info = re::ecs2::introspect_ECSService(0);
        }
      }
      uint64_t v18 = 0;
      uint64_t v13 = re::introspect<re::ecs2::ECSService>(void)::info;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      int v17 = 0;
      re::BindPoint::addToBindPointStack((re::BindPoint *)&v13, (const re::BindPoint *)(a1 + 8));
      re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>(&v13);
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)uint64_t v12 = &unk_26E707E40;
      *(void *)(v12 + 8) = v13;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 16) = v14;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 24) = v15;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 32) = v16;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      *(void *)(v12 + 48) = v18;
      uint64_t v18 = 0;
      ++v17;
      *(_DWORD *)(v12 + 40) = 1;
      *(void *)(a3 + 16) = v12;
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v14);
      return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v14);
    }
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *uint64_t v9 = &unk_26E707C08;
    v9[1] = *(void *)(a1 + 8);
    uint64_t result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(v9 + 2), (uint64_t *)(a1 + 16));
    *(void *)(a3 + 16) = v9;
  }
  return result;
}

uint64_t anonymous namespace'::SceneBindNodeImpl::relativeNodeForKey@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  if (v20[0])
  {
    uint64_t v14 = a1[1];
    uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v15, a1 + 2);
    long long v7 = v21;
    size_t v8 = v22;
    v13[0] = 0;
    v13[1] = (uint64_t)"";
    re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>,re::internal::SceneEntityRelationship>(&v14, v13);
    re::StringID::destroyString((re::StringID *)v13);
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)uint64_t v11 = &unk_26E707FA8;
    *(void *)(v11 + 8) = v14;
    *(_DWORD *)(v11 + 40) = 0;
    *(void *)(v11 + 16) = v15;
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 24) = v16;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 32) = v17;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)(v11 + 48) = v19;
    uint64_t v19 = 0;
    ++v18;
    *(_DWORD *)(v11 + 40) = 1;
    *(void *)(a3 + 16) = v11;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v15);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v15);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  uint64_t result = (uint64_t)v23;
  if (v23)
  {
    if (v24) {
      return (*(uint64_t (**)(uint64_t *, uint64_t))(*v23 + 40))(v23, v25);
    }
  }
  return result;
}

uint64_t anonymous namespace'::SceneBindNodeImpl::readBindingKey(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  if (*(unsigned char *)(a4 + 16)) {
    *(unsigned char *)(a4 + 16) = 0;
  }
  long long v12 = 0uLL;
  uint64_t result = re::internal::parseNextBindingKey(a2, &v12, a3);
  if (result)
  {
    uint64_t v8 = *((void *)&v12 + 1);
    if (*((void *)&v12 + 1) == 8)
    {
      uint64_t v9 = v12;
      if (*(void *)v12 == 0x7365697469746E65)
      {
        long long v11 = 0uLL;
        uint64_t result = re::internal::parseNextBindingKey(a2, &v11, a3);
        if (result)
        {
          long long v10 = v11;
          *(_OWORD *)a4 = v12;
          if (!*(unsigned char *)(a4 + 16)) {
            *(unsigned char *)(a4 + 16) = 1;
          }
          *(_OWORD *)(a4 + 24) = v10;
        }
        return result;
      }
    }
    else
    {
      uint64_t v9 = v12;
    }
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v8;
    if (*(unsigned char *)(a4 + 16)) {
      *(unsigned char *)(a4 + 16) = 0;
    }
    return 1;
  }
  return result;
}

uint64_t anonymous namespace'::SceneBindNodeImpl::bindPointForKey@<X0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  re::DynamicString::setCapacity(&v19, 0);
  uint64_t v8 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v8 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v14)
    {
      re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
      uint64_t v8 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  if (v8[288] == a2
  {
    *(void *)(a4 + 40) = 0;
    *(void *)a4 = a2;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (const re::BindPoint *)(a1 + 8));
    long long v10 = v17;
    size_t v11 = v18;
    v15[0] = 0;
    v15[1] = (uint64_t)"";
    re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>,re::internal::SceneEntityRelationship>((void *)a4, v15);
    re::StringID::destroyString((re::StringID *)v15);
  }
  else
  {
    *(void *)(a4 + 40) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 0;
  }
  uint64_t result = (uint64_t)v19;
  if (v19)
  {
    if (v20) {
      return (*(uint64_t (**)(void))(*v19 + 40))();
    }
  }
  return result;
}

void re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  memset(v2, 0, sizeof(v2));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v2);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v2);
  *(void *)(a1[5] + 32 * a1[3] - 32) = &unk_26E707CA0;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::~ECSRelationshipBindPointImpl()
{
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E707CA0;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E707CA0;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::equals(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) == (void)&re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 56);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v4, v6, v7)
       - 0x61C8864680B583E9;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 56);
  if (!v4) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 64))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 56);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, v4, v7, v8);
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 56);
  if (v4 && a4)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v4, v6, v7);
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 56);
  if (v4 && a4)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 88))(v5, v4, v6, v7);
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *a3;
  if (a2) {
    uint64_t v5 = *(void *)(a2 + 56);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 96))(v4, v5, v7, v8);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 56);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 104))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    if (v5)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 112))(v7, v5, v8, v9, a5);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 56);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 120))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    if (v4)
    {
      uint64_t v5 = *a3;
      uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v8, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4, v6, v7);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 56);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 136))(v5, v4, v6, v7);
}

double anonymous namespace'::EntityAndComponentBindingKeyHelper::entityNameFromBindingKey(uint64_t a1, long long *a2, re::DynamicString *a3)
{
  if (*((unsigned char *)a2 + 16))
  {
    if (*((void *)a2 + 1) != 8 || **(void **)a2 != 0x7365697469746E65)
    {
      *(unsigned char *)a1 = 0;
      return result;
    }
    a2 = (long long *)((char *)a2 + 24);
  }
  long long v10 = *a2;
  if (re::internal::doesBindingKeyNeedUnescaping((uint64_t *)&v10))
  {
    re::internal::unescapeBindingKey((uint64_t *)&v10, a3);
    unint64_t v6 = *((void *)a3 + 1);
    uint64_t v7 = (char *)*((void *)a3 + 2);
    if ((v6 & 1) == 0) {
      uint64_t v7 = (char *)a3 + 9;
    }
    unint64_t v8 = v6 >> 1;
    unint64_t v9 = v6 >> 1;
    if (*((void *)a3 + 1)) {
      unint64_t v9 = v8;
    }
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v9;
    *(unsigned char *)a1 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 1;
    double result = *(double *)&v10;
    *(_OWORD *)(a1 + 8) = v10;
  }
  return result;
}

void re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>,re::internal::SceneEntityRelationship>(void *a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v6);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v6);
  uint64_t v4 = a1[5] + 32 * a1[3];
  *(void *)(v4 - 32) = &unk_26E707D70;
  uint64_t v5 = *a2;
  *(void *)(v4 - 24) = *(void *)(v4 - 24) & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)(v4 - 24) = *a2 & 0xFFFFFFFFFFFFFFFELL | v5 & 1;
  *(void *)(v4 - 16) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  return a1;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::implTypeInfo(void)const::typeInfo;
}

re::StringID *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E707D70;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::moveInto(uint64_t result, void *a2)
{
  *a2 = &unk_26E707D70;
  uint64_t v2 = *(void *)(result + 8);
  a2[1] = a2[1] & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[1] = *(void *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[2] = *(void *)(result + 16);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = "";
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::equals(uint64_t a1, void *a2)
{
  if ((_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) != &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::implTypeInfo(void)const::typeInfo) {
    return 0;
  }
  return re::StringID::operator==((void *)(a1 + 8), a2 + 1);
}

unint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = (re::internal::SceneEntityRelationship *)(a1 + 8);
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((v5 >> 31) ^ (v5 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v5 >> 31) ^ (v5 >> 1))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (a4)
  {
    uint64_t v10 = re::internal::SceneEntityRelationship::resolveRelationship(v4, *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *a3;
      uint64_t v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
      v7 ^= (v7 << 6)
          + (v7 >> 2)
          + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v11, v13, v14)
          - 0x61C8864680B583E9;
    }
  }
  return v7;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
  if (result)
  {
    if (a4)
    {
      uint64_t v7 = result;
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 64))(v8, v7, v9, v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
  if (result) {
    BOOL v7 = a4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = result;
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 72))(v9, v8, v10, v11);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v6 = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
  if (v6 && a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 80))(v7, v6, v8, v9);
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v6 = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
  if (v6 && a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v6, v8, v9);
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = *a3;
  if (a2) {
    uint64_t v6 = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 96))(v5, v6, v8, v9);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 104))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    uint64_t result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(result + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 112))(v9, v8, v10, v11, a5);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 120))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    uint64_t result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(result + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 128))(v7, v6, v8, v9);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(void *)(a2 + 104) + 328), *(uint64_t **)(*(void *)(a2 + 104) + 344));
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 136))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::SceneEntityRelationship::resolveRelationship(re::internal::SceneEntityRelationship *this, void *a2, uint64_t *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = a3;
  uint64_t v5 = 8 * (void)a2;
  uint64_t v6 = 8 * (void)a2;
  uint64_t v7 = a3;
  while (1)
  {
    uint64_t v8 = *v7;
    if (re::StringID::operator==((void *)(*v7 + 272), this)) {
      break;
    }
    ++v7;
    v6 -= 8;
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (!v8)
  {
LABEL_7:
    while (1)
    {
      if ((*(unsigned char *)(*v3 + 289) & 4) != 0)
      {
        uint64_t v9 = re::internal::SceneEntityRelationship::resolveRelationship_internal(this, *v3);
        if (v9) {
          break;
        }
      }
      ++v3;
      v5 -= 8;
      if (!v5) {
        return 0;
      }
    }
    return v9;
  }
  return v8;
}

uint64_t re::internal::SceneEntityRelationship::resolveRelationship_internal(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 328);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 344);
  uint64_t v5 = 8 * v2;
  while (1)
  {
    uint64_t v6 = *v4;
    if ((*(unsigned char *)(*v4 + 289) & 4) != 0)
    {
      if (re::StringID::operator==((void *)(v6 + 272), a1)) {
        return v6;
      }
      uint64_t v7 = re::internal::SceneEntityRelationship::resolveRelationship_internal(a1, v6);
      if (v7) {
        break;
      }
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return v7;
}

void anonymous namespace'::ECSServiceBindNodeImpl::~ECSServiceBindNodeImpl(_anonymous_namespace_::ECSServiceBindNodeImpl *this)
{
  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindNodeImpl<anonymous namespace'::ECSServiceBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<anonymous namespace'::ECSServiceBindNodeImpl>::copyInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E707E40;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<anonymous namespace'::ECSServiceBindNodeImpl>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E707E40;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<anonymous namespace'::ECSServiceBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  if ((char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) != "8") {
    return 0;
  }
  return re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

uint64_t anonymous namespace'::ECSServiceBindNodeImpl::nodeForURI@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5 = *(void *)(a2 + 8);
  uint64_t result = strncmp(*(const char **)a2, "service", v5);
  if (result || aService[v5])
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    uint64_t v8 = *(void *)(a1 + 8);
    *uint64_t v7 = &unk_26E707E40;
    v7[1] = v8;
    uint64_t result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(v7 + 2), (uint64_t *)(a1 + 16));
    *(void *)(a3 + 16) = v7;
  }
  return result;
}

uint64_t anonymous namespace'::ECSServiceBindNodeImpl::relativeNodeForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(const char **)a2;
  size_t v5 = *(void *)(a2 + 8);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v17, (uint64_t *)(a1 + 16));
  uint64_t v14 = 0;
  uint64_t v15 = "";
  memset(v22, 0, sizeof(v22));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v17, v22);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v22);
  uint64_t v8 = v21 + 32 * v19;
  uint64_t v9 = v14;
  uint64_t v10 = v15;
  *(void *)(v8 - 32) = &unk_26E707ED8;
  *(void *)(v8 - 24) = v9;
  *(void *)(v8 - 16) = v10;
  uint64_t v14 = 0;
  uint64_t v15 = "";
  re::StringID::destroyString((re::StringID *)&v14);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)uint64_t v12 = &unk_26E707C08;
  *(void *)(v12 + 8) = v16;
  *(_DWORD *)(v12 + 40) = 0;
  *(void *)(v12 + 16) = v17;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 24) = v18;
  *(void *)(v12 + 32) = 0;
  *(void *)(v12 + 32) = v19;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  *(void *)(v12 + 48) = v21;
  uint64_t v21 = 0;
  ++v20;
  *(_DWORD *)(v12 + 40) = 1;
  *(void *)(a3 + 16) = v12;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v17);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v17);
}

double anonymous namespace'::ECSServiceBindNodeImpl::bindPointForKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double anonymous namespace'::ECSServiceBindNodeImpl::bindPointWithOverrideForKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  return a1;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::implTypeInfo(void)const::typeInfo;
}

re::StringID *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E707ED8;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::moveInto(uint64_t result, void *a2)
{
  *a2 = &unk_26E707ED8;
  uint64_t v2 = *(void *)(result + 8);
  a2[1] = a2[1] & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[1] = *(void *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[2] = *(void *)(result + 16);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = "";
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::equals(uint64_t a1, void *a2)
{
  if ((_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) != &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::implTypeInfo(void)const::typeInfo) {
    return 0;
  }
  return re::StringID::operator==((void *)(a1 + 8), a2 + 1);
}

unint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v18[0] = a3;
  v18[1] = a4;
  uint64_t v4 = (void *)(a1 + 8);
  unint64_t v5 = 0xBF58476D1CE4E5B9 * ((*(void *)(a1 + 8) >> 31) ^ (*(void *)(a1 + 8) >> 1));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  if (a4)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
    uint64_t v10 = *(void *)(v9 + 24);
    if (v10)
    {
      uint64_t v11 = *(uint64_t **)(v9 + 40);
      uint64_t v12 = 8 * v10;
      while (1)
      {
        uint64_t v13 = *v11;
        if (re::StringID::operator==((void *)(*v11 + 32), v4)) {
          break;
        }
        ++v11;
        v12 -= 8;
        if (!v12) {
          return v6;
        }
      }
      if (v13)
      {
        uint64_t v14 = *a3;
        uint64_t v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v18, 1uLL, a4);
        v6 ^= (v6 << 6)
            + (v6 >> 2)
            - 0x61C8864680B583E9
            + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 48))(v14, v13, v15, v16);
      }
    }
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)(a1 + 8);
  uint64_t v10 = *(uint64_t **)(v7 + 40);
  uint64_t v11 = 8 * v8;
  while (1)
  {
    uint64_t v12 = *v10;
    if (re::StringID::operator==((void *)(*v10 + 32), v9)) {
      break;
    }
    ++v10;
    v11 -= 8;
    if (!v11) {
      return 0;
    }
  }
  if (!v12) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v13 = *a3;
  uint64_t v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 64))(v13, v12, v14, v15);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  uint64_t v8 = *(void *)(result + 24);
  if (v8)
  {
    uint64_t v9 = (void *)(a1 + 8);
    uint64_t v10 = *(uint64_t **)(result + 40);
    uint64_t v11 = 8 * v8;
    while (1)
    {
      uint64_t v12 = *v10;
      uint64_t result = re::StringID::operator==((void *)(*v10 + 32), v9);
      if (result) {
        break;
      }
      ++v10;
      v11 -= 8;
      if (!v11) {
        return result;
      }
    }
    if (v12) {
      BOOL v13 = a4 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      uint64_t v14 = *a3;
      uint64_t v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 72))(v14, v12, v15, v16);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)(a1 + 8);
  uint64_t v10 = *(uint64_t **)(v7 + 40);
  uint64_t v11 = 8 * v8;
  while (1)
  {
    uint64_t v12 = *v10;
    if (re::StringID::operator==((void *)(*v10 + 32), v9)) {
      break;
    }
    ++v10;
    v11 -= 8;
    if (!v11) {
      return 0;
    }
  }
  if (v12 && a4)
  {
    uint64_t v14 = *a3;
    uint64_t v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 80))(v14, v12, v15, v16);
  }
  return v12;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)(a1 + 8);
  uint64_t v10 = *(uint64_t **)(v7 + 40);
  uint64_t v11 = 8 * v8;
  while (1)
  {
    uint64_t v12 = *v10;
    if (re::StringID::operator==((void *)(*v10 + 32), v9)) {
      break;
    }
    ++v10;
    v11 -= 8;
    if (!v11) {
      return 0;
    }
  }
  if (v12 && a4)
  {
    uint64_t v14 = *a3;
    uint64_t v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 88))(v14, v12, v15, v16);
  }
  return v12;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = *a3;
  if (a2 && (v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2), (uint64_t v8 = *(void *)(v7 + 24)) != 0))
  {
    uint64_t v9 = (void *)(a1 + 8);
    uint64_t v10 = *(uint64_t **)(v7 + 40);
    uint64_t v11 = 8 * v8;
    while (1)
    {
      uint64_t v12 = *v10;
      if (re::StringID::operator==((void *)(*v10 + 32), v9)) {
        break;
      }
      ++v10;
      v11 -= 8;
      if (!v11) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v12 = 0;
  }
  uint64_t v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 96))(v5, v12, v13, v14);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)(a1 + 8);
  uint64_t v10 = *(uint64_t **)(v7 + 40);
  uint64_t v11 = 8 * v8;
  while (1)
  {
    uint64_t v12 = *v10;
    if (re::StringID::operator==((void *)(*v10 + 32), v9)) {
      break;
    }
    ++v10;
    v11 -= 8;
    if (!v11) {
      return 0;
    }
  }
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *a3;
  uint64_t v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 104))(v13, v12, v14, v15);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v17[0] = a3;
  v17[1] = a4;
  if (a4)
  {
    uint64_t v8 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
    uint64_t v9 = *(void *)(result + 24);
    if (v9)
    {
      uint64_t v10 = (void *)(v8 + 8);
      uint64_t v11 = *(uint64_t **)(result + 40);
      uint64_t v12 = 8 * v9;
      while (1)
      {
        uint64_t v13 = *v11;
        uint64_t result = re::StringID::operator==((void *)(*v11 + 32), v10);
        if (result) {
          break;
        }
        ++v11;
        v12 -= 8;
        if (!v12) {
          return result;
        }
      }
      if (v13)
      {
        uint64_t v14 = *a3;
        uint64_t v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 112))(v14, v13, v15, v16, a5);
      }
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)(a1 + 8);
  uint64_t v10 = *(uint64_t **)(v7 + 40);
  uint64_t v11 = 8 * v8;
  while (1)
  {
    uint64_t v12 = *v10;
    if (re::StringID::operator==((void *)(*v10 + 32), v9)) {
      break;
    }
    ++v10;
    v11 -= 8;
    if (!v11) {
      return 0;
    }
  }
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *a3;
  uint64_t v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 120))(v13, v12, v14, v15);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
    uint64_t v7 = *(void *)(result + 24);
    if (v7)
    {
      uint64_t v8 = (void *)(v6 + 8);
      uint64_t v9 = *(uint64_t **)(result + 40);
      uint64_t v10 = 8 * v7;
      while (1)
      {
        uint64_t v11 = *v9;
        uint64_t result = re::StringID::operator==((void *)(*v9 + 32), v8);
        if (result) {
          break;
        }
        ++v9;
        v10 -= 8;
        if (!v10) {
          return result;
        }
      }
      if (v11)
      {
        uint64_t v12 = *a3;
        uint64_t v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 128))(v12, v11, v13, v14);
      }
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)(a1 + 8);
  uint64_t v10 = *(uint64_t **)(v7 + 40);
  uint64_t v11 = 8 * v8;
  while (1)
  {
    uint64_t v12 = *v10;
    if (re::StringID::operator==((void *)(*v10 + 32), v9)) {
      break;
    }
    ++v10;
    v11 -= 8;
    if (!v11) {
      return 0;
    }
  }
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *a3;
  uint64_t v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 136))(v13, v12, v14, v15);
}

void anonymous namespace'::EntityBindNodeImpl::~EntityBindNodeImpl(_anonymous_namespace_::EntityBindNodeImpl *this)
{
  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  int v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindNodeImpl<anonymous namespace'::EntityBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<anonymous namespace'::EntityBindNodeImpl>::copyInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E707FA8;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<anonymous namespace'::EntityBindNodeImpl>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E707FA8;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<anonymous namespace'::EntityBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  if ((char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) != "8") {
    return 0;
  }
  return re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

uint64_t anonymous namespace'::EntityBindNodeImpl::nodeForURI@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(const char **)a2;
  size_t v5 = *(void *)(a2 + 8);
  uint64_t v7 = (_anonymous_namespace_ *)strncmp(*(const char **)a2, "entity", v5);
  if (v7 || aEntity[v5])
  {
    if (!strncmp(v6, "scene", v5) && !aScene_1[v5])
    {
      {
        re::introspect<re::ecs2::Scene>(void)::info = re::ecs2::introspect_Scene(0);
      }
      uint64_t v22 = 0;
      uint64_t v17 = re::introspect<re::ecs2::Scene>(void)::info;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v21 = 0;
      re::BindPoint::addToBindPointStack((re::BindPoint *)&v17, (const re::BindPoint *)(a1 + 8));
      re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>(&v17);
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      uint64_t v13 = &unk_26E707C08;
    }
    else
    {
      uint64_t result = strncmp(v6, "service", v5);
      if (result || aService[v5])
      {
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        return result;
      }
      {
        {
          re::introspect<re::ecs2::ECSService>(void)::info = re::ecs2::introspect_ECSService(0);
        }
      }
      uint64_t v22 = 0;
      uint64_t v17 = re::introspect<re::ecs2::ECSService>(void)::info;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v21 = 0;
      re::BindPoint::addToBindPointStack((re::BindPoint *)&v17, (const re::BindPoint *)(a1 + 8));
      re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>(&v17);
      re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>(&v17);
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      uint64_t v13 = &unk_26E707E40;
    }
    *(void *)uint64_t v12 = v13;
    *(void *)(v12 + 8) = v17;
    *(_DWORD *)(v12 + 40) = 0;
    *(void *)(v12 + 16) = v18;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 24) = v19;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 32) = v20;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)(v12 + 48) = v22;
    uint64_t v22 = 0;
    ++v21;
    *(_DWORD *)(v12 + 40) = 1;
    *(void *)(a3 + 16) = v12;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v18);
    return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v18);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *uint64_t v9 = &unk_26E707FA8;
    v9[1] = *(void *)(a1 + 8);
    uint64_t result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(v9 + 2), (uint64_t *)(a1 + 16));
    *(void *)(a3 + 16) = v9;
  }
  return result;
}

uint64_t anonymous namespace'::EntityBindNodeImpl::relativeNodeForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v35 = *(void *)(a1 + 8);
  size_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v36, (uint64_t *)(a1 + 16));
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  re::DynamicString::setCapacity(&v31, 0);
  if (*(unsigned char *)(a2 + 16)
    && *(void *)(a2 + 8) == 8
    && **(void **)a2 == 0x65766974616C6572
    && *(void *)(a2 + 32) == 6)
  {
    uint64_t v7 = *(int **)(a2 + 24);
    int v8 = *v7;
    int v9 = *((unsigned __int16 *)v7 + 2);
    if (v8 == 1701994864 && v9 == 29806)
    {
      memset(v41, 0, sizeof(v41));
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v36, v41);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v41);
      *(void *)(v40 + 32 * v38 - 32) = &unk_26E708110;
      goto LABEL_19;
    }
  }
  if (v25[0])
  {
    uint64_t v12 = re::ecs2::ComponentTypeRegistry::instance(v11);
    uint64_t v13 = v26;
    size_t v14 = v27;
    *(void *)&v41[0] = 0;
    *((void *)&v41[0] + 1) = "";
    uint64_t v15 = re::ecs2::ComponentTypeRegistry::componentTypeWithName((os_unfair_lock_s *)v12, (const re::StringID *)v41);
    re::StringID::destroyString((re::StringID *)v41);
    if (v15)
    {
      *(void *)&v41[0] = v15;
      re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>,re::internal::EntityComponentRelationship>(&v35, v41);
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
LABEL_20:
      *(void *)(a3 + 16) = v18;
      goto LABEL_21;
    }
  }
  if (v28[0])
  {
    uint64_t v19 = v29;
    size_t v20 = v30;
    *(void *)&v41[0] = 0;
    *((void *)&v41[0] + 1) = "";
    re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>,re::internal::EntityChildRelationship>(&v35, (uint64_t *)v41);
    re::StringID::destroyString((re::StringID *)v41);
LABEL_19:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)uint64_t v18 = &unk_26E707FA8;
    *(void *)(v18 + 8) = v35;
    *(_DWORD *)(v18 + 40) = 0;
    *(void *)(v18 + 16) = v36;
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 24) = v37;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 32) = v38;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    *(void *)(v18 + 48) = v40;
    uint64_t v40 = 0;
    ++v39;
    *(_DWORD *)(v18 + 40) = 1;
    goto LABEL_20;
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
LABEL_21:
  if (v31 && (v32 & 1) != 0) {
    (*(void (**)(void))(*v31 + 40))();
  }
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v36);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v36);
}

uint64_t anonymous namespace'::EntityBindNodeImpl::readBindingKey(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  if (*(unsigned char *)(a4 + 16)) {
    *(unsigned char *)(a4 + 16) = 0;
  }
  __n[0] = 0;
  __n[1] = 0;
  uint64_t result = re::internal::parseNextBindingKey(a2, __n, a3);
  if (result)
  {
    size_t v8 = __n[1];
    if (__n[1] == 8)
    {
      int v9 = (const void *)__n[0];
      if (*(void *)__n[0] == 0x7365697469746E65) {
        goto LABEL_10;
      }
      uint64_t v10 = "relative";
    }
    else
    {
      if (__n[1] != 10)
      {
        int v9 = (const void *)__n[0];
LABEL_15:
        *(void *)a4 = v9;
        *(void *)(a4 + 8) = v8;
        if (*(unsigned char *)(a4 + 16)) {
          *(unsigned char *)(a4 + 16) = 0;
        }
        return 1;
      }
      int v9 = (const void *)__n[0];
      uint64_t v10 = "components";
    }
    if (!memcmp(v9, v10, __n[1]))
    {
LABEL_10:
      long long v12 = 0uLL;
      uint64_t result = re::internal::parseNextBindingKey(a2, &v12, a3);
      if (result)
      {
        long long v11 = v12;
        *(_OWORD *)a4 = *(_OWORD *)__n;
        if (!*(unsigned char *)(a4 + 16)) {
          *(unsigned char *)(a4 + 16) = 1;
        }
        *(_OWORD *)(a4 + 24) = v11;
      }
      return result;
    }
    goto LABEL_15;
  }
  return result;
}

uint64_t anonymous namespace'::EntityBindNodeImpl::bindPointForKey@<X0>(uint64_t a1@<X0>, const re::IntrospectionBase *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = 0;
  long long v32 = (unint64_t)a2;
  long long v33 = 0uLL;
  int v34 = 0;
  re::BindPoint::addToBindPointStack((re::BindPoint *)&v32, (const re::BindPoint *)(a1 + 8));
  if (!a2) {
    goto LABEL_6;
  }
  size_t v8 = re::ecs2::ComponentTypeRegistry::instance(v7);
  uint64_t v9 = re::ecs2::ComponentTypeRegistry::componentTypeWithIntrospectionInfo((os_unfair_lock_s *)v8, a2);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)v9;
    uint64_t v28 = v10;
    long long v11 = &v28;
LABEL_9:
    re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>,re::internal::EntityComponentRelationship>(&v32, v11);
    long long v16 = v33;
    *(_OWORD *)a4 = v32;
    *(_OWORD *)(a4 + 16) = v16;
    *((void *)&v32 + 1) = 0;
    long long v33 = 0uLL;
    *(void *)(a4 + 40) = v35;
    uint64_t v35 = 0;
    ++v34;
    *(_DWORD *)(a4 + 32) = 1;
    goto LABEL_13;
  }
  {
    if (v9)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
    }
  }
  if (re::introspect<re::ecs2::Component>(void)::info == (_UNKNOWN *)a2)
  {
LABEL_6:
    if ((_BYTE)v28)
    {
      long long v12 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v9);
      uint64_t v13 = v29;
      size_t v14 = v30;
      uint64_t v25 = 0;
      uint64_t v26 = "";
      uint64_t v15 = re::ecs2::ComponentTypeRegistry::componentTypeWithName((os_unfair_lock_s *)v12, (const re::StringID *)&v25);
      re::StringID::destroyString((re::StringID *)&v25);
      if (v15)
      {
        uint64_t v25 = v15;
        long long v11 = (uint64_t **)&v25;
        goto LABEL_9;
      }
    }
  }
  {
    if (v9)
    {
      re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
    }
  }
  if ((const re::IntrospectionBase *)re::introspect<re::ecs2::Entity>(void)::info != a2)
  {
LABEL_12:
    *(void *)(a4 + 40) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 0;
    goto LABEL_13;
  }
  unint64_t v29 = 0;
  size_t v30 = 0;
  uint64_t v31 = 0;
  re::DynamicString::setCapacity(&v28, 0);
  if (!(_BYTE)v25)
  {
    if (v28 && (v29 & 1) != 0) {
      (*(void (**)(double))(*v28 + 40))(v19);
    }
    goto LABEL_12;
  }
  size_t v20 = v26;
  size_t v21 = v27;
  v24[0] = 0;
  v24[1] = (uint64_t)"";
  re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>,re::internal::EntityChildRelationship>(&v32, v24);
  re::StringID::destroyString((re::StringID *)v24);
  long long v23 = v33;
  *(_OWORD *)a4 = v32;
  *(_OWORD *)(a4 + 16) = v23;
  *((void *)&v32 + 1) = 0;
  long long v33 = 0uLL;
  *(void *)(a4 + 40) = v35;
  uint64_t v35 = 0;
  ++v34;
  *(_DWORD *)(a4 + 32) = 1;
  if (v28 && (v29 & 1) != 0) {
    (*(void (**)(void))(*v28 + 40))();
  }
LABEL_13:
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v32 + 8);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v32 + 8);
}

void re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  memset(v2, 0, sizeof(v2));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v2);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v2);
  *(void *)(a1[5] + 32 * a1[3] - 32) = &unk_26E708040;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::~ECSRelationshipBindPointImpl()
{
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E708040;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E708040;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::equals(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) == (void)&re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v5, v7, v8)
       - 0x61C8864680B583E9;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v5, v7, v8);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 72))(v7, v5, v8, v9);
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5 && a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5 && a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *a3;
  if (a2)
  {
    do
    {
      uint64_t v5 = a2;
      a2 = *(void *)(a2 + 24);
    }
    while (a2);
    uint64_t v6 = *(void *)(v5 + 16);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 96))(v4, v6, v8, v9);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, v5, v7, v8);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    do
    {
      uint64_t v6 = a2;
      a2 = *(void *)(a2 + 24);
    }
    while (a2);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v5, v7, v8);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    do
    {
      uint64_t v4 = a2;
      a2 = *(void *)(a2 + 24);
    }
    while (a2);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v5, v7, v8);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 136))(v6, v5, v7, v8);
}

uint64_t anonymous namespace'::EntityAndComponentBindingKeyHelper::componentNameFromBindingKey(uint64_t result, long long *a2)
{
  if (*((unsigned char *)a2 + 16))
  {
    if (*((void *)a2 + 1) != 10
      || (**(void **)a2 == 0x6E656E6F706D6F63
        ? (BOOL v2 = *(unsigned __int16 *)(*(void *)a2 + 8) == 29556)
        : (BOOL v2 = 0),
          !v2))
    {
      *(unsigned char *)uint64_t result = 0;
      return result;
    }
    *(unsigned char *)uint64_t result = 1;
    long long v3 = *(long long *)((char *)a2 + 24);
  }
  else
  {
    *(unsigned char *)uint64_t result = 1;
    long long v3 = *a2;
  }
  *(_OWORD *)(result + 8) = v3;
  return result;
}

void re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>,re::internal::EntityComponentRelationship>(void *a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  memset(v5, 0, sizeof(v5));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v5);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v5);
  uint64_t v4 = a1[5] + 32 * a1[3];
  *(void *)(v4 - 32) = &unk_26E7081E0;
  *(void *)(v4 - 24) = *a2;
}

void re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>,re::internal::EntityChildRelationship>(void *a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v6);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v6);
  uint64_t v4 = a1[5] + 32 * a1[3];
  *(void *)(v4 - 32) = &unk_26E7084E8;
  uint64_t v5 = *a2;
  *(void *)(v4 - 24) = *(void *)(v4 - 24) & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)(v4 - 24) = *a2 & 0xFFFFFFFFFFFFFFFELL | v5 & 1;
  *(void *)(v4 - 16) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::~ECSRelationshipBindPointImpl()
{
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E708110;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E708110;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::equals(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) == (void)&re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4 || (*(unsigned char *)(v4 + 288) & 0x80) != 0) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v4, v6, v7)
       - 0x61C8864680B583E9;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4 || (*(unsigned char *)(v4 + 288) & 0x80) != 0) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 64))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4 && (*(unsigned char *)(v4 + 288) & 0x80) == 0)
  {
    if (a4)
    {
      uint64_t v5 = *a3;
      uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v8, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 72))(v5, v4, v6, v7);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 288) & 0x80) != 0)
    {
      return 0;
    }
    else if (a4)
    {
      uint64_t v5 = *a3;
      uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v4, v6, v7);
    }
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 288) & 0x80) != 0)
    {
      return 0;
    }
    else if (a4)
    {
      uint64_t v5 = *a3;
      uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 88))(v5, v4, v6, v7);
    }
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *a3;
  if (a2 && (uint64_t v5 = *(void *)(a2 + 24)) != 0)
  {
    if ((*(unsigned char *)(v5 + 288) & 0x80) != 0) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *(void *)(a2 + 24);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 96))(v4, v6, v8, v9);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4 || (*(unsigned char *)(v4 + 288) & 0x80) != 0) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 104))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (v5)
    {
      if ((*(unsigned char *)(v5 + 288) & 0x80) == 0)
      {
        uint64_t v7 = *a3;
        uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 112))(v7, v5, v8, v9, a5);
      }
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4 || (*(unsigned char *)(v4 + 288) & 0x80) != 0) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 120))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (v4)
    {
      if ((*(unsigned char *)(v4 + 288) & 0x80) == 0)
      {
        uint64_t v5 = *a3;
        uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v8, 1uLL, a4);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4, v6, v7);
      }
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4 || (*(unsigned char *)(v4 + 288) & 0x80) != 0) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 136))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::~ECSRelationshipBindPointImpl()
{
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E7081E0;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E7081E0;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::equals(uint64_t a1, void *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::implTypeInfo(void)const::typeInfo
      && *(void *)(a1 + 8) == a2[1];
}

unint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t v4 = *(const re::ecs2::ComponentTypeBase **)(a1 + 8);
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((unint64_t)v4 ^ ((unint64_t)v4 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                         * ((unint64_t)v4 ^ ((unint64_t)v4 >> 30))) >> 27));
  unint64_t v6 = v5 ^ (v5 >> 31);
  if (a4)
  {
    uint64_t v9 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), v4);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *a3;
      uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
      v6 ^= (v6 << 6)
          + (v6 >> 2)
          + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 48))(v11, v10, v12, v13)
          - 0x61C8864680B583E9;
    }
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result)
  {
    if (a4)
    {
      uint64_t v7 = result;
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 64))(v8, v7, v9, v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result) {
    BOOL v7 = a4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = result;
    uint64_t v9 = *a3;
    uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 72))(v9, v8, v10, v11);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (v6 && a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 80))(v7, v6, v8, v9);
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (v6 && a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v6, v8, v9);
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = *a3;
  if (a2) {
    uint64_t v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 96))(v5, v6, v8, v9);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 104))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(result + 8));
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v9 = *a3;
      uint64_t v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 112))(v9, v8, v10, v11, a5);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 120))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(result + 8));
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 128))(v7, v6, v8, v9);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a3;
    uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 136))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t anonymous namespace'::ComponentMemberNodeImpl::ComponentMemberNodeImpl(uint64_t a1, void *a2, uint64_t a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E7082B0;
  *(void *)(a1 + 88) = 0;
  uint64_t v6 = (re::DynamicString *)(a1 + 96);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  uint64_t v7 = *(const char **)(a3 + 32);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a1 + 128), 0);
  *(void *)(a1 + 8) = a2[3] - 1;
  (**(void (***)(void *__return_ptr, uint64_t, void *, __n128))a3)(v12, a3, a2, v10);
  if ((void *)(a1 + 16) != v12) {
    re::BindNode::move((re::BindNode *)(a1 + 16), (re::BindNode *)v12);
  }
  re::BindNode::deinit((re::BindNode *)v12);
  return a1;
}

double re::BindPoint::addToBindPointStack<re::internal::ComponentMemberBindPointImpl>(void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  memset(v8, 0, sizeof(v8));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v8);
  double v4 = re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v8);
  uint64_t v5 = a1[5] + 32 * a1[3];
  *(void *)(v5 - 32) = 0;
  *(void *)(v5 - 24) = a2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)a2 + 32))(a2, 96, 8, v4);
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 88) = 0;
  *(void *)uint64_t v6 = &unk_26E708348;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = "";
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = "";
  double result = 0.0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(v6 + 80) = 0;
  *(void *)(v5 - 16) = v6;
  return result;
}

void anonymous namespace'::ComponentMemberNodeImpl::~ComponentMemberNodeImpl(_anonymous_namespace_::ComponentMemberNodeImpl *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindNodeImpl<anonymous namespace'::ComponentMemberNodeImpl>::implTypeInfo()
{
}

re::DynamicString *re::internal::BindNodeImpl<anonymous namespace'::ComponentMemberNodeImpl>::copyInto(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(void *)a2 = &unk_26E7082B0;
  *(void *)(a2 + 8) = v4;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  re::BindNode::copy((re::BindNode *)(a2 + 16), (const re::BindNode *)(a1 + 2));
  *(void *)(a2 + 48) = a1[6];
  re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray(a2 + 56, a1 + 7);
  re::DynamicString::DynamicString((re::DynamicString *)(a2 + 96), (const re::DynamicString *)(a1 + 12));
  return re::DynamicString::DynamicString((re::DynamicString *)(a2 + 128), (const re::DynamicString *)(a1 + 16));
}

double re::internal::BindNodeImpl<anonymous namespace'::ComponentMemberNodeImpl>::moveInto(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(void *)a2 = &unk_26E7082B0;
  *(void *)(a2 + 8) = v4;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  re::BindNode::move((re::BindNode *)(a2 + 16), (re::BindNode *)(a1 + 2));
  re::BindPoint::BindPoint(a2 + 48, a1 + 6);
  double result = 0.0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(void *)(a2 + 120) = a1[15];
  uint64_t v6 = a1[13];
  *(void *)(a2 + 96) = a1[12];
  a1[12] = 0;
  uint64_t v7 = a1[14];
  a1[15] = 0;
  uint64_t v9 = *(void *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = v6;
  *(void *)(a2 + 112) = v7;
  a1[13] = v9;
  a1[14] = v8;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 152) = a1[19];
  uint64_t v10 = a1[17];
  *(void *)(a2 + 128) = a1[16];
  a1[16] = 0;
  uint64_t v11 = a1[18];
  a1[19] = 0;
  uint64_t v13 = *(void *)(a2 + 136);
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a2 + 136) = v10;
  *(void *)(a2 + 144) = v11;
  a1[17] = v13;
  a1[18] = v12;
  return result;
}

BOOL re::internal::BindNodeImpl<anonymous namespace'::ComponentMemberNodeImpl>::equals(void *a1, uint64_t *a2)
{
    || a1[1] != a2[1]
    || !re::BindNode::operator==(a1 + 2, a2 + 2)
    || !re::BindPoint::operator==((re::BindPoint *)(a1 + 6), (re::BindPoint *)(a2 + 6))
    || !re::DynamicString::operator==((uint64_t)(a1 + 12), (uint64_t)(a2 + 12)))
  {
    return 0;
  }
  return re::DynamicString::operator==((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
}

double anonymous namespace'::ComponentMemberNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double anonymous namespace'::ComponentMemberNodeImpl::relativeNodeForKey@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 72))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    re::BindNode::copy((re::BindNode *)&v9, (const re::BindNode *)(a1 + 16));
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (!v6) {
      uint64_t v6 = **(void **)(a1 + 32);
    }
    uint64_t v7 = (_anonymous_namespace_ *)(*(void *(**)(long long *__return_ptr))(v6 + 56))(&v9);
    if (!((unint64_t)v9 | (unint64_t)v10))
    {
      *a3 = 0u;
      a3[1] = 0u;
      return re::BindNode::deinit((re::BindNode *)&v9);
    }
  }
  return re::BindNode::deinit((re::BindNode *)&v9);
}

uint64_t anonymous namespace'::ComponentMemberNodeImpl::readBindingKey(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    uint64_t v1 = **(void **)(a1 + 32);
  }
  return (*(uint64_t (**)(void))(v1 + 64))();
}

void anonymous namespace'::ComponentMemberNodeImpl::bindPointForKey(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v6 = a1[17];
  unint64_t v7 = v6 >> 1;
  if ((v6 & 1) == 0) {
    unint64_t v7 = v6 >> 1;
  }
  if (v7)
  {
    uint64_t v8 = (re::BindNode *)(a1 + 2);
    long long v9 = (char *)a1[18];
    long long v10 = (char *)a1 + 137;
    if (v6) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    *(void *)&long long v18 = v11;
    *((void *)&v18 + 1) = v7;
    uint64_t v12 = v19;
    v13.n128_f64[0] = re::BindNode::relativeNode(v8, &v18, (re::BindNode *)v19);
    uint64_t v14 = v19[0];
    if (!v19[0])
    {
      uint64_t v12 = v20;
      uint64_t v14 = *v20;
    }
    (*(void (**)(void *, uint64_t, uint64_t, __n128))(v14 + 72))(v12, a2, a3, v13);
    re::BindNode::deinit((re::BindNode *)v19);
  }
  else
  {
    uint64_t v15 = a1 + 2;
    uint64_t v16 = a1[2];
    if (!v16)
    {
      uint64_t v15 = (uint64_t *)a1[4];
      uint64_t v16 = *v15;
    }
    uint64_t v17 = *(void (**)(uint64_t *))(v16 + 72);
    v17(v15);
  }
}

uint64_t anonymous namespace'::ComponentMemberNodeImpl::bindPointWithOverrideForKey@<X0>(uint64_t a1@<X0>, re::KeyValueStore *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v49[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (*(void *)(a1 + 72))
  {
    uint64_t v8 = re::DynamicString::DynamicString((re::DynamicString *)&v42, (const re::DynamicString *)(a1 + 128));
    if (v43) {
      unint64_t v9 = v43 >> 1;
    }
    else {
      unint64_t v9 = v43 >> 1;
    }
    if (v9) {
      uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)&v42, ".", 1uLL);
    }
    long long v39 = 0uLL;
    uint64_t v10 = *(void *)(a3 + 8);
    if (v10) {
      size_t v11 = v10 + 1;
    }
    else {
      size_t v11 = 0;
    }
    *((void *)&v38 + 1) = 0;
    re::DynamicString::setCapacity(&v38, v11);
    re::DynamicString::operator=((re::DynamicString *)&v38, a3);
    if (BYTE8(v38)) {
      uint64_t v12 = (const char *)v39;
    }
    else {
      uint64_t v12 = (char *)&v38 + 9;
    }
    if (BYTE8(v38)) {
      size_t v13 = *((void *)&v38 + 1) >> 1;
    }
    else {
      size_t v13 = BYTE8(v38) >> 1;
    }
    re::DynamicString::append((re::DynamicString *)&v42, v12, v13);
    uint64_t v14 = (_anonymous_namespace_ *)v38;
    if (void)v38 && (BYTE8(v38)) {
      uint64_t v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v38 + 40))();
    }
    uint64_t v41 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    int v40 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)((char *)&v38 + 8), &v45);
    re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v45);
    uint64_t v15 = v41 + 32 * *((void *)&v39 + 1);
    *(void *)(v15 - 32) = &unk_26E708418;
    *(void *)(v15 - 24) = 0;
    re::makeRelativeBindNode(*(_anonymous_namespace_ **)(a1 + 48), (uint64_t *)&v38, (uint64_t)v49);
    uint64_t v16 = v44;
    if ((v43 & 1) == 0) {
      uint64_t v16 = (re::BindNode *)((char *)&v43 + 1);
    }
    unint64_t v17 = v43 >> 1;
    if (v43) {
      unint64_t v17 = v43 >> 1;
    }
    uint64_t v36 = (char *)v16;
    unint64_t v37 = v17;
    re::BindNode::bindPoint(v49, (uint64_t)a2, (uint64_t *)&v36, (uint64_t)&v45);
    if (*((void *)&v46 + 1))
    {
      *(void *)(a4 + 40) = 0;
      *(void *)a4 = a2;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      *(_DWORD *)(a4 + 32) = 0;
      re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (const re::BindPoint *)(a1 + 48));
      long long v18 = re::BindPoint::stackItemImpl((re::BindPoint *)a4, *(void *)(a1 + 8));
      uint64_t v19 = *(void *)(a1 + 48);
      unint64_t v20 = *(void *)(a1 + 104);
      uint64_t v21 = *(void *)(a1 + 112);
      if ((v20 & 1) == 0) {
        uint64_t v21 = a1 + 105;
      }
      unint64_t v22 = v20 >> 1;
      unint64_t v23 = v20 >> 1;
      if (*(void *)(a1 + 104)) {
        unint64_t v23 = v22;
      }
      uint64_t v36 = (char *)v21;
      unint64_t v37 = v23;
      re::internal::ComponentMemberBindPointImpl::init(v18, v19, &v36, &v45);
    }
    else
    {
      *(void *)(a4 + 40) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)(a4 + 32) = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v45 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v45 + 8);
    re::BindNode::deinit((re::BindNode *)v49);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v38 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v38 + 8);
    uint64_t result = v42;
    if (v42)
    {
      if (v43) {
        return (*(uint64_t (**)(void))(*(void *)v42 + 40))();
      }
    }
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    if (!v24) {
      uint64_t v24 = **(void **)(a1 + 32);
    }
    (*(void (**)(long long *__return_ptr))(v24 + 72))(&v38);
    if (*((void *)&v39 + 1))
    {
      if ((re::BindPoint::supportsOverrideValue((re::BindPoint *)&v38) & 1) == 0
        && re::KeyValueStore::isSupportedValueType(a2, v25))
      {
        uint64_t v26 = re::BindPoint::stackItemImpl((re::BindPoint *)&v38, *(void *)(a1 + 8));
        re::DynamicString::DynamicString((re::DynamicString *)&v42, (const re::DynamicString *)(a1 + 96));
        size_t v27 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)&v42, ".", 1uLL);
        long long v46 = 0uLL;
        uint64_t v28 = *(void *)(a3 + 8);
        if (v28) {
          size_t v29 = v28 + 1;
        }
        else {
          size_t v29 = 0;
        }
        *((void *)&v45 + 1) = 0;
        re::DynamicString::setCapacity(&v45, v29);
        re::DynamicString::operator=((re::DynamicString *)&v45, a3);
        if (BYTE8(v45)) {
          size_t v30 = (const char *)v46;
        }
        else {
          size_t v30 = (char *)&v45 + 9;
        }
        if (BYTE8(v45)) {
          size_t v31 = *((void *)&v45 + 1) >> 1;
        }
        else {
          size_t v31 = BYTE8(v45) >> 1;
        }
        re::DynamicString::append((re::DynamicString *)&v42, v30, v31);
        if (void)v45 && (BYTE8(v45)) {
          (*(void (**)(void))(*(void *)v45 + 40))();
        }
        long long v32 = v44;
        if ((v43 & 1) == 0) {
          long long v32 = (re::BindNode *)((char *)&v43 + 1);
        }
        long long v33 = (re::BindNode *)(v43 >> 1);
        if (v43) {
          long long v33 = (re::BindNode *)(v43 >> 1);
        }
        v49[0] = v32;
        v49[1] = v33;
        uint64_t v48 = 0;
        long long v45 = 0u;
        long long v46 = 0u;
        int v47 = 0;
        re::internal::ComponentMemberBindPointImpl::init(v26, (uint64_t)a2, v49, &v45);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v45 + 8);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v45 + 8);
        if (v42 && (v43 & 1) != 0) {
          (*(void (**)(void))(*(void *)v42 + 40))();
        }
      }
      long long v34 = v39;
      *(_OWORD *)a4 = v38;
      *(_OWORD *)(a4 + 16) = v34;
      *((void *)&v38 + 1) = 0;
      long long v39 = 0uLL;
      *(void *)(a4 + 40) = v41;
      uint64_t v41 = 0;
      ++v40;
      *(_DWORD *)(a4 + 32) = 1;
    }
    else
    {
      *(void *)(a4 + 40) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)(a4 + 32) = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v38 + 8);
    return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v38 + 8);
  }
  return result;
}

void re::internal::ComponentMemberBindPointImpl::~ComponentMemberBindPointImpl(re::internal::ComponentMemberBindPointImpl *this)
{
  uint64_t v2 = (char *)this + 56;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::internal::ComponentMemberBindPointImpl *)((char *)this + 32));
  re::StringID::destroyString((re::internal::ComponentMemberBindPointImpl *)((char *)this + 16));
}

{
  char *v2;
  uint64_t vars8;

  uint64_t v2 = (char *)this + 56;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::internal::ComponentMemberBindPointImpl *)((char *)this + 32));
  re::StringID::destroyString((re::internal::ComponentMemberBindPointImpl *)((char *)this + 16));
  JUMPOUT(0x237DBCBD0);
}

const char *re::internal::BindPointImpl<re::internal::ComponentMemberBindPointImpl>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<re::internal::ComponentMemberBindPointImpl>::copyInto(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *a2 = &unk_26E708348;
  a2[1] = v4;
  re::StringID::StringID((re::StringID *)(a2 + 2), (const StringID *)(a1 + 16));
  re::StringID::StringID((re::StringID *)(a2 + 4), (const StringID *)(a1 + 32));
  a2[6] = *(void *)(a1 + 48);
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 7), (uint64_t *)(a1 + 56));
}

uint64_t re::internal::BindPointImpl<re::internal::ComponentMemberBindPointImpl>::moveInto(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  *a2 = &unk_26E708348;
  a2[1] = v2;
  uint64_t v3 = a1[2];
  a2[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  a2[2] = a1[2] & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  a2[3] = a1[3];
  a1[2] = 0;
  a1[3] = "";
  uint64_t v4 = a1[4];
  a2[4] = a2[4] & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
  a2[4] = a1[4] & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
  a2[5] = a1[5];
  a1[4] = 0;
  a1[5] = "";
  return re::BindPoint::BindPoint((uint64_t)(a2 + 6), a1 + 6);
}

BOOL re::internal::BindPointImpl<re::internal::ComponentMemberBindPointImpl>::equals(void *a1, void *a2)
{
    || a1[1] != a2[1]
    || !re::StringID::operator==(a1 + 2, a2 + 2)
    || !re::StringID::operator==(a1 + 4, a2 + 4))
  {
    return 0;
  }
  return re::BindPoint::operator==((re::BindPoint *)(a1 + 6), (re::BindPoint *)(a2 + 6));
}

uint64_t re::internal::ComponentMemberBindPointImpl::hash(uint64_t a1, unint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5 = 0x9E3779B97F4A7C17;
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2, v7, v8)
       - 0x61C8864680B583E9;
  }
  return ((a2 >> 2) + (a2 << 6) + v5) ^ a2;
}

uint64_t re::internal::ComponentMemberBindPointImpl::isWeak(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 56))(v5, a2, v6, v7);
}

uint64_t re::internal::ComponentMemberBindPointImpl::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 1;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 64))(v5, a2, v6, v7);
}

uint64_t re::internal::ComponentMemberBindPointImpl::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5 = result;
  v14[0] = a3;
  v14[1] = a4;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, a2, v7, v8);
  }
  unint64_t v9 = *(const re::IntrospectionBase **)(v5 + 8);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 168);
      if (!v11)
      {
        uint64_t v11 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        unint64_t v9 = *(const re::IntrospectionBase **)(v5 + 8);
      }
      if (!re::KeyValueStore::getValue((re::KeyValueStore *)(v11 + 32), v9, (const re::StringID *)(v5 + 16))) {
        re::KeyValueStore::addOrReplaceValue((re::KeyValueStore *)(v11 + 32), *(const re::IntrospectionBase **)(v5 + 8), (const re::StringID *)(v5 + 16), 0);
      }
      uint64_t v12 = (const re::StringID *)(v5 + 32);
      uint64_t result = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v11 + 88, v12);
      if (!result)
      {
        char v13 = 0;
        return re::KeyValueStore::addOrReplaceValue<BOOL>((re::KeyValueStore *)(v11 + 32), v12, &v13);
      }
    }
  }
  return result;
}

uint64_t re::internal::ComponentMemberBindPointImpl::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2, v6, v7);
  }
  return a2;
}

uint64_t re::internal::ComponentMemberBindPointImpl::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4 = a2;
  v20[0] = a3;
  v20[1] = a4;
  if (a4)
  {
    if (*(void *)(a1 + 8))
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8
        || (uint64_t v9 = *(void *)(v8 + 168)) == 0
        || (uint64_t v10 = (unsigned char *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v9 + 88, (void *)(a1 + 32))) == 0|| !*v10|| (Value = re::KeyValueStore::getValue((re::KeyValueStore *)(v9 + 32), *(const re::IntrospectionBase **)(a1 + 8), (const re::StringID *)(a1 + 16))) == 0)
      {
        uint64_t v12 = *a3;
        uint64_t v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v20, 1uLL, a4);
        uint64_t Value = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 88))(v12, v4, v13, v14);
        if (!Value) {
          return 0;
        }
      }
      if (!*(void *)(a1 + 72)) {
        return Value;
      }
      re::BindPoint::stackItemImpl((re::BindPoint *)(a1 + 48), 0)[1] = Value;
      return re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 48));
    }
    else
    {
      uint64_t v16 = *a3;
      uint64_t v17 = re::Slice<re::internal::BindPointImplBase const*>::range(v20, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 88))(v16, v4, v17, v18);
    }
  }
  return v4;
}

uint64_t re::internal::ComponentMemberBindPointImpl::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (*(void *)(a1 + 8)) {
    return 1;
  }
  if (!a4) {
    return 0;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a2, v7, v8);
}

unsigned char *re::internal::ComponentMemberBindPointImpl::isOverridden(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 168);
  if (!v3) {
    return 0;
  }
  uint64_t result = (unsigned char *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3 + 88, (void *)(a1 + 32));
  if (result) {
    return (unsigned char *)(*result != 0);
  }
  return result;
}

void re::internal::ComponentMemberBindPointImpl::setIsOverridden(re *a1, uint64_t a2, uint64_t *a3, unint64_t a4, int a5)
{
  uint64_t v21 = a3;
  unint64_t v22 = a4;
  char v20 = a5;
  if (!*((void *)a1 + 1) || (uint64_t v6 = *(void *)(a2 + 16)) == 0)
  {
LABEL_13:
    uint64_t v18 = *re::ecsComponentsLogObjects(a1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Failed to set override status for bind point component member.", buf, 2u);
    }
    return;
  }
  uint64_t v8 = a1;
  uint64_t v9 = *(void *)(v6 + 168);
  if (!v9) {
    uint64_t v9 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  uint64_t v10 = (re::KeyValueStore *)(v9 + 32);
  uint64_t v11 = (unsigned __int8 *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v9 + 88, (void *)v8 + 4);
  if (v11) {
    int v12 = *v11;
  }
  else {
    int v12 = 0;
  }
  uint64_t Value = re::KeyValueStore::getValue(v10, *((const re::IntrospectionBase **)v8 + 1), (re *)((char *)v8 + 16));
  if (v12 != a5 || !Value)
  {
    re::KeyValueStore::addOrReplaceValue<BOOL>(v10, (re *)((char *)v8 + 32), &v20);
    if (!v22)
    {
      re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
      return;
    }
    uint64_t v15 = *v21;
    uint64_t v16 = re::Slice<re::internal::BindPointImplBase const*>::range(&v21, 1uLL, v22);
    a1 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 88))(v15, a2, v16, v17);
    if (a1)
    {
      re::KeyValueStore::addAndSwapValue(v10, *((const re::IntrospectionBase **)v8 + 1), (re *)((char *)v8 + 16), (long long *)a1);
      return;
    }
    goto LABEL_13;
  }
}

uint64_t re::internal::ComponentMemberBindPointImpl::overrideValueUntyped(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  unint64_t v23 = a3;
  unint64_t v24 = a4;
  if (!*(void *)(a1 + 8))
  {
    if (a4)
    {
      uint64_t v16 = *a3;
      uint64_t v17 = re::Slice<re::internal::BindPointImplBase const*>::range(&v23, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 120))(v16, a2, v17, v18);
    }
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t v9 = *(void *)(v7 + 168);
  if (!v9) {
    uint64_t v9 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  uint64_t v10 = (unsigned char *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v9 + 88, (void *)(a1 + 32));
  if (!v10 || !*v10)
  {
    uint64_t Value = re::KeyValueStore::getValue((re::KeyValueStore *)(v9 + 32), *(const re::IntrospectionBase **)(a1 + 8), (const re::StringID *)(a1 + 16));
    if (Value)
    {
LABEL_15:
      if (*(void *)(a1 + 72))
      {
        uint64_t v21 = (re::BindPoint *)(a1 + 48);
        re::BindPoint::stackItemImpl(v21, 0)[1] = Value;
        return re::BindPoint::baseValueUntyped(v21);
      }
      return Value;
    }
    unint64_t v15 = re::KeyValueStore::addOrReplaceValue((re::KeyValueStore *)(v9 + 32), *(const re::IntrospectionBase **)(a1 + 8), (const re::StringID *)(a1 + 16), 0);
LABEL_14:
    uint64_t Value = v15;
    if (!v15) {
      return Value;
    }
    goto LABEL_15;
  }
  if (a4)
  {
    uint64_t v12 = *a3;
    uint64_t v13 = re::Slice<re::internal::BindPointImplBase const*>::range(&v23, 1uLL, a4);
    unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 88))(v12, a2, v13, v14);
    goto LABEL_14;
  }
  re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v23, v24);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *re::internal::ComponentMemberBindPointImpl::markAsWritten(uint64_t a1, const re::ecs2::Component *a2, uint64_t *a3, unint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  uint64_t result = re::ecs2::Component::markDirty(a2);
  uint64_t v8 = *((void *)a2 + 2);
  if (v8)
  {
    if (re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      uint64_t v9 = *(re::ecs2::NetworkComponent **)(v8 + 200);
      if (v9) {
        re::ecs2::NetworkComponent::markDirty(v9, a2);
      }
    }
    uint64_t result = *(void **)(v8 + 168);
    if (result) {
      uint64_t result = re::ecs2::Component::markDirty(result);
    }
  }
  if (a4)
  {
    uint64_t v10 = *a3;
    uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
    return (void *)(*(uint64_t (**)(uint64_t, const re::ecs2::Component *, uint64_t, uint64_t))(*(void *)v10 + 128))(v10, a2, v11, v12);
  }
  return result;
}

char *re::internal::ComponentMemberBindPointImpl::boundOwner()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[297];
}

void *re::BindPoint::stackItemImpl(re::BindPoint *this, unint64_t a2)
{
  if (*((void *)this + 3) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t result = (void *)(*((void *)this + 5) + 32 * a2);
  if (!*result) {
    return (void *)result[2];
  }
  return result;
}

uint64_t re::BindNode::create<anonymous namespace'::ComponentMemberNodeImpl,anonymous namespace'::ComponentMemberNodeImpl const&,re::BindNode,re::StringSlice const&>(uint64_t a1, uint64_t a2, uint64_t *a3, re::BindNode *a4, uint64_t a5)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 8) = a2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 160, 8);
  *(void *)uint64_t v9 = &unk_26E7082B0;
  *(void *)(v9 + 8) = a3[1];
  *(_OWORD *)(v9 + 16) = 0u;
  uint64_t v10 = (uint64_t *)(v9 + 16);
  *(_OWORD *)(v9 + 32) = 0u;
  re::BindNode::move((re::BindNode *)(v9 + 16), a4);
  *(void *)(v9 + 48) = a3[6];
  re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray(v9 + 56, a3 + 7);
  re::DynamicString::DynamicString((re::DynamicString *)(v9 + 96), (const re::DynamicString *)(a3 + 12));
  uint64_t v11 = re::DynamicString::DynamicString((re::DynamicString *)(v9 + 128), (const re::DynamicString *)(a3 + 16));
  if (*(void *)(v9 + 72))
  {
    unint64_t v12 = *(void *)(v9 + 136);
    if (v12) {
      unint64_t v13 = v12 >> 1;
    }
    else {
      unint64_t v13 = v12 >> 1;
    }
    if (v13) {
      uint64_t v11 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)(v9 + 128), ".", 1uLL);
    }
    long long v32 = 0;
    uint64_t v33 = 0;
    uint64_t v14 = *(void *)(a5 + 8);
    if (v14) {
      size_t v15 = v14 + 1;
    }
    else {
      size_t v15 = 0;
    }
    unint64_t v31 = 0;
    re::DynamicString::setCapacity(&v30, v15);
    re::DynamicString::operator=((re::DynamicString *)&v30, a5);
    if (v31) {
      uint64_t v16 = v32;
    }
    else {
      uint64_t v16 = (char *)&v31 + 1;
    }
    if (v31) {
      size_t v17 = v31 >> 1;
    }
    else {
      size_t v17 = v31 >> 1;
    }
    re::DynamicString::append((re::DynamicString *)(v9 + 128), v16, v17);
    uint64_t result = (uint64_t)v30;
    if (v30 && (v31 & 1) != 0) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v30 + 40))();
    }
  }
  else
  {
    LOBYTE(v28) = 0;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    uint64_t v19 = *v10;
    if (!*v10)
    {
      uint64_t v10 = *(uint64_t **)(v9 + 32);
      uint64_t v19 = *v10;
    }
    (*(void (**)(re::KeyValueStore **__return_ptr, uint64_t *, void, uint64_t **))(v19 + 72))(&v30, v10, 0, &v26);
    if ((re::BindPoint::supportsOverrideValue((re::BindPoint *)&v30) & 1) == 0)
    {
      if (re::KeyValueStore::isSupportedValueType(v30, v20))
      {
        *(void *)(v9 + 48) = v30;
        re::DynamicArray<re::RigDataValue>::operator=(v9 + 56, (uint64_t)&v31);
      }
      uint64_t v21 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)(v9 + 96), ".", 1uLL);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v22 = *(void *)(a5 + 8);
      if (v22) {
        size_t v23 = v22 + 1;
      }
      else {
        size_t v23 = 0;
      }
      unint64_t v27 = 0;
      re::DynamicString::setCapacity(&v26, v23);
      re::DynamicString::operator=((re::DynamicString *)&v26, a5);
      if (v27) {
        unint64_t v24 = v28;
      }
      else {
        unint64_t v24 = (char *)&v27 + 1;
      }
      if (v27) {
        size_t v25 = v27 >> 1;
      }
      else {
        size_t v25 = v27 >> 1;
      }
      re::DynamicString::append((re::DynamicString *)(v9 + 96), v24, v25);
      if (v26 && (v27 & 1) != 0) {
        (*(void (**)(void))(*v26 + 40))();
      }
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v31);
    uint64_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v31);
  }
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t re::internal::ComponentMemberBindPointImpl::init(void *a1, uint64_t a2, void *a3, void *a4)
{
  a1[1] = a2;
  a1[6] = *a4;
  re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(a1 + 7), (uint64_t)(a4 + 1));
  re::DynamicString::format((re::DynamicString *)"animated::%.*s", (re::DynamicString *)&v19, a3[1], *a3);
  if (v20[0]) {
    uint64_t v6 = (unsigned char *)v20[1];
  }
  else {
    uint64_t v6 = (char *)v20 + 1;
  }
  if (v20[0]) {
    uint64_t v7 = v20[0] >> 1;
  }
  else {
    uint64_t v7 = LOBYTE(v20[0]) >> 1;
  }
  for (; v7; --v7)
  {
    *uint64_t v6 = __tolower((char)*v6);
    ++v6;
  }
  re::StringID::StringID((re::StringID *)&v17, (const re::DynamicString *)&v19);
  uint64_t v8 = v17;
  uint64_t v9 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = "";
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  unint64_t v21 = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  uint64_t v22 = v11;
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v17);
  re::DynamicString::insert((re::DynamicString *)&v19, 0, "status:", 7uLL);
  re::StringID::StringID((re::StringID *)&v17, (const re::DynamicString *)&v19);
  uint64_t v12 = v17;
  unint64_t v13 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = "";
  uint64_t v14 = a1[4];
  uint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  unint64_t v21 = v12 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  uint64_t v22 = v15;
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v17);
  uint64_t result = v19;
  if (v19)
  {
    if (v20[0]) {
      return (*(uint64_t (**)(void))(*(void *)v19 + 40))();
    }
  }
  return result;
}

void re::internal::ComponentMemberBaseBindPointImpl::~ComponentMemberBaseBindPointImpl(re::internal::ComponentMemberBaseBindPointImpl *this)
{
}

void *re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::copyInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E708418;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::moveInto(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E708418;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::equals(uint64_t a1, void *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::implTypeInfo(void)const::typeInfo
      && *(void *)(a1 + 8) == a2[1];
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::isWeak(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 56))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 64))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 72))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 80))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 88))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 96))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 104))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 112))(v6, v7, v8, v9, a5);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v11[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 120))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 128))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 136))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  return a1;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::implTypeInfo(void)const::typeInfo;
}

re::StringID *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7084E8;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::moveInto(uint64_t result, void *a2)
{
  *a2 = &unk_26E7084E8;
  uint64_t v2 = *(void *)(result + 8);
  a2[1] = a2[1] & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[1] = *(void *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[2] = *(void *)(result + 16);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = "";
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::equals(uint64_t a1, void *a2)
{
  if ((_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) != &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::implTypeInfo(void)const::typeInfo) {
    return 0;
  }
  return re::StringID::operator==((void *)(a1 + 8), a2 + 1);
}

unint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v17[0] = a3;
  v17[1] = a4;
  uint64_t v4 = (void *)(a1 + 8);
  unint64_t v5 = 0xBF58476D1CE4E5B9 * ((*(void *)(a1 + 8) >> 31) ^ (*(void *)(a1 + 8) >> 1));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  if (a4)
  {
    uint64_t v7 = *(void *)(a2 + 328);
    if (v7)
    {
      uint64_t v10 = *(uint64_t **)(a2 + 344);
      uint64_t v11 = 8 * v7;
      while (1)
      {
        uint64_t v12 = *v10;
        if (re::StringID::operator==((void *)(*v10 + 272), v4)) {
          break;
        }
        ++v10;
        v11 -= 8;
        if (!v11) {
          return v6;
        }
      }
      if (v12)
      {
        uint64_t v13 = *a3;
        uint64_t v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
        v6 ^= (v6 << 6)
            + (v6 >> 2)
            - 0x61C8864680B583E9
            + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 48))(v13, v12, v14, v15);
      }
    }
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t v4 = *(void *)(a2 + 328);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = *(uint64_t **)(a2 + 344);
  uint64_t v9 = 8 * v4;
  while (1)
  {
    uint64_t v10 = *v8;
    if (re::StringID::operator==((void *)(*v8 + 272), v7)) {
      break;
    }
    ++v8;
    v9 -= 8;
    if (!v9) {
      return 0;
    }
  }
  if (!v10) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v11 = *a3;
  uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 64))(v11, v10, v12, v13);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t v4 = *(void *)(a2 + 328);
  if (v4)
  {
    uint64_t v7 = (void *)(result + 8);
    uint64_t v8 = *(uint64_t **)(a2 + 344);
    uint64_t v9 = 8 * v4;
    while (1)
    {
      uint64_t v10 = *v8;
      uint64_t result = re::StringID::operator==((void *)(*v8 + 272), v7);
      if (result) {
        break;
      }
      ++v8;
      v9 -= 8;
      if (!v9) {
        return result;
      }
    }
    if (v10) {
      BOOL v11 = a4 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t v12 = *a3;
      uint64_t v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 72))(v12, v10, v13, v14);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t v4 = *(void *)(a2 + 328);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = *(uint64_t **)(a2 + 344);
  uint64_t v9 = 8 * v4;
  while (1)
  {
    uint64_t v10 = *v8;
    if (re::StringID::operator==((void *)(*v8 + 272), v7)) {
      break;
    }
    ++v8;
    v9 -= 8;
    if (!v9) {
      return 0;
    }
  }
  if (v10 && a4)
  {
    uint64_t v12 = *a3;
    uint64_t v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(v12, v10, v13, v14);
  }
  return v10;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  uint64_t v4 = *(void *)(a2 + 328);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = *(uint64_t **)(a2 + 344);
  uint64_t v9 = 8 * v4;
  while (1)
  {
    uint64_t v10 = *v8;
    if (re::StringID::operator==((void *)(*v8 + 272), v7)) {
      break;
    }
    ++v8;
    v9 -= 8;
    if (!v9) {
      return 0;
    }
  }
  if (v10 && a4)
  {
    uint64_t v12 = *a3;
    uint64_t v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 88))(v12, v10, v13, v14);
  }
  return v10;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = *a3;
  if (a2 && (uint64_t v6 = *(void *)(a2 + 328)) != 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    uint64_t v8 = *(uint64_t **)(a2 + 344);
    uint64_t v9 = 8 * v6;
    while (1)
    {
      uint64_t v10 = *v8;
      if (re::StringID::operator==((void *)(*v8 + 272), v7)) {
        break;
      }
      ++v8;
      v9 -= 8;
      if (!v9) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v10 = 0;
  }
  uint64_t v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 96))(v5, v10, v11, v12);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 328);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = *(uint64_t **)(a2 + 344);
  uint64_t v9 = 8 * v4;
  while (1)
  {
    uint64_t v10 = *v8;
    if (re::StringID::operator==((void *)(*v8 + 272), v7)) {
      break;
    }
    ++v8;
    v9 -= 8;
    if (!v9) {
      return 0;
    }
  }
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *a3;
  uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 104))(v11, v10, v12, v13);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v16[0] = a3;
  v16[1] = a4;
  if (a4)
  {
    uint64_t v5 = *(void *)(a2 + 328);
    if (v5)
    {
      uint64_t v9 = (void *)(result + 8);
      uint64_t v10 = *(uint64_t **)(a2 + 344);
      uint64_t v11 = 8 * v5;
      while (1)
      {
        uint64_t v12 = *v10;
        uint64_t result = re::StringID::operator==((void *)(*v10 + 272), v9);
        if (result) {
          break;
        }
        ++v10;
        v11 -= 8;
        if (!v11) {
          return result;
        }
      }
      if (v12)
      {
        uint64_t v13 = *a3;
        uint64_t v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 112))(v13, v12, v14, v15, a5);
      }
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 328);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = *(uint64_t **)(a2 + 344);
  uint64_t v9 = 8 * v4;
  while (1)
  {
    uint64_t v10 = *v8;
    if (re::StringID::operator==((void *)(*v8 + 272), v7)) {
      break;
    }
    ++v8;
    v9 -= 8;
    if (!v9) {
      return 0;
    }
  }
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *a3;
  uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 120))(v11, v10, v12, v13);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(a2 + 328);
    if (v4)
    {
      uint64_t v7 = (void *)(result + 8);
      uint64_t v8 = *(uint64_t **)(a2 + 344);
      uint64_t v9 = 8 * v4;
      while (1)
      {
        uint64_t v10 = *v8;
        uint64_t result = re::StringID::operator==((void *)(*v8 + 272), v7);
        if (result) {
          break;
        }
        ++v8;
        v9 -= 8;
        if (!v9) {
          return result;
        }
      }
      if (v10)
      {
        uint64_t v11 = *a3;
        uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 128))(v11, v10, v12, v13);
      }
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v15[0] = a3;
  v15[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 328);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = *(uint64_t **)(a2 + 344);
  uint64_t v9 = 8 * v4;
  while (1)
  {
    uint64_t v10 = *v8;
    if (re::StringID::operator==((void *)(*v8 + 272), v7)) {
      break;
    }
    ++v8;
    v9 -= 8;
    if (!v9) {
      return 0;
    }
  }
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *a3;
  uint64_t v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 136))(v11, v10, v12, v13);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::~WeakBindPointImpl(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return a1;
}

void re::internal::WeakBindPointImpl<re::ecs2::ECSService>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7085B8;
  *(void *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7085B8;
  *(void *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

BOOL re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::equals(uint64_t a1, void *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::implTypeInfo(void)const::typeInfo
      && *(void *)(a1 + 8) == a2[1];
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4 - 8;
  uint64_t v6 = 0x9E3779B97F4A7C17;
  if (a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v5, v8, v9)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::isWeak()
{
  return 1;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(result + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = v4 - 8;
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 72))(v7, v6, v8, v9);
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4 - 8;
  uint64_t v7 = *a3;
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4 - 8;
  uint64_t v7 = *a3;
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 104))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (v5)
    {
      uint64_t v7 = v5 - 8;
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v4)
    {
      uint64_t v5 = v4 - 8;
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v5, v7, v8);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 136))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::~WeakBindPointImpl(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return a1;
}

void re::internal::WeakBindPointImpl<re::ecs2::Scene>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708688;
  *(void *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708688;
  *(void *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

BOOL re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::equals(uint64_t a1, void *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::implTypeInfo(void)const::typeInfo
      && *(void *)(a1 + 8) == a2[1];
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4 - 8;
  uint64_t v6 = 0x9E3779B97F4A7C17;
  if (a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v5, v8, v9)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::isWeak()
{
  return 1;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(result + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = v4 - 8;
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 72))(v7, v6, v8, v9);
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4 - 8;
  uint64_t v7 = *a3;
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4 - 8;
  uint64_t v7 = *a3;
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 104))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (v5)
    {
      uint64_t v7 = v5 - 8;
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v4)
    {
      uint64_t v5 = v4 - 8;
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v5, v7, v8);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 136))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::~WeakBindPointImpl(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return a1;
}

void re::internal::WeakBindPointImpl<re::ecs2::Entity>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708758;
  *(void *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708758;
  *(void *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

BOOL re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::equals(uint64_t a1, void *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::implTypeInfo(void)const::typeInfo
      && *(void *)(a1 + 8) == a2[1];
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4 - 8;
  uint64_t v6 = 0x9E3779B97F4A7C17;
  if (a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v5, v8, v9)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::isWeak()
{
  return 1;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(result + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = v4 - 8;
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 72))(v7, v6, v8, v9);
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4 - 8;
  uint64_t v7 = *a3;
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4 - 8;
  uint64_t v7 = *a3;
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 104))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (v5)
    {
      uint64_t v7 = v5 - 8;
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v4)
    {
      uint64_t v5 = v4 - 8;
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v5, v7, v8);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 136))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::~WeakBindPointImpl(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return a1;
}

void re::internal::WeakBindPointImpl<re::ecs2::Component>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708828;
  *(void *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708828;
  *(void *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

BOOL re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::equals(uint64_t a1, void *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(void *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::implTypeInfo(void)const::typeInfo
      && *(void *)(a1 + 8) == a2[1];
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4 - 8;
  uint64_t v6 = 0x9E3779B97F4A7C17;
  if (a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v5, v8, v9)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::isWeak()
{
  return 1;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(result + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = v4 - 8;
    uint64_t v7 = *a3;
    uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 72))(v7, v6, v8, v9);
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  if (a4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4 - 8;
  uint64_t v7 = *a3;
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4 - 8;
  uint64_t v7 = *a3;
  uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 104))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (v5)
    {
      uint64_t v7 = v5 - 8;
      uint64_t v8 = *a3;
      uint64_t v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 120))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v4)
    {
      uint64_t v5 = v4 - 8;
      uint64_t v6 = *a3;
      uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, v5, v7, v8);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *a3;
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 136))(v6, v5, v7, v8);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::~ECSRelationshipBindPointImpl()
{
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::copyInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7088F8;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7088F8;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::equals(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) == (void)&re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v4, v6, v7)
       - 0x61C8864680B583E9;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 64))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, v4, v7, v8);
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 && a4)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v4, v6, v7);
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 && a4)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 88))(v5, v4, v6, v7);
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *a3;
  if (a2) {
    uint64_t v5 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 96))(v4, v5, v7, v8);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 104))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 112))(v7, v5, v8, v9, a5);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 120))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v8[0] = a3;
  v8[1] = a4;
  if (a4)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *a3;
      uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v8, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4, v6, v7);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  v9[0] = a3;
  v9[1] = a4;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 136))(v5, v4, v6, v7);
}

uint64_t re::ecs2::AudioUpdateSystem::willAddSystemToECSService(re::ecs2::AudioUpdateSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((void *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::AudioUpdateSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  return this;
}

uint64_t re::ecs2::AudioUpdateSystem::willAddSceneToECSService(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 104);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t re::ecs2::AudioUpdateSystem::willRemoveSceneFromECSService(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 104);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t re::ecs2::AudioUpdateSystem::update(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 48))();
}

void *re::ecs2::allocInfo_AudioUpdateSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_320))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8EB40, "AudioUpdateSystem");
    __cxa_guard_release(&_MergedGlobals_320);
  }
  return &unk_26AF8EB40;
}

void re::ecs2::initInfo_AudioUpdateSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x776AC1371AA0765CLL;
  v5[1] = "AudioUpdateSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AudioUpdateSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioUpdateSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioUpdateSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioUpdateSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioUpdateSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioUpdateSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioUpdateSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::AudioUpdateSystem *re::internal::defaultConstruct<re::ecs2::AudioUpdateSystem>(int a1, int a2, re::ecs2::AudioUpdateSystem *this)
{
  return re::ecs2::AudioUpdateSystem::AudioUpdateSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AudioUpdateSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AudioUpdateSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AudioUpdateSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioUpdateSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioUpdateSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioUpdateSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioUpdateSystem>, this);
}

void re::ecs2::AudioUpdateSystem::~AudioUpdateSystem(re::ecs2::AudioUpdateSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AudioUpdateSystem::typeInfo(re::ecs2::AudioUpdateSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioUpdateSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioUpdateSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioUpdateSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioUpdateSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::AudioUpdateSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioUpdateSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t *re::ecsComponentsLogObjects(re *this)
{
  {
    re::ecsComponentsLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "ECS.Components");
  }
  return &re::ecsComponentsLogObjects(void)::logObjects;
}

void *re::ecs2::allocInfo_MeshShadowSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_321, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_321))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8EBC0, "MeshShadowSystem");
    __cxa_guard_release(&_MergedGlobals_321);
  }
  return &unk_26AF8EBC0;
}

void re::ecs2::initInfo_MeshShadowSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xD0609FA8A90D6438;
  v5[1] = "MeshShadowSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xAB000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_MeshShadowSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshShadowSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshShadowSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshShadowSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshShadowSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshShadowSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshShadowSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::MeshShadowSystem *re::internal::defaultConstruct<re::ecs2::MeshShadowSystem>(int a1, int a2, re::ecs2::MeshShadowSystem *this)
{
  return re::ecs2::MeshShadowSystem::MeshShadowSystem(this);
}

void re::internal::defaultDestruct<re::ecs2::MeshShadowSystem>(uint64_t a1, uint64_t a2, re::ecs2::MeshShadowSystem *a3)
{
}

uint64_t re::ecs2::introspect_MeshShadowSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshShadowSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshShadowSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshShadowSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshShadowSystem>, this);
}

re::ecs2::MeshShadowSystemStateImpl *re::ecs2::MeshShadowSystemStateImpl::MeshShadowSystemStateImpl(re::ecs2::MeshShadowSystemStateImpl *this, re::ecs2::MeshShadowSystem *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E708A50;
  *((void *)this + 1) = 0;
  uint64_t v3 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  long long v4 = (char *)this + 48;
  uint64_t v5 = (char *)this + 88;
  long long v6 = (char *)this + 128;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *((void *)this + 26) = a2;
  unint64_t v27 = re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  uint64_t v28 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)v23, (char *)&v27, 2uLL);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v4, (uint64_t)v23);
  if (v23[0] && v24) {
    (*(void (**)(void))(*(void *)v23[0] + 40))();
  }
  v23[0] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v23[1] = re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v23[2] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v23[3] = re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  unint64_t v24 = re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  size_t v25 = re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  uint64_t v26 = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)&v27, (char *)v23, 7uLL);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v5, (uint64_t)&v27);
  if (v27 && v30) {
    (*(void (**)(void))(*(void *)v27 + 40))();
  }
  unint64_t v27 = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v28 = re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v29 = re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)v23, (char *)&v27, 3uLL);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v6, (uint64_t)v23);
  if (v23[0] && v24) {
    (*(void (**)(void))(*(void *)v23[0] + 40))();
  }
  unint64_t v27 = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v28 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v29 = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)v23, (char *)&v27, 3uLL);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 168, (uint64_t)v23);
  if (v23[0] && v24) {
    (*(void (**)(void))(*(void *)v23[0] + 40))();
  }
  uint64_t v7 = *((void *)this + 8);
  if (v7)
  {
    uint64_t v8 = (void *)*((void *)this + 10);
    uint64_t v9 = 8 * v7;
    do
    {
      re::DynamicArray<re::TransitionCondition *>::add(v3, v8++);
      v9 -= 8;
    }
    while (v9);
  }
  uint64_t v10 = *((void *)this + 13);
  if (v10)
  {
    uint64_t v11 = (void *)*((void *)this + 15);
    uint64_t v12 = 8 * v10;
    do
    {
      re::DynamicArray<re::TransitionCondition *>::add(v3, v11++);
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v13 = *((void *)this + 18);
  if (v13)
  {
    uint64_t v14 = (void *)*((void *)this + 20);
    uint64_t v15 = 8 * v13;
    do
    {
      re::DynamicArray<re::TransitionCondition *>::add(v3, v14++);
      v15 -= 8;
    }
    while (v15);
  }
  uint64_t v16 = *((void *)this + 23);
  if (v16)
  {
    uint64_t v17 = (void **)*((void *)this + 25);
    uint64_t v18 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    uint64_t v19 = 8 * v16;
    do
    {
      if (*v17 != v18)
      {
        re::DynamicArray<re::TransitionCondition *>::add(v3, v17);
        uint64_t v18 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
      }
      ++v17;
      v19 -= 8;
    }
    while (v19);
  }
  char v20 = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  unint64_t v21 = *((void *)this + 3);
  if (v21 >= *((void *)this + 2))
  {
    re::DynamicArray<float *>::growCapacity(v3, v21 + 1);
    unint64_t v21 = *((void *)this + 3);
  }
  *(void *)(*((void *)this + 5) + 8 * v21) = v20;
  *((void *)this + 3) = v21 + 1;
  ++*((_DWORD *)this + 8);
  return this;
}

void re::ecs2::MeshShadowSystemStateImpl::willDeactivateComponent(uint64_t a1, re::ecs2::Entity *a2, void *a3)
{
  uint64_t v15 = a2;
  if (re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a3)
  {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(*(void *)(a1 + 208) + 1360, (uint64_t *)&v15);
    uint64_t v11 = v15;
    if (*((void *)v15 + 22))
    {
      (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(a1 + 208) + 128) + 56))(v22);
      int isEntityAMeshReceiver = re::internal::shadows::isEntityAMeshReceiver(v11, (re::ecs2::Entity *)v22, v12);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
      if (isEntityAMeshReceiver) {
        re::ecs2::MeshShadowSystem::processReceiverRemoval(*(re::ecs2::MeshShadowSystem **)(a1 + 208), v15);
      }
    }
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a3)
  {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*(void *)(a1 + 208) + 1456, (uint64_t *)&v15);
    re::ecs2::MeshShadowSystem::processCasterRemoval(*(re::ecs2::MeshShadowSystem **)(a1 + 208), v15);
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a3)
  {
    uint64_t v14 = *(void *)(a1 + 208);
    if (*(unsigned char *)(v14 + 1744)) {
      *(unsigned char *)(v14 + 1745) = 0;
    }
    else {
      *(_WORD *)(v14 + 1744) = 1;
    }
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a3)
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v22);
    v16[0] = 0;
    v16[1] = 0;
    int v17 = 1;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    int v21 = 0;
    re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v16, (uint64_t)v22, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v16) = a2;
    while (v20)
    {
      uint64_t v5 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v16, v20 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v16, --v20);
      ++v21;
      uint64_t v6 = v5[41];
      if (v6)
      {
        uint64_t v7 = (uint64_t *)v5[43];
        uint64_t v8 = 8 * v6;
        do
        {
          uint64_t v9 = *v7++;
          *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v16) = v9;
          v8 -= 8;
        }
        while (v8);
      }
      uint64_t v10 = *(void *)(a1 + 208) + 928;
      uint64_t v23 = v5[37];
      unint64_t v24 = v5;
      if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v10, &v23))
      {
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*(void *)(a1 + 208) + 1072, (uint64_t *)&v24);
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v16);
    if (v16[0] && (v17 & 1) == 0) {
      (*(void (**)(void))(*(void *)v16[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v22);
  }
}

uint64_t re::ecs2::MeshShadowSystem::processReceiverRemoval(re::ecs2::MeshShadowSystem *this, re::ecs2::Entity *a2)
{
  uint64_t v11 = (re::internal::shadows *)*((void *)a2 + 37);
  uint64_t v12 = a2;
  uint64_t v3 = (void *)((char *)this + 928);
  if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)this + 928, (uint64_t *)&v11))
  {
    LODWORD(v4) = 0x7FFFFFFF;
    if (*v3)
    {
      unint64_t v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * ((unint64_t)v11 ^ ((unint64_t)v11 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                               * ((unint64_t)v11 ^ ((unint64_t)v11 >> 30))) >> 27));
      uint64_t v6 = *(unsigned int *)(*((void *)this + 117) + 4 * ((v5 ^ (v5 >> 31)) % *((unsigned int *)this + 238)));
      if (v6 != 0x7FFFFFFF)
      {
        uint64_t v7 = *((void *)this + 118);
        LODWORD(v4) = v6;
        if (*(re::internal::shadows **)(v7 + 32 * v6 + 16) != v11)
        {
          uint64_t v4 = v6;
          while (1)
          {
            uint64_t v4 = *(_DWORD *)(v7 + 32 * v4 + 8) & 0x7FFFFFFF;
            if (v4 == 0x7FFFFFFF) {
              break;
            }
            if (*(re::internal::shadows **)(v7 + 32 * v4 + 16) == v11) {
              goto LABEL_10;
            }
          }
          LODWORD(v4) = 0x7FFFFFFF;
        }
      }
    }
LABEL_10:
    uint64_t v10 = *(void *)(*((void *)this + 118) + 32 * v4 + 24);
    re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, (unint64_t)v11);
    re::internal::shadows::removeParamsFromMaterialParameterBlock((uint64_t)v11, *(re::MaterialManager **)(*((void *)this + 14) + 24), 0);
    uint64_t v8 = (void *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 880, &v10);
    if (v8) {
      --*v8;
    }
  }
  return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 1072, (uint64_t *)&v12);
}

uint64_t re::ecs2::MeshShadowSystem::processCasterRemoval(re::ecs2::MeshShadowSystem *this, re::ecs2::Entity *a2)
{
  unint64_t v27 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 1408, (uint64_t *)&v27);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 1360, (uint64_t *)&v27);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 1312, (uint64_t *)&v27);
  unint64_t v26 = *((void *)v27 + 37);
  uint64_t result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)this + 832, (uint64_t *)&v26);
  if (!result) {
    return result;
  }
  LODWORD(v4) = 0x7FFFFFFF;
  if (*((void *)this + 104))
  {
    unint64_t v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27));
    uint64_t v6 = *(unsigned int *)(*((void *)this + 105) + 4 * ((v5 ^ (v5 >> 31)) % *((unsigned int *)this + 214)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *((void *)this + 106);
      LODWORD(v4) = v6;
      if (*(void *)(v7 + 32 * v6 + 16) != v26)
      {
        uint64_t v4 = v6;
        while (1)
        {
          uint64_t v4 = *(_DWORD *)(v7 + 32 * v4 + 8) & 0x7FFFFFFF;
          if (v4 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v7 + 32 * v4 + 16) == v26) {
            goto LABEL_10;
          }
        }
        LODWORD(v4) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  unint64_t v8 = *(void *)(*((void *)this + 106) + 32 * v4 + 24);
  unint64_t v25 = v8;
  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 832, v26);
  uint64_t v9 = *((void *)this + 92);
  if (v9)
  {
    unint64_t v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
    unint64_t v11 = (v10 ^ (v10 >> 31)) % *((unsigned int *)this + 190);
    uint64_t v12 = *((void *)this + 93);
    uint64_t v13 = *(unsigned int *)(v12 + 4 * v11);
    uint64_t v14 = (uint64_t *)((char *)this + 752);
    uint64_t v15 = *((void *)this + 94);
    if (v13 == 0x7FFFFFFF)
    {
      if (*(re::ecs2::Entity **)(v15 + 0x2FFFFFFFB8) != v27) {
        goto LABEL_27;
      }
    }
    else
    {
      if (*(void *)(v15 + 96 * v13 + 16) == v8)
      {
        if (*(re::ecs2::Entity **)(v15 + 96 * v13 + 24) != v27) {
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      do
        unsigned int v16 = *(_DWORD *)(v15 + 96 * *(unsigned int *)(v12 + 4 * v11) + 8) & 0x7FFFFFFF;
      while (v16 != 0x7FFFFFFF && *(void *)(v15 + 96 * v16 + 16) != v8);
      if (*(re::ecs2::Entity **)(v15 + 96 * v16 + 24) != v27) {
        goto LABEL_25;
      }
      while (1)
      {
        LODWORD(v13) = *(_DWORD *)(v15 + 96 * v13 + 8) & 0x7FFFFFFF;
        if (v13 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v15 + 96 * v13 + 16) == v8) {
          goto LABEL_24;
        }
      }
    }
    LODWORD(v13) = 0x7FFFFFFF;
  }
  else
  {
    uint64_t v14 = (uint64_t *)((char *)this + 752);
    uint64_t v15 = *((void *)this + 94);
    LODWORD(v13) = 0x7FFFFFFF;
    if (*(re::ecs2::Entity **)(v15 + 0x2FFFFFFFB8) != v27) {
      goto LABEL_33;
    }
  }
LABEL_24:
  *(void *)(v15 + 96 * v13 + 24) = 0;
LABEL_25:
  if (!v9)
  {
    LODWORD(v13) = 0x7FFFFFFF;
    goto LABEL_33;
  }
  uint64_t v12 = *((void *)this + 93);
  unint64_t v17 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
  unint64_t v11 = (v17 ^ (v17 >> 31)) % *((unsigned int *)this + 190);
LABEL_27:
  uint64_t v18 = *(unsigned int *)(v12 + 4 * v11);
  LODWORD(v13) = 0x7FFFFFFF;
  if (v18 != 0x7FFFFFFF)
  {
    uint64_t v19 = *v14;
    if (*(void *)(*v14 + 96 * v18 + 16) == v8)
    {
LABEL_31:
      LODWORD(v13) = v18;
    }
    else
    {
      while (1)
      {
        LODWORD(v18) = *(_DWORD *)(v19 + 96 * v18 + 8) & 0x7FFFFFFF;
        LODWORD(v13) = 0x7FFFFFFF;
        if (v18 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v19 + 96 * v18 + 16) == v8) {
          goto LABEL_31;
        }
      }
    }
  }
LABEL_33:
  re::DynamicArray<unsigned long long>::remove(*((void *)this + 94) + 96 * v13 + 32, &v27);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 1120, (uint64_t *)&v25);
  uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 1168, (uint64_t *)&v25);
  unint64_t v20 = v25;
  if (!*((void *)this + 92))
  {
    uint64_t v23 = *v14;
LABEL_39:
    if (*(void *)(v23 + 0x2FFFFFFFD0)) {
      return result;
    }
    goto LABEL_40;
  }
  unint64_t v21 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) >> 27));
  uint64_t v22 = *(unsigned int *)(*((void *)this + 93) + 4 * ((v21 ^ (v21 >> 31)) % *((unsigned int *)this + 190)));
  uint64_t v23 = *((void *)this + 94);
  if (v22 == 0x7FFFFFFF) {
    goto LABEL_39;
  }
  if (*(void *)(v23 + 96 * v22 + 16) == v25)
  {
    if (*(void *)(v23 + 96 * v22 + 48)) {
      return result;
    }
    goto LABEL_41;
  }
  uint64_t v24 = v22;
  while (1)
  {
    LODWORD(v24) = *(_DWORD *)(v23 + 96 * v24 + 8) & 0x7FFFFFFF;
    if (v24 == 0x7FFFFFFF) {
      break;
    }
    if (*(void *)(v23 + 96 * v24 + 16) == v25) {
      goto LABEL_49;
    }
  }
  LODWORD(v24) = 0x7FFFFFFF;
LABEL_49:
  if (!*(void *)(v23 + 96 * v24 + 48))
  {
    while (1)
    {
      LODWORD(v22) = *(_DWORD *)(v23 + 96 * v22 + 8) & 0x7FFFFFFF;
      if (v22 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v23 + 96 * v22 + 16) == v25) {
        goto LABEL_41;
      }
    }
LABEL_40:
    LODWORD(v22) = 0x7FFFFFFF;
LABEL_41:
    if (!*(void *)(v23 + 96 * v22 + 80))
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 1264, (uint64_t *)&v25);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 1120, (uint64_t *)&v25);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 1168, (uint64_t *)&v25);
      unint64_t v20 = v25;
    }
    return re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 736, v20);
  }
  return result;
}

void re::ecs2::MeshShadowSystemStateImpl::willDeactivateEntity(re::ecs2::MeshShadowSystemStateImpl *this, re::ecs2::Entity *a2)
{
  unint64_t v10 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*((void *)this + 26) + 1456, (uint64_t *)&v10);
  re::ecs2::MeshShadowSystem::processCasterRemoval(*((re::ecs2::MeshShadowSystem **)this + 26), v10);
  re::ecs2::MeshShadowSystem::processReceiverRemoval(*((re::ecs2::MeshShadowSystem **)this + 26), v10);
  if (re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    uint64_t v3 = v10;
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    int v12 = 1;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    int v16 = 0;
    re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v11) = v3;
    while (v15)
    {
      uint64_t v4 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v15 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
      ++v16;
      uint64_t v5 = v4[41];
      if (v5)
      {
        uint64_t v6 = (uint64_t *)v4[43];
        uint64_t v7 = 8 * v5;
        do
        {
          uint64_t v8 = *v6++;
          *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v11) = v8;
          v7 -= 8;
        }
        while (v7);
      }
      uint64_t v9 = *((void *)this + 26) + 928;
      uint64_t v18 = v4[37];
      uint64_t v19 = v4;
      if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v9, &v18))
      {
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*((void *)this + 26) + 1072, (uint64_t *)&v19);
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0] && (v12 & 1) == 0) {
      (*(void (**)(void))(*(void *)v11[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

void re::ecs2::MeshShadowSystemStateImpl::didDependentComponentChange(void *a1, uint64_t a2, uint64_t a3, re::ecs2::ComponentTypeBase *a4)
{
  unint64_t v44 = (re::internal::shadows *)a3;
  if (*(unsigned char *)(a3 + 288))
  {
    if (!a4)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) didDependentComponentChange() gets NULL componentType", "componentType", "didDependentComponentChange", 442);
      _os_crash();
      __break(1u);
      return;
    }
    uint64_t v5 = *(unsigned __int16 *)(a3 + 82);
    if (*(_WORD *)(a3 + 82))
    {
      uint64_t v7 = (const __int16 *)((char *)a4 + 16);
      uint64_t v8 = *(int16x8_t **)(a3 + 88);
      int16x8_t v9 = vld1q_dup_s16(v7);
      for (int i = 1; ; i -= 8)
      {
        uint16x8_t v11 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v9, *v8), (int8x16_t)xmmword_23436BBD0);
        v11.i16[0] = vmaxvq_u16(v11);
        if (v11.i32[0]) {
          break;
        }
        ++v8;
        if (!--v5) {
          return;
        }
      }
      if (v11.u16[0] - i < *(unsigned __int16 *)(a3 + 80))
      {
        if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)a4)
        {
          uint64_t v12 = a1[10];
          uint64_t v13 = a1[8];
          if (v13)
          {
            uint64_t v14 = 8 * v13;
            uint64_t v15 = (re::ecs2::ComponentTypeBase **)a1[10];
            while (*v15 != a4)
            {
              ++v15;
              v14 -= 8;
              if (!v14)
              {
                uint64_t v15 = (re::ecs2::ComponentTypeBase **)(v12 + 8 * v13);
                break;
              }
            }
          }
          else
          {
            uint64_t v15 = (re::ecs2::ComponentTypeBase **)a1[10];
          }
          uint64_t v19 = a1[15];
          uint64_t v20 = a1[13];
          if (v20)
          {
            uint64_t v21 = 8 * v20;
            uint64_t v22 = (re::ecs2::ComponentTypeBase **)a1[15];
            while (*v22 != a4)
            {
              ++v22;
              v21 -= 8;
              if (!v21)
              {
                uint64_t v22 = (re::ecs2::ComponentTypeBase **)(v19 + 8 * v20);
                break;
              }
            }
          }
          else
          {
            uint64_t v22 = (re::ecs2::ComponentTypeBase **)a1[15];
          }
          uint64_t v23 = a1[20];
          uint64_t v24 = a1[18];
          if (v24)
          {
            uint64_t v25 = 8 * v24;
            unint64_t v26 = (re::ecs2::ComponentTypeBase **)a1[20];
            while (*v26 != a4)
            {
              ++v26;
              v25 -= 8;
              if (!v25)
              {
                unint64_t v26 = (re::ecs2::ComponentTypeBase **)(v23 + 8 * v24);
                break;
              }
            }
          }
          else
          {
            unint64_t v26 = (re::ecs2::ComponentTypeBase **)a1[20];
          }
          uint64_t v27 = a1[25];
          uint64_t v28 = a1[23];
          if (v28)
          {
            uint64_t v29 = 8 * v28;
            uint64_t v30 = (re::ecs2::ComponentTypeBase **)a1[25];
            while (*v30 != a4)
            {
              ++v30;
              v29 -= 8;
              if (!v29)
              {
                uint64_t v30 = (re::ecs2::ComponentTypeBase **)(v27 + 8 * v28);
                break;
              }
            }
          }
          else
          {
            uint64_t v30 = (re::ecs2::ComponentTypeBase **)a1[25];
          }
          uint64_t v31 = (uint64_t)v26 - v23;
          unsigned __int8 v32 = v13 != ((uint64_t)v15 - v12) >> 3;
          if (v20 != ((uint64_t)v22 - v19) >> 3) {
            v32 |= 2u;
          }
          if (v24 != v31 >> 3) {
            v32 |= 4u;
          }
          if (v28 != ((uint64_t)v30 - v27) >> 3) {
            v32 |= 8u;
          }
          unsigned int v33 = v32;
          if (v32)
          {
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1312, (uint64_t *)&v44);
            if ((v33 & 2) == 0)
            {
LABEL_46:
              if ((v33 & 4) == 0) {
                goto LABEL_48;
              }
              goto LABEL_47;
            }
          }
          else if ((v32 & 2) == 0)
          {
            goto LABEL_46;
          }
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1360, (uint64_t *)&v44);
          if ((v33 & 4) == 0)
          {
LABEL_48:
            if (v33 >= 8)
            {
              if (re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
              {
                uint64_t v37 = (uint64_t)v44;
                re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v51);
                v45[0] = 0;
                v45[1] = 0;
                int v46 = 1;
                uint64_t v48 = 0;
                uint64_t v49 = 0;
                uint64_t v47 = 0;
                int v50 = 0;
                re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v45, (uint64_t)v51, 1uLL);
                *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v45) = v37;
                while (v49)
                {
                  long long v38 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v45, v49 - 1);
                  re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v45, --v49);
                  ++v50;
                  uint64_t v39 = v38[41];
                  if (v39)
                  {
                    int v40 = (uint64_t *)v38[43];
                    uint64_t v41 = 8 * v39;
                    do
                    {
                      uint64_t v42 = *v40++;
                      *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v45) = v42;
                      v41 -= 8;
                    }
                    while (v41);
                  }
                  uint64_t v43 = a1[26] + 928;
                  uint64_t v52 = v38[37];
                  uint64_t v53 = v38;
                  if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v43, &v52))
                  {
                    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1072, (uint64_t *)&v53);
                  }
                }
                re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v45);
                if (v45[0] && (v46 & 1) == 0) {
                  (*(void (**)(void))(*(void *)v45[0] + 40))();
                }
                re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v51);
              }
              else if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4 {
                     || re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
              }
                     && (long long v34 = v44, *((void *)v44 + 22))
                     && ((*(void (**)(void *__return_ptr))(**(void **)(a1[26] + 128) + 56))(v51),
                         int isEntityAMeshReceiver = re::internal::shadows::isEntityAMeshReceiver(v34, (re::ecs2::Entity *)v51, v35), re::AssetHandle::~AssetHandle((re::AssetHandle *)v51), isEntityAMeshReceiver))
              {
                re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1072, (uint64_t *)&v44);
              }
            }
            return;
          }
LABEL_47:
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1408, (uint64_t *)&v44);
          goto LABEL_48;
        }
        uint64_t v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), a4);
        if (v16)
        {
          char v17 = *(unsigned char *)(v16 + 30);
          uint64_t v18 = a1[26];
          if (!*(unsigned char *)(v18 + 1744)) {
            *(unsigned char *)(v18 + 1744) = 1;
          }
          *(unsigned char *)(v18 + 1745) = v17;
        }
      }
    }
  }
}

BOOL re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 32 * v4 + 16) == v2) {
    return 1;
  }
  do
  {
    uint64_t v4 = *(_DWORD *)(v6 + 32 * v4 + 8) & 0x7FFFFFFF;
    BOOL result = v4 != 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF && *(void *)(v6 + 32 * v4 + 16) != v2);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(uint64_t result, unint64_t a2)
{
  if (*(void *)result)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(result + 24);
    uint64_t v5 = *(void *)(result + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(result + 16);
      if (*(void *)(v7 + 96 * v6 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 96 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v10 = *(void *)(result + 16);
        uint64_t v11 = v10 + 96 * v6;
        int v14 = *(_DWORD *)(v11 + 8);
        uint64_t v13 = (int *)(v11 + 8);
        int v12 = v14;
        if (v14 < 0)
        {
          *uint64_t v13 = v12 & 0x7FFFFFFF;
          BOOL result = re::DynamicArray<unsigned long>::deinit(v10 + 96 * v6 + 32);
          uint64_t v10 = *(void *)(v2 + 16);
          int v12 = *(_DWORD *)(v10 + 96 * v6 + 8);
        }
        int v15 = *(_DWORD *)(v2 + 40);
        *(_DWORD *)(v10 + 96 * v6 + 8) = *(_DWORD *)(v2 + 36) | v12 & 0x80000000;
        --*(_DWORD *)(v2 + 28);
        *(_DWORD *)(v2 + 36) = v6;
        *(_DWORD *)(v2 + 40) = v15 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v8 = v6;
          int v9 = *(_DWORD *)(v7 + 96 * v6 + 8);
          uint64_t v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v7 + 96 * v6 + 16) == a2)
          {
            *(_DWORD *)(v7 + 96 * v8 + 8) = *(_DWORD *)(v7 + 96 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 96 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 32 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 32 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  BOOL result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::unionSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a3);
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v9 = *v8;
      v8 += 6;
      if (v9 < 0) {
        break;
      }
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v6 != v7)
  {
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    do
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a3, (uint64_t *)(v11 + 24 * v10 + 16));
      unsigned int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 16);
      if (v12 <= (int)v7 + 1) {
        int v13 = v7 + 1;
      }
      else {
        int v13 = *(_DWORD *)(a1 + 32);
      }
      int v14 = v7;
      while (1)
      {
        uint64_t v10 = (v14 + 1);
        if (v13 - 1 == v14) {
          break;
        }
        ++v14;
        LODWORD(v7) = v10;
        if ((*(_DWORD *)(v11 + 24 * v10 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v7) = v13;
LABEL_17:
      ;
    }
    while (v12 != v7);
  }
  uint64_t v15 = *(unsigned int *)(a2 + 32);
  if (v15)
  {
    uint64_t v16 = 0;
    char v17 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v18 = *v17;
      v17 += 6;
      if (v18 < 0) {
        break;
      }
      if (v15 == ++v16)
      {
        LODWORD(v16) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if (v15 != v16)
  {
    uint64_t v19 = v16;
    uint64_t v20 = *(void *)(a2 + 16);
    do
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a3, (uint64_t *)(v20 + 24 * v19 + 16));
      unsigned int v21 = *(_DWORD *)(a2 + 32);
      uint64_t v20 = *(void *)(a2 + 16);
      if (v21 <= (int)v16 + 1) {
        int v22 = v16 + 1;
      }
      else {
        int v22 = *(_DWORD *)(a2 + 32);
      }
      int v23 = v16;
      while (1)
      {
        uint64_t v19 = (v23 + 1);
        if (v22 - 1 == v23) {
          break;
        }
        ++v23;
        LODWORD(v16) = v19;
        if ((*(_DWORD *)(v20 + 24 * v19 + 8) & 0x80000000) != 0) {
          goto LABEL_34;
        }
      }
      LODWORD(v16) = v22;
LABEL_34:
      ;
    }
    while (v21 != v16);
  }
}

uint64_t *re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::add(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32) + 56 * v5;
  *(void *)uint64_t v11 = *a2;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_DWORD *)(v11 + 40) = 0;
  *(void *)(v11 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(v11 + 8) = 0u;
  BOOL result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v11 + 8), a2 + 1);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::ecs2::MeshShadowSystem::willAddSystemToECSService(re::ecs2::MeshShadowSystem *this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = *((void *)this + 15);
  if (v2 && *((void *)this + 14))
  {
    uint64_t v3 = *((void *)this + 16);
    if (v3)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 112))(v3, v4);
      uint64_t v2 = *((void *)this + 15);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v2 + 8))(&v8);
    long long v6 = *((_OWORD *)this + 13);
    unint64_t v5 = (re::ecs2::MeshShadowSystem *)((char *)this + 208);
    *(_OWORD *)unint64_t v5 = v8;
    long long v8 = v6;
    uint64_t v7 = *((void *)v5 + 2);
    *((void *)v5 + 2) = v9;
    uint64_t v9 = v7;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
    re::AssetHandle::loadAsync(v5);
  }
}

double re::ecs2::MeshShadowSystem::willRemoveSystemFromECSService(re::ecs2::MeshShadowSystem *this)
{
  *((void *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::MeshShadowSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v719 = *MEMORY[0x263EF8340];
  v655[0] = a3;
  v655[1] = a4;
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6 && (*(unsigned char *)(v6 + 424) & 0x10) == 0) {
    return;
  }
  if (*(unsigned char *)(a1 + 2689)) {
    goto LABEL_4;
  }
  unsigned int v21 = *(re **)(a1 + 128);
  if (v21)
  {
    *(unsigned char *)(a1 + 2689) = 1;
    if (!*(void *)(a1 + 160))
    {
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v21 + 48))(v689);
      if (re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v689))
      {
        *(void *)&long long v670 = *(void *)(a1 + 112);
        re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)&v670, (re::MaterialParameterBlock **)buf);
        uint64_t v22 = *(void *)(a1 + 160);
        *(void *)(a1 + 160) = *(void *)buf;
        *(void *)buf = v22;
        if (v22) {
      }
        }
      else
      {
        *(unsigned char *)(a1 + 2689) = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v689);
    }
    if (!*(void *)(a1 + 176))
    {
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 128) + 64))(v689);
      if (re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v689))
      {
        *(void *)&long long v670 = *(void *)(a1 + 112);
        re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)&v670, (re::MaterialParameterBlock **)buf);
        uint64_t v600 = *(void *)(a1 + 176);
        *(void *)(a1 + 176) = *(void *)buf;
        *(void *)buf = v600;
        if (v600) {
      }
        }
      else
      {
        *(unsigned char *)(a1 + 2689) = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v689);
    }
    if (!*(void *)(a1 + 168))
    {
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 128) + 56))(v689);
      if (re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v689))
      {
        *(void *)&long long v670 = *(void *)(a1 + 112);
        re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)&v670, (re::MaterialParameterBlock **)buf);
        uint64_t v601 = *(void *)(a1 + 168);
        *(void *)(a1 + 168) = *(void *)buf;
        *(void *)buf = v601;
        if (v601) {
      }
        }
      else
      {
        *(unsigned char *)(a1 + 2689) = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v689);
    }
    if (*(unsigned char *)(a1 + 2689))
    {
LABEL_4:
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v654);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v653, 3146, a1);
      uint64_t v647 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      unint64_t v7 = atomic_load((unint64_t *)(*(void *)(*(void *)(a1 + 112) + 168) + 888));
      if (v7 >= *(void *)(a1 + 2672))
      {
        *(void *)(a1 + 2672) = v7 + 1;
        if (*(unsigned char *)(a1 + 2416))
        {
          re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(a1 + 2128));
          re::DynamicArray<unsigned long>::deinit(a1 + 2088);
          re::DynamicArray<unsigned long>::deinit(a1 + 2048);
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit(a1 + 2008);
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit(a1 + 1968);
          re::DynamicArray<unsigned long>::deinit(a1 + 1928);
          re::DynamicArray<re::MeshShadowCluster>::deinit(a1 + 1888);
          re::DynamicArray<unsigned long>::deinit(a1 + 1848);
          re::DynamicArray<unsigned long>::deinit(a1 + 1808);
          re::DynamicArray<unsigned long>::deinit(a1 + 1768);
          *(unsigned char *)(a1 + 2416) = 0;
        }
        if (*(unsigned char *)(a1 + 2680)) {
          *(unsigned char *)(a1 + 2680) = 0;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 2680) = 1;
      }
      long long v8 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)v689, (uint64_t *)(a1 + 616));
      *(void *)&v691[8] = *(void *)(a1 + 656);
      LODWORD(v671) = 1;
      *(void *)&long long v672 = 0;
      *((void *)&v671 + 1) = 0;
      *((void *)&v670 + 1) = 0;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(&v670, 0);
      LODWORD(v671) = v671 + 2;
      unint64_t v9 = *(void *)(a1 + 656);
      if ((v9 & 0x3F) != 0) {
        unint64_t v10 = (v9 >> 6) + 1;
      }
      else {
        unint64_t v10 = v9 >> 6;
      }
      *((void *)&v672 + 1) = *(void *)(a1 + 656);
      *(void *)buf = 0;
      re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)&v670, v10, buf);
      int v11 = *(_DWORD *)(a1 + 632);
      uint64_t v641 = a2;
      if (v11) {
        unsigned int v12 = (void *)(a1 + 640);
      }
      else {
        unsigned int v12 = *(void **)(a1 + 648);
      }
      uint64_t v13 = *(void *)(a1 + 624);
      int v14 = (uint64_t *)(a1 + 640);
      while (1)
      {
        uint64_t v15 = a1 + 640;
        if ((v11 & 1) == 0) {
          uint64_t v15 = *(void *)(a1 + 648);
        }
        if (v12 == (void *)(v15 + 8 * v13)) {
          break;
        }
        *v12++ = 0;
        int v11 = *(_DWORD *)(a1 + 632);
      }
      uint64_t v16 = (unint64_t *)&v690 + 1;
      if ((v690 & 1) == 0) {
        uint64_t v16 = *(unint64_t **)v691;
      }
      uint64_t v17 = *(void *)&v689[8];
      if ((*(void *)&v689[8] & 0x3FFFFFFFFFFFFFFLL) != 0)
      {
        uint64_t v18 = 0;
        while (1)
        {
          unint64_t v20 = *v16++;
          unint64_t v19 = v20;
          if (v20) {
            break;
          }
          v18 -= 64;
          if (!--v17) {
            goto LABEL_46;
          }
        }
        unint64_t v23 = __clz(__rbit64(v19));
        if (v23 + 1 != v18)
        {
          unint64_t FirstBitSet = v23 - v18;
          do
          {
            uint64_t v25 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 448, FirstBitSet);
            uint64_t v26 = *(void *)(*v25 + 224);
            unint64_t v27 = v25[3];
            unint64_t v28 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v25[2] + 8, v27);
            if (*(_DWORD *)(v28 + 40)) {
              int v29 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v26 + 24))(v26, v655, v25, v27, v28, 0);
            }
            else {
              int v29 = 0;
            }
            unint64_t v30 = v25[5];
            unint64_t v31 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v25[2] + 8, v30);
            if (*(_DWORD *)(v31 + 40)) {
              v29 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v26 + 32))(v26, v655, v25, v30, v31, 0);
            }
            unint64_t v32 = v25[6];
            unint64_t v33 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v25[2] + 8, v32);
            if (*(_DWORD *)(v33 + 40))
            {
              if (((v29 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v26 + 40))(v26, v655, v25, v32, v33, 0)) & 1) == 0)goto LABEL_44; {
            }
              }
            else if (!v29)
            {
LABEL_44:
              re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)&v670, FirstBitSet);
              goto LABEL_45;
            }
            re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)&v670, FirstBitSet);
LABEL_45:
            unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v689, FirstBitSet + 1);
          }
          while (FirstBitSet != -1);
        }
      }
LABEL_46:
      re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 616, (uint64_t)&v670);
      if (*(unsigned char *)(a1 + 680))
      {
        unint64_t v34 = *(void *)(a1 + 624);
        int v35 = *(_DWORD *)(a1 + 632);
        if (v34 >= 0xB)
        {
          if ((v35 & 1) == 0) {
            int v14 = *(uint64_t **)(a1 + 648);
          }
          uint64_t v36 = 8 * v34;
          while (!*v14)
          {
            ++v14;
            v36 -= 8;
            if (!v36) {
              goto LABEL_62;
            }
          }
          goto LABEL_60;
        }
        if ((v35 & 1) == 0) {
          int v14 = *(uint64_t **)(a1 + 648);
        }
        if (v34)
        {
          uint64_t v37 = 0;
          uint64_t v38 = 8 * v34;
          do
          {
            uint64_t v39 = *v14++;
            v37 |= v39;
            v38 -= 8;
          }
          while (v38);
          if (v37)
          {
LABEL_60:
            int v40 = *(re::ecs2::System **)(a1 + 664);
            if (!*((unsigned char *)v40 + 86)) {
              re::ecs2::System::queueToRun(v40, 0.0);
            }
          }
        }
      }
LABEL_62:
      if ((void)v670 && (v671 & 1) == 0) {
        (*(void (**)(void))(*(void *)v670 + 40))();
      }
      if (*(void *)v689 && (v690 & 1) == 0) {
        (*(void (**)(void))(**(void **)v689 + 40))();
      }
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 128) + 16))(v689);
      long long v41 = v695;
      *(_OWORD *)(a1 + 2608) = v696;
      long long v42 = *(_OWORD *)&v697[16];
      *(_OWORD *)(a1 + 2624) = *(_OWORD *)v697;
      *(_OWORD *)(a1 + 2640) = v42;
      v626 = (_OWORD *)(a1 + 2432);
      *(_OWORD *)(a1 + 2652) = *(_OWORD *)&v697[28];
      long long v43 = v693;
      *(_OWORD *)(a1 + 2544) = *(_OWORD *)v694;
      long long v44 = *(_OWORD *)&v694[32];
      *(_OWORD *)(a1 + 2560) = *(_OWORD *)&v694[16];
      *(_OWORD *)(a1 + 2576) = v44;
      *(_OWORD *)(a1 + 2592) = v41;
      long long v45 = *(_OWORD *)v691;
      *(_OWORD *)(a1 + 2480) = *(_OWORD *)&v691[16];
      long long v46 = v692;
      *(_OWORD *)(a1 + 2496) = *(_OWORD *)&v691[32];
      *(_OWORD *)(a1 + 2512) = v46;
      *(_OWORD *)(a1 + 2528) = v43;
      long long v47 = v690;
      *(_OWORD *)(a1 + 2432) = *(_OWORD *)v689;
      *(_OWORD *)(a1 + 2448) = v47;
      *(_OWORD *)(a1 + 2464) = v45;
      *(void *)v644 = *(unsigned int *)(a1 + 1440);
      uint64_t v48 = 0;
      if (v644[0])
      {
        uint64_t v49 = (int *)(*(void *)(a1 + 1424) + 8);
        while (1)
        {
          int v50 = *v49;
          v49 += 6;
          if (v50 < 0) {
            break;
          }
          if (*(void *)v644 == ++v48)
          {
            LODWORD(v48) = *(_DWORD *)(a1 + 1440);
            break;
          }
        }
      }
      if (v644[0] != v48)
      {
        uint64_t v51 = v48;
        do
        {
          uint64_t v52 = *(void *)(*(void *)(a1 + 1424) + 24 * v51 + 16);
          re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v689);
          long long v670 = 0uLL;
          LODWORD(v671) = 1;
          long long v672 = 0uLL;
          *((void *)&v671 + 1) = 0;
          v673.i32[0] = 0;
          re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)&v670, (uint64_t)v689, 1uLL);
          *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)&v670) = v52;
LABEL_76:
          while (*((void *)&v672 + 1))
          {
            unint64_t v53 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v670, *((void *)&v672 + 1) - 1);
            re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v670, *((void *)&v672 + 1) - 1);
            --*((void *)&v672 + 1);
            ++v673.i32[0];
            uint64_t v54 = *(void *)(v53 + 328);
            if (v54)
            {
              unint64_t v55 = *(uint64_t **)(v53 + 344);
              uint64_t v56 = 8 * v54;
              do
              {
                uint64_t v57 = *v55++;
                *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)&v670) = v57;
                v56 -= 8;
              }
              while (v56);
            }
            *(void *)buf = v53;
            uint64_t v58 = *(unsigned __int16 *)(v53 + 82);
            if (*(_WORD *)(v53 + 82))
            {
              unint64_t v59 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                    + 16);
              uint64_t v60 = *(int16x8_t **)(v53 + 88);
              int16x8_t v61 = vld1q_dup_s16(v59);
              int v62 = 1;
              while (1)
              {
                uint16x8_t v63 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v61, *v60), (int8x16_t)xmmword_23436BBD0);
                v63.i16[0] = vmaxvq_u16(v63);
                if (v63.i32[0]) {
                  break;
                }
                v62 -= 8;
                ++v60;
                if (!--v58) {
                  goto LABEL_76;
                }
              }
              if (v63.u16[0] - v62 < *(unsigned __int16 *)(v53 + 80))
              {
                v656[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144));
                if (*(unsigned char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)v656, v53))
                {
                  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 1312, (uint64_t *)buf);
                }
                else
                {
                  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 1456, (uint64_t *)buf);
                  re::ecs2::MeshShadowSystem::processCasterRemoval((re::ecs2::MeshShadowSystem *)a1, *(re::ecs2::Entity **)buf);
                }
              }
            }
          }
          re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)&v670);
          if ((void)v670 && (v671 & 1) == 0) {
            (*(void (**)(void))(*(void *)v670 + 40))();
          }
          re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v689);
          if (*(_DWORD *)(a1 + 1440) <= (v48 + 1)) {
            int v64 = v48 + 1;
          }
          else {
            int v64 = *(_DWORD *)(a1 + 1440);
          }
          while (1)
          {
            uint64_t v51 = (v48 + 1);
            if (v64 - 1 == v48) {
              break;
            }
            LODWORD(v48) = v48 + 1;
            int v65 = v51;
            if ((*(_DWORD *)(*(void *)(a1 + 1424) + 24 * v51 + 8) & 0x80000000) != 0) {
              goto LABEL_99;
            }
          }
          int v65 = v64;
LABEL_99:
          LODWORD(v48) = v65;
        }
        while (v644[0] != v65);
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1408);
      LODWORD(v672) = 0;
      long long v671 = 0u;
      long long v670 = 0u;
      *(void *)((char *)&v672 + 4) = 0x7FFFFFFFLL;
      uint64_t v67 = *(unsigned int *)(a1 + 1344);
      if (v67)
      {
        uint64_t v68 = 0;
        uint64_t v69 = (int *)(*(void *)(a1 + 1328) + 8);
        while (1)
        {
          int v70 = *v69;
          v69 += 6;
          if (v70 < 0) {
            break;
          }
          if (v67 == ++v68)
          {
            LODWORD(v68) = *(_DWORD *)(a1 + 1344);
            break;
          }
        }
      }
      else
      {
        LODWORD(v68) = 0;
      }
      if (v67 == v68)
      {
        int v71 = 0;
        LODWORD(v72) = 0;
        unsigned int v73 = *(_DWORD *)(a1 + 1344);
      }
      else
      {
        uint64_t v74 = v68;
        do
        {
          *(void *)buf = 0;
          *(void *)buf = *(void *)(*(void *)(a1 + 1328) + 24 * v74 + 16);
          unsigned int v66 = (re::MaterialAsset *)(*(void *(**)(uint8_t *__return_ptr))(*(void *)v647 + 8))(v689);
          if (v689[0]) {
            _ZF = *(void *)&v689[8] == 0;
          }
          else {
            _ZF = 1;
          }
          if (!_ZF)
          {
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 1456, (uint64_t *)buf);
            unsigned int v66 = (re::MaterialAsset *)re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)&v670, (uint64_t *)buf);
          }
          uint64_t v76 = *(void *)(*(void *)buf + 224);
          if (v76 && !*(void *)(v76 + 64))
          {
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 1456, (uint64_t *)buf);
            unsigned int v66 = (re::MaterialAsset *)re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)&v670, (uint64_t *)buf);
          }
          unsigned int v73 = *(_DWORD *)(a1 + 1344);
          if (v73 <= (int)v68 + 1) {
            int v77 = v68 + 1;
          }
          else {
            int v77 = *(_DWORD *)(a1 + 1344);
          }
          while (1)
          {
            uint64_t v74 = (v68 + 1);
            if (v77 - 1 == v68) {
              break;
            }
            LODWORD(v68) = v68 + 1;
            int v78 = v74;
            if ((*(_DWORD *)(*(void *)(a1 + 1328) + 24 * v74 + 8) & 0x80000000) != 0) {
              goto LABEL_124;
            }
          }
          int v78 = v77;
LABEL_124:
          LODWORD(v68) = v78;
        }
        while (v67 != v78);
        int v71 = v672;
        if (v672)
        {
          uint64_t v72 = 0;
          int v79 = (int *)(v671 + 8);
          while (1)
          {
            int v80 = *v79;
            v79 += 6;
            if (v80 < 0) {
              break;
            }
            if (v672 == ++v72)
            {
              LODWORD(v72) = v672;
              break;
            }
          }
        }
        else
        {
          LODWORD(v72) = 0;
        }
      }
      if (v71 != v72)
      {
        uint64_t v81 = v72;
        uint64_t v82 = v671;
        do
        {
          unsigned int v66 = (re::MaterialAsset *)re::ecs2::MeshShadowSystem::processCasterRemoval((re::ecs2::MeshShadowSystem *)a1, *(re::ecs2::Entity **)(v82 + 24 * v81 + 16));
          uint64_t v82 = v671;
          if (v672 <= (int)v72 + 1) {
            int v83 = v72 + 1;
          }
          else {
            int v83 = v672;
          }
          int v84 = v72;
          while (1)
          {
            uint64_t v81 = (v84 + 1);
            if (v83 - 1 == v84) {
              break;
            }
            ++v84;
            LODWORD(v72) = v81;
            if ((*(_DWORD *)(v671 + 24 * v81 + 8) & 0x80000000) != 0) {
              goto LABEL_141;
            }
          }
          LODWORD(v72) = v83;
LABEL_141:
          ;
        }
        while (v71 != v72);
        unsigned int v73 = *(_DWORD *)(a1 + 1344);
      }
      uint64_t v85 = 0;
      if (v73)
      {
        __int16 v86 = (int *)(*(void *)(a1 + 1328) + 8);
        while (1)
        {
          int v87 = *v86;
          v86 += 6;
          if (v87 < 0) {
            break;
          }
          if (v73 == ++v85)
          {
            LODWORD(v85) = v73;
            break;
          }
        }
      }
      if (v73 != v85)
      {
        uint64_t v88 = v85;
        uint64_t v89 = (uint64_t *)(a1 + 832);
        unsigned __int8 v90 = (uint64_t *)(a1 + 736);
        uint64_t v649 = a1 + 1120;
        uint64_t v645 = a1 + 1168;
        unsigned int v91 = v73;
        while (1)
        {
          v656[0] = 0;
          v656[0] = *(void *)(*(void *)(a1 + 1328) + 24 * v88 + 16);
          *(void *)&v660[0] = *(void *)(v656[0] + 296);
          uint64_t v92 = *(void *)(v656[0] + 224);
          if (v92) {
            break;
          }
LABEL_238:
          if (v91 <= (int)v85 + 1) {
            unsigned int v131 = v85 + 1;
          }
          else {
            unsigned int v131 = v91;
          }
          while (1)
          {
            uint64_t v88 = (v85 + 1);
            if (v131 - 1 == v85) {
              break;
            }
            LODWORD(v85) = v85 + 1;
            unsigned int v132 = v88;
            if ((*(_DWORD *)(*(void *)(a1 + 1328) + 24 * v88 + 8) & 0x80000000) != 0) {
              goto LABEL_245;
            }
          }
          unsigned int v132 = v131;
LABEL_245:
          LODWORD(v85) = v132;
          if (v73 == v132) {
            goto LABEL_246;
          }
        }
        *(void *)v687 = *(void *)(v92 + 64);
        BOOL v93 = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1 + 832, (uint64_t *)v660);
        uint64_t v94 = *v90;
        if (*v90)
        {
          unint64_t v95 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (*(void *)v687 ^ (*(void *)v687 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                        * (*(void *)v687 ^ (*(void *)v687 >> 30))) >> 27));
          uint64_t v96 = *(unsigned int *)(*(void *)(a1 + 744) + 4 * ((v95 ^ (v95 >> 31)) % *(unsigned int *)(a1 + 760)));
          if (v96 != 0x7FFFFFFF)
          {
            uint64_t v98 = *(void *)(a1 + 752);
            if (*(void *)(v98 + 96 * v96 + 16) == *(void *)v687)
            {
              if (!v93)
              {
LABEL_168:
                re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1 + 832, (uint64_t *)v660, v687);
                goto LABEL_214;
              }
LABEL_158:
              char v97 = 1;
              goto LABEL_159;
            }
            while (1)
            {
              LODWORD(v96) = *(_DWORD *)(v98 + 96 * v96 + 8) & 0x7FFFFFFF;
              if (v96 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v98 + 96 * v96 + 16) == *(void *)v687)
              {
                if (v93) {
                  goto LABEL_158;
                }
                goto LABEL_168;
              }
            }
          }
        }
        if (!v93)
        {
          re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1 + 832, (uint64_t *)v660, v687);
          goto LABEL_219;
        }
        char v97 = 0;
LABEL_159:
        uint64_t v99 = *v89;
        if (*v89)
        {
          unint64_t v100 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (*(void *)&v660[0] ^ (*(void *)&v660[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                 * (*(void *)&v660[0] ^ (*(void *)&v660[0] >> 30))) >> 27));
          uint64_t v101 = *(unsigned int *)(*(void *)(a1 + 840) + 4 * ((v100 ^ (v100 >> 31)) % *(unsigned int *)(a1 + 856)));
          uint64_t v102 = *(void *)(a1 + 848);
          if (v101 != 0x7FFFFFFF)
          {
            if (*(void *)(v102 + 32 * v101 + 16) != *(void *)&v660[0])
            {
              do
                uint64_t v101 = *(_DWORD *)(v102 + 32 * v101 + 8) & 0x7FFFFFFF;
              while (v101 != 0x7FFFFFFF && *(void *)(v102 + 32 * v101 + 16) != *(void *)&v660[0]);
              uint64_t v101 = v101;
            }
LABEL_171:
            if (*(void *)(v102 + 32 * v101 + 24) == *(void *)v687)
            {
              char v103 = 0;
              goto LABEL_212;
            }
            *(void *)v689 = 0;
            if (v99)
            {
              unint64_t v104 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (*(void *)&v660[0] ^ (*(void *)&v660[0] >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(void *)&v660[0] ^ (*(void *)&v660[0] >> 30))) >> 27));
              uint64_t v105 = *(unsigned int *)(*(void *)(a1 + 840) + 4 * ((v104 ^ (v104 >> 31)) % *(unsigned int *)(a1 + 856)));
              if (v105 != 0x7FFFFFFF)
              {
                uint64_t v115 = v105;
                uint64_t v116 = v102 + 32 * v105;
                uint64_t v118 = *(void *)(v116 + 16);
                char v117 = (uint64_t *)(v116 + 16);
                uint64_t v119 = v105;
                uint64_t v120 = v105;
                if (v118 != *(void *)&v660[0])
                {
                  do
                    uint64_t v119 = *(_DWORD *)(v102 + 32 * v119 + 8) & 0x7FFFFFFF;
                  while (v119 != 0x7FFFFFFF && *(void *)(v102 + 32 * v119 + 16) != *(void *)&v660[0]);
                  uint64_t v120 = v119;
                }
                *(void *)v689 = *(void *)(v102 + 32 * v120 + 24);
                uint64_t v121 = *v117;
                while (v121 != *(void *)&v660[0])
                {
                  uint64_t v115 = *(_DWORD *)(v102 + 32 * v115 + 8) & 0x7FFFFFFF;
                  uint64_t v105 = 0x7FFFFFFFLL;
                  if (v115 == 0x7FFFFFFF) {
                    break;
                  }
                  uint64_t v121 = *(void *)(v102 + 32 * v115 + 16);
                  uint64_t v105 = v115;
                }
LABEL_178:
                *(void *)(v102 + 32 * v105 + 24) = *(void *)v687;
                if (v94)
                {
                  unint64_t v107 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (*(void *)v689 ^ (*(void *)v689 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                 * (*(void *)v689 ^ (*(void *)v689 >> 30))) >> 27));
                  uint64_t v108 = *(unsigned int *)(*(void *)(a1 + 744)
                                         + 4 * ((v107 ^ (v107 >> 31)) % *(unsigned int *)(a1 + 760)));
                  uint64_t v109 = *(void *)(a1 + 752);
                  if (v108 != 0x7FFFFFFF)
                  {
                    while (*(void *)(v109 + 96 * v108 + 16) != *(void *)v689)
                    {
                      uint64_t v108 = *(_DWORD *)(v109 + 96 * v108 + 8) & 0x7FFFFFFF;
                      if (v108 == 0x7FFFFFFF) {
                        goto LABEL_184;
                      }
                    }
LABEL_185:
                    re::DynamicArray<unsigned long long>::remove(v109 + 96 * v108 + 32, v656);
                    unint64_t v110 = *(void *)v689;
                    if (*v90)
                    {
                      unint64_t v111 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (*(void *)v689 ^ (*(void *)v689 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(void *)v689 ^ (*(void *)v689 >> 30))) >> 27));
                      uint64_t v112 = *(unsigned int *)(*(void *)(a1 + 744)
                                             + 4 * ((v111 ^ (v111 >> 31)) % *(unsigned int *)(a1 + 760)));
                      uint64_t v113 = *(void *)(a1 + 752);
                      if (v112 != 0x7FFFFFFF)
                      {
                        uint64_t v114 = v112;
                        if (*(void *)(v113 + 96 * v112 + 16) == *(void *)v689)
                        {
                          if (!*(void *)(v113 + 96 * v112 + 48)) {
                            goto LABEL_208;
                          }
LABEL_198:
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v649, (uint64_t *)v689);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v645, (uint64_t *)v689);
LABEL_211:
                          char v103 = 1;
LABEL_212:
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v649, (uint64_t *)v687);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v645, (uint64_t *)v687);
                          if (v97)
                          {
                            if ((v103 & 1) == 0)
                            {
LABEL_236:
                              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v649, (uint64_t *)v687);
                              unsigned int v66 = (re::MaterialAsset *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v645, (uint64_t *)v687);
LABEL_237:
                              unsigned int v91 = *(_DWORD *)(a1 + 1344);
                              goto LABEL_238;
                            }
LABEL_214:
                            if (*v90)
                            {
                              unint64_t v122 = 0x94D049BB133111EBLL
                                   * ((0xBF58476D1CE4E5B9 * (*(void *)v687 ^ (*(void *)v687 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(void *)v687 ^ (*(void *)v687 >> 30))) >> 27));
                              uint64_t v123 = *(unsigned int *)(*(void *)(a1 + 744)
                                                     + 4 * ((v122 ^ (v122 >> 31)) % *(unsigned int *)(a1 + 760)));
                              uint64_t v124 = *(void *)(a1 + 752);
                              if (v123 != 0x7FFFFFFF)
                              {
                                while (*(void *)(v124 + 96 * v123 + 16) != *(void *)v687)
                                {
                                  uint64_t v123 = *(_DWORD *)(v124 + 96 * v123 + 8) & 0x7FFFFFFF;
                                  if (v123 == 0x7FFFFFFF) {
                                    goto LABEL_234;
                                  }
                                }
                                goto LABEL_235;
                              }
                            }
                            else
                            {
                              uint64_t v124 = *(void *)(a1 + 752);
                            }
LABEL_234:
                            LODWORD(v123) = 0x7FFFFFFF;
LABEL_235:
                            re::DynamicArray<re::TransitionCondition *>::add((void *)(v124 + 96 * v123 + 32), v656);
                            goto LABEL_236;
                          }
LABEL_219:
                          v691[32] = 0;
                          *(_OWORD *)v689 = 0u;
                          long long v690 = 0u;
                          *(_DWORD *)v691 = 0;
                          *(void *)&v691[8] = 0;
                          *(void *)&v691[16] = *(void *)v687;
                          (*(void (**)(uint8_t *__return_ptr))(*(void *)v647 + 8))(buf);
                          if (buf[0]) {
                            uint64_t v125 = *(void *)&buf[8];
                          }
                          else {
                            uint64_t v125 = 0;
                          }
                          *(void *)&v691[24] = v125;
                          re::DynamicArray<re::TransitionCondition *>::add(&v689[8], v656);
                          unint64_t v126 = 0x94D049BB133111EBLL
                               * ((0xBF58476D1CE4E5B9 * (*(void *)v687 ^ (*(void *)v687 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(void *)v687 ^ (*(void *)v687 >> 30))) >> 27));
                          unint64_t v127 = v126 ^ (v126 >> 31);
                          if (*v90)
                          {
                            unint64_t v128 = v127 % *(unsigned int *)(a1 + 760);
                            uint64_t v129 = *(unsigned int *)(*(void *)(a1 + 744) + 4 * v128);
                            if (v129 != 0x7FFFFFFF)
                            {
                              uint64_t v130 = *(void *)(a1 + 752);
                              while (*(void *)(v130 + 96 * v129 + 16) != *(void *)v687)
                              {
                                LODWORD(v129) = *(_DWORD *)(v130 + 96 * v129 + 8) & 0x7FFFFFFF;
                                if (v129 == 0x7FFFFFFF) {
                                  goto LABEL_229;
                                }
                              }
                              goto LABEL_230;
                            }
                          }
                          else
                          {
                            LODWORD(v128) = 0;
                          }
LABEL_229:
                          re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1 + 736, v128, v127, v687, (__n128 *)v689);
                          ++*(_DWORD *)(a1 + 776);
LABEL_230:
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v649, (uint64_t *)v687);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v645, (uint64_t *)v687);
                          unsigned int v66 = *(re::MaterialAsset **)&v689[8];
                          if (*(void *)&v689[8] && *(void *)&v691[8]) {
                            unsigned int v66 = (re::MaterialAsset *)(*(uint64_t (**)(void))(**(void **)&v689[8] + 40))();
                          }
                          goto LABEL_237;
                        }
                        do
                          LODWORD(v114) = *(_DWORD *)(v113 + 96 * v114 + 8) & 0x7FFFFFFF;
                        while (v114 != 0x7FFFFFFF
                             && *(void *)(v113 + 96 * v114 + 16) != *(void *)v689);
                        if (*(void *)(v113 + 96 * v114 + 48)) {
                          goto LABEL_198;
                        }
                        while (1)
                        {
                          uint64_t v112 = *(_DWORD *)(v113 + 96 * v112 + 8) & 0x7FFFFFFF;
                          if (v112 == 0x7FFFFFFF) {
                            break;
                          }
                          if (*(void *)(v113 + 96 * v112 + 16) == *(void *)v689) {
                            goto LABEL_208;
                          }
                        }
LABEL_207:
                        LODWORD(v112) = 0x7FFFFFFF;
LABEL_208:
                        if (!*(void *)(v113 + 96 * v112 + 80))
                        {
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1264, (uint64_t *)v689);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v649, (uint64_t *)v689);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v645, (uint64_t *)v689);
                          unint64_t v110 = *(void *)v689;
                        }
                        re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 736, v110);
                        goto LABEL_211;
                      }
                    }
                    else
                    {
                      uint64_t v113 = *(void *)(a1 + 752);
                    }
                    if (*(void *)(v113 + 0x2FFFFFFFD0)) {
                      goto LABEL_198;
                    }
                    goto LABEL_207;
                  }
                }
                else
                {
                  uint64_t v109 = *(void *)(a1 + 752);
                }
LABEL_184:
                LODWORD(v108) = 0x7FFFFFFF;
                goto LABEL_185;
              }
              uint64_t v106 = *(void *)(v102 + 32 * v105 + 24);
            }
            else
            {
              uint64_t v106 = *(void *)(v102 + 0xFFFFFFFF8);
            }
            *(void *)v689 = v106;
            uint64_t v105 = 0x7FFFFFFFLL;
            goto LABEL_178;
          }
        }
        else
        {
          uint64_t v102 = *(void *)(a1 + 848);
        }
        uint64_t v101 = 0x7FFFFFFFLL;
        goto LABEL_171;
      }
LABEL_246:
      uint64_t v650 = *(unsigned int *)(a1 + 1152);
      uint64_t v133 = 0;
      if (v650)
      {
        int v134 = (int *)(*(void *)(a1 + 1136) + 8);
        while (1)
        {
          int v135 = *v134;
          v134 += 6;
          if (v135 < 0) {
            break;
          }
          if (v650 == ++v133)
          {
            LODWORD(v133) = *(_DWORD *)(a1 + 1152);
            break;
          }
        }
      }
      v136 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      if (v650 != v133)
      {
        uint64_t v137 = v133;
        do
        {
          if (*(void *)(a1 + 736))
          {
            unint64_t v138 = *(void *)(*(void *)(a1 + 1136) + 24 * v137 + 16);
            unint64_t v139 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v138 ^ (v138 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v138 ^ (v138 >> 30))) >> 27));
            uint64_t v140 = *(unsigned int *)(*(void *)(a1 + 744) + 4 * ((v139 ^ (v139 >> 31)) % *(unsigned int *)(a1 + 760)));
            uint64_t v141 = *(void *)(a1 + 752);
            if (v140 != 0x7FFFFFFF)
            {
              while (*(void *)(v141 + 96 * v140 + 16) != v138)
              {
                uint64_t v140 = *(_DWORD *)(v141 + 96 * v140 + 8) & 0x7FFFFFFF;
                if (v140 == 0x7FFFFFFF) {
                  goto LABEL_259;
                }
              }
              goto LABEL_260;
            }
          }
          else
          {
            uint64_t v141 = *(void *)(a1 + 752);
          }
LABEL_259:
          LODWORD(v140) = 0x7FFFFFFF;
LABEL_260:
          uint64_t v142 = v141 + 96 * v140;
          uint64_t v145 = *(void *)(v142 + 48);
          v144 = (void *)(v142 + 48);
          uint64_t v143 = v145;
          v146 = (void **)(v144 + 2);
          uint64_t v147 = v144[2];
          if (v145)
          {
            uint64_t v148 = v147 + 8 * v143;
            do
            {
              uint64_t v149 = *(void *)(*(void *)v147 + 176);
              if (v149)
              {
                uint64_t v150 = *(void *)(v149 + 72);
                if (v150)
                {
                  v151 = *(re::MaterialAsset **)(v149 + 88);
                  for (uint64_t i = 24 * v150; i; i -= 24)
                  {
                    uint64_t v153 = *((void *)v151 + 1);
                    if (v153)
                    {
                      unsigned int v154 = atomic_load((unsigned int *)(v153 + 704));
                      if (v154 == 2)
                      {
                        uint64_t v155 = *((void *)v151 + 1);
                        if (v155)
                        {
                          v156 = *(re::MaterialAsset **)(v155 + 264);
                          unsigned int v66 = (re::MaterialAsset *)re::MaterialAsset::assetType(v66);
                          if (v156 == v66)
                          {
                            unsigned int v66 = (re::MaterialAsset *)re::AssetHandle::loadedAsset<re::MaterialAsset>(v151);
                            if ((*((unsigned char *)v66 + 1730) & 0xFE) == 6)
                            {
                              LOBYTE(v143) = 1;
                              goto LABEL_275;
                            }
                          }
                        }
                        else
                        {
                          unsigned int v66 = (re::MaterialAsset *)re::MaterialAsset::assetType(v66);
                        }
                      }
                    }
                    v151 = (re::MaterialAsset *)((char *)v151 + 24);
                  }
                }
              }
              v147 += 8;
            }
            while (v147 != v148);
            LOBYTE(v143) = 0;
LABEL_275:
            v136 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
            v146 = (void **)(v144 + 2);
          }
          *(unsigned char *)(v141 + 96 * v140 + 88) = v143;
          *(_DWORD *)v691 = 0;
          long long v690 = 0u;
          *(_OWORD *)v689 = 0u;
          *(void *)&v691[4] = 0x7FFFFFFFLL;
          if (*v144)
          {
            v157 = *v146;
            uint64_t v158 = (uint64_t)&(*v146)[*v144];
            while (1)
            {
              *(void *)buf = *v157;
              if (*(void *)buf) {
                break;
              }
LABEL_283:
              if (++v157 == (void *)v158) {
                goto LABEL_284;
              }
            }
            while (1)
            {
              LODWORD(v656[0]) = 0;
              v159 = (_DWORD *)re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add<int>((uint64_t)v689, (uint64_t *)buf, v656);
              uint64_t v160 = (*v159 + 1);
              _DWORD *v159 = v160;
              uint64_t v161 = *(void *)buf;
              if (*v144 == v160) {
                break;
              }
              uint64_t v162 = *(void *)(*(void *)buf + 24);
              if (!v162 || (*(unsigned char *)(v162 + 288) & 0x80) != 0) {
                goto LABEL_283;
              }
              *(void *)buf = *(void *)(*(void *)buf + 24);
            }
          }
          else
          {
LABEL_284:
            uint64_t v161 = 0;
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v689);
          uint64_t v163 = *(v144 - 3);
          if (v163)
          {
            if (v161 != v163)
            {
              v164 = (re::ecs2::EntityComponentCollection *)(v163 + 32);
              if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v163 + 32), (const re::ecs2::ComponentTypeBase *)v136[263]))
              {
                re::ecs2::EntityComponentCollection::remove(v164, (const re::ecs2::ComponentTypeBase *)v136[263]);
              }
              unsigned int v66 = (re::MaterialAsset *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v161 + 32), (const re::ecs2::ComponentTypeBase *)v136[263]);
              if (!v66) {
                unsigned int v66 = (re::MaterialAsset *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v161 + 32), (const re::ecs2::ComponentTypeBase *)v136[263]);
              }
            }
          }
          else
          {
            *(v144 - 3) = v161;
          }
          if (*(_DWORD *)(a1 + 1152) <= (v133 + 1)) {
            int v165 = v133 + 1;
          }
          else {
            int v165 = *(_DWORD *)(a1 + 1152);
          }
          while (1)
          {
            uint64_t v137 = (v133 + 1);
            if (v165 - 1 == v133) {
              break;
            }
            LODWORD(v133) = v133 + 1;
            int v166 = v137;
            if ((*(_DWORD *)(*(void *)(a1 + 1136) + 24 * v137 + 8) & 0x80000000) != 0) {
              goto LABEL_299;
            }
          }
          int v166 = v165;
LABEL_299:
          LODWORD(v133) = v166;
        }
        while (v650 != v166);
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1312);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v670);
      uint64_t v167 = *(unsigned int *)(a1 + 1392);
      if (v167)
      {
        uint64_t v168 = 0;
        v169 = (int *)(*(void *)(a1 + 1376) + 8);
        while (1)
        {
          int v170 = *v169;
          v169 += 6;
          if (v170 < 0) {
            break;
          }
          if (v167 == ++v168)
          {
            LODWORD(v168) = *(_DWORD *)(a1 + 1392);
            break;
          }
        }
      }
      else
      {
        LODWORD(v168) = 0;
      }
      if (v167 != v168)
      {
        uint64_t v171 = v168;
        while (1)
        {
          uint64_t v172 = *(void *)(*(void *)(a1 + 1376) + 24 * v171 + 16);
          *(void *)v689 = *(void *)(v172 + 296);
          if (!re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1 + 832, (uint64_t *)v689))break; {
          uint64_t v173 = *(void *)(v172 + 224);
          }
          if (!v173) {
            break;
          }
          *(void *)v689 = *(void *)(v173 + 64);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1168, (uint64_t *)v689);
LABEL_354:
          if (*(_DWORD *)(a1 + 1392) <= (v168 + 1)) {
            int v196 = v168 + 1;
          }
          else {
            int v196 = *(_DWORD *)(a1 + 1392);
          }
          while (1)
          {
            uint64_t v171 = (v168 + 1);
            if (v196 - 1 == v168) {
              break;
            }
            LODWORD(v168) = v168 + 1;
            int v197 = v171;
            if ((*(_DWORD *)(*(void *)(a1 + 1376) + 24 * v171 + 8) & 0x80000000) != 0) {
              goto LABEL_361;
            }
          }
          int v197 = v196;
LABEL_361:
          LODWORD(v168) = v197;
          if (v167 == v197) {
            goto LABEL_362;
          }
        }
        *(_DWORD *)v691 = 0;
        long long v690 = 0u;
        *(_OWORD *)v689 = 0u;
        *(void *)&v691[4] = 0x7FFFFFFFLL;
        uint64_t v174 = *(unsigned int *)(a1 + 768);
        if (v174)
        {
          uint64_t v175 = 0;
          v176 = (int *)(*(void *)(a1 + 752) + 8);
          while (1)
          {
            int v177 = *v176;
            v176 += 24;
            if (v177 < 0) {
              break;
            }
            if (v174 == ++v175)
            {
              LODWORD(v175) = *(_DWORD *)(a1 + 768);
              break;
            }
          }
        }
        else
        {
          LODWORD(v175) = 0;
        }
        if (v174 == v175)
        {
          int v178 = 0;
        }
        else
        {
          uint64_t v179 = v175;
          uint64_t v180 = *(void *)(a1 + 752);
          unsigned int v181 = *(_DWORD *)(a1 + 768);
          do
          {
            uint64_t v182 = v180 + 96 * v179;
            uint64_t v183 = *(void *)(v182 + 48);
            if (v183)
            {
              v184 = *(uint64_t **)(v182 + 64);
              v185 = &v184[v183];
              do
              {
                uint64_t v186 = *v184;
                while (1)
                {
                  uint64_t v186 = *(void *)(v186 + 24);
                  if (!v186 || (*(unsigned char *)(v186 + 288) & 0x80) != 0) {
                    break;
                  }
                  if (v172 == v186)
                  {
                    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v689, (uint64_t *)(v180 + 96 * v179 + 72));
                    unsigned int v181 = *(_DWORD *)(a1 + 768);
                    uint64_t v180 = *(void *)(a1 + 752);
                    goto LABEL_328;
                  }
                }
                ++v184;
              }
              while (v184 != v185);
            }
LABEL_328:
            if (v181 <= (int)v175 + 1) {
              unsigned int v187 = v175 + 1;
            }
            else {
              unsigned int v187 = v181;
            }
            while (1)
            {
              uint64_t v179 = (v175 + 1);
              if (v187 - 1 == v175) {
                break;
              }
              LODWORD(v175) = v175 + 1;
              unsigned int v188 = v179;
              if ((*(_DWORD *)(v180 + 96 * v179 + 8) & 0x80000000) != 0) {
                goto LABEL_335;
              }
            }
            unsigned int v188 = v187;
LABEL_335:
            LODWORD(v175) = v188;
          }
          while (v174 != v188);
          int v178 = *(_DWORD *)v691;
          if (*(_DWORD *)v691)
          {
            uint64_t v189 = 0;
            v190 = (int *)(v690 + 8);
            while (1)
            {
              int v191 = *v190;
              v190 += 6;
              if (v191 < 0) {
                goto LABEL_342;
              }
              if (*(unsigned int *)v691 == ++v189)
              {
                LODWORD(v189) = *(_DWORD *)v691;
                goto LABEL_342;
              }
            }
          }
        }
        LODWORD(v189) = 0;
LABEL_342:
        if (v178 != v189)
        {
          uint64_t v192 = v189;
          uint64_t v193 = v690;
          do
          {
            *(void *)&long long v670 = 0;
            *(void *)&long long v670 = *(void *)(v193 + 24 * v192 + 16);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1168, (uint64_t *)&v670);
            uint64_t v193 = v690;
            if (*(_DWORD *)v691 <= (v189 + 1)) {
              int v194 = v189 + 1;
            }
            else {
              int v194 = *(_DWORD *)v691;
            }
            int v195 = v189;
            while (1)
            {
              uint64_t v192 = (v195 + 1);
              if (v194 - 1 == v195) {
                break;
              }
              ++v195;
              LODWORD(v189) = v192;
              if ((*(_DWORD *)(v690 + 24 * v192 + 8) & 0x80000000) != 0) {
                goto LABEL_352;
              }
            }
            LODWORD(v189) = v194;
LABEL_352:
            ;
          }
          while (v178 != v189);
        }
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v689);
        goto LABEL_354;
      }
LABEL_362:
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1360);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1456);
      re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v689);
      *(void *)&long long v672 = 0;
      *(void *)&long long v671 = 0;
      DWORD2(v671) = 0;
      long long v670 = (unint64_t)v689;
      re::DynamicArray<float *>::setCapacity(&v670, 0);
      ++DWORD2(v671);
      uint64_t v198 = *(unsigned int *)(a1 + 1104);
      if (v198)
      {
        uint64_t v199 = 0;
        v200 = (int *)(*(void *)(a1 + 1088) + 8);
        while (1)
        {
          int v201 = *v200;
          v200 += 6;
          if (v201 < 0) {
            break;
          }
          if (v198 == ++v199)
          {
            LODWORD(v199) = *(_DWORD *)(a1 + 1104);
            break;
          }
        }
      }
      else
      {
        LODWORD(v199) = 0;
      }
      unsigned int v202 = *(_DWORD *)(a1 + 1104);
      if (v198 != v199)
      {
        uint64_t v203 = v199;
        do
        {
          v656[0] = 0;
          v656[0] = *(void *)(*(void *)(a1 + 1088) + 24 * v203 + 16);
          uint64_t v204 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v656[0] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v204)
          {
            unsigned int v205 = *(unsigned __int8 *)(v204 + 42);
            BOOL v206 = *(unsigned __int8 *)(v204 + 41) == 1;
            char v207 = v206 & v205;
            int v208 = v206 & (v205 >> 1);
            (*(void (**)(uint8_t *__return_ptr, uint64_t, unint64_t))(*(void *)v647 + 8))(buf, v647, v656[0]);
            uint64_t v209 = buf[0] ? *(void *)&buf[8] : 0;
            char v210 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v647 + 24))(v647, v209) == 2
                 ? v208
                 : 0;
            if ((v207 & 1) == 0 && (v210 & 1) == 0) {
              re::DynamicArray<re::TransitionCondition *>::add(&v670, v656);
            }
          }
          unsigned int v202 = *(_DWORD *)(a1 + 1104);
          if (v202 <= (int)v199 + 1) {
            int v211 = v199 + 1;
          }
          else {
            int v211 = *(_DWORD *)(a1 + 1104);
          }
          while (1)
          {
            uint64_t v203 = (v199 + 1);
            if (v211 - 1 == v199) {
              break;
            }
            LODWORD(v199) = v199 + 1;
            int v212 = v203;
            if ((*(_DWORD *)(*(void *)(a1 + 1088) + 24 * v203 + 8) & 0x80000000) != 0) {
              goto LABEL_387;
            }
          }
          int v212 = v211;
LABEL_387:
          LODWORD(v199) = v212;
        }
        while (v198 != v212);
      }
      if ((void)v671)
      {
        v213 = (re::ecs2::Entity **)v672;
        uint64_t v214 = 8 * v671;
        do
        {
          v215 = *v213++;
          re::ecs2::MeshShadowSystem::processReceiverRemoval((re::ecs2::MeshShadowSystem *)a1, v215);
          v214 -= 8;
        }
        while (v214);
        unsigned int v202 = *(_DWORD *)(a1 + 1104);
      }
      uint64_t v216 = 0;
      if (v202)
      {
        v217 = (int *)(*(void *)(a1 + 1088) + 8);
        while (1)
        {
          int v218 = *v217;
          v217 += 6;
          if (v218 < 0) {
            break;
          }
          if (v202 == ++v216)
          {
            LODWORD(v216) = v202;
            break;
          }
        }
      }
      if (v202 != v216)
      {
        uint64_t v219 = v216;
        v220 = (void *)(a1 + 928);
        v221 = (unint64_t *)(a1 + 880);
        uint64_t v222 = a1 + 1552;
        uint64_t v651 = a1 + 1600;
        v223 = &unk_2687A0000;
        while (1)
        {
          v656[0] = *(void *)(*(void *)(*(void *)(a1 + 1088) + 24 * v219 + 16) + 296);
          *(void *)&v660[0] = 0;
          (*(void (**)(uint8_t *__return_ptr))(*(void *)v647 + 8))(buf);
          if (buf[0]) {
            uint64_t v224 = *(void *)&buf[8];
          }
          else {
            uint64_t v224 = 0;
          }
          *(void *)&v660[0] = v224;
          if (!v223[808]) {
            re::internal::shadows::setParamsOnMaterialParameterBlock(v656[0], a1 + 2480, *(re::RenderManager ***)(*(void *)(a1 + 112) + 24));
          }
          if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1 + 928, (uint64_t *)v656))
          {
            break;
          }
          re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1 + 928, (uint64_t *)v656, v660);
LABEL_423:
          uint64_t v233 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 880, (uint64_t *)v660);
          if (v233)
          {
            v234 = (void *)v233;
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v222, (uint64_t *)v660);
            ++*v234;
          }
          else
          {
            v235 = v223;
            uint64_t v236 = *(void *)&v660[0];
            unint64_t v237 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (*(void *)&v660[0] ^ (*(void *)&v660[0] >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(void *)&v660[0] ^ (*(void *)&v660[0] >> 30))) >> 27));
            unint64_t v238 = v237 ^ (v237 >> 31);
            unint64_t v239 = *v221;
            if (!*v221
              || (unint64_t v239 = v238 % *(unsigned int *)(a1 + 904),
                  uint64_t v240 = *(unsigned int *)(*(void *)(a1 + 888) + 4 * v239),
                  v240 == 0x7FFFFFFF))
            {
LABEL_430:
              uint64_t v242 = *(unsigned int *)(a1 + 916);
              if (v242 == 0x7FFFFFFF)
              {
                uint64_t v242 = *(unsigned int *)(a1 + 912);
                int v243 = v242;
                if (v242 == *(_DWORD *)(a1 + 904))
                {
                  re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1 + 880, 2 * *(_DWORD *)(a1 + 908));
                  unint64_t v239 = v238 % *(unsigned int *)(a1 + 904);
                  int v243 = *(_DWORD *)(a1 + 912);
                  uint64_t v236 = *(void *)&v660[0];
                }
                *(_DWORD *)(a1 + 912) = v243 + 1;
                uint64_t v244 = *(void *)(a1 + 896);
                int v245 = *(_DWORD *)(v244 + 32 * v242 + 8);
              }
              else
              {
                uint64_t v244 = *(void *)(a1 + 896);
                int v245 = *(_DWORD *)(v244 + 32 * v242 + 8);
                *(_DWORD *)(a1 + 916) = v245 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v244 + 32 * v242 + 8) = v245 | 0x80000000;
              uint64_t v246 = *(void *)(a1 + 888);
              *(_DWORD *)(*(void *)(a1 + 896) + 32 * v242 + 8) = *(_DWORD *)(*(void *)(a1 + 896) + 32 * v242 + 8) & 0x80000000 | *(_DWORD *)(v246 + 4 * v239);
              *(void *)(*(void *)(a1 + 896) + 32 * v242) = v238;
              *(void *)(*(void *)(a1 + 896) + 32 * v242 + 16) = v236;
              *(void *)(*(void *)(a1 + 896) + 32 * v242 + 24) = 1;
              *(_DWORD *)(v246 + 4 * v239) = v242;
              ++*(_DWORD *)(a1 + 908);
              ++*(_DWORD *)(a1 + 920);
            }
            else
            {
              uint64_t v241 = *(void *)(a1 + 896);
              while (*(void *)(v241 + 32 * v240 + 16) != *(void *)&v660[0])
              {
                uint64_t v240 = *(_DWORD *)(v241 + 32 * v240 + 8) & 0x7FFFFFFF;
                if (v240 == 0x7FFFFFFF) {
                  goto LABEL_430;
                }
              }
            }
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1504, (uint64_t *)v660);
            v223 = v235;
            uint64_t v222 = a1 + 1552;
            if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v651, (uint64_t *)v660))
            {
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v651, (uint64_t *)v660);
            }
          }
          if (*(_DWORD *)(a1 + 1104) <= (v216 + 1)) {
            int v247 = v216 + 1;
          }
          else {
            int v247 = *(_DWORD *)(a1 + 1104);
          }
          while (1)
          {
            uint64_t v219 = (v216 + 1);
            if (v247 - 1 == v216) {
              break;
            }
            LODWORD(v216) = v216 + 1;
            int v248 = v219;
            if ((*(_DWORD *)(*(void *)(a1 + 1088) + 24 * v219 + 8) & 0x80000000) != 0) {
              goto LABEL_445;
            }
          }
          int v248 = v247;
LABEL_445:
          LODWORD(v216) = v248;
          if (v202 == v248) {
            goto LABEL_446;
          }
        }
        *(void *)buf = 0;
        if (*v220)
        {
          unint64_t v225 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v656[0] ^ (v656[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                         * (v656[0] ^ (v656[0] >> 30))) >> 27));
          uint64_t v226 = *(unsigned int *)(*(void *)(a1 + 936) + 4 * ((v225 ^ (v225 >> 31)) % *(unsigned int *)(a1 + 952)));
          uint64_t v227 = *(void *)(a1 + 944);
          if (v226 != 0x7FFFFFFF)
          {
            while (*(void *)(v227 + 32 * v226 + 16) != v656[0])
            {
              uint64_t v226 = *(_DWORD *)(v227 + 32 * v226 + 8) & 0x7FFFFFFF;
              if (v226 == 0x7FFFFFFF) {
                goto LABEL_412;
              }
            }
LABEL_413:
            *(void *)buf = *(void *)(v227 + 32 * v226 + 24);
            uint64_t v228 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 880, (uint64_t *)buf);
            if (v228)
            {
              v229 = (void *)v228;
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v222, (uint64_t *)buf);
              --*v229;
            }
            if (*v220)
            {
              unint64_t v230 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (v656[0] ^ (v656[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                             * (v656[0] ^ (v656[0] >> 30))) >> 27));
              uint64_t v231 = *(unsigned int *)(*(void *)(a1 + 936) + 4 * ((v230 ^ (v230 >> 31)) % *(unsigned int *)(a1 + 952)));
              uint64_t v232 = *(void *)(a1 + 944);
              if (v231 != 0x7FFFFFFF)
              {
                while (*(void *)(v232 + 32 * v231 + 16) != v656[0])
                {
                  uint64_t v231 = *(_DWORD *)(v232 + 32 * v231 + 8) & 0x7FFFFFFF;
                  if (v231 == 0x7FFFFFFF) {
                    goto LABEL_421;
                  }
                }
                goto LABEL_422;
              }
            }
            else
            {
              uint64_t v232 = *(void *)(a1 + 944);
            }
LABEL_421:
            uint64_t v231 = 0x7FFFFFFFLL;
LABEL_422:
            *(void *)(v232 + 32 * v231 + 24) = *(void *)&v660[0];
            goto LABEL_423;
          }
        }
        else
        {
          uint64_t v227 = *(void *)(a1 + 944);
        }
LABEL_412:
        uint64_t v226 = 0x7FFFFFFFLL;
        goto LABEL_413;
      }
LABEL_446:
      uint64_t v249 = *(unsigned int *)(a1 + 912);
      if (v249)
      {
        uint64_t v250 = 0;
        v251 = (int *)(*(void *)(a1 + 896) + 8);
        while (1)
        {
          int v252 = *v251;
          v251 += 8;
          if (v252 < 0) {
            break;
          }
          if (v249 == ++v250)
          {
            LODWORD(v250) = *(_DWORD *)(a1 + 912);
            break;
          }
        }
      }
      else
      {
        LODWORD(v250) = 0;
      }
      if (v249 != v250)
      {
        uint64_t v253 = v250;
        do
        {
          uint64_t v254 = *(void *)(a1 + 896) + 32 * v253;
          if (!*(void *)(v254 + 24))
          {
            v255 = (uint64_t *)(v254 + 16);
            if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 1552, (uint64_t *)(v254 + 16)))
            {
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 1552, v255);
            }
            if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 1504, v255))
            {
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 1504, v255);
            }
            else
            {
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1600, v255);
            }
          }
          if (*(_DWORD *)(a1 + 912) <= (v250 + 1)) {
            int v256 = v250 + 1;
          }
          else {
            int v256 = *(_DWORD *)(a1 + 912);
          }
          while (1)
          {
            uint64_t v253 = (v250 + 1);
            if (v256 - 1 == v250) {
              break;
            }
            LODWORD(v250) = v250 + 1;
            int v257 = v253;
            if ((*(_DWORD *)(*(void *)(a1 + 896) + 32 * v253 + 8) & 0x80000000) != 0) {
              goto LABEL_467;
            }
          }
          int v257 = v256;
LABEL_467:
          LODWORD(v250) = v257;
        }
        while (v249 != v257);
      }
      uint64_t v258 = *(unsigned int *)(a1 + 1632);
      if (v258)
      {
        uint64_t v259 = 0;
        v260 = (int *)(*(void *)(a1 + 1616) + 8);
        while (1)
        {
          int v261 = *v260;
          v260 += 6;
          if (v261 < 0) {
            break;
          }
          if (v258 == ++v259)
          {
            LODWORD(v259) = *(_DWORD *)(a1 + 1632);
            break;
          }
        }
      }
      else
      {
        LODWORD(v259) = 0;
      }
      if (v258 != v259)
      {
        uint64_t v262 = v259;
        do
        {
          re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 880, *(void *)(*(void *)(a1 + 1616) + 24 * v262 + 16));
          if (*(_DWORD *)(a1 + 1632) <= (v259 + 1)) {
            int v263 = v259 + 1;
          }
          else {
            int v263 = *(_DWORD *)(a1 + 1632);
          }
          int v264 = v259;
          while (1)
          {
            uint64_t v262 = (v264 + 1);
            if (v263 - 1 == v264) {
              break;
            }
            ++v264;
            LODWORD(v259) = v262;
            if ((*(_DWORD *)(*(void *)(a1 + 1616) + 24 * v262 + 8) & 0x80000000) != 0) {
              goto LABEL_484;
            }
          }
          LODWORD(v259) = v263;
LABEL_484:
          ;
        }
        while (v258 != v259);
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1072);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1024);
      if ((void)v670 && (void)v672) {
        (*(void (**)(void))(*(void *)v670 + 40))();
      }
      re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v689);
      uint64_t v267 = *(void *)(v641 + 8);
      if (v267)
      {
        v643 = *(re::ecs2::RenderingSubsystem ***)v641;
        uint64_t v268 = *(void *)v641 + 8 * v267;
        v269 = (re::AssetHandle *)((char *)&v695 + 8);
        uint64_t v628 = a1 + 1168;
        uint64_t v629 = a1 + 1120;
        v652 = (unint64_t *)(a1 + 784);
        int32x4_t v640 = vdupq_n_s32(0x7F800000u);
        __asm { FMOV            V15.2S, #1.0 }
        uint64_t v642 = a1 + 1600;
        uint64_t v646 = a1 + 1504;
        uint64_t v627 = a1 + 1264;
        uint64_t v623 = a1 + 1696;
        v624 = (re::DynamicString *)(a1 + 2696);
        v637 = (uint64_t *)(a1 + 1768);
        v638 = (uint8_t *)(a1 + 1760);
        v635 = (uint64_t *)(a1 + 1848);
        v636 = (uint64_t *)(a1 + 1808);
        v622 = (long long *)(a1 + 1896);
        v633 = (uint64_t *)(a1 + 2008);
        v634 = (uint64_t *)(a1 + 1968);
        uint64_t v631 = a1 + 2128;
        v632 = (uint64_t *)(a1 + 2048);
        v630 = (_OWORD *)(a1 + 2176);
        uint64_t v274 = 96;
        uint64_t v625 = v268;
        while (1)
        {
          if (*(unsigned char *)(a1 + 2416)) {
            goto LABEL_491;
          }
          v689[0] = 0;
          long long v690 = 0uLL;
          *(void *)&v689[8] = 0;
          *(_DWORD *)v691 = 0;
          __dst = 0;
          memset(&v691[8], 0, 36);
          long long v692 = 0u;
          long long v693 = 0u;
          *(_DWORD *)v694 = 0;
          memset(&v694[8], 0, 36);
          long long v695 = 0u;
          long long v696 = 0u;
          *(_DWORD *)v697 = 0;
          memset(&v697[8], 0, 36);
          long long v698 = 0u;
          long long v699 = 0u;
          *(_DWORD *)v700 = 0;
          memset(&v700[8], 0, 36);
          *(_OWORD *)&v700[48] = 0u;
          long long v701 = 0u;
          int v702 = 0;
          int v706 = 0;
          long long v704 = 0u;
          long long v705 = 0u;
          uint64_t v707 = 0x7FFFFFFFLL;
          *(_DWORD *)v708 = 1065353216;
          *(_OWORD *)&v708[4] = xmmword_2343864E0;
          *(_DWORD *)&v708[20] = 12;
          *(void *)&v708[24] = 0x3CF5C28F3F800000;
          LOWORD(v709) = 0;
          long long v710 = xmmword_2343864F0;
          *(void *)v711 = 0x3EB333333F800000;
          v711[8] = 1;
          *(_OWORD *)&v711[12] = xmmword_234386500;
          *(_OWORD *)&v711[28] = xmmword_234386510;
          *(_DWORD *)&v711[44] = 1106247680;
          *(void *)&long long v712 = 0x4170475C3DCCCCCDLL;
          BYTE8(v712) = 1;
          long long v713 = xmmword_23435FD90;
          LOBYTE(v714) = 1;
          *(void *)&long long v715 = 0x3F8000003F2D42C4;
          *((void *)&v715 + 1) = 0xA3F800000;
          long long v716 = xmmword_234386520;
          *(void *)&long long v717 = 1056964608;
          DWORD2(v717) = 0x40000000;
          WORD6(v717) = 256;
          *(_WORD *)v718 = 1;
          v718[2] = 0;
          *(_DWORD *)&v718[4] = 897988541;
          *(void *)&v718[8] = 0;
          *(void *)&v718[16] = 0x3DCCCCCD3E800000;
          *(_DWORD *)&v718[24] = 16;
          int v661 = 0;
          memset(v660, 0, sizeof(v660));
          uint64_t v662 = 0x7FFFFFFFLL;
          re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::unionSet(v629, v628, (uint64_t)v660);
          double Current = CFAbsoluteTimeGetCurrent();
          double v279 = Current;
          uint64_t v648 = *(unsigned int *)(a1 + 768);
          uint64_t v280 = 0;
          if (v648)
          {
            v281 = (int *)(*(void *)(a1 + 752) + 8);
            while (1)
            {
              int v282 = *v281;
              v281 += 24;
              if (v282 < 0) {
                break;
              }
              if (v648 == ++v280)
              {
                LODWORD(v280) = *(_DWORD *)(a1 + 768);
                break;
              }
            }
          }
          if (v648 != v280)
          {
            uint64_t v283 = v280;
            float v284 = Current;
            while (1)
            {
              uint64_t v285 = *(void *)(a1 + 752);
              uint64_t v286 = v285 + 96 * v283;
              unint64_t v289 = *(void *)(v286 + 16);
              v288 = (uint64_t *)(v286 + 16);
              unint64_t v287 = v289;
              if (*(void *)(a1 + 736)
                && (unint64_t v290 = 0x94D049BB133111EBLL
                         * ((0xBF58476D1CE4E5B9 * (v287 ^ (v287 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                             * (v287 ^ (v287 >> 30))) >> 27)),
                    unsigned int v291 = *(_DWORD *)(*(void *)(a1 + 744) + 4 * ((v290 ^ (v290 >> 31)) % *(unsigned int *)(a1 + 760))),
                    v291 != 0x7FFFFFFF))
              {
                uint64_t v310 = *(void *)(v285 + 96 * v291 + 16);
                for (uint64_t j = *(unsigned int *)(*(void *)(a1 + 744)
                                          + 4 * ((v290 ^ (v290 >> 31)) % *(unsigned int *)(a1 + 760)));
                      v310 != v287;
                      unsigned int v291 = j)
                {
                  uint64_t j = *(_DWORD *)(v285 + 96 * j + 8) & 0x7FFFFFFF;
                  unsigned int v291 = 0x7FFFFFFF;
                  if (j == 0x7FFFFFFF) {
                    break;
                  }
                  uint64_t v310 = *(void *)(v285 + 96 * j + 16);
                }
              }
              else
              {
                unsigned int v291 = 0x7FFFFFFF;
              }
              uint64_t v292 = v285 + 96 * v291;
              v295 = *(re::ecs2::TransformComponent ***)(v292 + 24);
              v294 = (uint64_t *)(v292 + 24);
              v293 = v295;
              if (v295)
              {
                re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(a1 + 152), v293, v656);
              }
              else
              {
                *(_OWORD *)v656 = xmmword_23435FD50;
                float32x4_t v657 = (float32x4_t)xmmword_23435FD60;
                long long v658 = xmmword_23435FD80;
                long long v659 = xmmword_23435FBB0;
              }
              v296 = v288 + 1;
              uint64_t v297 = (*(uint64_t (**)(void))(**((void **)*v643 + 7) + 32))(*((void *)*v643 + 7));
              uint64_t v298 = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v297);
              if (v298) {
                LODWORD(v299) = (*(uint64_t (**)(uint64_t, void))(*(void *)v298 + 24))(v298, *v296);
              }
              else {
                float v299 = 1.0;
              }
              float v300 = powf(v299, *(float *)(a1 + 2500));
              float v301 = v300;
              if (v300 >= 0.0001) {
                float v302 = v300;
              }
              else {
                float v302 = 1.0;
              }
              v303 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v296 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v303 && *(unsigned char *)(a1 + 2552))
              {
                float32x4_t v304 = vmulq_f32(v657, vnegq_f32(*(float32x4_t *)(a1 + 2560)));
                float v301 = v301
                     * (float)(1.0
                             / (float)((float)(expf((float)-*(float *)(a1 + 2548)* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v304, 2), vaddq_f32(v304, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v304.f32, 1))).f32[0])* 30.03)+ 1.0));
              }
              uint64_t v305 = *v288;
              uint64_t v306 = *((void *)&v701 + 1);
              if (*((void *)&v701 + 1) >= (unint64_t)v701)
              {
                unint64_t v307 = *((void *)&v701 + 1) + 1;
                if ((unint64_t)v701 < *((void *)&v701 + 1) + 1)
                {
                  if (*(void *)&v700[56])
                  {
                    unint64_t v308 = 2 * v701;
                    if (!(void)v701) {
                      unint64_t v308 = 8;
                    }
                    if (v308 <= v307) {
                      unint64_t v309 = *((void *)&v701 + 1) + 1;
                    }
                    else {
                      unint64_t v309 = v308;
                    }
                    re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v700[56], v309);
                  }
                  else
                  {
                    re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v700[56], v307);
                    ++v702;
                  }
                }
                uint64_t v306 = *((void *)&v701 + 1);
              }
              v312 = (float *)((char *)__dst + 16 * v306);
              *(void *)v312 = v305;
              v312[2] = v302;
              v312[3] = v301;
              *((void *)&v701 + 1) = v306 + 1;
              ++v702;
              uint64_t v313 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v296 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (v313) {
                BOOL v314 = *(unsigned char *)(v313 + 36) != 0;
              }
              else {
                BOOL v314 = 0;
              }
              v315 = (float *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v652, v288);
              if (v315) {
                BOOL v316 = v279 > (float)(*v315 + *(float *)(a1 + 2684));
              }
              else {
                BOOL v316 = 1;
              }
              int v317 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v660, v288)|| *(unsigned char *)(a1 + 2464)|| *(unsigned char *)(v285 + 96 * v291 + 88) != 0;
              *(void *)&long long v672 = 0;
              *(void *)&long long v671 = 0;
              long long v670 = 0uLL;
              DWORD2(v671) = 0;
              float32x4_t v673 = (float32x4_t)v640;
              *(void *)&long long v318 = 0x7F0000007FLL;
              *((void *)&v318 + 1) = 0x7F0000007FLL;
              long long v674 = v318;
              int32x4_t v675 = v640;
              long long v676 = v318;
              __n128 v319 = 0uLL;
              long long v677 = 0u;
              float32x4_t v678 = 0u;
              float32x4_t v679 = 0u;
              long long v680 = 0u;
              long long v681 = 0u;
              *((void *)&v682 + 1) = _D15;
              LOBYTE(v683) = 0;
              if (v317)
              {
                BOOL v639 = v316;
                *(void *)&long long v682 = *v288;
                *((float *)&v682 + 2) = 1.0 / v302;
                *((float *)&v682 + 3) = v301;
                LOBYTE(v683) = v314;
                *((double *)&v683 + 1) = v279;
                float32x4_t v678 = *(float32x4_t *)v656;
                float32x4_t v679 = v657;
                long long v680 = v658;
                long long v681 = v659;
                *(void *)&buf[32] = 0;
                memset(buf, 0, 28);
                uint64_t v320 = v285 + 96 * v291;
                unint64_t v323 = *(void *)(v320 + 48);
                v322 = (void *)(v320 + 48);
                unint64_t v321 = v323;
                if (v323)
                {
                  re::DynamicArray<re::RigNodeConstraint>::setCapacity(buf, v321);
                  if (*v322)
                  {
                    v324 = *(uint64_t **)(v285 + 96 * v291 + 64);
                    uint64_t v325 = 8 * *v322;
                    do
                    {
                      uint64_t v326 = *v324;
                      uint64_t v327 = *(void *)(*v324 + 224);
                      if (v327)
                      {
                        *(void *)v687 = *(void *)(v326 + 296);
                        uint64_t v328 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v326 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                        if (v328) {
                          BOOL v329 = *(_DWORD *)(v328 + 32) == 1;
                        }
                        else {
                          BOOL v329 = 0;
                        }
                        v687[8] = v329;
                        char v330 = *(unsigned char *)(v327 + 76);
                        if (v330) {
                          char v330 = *(void *)(v327 + 64) != 0;
                        }
                        v687[9] = v330;
                        re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)buf, (__n128 *)v687);
                      }
                      ++v324;
                      v325 -= 8;
                    }
                    while (v325);
                  }
                }
                re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v670, (uint64_t)buf);
                if (*(void *)buf && *(void *)&buf[32]) {
                  (*(void (**)(void))(**(void **)buf + 40))();
                }
                *(_OWORD *)v687 = xmmword_23435FD90;
                re::internal::shadows::generateAABBsForCluster(v294, (float32x4_t *)v687, &v678, (uint64_t)buf);
                int32x4_t v675 = *(int32x4_t *)&buf[32];
                long long v676 = v685;
                long long v677 = v686;
                float32x4_t v673 = *(float32x4_t *)buf;
                long long v674 = *(_OWORD *)&buf[16];
                if (re::internal::shadows::g_enableShadowFlattening)
                {
                  uint64_t v331 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(*v294 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                  re::AABB::transform(&v673, &v678, (uint64_t)buf);
                  long long v332 = *(_OWORD *)&buf[16];
                  *(_OWORD *)(v331 + 32) = *(_OWORD *)buf;
                  *(_OWORD *)(v331 + 48) = v332;
                }
                uint64_t v333 = *(void *)&v694[32];
                if (*(void *)&v694[32] >= *(void *)&v694[24])
                {
                  re::DynamicArray<re::MeshShadowCluster>::growCapacity(&v694[16], *(void *)&v694[32] + 1);
                  uint64_t v333 = *(void *)&v694[32];
                }
                uint64_t v334 = re::DynamicArray<re::MeshShadowCasterInfo>::DynamicArray(v695 + 224 * v333, (uint64_t *)&v670);
                float32x4_t v335 = v673;
                int32x4_t v336 = v675;
                *(_OWORD *)(v334 + 64) = v674;
                *(int32x4_t *)(v334 + 80) = v336;
                *(float32x4_t *)(v334 + 48) = v335;
                long long v337 = v676;
                long long v338 = v677;
                float32x4_t v339 = v679;
                *(float32x4_t *)(v334 + 128) = v678;
                *(float32x4_t *)(v334 + 144) = v339;
                *(_OWORD *)(v334 + 96) = v337;
                *(_OWORD *)(v334 + 112) = v338;
                __n128 v319 = (__n128)v680;
                long long v340 = v681;
                long long v341 = v683;
                *(_OWORD *)(v334 + 192) = v682;
                *(_OWORD *)(v334 + 208) = v341;
                *(__n128 *)(v334 + 160) = v319;
                *(_OWORD *)(v334 + 176) = v340;
                ++*(void *)&v694[32];
                ++*(_DWORD *)&v694[40];
                BOOL v316 = v639;
              }
              if ((v316 | v317) == 1) {
                break;
              }
LABEL_607:
              if (*(_DWORD *)(a1 + 1628))
              {
                *(void *)buf = *v288;
                re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase((uint64_t)&buf[8], v642);
                re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::add((uint64_t)&v698 + 8, buf);
                v319.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&buf[8]);
              }
              if (*(_DWORD *)(a1 + 1532))
              {
                *(void *)buf = *v288;
                re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase((uint64_t)&buf[8], v646);
                re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::add((uint64_t)&v697[16], buf);
                v319.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&buf[8]);
              }
              if ((void)v670 && (void)v672) {
                (*(void (**)(__n128))(*(void *)v670 + 40))(v319);
              }
              if (*(_DWORD *)(a1 + 768) <= (v280 + 1)) {
                int v372 = v280 + 1;
              }
              else {
                int v372 = *(_DWORD *)(a1 + 768);
              }
              while (1)
              {
                uint64_t v283 = (v280 + 1);
                if (v372 - 1 == v280) {
                  break;
                }
                LODWORD(v280) = v280 + 1;
                int v373 = v283;
                if ((*(_DWORD *)(*(void *)(a1 + 752) + 96 * v283 + 8) & 0x80000000) != 0) {
                  goto LABEL_621;
                }
              }
              int v373 = v372;
LABEL_621:
              LODWORD(v280) = v373;
              if (v648 == v373) {
                goto LABEL_622;
              }
            }
            uint64_t v342 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 96))(*(void *)(a1 + 128));
            uint64_t v343 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(*v294 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v342)
            {
              uint64_t v344 = *v294;
              do
              {
                uint64_t v345 = v344;
                uint64_t v344 = *(void *)(v344 + 24);
              }
              while (v344);
              (*(void (**)(uint64_t, void, uint64_t))(v342 + 16))(v342, *(void *)(v345 + 16), v343);
            }
            uint64_t v346 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v294 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (!v346 || ((*(unsigned char *)(v346 + 24) == 0) & ~v317) != 0)
            {
LABEL_594:
              uint64_t v361 = *v288;
              unint64_t v362 = 0xBF58476D1CE4E5B9 * (*v288 ^ ((unint64_t)*v288 >> 30));
              unint64_t v363 = (0x94D049BB133111EBLL * (v362 ^ (v362 >> 27))) ^ ((0x94D049BB133111EBLL * (v362 ^ (v362 >> 27))) >> 31);
              unint64_t v364 = *v652;
              if (!*v652
                || (unint64_t v364 = v363 % *(unsigned int *)(a1 + 808),
                    uint64_t v365 = *(unsigned int *)(*(void *)(a1 + 792) + 4 * v364),
                    v365 == 0x7FFFFFFF))
              {
LABEL_599:
                uint64_t v367 = *(unsigned int *)(a1 + 820);
                if (v367 == 0x7FFFFFFF)
                {
                  uint64_t v367 = *(unsigned int *)(a1 + 816);
                  int v368 = v367;
                  if (v367 == *(_DWORD *)(a1 + 808))
                  {
                    re::HashTable<unsigned long long,float,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v652, 2 * *(_DWORD *)(a1 + 812));
                    unint64_t v364 = v363 % *(unsigned int *)(a1 + 808);
                    int v368 = *(_DWORD *)(a1 + 816);
                    uint64_t v361 = *v288;
                  }
                  *(_DWORD *)(a1 + 816) = v368 + 1;
                  uint64_t v369 = *(void *)(a1 + 800);
                  int v370 = *(_DWORD *)(v369 + 32 * v367 + 8);
                }
                else
                {
                  uint64_t v369 = *(void *)(a1 + 800);
                  int v370 = *(_DWORD *)(v369 + 32 * v367 + 8);
                  *(_DWORD *)(a1 + 820) = v370 & 0x7FFFFFFF;
                }
                *(_DWORD *)(v369 + 32 * v367 + 8) = v370 | 0x80000000;
                uint64_t v371 = *(void *)(a1 + 792);
                *(_DWORD *)(*(void *)(a1 + 800) + 32 * v367 + 8) = *(_DWORD *)(*(void *)(a1 + 800) + 32 * v367 + 8) & 0x80000000 | *(_DWORD *)(v371 + 4 * v364);
                *(void *)(*(void *)(a1 + 800) + 32 * v367) = v363;
                *(void *)(*(void *)(a1 + 800) + 32 * v367 + 16) = v361;
                *(float *)(*(void *)(a1 + 800) + 32 * v367 + 24) = v284;
                *(_DWORD *)(v371 + 4 * v364) = v367;
                ++*(_DWORD *)(a1 + 812);
              }
              else
              {
                uint64_t v366 = *(void *)(a1 + 800);
                while (*(void *)(v366 + 32 * v365 + 16) != v361)
                {
                  uint64_t v365 = *(_DWORD *)(v366 + 32 * v365 + 8) & 0x7FFFFFFF;
                  if (v365 == 0x7FFFFFFF) {
                    goto LABEL_599;
                  }
                }
                *(float *)(v366 + 32 * v365 + 24) = v284;
              }
              ++*(_DWORD *)(a1 + 824);
              goto LABEL_607;
            }
            uint64_t v347 = *(void *)(v285 + 96 * v291 + 72);
            int v348 = *(unsigned __int8 *)(v346 + 25);
            if (*(unsigned char *)(v346 + 25))
            {
              __n128 v319 = *(__n128 *)(v346 + 32);
              __n128 v663 = *(__n128 *)(v346 + 48);
              *(__n128 *)&uint8_t buf[15] = v319;
              *(__n128 *)&buf[31] = v663;
              char v349 = 1;
            }
            else
            {
              char v349 = 0;
            }
            int v350 = *(unsigned __int8 *)(v346 + 64);
            if (*(unsigned char *)(v346 + 64))
            {
              __n128 v319 = *(__n128 *)(v346 + 80);
              __n128 v663 = *(__n128 *)(v346 + 96);
              *(__n128 *)&v687[15] = v319;
              __n128 v688 = v663;
              char v351 = 1;
              if (!v348)
              {
LABEL_574:
                if (v350)
                {
                  __n128 v319 = *(__n128 *)&v687[15];
                  long long v665 = *(_OWORD *)&v687[15];
                  __n128 v666 = v688;
                }
                uint64_t v352 = *((void *)&v696 + 1);
                if (*((void *)&v696 + 1) >= (unint64_t)v696)
                {
                  unint64_t v353 = *((void *)&v696 + 1) + 1;
                  if ((unint64_t)v696 < *((void *)&v696 + 1) + 1)
                  {
                    if (*((void *)&v695 + 1))
                    {
                      unint64_t v354 = 2 * v696;
                      if (!(void)v696) {
                        unint64_t v354 = 8;
                      }
                      if (v354 <= v353) {
                        unint64_t v355 = *((void *)&v696 + 1) + 1;
                      }
                      else {
                        unint64_t v355 = v354;
                      }
                      re::DynamicArray<re::MeshShadowPlaneData>::setCapacity((void *)&v695 + 1, v355);
                    }
                    else
                    {
                      re::DynamicArray<re::MeshShadowPlaneData>::setCapacity((void *)&v695 + 1, v353);
                      ++*(_DWORD *)v697;
                    }
                  }
                  uint64_t v352 = *((void *)&v696 + 1);
                }
                uint64_t v356 = *(void *)&v697[8];
                uint64_t v357 = *(void *)&v697[8] + 112 * v352;
                *(void *)uint64_t v357 = v347;
                *(unsigned char *)(v357 + 16) = v349;
                if (v348)
                {
                  __n128 v319 = *(__n128 *)&v668[7];
                  long long v358 = v669;
                  uint64_t v359 = v356 + 112 * v352;
                  *(_OWORD *)(v359 + 32) = *(_OWORD *)&v668[7];
                  *(_OWORD *)(v359 + 48) = v358;
                }
                *(unsigned char *)(v356 + 112 * v352 + 64) = v351;
                if (v350)
                {
                  uint64_t v360 = v356 + 112 * v352;
                  *(_OWORD *)(v360 + 80) = v665;
                  __n128 v319 = v666;
                  *(__n128 *)(v360 + 96) = v666;
                }
                ++*((void *)&v696 + 1);
                ++*(_DWORD *)v697;
                goto LABEL_594;
              }
            }
            else
            {
              char v351 = 0;
              if (!v348) {
                goto LABEL_574;
              }
            }
            __n128 v319 = *(__n128 *)&buf[15];
            *(_OWORD *)&v668[7] = *(_OWORD *)&buf[15];
            long long v669 = *(_OWORD *)&buf[31];
            goto LABEL_574;
          }
LABEL_622:
          uint64_t v374 = *(unsigned int *)(a1 + 1536);
          if (v374)
          {
            uint64_t v375 = 0;
            v376 = (int *)(*(void *)(a1 + 1520) + 8);
            while (1)
            {
              int v377 = *v376;
              v376 += 6;
              if (v377 < 0) {
                break;
              }
              if (v374 == ++v375)
              {
                LODWORD(v375) = *(_DWORD *)(a1 + 1536);
                break;
              }
            }
          }
          else
          {
            LODWORD(v375) = 0;
          }
          if (v374 != v375)
          {
            uint64_t v427 = v375;
            do
            {
              re::DynamicArray<re::TransitionCondition *>::add(&v689[8], (void *)(*(void *)(a1 + 1520) + 24 * v427 + 16));
              if (*(_DWORD *)(a1 + 1536) <= (v375 + 1)) {
                int v428 = v375 + 1;
              }
              else {
                int v428 = *(_DWORD *)(a1 + 1536);
              }
              int v429 = v375;
              while (1)
              {
                uint64_t v427 = (v429 + 1);
                if (v428 - 1 == v429) {
                  break;
                }
                ++v429;
                LODWORD(v375) = v427;
                if ((*(_DWORD *)(*(void *)(a1 + 1520) + 24 * v427 + 8) & 0x80000000) != 0) {
                  goto LABEL_709;
                }
              }
              LODWORD(v375) = v428;
LABEL_709:
              ;
            }
            while (v374 != v375);
          }
          v430 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)(a1 + 128) + 40))(*(void *)(a1 + 128));
          LODWORD(v672) = 0;
          long long v671 = 0u;
          long long v670 = 0u;
          *(void *)((char *)&v672 + 4) = 0x7FFFFFFFLL;
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v670, *((_DWORD *)v430 + 21) + *(_DWORD *)(a1 + 1292));
          re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::unionSet(v627, (uint64_t)v430 + 56, (uint64_t)&v670);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v430 + 56);
          int v431 = v672;
          if (v672)
          {
            uint64_t v432 = 0;
            v433 = (int *)(v671 + 8);
            while (1)
            {
              int v434 = *v433;
              v433 += 6;
              if (v434 < 0) {
                break;
              }
              if (v672 == ++v432)
              {
                LODWORD(v432) = v672;
                break;
              }
            }
          }
          else
          {
            LODWORD(v432) = 0;
          }
          if (v672 != v432)
          {
            uint64_t v435 = v432;
            uint64_t v436 = v671;
            do
            {
              v437 = (uint64_t *)(v436 + 24 * v435 + 16);
              if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v660, v437))
              {
                if (*v652)
                {
                  uint64_t v438 = *v437;
                  unint64_t v439 = 0xBF58476D1CE4E5B9 * (*v437 ^ ((unint64_t)*v437 >> 30));
                  unint64_t v440 = ((0x94D049BB133111EBLL * (v439 ^ (v439 >> 27))) ^ ((0x94D049BB133111EBLL * (v439 ^ (v439 >> 27))) >> 31))
                       % *(unsigned int *)(a1 + 808);
                  uint64_t v441 = *(void *)(a1 + 792);
                  uint64_t v442 = *(unsigned int *)(v441 + 4 * v440);
                  if (v442 != 0x7FFFFFFF)
                  {
                    uint64_t v443 = *(void *)(a1 + 800);
                    uint64_t v444 = v443 + 32 * v442;
                    if (*(void *)(v444 + 16) == v438)
                    {
                      *(_DWORD *)(v441 + 4 * v440) = *(_DWORD *)(v444 + 8) & 0x7FFFFFFF;
LABEL_726:
                      uint64_t v447 = *(void *)(a1 + 800);
                      uint64_t v448 = v447 + 32 * v442;
                      int v451 = *(_DWORD *)(v448 + 8);
                      v450 = (int *)(v448 + 8);
                      int v449 = v451;
                      if (v451 < 0)
                      {
                        int *v450 = v449 & 0x7FFFFFFF;
                        uint64_t v447 = *(void *)(a1 + 800);
                        int v449 = *(_DWORD *)(v447 + 32 * v442 + 8);
                      }
                      *(_DWORD *)(v447 + 32 * v442 + 8) = *(_DWORD *)(a1 + 820) | v449 & 0x80000000;
                      *(_DWORD *)(a1 + 820) = v442;
                      --*(_DWORD *)(a1 + 812);
                      ++*(_DWORD *)(a1 + 824);
                    }
                    else
                    {
                      while (1)
                      {
                        uint64_t v445 = v442;
                        uint64_t v442 = *(_DWORD *)(v443 + 32 * v442 + 8) & 0x7FFFFFFF;
                        if (v442 == 0x7FFFFFFF) {
                          break;
                        }
                        uint64_t v446 = v443 + 32 * v442;
                        if (*(void *)(v446 + 16) == v438)
                        {
                          *(_DWORD *)(v443 + 32 * v445 + 8) = *(_DWORD *)(v443 + 32 * v445 + 8) & 0x80000000 | *(_DWORD *)(v446 + 8) & 0x7FFFFFFF;
                          goto LABEL_726;
                        }
                      }
                    }
                  }
                }
                re::DynamicArray<re::TransitionCondition *>::add(&v700[16], v437);
              }
              uint64_t v436 = v671;
              if (v672 <= (int)v432 + 1) {
                int v452 = v432 + 1;
              }
              else {
                int v452 = v672;
              }
              while (1)
              {
                uint64_t v435 = (v432 + 1);
                if (v452 - 1 == v432) {
                  break;
                }
                LODWORD(v432) = v432 + 1;
                int v453 = v435;
                if ((*(_DWORD *)(v671 + 24 * v435 + 8) & 0x80000000) != 0) {
                  goto LABEL_737;
                }
              }
              int v453 = v452;
LABEL_737:
              LODWORD(v432) = v453;
            }
            while (v431 != v453);
          }
          uint64_t v454 = *(unsigned int *)(a1 + 1632);
          if (v454)
          {
            uint64_t v455 = 0;
            v456 = (int *)(*(void *)(a1 + 1616) + 8);
            while (1)
            {
              int v457 = *v456;
              v456 += 6;
              if (v457 < 0) {
                break;
              }
              if (v454 == ++v455)
              {
                LODWORD(v455) = *(_DWORD *)(a1 + 1632);
                break;
              }
            }
          }
          else
          {
            LODWORD(v455) = 0;
          }
          if (v454 != v455)
          {
            uint64_t v458 = v455;
            do
            {
              re::DynamicArray<re::TransitionCondition *>::add((void *)&v692 + 1, (void *)(*(void *)(a1 + 1616) + 24 * v458 + 16));
              if (*(_DWORD *)(a1 + 1632) <= (v455 + 1)) {
                int v459 = v455 + 1;
              }
              else {
                int v459 = *(_DWORD *)(a1 + 1632);
              }
              int v460 = v455;
              while (1)
              {
                uint64_t v458 = (v460 + 1);
                if (v459 - 1 == v460) {
                  break;
                }
                ++v460;
                LODWORD(v455) = v458;
                if ((*(_DWORD *)(*(void *)(a1 + 1616) + 24 * v458 + 8) & 0x80000000) != 0) {
                  goto LABEL_754;
                }
              }
              LODWORD(v455) = v459;
LABEL_754:
              ;
            }
            while (v454 != v455);
          }
          uint64_t v461 = *(unsigned int *)(a1 + 1584);
          if (v461)
          {
            uint64_t v462 = 0;
            v463 = (int *)(*(void *)(a1 + 1568) + 8);
            while (1)
            {
              int v464 = *v463;
              v463 += 6;
              if (v464 < 0) {
                break;
              }
              if (v461 == ++v462)
              {
                LODWORD(v462) = *(_DWORD *)(a1 + 1584);
                break;
              }
            }
          }
          else
          {
            LODWORD(v462) = 0;
          }
          if (v461 != v462)
          {
            uint64_t v465 = v462;
            do
            {
              v466 = (uint64_t *)(*(void *)(a1 + 1568) + 24 * v465 + 16);
              if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v646, v466)&& !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v642, v466))
              {
                re::DynamicArray<re::TransitionCondition *>::add(&v691[16], v466);
              }
              if (*(_DWORD *)(a1 + 1584) <= (v462 + 1)) {
                int v467 = v462 + 1;
              }
              else {
                int v467 = *(_DWORD *)(a1 + 1584);
              }
              while (1)
              {
                uint64_t v465 = (v462 + 1);
                if (v467 - 1 == v462) {
                  break;
                }
                LODWORD(v462) = v462 + 1;
                int v468 = v465;
                if ((*(_DWORD *)(*(void *)(a1 + 1568) + 24 * v465 + 8) & 0x80000000) != 0) {
                  goto LABEL_773;
                }
              }
              int v468 = v467;
LABEL_773:
              LODWORD(v462) = v468;
            }
            while (v461 != v468);
          }
          uint64_t v469 = *(unsigned int *)(a1 + 960);
          if (v469)
          {
            uint64_t v274 = 0;
            v470 = (int *)(*(void *)(a1 + 944) + 8);
            while (1)
            {
              int v471 = *v470;
              v470 += 8;
              if (v471 < 0) {
                break;
              }
              if (v469 == ++v274)
              {
                uint64_t v274 = *(unsigned int *)(a1 + 960);
                break;
              }
            }
          }
          else
          {
            uint64_t v274 = 0;
          }
          if (v469 != v274) {
            break;
          }
LABEL_806:
          if (*(unsigned char *)(a1 + 2688))
          {
            uint64_t v486 = *((void *)&v690 + 1);
            uint64_t v274 = *((void *)&v693 + 1);
            uint64_t v487 = *(void *)&v700[32];
            if (*(void *)&v694[32] == *(_DWORD *)(a1 + 1676))
            {
              uint64_t v488 = a1 + 1648;
              if (*(void *)&v694[32])
              {
                uint64_t v489 = 224 * *(void *)&v694[32] - 224;
                v490 = (uint64_t *)(v695 + 192);
                do
                {
                  BOOL v491 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 1648, v490);
                  if (!v491) {
                    break;
                  }
                  uint64_t v492 = v489;
                  v489 -= 224;
                  v490 += 28;
                }
                while (v492);
                int v493 = !v491;
              }
              else
              {
                int v493 = 0;
              }
            }
            else
            {
              int v493 = 1;
              uint64_t v488 = a1 + 1648;
            }
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v488);
            if (*(void *)&v694[32])
            {
              uint64_t v494 = 224 * *(void *)&v694[32];
              v495 = (uint64_t *)(v695 + 192);
              do
              {
                re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v488, v495);
                v495 += 28;
                v494 -= 224;
              }
              while (v494);
            }
            if (*(void *)&v691[32] == *(_DWORD *)(a1 + 1724))
            {
              if (*(void *)&v691[32])
              {
                v496 = (uint64_t *)v692;
                uint64_t v497 = 8 * *(void *)&v691[32] - 8;
                do
                {
                  BOOL v498 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v623, v496);
                  if (!v498) {
                    break;
                  }
                  ++v496;
                  uint64_t v499 = v497;
                  v497 -= 8;
                }
                while (v499);
                int v500 = !v498;
              }
              else
              {
                int v500 = 0;
              }
            }
            else
            {
              int v500 = 1;
            }
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v623);
            if (*(void *)&v691[32])
            {
              v502 = (uint64_t *)v692;
              uint64_t v503 = 8 * *(void *)&v691[32];
              do
              {
                v501 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v623, v502++);
                v503 -= 8;
              }
              while (v503);
            }
            if (v487) {
              int v504 = 1;
            }
            else {
              int v504 = v493;
            }
            if (v486) {
              int v504 = 1;
            }
            if (((v504 | v500) & 1) != 0 || v274)
            {
              v505 = *re::shadowLogObjects(v501);
              BOOL v506 = os_log_type_enabled(v505, OS_LOG_TYPE_DEFAULT);
              if (v506)
              {
                uint64_t v507 = *(void *)(a1 + 2672);
                *(_DWORD *)buf = 134217984;
                *(void *)&buf[4] = v507;
                _os_log_impl(&dword_233120000, v505, OS_LOG_TYPE_DEFAULT, "MeshShadowSystem: ============= Updating Shadow %llu =============", buf, 0xCu);
              }
              if (v493)
              {
                uint64_t v508 = *(void *)(a1 + 2704);
                if (v508)
                {
                  *(void *)(a1 + 2704) = 1;
                  v509 = *(unsigned char **)(a1 + 2712);
                }
                else
                {
                  *(unsigned char *)(a1 + 2704) = v508 & 1;
                  v509 = (unsigned char *)(a1 + 2705);
                }
                unsigned char *v509 = 0;
                v510 = (re *)re::DynamicString::appendf(v624, "MeshShadowSystem: upserting %zu clusters", *(size_t *)&v694[32]);
                if (*(void *)&v694[32])
                {
                  uint64_t v511 = 224 * *(void *)&v694[32];
                  v512 = (uint64_t *)(v695 + 192);
                  do
                  {
                    uint64_t v513 = *v512;
                    v512 += 28;
                    v510 = (re *)re::DynamicString::appendf(v624, " %llu", v513);
                    v511 -= 224;
                  }
                  while (v511);
                }
                v514 = *re::shadowLogObjects(v510);
                BOOL v506 = os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT);
                if (v506)
                {
                  uint64_t v515 = a1 + 2705;
                  if (*(unsigned char *)(a1 + 2704)) {
                    uint64_t v515 = *(void *)(a1 + 2712);
                  }
                  *(_DWORD *)buf = 136315138;
                  *(void *)&buf[4] = v515;
                  _os_log_impl(&dword_233120000, v514, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                }
              }
              if (v487)
              {
                uint64_t v516 = *(void *)(a1 + 2704);
                if (v516)
                {
                  *(void *)(a1 + 2704) = 1;
                  v517 = *(unsigned char **)(a1 + 2712);
                }
                else
                {
                  *(unsigned char *)(a1 + 2704) = v516 & 1;
                  v517 = (unsigned char *)(a1 + 2705);
                }
                unsigned char *v517 = 0;
                v518 = (re *)re::DynamicString::appendf(v624, "MeshShadowSystem: removing %zu clusters", *(size_t *)&v700[32]);
                if (*(void *)&v700[32])
                {
                  v519 = *(uint64_t **)&v700[48];
                  uint64_t v520 = 8 * *(void *)&v700[32];
                  do
                  {
                    uint64_t v521 = *v519++;
                    v518 = (re *)re::DynamicString::appendf(v624, " %llu", v521);
                    v520 -= 8;
                  }
                  while (v520);
                }
                v522 = *re::shadowLogObjects(v518);
                BOOL v506 = os_log_type_enabled(v522, OS_LOG_TYPE_DEFAULT);
                if (v506)
                {
                  uint64_t v523 = a1 + 2705;
                  if (*(unsigned char *)(a1 + 2704)) {
                    uint64_t v523 = *(void *)(a1 + 2712);
                  }
                  *(_DWORD *)buf = 136315138;
                  *(void *)&buf[4] = v523;
                  _os_log_impl(&dword_233120000, v522, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                }
              }
              if (v486)
              {
                uint64_t v524 = *(void *)(a1 + 2704);
                if (v524)
                {
                  *(void *)(a1 + 2704) = 1;
                  v525 = *(unsigned char **)(a1 + 2712);
                }
                else
                {
                  *(unsigned char *)(a1 + 2704) = v524 & 1;
                  v525 = (unsigned char *)(a1 + 2705);
                }
                unsigned char *v525 = 0;
                v526 = (re *)re::DynamicString::appendf(v624, "MeshShadowSystem: adding %zu receivers", *((size_t *)&v690 + 1));
                if (*((void *)&v690 + 1))
                {
                  v527 = *(uint64_t **)&v691[8];
                  uint64_t v528 = 8 * *((void *)&v690 + 1);
                  do
                  {
                    uint64_t v529 = *v527++;
                    v526 = (re *)re::DynamicString::appendf(v624, " %llu", v529);
                    v528 -= 8;
                  }
                  while (v528);
                }
                v530 = *re::shadowLogObjects(v526);
                BOOL v506 = os_log_type_enabled(v530, OS_LOG_TYPE_DEFAULT);
                if (v506)
                {
                  uint64_t v531 = a1 + 2705;
                  if (*(unsigned char *)(a1 + 2704)) {
                    uint64_t v531 = *(void *)(a1 + 2712);
                  }
                  *(_DWORD *)buf = 136315138;
                  *(void *)&buf[4] = v531;
                  _os_log_impl(&dword_233120000, v530, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                }
              }
              if (v500)
              {
                uint64_t v532 = *(void *)(a1 + 2704);
                if (v532)
                {
                  *(void *)(a1 + 2704) = 1;
                  v534 = (re::DynamicString *)(a1 + 2696);
                  v533 = *(unsigned char **)(a1 + 2712);
                }
                else
                {
                  *(unsigned char *)(a1 + 2704) = v532 & 1;
                  v533 = (unsigned char *)(a1 + 2705);
                  v534 = (re::DynamicString *)(a1 + 2696);
                }
                unsigned char *v533 = 0;
                v535 = (re *)re::DynamicString::appendf(v534, "MeshShadowSystem: updating %zu receivers", *(size_t *)&v691[32]);
                if (*(void *)&v691[32])
                {
                  v536 = (uint64_t *)v692;
                  uint64_t v537 = 8 * *(void *)&v691[32];
                  do
                  {
                    uint64_t v538 = *v536++;
                    v535 = (re *)re::DynamicString::appendf(v534, " %llu", v538);
                    v537 -= 8;
                  }
                  while (v537);
                }
                v539 = *re::shadowLogObjects(v535);
                BOOL v506 = os_log_type_enabled(v539, OS_LOG_TYPE_DEFAULT);
                if (v506)
                {
                  uint64_t v540 = a1 + 2705;
                  if (*(unsigned char *)(a1 + 2704)) {
                    uint64_t v540 = *(void *)(a1 + 2712);
                  }
                  *(_DWORD *)buf = 136315138;
                  *(void *)&buf[4] = v540;
                  _os_log_impl(&dword_233120000, v539, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                }
              }
              if (v274)
              {
                uint64_t v541 = *(void *)(a1 + 2704);
                if (v541)
                {
                  *(void *)(a1 + 2704) = 1;
                  uint64_t v274 = a1 + 2696;
                  v542 = *(unsigned char **)(a1 + 2712);
                }
                else
                {
                  *(unsigned char *)(a1 + 2704) = v541 & 1;
                  v542 = (unsigned char *)(a1 + 2705);
                  uint64_t v274 = a1 + 2696;
                }
                unsigned char *v542 = 0;
                v543 = (re *)re::DynamicString::appendf((re::DynamicString *)v274, "MeshShadowSystem: removing %zu receivers", *((size_t *)&v693 + 1));
                if (*((void *)&v693 + 1))
                {
                  v544 = *(uint64_t **)&v694[8];
                  uint64_t v545 = 8 * *((void *)&v693 + 1);
                  do
                  {
                    uint64_t v546 = *v544++;
                    v543 = (re *)re::DynamicString::appendf((re::DynamicString *)v274, " %llu", v546);
                    v545 -= 8;
                  }
                  while (v545);
                }
                v547 = *re::shadowLogObjects(v543);
                BOOL v506 = os_log_type_enabled(v547, OS_LOG_TYPE_DEFAULT);
                if (v506)
                {
                  uint64_t v548 = a1 + 2705;
                  if (*(unsigned char *)(a1 + 2704)) {
                    uint64_t v548 = *(void *)(a1 + 2712);
                  }
                  *(_DWORD *)buf = 136315138;
                  *(void *)&buf[4] = v548;
                  _os_log_impl(&dword_233120000, v547, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                }
              }
              v549 = *re::shadowLogObjects((re *)v506);
              if (os_log_type_enabled(v549, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v550 = *(void *)(a1 + 2672);
                *(_DWORD *)buf = 134217984;
                *(void *)&buf[4] = v550;
                _os_log_impl(&dword_233120000, v549, OS_LOG_TYPE_DEFAULT, "MeshShadowSystem: ============== End of Update %llu ==============", buf, 0xCu);
              }
            }
          }
          int v551 = v689[0];
          if (v689[0] || *(unsigned char *)(a1 + 1744))
          {
            uint64_t v268 = v625;
            v269 = (re::AssetHandle *)((char *)&v695 + 8);
            if (!v689[0] || *(unsigned char *)(a1 + 1744))
            {
              if (!v689[0] && *(unsigned char *)(a1 + 1744))
              {
                int v551 = 1;
                v689[0] = 1;
              }
              v689[1] = *(unsigned char *)(a1 + 1745);
            }
            else
            {
              int v551 = 0;
              v689[0] = 0;
            }
          }
          else
          {
            int v551 = 0;
            uint64_t v268 = v625;
            v269 = (re::AssetHandle *)((char *)&v695 + 8);
          }
          long long v552 = *(_OWORD *)(a1 + 2640);
          long long v717 = *(_OWORD *)(a1 + 2624);
          *(_OWORD *)v718 = v552;
          *(_OWORD *)&v718[12] = *(_OWORD *)(a1 + 2652);
          long long v553 = *(_OWORD *)(a1 + 2576);
          long long v713 = *(_OWORD *)(a1 + 2560);
          long long v714 = v553;
          long long v554 = *(_OWORD *)(a1 + 2608);
          long long v715 = *(_OWORD *)(a1 + 2592);
          long long v716 = v554;
          long long v555 = *(_OWORD *)(a1 + 2512);
          *(_OWORD *)v711 = *(_OWORD *)(a1 + 2496);
          *(_OWORD *)&v711[16] = v555;
          long long v556 = *(_OWORD *)(a1 + 2544);
          *(_OWORD *)&v711[32] = *(_OWORD *)(a1 + 2528);
          long long v712 = v556;
          long long v557 = *(_OWORD *)(a1 + 2448);
          *(_OWORD *)v708 = *v626;
          *(_OWORD *)&v708[16] = v557;
          long long v558 = *(_OWORD *)(a1 + 2480);
          long long v709 = *(_OWORD *)(a1 + 2464);
          long long v710 = v558;
          if (*(unsigned char *)(a1 + 2416))
          {
            v559 = (uint8_t *)(a1 + 1760);
            if (*v638 | v551)
            {
              if (v551 || !*v638)
              {
                if (v551 && !*v638) {
                  *(unsigned char *)(a1 + 1760) = 1;
                }
                *(unsigned char *)(a1 + 1761) = v689[1];
                v559 = (uint8_t *)(a1 + 1760);
              }
              else
              {
                v559 = (uint8_t *)(a1 + 1760);
                uint8_t *v638 = 0;
              }
            }
            re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v637, (uint64_t)&v689[8]);
            re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v636, (uint64_t)&v691[16]);
            re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v635, (uint64_t)&v692 + 8);
            if (v559 == v689)
            {
              re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v634, (uint64_t)&v697[16]);
              re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v633, (uint64_t)&v698 + 8);
              re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v632, (uint64_t)&v700[16]);
            }
            else
            {
              uint64_t v561 = *(void *)(a1 + 1888);
              if (v561 && *(void *)&v694[16] && v561 != *(void *)&v694[16])
              {
                re::internal::assertLog((re::internal *)4, v560, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
                _os_crash();
                __break(1u);
LABEL_1026:
                re::internal::assertLog((re::internal *)4, v560, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
                _os_crash();
                __break(1u);
LABEL_1027:
                re::internal::assertLog((re::internal *)4, v568, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
                _os_crash();
                __break(1u);
                goto LABEL_1028;
              }
              *(void *)(a1 + 1888) = *(void *)&v694[16];
              *(void *)&v694[16] = v561;
              uint64_t v562 = *(void *)(a1 + 1920);
              uint64_t v563 = *((void *)&v695 + 1);
              *(void *)(a1 + 1920) = v695;
              long long v564 = *v622;
              long long *v622 = *(_OWORD *)&v694[24];
              *(_OWORD *)&v694[24] = v564;
              *(void *)&long long v695 = v562;
              ++*(_DWORD *)&v694[40];
              ++*(_DWORD *)(a1 + 1912);
              uint64_t v565 = *(void *)(a1 + 1928);
              if (v565 && v563 && v565 != v563) {
                goto LABEL_1026;
              }
              *(void *)(a1 + 1928) = v563;
              *((void *)&v695 + 1) = v565;
              long long v566 = *(_OWORD *)(a1 + 1936);
              *(_OWORD *)(a1 + 1936) = v696;
              long long v696 = v566;
              uint64_t v567 = *(void *)(a1 + 1960);
              *(void *)(a1 + 1960) = *(void *)&v697[8];
              *(void *)&v697[8] = v567;
              ++*(_DWORD *)v697;
              ++*(_DWORD *)(a1 + 1952);
              re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v634, (uint64_t)&v697[16]);
              re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v633, (uint64_t)&v698 + 8);
              re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v632, (uint64_t)&v700[16]);
              uint64_t v569 = *(void *)(a1 + 2088);
              if (v569 && *(void *)&v700[56] && v569 != *(void *)&v700[56]) {
                goto LABEL_1027;
              }
              *(void *)(a1 + 2088) = *(void *)&v700[56];
              *(void *)&v700[56] = v569;
              long long v570 = *(_OWORD *)(a1 + 2096);
              *(_OWORD *)(a1 + 2096) = v701;
              long long v701 = v570;
              v571 = *(void **)(a1 + 2120);
              *(void *)(a1 + 2120) = __dst;
              __dst = v571;
              ++v702;
              ++*(_DWORD *)(a1 + 2112);
            }
            re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v631, (uint64_t *)&v704);
            long long v572 = *(_OWORD *)v718;
            *(_OWORD *)(a1 + 2368) = v717;
            *(_OWORD *)(a1 + 2384) = v572;
            *(_OWORD *)(a1 + 2396) = *(_OWORD *)&v718[12];
            long long v573 = v714;
            *(_OWORD *)(a1 + 2304) = v713;
            *(_OWORD *)(a1 + 2320) = v573;
            long long v574 = v716;
            *(_OWORD *)(a1 + 2336) = v715;
            *(_OWORD *)(a1 + 2352) = v574;
            long long v575 = *(_OWORD *)&v711[16];
            *(_OWORD *)(a1 + 2240) = *(_OWORD *)v711;
            *(_OWORD *)(a1 + 22re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v575;
            long long v576 = v712;
            *(_OWORD *)(a1 + 2272) = *(_OWORD *)&v711[32];
            *(_OWORD *)(a1 + 2288) = v576;
            long long v577 = *(_OWORD *)&v708[16];
            _OWORD *v630 = *(_OWORD *)v708;
            *(_OWORD *)(a1 + 2192) = v577;
            long long v578 = v710;
            *(_OWORD *)(a1 + 2208) = v709;
            *(_OWORD *)(a1 + 2224) = v578;
          }
          else
          {
            re::MeshShadowPerFrameUpdateData::MeshShadowPerFrameUpdateData((uint64_t)v638, v689);
            *(unsigned char *)(a1 + 2416) = 1;
          }
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v629);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v628);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1 + 1216);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v627);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v646);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1 + 1552);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v642);
          if (*(unsigned char *)(a1 + 1744)) {
            *(unsigned char *)(a1 + 1744) = 0;
          }
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v670);
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v660);
          v579.n128_f64[0] = re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v704);
          if (*(void *)&v700[56])
          {
            if (__dst) {
              (*(void (**)(double))(**(void **)&v700[56] + 40))(v579.n128_f64[0]);
            }
            __dst = 0;
            long long v701 = 0uLL;
            *(void *)&v700[56] = 0;
            ++v702;
          }
          if (*(void *)&v700[16])
          {
            if (*(void *)&v700[48]) {
              (*(void (**)(__n128))(**(void **)&v700[16] + 40))(v579);
            }
            *(void *)&v700[48] = 0;
            memset(&v700[16], 0, 24);
            ++*(_DWORD *)&v700[40];
          }
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit((uint64_t)&v698 + 8);
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit((uint64_t)&v697[16]);
          if (*((void *)&v695 + 1))
          {
            if (*(void *)&v697[8]) {
              (*(void (**)(void))(**((void **)&v695 + 1) + 40))();
            }
            *(void *)&v697[8] = 0;
            long long v696 = 0uLL;
            *((void *)&v695 + 1) = 0;
            ++*(_DWORD *)v697;
          }
          re::DynamicArray<re::MeshShadowCluster>::deinit((uint64_t)&v694[16]);
          if (*((void *)&v692 + 1))
          {
            uint64_t v266 = *(void *)&v694[8];
            if (*(void *)&v694[8]) {
              (*(void (**)(void))(**((void **)&v692 + 1) + 40))();
            }
            *(void *)&v694[8] = 0;
            long long v693 = 0uLL;
            *((void *)&v692 + 1) = 0;
            ++*(_DWORD *)v694;
          }
          if (*(void *)&v691[16])
          {
            uint64_t v266 = v692;
            if ((void)v692) {
              (*(void (**)(void))(**(void **)&v691[16] + 40))();
            }
            *(void *)&long long v692 = 0;
            memset(&v691[16], 0, 24);
            ++*(_DWORD *)&v691[40];
          }
          if (*(void *)&v689[8])
          {
            uint64_t v266 = *(void *)&v691[8];
            if (*(void *)&v691[8]) {
              (*(void (**)(void))(**(void **)&v689[8] + 40))();
            }
          }
LABEL_491:
          uint64_t v275 = *(void *)(a1 + 112);
          if (!v275)
          {
            re::internal::assertLog((re::internal *)4, v266, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "sendMeshShadowPerFrameUpdateData", 1153);
            _os_crash();
            __break(1u);
LABEL_998:
            re::internal::assertLog((re::internal *)4, v266, "assertion failure: '%s' (%s:line %i) MeshShadowSystem: Cached mesh shadow doesn't exist", "m_cachedMeshShadowPerFrameUpdateData.has_value()", "sendMeshShadowPerFrameUpdateData", 1158);
            _os_crash();
            __break(1u);
LABEL_999:
            *(void *)&v660[0] = 0;
            long long v674 = 0u;
            float32x4_t v673 = 0u;
            long long v672 = 0u;
            long long v671 = 0u;
            long long v670 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = "operator[]";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 858;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v274;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v269;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1000:
            re::internal::assertLog((re::internal *)4, v420, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
            _os_crash();
            __break(1u);
LABEL_1001:
            unint64_t v603 = v425 >> 2;
            *(void *)&v660[0] = 0;
            long long v674 = 0u;
            float32x4_t v673 = 0u;
            long long v672 = 0u;
            long long v671 = 0u;
            long long v670 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = "operator[]";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 858;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v603;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v269;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_1002;
          }
          uint64_t v276 = *(void *)(v275 + 104);
          if (v276) {
            uint64_t v277 = re::RenderFrameBox::get(v276 + 344, 0xFFFFFFFFFFFFFFFuLL);
          }
          else {
            uint64_t v277 = 0;
          }
          if (!*(unsigned char *)(a1 + 2416)) {
            goto LABEL_998;
          }
          v689[0] = *v638;
          if (v689[0]) {
            v689[1] = *(unsigned char *)(a1 + 1761);
          }
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v689[8], v637);
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v691[16], v636);
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v692 + 8, v635);
          *(void *)&long long v695 = 0;
          memset(&v694[16], 0, 28);
          if (*(void *)(a1 + 1888))
          {
            unint64_t v378 = *(void *)(a1 + 1904);
            *(void *)&v694[16] = *(void *)(a1 + 1888);
            re::DynamicArray<re::MeshShadowCluster>::setCapacity(&v694[16], v378);
            ++*(_DWORD *)&v694[40];
            unint64_t v379 = *(void *)(a1 + 1904);
            if (v379 >= *(void *)&v694[32])
            {
              re::DynamicArray<re::MeshShadowCluster>::setCapacity(&v694[16], *(void *)(a1 + 1904));
              std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshShadowCluster *,re::MeshShadowCluster *,re::MeshShadowCluster *,0>(*(void *)(a1 + 1920), *(void *)(a1 + 1920) + 224 * *(void *)&v694[32], v695);
              if (*(void *)&v694[32] != v379)
              {
                uint64_t v382 = *(void *)(a1 + 1920) + 224 * *(void *)&v694[32];
                uint64_t v383 = v695 + 224 * *(void *)&v694[32];
                uint64_t v384 = -224 * *(void *)&v694[32] + 224 * v379;
                do
                {
                  v385 = (_OWORD *)re::DynamicArray<re::MeshShadowCasterInfo>::DynamicArray(v383, (uint64_t *)v382);
                  long long v386 = *(_OWORD *)(v382 + 48);
                  long long v387 = *(_OWORD *)(v382 + 80);
                  v385[4] = *(_OWORD *)(v382 + 64);
                  v385[5] = v387;
                  v385[3] = v386;
                  long long v388 = *(_OWORD *)(v382 + 96);
                  long long v389 = *(_OWORD *)(v382 + 112);
                  long long v390 = *(_OWORD *)(v382 + 144);
                  v385[8] = *(_OWORD *)(v382 + 128);
                  v385[9] = v390;
                  v385[6] = v388;
                  v385[7] = v389;
                  long long v391 = *(_OWORD *)(v382 + 160);
                  long long v392 = *(_OWORD *)(v382 + 176);
                  long long v393 = *(_OWORD *)(v382 + 208);
                  v385[12] = *(_OWORD *)(v382 + 192);
                  v385[13] = v393;
                  v385[10] = v391;
                  v385[11] = v392;
                  v382 += 224;
                  uint64_t v383 = (uint64_t)(v385 + 14);
                  v384 -= 224;
                }
                while (v384);
              }
            }
            else
            {
              std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshShadowCluster *,re::MeshShadowCluster *,re::MeshShadowCluster *,0>(*(void *)(a1 + 1920), *(void *)(a1 + 1920) + 224 * v379, v695);
              if (v379 != *(void *)&v694[32])
              {
                uint64_t v380 = v695 + 224 * v379;
                uint64_t v381 = -224 * v379 + 224 * *(void *)&v694[32];
                do
                {
                  re::DynamicArray<unsigned long>::deinit(v380);
                  v380 += 224;
                  v381 -= 224;
                }
                while (v381);
              }
            }
            *(void *)&v694[32] = v379;
          }
          *(void *)&v697[8] = 0;
          long long v696 = 0uLL;
          *((void *)&v695 + 1) = 0;
          *(_DWORD *)v697 = 0;
          if (*(void *)(a1 + 1928))
          {
            unint64_t v394 = *(void *)(a1 + 1944);
            *((void *)&v695 + 1) = *(void *)(a1 + 1928);
            re::DynamicArray<re::MeshShadowPlaneData>::setCapacity((void *)&v695 + 1, v394);
            ++*(_DWORD *)v697;
            unint64_t v395 = *(void *)(a1 + 1944);
            if (v395 >= *((void *)&v696 + 1))
            {
              re::DynamicArray<re::MeshShadowPlaneData>::setCapacity((void *)&v695 + 1, *(void *)(a1 + 1944));
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshShadowPlaneData *,re::MeshShadowPlaneData *,re::MeshShadowPlaneData *>(*(_OWORD **)(a1 + 1960), (_OWORD *)(*(void *)(a1 + 1960) + 112 * *((void *)&v696 + 1)), *(uint64_t *)&v697[8]);
              if (*((void *)&v696 + 1) != v395)
              {
                uint64_t v396 = *(void *)(a1 + 1960);
                uint64_t v397 = v396 + 112 * v395;
                uint64_t v398 = v396 + 112 * *((void *)&v696 + 1);
                uint64_t v399 = *(void *)&v697[8] + 112 * *((void *)&v696 + 1);
                do
                {
                  *(void *)uint64_t v399 = *(void *)v398;
                  int v400 = *(unsigned __int8 *)(v398 + 16);
                  *(unsigned char *)(v399 + 16) = v400;
                  if (v400)
                  {
                    long long v401 = *(_OWORD *)(v398 + 48);
                    *(_OWORD *)(v399 + 32) = *(_OWORD *)(v398 + 32);
                    *(_OWORD *)(v399 + 48) = v401;
                  }
                  int v402 = *(unsigned __int8 *)(v398 + 64);
                  *(unsigned char *)(v399 + 64) = v402;
                  if (v402)
                  {
                    long long v403 = *(_OWORD *)(v398 + 96);
                    *(_OWORD *)(v399 + 80) = *(_OWORD *)(v398 + 80);
                    *(_OWORD *)(v399 + 96) = v403;
                  }
                  v398 += 112;
                  v399 += 112;
                }
                while (v398 != v397);
              }
            }
            else
            {
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshShadowPlaneData *,re::MeshShadowPlaneData *,re::MeshShadowPlaneData *>(*(_OWORD **)(a1 + 1960), (_OWORD *)(*(void *)(a1 + 1960) + 112 * v395), *(uint64_t *)&v697[8]);
            }
            *((void *)&v696 + 1) = v395;
          }
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::DynamicArray((uint64_t)&v697[16], v634);
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::DynamicArray((uint64_t)&v698 + 8, v633);
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v700[16], v632);
          __dst = 0;
          long long v701 = 0uLL;
          *(void *)&v700[56] = 0;
          int v702 = 0;
          if (*(void *)(a1 + 2088))
          {
            unint64_t v404 = *(void *)(a1 + 2104);
            *(void *)&v700[56] = *(void *)(a1 + 2088);
            re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v700[56], v404);
            ++v702;
            unint64_t v405 = *(void *)(a1 + 2104);
            if (v405 >= *((void *)&v701 + 1))
            {
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v700[56], *(void *)(a1 + 2104));
              uint64_t v406 = *((void *)&v701 + 1);
              if (*((void *)&v701 + 1))
              {
                memmove(__dst, *(const void **)(a1 + 2120), 16 * *((void *)&v701 + 1));
                uint64_t v406 = *((void *)&v701 + 1);
              }
              memcpy((char *)__dst + 16 * v406, (const void *)(*(void *)(a1 + 2120) + 16 * v406), 16 * v405 - 16 * v406);
            }
            else if (v405)
            {
              memmove(__dst, *(const void **)(a1 + 2120), 16 * v405);
            }
            *((void *)&v701 + 1) = v405;
          }
          re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable((uint64_t)&v704, v631);
          long long v407 = *(_OWORD *)(a1 + 2384);
          long long v717 = *(_OWORD *)(a1 + 2368);
          *(_OWORD *)v718 = v407;
          *(_OWORD *)&v718[16] = *(_OWORD *)(a1 + 2400);
          long long v408 = *(_OWORD *)(a1 + 2320);
          long long v713 = *(_OWORD *)(a1 + 2304);
          long long v714 = v408;
          long long v409 = *(_OWORD *)(a1 + 2352);
          long long v715 = *(_OWORD *)(a1 + 2336);
          long long v716 = v409;
          long long v410 = *(_OWORD *)(a1 + 2256);
          *(_OWORD *)v711 = *(_OWORD *)(a1 + 2240);
          *(_OWORD *)&v711[16] = v410;
          long long v411 = *(_OWORD *)(a1 + 2288);
          *(_OWORD *)&v711[32] = *(_OWORD *)(a1 + 2272);
          long long v712 = v411;
          long long v412 = *(_OWORD *)(a1 + 2192);
          *(_OWORD *)v708 = *v630;
          *(_OWORD *)&v708[16] = v412;
          long long v413 = *(_OWORD *)(a1 + 2224);
          long long v709 = *(_OWORD *)(a1 + 2208);
          long long v710 = v413;
          (*(void (**)(void))(**(void **)(v277 + 320) + 368))();
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(*v643, 0, (re::DynamicString **)v277, v656);
          *(void *)v687 = v656[0] >> 1;
          uint64_t v414 = re::RenderFrameData::stream((re::RenderFrameData *)(v277 + 264), (const re::WeakStringID *)v687);
          v415 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v414, (uint64_t *)v660);
          if (!v415)
          {
            uint64_t v416 = *(void *)(*(void *)(v414 + 48) + 8);
            uint64_t v417 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v416 + 32))(v416, 56, 8);
            *(void *)uint64_t v417 = 0;
            *(void *)(v417 + 8) = 0;
            *(_DWORD *)(v417 + 16) = 1;
            *(void *)(v417 + 32) = 0;
            *(void *)(v417 + 40) = 0;
            *(void *)(v417 + 24) = 0;
            *(_DWORD *)(v417 + 48) = 0;
            v418 = (re *)re::BucketArray<re::MeshShadowReceiverWorld,4ul>::init(v417, v416, 1uLL);
            *((void *)&v670 + 1) = v417;
            *(void *)&long long v670 = std::__any_imp::_SmallHandler<re::BucketArray<re::MeshShadowReceiverWorld,4ul> *>::__handle[abi:nn180100];
            v673.i64[1] = re::globalAllocators(v418)[2];
            *(void *)&long long v674 = 0;
            v415 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v414, (uint64_t *)v660, (re *)&v670);
            if ((void)v674)
            {
              *(void *)buf = &v670;
              (*(void (**)(void, uint8_t *))(*(void *)v674 + 16))(v674, buf);
            }
            re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v672);
            if ((void)v670) {
              ((void (*)(void, long long *, void, void, void))v670)(0, &v670, 0, 0, 0);
            }
          }
          uint64_t v421 = (uint64_t)*v419;
          unint64_t v422 = (*v419)[5];
          v269 = (re::AssetHandle *)(*v419)[1];
          if (v422 + 1 > 4 * (uint64_t)v269)
          {
            re::BucketArray<re::MeshShadowReceiverWorld,4ul>::setBucketsCapacity(*v419, (v422 + 4) >> 2);
            v269 = *(re::AssetHandle **)(v421 + 8);
          }
          uint64_t v274 = v422 >> 2;
          if ((unint64_t)v269 <= v422 >> 2) {
            goto LABEL_999;
          }
          if (*(unsigned char *)(v421 + 16)) {
            uint64_t v423 = v421 + 24;
          }
          else {
            uint64_t v423 = *(void *)(v421 + 32);
          }
          uint64_t v424 = *(void *)(v423 + 8 * v274);
          unint64_t v425 = *(void *)(v421 + 40);
          *(void *)(v421 + 40) = v425 + 1;
          ++*(_DWORD *)(v421 + 48);
          *(unsigned char *)(v424 + (v422 & 3)) = 0;
          if (v425 == -1) {
            goto LABEL_1000;
          }
          if ((unint64_t)v269 <= v425 >> 2) {
            goto LABEL_1001;
          }
          re::StringID::destroyString((re::StringID *)v656);
          v426.n128_f64[0] = re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v704);
          v269 = (re::AssetHandle *)((char *)&v695 + 8);
          uint64_t v274 = 96;
          if (*(void *)&v700[56])
          {
            if (__dst) {
              (*(void (**)(double))(**(void **)&v700[56] + 40))(v426.n128_f64[0]);
            }
            __dst = 0;
            long long v701 = 0uLL;
            *(void *)&v700[56] = 0;
            ++v702;
          }
          if (*(void *)&v700[16])
          {
            if (*(void *)&v700[48]) {
              (*(void (**)(__n128))(**(void **)&v700[16] + 40))(v426);
            }
            *(void *)&v700[48] = 0;
            memset(&v700[16], 0, 24);
            ++*(_DWORD *)&v700[40];
          }
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit((uint64_t)&v698 + 8);
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit((uint64_t)&v697[16]);
          if (*((void *)&v695 + 1))
          {
            if (*(void *)&v697[8]) {
              (*(void (**)(void))(**((void **)&v695 + 1) + 40))();
            }
            *(void *)&v697[8] = 0;
            long long v696 = 0uLL;
            *((void *)&v695 + 1) = 0;
            ++*(_DWORD *)v697;
          }
          re::DynamicArray<re::MeshShadowCluster>::deinit((uint64_t)&v694[16]);
          if (*((void *)&v692 + 1))
          {
            uint64_t v266 = *(void *)&v694[8];
            if (*(void *)&v694[8]) {
              (*(void (**)(void))(**((void **)&v692 + 1) + 40))();
            }
            *(void *)&v694[8] = 0;
            long long v693 = 0uLL;
            *((void *)&v692 + 1) = 0;
            ++*(_DWORD *)v694;
          }
          if (*(void *)&v691[16])
          {
            uint64_t v266 = v692;
            if ((void)v692) {
              (*(void (**)(void))(**(void **)&v691[16] + 40))();
            }
            *(void *)&long long v692 = 0;
            memset(&v691[16], 0, 24);
            ++*(_DWORD *)&v691[40];
          }
          v265 = *(_anonymous_namespace_ **)&v689[8];
          if (*(void *)&v689[8])
          {
            uint64_t v266 = *(void *)&v691[8];
            if (*(void *)&v691[8]) {
              v265 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v689[8] + 40))();
            }
          }
          if (++v643 == (re::ecs2::RenderingSubsystem **)v268) {
            goto LABEL_953;
          }
        }
        uint64_t v472 = v274;
        while (1)
        {
          uint64_t v473 = *(void *)(a1 + 944) + 32 * v472;
          v474 = (void *)(v473 + 24);
          if (re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)&v704, (uint64_t *)(v473 + 24)))
          {
            goto LABEL_791;
          }
          memset(buf, 0, sizeof(buf));
          *(_DWORD *)&buf[36] = 0x7FFFFFFF;
          unint64_t v475 = 0xBF58476D1CE4E5B9 * (*v474 ^ (*v474 >> 30));
          unint64_t v476 = (0x94D049BB133111EBLL * (v475 ^ (v475 >> 27))) ^ ((0x94D049BB133111EBLL * (v475 ^ (v475 >> 27))) >> 31);
          if ((void)v704)
          {
            unint64_t v477 = v476 % DWORD2(v705);
            uint64_t v478 = *(unsigned int *)(*((void *)&v704 + 1) + 4 * v477);
            if (v478 != 0x7FFFFFFF)
            {
              while (*(void *)(v705 + 72 * v478 + 16) != *v474)
              {
                LODWORD(v478) = *(_DWORD *)(v705 + 72 * v478 + 8) & 0x7FFFFFFF;
                if (v478 == 0x7FFFFFFF) {
                  goto LABEL_789;
                }
              }
              goto LABEL_790;
            }
          }
          else
          {
            LODWORD(v477) = 0;
          }
LABEL_789:
          re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v704, v477, v476, (void *)(v473 + 24), (uint64_t *)buf);
          ++HIDWORD(v707);
LABEL_790:
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)buf);
LABEL_791:
          if ((void)v704)
          {
            unint64_t v479 = 0xBF58476D1CE4E5B9 * (*v474 ^ (*v474 >> 30));
            unint64_t v480 = ((0x94D049BB133111EBLL * (v479 ^ (v479 >> 27))) ^ ((0x94D049BB133111EBLL * (v479 ^ (v479 >> 27))) >> 31))
                 % DWORD2(v705);
            uint64_t v481 = v705;
            uint64_t v482 = *(unsigned int *)(*((void *)&v704 + 1) + 4 * v480);
            if (v482 != 0x7FFFFFFF)
            {
              while (*(void *)(v705 + 72 * v482 + 16) != *v474)
              {
                uint64_t v482 = *(_DWORD *)(v705 + 72 * v482 + 8) & 0x7FFFFFFF;
                if (v482 == 0x7FFFFFFF) {
                  goto LABEL_797;
                }
              }
              goto LABEL_798;
            }
          }
          else
          {
            uint64_t v481 = v705;
          }
LABEL_797:
          LODWORD(v482) = 0x7FFFFFFF;
LABEL_798:
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v481 + 72 * v482 + 24, (uint64_t *)(v473 + 16));
          unsigned int v483 = *(_DWORD *)(a1 + 960);
          if (v483 <= (int)v274 + 1) {
            uint64_t v484 = (v274 + 1);
          }
          else {
            uint64_t v484 = v483;
          }
          while (1)
          {
            uint64_t v472 = (v274 + 1);
            if (v484 - 1 == v274) {
              break;
            }
            LODWORD(v274) = v274 + 1;
            uint64_t v485 = v472;
            if ((*(_DWORD *)(*(void *)(a1 + 944) + 32 * v472 + 8) & 0x80000000) != 0) {
              goto LABEL_805;
            }
          }
          uint64_t v485 = v484;
LABEL_805:
          uint64_t v274 = v485;
          if (v469 == v485) {
            goto LABEL_806;
          }
        }
      }
LABEL_953:
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 128) + 48))(v689);
      uint64_t v580 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v689);
      if (v580 && !*(unsigned char *)(v580 + 1656))
      {
        (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 128) + 56))(&v670);
        uint64_t v581 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)&v670);
        if (v581 && !*(unsigned char *)(v581 + 1656))
        {
          (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 128) + 64))(buf);
          uint64_t v583 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)buf);
          if (v583)
          {
            int v584 = *(unsigned __int8 *)(v583 + 1656);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v670);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v689);
            if (!v584)
            {
              v269 = (re::AssetHandle *)(a1 + 184);
              uint64_t v589 = *(void *)(a1 + 192);
              if (!v589 || *(unsigned char *)(a1 + 2636))
              {
                re::internal::shadows::regenerateShadowProxy(a1 + 2592, *(void *)(a1 + 120), v585, v586, v587, v588);
                long long v590 = *(_OWORD *)(a1 + 184);
                *(_OWORD *)(a1 + 184) = *(_OWORD *)v689;
                *(_OWORD *)v689 = v590;
                uint64_t v591 = *(void *)(a1 + 200);
                *(void *)(a1 + 200) = v690;
                *(void *)&long long v690 = v591;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)v689);
                uint64_t v589 = *(void *)(a1 + 192);
                if (!v589) {
                  goto LABEL_1002;
                }
              }
              unsigned int v592 = atomic_load((unsigned int *)(v589 + 704));
              if (v592 != 2)
              {
LABEL_1002:
                re::AssetHandle::loadAsync(v269);
                goto LABEL_961;
              }
              if (*(unsigned char *)(a1 + 2636)) {
                re::AssetHandle::loadNow(*(void *)(a1 + 192), 0);
              }
              uint64_t v593 = *(void *)(*(void *)(a1 + 112) + 88);
              if (v593)
              {
                LOBYTE(v670) = 0;
                *(void *)v689 = 0x587ABAC10091B1A0;
                *(void *)&v689[8] = "overrides:enablemeshshadows";
                re::DebugSettingsManager::getWithErrorCode<BOOL>(v593, v689, &v670);
                re::StringID::destroyString((re::StringID *)v689);
                *(void *)v689 = 0x4859B8AA739E421CLL;
                *(void *)&v689[8] = "meshshadow:enableShadowFlattening";
                int v594 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v593, v689, &v670);
                re::StringID::destroyString((re::StringID *)v689);
                if (!v594) {
                  re::internal::shadows::g_enableShadowFlattening = v670;
                }
                *(void *)v689 = 0x2D4485FF0B095780;
                *(void *)&v689[8] = "meshshadow:enableMeshDepthFallbackWhenFlattening";
                int v595 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v593, v689, &v670);
                re::StringID::destroyString((re::StringID *)v689);
                if (!v595) {
                  re::internal::shadows::g_enableMeshDepthFallbackWhenFlattening = v670;
                }
              }
              (*(void (**)(unint64_t *__return_ptr))(**(void **)(a1 + 128) + 48))(v656);
              (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 128) + 56))(v660);
              (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 128) + 64))(v687);
              uint64_t v596 = *(void *)(a1 + 216);
              if (v596 && (unsigned int v597 = atomic_load((unsigned int *)(v596 + 704)), v597 == 2))
              {
                re::makeFontID((re *)(a1 + 208), (re::StringID *)v689);
                char v598 = 1;
                char v667 = 1;
                *(void *)v668 = *(void *)v689;
                *(void *)&v668[8] = *(void *)&v689[8];
                *(void *)&v689[8] = "";
                *(void *)v689 = 0;
                re::StringID::destroyString((re::StringID *)v689);
                char v599 = 0;
              }
              else
              {
                char v598 = 0;
                char v667 = 0;
                char v599 = 1;
              }
              ++*(_DWORD *)(v656[1] + 260);
              *(void *)v689 = *(void *)(re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v656)
                                          + 1664);
              ++*(_DWORD *)(*((void *)&v660[0] + 1) + 260);
              *(void *)&v689[8] = *(void *)(re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v660)
                                              + 1664);
              ++*(_DWORD *)(*(void *)&v687[8] + 260);
              uint64_t v604 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v687);
              uint64_t v605 = *(void *)(a1 + 160);
              *(void *)&long long v690 = *(void *)(v604 + 1664);
              *((void *)&v690 + 1) = v605;
              if (v605) {
                id v606 = (id)(v605 + 8);
              }
              uint64_t v607 = *(void *)(a1 + 168);
              *(void *)v691 = v607;
              if (v607) {
                id v608 = (id)(v607 + 8);
              }
              uint64_t v609 = *(void *)(a1 + 176);
              *(void *)&v691[8] = v609;
              if (v609) {
                id v610 = (id)(v609 + 8);
              }
              uint64_t v611 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(a1 + 184));
              if (*(void *)(v611 + 416))
              {
                *(void *)&v691[16] = **(void **)(v611 + 432);
                v691[24] = v598;
                if ((v599 & 1) == 0) {
                  re::StringID::StringID((re::StringID *)&v691[32], (const StringID *)v668);
                }
                LODWORD(v692) = 0;
                *(_OWORD *)&v700[44] = *(_OWORD *)(a1 + 2652);
                long long v613 = *(_OWORD *)(a1 + 2640);
                *(_OWORD *)&v700[16] = *(_OWORD *)(a1 + 2624);
                *(_OWORD *)&v700[32] = v613;
                long long v614 = *(_OWORD *)(a1 + 2576);
                *(_OWORD *)&v697[32] = *(_OWORD *)(a1 + 2560);
                long long v698 = v614;
                long long v615 = *(_OWORD *)(a1 + 2592);
                *(_OWORD *)v700 = *(_OWORD *)(a1 + 2608);
                long long v699 = v615;
                long long v616 = *(_OWORD *)(a1 + 2512);
                long long v695 = *(_OWORD *)(a1 + 2496);
                long long v696 = v616;
                long long v617 = *(_OWORD *)(a1 + 2528);
                *(_OWORD *)&v697[16] = *(_OWORD *)(a1 + 2544);
                *(_OWORD *)v697 = v617;
                long long v618 = *(_OWORD *)(a1 + 2448);
                long long v693 = *v626;
                *(_OWORD *)v694 = v618;
                long long v619 = *(_OWORD *)(a1 + 2464);
                *(_OWORD *)&v694[32] = *(_OWORD *)(a1 + 2480);
                *(_OWORD *)&v694[16] = v619;
                LOBYTE(v701) = 1;
                *((void *)&v701 + 1) = *(void *)(a1 + 2672);
                uint64_t v620 = *(void *)(a1 + 112);
                if (v620)
                {
                  uint64_t v621 = **(void **)(re::RenderFrameBox::get(*(void *)(v620 + 104) + 344, 0xFFFFFFFFFFFFFFFuLL)
                                     + 320);
                  (*(void (**)(void))(v621 + 336))();
                  if (v691[24]) {
                    re::StringID::destroyString((re::StringID *)&v691[32]);
                  }
                  if (*(void *)&v691[8])
                  {

                    *(void *)&v691[8] = 0;
                  }
                  if (*(void *)v691)
                  {

                    *(void *)v691 = 0;
                  }
                  if (*((void *)&v690 + 1)) {

                  }
                  if ((v599 & 1) == 0) {
                    re::StringID::destroyString((re::StringID *)v668);
                  }
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v687);
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v660);
                  v582 = (re::AssetHandle *)v656;
                  goto LABEL_960;
                }
              }
              else
              {
LABEL_1028:
                uint64_t v664 = 0;
                long long v674 = 0u;
                float32x4_t v673 = 0u;
                long long v672 = 0u;
                long long v671 = 0u;
                long long v670 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136315906;
                *(void *)&buf[4] = "operator[]";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 797;
                *(_WORD *)&buf[18] = 2048;
                *(void *)&buf[20] = 0;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = 0;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              re::internal::assertLog((re::internal *)4, v612, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "prepareShadowBuilderGlobalData", 1098);
              _os_crash();
              __break(1u);
            }
LABEL_959:
            (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 128) + 48))(v689);
            re::AssetHandle::loadAsync((re::AssetHandle *)v689);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v689);
            (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 128) + 56))(v689);
            re::AssetHandle::loadAsync((re::AssetHandle *)v689);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v689);
            (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 128) + 64))(v689);
            re::AssetHandle::loadAsync((re::AssetHandle *)v689);
            v582 = (re::AssetHandle *)v689;
LABEL_960:
            re::AssetHandle::~AssetHandle(v582);
LABEL_961:
            re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v653);
            re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v654);
            return;
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v670);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v689);
      goto LABEL_959;
    }
  }
  v602 = *re::shadowLogObjects(v21);
  if (os_log_type_enabled(v602, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v689 = 0;
    _os_log_impl(&dword_233120000, v602, OS_LOG_TYPE_DEFAULT, "MeshShadowSystem: Skipping update as material asset hasn't finished loading.", v689, 2u);
  }
}

uint64_t re::ecs2::MeshShadowSystem::willAddSceneToECSService(uint64_t this, re::EventBus **a2)
{
  uint64_t v3 = this;
  v220[11] = *MEMORY[0x263EF8340];
  v151 = (re::ecs2::Scene *)a2;
  uint64_t v4 = *(void *)(this + 104);
  if (v4 && (*(unsigned char *)(v4 + 424) & 0x10) == 0) {
    return this;
  }
  v160[0] = (uint64_t)a2;
  unint64_t v5 = *(void *)(this + 576);
  int v6 = *(_DWORD *)(this + 584);
  if (v5 >= 0xB)
  {
    if (v6) {
      unint64_t v7 = (void *)(this + 592);
    }
    else {
      unint64_t v7 = *(void **)(this + 600);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
  if (v6)
  {
    long long v8 = (uint64_t *)(this + 592);
    if (!v5) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v8 = *(uint64_t **)(this + 600);
    if (!v5) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_18:
    *(void *)&long long v152 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(this + 568, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v3 + 448, v152);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::init(v13, v3 + 448, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v3 + 504), v160, (uint64_t *)&v152);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v3 + 568, v152);
    uint64_t v14 = v3 + 616;
    unint64_t v15 = v152;
    goto LABEL_51;
  }
LABEL_19:
  long long v159 = 0u;
  long long v152 = 0u;
  *(void *)&long long v153 = 0;
  *((void *)&v153 + 1) = -1;
  long long v154 = 0u;
  long long v155 = 0u;
  uint64_t v156 = 0;
  uint64_t v157 = 1;
  long long v158 = 0uLL;
  unint64_t v16 = *(void *)(this + 488);
  *(void *)&long long v159 = 0;
  unint64_t v17 = *(void *)(this + 456);
  DWORD2(v159) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,4ul>::setBucketsCapacity((uint64_t *)(this + 448), (v16 + 4) >> 2);
    unint64_t v17 = *(void *)(v3 + 456);
  }
  if (v17 <= v16 >> 2)
  {
    v160[1] = 0;
    memset(v220, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v212 = 136315906;
    v213 = "operator[]";
    __int16 v214 = 1024;
    int v215 = 858;
    __int16 v216 = 2048;
    unint64_t v217 = v16 >> 2;
    __int16 v218 = 2048;
    unint64_t v219 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_76;
  }
  if (*(unsigned char *)(v3 + 464)) {
    uint64_t v18 = v3 + 472;
  }
  else {
    uint64_t v18 = *(void *)(v3 + 480);
  }
  uint64_t v19 = *(void *)(v18 + 8 * (v16 >> 2));
  ++*(void *)(v3 + 488);
  ++*(_DWORD *)(v3 + 496);
  uint64_t v20 = v19 + 112 * (v16 & 3);
  long long v21 = v152;
  long long v22 = v153;
  long long v23 = v154;
  *(void *)(v20 + 48) = v155;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)uint64_t v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v155 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v152);
  uint64_t v25 = *(void *)(v3 + 488);
  if (!v25)
  {
LABEL_76:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v3 + 448, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::init(v26, v3 + 448, v160[0]);
  v220[0] = *(void *)(v3 + 488) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v3 + 504), v160, v220);
  unint64_t v27 = *(void *)(v3 + 488);
  unint64_t v28 = *(void *)(v3 + 608);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(v3 + 608) = v27;
  *(void *)&long long v152 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v3 + 568), v29, &v152);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(v3 + 608) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(v3 + 584)) {
      uint64_t v32 = v3 + 592;
    }
    else {
      uint64_t v32 = *(void *)(v3 + 600);
    }
    *(void *)(v32 + 8 * *(void *)(v3 + 576) - 8) &= v30;
  }
  unint64_t v33 = *(void *)(v3 + 488);
  unint64_t v34 = *(void *)(v3 + 656);
  if ((v33 & 0x3F) != 0) {
    unint64_t v35 = (v33 >> 6) + 1;
  }
  else {
    unint64_t v35 = v33 >> 6;
  }
  *(void *)(v3 + 6re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v33;
  *(void *)&long long v152 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v3 + 616), v35, &v152);
  if (v33 && v34 > v33)
  {
    uint64_t v36 = 63;
    uint64_t v37 = *(void *)(v3 + 656) & 0x3FLL;
    if (v37 && v37 != 63) {
      uint64_t v36 = ~(-1 << v37);
    }
    if (*(unsigned char *)(v3 + 632)) {
      uint64_t v38 = v3 + 640;
    }
    else {
      uint64_t v38 = *(void *)(v3 + 648);
    }
    *(void *)(v38 + 8 * *(void *)(v3 + 624) - 8) &= v36;
  }
  unint64_t v15 = v220[0];
  uint64_t v14 = v3 + 616;
LABEL_51:
  uint64_t v39 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (*(unsigned char *)(v3 + 680))
  {
    unint64_t v40 = *(void *)(v3 + 624);
    int v41 = *(_DWORD *)(v3 + 632);
    if (v40 >= 0xB)
    {
      if (v41) {
        long long v42 = (void *)(v3 + 640);
      }
      else {
        long long v42 = *(void **)(v3 + 648);
      }
      uint64_t v44 = 8 * v40;
      while (!*v42)
      {
        ++v42;
        v44 -= 8;
        if (!v44) {
          goto LABEL_69;
        }
      }
      goto LABEL_67;
    }
    if (v41)
    {
      long long v43 = (uint64_t *)(v3 + 640);
      if (!v40) {
        goto LABEL_69;
      }
    }
    else
    {
      long long v43 = *(uint64_t **)(v3 + 648);
      if (!v40) {
        goto LABEL_69;
      }
    }
    uint64_t v45 = 0;
    uint64_t v46 = 8 * v40;
    do
    {
      uint64_t v47 = *v43++;
      v45 |= v47;
      v46 -= 8;
    }
    while (v46);
    if (v45)
    {
LABEL_67:
      uint64_t v39 = *(re::ecs2::System **)(v3 + 664);
      if (!*((unsigned char *)v39 + 86)) {
        re::ecs2::System::queueToRun(v39, 0.0);
      }
    }
  }
LABEL_69:
  long long v152 = 0uLL;
  LODWORD(v153) = 1;
  long long v154 = 0uLL;
  *((void *)&v153 + 1) = 0;
  LODWORD(v155) = 0;
  uint64_t v49 = a2[36];
  if (v49)
  {
    uint64_t v210 = re::globalAllocators((re *)v48)[2];
    int v50 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v210 + 32))(v210, 32, 0);
    *int v50 = &unk_26E708B48;
    v50[1] = v3;
    v50[2] = re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentDidAddHandler;
    v50[3] = 0;
    int v211 = v50;
    uint64_t v51 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v49, (uint64_t)v209, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v53 = v52;
    uint64_t v54 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *uint64_t v54 = v51;
    v54[1] = v53;
    unint64_t v55 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v209);
    uint64_t v207 = re::globalAllocators(v55)[2];
    uint64_t v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v207 + 32))(v207, 32, 0);
    void *v56 = &unk_26E708B48;
    v56[1] = v3;
    v56[2] = re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentDidAddHandler;
    v56[3] = 0;
    int v208 = v56;
    uint64_t v57 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v49, (uint64_t)v206, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v59 = v58;
    uint64_t v60 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    void *v60 = v57;
    v60[1] = v59;
    int16x8_t v61 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v206);
    uint64_t v204 = re::globalAllocators(v61)[2];
    int v62 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v204 + 32))(v204, 32, 0);
    *int v62 = &unk_26E708BA0;
    v62[1] = v3;
    v62[2] = re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentWillRemoveHandler;
    v62[3] = 0;
    unsigned int v205 = v62;
    uint64_t v63 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v203, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v65 = v64;
    unsigned int v66 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *unsigned int v66 = v63;
    v66[1] = v65;
    uint64_t v67 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v203);
    uint64_t v201 = re::globalAllocators(v67)[2];
    uint64_t v68 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v201 + 32))(v201, 32, 0);
    *uint64_t v68 = &unk_26E708BA0;
    v68[1] = v3;
    v68[2] = re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentWillRemoveHandler;
    v68[3] = 0;
    unsigned int v202 = v68;
    uint64_t v69 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v200, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v71 = v70;
    uint64_t v72 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *uint64_t v72 = v69;
    v72[1] = v71;
    unsigned int v73 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v200);
    uint64_t v198 = re::globalAllocators(v73)[2];
    uint64_t v74 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v198 + 32))(v198, 32, 0);
    *uint64_t v74 = &unk_26E708BF8;
    v74[1] = v3;
    v74[2] = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    v74[3] = 0;
    uint64_t v199 = v74;
    uint64_t v75 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v197, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v77 = v76;
    int v78 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *int v78 = v75;
    v78[1] = v77;
    int v79 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v197);
    uint64_t v195 = re::globalAllocators(v79)[2];
    int v80 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v195 + 32))(v195, 32, 0);
    *int v80 = &unk_26E708BF8;
    v80[1] = v3;
    v80[2] = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    v80[3] = 0;
    int v196 = v80;
    uint64_t v81 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v194, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v83 = v82;
    int v84 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    void *v84 = v81;
    v84[1] = v83;
    uint64_t v85 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v194);
    uint64_t v192 = re::globalAllocators(v85)[2];
    __int16 v86 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v192 + 32))(v192, 32, 0);
    *__int16 v86 = &unk_26E708BF8;
    v86[1] = v3;
    v86[2] = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    v86[3] = 0;
    uint64_t v193 = v86;
    uint64_t v87 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v191, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v89 = v88;
    unsigned __int8 v90 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *unsigned __int8 v90 = v87;
    v90[1] = v89;
    unsigned int v91 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v191);
    uint64_t v189 = re::globalAllocators(v91)[2];
    uint64_t v92 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v189 + 32))(v189, 32, 0);
    *uint64_t v92 = &unk_26E708BF8;
    v92[1] = v3;
    v92[2] = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    v92[3] = 0;
    v190 = v92;
    uint64_t v93 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v188, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v95 = v94;
    uint64_t v96 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *uint64_t v96 = v93;
    v96[1] = v95;
    char v97 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v188);
    uint64_t v186 = re::globalAllocators(v97)[2];
    uint64_t v98 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v186 + 32))(v186, 32, 0);
    *uint64_t v98 = &unk_26E708BF8;
    v98[1] = v3;
    v98[2] = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    v98[3] = 0;
    unsigned int v187 = v98;
    uint64_t v99 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v185, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v101 = v100;
    uint64_t v102 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *uint64_t v102 = v99;
    v102[1] = v101;
    char v103 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v185);
    uint64_t v183 = re::globalAllocators(v103)[2];
    unint64_t v104 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v183 + 32))(v183, 32, 0);
    *unint64_t v104 = &unk_26E708BA0;
    v104[1] = v3;
    v104[2] = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    v104[3] = 0;
    v184 = v104;
    uint64_t v105 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v182, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v107 = v106;
    uint64_t v108 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *uint64_t v108 = v105;
    v108[1] = v107;
    uint64_t v109 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v182);
    uint64_t v180 = re::globalAllocators(v109)[2];
    unint64_t v110 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v180 + 32))(v180, 32, 0);
    *unint64_t v110 = &unk_26E708BA0;
    v110[1] = v3;
    v110[2] = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    v110[3] = 0;
    unsigned int v181 = v110;
    uint64_t v111 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v179, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v113 = v112;
    uint64_t v114 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *uint64_t v114 = v111;
    v114[1] = v113;
    uint64_t v115 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v179);
    uint64_t v177 = re::globalAllocators(v115)[2];
    uint64_t v116 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v177 + 32))(v177, 32, 0);
    *uint64_t v116 = &unk_26E708BA0;
    v116[1] = v3;
    v116[2] = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    v116[3] = 0;
    int v178 = v116;
    uint64_t v117 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v176, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v119 = v118;
    uint64_t v120 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *uint64_t v120 = v117;
    v120[1] = v119;
    uint64_t v121 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v176);
    uint64_t v174 = re::globalAllocators(v121)[2];
    unint64_t v122 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v174 + 32))(v174, 32, 0);
    *unint64_t v122 = &unk_26E708BA0;
    v122[1] = v3;
    v122[2] = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    v122[3] = 0;
    uint64_t v175 = v122;
    uint64_t v123 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v173, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v125 = v124;
    unint64_t v126 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *unint64_t v126 = v123;
    v126[1] = v125;
    unint64_t v127 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v173);
    uint64_t v171 = re::globalAllocators(v127)[2];
    unint64_t v128 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v171 + 32))(v171, 32, 0);
    *unint64_t v128 = &unk_26E708BA0;
    v128[1] = v3;
    v128[2] = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    v128[3] = 0;
    uint64_t v172 = v128;
    uint64_t v129 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v170, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v131 = v130;
    unsigned int v132 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *unsigned int v132 = v129;
    v132[1] = v131;
    uint64_t v133 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v170);
    uint64_t v168 = re::globalAllocators(v133)[2];
    int v134 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v168 + 32))(v168, 32, 0);
    *int v134 = &unk_26E708C50;
    v134[1] = v3;
    v134[2] = re::ecs2::MeshShadowSystem::entityWillRemoveHandler;
    v134[3] = 0;
    v169 = v134;
    uint64_t v135 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v49, (uint64_t)v167, 0, 0);
    uint64_t v137 = v136;
    unint64_t v138 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *unint64_t v138 = v135;
    v138[1] = v137;
    unint64_t v139 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)v167);
    uint64_t v165 = re::globalAllocators(v139)[2];
    uint64_t v140 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v165 + 32))(v165, 32, 0);
    *uint64_t v140 = &unk_26E708CA8;
    v140[1] = v3;
    v140[2] = re::ecs2::MeshShadowSystem::entityDidReparentHandler;
    v140[3] = 0;
    int v166 = v140;
    uint64_t v141 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v49, (uint64_t)v164, 0, 0);
    uint64_t v143 = v142;
    v144 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    void *v144 = v141;
    v144[1] = v143;
    uint64_t v145 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v164);
    uint64_t v162 = re::globalAllocators(v145)[2];
    v146 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v162 + 32))(v162, 32, 0);
    void *v146 = &unk_26E708D00;
    v146[1] = v3;
    v146[2] = re::ecs2::MeshShadowSystem::entityBillboardTransformChangedHandler;
    v146[3] = 0;
    uint64_t v163 = v146;
    uint64_t v147 = re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(v49, (uint64_t)v161, 0, 0);
    uint64_t v149 = v148;
    uint64_t v150 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *uint64_t v150 = v147;
    v150[1] = v149;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable((uint64_t)v161);
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(v3 + 688, (uint64_t *)&v151, (uint64_t)&v152);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v152);
  this = v152;
  if ((void)v152)
  {
    if ((v153 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v152 + 40))();
    }
  }
  return this;
}

uint64_t re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentDidAddHandler(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 224)) {
    re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentWillRemoveHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  if (v3 == re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    uint64_t v11 = *(unsigned __int16 *)(a2 + 82);
    if (*(_WORD *)(a2 + 82))
    {
      uint64_t v12 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 16);
      uint64_t v13 = *(int16x8_t **)(a2 + 88);
      int16x8_t v14 = vld1q_dup_s16(v12);
      int v8 = 1;
      while (1)
      {
        uint16x8_t v15 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v14, *v13), (int8x16_t)xmmword_23436BBD0);
        v15.i16[0] = vmaxvq_u16(v15);
        unsigned __int16 v10 = v15.i16[0];
        if (v15.i32[0]) {
          break;
        }
        v8 -= 8;
        ++v13;
        if (!--v11) {
          goto LABEL_14;
        }
      }
LABEL_13:
      if (v10 - v8 < *(unsigned __int16 *)(a2 + 80)) {
        return 0;
      }
    }
  }
  else
  {
    if (v3 != re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      return 0;
    }
    uint64_t v4 = *(unsigned __int16 *)(a2 + 82);
    if (*(_WORD *)(a2 + 82))
    {
      unint64_t v5 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                           + 16);
      int v6 = *(int16x8_t **)(a2 + 88);
      int16x8_t v7 = vld1q_dup_s16(v5);
      int v8 = 1;
      do
      {
        uint16x8_t v9 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v6), (int8x16_t)xmmword_23436BBD0);
        v9.i16[0] = vmaxvq_u16(v9);
        unsigned __int16 v10 = v9.i16[0];
        if (v9.i32[0]) {
          goto LABEL_13;
        }
        v8 -= 8;
        ++v6;
      }
      while (--v4);
    }
  }
LABEL_14:
  if (*(void *)(a2 + 224)) {
    re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::componentWillDeactivateHandler(uint64_t a1, re::ecs2::Entity *a2, uint64_t a3)
{
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::componentWillRemoveHandler(uint64_t a1, re::ecs2::Entity *a2, uint64_t a3)
{
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::entityWillRemoveHandler(uint64_t a1, re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::entityDidReparentHandler(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    uint64_t v6 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(void *)(v5 + 16) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v6)
    {
      if (*(void *)(v6 + 24))
      {
        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v21);
        v15[0] = 0;
        v15[1] = 0;
        int v16 = 1;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v17 = 0;
        int v20 = 0;
        re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v15, (uint64_t)v21, 1uLL);
        *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v15) = a2;
        for (uint64_t i = v19; v19; uint64_t i = v19)
        {
          uint64_t v8 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v15, i - 1);
          re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v15, --v19);
          ++v20;
          uint64_t v9 = *(void *)(v8 + 328);
          if (v9)
          {
            unsigned __int16 v10 = *(uint64_t **)(v8 + 344);
            uint64_t v11 = 8 * v9;
            do
            {
              uint64_t v12 = *v10++;
              *(void *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v15) = v12;
              v11 -= 8;
            }
            while (v11);
          }
          uint64_t v23 = v8;
          if (*(unsigned char *)(v8 + 288))
          {
            uint64_t v13 = *(void *)(a1 + 440) + 928;
            uint64_t v22 = *(void *)(v8 + 296);
            if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v13, &v22)|| re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
            {
              re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*(void *)(a1 + 440) + 1072, &v23);
            }
          }
        }
        re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v15);
        if (v15[0] && (v16 & 1) == 0) {
          (*(void (**)(void))(*(void *)v15[0] + 40))();
        }
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v21);
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::entityBillboardTransformChangedHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 296);
  if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1 + 832, &v6))
  {
    uint64_t v4 = *(void *)(a2 + 224);
    if (v4)
    {
      uint64_t v6 = *(void *)(v4 + 64);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1168, &v6);
    }
  }
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Entity ***a2)
{
  uint64_t v3 = this;
  uint64_t v31 = (re::ecs2::Scene *)a2;
  uint64_t v4 = *(void *)(this + 104);
  if (!v4 || (*(unsigned char *)(v4 + 424) & 0x10) != 0)
  {
    uint64_t v32 = (re::ecs2::Scene *)a2;
    uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(this + 504), &v32);
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(v3 + 512) + 16 * v5;
      re::DynamicBitset<unsigned long long,256ul>::setBit(v3 + 568, *(void *)(v6 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v3 + 616, *(void *)(v6 + 8));
      int16x8_t v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v3 + 448, *(void *)(v6 + 8));
      if (*v7)
      {
        uint64_t v8 = v7;
        *int16x8_t v7 = 0;
        uint64_t v9 = v7 + 1;
        uint64_t v10 = *(void *)(v7[1] + 288);
        if (v10)
        {
          uint64_t v11 = v7[12];
          if (v11)
          {
            for (unint64_t i = 0; i != v11; ++i)
            {
              uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
              re::EventBus::unsubscribe(v10, *(void *)v13, *(void *)(v13 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
        uint64_t v14 = 0;
        uint16x8_t v15 = v8 + 3;
        do
        {
          int v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
          if (*(void *)v16) {
            re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
          }
          v15[v14++] = -1;
        }
        while (v14 != 4);
        *uint64_t v9 = 0;
        v9[1] = 0;
      }
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)(v3 + 504), &v32);
    }
    uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(v3 + 128) + 40))(*(void *)(v3 + 128));
    uint64_t v18 = a2[16];
    if (v18)
    {
      uint64_t v19 = a2[18];
      uint64_t v20 = v17 + 56;
      uint64_t v21 = 8 * (void)v18;
      do
      {
        uint64_t v22 = *v19;
        uint64_t v23 = *((void *)*v19 + 28);
        if (v23)
        {
          uint64_t v24 = *(void *)(v23 + 64);
          if (v24)
          {
            uint64_t v32 = (re::ecs2::Scene *)v24;
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v20, (uint64_t *)&v32);
          }
        }
        re::ecs2::MeshShadowSystemStateImpl::willDeactivateEntity((re::ecs2::MeshShadowSystemStateImpl *)(v3 + 232), v22);
        ++v19;
        v21 -= 8;
      }
      while (v21);
    }
    uint64_t v25 = v3 + 688;
    uint64_t v26 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(v25, (uint64_t *)&v31);
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)(v26 + 40);
      if (v28)
      {
        for (unint64_t j = 0; j != v28; ++j)
        {
          uint64_t v30 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v27, j);
          if (*((void *)v31 + 36)) {
            re::EventBus::unsubscribe(*((void *)v31 + 36), *(void *)v30, *(void *)(v30 + 8));
          }
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v25, (uint64_t *)&v31);
  }
  return this;
}

uint64_t re::ecs2::MeshShadowSystemStateImpl::dependsOnComponents(re::ecs2::MeshShadowSystemStateImpl *this)
{
  return *((void *)this + 5);
}

void re::ecs2::MeshShadowSystem::~MeshShadowSystem(re::ecs2::MeshShadowSystem *this)
{
  re::ecs2::MeshShadowSystem::~MeshShadowSystem(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  re::DynamicString::deinit((re::ecs2::MeshShadowSystem *)((char *)this + 2696));
  if (*((unsigned char *)this + 2416))
  {
    re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 266);
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 2088);
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 2048);
    re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit((uint64_t)this + 2008);
    re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit((uint64_t)this + 1968);
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1928);
    re::DynamicArray<re::MeshShadowCluster>::deinit((uint64_t)this + 1888);
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1848);
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1808);
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1768);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 212);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 206);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 200);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 194);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 188);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 182);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 176);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 170);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 164);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 158);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 152);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 146);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 140);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 134);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 128);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 122);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 116);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 110);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 104);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 98);
  re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 92);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 86);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 448);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 504);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 568);
  *((void *)this + 76) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 616);
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  *((void *)this + 84) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 616);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 568);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 504);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 448);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 448);
  *((void *)this + 29) = &unk_26E708A50;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 400);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 320);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 280);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 240);
  re::AssetHandle::~AssetHandle((re::ecs2::MeshShadowSystem *)((char *)this + 208));
  re::AssetHandle::~AssetHandle((re::ecs2::MeshShadowSystem *)((char *)this + 184));
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {

    *((void *)this + 22) = 0;
  }
  uint64_t v3 = *((void *)this + 21);
  if (v3)
  {

    *((void *)this + 21) = 0;
  }
  uint64_t v4 = *((void *)this + 20);
  if (v4)
  {

    *((void *)this + 20) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::MeshShadowSystem::typeInfo(re::ecs2::MeshShadowSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshShadowSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshShadowSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshShadowSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshShadowSystem>, 0);
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 56 * v4;
        uint64_t v6 = (uint64_t *)(v3 + 8);
        do
        {
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v6);
          v6 += 7;
          v5 -= 56;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

__n128 std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshShadowCluster *,re::MeshShadowCluster *,re::MeshShadowCluster *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (v5 != a3)
      {
        uint64_t v6 = *(void *)v5;
        if (*(void *)a3)
        {
          if (v6) {
            re::DynamicArray<re::RigNodeChannel>::copy((void **)a3, v5);
          }
          else {
            *(void *)(a3 + 16) = 0;
          }
          ++*(_DWORD *)(a3 + 24);
        }
        else if (v6)
        {
          unint64_t v7 = *(void *)(v5 + 16);
          *(void *)a3 = v6;
          re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a3, v7);
          ++*(_DWORD *)(a3 + 24);
          re::DynamicArray<re::RigNodeChannel>::copy((void **)a3, v5);
        }
      }
      long long v8 = *(_OWORD *)(v5 + 48);
      long long v9 = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(a3 + 80) = v9;
      *(_OWORD *)(a3 + 48) = v8;
      long long v10 = *(_OWORD *)(v5 + 96);
      long long v11 = *(_OWORD *)(v5 + 112);
      long long v12 = *(_OWORD *)(v5 + 144);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(a3 + 144) = v12;
      *(_OWORD *)(a3 + 96) = v10;
      *(_OWORD *)(a3 + 112) = v11;
      __n128 result = *(__n128 *)(v5 + 160);
      long long v14 = *(_OWORD *)(v5 + 176);
      long long v15 = *(_OWORD *)(v5 + 208);
      *(_OWORD *)(a3 + 192) = *(_OWORD *)(v5 + 192);
      *(_OWORD *)(a3 + 208) = v15;
      *(__n128 *)(a3 + 160) = result;
      *(_OWORD *)(a3 + 176) = v14;
      v5 += 224;
      a3 += 224;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshShadowCasterInfo>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RigNodeChannel>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void *re::DynamicArray<re::MeshShadowPlaneData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::MeshShadowPlaneData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_20:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 112 * v9;
        long long v11 = v7;
        do
        {
          *long long v11 = *(void *)v8;
          int v12 = *(unsigned __int8 *)(v8 + 16);
          *((unsigned char *)v11 + 16) = v12;
          if (v12)
          {
            long long v13 = *(_OWORD *)(v8 + 48);
            *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 32);
            *((_OWORD *)v11 + 3) = v13;
          }
          int v14 = *(unsigned __int8 *)(v8 + 64);
          *((unsigned char *)v11 + 64) = v14;
          if (v14)
          {
            long long v15 = *(_OWORD *)(v8 + 96);
            *((_OWORD *)v11 + 5) = *(_OWORD *)(v8 + 80);
            *((_OWORD *)v11 + 6) = v15;
          }
          v8 += 112;
          v11 += 14;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_OWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshShadowPlaneData *,re::MeshShadowPlaneData *,re::MeshShadowPlaneData *>(_OWORD *result, _OWORD *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = a3 + 64;
    uint64_t v4 = result + 5;
    do
    {
      unint64_t v5 = v4 - 5;
      *(void *)(v3 - 64) = *((void *)v4 - 10);
      int v6 = *((unsigned __int8 *)v4 - 64);
      if (*(unsigned char *)(v3 - 48)) {
        BOOL v7 = 0;
      }
      else {
        BOOL v7 = v6 == 0;
      }
      if (!v7)
      {
        if (*(unsigned char *)(v3 - 48)) {
          BOOL v8 = v6 == 0;
        }
        else {
          BOOL v8 = 0;
        }
        if (v8)
        {
          *(unsigned char *)(v3 - 48) = 0;
        }
        else
        {
          if (*(unsigned char *)(v3 - 48)) {
            BOOL v9 = 1;
          }
          else {
            BOOL v9 = v6 == 0;
          }
          if (!v9) {
            *(unsigned char *)(v3 - 48) = 1;
          }
          long long v10 = *(v4 - 2);
          *(_OWORD *)(v3 - 32) = *(v4 - 3);
          *(_OWORD *)(v3 - 16) = v10;
        }
      }
      int v11 = *((unsigned __int8 *)v4 - 16);
      if (*(unsigned char *)v3) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v11 == 0;
      }
      if (!v12)
      {
        if (*(unsigned char *)v3) {
          BOOL v13 = v11 == 0;
        }
        else {
          BOOL v13 = 0;
        }
        if (v13)
        {
          *(unsigned char *)uint64_t v3 = 0;
        }
        else
        {
          if (!*(unsigned char *)v3)
          {
            if (*((unsigned char *)v4 - 16)) {
              *(unsigned char *)uint64_t v3 = 1;
            }
          }
          long long v14 = v4[1];
          *(_OWORD *)(v3 + 16) = *v4;
          *(_OWORD *)(v3 + 32) = v14;
        }
      }
      v3 += 112;
      v4 += 7;
    }
    while (v5 + 7 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    unint64_t v6 = a2[2];
    if (v6 >= *(void *)(a1 + 16))
    {
      re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity((void *)a1, a2[2]);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,0>(a2[4], (uint64_t *)(a2[4] + 56 * *(void *)(a1 + 16)), *(void **)(a1 + 32));
      uint64_t v10 = *(void *)(a1 + 16);
      if (v10 != v6)
      {
        uint64_t v11 = 56 * v10;
        uint64_t v12 = 56 * v6 - v11;
        v11 += 8;
        uint64_t v13 = a2[4] + v11;
        uint64_t v14 = *(void *)(a1 + 32) + v11;
        do
        {
          *(void *)(v14 - 8) = *(void *)(v13 - 8);
          uint64_t v15 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase(v14, v13);
          v13 += 56;
          uint64_t v14 = v15 + 56;
          v12 -= 56;
        }
        while (v12);
      }
    }
    else
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,0>(a2[4], (uint64_t *)(a2[4] + 56 * v6), *(void **)(a1 + 32));
      uint64_t v7 = *(void *)(a1 + 16);
      if (v6 != v7)
      {
        uint64_t v8 = -56 * v6 + 56 * v7;
        BOOL v9 = (uint64_t *)(56 * v6 + *(void *)(a1 + 32) + 8);
        do
        {
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v9);
          v9 += 7;
          v8 -= 56;
        }
        while (v8);
      }
    }
    *(void *)(a1 + 16) = v6;
  }
  return a1;
}

void *re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[7 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = v8 + 1;
          uint64_t v13 = *v8;
          v8 += 7;
          *uint64_t v11 = v13;
          *(_OWORD *)(v11 + 3) = 0u;
          *((_DWORD *)v11 + 10) = 0;
          *(_OWORD *)(v11 + 1) = 0u;
          *(void *)((char *)v11 + 44) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11 + 1, v12);
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v12);
          v11 += 7;
        }
        while (v8 != v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,0>(uint64_t result, uint64_t *a2, void *a3)
{
  if ((uint64_t *)result != a2)
  {
    unint64_t v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = (uint64_t)(v5 + 1);
      uint64_t v7 = *v5;
      v5 += 7;
      uint64_t v8 = (uint64_t)(a3 + 1);
      *a3 = v7;
      a3 += 7;
      __n128 result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v8, v6);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, v4, v5);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, v4, v5);
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (void *)(v8 + 16), v8 + 24);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 72;
    }
  }
}

void re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 72;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v10) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v10 + 16) = *a4;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase(*(void *)(a1 + 16) + 72 * v10 + 24, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708B48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708B48;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708BA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708BA0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708BF8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708BF8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708C50;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708C50;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708CA8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708CA8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708D00;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708D00;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::size()
{
  return 32;
}

double re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<unsigned long>::deinit(v6 + 32);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 96;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::MeshShadowSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshShadowSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

__n128 re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, __n128 *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)v30, v13, v12);
          long long v15 = *(_OWORD *)v30;
          *(_OWORD *)uint64_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v30[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v30[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 96;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 96 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 96 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 96 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + 96 * v9;
  unint64_t v26 = a5->n128_u64[0];
  *(void *)(v25 + 64) = 0;
  *(void *)(v25 + 40) = 0;
  *(void *)(v25 + 48) = 0;
  *(void *)(v25 + 24) = v26;
  *(void *)(v25 + 32) = 0;
  *(_DWORD *)(v25 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v25 + 32) = a5->n128_u64[1];
  a5->n128_u64[1] = 0;
  *(void *)(v25 + 40) = a5[1].n128_u64[0];
  a5[1].n128_u64[0] = 0;
  unint64_t v27 = *(void *)(v25 + 48);
  *(void *)(v25 + 48) = a5[1].n128_u64[1];
  a5[1].n128_u64[1] = v27;
  unint64_t v28 = *(void *)(v25 + 64);
  *(void *)(v25 + 64) = a5[2].n128_u64[1];
  a5[2].n128_u64[1] = v28;
  ++a5[2].n128_u32[0];
  ++*(_DWORD *)(v25 + 56);
  __n128 result = a5[3];
  *(unsigned char *)(v25 + 88) = a5[4].n128_u8[0];
  *(__n128 *)(v25 + 72) = result;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::MeshShadowPerFrameUpdateData::MeshShadowPerFrameUpdateData(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  *(unsigned char *)a1 = v4;
  if (v4) {
    *(unsigned char *)(a1 + 1) = a2[1];
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v5 = *((void *)a2 + 2);
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  ++*((_DWORD *)a2 + 8);
  ++*(_DWORD *)(a1 + 32);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v8 = *((void *)a2 + 7);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v8;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v10;
  ++*((_DWORD *)a2 + 18);
  ++*(_DWORD *)(a1 + 72);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  uint64_t v11 = *((void *)a2 + 12);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(void *)(a1 + 96) = v11;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  uint64_t v12 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  uint64_t v13 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v13;
  ++*((_DWORD *)a2 + 28);
  ++*(_DWORD *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  uint64_t v14 = *((void *)a2 + 17);
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *(void *)(a1 + 136) = v14;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  uint64_t v15 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v15;
  uint64_t v16 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v16;
  ++*((_DWORD *)a2 + 38);
  ++*(_DWORD *)(a1 + 152);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  uint64_t v17 = *((void *)a2 + 22);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *(void *)(a1 + 176) = v17;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  uint64_t v18 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v18;
  uint64_t v19 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = *((void *)a2 + 25);
  *((void *)a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = v19;
  ++*((_DWORD *)a2 + 48);
  ++*(_DWORD *)(a1 + 192);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  uint64_t v20 = *((void *)a2 + 27);
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(void *)(a1 + 216) = v20;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  uint64_t v21 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v21;
  uint64_t v22 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v22;
  ++*((_DWORD *)a2 + 58);
  ++*(_DWORD *)(a1 + 232);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 2re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  uint64_t v23 = *((void *)a2 + 32);
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *(void *)(a1 + 2re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v23;
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  uint64_t v24 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = *((void *)a2 + 33);
  *((void *)a2 + 33) = v24;
  uint64_t v25 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = *((void *)a2 + 35);
  *((void *)a2 + 35) = v25;
  ++*((_DWORD *)a2 + 68);
  ++*(_DWORD *)(a1 + 272);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  uint64_t v26 = *((void *)a2 + 37);
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *(void *)(a1 + 296) = v26;
  *((void *)a2 + 36) = 0;
  *((void *)a2 + 37) = 0;
  uint64_t v27 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = *((void *)a2 + 38);
  *((void *)a2 + 38) = v27;
  uint64_t v28 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = *((void *)a2 + 40);
  *((void *)a2 + 40) = v28;
  ++*((_DWORD *)a2 + 78);
  ++*(_DWORD *)(a1 + 312);
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  uint64_t v29 = *((void *)a2 + 42);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(void *)(a1 + 336) = v29;
  *((void *)a2 + 41) = 0;
  *((void *)a2 + 42) = 0;
  uint64_t v30 = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = *((void *)a2 + 43);
  *((void *)a2 + 43) = v30;
  uint64_t v31 = *(void *)(a1 + 360);
  *(void *)(a1 + 360) = *((void *)a2 + 45);
  *((void *)a2 + 45) = v31;
  ++*((_DWORD *)a2 + 88);
  ++*(_DWORD *)(a1 + 352);
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 0;
  *(void *)(a1 + 404) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 368), (uint64_t *)a2 + 46);
  long long v32 = *((_OWORD *)a2 + 26);
  long long v33 = *((_OWORD *)a2 + 28);
  *(_OWORD *)(a1 + 432) = *((_OWORD *)a2 + 27);
  *(_OWORD *)(a1 + 448) = v33;
  *(_OWORD *)(a1 + 416) = v32;
  long long v34 = *((_OWORD *)a2 + 29);
  long long v35 = *((_OWORD *)a2 + 30);
  long long v36 = *((_OWORD *)a2 + 32);
  *(_OWORD *)(a1 + 496) = *((_OWORD *)a2 + 31);
  *(_OWORD *)(a1 + 512) = v36;
  *(_OWORD *)(a1 + 464) = v34;
  *(_OWORD *)(a1 + 480) = v35;
  long long v37 = *((_OWORD *)a2 + 33);
  long long v38 = *((_OWORD *)a2 + 34);
  long long v39 = *((_OWORD *)a2 + 36);
  *(_OWORD *)(a1 + 560) = *((_OWORD *)a2 + 35);
  *(_OWORD *)(a1 + 576) = v39;
  *(_OWORD *)(a1 + 528) = v37;
  *(_OWORD *)(a1 + 544) = v38;
  long long v40 = *((_OWORD *)a2 + 37);
  long long v41 = *((_OWORD *)a2 + 38);
  long long v42 = *((_OWORD *)a2 + 40);
  *(_OWORD *)(a1 + 624) = *((_OWORD *)a2 + 39);
  *(_OWORD *)(a1 + 640) = v42;
  *(_OWORD *)(a1 + 592) = v40;
  *(_OWORD *)(a1 + 608) = v41;
  return a1;
}

void *re::BucketArray<re::MeshShadowReceiverWorld,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  __n128 result = re::BucketArray<re::MeshShadowReceiverWorld,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::MeshShadowReceiverWorld,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      unint64_t v4 = result[1];
      if (v4 > a2)
      {
        int v5 = *((_DWORD *)result + 4);
        do
        {
          uint64_t v6 = v3 + 3;
          if ((v5 & 1) == 0) {
            uint64_t v6 = (void *)v3[4];
          }
          __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v3 + 40))(*v3, v6[v4 - 1]);
          int v7 = *((_DWORD *)v3 + 4);
          unint64_t v4 = v3[1] - 1;
          v3[1] = v4;
          int v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        uint64_t v8 = v3 + 3;
        do
        {
          __n128 result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 4, 0);
          uint64_t v9 = result;
          if (*v3)
          {
            unint64_t v10 = v3[1];
            int v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              unint64_t v12 = *v8;
              BOOL v14 = v10 >= *v8;
              unint64_t v13 = v10 + 1;
              BOOL v14 = !v14 || v12 >= v13;
              if (v14) {
                goto LABEL_24;
              }
              unint64_t v15 = 2 * v12;
              goto LABEL_20;
            }
            unint64_t v13 = v10 + 1;
            if (v13 >= 3)
            {
              unint64_t v15 = 4;
LABEL_20:
              if (v15 <= v13) {
                unint64_t v17 = v13;
              }
              else {
                unint64_t v17 = v15;
              }
              __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              int v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v16 = v3[1] + 1;
            __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            int v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          uint64_t v18 = v3 + 3;
          if ((v11 & 1) == 0) {
            uint64_t v18 = (void *)v3[4];
          }
          unint64_t v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::MeshShadowReceiverWorld,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      __n128 result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::MeshShadowReceiverWorld,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::MeshShadowReceiverWorld,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::MeshShadowReceiverWorld,4ul> *>::__id;
      if (v10) {
        __n128 result = a2 + 1;
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    int v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    BOOL v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *BOOL v10 = &unk_26E708D98;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    BOOL v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *BOOL v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E708DF0;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    int v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E708E48;
    v22[1] = a1;
    _OWORD v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *uint64_t v28 = &unk_26E708EA0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    __n128 result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      long long v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        long long v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *long long v37 = &unk_26E708D98;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        long long v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *long long v43 = &unk_26E708DF0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *uint64_t v49 = &unk_26E708E48;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        int v62 = 0;
        unint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *unint64_t v55 = &unk_26E708EA0;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        int v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        __n128 result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 224);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 224);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 224);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v23);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  unint64_t v15 = *(re::ecs2::Component **)(a2 + 224);
  if (v15)
  {
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    unint64_t v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v15);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708D98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708D98;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708DF0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708DF0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708E48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708E48;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E708EA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E708EA0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ShadowClusterComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ShadowClusterComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ShadowClusterComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::PhysicsDebugSystem::tryLoadMaterialAsset(re::RenderManager **this, AssetService *a2, AssetService *a3)
{
  tryLoadMaterialAsset((re::AssetHandle *)(this + 15), (re::AssetHandle *)(this + 21), "engine:primitiveShapeFlat.rematerialdefinition", this[14], a2);
  uint64_t v5 = this[14];
  tryLoadMaterialAsset((re::AssetHandle *)(this + 18), (re::AssetHandle *)(this + 24), "engine:primitiveShapeFlatTransparent.rematerialdefinition", v5, a2);
}

void tryLoadMaterialAsset(re::AssetHandle *a1, re::AssetHandle *this, const char *a3, re::RenderManager *a4, AssetService *a5)
{
  uint64_t v9 = *((void *)a1 + 1);
  if (!v9 || (unsigned int v10 = atomic_load((unsigned int *)(v9 + 704)), v10 != 2))
  {
    uint64_t v11 = *((void *)this + 1);
    if (v11) {
      goto LABEL_5;
    }
    (*((void (**)(long long *__return_ptr, AssetService *, const char *))a5->var0 + 1))(&v20, a5, a3);
    long long v12 = *(_OWORD *)this;
    *(_OWORD *)this = v20;
    long long v20 = v12;
    uint64_t v13 = *((void *)this + 2);
    *((void *)this + 2) = v21;
    uint64_t v21 = v13;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
    uint64_t v11 = *((void *)this + 1);
    if (v11)
    {
LABEL_5:
      if (!atomic_load((unsigned int *)(v11 + 704))) {
        re::AssetHandle::loadAsync(this);
      }
      uint64_t v15 = *((void *)this + 1);
      if (v15)
      {
        unsigned int v16 = atomic_load((unsigned int *)(v15 + 704));
        if (v16 == 2)
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v19, this);
          re::MaterialAsset::makeMaterialMemoryAsset((uint64_t)a5, (uint64_t)a4, (re::AssetHandle *)v19, 0, 0);
          long long v17 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v20;
          long long v20 = v17;
          uint64_t v18 = *((void *)a1 + 2);
          *((void *)a1 + 2) = v21;
          uint64_t v21 = v18;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
        }
      }
    }
  }
}

void re::ecs2::PhysicsDebugSystem::willAddSystemToECSService(re::ecs2::PhysicsDebugSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 13) = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v4 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  *((void *)this + 14) = v4;
  if (v4)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    uint64_t v6 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v5);
    re::ecs2::PhysicsDebugSystem::tryLoadMaterialAsset((re::RenderManager **)this, v6, v7);
  }
}

uint64_t re::ecs2::PhysicsDebugSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  *(void *)(this + 112) = 0;
  return this;
}

uint64_t re::ecs2::PhysicsDebugSystem::update(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::Engine>(v6);
  if ((!result || (*(unsigned char *)(result + 424) & 0x10) != 0)
    && a2
    && *(void *)(a1 + 112)
    && *(void *)(a1 + 104)
    && re::PhysicsDebugRenderer::isUsingPhysicsDebugRenderer(void)::featureEnabled)
  {
    unint64_t v8 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 8);
    if (a2[28] > v8 && (v9 = *(void *)(a2[30] + 8 * v8)) != 0 && (uint64_t v10 = *(void *)(v9 + 24)) != 0)
    {
      uint64_t v11 = 0;
      long long v12 = *(uint64_t **)(v9 + 40);
      uint64_t v13 = 8 * v10;
      while (1)
      {
        uint64_t v14 = *v12;
        uint64_t v15 = *(void *)(*v12 + 16);
        if (re::StringID::operator==((void *)(v15 + 272), re::ecs2::Scene::kLocalSceneDataEntityID))
        {
          uint64_t v16 = *(void *)(v15 + 200);
          if (!v16) {
            break;
          }
          if (!*(void *)(v16 + 32)) {
            break;
          }
          uint64_t v11 = v14;
          if (!RESyncableGetOwnerPeerID()) {
            break;
          }
        }
        ++v12;
        v13 -= 8;
        if (!v13)
        {
          uint64_t v14 = v11;
          if (!v11) {
            goto LABEL_19;
          }
          break;
        }
      }
      char v106 = 0;
      BOOL v17 = *(_DWORD *)(v14 + 28) != 0;
    }
    else
    {
      uint64_t v14 = 0;
LABEL_19:
      BOOL v17 = 0;
      char v106 = 1;
    }
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 80))(*(void *)(a1 + 104));
    if ((v17 | result) == 1 && (a3 & 0x100000000) == 0)
    {
      uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
      long long v20 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v19);
      re::ecs2::PhysicsDebugSystem::tryLoadMaterialAsset((re::RenderManager **)a1, v20, v21);
      uint64_t v22 = *(void *)(*(void *)(a1 + 112) + 104);
      if (v22) {
        uint64_t v23 = *(void *)(v22 + 312);
      }
      else {
        uint64_t v23 = 0;
      }
      re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v152, *(void *)(v23 + 224), *(re::RenderManager **)(v23 + 248));
      re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v140, *(void *)(v23 + 224), *(re::RenderManager **)(v23 + 248));
      re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v119, *(void *)(v23 + 224), *(re::RenderManager **)(v23 + 248));
      if (v128)
      {
        uint64_t v121 = 0;
        ++v122;
        char v128 = 0;
      }
      if (v126) {
        int v126 = 0;
      }
      int v125 = 998445679;
      if (v127)
      {
        v119[12] = 0;
        ++v120;
        char v127 = 0;
      }
      uint64_t v104 = v23;
      uint64_t v105 = a2;
      if (v124) {
        int v124 = 0;
      }
      int v123 = 998445679;
      char v103 = (re::ecs2::SceneComponentTable *)(a2 + 25);
      uint64_t v24 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 25), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!v24 || (uint64_t v25 = *(void *)(v24 + 24)) == 0)
      {
LABEL_90:
        uint64_t v66 = re::ecs2::SceneComponentTable::get(v103, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v66)
        {
          uint64_t v67 = *(void *)(v66 + 24);
          if (v67)
          {
            uint64_t v68 = *(void *)(v66 + 40);
            uint64_t v69 = 8 * v67;
            __asm { FMOV            V9.2S, #1.0 }
            do
            {
              uint64_t v71 = *(void **)(*(void *)v68 + 80);
              if (v71)
              {
                uint64_t v72 = v71[17];
                if (v72)
                {
                  uint64_t v73 = *(void *)(*(void *)v68 + 16);
                  v111.i64[0] = 0x3F8000003F800000;
                  v111.i64[1] = 1065353216;
                  v112.i64[0] = 0;
                  v112.i64[1] = 0x3F80000000000000;
                  __n128 v113 = 0uLL;
                  v164.i32[0] = 3;
                  *(void *)&long long v165 = 0x3F8000003F800000;
                  *((void *)&v165 + 1) = 0x3F8000003F800000;
                  *(void *)&long long v166 = _D9;
                  double WorldTransformAndStyle = getWorldTransformAndStyle(v14, v73, v72, (uint64_t)&v111, (uint64_t)&v164);
                  uint64_t v75 = (*(uint64_t (**)(void, double))(**(void **)(v72 + 16) + 24))(*(void *)(v72 + 16), WorldTransformAndStyle);
                  if (v75)
                  {
                    uint64_t v76 = (float *)v75;
                    if ((*(unsigned int (**)(uint64_t))(*(void *)v75 + 24))(v75) == 4)
                    {
                      float v77 = (*(float (**)(void *))(*v71 + 176))(v71);
                      v79.n128_f32[0] = (*(float (**)(void *))(*v71 + 192))(v71) + (float)(v77 * -2.0);
                      if (v164.i32[0] == 3)
                      {
                        re::PhysicsDebugRenderer::drawCapsuleLines((uint64_t)v119, &v111, (__n128 *)&v164, v77, v79.n128_f32[0]);
                      }
                      else
                      {
                        *(float *)v78.i32 = v77;
                        re::PhysicsDebugRenderer::drawCapsuleShape((uint64_t)v152, &v111, (__n128 *)&v164, v78, v79);
                      }
                    }
                    else
                    {
                      int v80 = v152;
                      switch(v164.i32[0])
                      {
                        case 0:
                        case 3:
                          int v80 = v119;
                          goto LABEL_103;
                        case 1:
                          goto LABEL_103;
                        case 2:
                          int v80 = v140;
LABEL_103:
                          re::PhysicsDebugRenderer::drawTransformedShape((uint64_t)v80, &v111, v76, (__n128 *)&v164);
                          break;
                        default:
                          break;
                      }
                      re::PhysicsDebugRenderer::drawTransformFrame((uint64_t)v152, (uint64_t)&v111, v76[4]);
                    }
                  }
                }
              }
              v68 += 8;
              v69 -= 8;
            }
            while (v69);
          }
        }
        uint64_t v81 = (*(uint64_t (**)(void, void *))(**(void **)(a1 + 104) + 32))(*(void *)(a1 + 104), v105);
        if (v81)
        {
          uint64_t v82 = v81;
          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v111, v81, 0);
          float32x4_t v107 = v111;
          BOOL v83 = v82 == v111.i64[0] && v111.u16[4] == 0xFFFFLL;
          if (!v83 || (v111.i32[2] & 0xFFFF0000) != 4294901760)
          {
            __asm { FMOV            V8.2S, #1.0 }
            do
            {
              uint64_t v86 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v107);
              if (*(void *)(v86 + 8))
              {
                uint64_t v87 = v86;
                float32x4_t v164 = 0u;
                float32x4_t v108 = (float32x4_t)xmmword_23435FBB0;
                __n128 v116 = 0u;
                re::decomposeScaleRotationTranslation<float>(v86 + 112, (int32x4_t *)&v164, &v108, &v116);
                float32x4_t v111 = v164;
                float32x4_t v112 = v108;
                __n128 v113 = v116;
                uint64_t v88 = *(void *)(*(void *)(v87 + 8) + 56);
                v164.i32[0] = 3;
                *(void *)&long long v166 = _D8;
                long long v165 = xmmword_2343853A0;
                re::PhysicsDebugRenderer::drawContacts((uint64_t)v119, &v111, v88, (__n128 *)&v164);
              }
              re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v107);
            }
            while (v107.i64[0] != v82 || v107.u16[4] != 0xFFFF || v107.u16[5] != 0xFFFF);
          }
        }
        if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v140))
        {
          uint64_t v91 = *(void *)(a1 + 152);
          if (v91)
          {
            unsigned int v92 = atomic_load((unsigned int *)(v91 + 704));
            if (v92 == 2) {
              v146[7] = *(void *)(re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 144)) + 1664);
            }
          }
          re::PrimitiveRenderer::submitContext(v104, v140);
        }
        if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v152))
        {
          uint64_t v93 = *(void *)(a1 + 128);
          if (v93)
          {
            unsigned int v94 = atomic_load((unsigned int *)(v93 + 704));
            if (v94 == 2) {
              v158[7] = *(void *)(re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 120)) + 1664);
            }
          }
          re::PrimitiveRenderer::submitContext(v104, v152);
        }
        if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v119)) {
          re::PrimitiveRenderer::submitContext(v104, v119);
        }
        if (v135)
        {
          if (v139) {
            (*(void (**)(void))(*(void *)v135 + 40))();
          }
          uint64_t v139 = 0;
          uint64_t v136 = 0;
          uint64_t v137 = 0;
          uint64_t v135 = 0;
          ++v138;
        }
        re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v134);
        if (v129)
        {
          if (v133) {
            (*(void (**)(void))(*(void *)v129 + 40))();
          }
          uint64_t v133 = 0;
          uint64_t v130 = 0;
          uint64_t v131 = 0;
          uint64_t v129 = 0;
          ++v132;
        }
        for (uint64_t i = 122; i != 102; i -= 5)
          re::DynamicArray<unsigned long>::deinit((uint64_t)&v119[i]);
        for (uint64_t j = 102; j != 82; j -= 5)
          re::DynamicArray<unsigned long>::deinit((uint64_t)&v119[j]);
        do
        {
          re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v119[j]);
          j -= 5;
        }
        while (j != 62);
        for (uint64_t k = 30; k != -5; k -= 5)
          re::DynamicArray<unsigned long>::deinit((uint64_t)&v119[k]);
        if (v147)
        {
          if (v151) {
            (*(void (**)(void))(*(void *)v147 + 40))();
          }
          uint64_t v151 = 0;
          uint64_t v148 = 0;
          uint64_t v149 = 0;
          uint64_t v147 = 0;
          ++v150;
        }
        re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v146);
        if (v141)
        {
          if (v145) {
            (*(void (**)(void))(*(void *)v141 + 40))();
          }
          uint64_t v145 = 0;
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          uint64_t v141 = 0;
          ++v144;
        }
        for (uint64_t m = 122; m != 102; m -= 5)
          re::DynamicArray<unsigned long>::deinit((uint64_t)&v140[m]);
        do
        {
          re::DynamicArray<unsigned long>::deinit((uint64_t)&v140[m]);
          m -= 5;
        }
        while (m != 82);
        do
        {
          re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v140[m]);
          m -= 5;
        }
        while (m != 62);
        for (uint64_t n = 30; n != -5; n -= 5)
          re::DynamicArray<unsigned long>::deinit((uint64_t)&v140[n]);
        if (v159)
        {
          if (v163) {
            (*(void (**)(void))(*(void *)v159 + 40))();
          }
          uint64_t v163 = 0;
          uint64_t v160 = 0;
          uint64_t v161 = 0;
          uint64_t v159 = 0;
          ++v162;
        }
        re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v158);
        if (v153)
        {
          if (v157) {
            (*(void (**)(void))(*(void *)v153 + 40))();
          }
          uint64_t v157 = 0;
          uint64_t v154 = 0;
          uint64_t v155 = 0;
          uint64_t v153 = 0;
          ++v156;
        }
        for (iuint64_t i = 122; ii != 102; ii -= 5)
          re::DynamicArray<unsigned long>::deinit((uint64_t)&v152[ii]);
        do
        {
          re::DynamicArray<unsigned long>::deinit((uint64_t)&v152[ii]);
          ii -= 5;
        }
        while (ii != 82);
        do
        {
          re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v152[ii]);
          ii -= 5;
        }
        while (ii != 62);
        for (juint64_t j = 30; jj != -5; jj -= 5)
          uint64_t result = re::DynamicArray<unsigned long>::deinit((uint64_t)&v152[jj]);
        return result;
      }
      uint64_t v26 = *(void *)(v24 + 40);
      uint64_t v27 = 8 * v25;
      __asm
      {
        FMOV            V8.2S, #1.0
        FMOV            V0.4S, #1.0
      }
      int8x16_t v102 = _Q0;
      while (1)
      {
        uint64_t v33 = *(void **)v26;
        uint64_t v34 = *(void *)(*(void *)v26 + 16);
        if ((*(unsigned char *)(v34 + 288) & 1) == 0) {
          goto LABEL_75;
        }
        if (v106) {
          int v35 = 1;
        }
        else {
          int v35 = *(_DWORD *)(v14 + 28);
        }
        uint64_t v36 = (re::ecs2::EntityComponentCollection *)(v34 + 32);
        uint64_t v37 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v37) {
          int v35 = *(_DWORD *)(v37 + 28);
        }
        if (!v35) {
          goto LABEL_75;
        }
        v108.i64[0] = 0x3F8000003F800000;
        v108.i64[1] = 1065353216;
        *(void *)&long long v109 = 0;
        *((void *)&v109 + 1) = 0x3F80000000000000;
        long long v110 = 0uLL;
        v116.n128_u32[0] = 3;
        v117.i64[0] = 0x3F8000003F800000;
        v117.i64[1] = 0x3F8000003F800000;
        uint64_t v118 = _D8;
        v111.i8[0] = 0;
        uint64_t v38 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v40 = v38;
        uint64_t v41 = v38 ? *(void *)(v38 + 336) : 0;
        if (v35 == 1) {
          break;
        }
        if (v35 != 2)
        {
          uint64_t v44 = 0;
          goto LABEL_73;
        }
        uint64_t v42 = v33[12];
        if (v42)
        {
          double v43 = getWorldTransformAndStyle(v14, v34, v33[12], (uint64_t)&v108, (uint64_t)&v116);
          uint64_t v44 = (float *)(*(uint64_t (**)(void, double))(**(void **)(v42 + 16) + 24))(*(void *)(v42 + 16), v43);
          if (v41)
          {
            v111.i8[0] = 1;
            __n128 v45 = *(__n128 *)(v41 + 160);
            float32x4_t v112 = *(float32x4_t *)(v41 + 144);
            __n128 v113 = v45;
            long long v39 = *(_OWORD *)(v41 + 176);
            long long v46 = *(_OWORD *)(v41 + 192);
            long long v114 = v39;
            long long v115 = v46;
          }
          goto LABEL_54;
        }
LABEL_75:
        v26 += 8;
        v27 -= 8;
        if (!v27) {
          goto LABEL_90;
        }
      }
      uint64_t v48 = *(void *)(v34 + 240);
      if (!v48) {
        goto LABEL_75;
      }
      uint64_t v49 = *(re::ecs2::TransformComponent ***)(v48 + 16);
      if (v49)
      {
        re::ecs2::TransformComponent::worldSRT(v49, (const re::ecs2::Entity *)1, (uint64_t)&v164);
      }
      else
      {
        long long v50 = *(_OWORD *)(v48 + 48);
        float32x4_t v164 = *(float32x4_t *)(v48 + 32);
        long long v165 = v50;
        long long v166 = *(_OWORD *)(v48 + 64);
      }
      float32x4_t v108 = v164;
      long long v109 = v165;
      long long v110 = v166;
      uint64_t v51 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      uint64_t v52 = re::ecs2::EntityComponentCollection::get(v36, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v106) {
        unsigned __int32 v55 = 3;
      }
      else {
        unsigned __int32 v55 = *(_DWORD *)(v14 + 32);
      }
      int8x16_t v56 = v102;
      if (v52)
      {
        int v57 = *(_DWORD *)(v52 + 120);
        if (v57)
        {
          int8x16_t v56 = (int8x16_t)xmmword_234385360;
          if (v57 != 2)
          {
            int8x16_t v56 = v102;
            if (v57 == 1) {
              int8x16_t v56 = (int8x16_t)xmmword_234385380;
            }
          }
        }
        else
        {
          int8x16_t v56 = (int8x16_t)xmmword_234385370;
        }
      }
      if (v51)
      {
        v53.i32[0] = 0;
        v54.i8[0] = *(unsigned char *)(v51 + 25);
        int8x16_t v56 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v54, v53), 0), v56, (int8x16_t)xmmword_234385390);
      }
      v116.n128_u32[0] = v55;
      int8x16_t v117 = v56;
      uint64_t v118 = _D8;
      uint64_t v58 = re::ecs2::EntityComponentCollection::get(v36, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v58) {
        v116.n128_u32[0] = *(_DWORD *)(v58 + 32);
      }
      uint64_t v59 = v33[5];
      if (!v59) {
        goto LABEL_75;
      }
      uint64_t v60 = (re::AssetHandle *)(v33 + 4);
      unsigned int v61 = atomic_load((unsigned int *)(v59 + 704));
      if (v61 != 2)
      {
        if (v33[5]) {
          re::AssetHandle::loadAsync(v60);
        }
        goto LABEL_75;
      }
      uint64_t v44 = *(float **)(re::AssetHandle::asset<re::CollisionShapeAsset>(v60) + 8);
      if (v40)
      {
        int v62 = (float32x4_t *)(v40 + 32);
        if (v111.i8[0])
        {
          __n128 v63 = *(__n128 *)(v40 + 48);
          float32x4_t v112 = *v62;
          __n128 v113 = v63;
          long long v39 = *(_OWORD *)(v40 + 64);
          long long v114 = v39;
          LODWORD(v115) = *(_DWORD *)(v40 + 80);
        }
        else
        {
          v111.i8[0] = 1;
          __n128 v64 = *(__n128 *)(v40 + 48);
          float32x4_t v112 = *v62;
          __n128 v113 = v64;
          long long v39 = *(_OWORD *)(v40 + 64);
          long long v65 = *(_OWORD *)(v40 + 80);
          long long v114 = v39;
          long long v115 = v65;
        }
      }
LABEL_54:
      if (v44)
      {
        uint64_t v47 = v152;
        switch(v116.n128_u32[0])
        {
          case 0u:
          case 3u:
            uint64_t v47 = v119;
            goto LABEL_71;
          case 1u:
            goto LABEL_71;
          case 2u:
            uint64_t v47 = v140;
LABEL_71:
            re::PhysicsDebugRenderer::drawTransformedShape((uint64_t)v47, &v108, v44, &v116);
            break;
          default:
            break;
        }
        re::PhysicsDebugRenderer::drawTransformFrame((uint64_t)v152, (uint64_t)&v108, v44[4]);
      }
LABEL_73:
      if (v111.i8[0])
      {
        *(float *)&long long v39 = v44[4];
        re::PhysicsDebugRenderer::drawCenterOfMass((uint64_t)v152, &v108, &v112, *(int32x2_t *)&v39);
      }
      goto LABEL_75;
    }
  }
  return result;
}

double getWorldTransformAndStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a3 + 16) + 40))(v31);
  int v10 = *(_DWORD *)(a3 + 8);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  if ((v10 & 2) == 0)
  {
    int32x4_t v13 = vdupq_n_s32(v11);
    uint64_t v12 = v13.i64[1];
    uint64_t v11 = v13.i64[0];
  }
  long long v15 = v31[0];
  long long v14 = v31[1];
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v12;
  *(_OWORD *)(a4 + 16) = v14;
  *(_OWORD *)(a4 + 32) = v15;
  if (a1) {
    int v16 = *(_DWORD *)(a1 + 32);
  }
  else {
    int v16 = 3;
  }
  BOOL v17 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  uint64_t v18 = re::ecs2::EntityComponentCollection::get(v17, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  __asm { FMOV            V0.4S, #1.0 }
  if (v18)
  {
    uint64_t v24 = *(_DWORD **)(v18 + 336);
    if (v24)
    {
      int v25 = v24[52];
      if (v25)
      {
        if (v25 == 2)
        {
          _Q0 = (int8x16_t)xmmword_234385360;
        }
        else if (v25 == 1)
        {
          _Q0 = (int8x16_t)xmmword_234385380;
        }
      }
      else
      {
        _Q0 = (int8x16_t)xmmword_234385370;
      }
      int8x16_t v29 = _Q0;
      if ((*(unsigned int (**)(_DWORD *))(*(void *)v24 + 296))(v24)) {
        unsigned int v26 = -1;
      }
      else {
        unsigned int v26 = 0;
      }
      _Q0 = vbslq_s8((int8x16_t)vdupq_n_s32(v26), (int8x16_t)xmmword_234385390, v29);
    }
  }
  int8x16_t v30 = _Q0;
  uint64_t v27 = re::ecs2::EntityComponentCollection::get(v17, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v27) {
    int v16 = *(_DWORD *)(v27 + 32);
  }
  *(_DWORD *)a5 = v16;
  *(int8x16_t *)(a5 + 16) = v30;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a5 + 32) = result;
  return result;
}

void re::introspect_PhysicsDebugDrawMode(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EC40, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF8EC40);
    if (v24)
    {
      int v25 = re::introspectionAllocator(v24);
      unsigned int v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)unsigned int v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Wireframe";
      qword_26AF8ECA8 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Solid";
      qword_26AF8ECB0 = (uint64_t)v28;
      int8x16_t v29 = re::introspectionAllocator(v28);
      int8x16_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)int8x16_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Transparent";
      qword_26AF8ECB8 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = 3;
      *(void *)(v32 + 16) = "Lines";
      qword_26AF8ECC0 = v32;
      __cxa_guard_release(&qword_26AF8EC40);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EC48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EC48))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF8ECC8, "PhysicsDebugDrawMode", 4, 4, 1, 1);
    qword_26AF8ECC8 = (uint64_t)&unk_26E715E00;
    qword_26AF8ED08 = (uint64_t)&re::introspect_PhysicsDebugDrawMode(BOOL)::enumTable;
    dword_26AF8ECD8 = 9;
    __cxa_guard_release(&qword_26AF8EC48);
  }
  if ((_MergedGlobals_322 & 1) == 0)
  {
    _MergedGlobals_322 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF8ECC8, a2);
    uint64_t v34 = 0x4AC25C1CA6E97326;
    int v35 = "PhysicsDebugDrawMode";
    v38[0] = 208862;
    v38[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v38);
      uint64_t v4 = (unsigned int *)qword_26AF8ED08;
      v37[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v36.var0 = 2 * v10;
            v36.unint64_t var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v14, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              BOOL v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v36.var0 = 2 * v18;
              v36.unint64_t var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v22, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v23);
      xmmword_26AF8ECE8 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "PhysicsDebugDrawMode", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_PhysicsDebugDrawLevel(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EC50, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF8EC50);
    if (v24)
    {
      int v25 = re::introspectionAllocator(v24);
      unsigned int v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)unsigned int v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Disabled";
      qword_26AF8EC78 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "ECSComponent";
      qword_26AF8EC80 = (uint64_t)v28;
      int8x16_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 3;
      *(void *)(v30 + 16) = "ThirdParty";
      qword_26AF8EC88 = v30;
      __cxa_guard_release(&qword_26AF8EC50);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EC58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EC58))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF8ED10, "PhysicsDebugDrawLevel", 4, 4, 1, 1);
    qword_26AF8ED10 = (uint64_t)&unk_26E715E00;
    qword_26AF8ED50 = (uint64_t)&re::introspect_PhysicsDebugDrawLevel(BOOL)::enumTable;
    dword_26AF8ED20 = 9;
    __cxa_guard_release(&qword_26AF8EC58);
  }
  if ((byte_26AF8EC39 & 1) == 0)
  {
    byte_26AF8EC39 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF8ED10, a2);
    uint64_t v32 = 0xD89277836203328;
    uint64_t v33 = "PhysicsDebugDrawLevel";
    v36[0] = 0x607DD0F01DCLL;
    v36[1] = "uint32_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF8ED50;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.unint64_t var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              BOOL v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.unint64_t var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF8ED30 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "PhysicsDebugDrawLevel", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_PhysicsDebugComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EC60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EC60))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8ED58, "PhysicsDebugComponent");
    __cxa_guard_release(&qword_26AF8EC60);
  }
  return &unk_26AF8ED58;
}

void re::ecs2::initInfo_PhysicsDebugComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v15[0] = 0xD8925C97FE41BE2;
  v15[1] = "PhysicsDebugComponent";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EC68, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8EC68);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8EC90 = v7;
      uint64_t v8 = (re *)re::introspectionAllocator((re *)v7);
      re::introspect_PhysicsDebugDrawLevel(v8, v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "debugDrawLevel";
      *(void *)(v10 + 16) = &qword_26AF8ED10;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x1C00000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF8EC98 = v10;
      char v11 = (re *)re::introspectionAllocator((re *)v10);
      re::introspect_PhysicsDebugDrawMode(v11, v12);
      uint64_t v13 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "debugDrawMode";
      *(void *)(v13 + 16) = &qword_26AF8ECC8;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF8ECA0 = v13;
      __cxa_guard_release(&qword_26AF8EC68);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF8EC90;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsDebugComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsDebugComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsDebugComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsDebugComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v16;
}

double re::internal::defaultConstruct<re::ecs2::PhysicsDebugComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F02A8;
  *(void *)&double result = 0x300000001;
  *(void *)(v3 + 28) = 0x300000001;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsDebugComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PhysicsDebugComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F02A8;
  *(void *)&double result = 0x300000001;
  *(void *)(v1 + 28) = 0x300000001;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsDebugComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsDebugComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsDebugComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsDebugComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsDebugComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsDebugComponent>, this);
}

void *re::ecs2::allocInfo_PhysicsDebugSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EC70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EC70))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8EDD0, "PhysicsDebugSystem");
    __cxa_guard_release(&qword_26AF8EC70);
  }
  return &unk_26AF8EDD0;
}

void re::ecs2::initInfo_PhysicsDebugSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x4A224CD115088B76;
  v5[1] = "PhysicsDebugSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PhysicsDebugSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsDebugSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsDebugSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PhysicsDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PhysicsDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsDebugSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsDebugSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::PhysicsDebugSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1, 1);
  *(void *)uint64_t v3 = &unk_26E708EF8;
  double result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsDebugSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PhysicsDebugSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1, 1);
  *(void *)uint64_t v1 = &unk_26E708EF8;
  double result = 0.0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsDebugSystem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsDebugSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsDebugSystem>, this);
}

void re::ecs2::PhysicsDebugSystem::~PhysicsDebugSystem(re::ecs2::PhysicsDebugSystem *this)
{
  *(void *)this = &unk_26E708EF8;
  uint64_t v2 = (re::ecs2::PhysicsDebugSystem *)((char *)this + 120);
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 192));
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 168));
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 144));
  re::AssetHandle::~AssetHandle(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E708EF8;
  uint64_t v2 = (re::ecs2::PhysicsDebugSystem *)((char *)this + 120);
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 192));
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 168));
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 144));
  re::AssetHandle::~AssetHandle(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PhysicsDebugSystem::typeInfo(re::ecs2::PhysicsDebugSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsDebugSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::PhysicsDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PhysicsDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_UISortingComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EE68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EE68))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8EF20, "UISortingComponent");
    __cxa_guard_release(&qword_26AF8EE68);
  }
  return &unk_26AF8EF20;
}

void re::ecs2::initInfo_UISortingComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v69 = 0x602C282B2A41051ALL;
  uint64_t v70 = "UISortingComponent";
  re::StringID::destroyString((re::StringID *)&v69);
  *((_OWORD *)this + 2) = v65;
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EE60, memory_order_acquire)) {
    goto LABEL_2;
  }
  long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8EE60);
  if (!v4) {
    goto LABEL_2;
  }
  uint64_t v5 = re::introspectionAllocator(v4);
  uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = "Component";
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = 3;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(_DWORD *)(v7 + 64) = 0;
  qword_26AF8EE70 = v7;
  uint64_t v9 = re::introspectionAllocator((re *)v7);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EE50, memory_order_acquire) & 1) == 0)
  {
    uint64_t v48 = (re *)__cxa_guard_acquire(&qword_26AF8EE50);
    if (v48)
    {
      uint64_t v49 = re::introspectionAllocator(v48);
      long long v50 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 24, 8);
      *(_DWORD *)long long v50 = 1;
      *((void *)v50 + 1) = -2;
      *((void *)v50 + 2) = "BackDecoration";
      qword_26AF8EEA0 = (uint64_t)v50;
      uint64_t v51 = re::introspectionAllocator(v50);
      uint64_t v52 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 24, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *((void *)v52 + 1) = -1;
      *((void *)v52 + 2) = "BehindUIContent";
      qword_26AF8EEA8 = (uint64_t)v52;
      int8x16_t v53 = re::introspectionAllocator(v52);
      int8x16_t v54 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 24, 8);
      *(_DWORD *)int8x16_t v54 = 1;
      *((void *)v54 + 1) = 0;
      *((void *)v54 + 2) = "UIContent";
      qword_26AF8EEB0 = (uint64_t)v54;
      unsigned __int32 v55 = re::introspectionAllocator(v54);
      int8x16_t v56 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 24, 8);
      *(_DWORD *)int8x16_t v56 = 1;
      *((void *)v56 + 1) = 1;
      *((void *)v56 + 2) = "AboveUIContent";
      qword_26AF8EEB8 = (uint64_t)v56;
      int v57 = re::introspectionAllocator(v56);
      uint64_t v58 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 24, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *((void *)v58 + 1) = 2;
      *((void *)v58 + 2) = "FrontDecoration";
      qword_26AF8EEC0 = (uint64_t)v58;
      uint64_t v59 = re::introspectionAllocator(v58);
      uint64_t v60 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 24, 8);
      *(_DWORD *)uint64_t v60 = 1;
      *((void *)v60 + 1) = 3;
      *((void *)v60 + 2) = "ServerBegin";
      qword_26AF8EEC8 = (uint64_t)v60;
      unsigned int v61 = re::introspectionAllocator(v60);
      uint64_t v62 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v61 + 32))(v61, 24, 8);
      *(_DWORD *)uint64_t v62 = 1;
      *(void *)(v62 + 8) = 3;
      *(void *)(v62 + 16) = "ServerCARE";
      qword_26AF8EED0 = v62;
      __cxa_guard_release(&qword_26AF8EE50);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EE58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EE58))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF8EED8, "UISortCategory", 4, 4, 1, 1);
    qword_26AF8EED8 = (uint64_t)&unk_26E715E00;
    qword_26AF8EF18 = (uint64_t)&re::ecs2::introspect_UISortCategory(BOOL)::enumTable;
    dword_26AF8EEE8 = 9;
    __cxa_guard_release(&qword_26AF8EE58);
  }
  if (_MergedGlobals_323)
  {
LABEL_33:
    uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
    *(_DWORD *)uint64_t v32 = 1;
    *(void *)(v32 + 8) = "m_sortCategory";
    *(void *)(v32 + 16) = &qword_26AF8EED8;
    *(void *)(v32 + 24) = 0;
    *(void *)(v32 + 32) = 0x5000000001;
    *(_DWORD *)(v32 + 40) = 0;
    *(void *)(v32 + 48) = 0;
    *(void *)(v32 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
    *(_DWORD *)(v32 + 64) = 0;
    qword_26AF8EE78 = v32;
    uint64_t v33 = re::introspectionAllocator((re *)v32);
    int v35 = re::introspect_int((re *)1, v34);
    uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
    *(_DWORD *)uint64_t v36 = 1;
    *(void *)(v36 + 8) = "m_sortPriorityHint";
    *(void *)(v36 + 16) = v35;
    *(void *)(v36 + 24) = 0;
    *(void *)(v36 + 32) = 0x5400000002;
    *(_DWORD *)(v36 + 40) = 0;
    *(void *)(v36 + 48) = 0;
    *(void *)(v36 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
    *(_DWORD *)(v36 + 64) = 0;
    qword_26AF8EE80 = v36;
    uint64_t v37 = re::introspectionAllocator((re *)v36);
    uint64_t v38 = re::introspect_Vector3F((re::IntrospectionBase **)1);
    uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
    *(_DWORD *)uint64_t v39 = 1;
    *(void *)(v39 + 8) = "m_extents";
    *(void *)(v39 + 16) = v38;
    *(void *)(v39 + 24) = 0;
    *(void *)(v39 + 32) = 0x2000000003;
    *(_DWORD *)(v39 + 40) = 0;
    *(void *)(v39 + 48) = 0;
    *(void *)(v39 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
    *(_DWORD *)(v39 + 64) = 0;
    qword_26AF8EE88 = v39;
    uint64_t v40 = re::introspectionAllocator((re *)v39);
    uint64_t v42 = re::introspect_BOOL((re *)1, v41);
    uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
    *(_DWORD *)uint64_t v43 = 1;
    *(void *)(v43 + 8) = "m_usesMeshBoundingBox";
    *(void *)(v43 + 16) = v42;
    *(void *)(v43 + 24) = 0;
    *(void *)(v43 + 32) = 0x5F00000004;
    *(_DWORD *)(v43 + 40) = 0;
    *(void *)(v43 + 48) = 0;
    *(void *)(v43 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
    *(_DWORD *)(v43 + 64) = 0;
    qword_26AF8EE90 = v43;
    uint64_t v44 = re::introspectionAllocator((re *)v43);
    long long v46 = re::introspect_BOOL((re *)1, v45);
    uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
    *(_DWORD *)uint64_t v47 = 1;
    *(void *)(v47 + 8) = "m_isInsideOutsidePartitionPlane";
    *(void *)(v47 + 16) = v46;
    *(void *)(v47 + 24) = 0;
    *(void *)(v47 + 32) = 0x6000000005;
    *(_DWORD *)(v47 + 40) = 0;
    *(void *)(v47 + 48) = 0;
    *(void *)(v47 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
    *(_DWORD *)(v47 + 64) = 0;
    qword_26AF8EE98 = v47;
    __cxa_guard_release(&qword_26AF8EE60);
LABEL_2:
    *((void *)this + 2) = 0x7000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 6;
    *((void *)this + 8) = &qword_26AF8EE70;
    *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::UISortingComponent>;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::UISortingComponent>;
    *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::UISortingComponent>;
    *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::UISortingComponent>;
    re::IntrospectionRegistry::add(this, v3);
    long long v64 = v65;
    return;
  }
  _MergedGlobals_323 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF8EED8, v8);
  v66[0] = 0x7F888D781CAD72E0;
  v66[1] = (uint64_t)"UISortCategory";
  uint64_t v69 = 208862;
  uint64_t v70 = "int";
  uint64_t v10 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v69);
  if (v10)
  {
    uint64_t v11 = *v10;
    re::StringID::destroyString((re::StringID *)&v69);
    uint64_t v12 = (unsigned int *)qword_26AF8EF18;
    v68[1] = v11;
    re::TypeBuilder::beginEnumType((uint64_t)&v69, v66, 1, 1, (uint64_t)v68);
    unint64_t v14 = *v12;
    if (v14)
    {
      for (unint64_t i = 0; i < v14; ++i)
      {
        uint64_t v16 = *(void *)(*((void *)v12 + 1) + 8 * i);
        if (*(_DWORD *)v16 == 1)
        {
          BOOL v17 = *(char **)(v16 + 16);
          if (v17)
          {
            uint64_t v18 = *v17;
            if (*v17)
            {
              char v19 = v17[1];
              if (v19)
              {
                long long v20 = (unsigned __int8 *)(v17 + 2);
                do
                {
                  uint64_t v18 = 31 * v18 + v19;
                  int v21 = *v20++;
                  char v19 = v21;
                }
                while (v21);
              }
            }
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v22 = *(void *)(v16 + 8);
          *(void *)&v67.var0 = 2 * v18;
          v67.unint64_t var1 = v17;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v69, v22, &v67);
          re::StringID::destroyString((re::StringID *)&v67);
          unint64_t v14 = *v12;
        }
      }
      if (v14)
      {
        for (unint64_t j = 0; j < v14; ++j)
        {
          uint64_t v24 = *(void *)(*((void *)v12 + 1) + 8 * j);
          if (*(_DWORD *)v24 == 2)
          {
            int v25 = *(char **)(v24 + 16);
            if (v25)
            {
              uint64_t v26 = *v25;
              if (*v25)
              {
                char v27 = v25[1];
                if (v27)
                {
                  uint64_t v28 = (unsigned __int8 *)(v25 + 2);
                  do
                  {
                    uint64_t v26 = 31 * v26 + v27;
                    int v29 = *v28++;
                    char v27 = v29;
                  }
                  while (v29);
                }
              }
            }
            else
            {
              uint64_t v26 = 0;
            }
            uint64_t v30 = *(void *)(v24 + 8);
            *(void *)&v67.var0 = 2 * v26;
            v67.unint64_t var1 = v25;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v69, v30, &v67);
            re::StringID::destroyString((re::StringID *)&v67);
            unint64_t v14 = *v12;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v69, v31);
    xmmword_26AF8EEF8 = (__int128)v67;
    re::StringID::destroyString((re::StringID *)v66);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v69);
  re::internal::assertLog((re::internal *)5, v63, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "UISortCategory");
  _os_crash();
  __break(1u);
}

int32x4_t re::internal::defaultConstruct<re::ecs2::UISortingComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F1570;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v5 = 0x7F0000007FLL;
  *((void *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 48) = result;
  *(_OWORD *)(v3 + 64) = v5;
  *(_DWORD *)(v3 + 80) = 1;
  *(void *)(v3 + 84) = 0;
  *(void *)(v3 + 89) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::UISortingComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

int32x4_t re::internal::defaultConstructV2<re::ecs2::UISortingComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F1570;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v3 = 0x7F0000007FLL;
  *((void *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 48) = result;
  *(_OWORD *)(v1 + 64) = v3;
  *(_DWORD *)(v1 + 80) = 1;
  *(void *)(v1 + 84) = 0;
  *(void *)(v1 + 89) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::UISortingComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_UISortingComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"UISortingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_UISortingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_UISortingComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::UISortingComponent>, this);
}

uint64_t re::ecs2::UISortingComponent::setExtents(float *a1, float *a2)
{
  float v2 = a1[8];
  if (v2 == *a2 || vabds_f32(v2, *a2) < (float)((float)((float)(fabsf(v2) + fabsf(*a2)) + 1.0) * 0.00001))
  {
    float v3 = a1[9];
    float v4 = a2[1];
    if (v3 == v4 || vabds_f32(v3, v4) < (float)((float)((float)(fabsf(v3) + fabsf(v4)) + 1.0) * 0.00001))
    {
      float v5 = a1[10];
      float v6 = a2[2];
      if (v5 == v6 || vabds_f32(v5, v6) < (float)((float)((float)(fabsf(v5) + fabsf(v6)) + 1.0) * 0.00001)) {
        return 0;
      }
    }
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)a2;
  return 1;
}

uint64_t re::ecs2::UISortingComponent::setCaSortOrder(uint64_t this, int a2)
{
  int v2 = *(_DWORD *)(this + 88);
  *(_DWORD *)(this + 88) = a2;
  if (v2 != a2)
  {
    uint64_t v3 = *(void *)(this + 16);
    uint64_t v4 = v3;
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      uint64_t v7 = *(re::EventBus **)(v6 + 288);
      if (v7)
      {
        uint64_t v8 = re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCASortOrderEvent>();
        return re::EventBus::publish(v7, v3, (uint64_t)v8, (uint64_t)&v9, 1uLL, 0);
      }
    }
  }
  return this;
}

void *re::ecs2::allocInfo_PrimitiveBoxComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_324, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_324))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F1C8, "PrimitiveBoxComponent");
    __cxa_guard_release(&_MergedGlobals_324);
  }
  return &unk_26AF8F1C8;
}

void re::ecs2::initInfo_PrimitiveBoxComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xA7F887F361E343B2;
  v20[1] = "PrimitiveBoxComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8EFA0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F088 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F090 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildBoxOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F098 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x3A00000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F0A0 = v18;
      __cxa_guard_release(&qword_26AF8EFA0);
    }
  }
  *((void *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F088;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveBoxComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveBoxComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveBoxComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveBoxComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveBoxComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6E01D0;
  uint64_t v4 = (re::AssetHandle *)(a3 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 11));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxComponent>(void *a1)
{
  *a1 = &unk_26E6E01D0;
  int v2 = (re::AssetHandle *)(a1 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 11));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveBoxComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveBoxComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveBoxComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveBoxComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveBoxComponent>, this);
}

void *re::ecs2::allocInfo_PrimitiveBoxWithRoundedCornersComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EFA8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F240, "PrimitiveBoxWithRoundedCornersComponent");
    __cxa_guard_release(&qword_26AF8EFA8);
  }
  return &unk_26AF8F240;
}

void re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x9E4753EB8C44C9C4;
  v20[1] = "PrimitiveBoxWithRoundedCornersComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFB0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8EFB0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F0A8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x4400000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F0B0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildBoxWithRoundedCornersOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F0B8 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x4600000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F0C0 = v18;
      __cxa_guard_release(&qword_26AF8EFB0);
    }
  }
  *((void *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F0A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6EED00;
  uint64_t v4 = (re::AssetHandle *)(a3 + 9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 12));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(void *a1)
{
  *a1 = &unk_26E6EED00;
  int v2 = (re::AssetHandle *)(a1 + 9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 12));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveBoxWithRoundedCornersComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveBoxWithRoundedCornersComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveBoxWithRoundedCornersComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>, this);
}

void *re::ecs2::allocInfo_PrimitiveCapsuleComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EFB8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F2B8, "PrimitiveCapsuleComponent");
    __cxa_guard_release(&qword_26AF8EFB8);
  }
  return &unk_26AF8F2B8;
}

void re::ecs2::initInfo_PrimitiveCapsuleComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x7F9A21F41648206ELL;
  v20[1] = "PrimitiveCapsuleComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFC0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8EFC0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F0C8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F0D0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildCapsuleOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F0D8 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x3200000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F0E0 = v18;
      __cxa_guard_release(&qword_26AF8EFC0);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F0C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveCapsuleComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveCapsuleComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveCapsuleComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveCapsuleComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveCapsuleComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveCapsuleComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveCapsuleComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6E02C8;
  uint64_t v4 = (re::AssetHandle *)(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveCapsuleComponent>(void *a1)
{
  *a1 = &unk_26E6E02C8;
  int v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveCapsuleComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveCapsuleComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveCapsuleComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveCapsuleComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveCapsuleComponent>, this);
}

void *re::ecs2::allocInfo_PrimitiveConeComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EFC8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F330, "PrimitiveConeComponent");
    __cxa_guard_release(&qword_26AF8EFC8);
  }
  return &unk_26AF8F330;
}

void re::ecs2::initInfo_PrimitiveConeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x6CC106C967564726;
  v20[1] = "PrimitiveConeComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFD0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8EFD0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F0E8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F0F0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildConeOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F0F8 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2E00000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F100 = v18;
      __cxa_guard_release(&qword_26AF8EFD0);
    }
  }
  *((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F0E8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveConeComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveConeComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveConeComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveConeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveConeComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveConeComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveConeComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6E03C0;
  uint64_t v4 = (re::AssetHandle *)(a3 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveConeComponent>(void *a1)
{
  *a1 = &unk_26E6E03C0;
  int v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveConeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveConeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveConeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveConeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveConeComponent>, this);
}

void *re::ecs2::allocInfo_PrimitiveCylinderComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EFD8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F3A8, "PrimitiveCylinderComponent");
    __cxa_guard_release(&qword_26AF8EFD8);
  }
  return &unk_26AF8F3A8;
}

void re::ecs2::initInfo_PrimitiveCylinderComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xB29E407824C03F80;
  v20[1] = "PrimitiveCylinderComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFE0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8EFE0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F108 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3400000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F110 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildCylinderOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F118 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x3600000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F120 = v18;
      __cxa_guard_release(&qword_26AF8EFE0);
    }
  }
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F108;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveCylinderComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveCylinderComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveCylinderComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveCylinderComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveCylinderComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveCylinderComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveCylinderComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6E04B8;
  uint64_t v4 = (re::AssetHandle *)(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveCylinderComponent>(void *a1)
{
  *a1 = &unk_26E6E04B8;
  int v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveCylinderComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveCylinderComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveCylinderComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveCylinderComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveCylinderComponent>, this);
}

void *re::ecs2::allocInfo_PrimitivePlaneComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EFE8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F420, "PrimitivePlaneComponent");
    __cxa_guard_release(&qword_26AF8EFE8);
  }
  return &unk_26AF8F420;
}

void re::ecs2::initInfo_PrimitivePlaneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x4B3FA39CDE99B550;
  v20[1] = "PrimitivePlaneComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFF0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8EFF0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F128 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F130 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildPlaneOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F138 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x3A00000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F140 = v18;
      __cxa_guard_release(&qword_26AF8EFF0);
    }
  }
  *((void *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F128;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitivePlaneComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitivePlaneComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitivePlaneComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitivePlaneComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitivePlaneComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitivePlaneComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitivePlaneComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6EF258;
  uint64_t v4 = (re::AssetHandle *)(a3 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 11));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitivePlaneComponent>(void *a1)
{
  *a1 = &unk_26E6EF258;
  int v2 = (re::AssetHandle *)(a1 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 11));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitivePlaneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitivePlaneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitivePlaneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitivePlaneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitivePlaneComponent>, this);
}

void *re::ecs2::allocInfo_PrimitivePyramidComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8EFF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8EFF8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F498, "PrimitivePyramidComponent");
    __cxa_guard_release(&qword_26AF8EFF8);
  }
  return &unk_26AF8F498;
}

void re::ecs2::initInfo_PrimitivePyramidComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x47DE3E13F43D68E8;
  v20[1] = "PrimitivePyramidComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F000, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8F000);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F148 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F150 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildPyramidOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F158 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x3200000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F160 = v18;
      __cxa_guard_release(&qword_26AF8F000);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F148;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitivePyramidComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitivePyramidComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitivePyramidComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitivePyramidComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitivePyramidComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitivePyramidComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitivePyramidComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6EF468;
  uint64_t v4 = (re::AssetHandle *)(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitivePyramidComponent>(void *a1)
{
  *a1 = &unk_26E6EF468;
  int v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitivePyramidComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitivePyramidComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitivePyramidComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitivePyramidComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitivePyramidComponent>, this);
}

void *re::ecs2::allocInfo_PrimitiveSphereComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F008, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F008))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F510, "PrimitiveSphereComponent");
    __cxa_guard_release(&qword_26AF8F008);
  }
  return &unk_26AF8F510;
}

void re::ecs2::initInfo_PrimitiveSphereComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x7AD96854103F9FD2;
  v20[1] = "PrimitiveSphereComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F010, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8F010);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F168 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F170 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildSphereOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F178 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2A00000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F180 = v18;
      __cxa_guard_release(&qword_26AF8F010);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F168;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveSphereComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveSphereComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveSphereComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveSphereComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveSphereComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveSphereComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveSphereComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6E05B0;
  uint64_t v4 = (re::AssetHandle *)(a3 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveSphereComponent>(void *a1)
{
  *a1 = &unk_26E6E05B0;
  int v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveSphereComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveSphereComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveSphereComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveSphereComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveSphereComponent>, this);
}

void *re::ecs2::allocInfo_PrimitiveTetrahedronComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F018, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F018))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F588, "PrimitiveTetrahedronComponent");
    __cxa_guard_release(&qword_26AF8F018);
  }
  return &unk_26AF8F588;
}

void re::ecs2::initInfo_PrimitiveTetrahedronComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x65FF83F77D591C90;
  v20[1] = "PrimitiveTetrahedronComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F020, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8F020);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F188 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F190 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildTetrahedronOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F198 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2A00000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F1A0 = v18;
      __cxa_guard_release(&qword_26AF8F020);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F188;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveTetrahedronComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveTetrahedronComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveTetrahedronComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveTetrahedronComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveTetrahedronComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveTetrahedronComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveTetrahedronComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6EF790;
  uint64_t v4 = (re::AssetHandle *)(a3 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveTetrahedronComponent>(void *a1)
{
  *a1 = &unk_26E6EF790;
  int v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveTetrahedronComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveTetrahedronComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveTetrahedronComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveTetrahedronComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveTetrahedronComponent>, this);
}

void *re::ecs2::allocInfo_PrimitiveTubeComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F028, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F028))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F600, "PrimitiveTubeComponent");
    __cxa_guard_release(&qword_26AF8F028);
  }
  return &unk_26AF8F600;
}

void re::ecs2::initInfo_PrimitiveTubeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xE45DF0EB7BA022A4;
  v20[1] = "PrimitiveTubeComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F030, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8F030);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8F1A8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "splitMeshes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8F1B0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_GeomBuildTubeOptions((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "options";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF8F1B8 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      BOOL v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "createCollisionShape";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x3200000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8F1C0 = v18;
      __cxa_guard_release(&qword_26AF8F030);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF8F1A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveTubeComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveTubeComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveTubeComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveTubeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveTubeComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveTubeComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveTubeComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6EF9A0;
  uint64_t v4 = (re::AssetHandle *)(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveTubeComponent>(void *a1)
{
  *a1 = &unk_26E6EF9A0;
  int v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveTubeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveTubeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveTubeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveTubeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveTubeComponent>, this);
}

void *re::ecs2::allocInfo_PrimitiveBoxSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F038, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F038))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F678, "PrimitiveBoxSystem");
    __cxa_guard_release(&qword_26AF8F038);
  }
  return &unk_26AF8F678;
}

void re::ecs2::initInfo_PrimitiveBoxSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x4C5497594D8EF5A6;
  v5[1] = "PrimitiveBoxSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitiveBoxSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveBoxSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveBoxSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveBoxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveBoxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitiveBoxSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FDAE0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveBoxSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FDB80;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FDBF0;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FDAE0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxSystem>(void *a1)
{
  *a1 = &unk_26E6FDB80;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FDBF0;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveBoxSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveBoxSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveBoxSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveBoxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveBoxSystem>, this);
}

void *re::ecs2::allocInfo_PrimitiveBoxWithRoundedCornersSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F040, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F040))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F6F0, "PrimitiveBoxWithRoundedCornersSystem");
    __cxa_guard_release(&qword_26AF8F040);
  }
  return &unk_26AF8F6F0;
}

void re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xD4A71245D6CF78D4;
  v5[1] = "PrimitiveBoxWithRoundedCornersSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FDDB8;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FDE58;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FDEC8;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FDDB8;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(void *a1)
{
  *a1 = &unk_26E6FDE58;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FDEC8;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveBoxWithRoundedCornersSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveBoxWithRoundedCornersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveBoxWithRoundedCornersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>, this);
}

void *re::ecs2::allocInfo_PrimitiveCapsuleSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F048, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F048))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F768, "PrimitiveCapsuleSystem");
    __cxa_guard_release(&qword_26AF8F048);
  }
  return &unk_26AF8F768;
}

void re::ecs2::initInfo_PrimitiveCapsuleSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x62F012C966B9B26ALL;
  v5[1] = "PrimitiveCapsuleSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitiveCapsuleSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveCapsuleSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveCapsuleSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveCapsuleSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveCapsuleSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveCapsuleSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveCapsuleSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitiveCapsuleSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FE090;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveCapsuleSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FE130;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FE1A0;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitiveCapsuleSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FE090;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveCapsuleSystem>(void *a1)
{
  *a1 = &unk_26E6FE130;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FE1A0;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveCapsuleSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveCapsuleSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveCapsuleSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveCapsuleSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveCapsuleSystem>, this);
}

void *re::ecs2::allocInfo_PrimitiveConeSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F050, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F050))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F7E0, "PrimitiveConeSystem");
    __cxa_guard_release(&qword_26AF8F050);
  }
  return &unk_26AF8F7E0;
}

void re::ecs2::initInfo_PrimitiveConeSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x3E3E836F1EA3C6B2;
  v5[1] = "PrimitiveConeSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitiveConeSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveConeSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveConeSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveConeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveConeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveConeSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveConeSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitiveConeSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FE368;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveConeSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FE408;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FE478;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitiveConeSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FE368;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveConeSystem>(void *a1)
{
  *a1 = &unk_26E6FE408;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FE478;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveConeSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveConeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveConeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveConeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveConeSystem>, this);
}

void *re::ecs2::allocInfo_PrimitiveCylinderSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F058, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F058))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F858, "PrimitiveCylinderSystem");
    __cxa_guard_release(&qword_26AF8F058);
  }
  return &unk_26AF8F858;
}

void re::ecs2::initInfo_PrimitiveCylinderSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x4B4DB97F8123C98;
  v5[1] = "PrimitiveCylinderSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitiveCylinderSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveCylinderSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveCylinderSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveCylinderSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveCylinderSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveCylinderSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveCylinderSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitiveCylinderSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FE640;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveCylinderSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FE6E0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FE750;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitiveCylinderSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FE640;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveCylinderSystem>(void *a1)
{
  *a1 = &unk_26E6FE6E0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FE750;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveCylinderSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveCylinderSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveCylinderSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveCylinderSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveCylinderSystem>, this);
}

void *re::ecs2::allocInfo_PrimitivePlaneSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F060, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F060))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F8D0, "PrimitivePlaneSystem");
    __cxa_guard_release(&qword_26AF8F060);
  }
  return &unk_26AF8F8D0;
}

void re::ecs2::initInfo_PrimitivePlaneSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x89DCFC1F499118C8;
  v5[1] = "PrimitivePlaneSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitivePlaneSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitivePlaneSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitivePlaneSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitivePlaneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitivePlaneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitivePlaneSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitivePlaneSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitivePlaneSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FE918;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitivePlaneSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FE9B8;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FEA28;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitivePlaneSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FE918;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitivePlaneSystem>(void *a1)
{
  *a1 = &unk_26E6FE9B8;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FEA28;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitivePlaneSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitivePlaneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitivePlaneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitivePlaneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitivePlaneSystem>, this);
}

void *re::ecs2::allocInfo_PrimitivePyramidSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F068))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F948, "PrimitivePyramidSystem");
    __cxa_guard_release(&qword_26AF8F068);
  }
  return &unk_26AF8F948;
}

void re::ecs2::initInfo_PrimitivePyramidSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x901A0DAEED3BCC30;
  v5[1] = "PrimitivePyramidSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitivePyramidSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitivePyramidSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitivePyramidSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitivePyramidSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitivePyramidSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitivePyramidSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitivePyramidSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitivePyramidSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FEBF0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitivePyramidSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FEC90;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FED00;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitivePyramidSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FEBF0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitivePyramidSystem>(void *a1)
{
  *a1 = &unk_26E6FEC90;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FED00;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitivePyramidSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitivePyramidSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitivePyramidSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitivePyramidSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitivePyramidSystem>, this);
}

void *re::ecs2::allocInfo_PrimitiveSphereSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F070, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F070))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8F9C0, "PrimitiveSphereSystem");
    __cxa_guard_release(&qword_26AF8F070);
  }
  return &unk_26AF8F9C0;
}

void re::ecs2::initInfo_PrimitiveSphereSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xB3F8B3FD294D0D86;
  v5[1] = "PrimitiveSphereSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitiveSphereSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveSphereSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveSphereSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveSphereSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveSphereSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveSphereSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveSphereSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitiveSphereSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FEEC8;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveSphereSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FEF68;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FEFD8;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitiveSphereSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FEEC8;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveSphereSystem>(void *a1)
{
  *a1 = &unk_26E6FEF68;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FEFD8;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveSphereSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveSphereSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveSphereSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveSphereSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveSphereSystem>, this);
}

void *re::ecs2::allocInfo_PrimitiveTetrahedronSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F078, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F078))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8FA38, "PrimitiveTetrahedronSystem");
    __cxa_guard_release(&qword_26AF8F078);
  }
  return &unk_26AF8FA38;
}

void re::ecs2::initInfo_PrimitiveTetrahedronSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x21CCEC08E11CF988;
  v5[1] = "PrimitiveTetrahedronSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitiveTetrahedronSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveTetrahedronSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveTetrahedronSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveTetrahedronSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveTetrahedronSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveTetrahedronSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveTetrahedronSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitiveTetrahedronSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FF1A0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveTetrahedronSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FF240;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FF2B0;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitiveTetrahedronSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FF1A0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveTetrahedronSystem>(void *a1)
{
  *a1 = &unk_26E6FF240;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FF2B0;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveTetrahedronSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveTetrahedronSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveTetrahedronSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveTetrahedronSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveTetrahedronSystem>, this);
}

void *re::ecs2::allocInfo_PrimitiveTubeSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8F080, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8F080))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8FAB0, "PrimitiveTubeSystem");
    __cxa_guard_release(&qword_26AF8F080);
  }
  return &unk_26AF8FAB0;
}

void re::ecs2::initInfo_PrimitiveTubeSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x3E41BDBAC67DCBF4;
  v5[1] = "PrimitiveTubeSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitiveTubeSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveTubeSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveTubeSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveTubeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveTubeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveTubeSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveTubeSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::internal::defaultConstruct<re::ecs2::PrimitiveTubeSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  void *result = &unk_26E6FF478;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveTubeSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6FF518;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = &unk_26E6FF588;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 15);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultConstructV2<re::ecs2::PrimitiveTubeSystem>(_OWORD *a1)
{
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int32x4_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  void *result = &unk_26E6FF478;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveTubeSystem>(void *a1)
{
  *a1 = &unk_26E6FF518;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = &unk_26E6FF588;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 15);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveTubeSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveTubeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveTubeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveTubeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveTubeSystem>, this);
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveBoxComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)&double result = 0x1000100010001;
  *(void *)(v1 + 28) = 0x1000100010001;
  *(_OWORD *)(v1 + 36) = xmmword_234371EE0;
  *(_WORD *)(v1 + 52) = 257;
  *(unsigned char *)(v1 + 54) = 0;
  *(_WORD *)(v1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(unsigned char *)(v1 + 58) = 1;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(void *)(v1 + 112) = 0x1000100010001;
  *(_OWORD *)(v1 + 120) = xmmword_234371EE0;
  *(_WORD *)(v1 + 136) = 257;
  *(unsigned char *)(v1 + 138) = 0;
  *(_WORD *)(v1 + 140) = 1;
  *(void *)uint64_t v1 = &unk_26E6E0130;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)&double result = 0x3000100010001;
  *(void *)(v1 + 28) = 0x3000100010001;
  *(_WORD *)(v1 + 36) = 4;
  *(_OWORD *)(v1 + 40) = xmmword_234371EF0;
  *(_DWORD *)(v1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 1065353216;
  *(_DWORD *)(v1 + 60) = 16777473;
  *(_WORD *)(v1 + 64) = 1;
  *(unsigned char *)(v1 + 66) = 0;
  *(_WORD *)(v1 + 68) = 0;
  *(unsigned char *)(v1 + 70) = 1;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)(v1 + 120) = 0x3000100010001;
  *(_WORD *)(v1 + 128) = 4;
  *(_OWORD *)(v1 + 132) = xmmword_234371EF0;
  *(_DWORD *)(v1 + 148) = 1065353216;
  *(_DWORD *)(v1 + 152) = 16777473;
  *(_WORD *)(v1 + 1re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 1;
  *(unsigned char *)(v1 + 158) = 0;
  *(_WORD *)(v1 + 160) = 1;
  *(void *)uint64_t v1 = &unk_26E6EEC60;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveCapsuleComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65544;
  *(_WORD *)(v1 + 32) = 4;
  double result = 2.00000047;
  *(void *)(v1 + 36) = 0x400000003F000000;
  *(_WORD *)(v1 + 44) = 257;
  *(unsigned char *)(v1 + 46) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 50) = 1;
  *(_OWORD *)(v1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 65544;
  *(_WORD *)(v1 + 108) = 4;
  *(void *)(v1 + 112) = 0x400000003F000000;
  *(_WORD *)(v1 + 120) = 257;
  *(unsigned char *)(v1 + 122) = 0;
  *(_WORD *)(v1 + 124) = 1;
  *(void *)uint64_t v1 = &unk_26E6E0228;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveConeComponent>(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65544;
  double result = 0.0000305175853;
  *(void *)(v1 + 32) = 0x3F0000003F800000;
  *(_DWORD *)(v1 + 40) = 65793;
  *(_WORD *)(v1 + 44) = 0;
  *(unsigned char *)(v1 + 46) = 1;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 65544;
  *(void *)(v1 + 100) = 0x3F0000003F800000;
  *(_DWORD *)(v1 + 108) = 65793;
  *(_WORD *)(v1 + 112) = 1;
  *(void *)uint64_t v1 = &unk_26E6E0320;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveCylinderComponent>(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65544;
  double result = 0.0000305175853;
  *(void *)(v1 + 32) = 0x3F0000003F800000;
  *(void *)(v1 + 40) = 0x10101013F000000;
  *(unsigned char *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 52) = 0;
  *(unsigned char *)(v1 + 54) = 1;
  *(_OWORD *)(v1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 65544;
  *(void *)(v1 + 108) = 0x3F0000003F800000;
  *(void *)(v1 + 116) = 0x10101013F000000;
  *(unsigned char *)(v1 + 124) = 0;
  *(_WORD *)(v1 + 128) = 1;
  *(void *)uint64_t v1 = &unk_26E6E0418;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitivePlaneComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65537;
  *(_WORD *)(v1 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 36) = result;
  *(_DWORD *)(v1 + 44) = 0;
  *(_WORD *)(v1 + 48) = 257;
  *(_DWORD *)(v1 + 52) = 2;
  *(_WORD *)(v1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(unsigned char *)(v1 + 58) = 1;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 65537;
  *(_WORD *)(v1 + 116) = 0;
  *(double *)(v1 + 120) = result;
  *(_DWORD *)(v1 + 128) = 0;
  *(_WORD *)(v1 + 132) = 257;
  *(_DWORD *)(v1 + 136) = 2;
  *(_WORD *)(v1 + 140) = 1;
  *(void *)uint64_t v1 = &unk_26E6EF1B8;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitivePyramidComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(_WORD *)(v1 + 28) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 32) = result;
  *(_DWORD *)(v1 + 40) = 1065353216;
  *(_WORD *)(v1 + 44) = 257;
  *(unsigned char *)(v1 + 46) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 50) = 1;
  *(_OWORD *)(v1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_WORD *)(v1 + 104) = 1;
  *(double *)(v1 + 108) = result;
  *(_DWORD *)(v1 + 116) = 1065353216;
  *(_WORD *)(v1 + 120) = 257;
  *(unsigned char *)(v1 + 122) = 0;
  *(_WORD *)(v1 + 124) = 1;
  *(void *)uint64_t v1 = &unk_26E6EF3C8;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveSphereComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(_WORD *)(v1 + 28) = 8;
  *(_DWORD *)(v1 + 32) = 1056964608;
  *(_WORD *)(v1 + 36) = 257;
  *(unsigned char *)(v1 + 38) = 0;
  *(_WORD *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 42) = 1;
  double result = 0.0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_WORD *)(v1 + 96) = 8;
  *(_DWORD *)(v1 + 100) = 1056964608;
  *(_WORD *)(v1 + 104) = 257;
  *(unsigned char *)(v1 + 106) = 0;
  *(_WORD *)(v1 + 108) = 1;
  *(void *)uint64_t v1 = &unk_26E6E0510;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveTetrahedronComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(_WORD *)(v1 + 28) = 1;
  *(_DWORD *)(v1 + 32) = 1065353216;
  *(_WORD *)(v1 + 36) = 257;
  *(unsigned char *)(v1 + 38) = 0;
  *(_WORD *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 42) = 1;
  double result = 0.0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_WORD *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 1065353216;
  *(_WORD *)(v1 + 104) = 257;
  *(unsigned char *)(v1 + 106) = 0;
  *(_WORD *)(v1 + 108) = 1;
  *(void *)uint64_t v1 = &unk_26E6EF6F0;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveTubeComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65544;
  double result = 0.00000190734908;
  *(void *)(v1 + 32) = 0x3EC000003F800000;
  *(_DWORD *)(v1 + 40) = 1056964608;
  *(_WORD *)(v1 + 44) = 257;
  *(unsigned char *)(v1 + 46) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 50) = 1;
  *(_OWORD *)(v1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 65544;
  *(void *)(v1 + 108) = 0x3EC000003F800000;
  *(_DWORD *)(v1 + 116) = 1056964608;
  *(_WORD *)(v1 + 120) = 257;
  *(unsigned char *)(v1 + 122) = 0;
  *(_WORD *)(v1 + 124) = 1;
  *(void *)uint64_t v1 = &unk_26E6EF900;
  return result;
}

id re::internal::defaultRetain<re::ecs2::PrimitiveBoxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveBoxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::PrimitiveCapsuleSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveCapsuleSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::PrimitiveConeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveConeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::PrimitiveCylinderSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveCylinderSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::PrimitivePlaneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitivePlaneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::PrimitivePyramidSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitivePyramidSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::PrimitiveSphereSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveSphereSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::PrimitiveTetrahedronSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveTetrahedronSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

id re::internal::defaultRetain<re::ecs2::PrimitiveTubeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveTubeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_VideoMaterialAttachment(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8FB30))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8FC78, "VideoMaterialAttachment");
    __cxa_guard_release(&qword_26AF8FB30);
  }
  return &unk_26AF8FC78;
}

void re::ecs2::initInfo_VideoMaterialAttachment(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x5307989427F46ACALL;
  v14[1] = "VideoMaterialAttachment";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB38, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8FB38);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "source";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF8FC00 = v8;
      char v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "parameterName";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF8FC08 = v12;
      __cxa_guard_release(&qword_26AF8FB38);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF8FC00;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoMaterialAttachment>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoMaterialAttachment>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoMaterialAttachment>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoMaterialAttachment>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::VideoMaterialAttachment>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[2] = 0;
  a3[3] = "";
}

void re::internal::defaultDestruct<re::ecs2::VideoMaterialAttachment>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

void *re::internal::defaultConstructV2<re::ecs2::VideoMaterialAttachment>(void *result)
{
  void *result = 0;
  result[1] = "";
  result[2] = 0;
  result[3] = "";
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::VideoMaterialAttachment>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t re::ecs2::introspect_VideoMaterialAttachment(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoMaterialAttachment", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoMaterialAttachment, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoMaterialAttachment, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoMaterialAttachment>, this);
}

void *re::ecs2::allocInfo_VideoComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8FB48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8FCF0, "VideoComponent");
    __cxa_guard_release(&qword_26AF8FB48);
  }
  return &unk_26AF8FCF0;
}

void re::ecs2::initInfo_VideoComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v55[0] = 0xEC997E67076F9DC4;
  v55[1] = "VideoComponent";
  re::StringID::destroyString((re::StringID *)v55);
  *((_OWORD *)this + 2) = v56;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB40, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF8FB40);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8FC10 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "material";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8FC18 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "m_video";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0xA800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF8FC20 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      BOOL v17 = re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(1);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "m_attachments";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x5000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF8FC28 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      long long v21 = re::ecs2::introspect_VideoViewingMode((re::ecs2 *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "desiredViewingMode";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x3800000008;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF8FC30 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      int v25 = re::ecs2::introspect_VideoViewingMode((re::ecs2 *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "currentViewingMode";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x3900000009;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF8FC38 = v26;
      char v27 = re::introspectionAllocator((re *)v26);
      uint64_t v28 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "currentImageSize";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x400000000ALL;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF8FC40 = v29;
      uint64_t v30 = re::introspectionAllocator((re *)v29);
      uint64_t v32 = re::introspect_BOOL((re *)1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "forceStereoSideBySide";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0x480000000BLL;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF8FC48 = v33;
      StringID v34 = re::introspectionAllocator((re *)v33);
      uint64_t v36 = re::introspect_BOOL((re *)1, v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "m_optOutOfAudioControl";
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x1230000000ELL;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF8FC50 = v37;
      uint64_t v38 = re::introspectionAllocator((re *)v37);
      uint64_t v40 = re::introspect_uint32_t((re *)1, v39);
      uint64_t v41 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v41 = 1;
      *(void *)(v41 + 8) = "m_traits";
      *(void *)(v41 + 16) = v40;
      *(void *)(v41 + 24) = 0;
      *(void *)(v41 + 32) = 0x1240000000FLL;
      *(_DWORD *)(v41 + 40) = 0;
      *(void *)(v41 + 48) = 0;
      *(void *)(v41 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_26AF8FC58 = v41;
      uint64_t v42 = re::introspectionAllocator((re *)v41);
      uint64_t v44 = re::introspect_BOOL((re *)1, v43);
      uint64_t v45 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 72, 8);
      *(_DWORD *)uint64_t v45 = 1;
      *(void *)(v45 + 8) = "m_readyToRender";
      *(void *)(v45 + 16) = v44;
      *(void *)(v45 + 24) = 0;
      *(void *)(v45 + 32) = 0x4900000010;
      *(_DWORD *)(v45 + 40) = 0;
      *(void *)(v45 + 48) = 0;
      *(void *)(v45 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_26AF8FC60 = v45;
      long long v46 = re::introspectionAllocator((re *)v45);
      uint64_t v48 = re::introspect_BOOL((re *)1, v47);
      uint64_t v49 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v46 + 32))(v46, 72, 8);
      *(_DWORD *)uint64_t v49 = 1;
      *(void *)(v49 + 8) = "m_videoReceiverCreated";
      *(void *)(v49 + 16) = v48;
      *(void *)(v49 + 24) = 0;
      *(void *)(v49 + 32) = 0x13600000011;
      *(_DWORD *)(v49 + 40) = 0;
      *(void *)(v49 + 48) = 0;
      *(void *)(v49 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_26AF8FC68 = v49;
      long long v50 = re::introspectionAllocator((re *)v49);
      uint64_t v52 = re::introspect_BOOL((re *)1, v51);
      uint64_t v53 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v50 + 32))(v50, 72, 8);
      *(_DWORD *)uint64_t v53 = 1;
      *(void *)(v53 + 8) = "m_specularAndFresnelEnabled";
      *(void *)(v53 + 16) = v52;
      *(void *)(v53 + 24) = 0;
      *(void *)(v53 + 32) = 0x13700000012;
      *(_DWORD *)(v53 + 40) = 0;
      *(void *)(v53 + 48) = 0;
      *(void *)(v53 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_26AF8FC70 = v53;
      __cxa_guard_release(&qword_26AF8FB40);
    }
  }
  *((void *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((void *)this + 8) = &qword_26AF8FC10;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v54 = v56;
}

double re::internal::defaultConstruct<re::ecs2::VideoComponent>(int a1, int a2, re::ecs2::VideoComponent *this)
{
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::VideoComponent::VideoComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::VideoComponent>(re::ecs2::VideoComponent *this)
{
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::VideoComponent::VideoComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoComponent>, this);
}

void *re::ecs2::allocInfo_VideoComponentSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8FB50))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8FD68, "VideoComponentSystem");
    __cxa_guard_release(&qword_26AF8FB50);
  }
  return &unk_26AF8FD68;
}

void re::ecs2::initInfo_VideoComponentSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xF12E313453CDF762;
  v5[1] = "VideoComponentSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_VideoComponentSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoComponentSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoComponentSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::VideoComponentSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::VideoComponentSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoComponentSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoComponentSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::VideoComponentSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1, 1);
  *(void *)uint64_t v3 = &unk_26E708FD8;
  *(unsigned char *)(v3 + 104) = 0;
  *(void *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::VideoComponentSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::VideoComponentSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1, 1);
  *(void *)uint64_t v1 = &unk_26E708FD8;
  *(unsigned char *)(v1 + 104) = 0;
  *(void *)(v1 + 200) = 0;
  *(_DWORD *)(v1 + 208) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::VideoComponentSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VideoComponentSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoComponentSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoComponentSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoComponentSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoComponentSystem>, this);
}

uint64_t re::ecs2::VideoMaterialAttachment::isTextureAttachment(re::ecs2::VideoMaterialAttachment *this, const re::StringID *a2)
{
  uint64_t v2 = *(void *)this >> 1;
  if (v2 == 0x32970A2E88169C84)
  {
    uint64_t v5 = (const char *)*((void *)this + 1);
    if (v5 != "REVideoAttachmentConstantImageFunction") {
      return strcmp(v5, "REVideoAttachmentConstantImageFunction") != 0;
    }
  }
  else
  {
    if (v2 != 0x41C03F11B6A8BA59) {
      return 1;
    }
    uint64_t v3 = (const char *)*((void *)this + 1);
    if (v3 != "REVideoAttachmentConstantYCbCrMatrix")
    {
      uint64_t result = strcmp(v3, "REVideoAttachmentConstantYCbCrMatrix");
      if (!result) {
        return result;
      }
      return 1;
    }
  }
  return 0;
}

void re::ecs2::VideoComponent::~VideoComponent(re::ecs2::VideoComponent *this)
{
  *(void *)this = &unk_26E708F80;
  uint64_t v2 = (re::ecs2::VideoComponent *)((char *)this + 32);
  re::AssetHandle::~AssetHandle((re::ecs2::VideoComponent *)((char *)this + 168));
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)this + 120);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)this + 80);
  re::AssetHandle::~AssetHandle(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::VideoComponent::~VideoComponent(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::VideoComponent::removeAttachment(uint64_t a1, const StringID *a2)
{
  re::StringID::StringID((re::StringID *)v30, a2);
  uint64_t v28 = (StringID *)a2;
  re::StringID::StringID((re::StringID *)v31, a2 + 1);
  unint64_t v4 = *(void *)(a1 + 96);
  if (!v4) {
    goto LABEL_19;
  }
  uint64_t v29 = a1;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 112);
    uint64_t v8 = v30[0];
    char v9 = (uint64_t *)(v7 + 32 * v6);
    unint64_t v10 = *v9;
    if ((v30[0] ^ (unint64_t)*v9) <= 1) {
      break;
    }
LABEL_13:
    if (v6 != v5)
    {
      BOOL v17 = (unint64_t *)(v7 + 32 * v5);
      uint64_t v18 = v9[1];
      *char v9 = 0;
      v9[1] = (uint64_t)"";
      unint64_t v19 = v17[1];
      unint64_t v32 = v10 & 0xFFFFFFFFFFFFFFFELL | *v17 & 1;
      unint64_t v33 = v19;
      unint64_t *v17 = v10;
      v17[1] = v18;
      re::StringID::destroyString((re::StringID *)&v32);
      uint64_t v20 = v7 + 32 * v6;
      unint64_t v21 = *(void *)(v20 + 16);
      unint64_t v22 = *(void *)(v20 + 24);
      *(void *)(v20 + 16) = 0;
      *(void *)(v20 + 24) = "";
      unint64_t v23 = v17[2];
      unint64_t v24 = v17[3];
      void v17[2] = v21;
      v17[3] = v22;
      unint64_t v32 = v21 & 0xFFFFFFFFFFFFFFFELL | v23 & 1;
      unint64_t v33 = v24;
      re::StringID::destroyString((re::StringID *)&v32);
      unint64_t v4 = *(void *)(a1 + 96);
    }
    ++v6;
    ++v5;
    if (v6 >= v4) {
      goto LABEL_18;
    }
  }
  uint64_t v12 = (const char *)v30[1];
  unint64_t v11 = v31[0];
  long long v13 = (const char *)v31[1];
  while (1)
  {
    uint64_t v14 = (const char *)v9[1];
    if (v14 != v12 && strcmp(v14, v12)
      || (v11 ^ v9[2]) > 1
      || (uint64_t v15 = (const char *)v9[3], v15 != v13) && strcmp(v15, v13))
    {
LABEL_12:
      a1 = v29;
      goto LABEL_13;
    }
    if (++v6 >= v4) {
      break;
    }
    unint64_t v16 = v9[4];
    v9 += 4;
    unint64_t v10 = v16;
    if ((v8 ^ v16) > 1) {
      goto LABEL_12;
    }
  }
  a1 = v29;
LABEL_18:
  if (v5 != v4)
  {
    uint64_t v25 = *(void *)(a1 + 112) + 32 * v5;
    uint64_t v26 = 32 * v4 - 32 * v5;
    do
    {
      re::StringID::destroyString((re::StringID *)(v25 + 16));
      re::StringID::destroyString((re::StringID *)v25);
      v25 += 32;
      v26 -= 32;
    }
    while (v26);
    uint64_t v27 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = v5;
    ++*(_DWORD *)(a1 + 104);
    re::StringID::destroyString((re::StringID *)v31);
    re::StringID::destroyString((re::StringID *)v30);
    if (v27 != v5) {
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add((_anonymous_namespace_ *)(a1 + 120), v28);
    }
  }
  else
  {
LABEL_19:
    re::StringID::destroyString((re::StringID *)v31);
    re::StringID::destroyString((re::StringID *)v30);
  }
}

uint64_t re::ecs2::VideoComponent::getReadyToRender(re::ecs2::VideoComponent *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = (re *)re::VideoDefaults::logEnabled(this);
  if (v2)
  {
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = *(void *)(v4 + 296);
    uint64_t v6 = *(void *)(v4 + 24);
    if (!v6 || (*(unsigned char *)(v6 + 288) & 0x80) != 0)
    {
      unint64_t v10 = *re::videoLogObjects(v2);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        return *((unsigned __int8 *)this + 73);
      }
      long long v13 = @"True";
      if (!*((unsigned char *)this + 73)) {
        long long v13 = @"False";
      }
      int v15 = 138412546;
      unint64_t v16 = v13;
      __int16 v17 = 2048;
      uint64_t v18 = v5;
      uint64_t v12 = "[VideoComponentSystem]->getReadyToRender :: Getting isReadyToRender to %@ with VideoComponent with EntityID %llu";
    }
    else
    {
      uint64_t v7 = *(void *)(v6 + 296);
      uint64_t v8 = *(void *)(v6 + 24);
      if (!v8 || (*(unsigned char *)(v8 + 288) & 0x80) != 0)
      {
        unint64_t v10 = *re::videoLogObjects(v2);
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
          return *((unsigned __int8 *)this + 73);
        }
        uint64_t v14 = @"True";
        if (!*((unsigned char *)this + 73)) {
          uint64_t v14 = @"False";
        }
        int v15 = 138412546;
        unint64_t v16 = v14;
        __int16 v17 = 2048;
        uint64_t v18 = v7;
        uint64_t v12 = "[VideoComponentSystem]->getReadyToRender :: Getting isReadyToRender to %@ with VideoComponent Parent with EntityID %llu";
      }
      else
      {
        uint64_t v9 = *(void *)(v8 + 296);
        unint64_t v10 = *re::videoLogObjects(v2);
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
          return *((unsigned __int8 *)this + 73);
        }
        unint64_t v11 = @"True";
        if (!*((unsigned char *)this + 73)) {
          unint64_t v11 = @"False";
        }
        int v15 = 138412546;
        unint64_t v16 = v11;
        __int16 v17 = 2048;
        uint64_t v18 = v9;
        uint64_t v12 = "[VideoComponentSystem]->getReadyToRender :: Getting isReadyToRender to %@ with VideoComponent Parent Paren"
              "t with EntityID %llu";
      }
    }
    _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v15, 0x16u);
  }
  return *((unsigned __int8 *)this + 73);
}

void re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded(re::ecs2::VideoComponent *this)
{
  uint64_t v2 = (re::ecs2::VideoComponent *)((char *)this + 32);
  uint64_t v3 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::VideoComponent *)((char *)this + 32));
  uint64_t v4 = (uint64_t *)((char *)this + 280);
  if (!v3)
  {
    *(_DWORD *)((char *)this + 287) = 0;
    *uint64_t v4 = 0;
    return;
  }
  uint64_t v5 = v3;
  uint64_t v6 = *v4;
  uint64_t v7 = *((void *)re::AssetHandle::assetInfo(v2) + 10);
  if (v7 == -1) {
    uint64_t v7 = 0;
  }
  if (v6 != v7)
  {
    uint64_t v8 = *((void *)re::AssetHandle::assetInfo(v2) + 10);
    if (v8 == -1) {
      uint64_t v8 = 0;
    }
    *uint64_t v4 = v8;
    uint64_t v9 = *(void *)(v5 + 1664);
    if (v9)
    {
      unint64_t v10 = *(void **)(v9 + 16);
      if (v10)
      {
        unint64_t v11 = v10 + 1;
        uint64_t v12 = v10[15];
        if (v12)
        {
          BOOL v13 = 0;
          BOOL v14 = 0;
          int v15 = (const char ***)v10[16];
          uint64_t v16 = 8 * v12;
          while (1)
          {
            __int16 v17 = *v15;
            if (v13)
            {
              BOOL v13 = 1;
              if (v14) {
                goto LABEL_15;
              }
            }
            else
            {
              BOOL v13 = strcmp(*v17, "VideoColor") == 0;
              if (v14)
              {
LABEL_15:
                BOOL v14 = 1;
                goto LABEL_16;
              }
            }
            BOOL v14 = strcmp(*v17, "VideoColorOpaque") == 0;
LABEL_16:
            ++v15;
            v16 -= 8;
            if (!v16) {
              goto LABEL_22;
            }
          }
        }
        BOOL v14 = 0;
        BOOL v13 = 0;
LABEL_22:
        uint64_t v45 = v10 + 34;
        unint64_t v19 = v10[36];
        if (v19 < 0x10) {
          goto LABEL_28;
        }
        uint64_t v20 = 0;
        uint64_t v21 = v10[34];
        unint64_t v22 = v19 >> 4;
        while (1)
        {
          unsigned __int16 v23 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v21 + v20)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
          uint64_t v46 = (unsigned __int16)~v23;
          if (v23 != 0xFFFF) {
            break;
          }
          v20 += 16;
          if (!--v22) {
            goto LABEL_28;
          }
        }
        uint64_t v24 = __clz(__rbit64((unsigned __int16)~v23)) + v20;
        uint64_t v47 = v24;
        if (v24 == -1)
        {
LABEL_28:
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          uint64_t v42 = 0;
LABEL_29:
          uint64_t v45 = v10 + 100;
          unint64_t v25 = v10[102];
          if (v25 < 0x10) {
            goto LABEL_35;
          }
          uint64_t v26 = 0;
          uint64_t v27 = v10[100];
          unint64_t v28 = v25 >> 4;
          while (1)
          {
            unsigned __int16 v29 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v27 + v26)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            uint64_t v46 = (unsigned __int16)~v29;
            if (v29 != 0xFFFF) {
              break;
            }
            v26 += 16;
            if (!--v28) {
              goto LABEL_35;
            }
          }
          uint64_t v30 = __clz(__rbit64((unsigned __int16)~v29)) + v26;
          uint64_t v47 = v30;
          if (v30 == -1)
          {
LABEL_35:
            uint64_t v41 = 0;
            char v31 = 0;
            char v32 = 0;
            char v33 = 0;
            char v34 = 0;
            char v35 = 0;
            char v36 = 0;
LABEL_36:

            LOBYTE(v9) = v31 & v32 & v33 & v34 & v35 & v36;
            char v18 = v42 & BYTE4(v42) & v43 & v44 & BYTE4(v43) & BYTE4(v44) & BYTE4(v41) & v41;
            goto LABEL_37;
          }
          char v36 = 0;
          char v35 = 0;
          char v34 = 0;
          char v33 = 0;
          char v32 = 0;
          char v31 = 0;
          uint64_t v41 = 0;
          while (1)
          {
            uint64_t v40 = *(void *)(v45[1] + 40 * v30 + 16);
            if (v40 <= 0x434F49B34064CA12)
            {
              switch(v40)
              {
                case 0x267D7E6C64117D48:
                  BYTE4(v41) = 1;
                  break;
                case 0x434F49B3406455B4:
                  char v31 = 1;
                  break;
                case 0x434F49B3406455D3:
                  char v34 = 1;
                  break;
                default:
                  goto LABEL_73;
              }
            }
            else if (v40 > 0x434F49B340653E71)
            {
              if (v40 == 0x434F49B340653E72)
              {
                char v33 = 1;
              }
              else
              {
                if (v40 != 0x5D7F34ED9D59B3C2)
                {
LABEL_73:
                  if (v40 == 0x434F49B340653E91) {
                    char v36 = 1;
                  }
                  goto LABEL_76;
                }
                LOBYTE(v41) = 1;
              }
            }
            else if (v40 == 0x434F49B34064CA13)
            {
              char v32 = 1;
            }
            else
            {
              if (v40 != 0x434F49B34064CA32) {
                goto LABEL_73;
              }
              char v35 = 1;
            }
LABEL_76:
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v45);
            uint64_t v30 = v47;
            if (v47 == -1) {
              goto LABEL_36;
            }
          }
        }
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        while (1)
        {
          uint64_t v37 = *(void *)(v45[1] + 40 * v24 + 16);
          if (v37 <= 0x2BBFE8D1A11FB57DLL)
          {
            if (v37 == 0x9A2E8768349D9F0)
            {
              LOBYTE(v42) = 1;
            }
            else
            {
              if (v37 != 0x18BC3918B0504006)
              {
LABEL_51:
                BOOL v38 = v37 == 0x732BCA85D2D0C82ALL;
                int v39 = HIDWORD(v44);
                if (v38) {
                  int v39 = 1;
                }
                HIDWORD(v44) = v39;
                goto LABEL_55;
              }
              LOBYTE(v44) = 1;
            }
          }
          else
          {
            switch(v37)
            {
              case 0x2BBFE8D1A11FB57ELL:
                BYTE4(v43) = 1;
                break;
              case 0x5249524C852BDF88:
                LOBYTE(v43) = 1;
                break;
              case 0x76E0F7428E3A3C5ALL:
                BYTE4(v42) = 1;
                break;
              default:
                goto LABEL_51;
            }
          }
LABEL_55:
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v45);
          uint64_t v24 = v47;
          if (v47 == -1) {
            goto LABEL_29;
          }
        }
      }
      LOBYTE(v9) = 0;
    }
    char v18 = 0;
    BOOL v14 = 0;
    BOOL v13 = 0;
LABEL_37:
    *((unsigned char *)this + 288) = v13 && v14;
    *((unsigned char *)this + 289) = v18 & 1;
    *((unsigned char *)this + 290) = v9 & 1;
  }
}

uint64_t re::ecs2::VideoComponent::getAverageColor(re::ecs2::VideoComponent *this)
{
  if (*((void *)this + 22))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v5, (re::ecs2::VideoComponent *)((char *)this + 168));
    uint64_t v1 = re::VideoAsset::loadAndConnectForRendering(v5);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
    if (v1) {
      return *((void *)v1 + 78);
    }
  }
  if ((atomic_exchange((atomic_uchar *volatile)&re::ecs2::VideoComponent::getAverageColor(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v3 = *re::videoLogObjects(this);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get average color", v4, 2u);
    }
  }
  return 0;
}

BOOL re::ecs2::VideoComponent::isVideoBlurTextureAvailable(re::ecs2::VideoComponent *this)
{
  if (*((void *)this + 22))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v6, (re::ecs2::VideoComponent *)((char *)this + 168));
    uint64_t v1 = re::VideoAsset::loadAndConnectForRendering(v6);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
    if (v1) {
      return *((unsigned char *)v1 + 250) != 0;
    }
  }
  if ((atomic_exchange((atomic_uchar *volatile)&re::ecs2::VideoComponent::isVideoBlurTextureAvailable(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v3 = *re::videoLogObjects(this);
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v4) {
      return result;
    }
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get whether video blur texture is available", v5, 2u);
  }
  return 0;
}

float re::TargetDisplayInfoProvider::{unnamed type#9}::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)v2 + 16);
    v3();
  }
  else
  {
    if ((atomic_exchange((atomic_uchar *volatile)&re::TargetDisplayInfoProvider::{unnamed type#9}::operator()(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      uint64_t v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Current max nits provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

float re::TargetDisplayInfoProvider::{unnamed type#8}::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)v2 + 16);
    v3();
  }
  else
  {
    if ((atomic_exchange((atomic_uchar *volatile)&re::TargetDisplayInfoProvider::{unnamed type#8}::operator()(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      uint64_t v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Current min nits provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

uint64_t re::TargetDisplayInfoProvider::{unnamed type#3}::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 16);
    return v3();
  }
  else
  {
    if ((atomic_exchange((atomic_uchar *volatile)&re::TargetDisplayInfoProvider::{unnamed type#3}::operator()(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      uint64_t v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Display max brightness nits provider has not been set.", v6, 2u);
      }
    }
    return *(unsigned int *)(a1 + 40);
  }
}

float re::TargetDisplayInfoProvider::{unnamed type#11}::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)v2 + 16);
    v3();
  }
  else
  {
    if ((atomic_exchange((atomic_uchar *volatile)&re::TargetDisplayInfoProvider::{unnamed type#11}::operator()(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      uint64_t v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Max EDR value provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

void re::ecs2::VideoComponent::processAttachments(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, char a7, int a8)
{
  uint64_t v195 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(v12 + 248);
  if (v13)
  {
    uint64_t v14 = *(void *)(v12 + 176);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 88);
      uint64_t v16 = *(void *)(v14 + 72);
      if (v16)
      {
        uint64_t v17 = 24 * v16;
        uint64_t v18 = v15;
        while (*(void *)(v18 + 8) != *(void *)(a1 + 40))
        {
          v18 += 24;
          v17 -= 24;
          if (!v17)
          {
            uint64_t v18 = v15 + 24 * v16;
            break;
          }
        }
      }
      else
      {
        uint64_t v18 = v15;
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v15) >> 3);
      if (v19 != v16 && v19 < *(void *)(v13 + 48)) {
        *(_DWORD *)(a1 + 312) = *(unsigned __int8 *)(*(void *)(v13 + 64) + 18 * v19 + 5);
      }
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB58, memory_order_acquire) & 1) == 0)
  {
    int v150 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_26AF8FB58);
    if (v150)
    {
      int v151 = re::VideoDefaults::overrideStereoMode(v150);
      if (v151 >= 5) {
        int v152 = 5;
      }
      else {
        int v152 = v151;
      }
      if (v152 < 0) {
        int v152 = -1;
      }
      _MergedGlobals_325 = v152;
      __cxa_guard_release(&qword_26AF8FB58);
    }
  }
  uint64_t v20 = (re::VideoPlatform *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(*(re::RenderManager ***)(a2 + 24), *(void *)(*(void *)(a1 + 16) + 296));
  *(unsigned char *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 204) = 0;
  isLegacyDevice = (re::VideoPlatform *)re::VideoPlatform::isLegacyDevice(v20);
  if (isLegacyDevice)
  {
    *(unsigned char *)(a1 + 216) = 1;
    *(unsigned char *)(a1 + 205) = 1;
  }
  uint64_t v157 = a2;
  char v22 = 0;
  uint64_t v23 = 0;
  while (1)
  {
    while (1)
    {
      char v24 = v22;
      unint64_t v25 = (void *)(a3 + 144 * v23);
      if (v25[1])
      {
        if (*v25)
        {
          uint64_t v26 = a3 + 144 * v23;
          if (*(void *)(v26 + 24))
          {
            if (*(void *)(v26 + 16)) {
              break;
            }
          }
        }
      }
      *(unsigned char *)(a1 + 204) = 0;
      char v22 = 1;
      uint64_t v23 = 1;
      if (v24) {
        goto LABEL_29;
      }
    }
    isLegacyDevice = (re::VideoPlatform *)re::VideoPlatform::isLegacyDevice(isLegacyDevice);
    if (!isLegacyDevice) {
      break;
    }
    uint64_t v27 = a3 + 144 * v23;
    if (*(void *)(v27 + 40)) {
      BOOL v28 = *(void *)(v27 + 32) != 0;
    }
    else {
      BOOL v28 = 0;
    }
    *(unsigned char *)(a1 + 204) = v28;
    char v29 = v24 | v28;
    uint64_t v23 = 1;
    char v22 = 1;
    if (v29) {
      goto LABEL_29;
    }
  }
  *(unsigned char *)(a1 + 204) = 1;
LABEL_29:
  char v30 = 0;
  *(_DWORD *)(a1 + 212) = 0;
  uint64_t v31 = 1;
  char v32 = (os_unfair_lock_s **)a3;
  while (1)
  {
    char v33 = v30;
    if (v32[1] && *v32)
    {
      re::TextureHandle::metalTexture(v32, buf);
      char v34 = *(void **)buf;
      char v32 = (os_unfair_lock_s **)objc_msgSend(*(id *)buf, sel_mipmapLevelCount);
      unint64_t v35 = (unint64_t)v32;
      if (v34) {

      }
      if (v35 >= 2) {
        break;
      }
    }
    char v32 = (os_unfair_lock_s **)(a3 + 144 * v31);
    char v30 = 1;
    uint64_t v31 = 2;
    if (v33) {
      goto LABEL_38;
    }
  }
  *(_DWORD *)(a1 + 212) = 1;
LABEL_38:
  *(unsigned char *)(a1 + 207) = 0;
  uint64_t v36 = a2;
  if (a2)
  {
    char v32 = (os_unfair_lock_s **)re::VideoDefaults::inverseToneMappingAllowed((re::VideoDefaults *)v32);
    if (v32) {
      BOOL v37 = *(unsigned char *)(a2 + 255) != 0;
    }
    else {
      BOOL v37 = 0;
    }
    *(unsigned char *)(a1 + 207) = v37;
  }
  BOOL v38 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v32);
  if (v38)
  {
    uint64_t v129 = (id)*re::videoLogObjects(v38);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 207)) {
        uint64_t v130 = "true";
      }
      else {
        uint64_t v130 = "false";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v130;
      _os_log_impl(&dword_233120000, v129, OS_LOG_TYPE_DEFAULT, "Needs Inverse Tone-mapping: %s", buf, 0xCu);
    }
  }
  *(unsigned char *)(a1 + 208) = 0;
  if ((a7 & 1) == 0)
  {
    for (uint64_t i = 0; i != 288; i += 144)
    {
      uint64_t v40 = &v166[i];
      *((void *)v40 + 16) = 0;
      *((_DWORD *)v40 + 30) = 0;
      *(_OWORD *)uint64_t v40 = 0uLL;
      *((_OWORD *)v40 + 1) = 0uLL;
      *((_OWORD *)v40 + 2) = 0uLL;
      *((_OWORD *)v40 + 3) = 0uLL;
      *((_OWORD *)v40 + 4) = 0uLL;
      *((_OWORD *)v40 + 5) = 0uLL;
      *(_OWORD *)(v40 + 92) = 0uLL;
    }
    uint64_t v41 = (re::VideoDefaults *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)buf, a3, a3 + 288, (uint64_t)v166);
    int v173 = *(_DWORD *)(a3 + 288);
    char v174 = *(unsigned char *)(a3 + 292);
    if (a2 && a6)
    {
      uint64_t v42 = *(float **)(a2 + 152);
      if (v42)
      {
        uint64_t v43 = (re::VideoPlatform *)re::VideoDefaults::logEnabled(v41);
        if (!v43)
        {
LABEL_51:
          uint64_t v44 = (re::VideoSDRDefaults *)re::VideoPlatform::isLegacyDevice(v43);
          if ((v44 & 1) != 0
            || (int v45 = v171, !re::VideoSDRDefaults::gammaToneCurveAllowed(v44))
            || (re::CoreVideoUtils::metalPixelFormatHasHardwareTransferFunction(v167) & 1) != 0
            || (re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1),
                !*(unsigned char *)(a1 + 289))
            || !v170
            || v45 == 8)
          {
            v189[0] = 0;
            *(void *)buf = 0x9A2E8768349D9F0;
            re::MaterialParameterBlock::setConstant(v20, (uint64_t *)buf, 1uLL, v189, 2, (uint64_t)v194);
            char v155 = 0;
            *(void *)int v194 = 0;
          }
          else
          {
            uint64_t v46 = re::VideoColorTransformBase::gammaToneCurve(&v170, (uint64_t)buf);
            if (buf[0])
            {
              *(_OWORD *)uint64_t v189 = *(_OWORD *)&buf[4];
              long long v190 = *(_OWORD *)&buf[20];
              if (re::VideoDefaults::logEnabled(v46))
              {
                int v144 = (void *)[objc_alloc(MEMORY[0x263F089D8]) initWithString:@"Applying Gamma Tone Curve:"];
                re::CoreVideoUtils::printColorTransformInfo(&v170, v144);
                v146 = *re::videoLogObjects(v145);
                if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
                {
                  id v147 = v144;
                  uint64_t v148 = v146;
                  uint64_t v149 = [v147 cStringUsingEncoding:1];
                  *(_DWORD *)int v194 = 136315138;
                  *(void *)&v194[4] = v149;
                  _os_log_impl(&dword_233120000, v148, OS_LOG_TYPE_DEFAULT, "%s", v194, 0xCu);
                }
                uint64_t v36 = v157;
              }
              id v186 = *(id *)(v36 + 184);
              re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(a6, &v186, *(os_unfair_lock_s **)(v36 + 64), (uint64_t)v189, (re::TextureHandle *)v183);

              LOBYTE(v182[0]) = 1;
              v185[0] = 0x9A2E8768349D9F0;
              re::MaterialParameterBlock::setConstant(v20, v185, 1uLL, v182, 2, (uint64_t)v194);
              *(void *)int v194 = 0;
              uint64_t v184 = 0x5D7F34ED9D59B3C2;
              re::MaterialParameterBlock::setTextureHandle(v20, &v184, (re::TextureHandle *)v183, (uint64_t)v185);
              v185[0] = 0;
              uint64_t v184 = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)v183);
            }
            else
            {
              uint64_t v143 = *re::videoLogObjects(v46);
              if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v189 = 0;
                _os_log_impl(&dword_233120000, v143, OS_LOG_TYPE_DEFAULT, "SDR color transform has no gamma tone curve parameters.", v189, 2u);
              }
              LOBYTE(v185[0]) = 0;
              *(void *)uint64_t v189 = 0x9A2E8768349D9F0;
              re::MaterialParameterBlock::setConstant(v20, (uint64_t *)v189, 1uLL, v185, 2, (uint64_t)v194);
              *(void *)int v194 = 0;
              uint64_t v36 = v157;
            }
            char v155 = 1;
          }
          unsigned int v50 = *(unsigned __int8 *)v42;
          if (v169 == v50)
          {
            re::VideoSDRDefaults::colorSpaceTransformationAllowed(v47);
          }
          else
          {
            if (v170 && (uint64_t v47 = re::VideoColorTransformBase::conversionMatrix(&v170, (uint64_t)buf), buf[0]))
            {
              uint64_t v51 = (re *)re::VideoDefaults::logEnabled(v47);
              if (v51)
              {
                uint64_t v141 = *re::videoLogObjects(v51);
                uint64_t v51 = (re *)os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT);
                if (v51)
                {
                  *(_WORD *)uint64_t v189 = 0;
                  _os_log_impl(&dword_233120000, v141, OS_LOG_TYPE_DEFAULT, "Color Space Transformation matrix computed using VideoColorTransform", v189, 2u);
                }
              }
              long long v158 = *(_OWORD *)&buf[16];
              long long v154 = *(_OWORD *)&buf[32];
              long long v52 = v193;
            }
            else
            {
              uint64_t v53 = (re *)re::VideoDefaults::logEnabled(v47);
              if (v53)
              {
                uint64_t v142 = *re::videoLogObjects(v53);
                if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_233120000, v142, OS_LOG_TYPE_DEFAULT, "SDR color transform has no color transformation matrix. Using fallback matrix instead", buf, 2u);
                }
              }
              re::ColorHelpers::computeGamutTransformMatrix(v169, v50, (uint64_t)buf);
              long long v158 = *(_OWORD *)buf;
              long long v154 = *(_OWORD *)&buf[16];
              long long v52 = *(_OWORD *)&buf[32];
            }
            long long v153 = v52;
            if (re::VideoSDRDefaults::colorSpaceTransformationAllowed(v51))
            {
              int v54 = 1;
              *(unsigned char *)(a1 + 205) = 1;
              *(_OWORD *)buf = v158;
              *(_OWORD *)&uint8_t buf[16] = v154;
              *(_OWORD *)&buf[32] = v153;
              *(void *)uint64_t v189 = 0x30C8E7322C94082DLL;
              re::MaterialParameterBlock::setConstant(v20, (uint64_t *)v189, 0x30uLL, buf, 49, (uint64_t)v183);
              v183[0] = 0;
              LOBYTE(v181[0]) = 1;
              *(void *)uint64_t v189 = 0x76E0F7428E3A3C5ALL;
              re::MaterialParameterBlock::setConstant(v20, (uint64_t *)v189, 1uLL, v181, 2, (uint64_t)v182);
              v182[0] = 0;
              *(_OWORD *)uint64_t v189 = v158;
              long long v190 = v154;
              long long v191 = v153;
              v180[0] = 0x5249524C852BDF88;
              re::MaterialParameterBlock::setConstant(v20, v180, 0x30uLL, v189, 49, (uint64_t)v181);
              v181[0] = 0;
LABEL_78:
              unsigned __int32 v55 = *(void **)(v36 + 288);
              float v56 = re::TargetDisplayInfoProvider::{unnamed type#9}::operator()((uint64_t)(v55 + 48));
              float v57 = re::TargetDisplayInfoProvider::{unnamed type#8}::operator()((uint64_t)(v55 + 42));
              uint64_t v58 = (re::VideoSDRDefaults *)re::TargetDisplayInfoProvider::{unnamed type#3}::operator()((uint64_t)(v55 + 12));
              float v59 = *(float *)(*(void *)(v36 + 112) + 2180);
              float v60 = v56 * (float)(v59 + (float)(v42[41] * (float)(v42[42] - v59)));
              float v61 = 1.0;
              if (v56 > 0.0001)
              {
                if (v60 <= 0.0001)
                {
                  float v61 = 1.22;
                }
                else
                {
                  float v62 = 1.0 - (float)(v60 / v56);
                  if (v62 > 1.0) {
                    float v62 = 1.0;
                  }
                  if (v62 < 0.0) {
                    float v62 = 0.0;
                  }
                  float v63 = (float)(v62 * 0.22) + 1.0;
                  if (v63 > 1.22) {
                    float v63 = 1.22;
                  }
                  if (v63 >= 1.0) {
                    float v61 = v63;
                  }
                  else {
                    float v61 = 1.0;
                  }
                }
              }
              float v64 = v56 / (float)v58;
              if (v64 > 1.0) {
                float v64 = 1.0;
              }
              if (v64 >= 0.0) {
                float v65 = v64;
              }
              else {
                float v65 = 0.0;
              }
              int v66 = re::VideoSDRDefaults::brightnessScalingAllowed(v58);
              if (v55[52]) {
                int v67 = v66;
              }
              else {
                int v67 = 0;
              }
              if (!v55[16]) {
                int v67 = 0;
              }
              if (v55[76]) {
                int v68 = v67;
              }
              else {
                int v68 = 0;
              }
              LOBYTE(v177[0]) = 0;
              v179[0] = 0x18BC3918B0504006;
              re::MaterialParameterBlock::setConstant(v20, v179, 1uLL, v177, 2, (uint64_t)v180);
              v180[0] = 0;
              if (v68 == 1)
              {
                *(float *)v176 = v65;
                v177[0] = 0x2BBFE8D1A11FB57ELL;
                re::MaterialParameterBlock::setConstant(v20, v177, 4uLL, v176, 1, (uint64_t)v179);
                v179[0] = 0;
              }
              if (!re::VideoSDRDefaults::gammaBoostAllowed(v69) || v174 || v168 == 2)
              {
                v187[0] = 0;
                v176[0] = 0x732BCA85D2D0C82ALL;
                re::MaterialParameterBlock::setConstant(v20, v176, 1uLL, v187, 2, (uint64_t)v177);
                char v70 = 0;
                v177[0] = 0;
              }
              else
              {
                id v178 = *(id *)(v36 + 184);
                re::VideoColorManager::computeBoostPowerFunctionTable(a6, &v178, *(os_unfair_lock_s **)(v36 + 64), (re::TextureHandle *)v187, v61);

                char v70 = 1;
                LOBYTE(v175) = 1;
                v176[0] = 0x732BCA85D2D0C82ALL;
                re::MaterialParameterBlock::setConstant(v20, v176, 1uLL, &v175, 2, (uint64_t)v177);
                v177[0] = 0;
                uint64_t v175 = 0x267D7E6C64117D48;
                re::MaterialParameterBlock::setTextureHandle(v20, &v175, (re::TextureHandle *)v187, (uint64_t)v176);
                v176[0] = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)v187);
              }
              if (re::VideoDefaults::logEnabled(v71))
              {
                uint64_t v135 = [MEMORY[0x263F089D8] stringWithFormat:@"SDR Processing Parameters"];
                objc_msgSend(v135, "appendFormat:", @"\n                    Current Max Nits: %f", v56);
                objc_msgSend(v135, "appendFormat:", @"\n                        Minimum Nits: %f", v57);
                objc_msgSend(v135, "appendFormat:", @"\n               Ambient Light in Nits: %f", v60);
                objc_msgSend(v135, "appendFormat:", @"\n         Mean Passthrough Brightness: %f", v59);
                objc_msgSend(v135, "appendFormat:", @"\n                        PreBlendMode: %s", "True");
                objc_msgSend(v135, "appendFormat:", @"\n              VideoBrightnessScaling: %s", "False");
                objc_msgSend(v135, "appendFormat:", @"\n                    Brightness Scale: %f", v65);
                objc_msgSend(v135, "appendFormat:", @"\n                         Gamma Boost: %f", v61);
                if (v54) {
                  uint64_t v136 = "True";
                }
                else {
                  uint64_t v136 = "False";
                }
                uint64_t v137 = *re::videoLogObjects((re *)objc_msgSend(v135, "appendFormat:", @"\n          Color Space Transformation: %s", v136));
                if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
                {
                  id v138 = v135;
                  uint64_t v139 = v137;
                  uint64_t v140 = [v138 cStringUsingEncoding:1];
                  *(_DWORD *)unsigned int v187 = 136315138;
                  uint64_t v188 = v140;
                  _os_log_impl(&dword_233120000, v139, OS_LOG_TYPE_DEFAULT, "%s", v187, 0xCu);
                }
              }
              *(unsigned char *)(a1 + 208) = v54 | v155 | v70 | v68;
              goto LABEL_112;
            }
          }
          LOBYTE(v183[0]) = 0;
          *(void *)uint64_t v189 = 0x76E0F7428E3A3C5ALL;
          re::MaterialParameterBlock::setConstant(v20, (uint64_t *)v189, 1uLL, v183, 2, (uint64_t)buf);
          int v54 = 0;
          *(void *)buf = 0;
          goto LABEL_78;
        }
        re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1);
        int v131 = *(unsigned __int8 *)(a1 + 289);
        uint64_t v133 = *re::videoLogObjects(v132);
        uint64_t v43 = (re::VideoPlatform *)os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT);
        if (v131)
        {
          if (!v43) {
            goto LABEL_51;
          }
          *(_WORD *)buf = 0;
          uint64_t v134 = "Video material supports gamma tone curve.";
        }
        else
        {
          if (!v43) {
            goto LABEL_51;
          }
          *(_WORD *)buf = 0;
          uint64_t v134 = "Video material does not support gamma tone curve.";
        }
        _os_log_impl(&dword_233120000, v133, OS_LOG_TYPE_DEFAULT, v134, buf, 2u);
        goto LABEL_51;
      }
      uint64_t v48 = *re::videoLogObjects(v41);
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
LABEL_112:
        for (uint64_t j = 0; j != -288; j -= 144)
        {
          uint64_t v73 = &v166[j];
          if (*(void *)&v172[j]) {
            re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v172[j]);
          }
          *(void *)&v172[j] = 0;
          re::TextureHandle::invalidate((re::TextureHandle *)(v73 + 224));
          re::TextureHandle::invalidate((re::TextureHandle *)(v73 + 208));
          re::TextureHandle::invalidate((re::TextureHandle *)(v73 + 192));
          re::TextureHandle::invalidate((re::TextureHandle *)(v73 + 176));
          re::TextureHandle::invalidate((re::TextureHandle *)(v73 + 160));
          re::TextureHandle::invalidate((re::TextureHandle *)(v73 + 144));
        }
        goto LABEL_116;
      }
      *(_WORD *)buf = 0;
      uint64_t v49 = "Cannot process SDR content. ColorManager not found in RenderManager.";
    }
    else
    {
      uint64_t v48 = *re::videoLogObjects(v41);
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        goto LABEL_112;
      }
      *(_WORD *)buf = 0;
      uint64_t v49 = "Cannot process SDR content. Parameters are not valid.";
    }
    _os_log_error_impl(&dword_233120000, v48, OS_LOG_TYPE_ERROR, v49, buf, 2u);
    goto LABEL_112;
  }
LABEL_116:
  uint64_t v165 = 0x18BC3918B0504006;
  re::MaterialParameterBlock::handle(v20, &v165, (uint64_t)buf);
  int v74 = *(unsigned __int8 *)re::ShaderGraphMaterial::getConstant((uint64_t)v20, (uint64_t)buf);
  uint64_t v165 = 0;
  if (v74)
  {
    uint64_t v164 = 0x2BBFE8D1A11FB57ELL;
    re::MaterialParameterBlock::handle(v20, &v164, (uint64_t)buf);
    float v75 = *(float *)re::ShaderGraphMaterial::getConstant((uint64_t)v20, (uint64_t)buf);
    uint64_t v164 = 0;
  }
  else
  {
    float v75 = 1.0;
  }
  *(float *)(a1 + 296) = v75;
  uint64_t v76 = *(void *)(a1 + 96);
  if (v76)
  {
    uint64_t v77 = 32 * v76;
    uint64_t v78 = *(void *)(a1 + 112);
    do
    {
      uint64_t v163 = *(void *)(v78 + 16) >> 1;
      __n128 v79 = (re::VideoDefaults *)re::MaterialParameterBlock::handle(v20, &v163, (uint64_t)buf);
      uint64_t v163 = 0;
      if (_MergedGlobals_325 == -1)
      {
        int v82 = *(unsigned __int8 *)(a1 + 56);
        int v81 = *(_DWORD *)(a3 + 288);
        if (v81 == 1 && v82 == 1)
        {
          uint64_t v89 = (re *)re::VideoDefaults::logEnabled(v79);
          if (v89)
          {
            uint64_t v119 = (id)*re::videoLogObjects(v89);
            if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v189 = 0;
              _os_log_impl(&dword_233120000, v119, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting actualStereoMode to kStereoModeStereoSideBySide", v189, 2u);
            }
          }
          int v81 = 4;
        }
        else if (v81 == 3 && v82 == 1)
        {
          unsigned __int8 v90 = (re *)re::VideoDefaults::logEnabled(v79);
          if (v90)
          {
            int v120 = (id)*re::videoLogObjects(v90);
            if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v189 = 0;
              _os_log_impl(&dword_233120000, v120, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting actualStereoMode to kStereoModeStereoOverUnder_Mono", v189, 2u);
            }
          }
          int v81 = 5;
        }
        else if (v81 == -1)
        {
          int v91 = *(unsigned __int8 *)(a1 + 72);
          unsigned int v92 = (re *)re::VideoDefaults::logEnabled(v79);
          if (!v91)
          {
            if (!v92) {
              goto LABEL_147;
            }
            uint64_t v86 = (id)*re::videoLogObjects(v92);
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v189 = 0;
              uint64_t v87 = v86;
              uint64_t v88 = "[StereoModeChanged] :: Setting actualStereoMode to kStereoModeMono because actualStereoMode is Undefined";
LABEL_210:
              _os_log_impl(&dword_233120000, v87, OS_LOG_TYPE_DEFAULT, v88, v189, 2u);
            }
LABEL_211:

            goto LABEL_147;
          }
          if (v92)
          {
            uint64_t v121 = (id)*re::videoLogObjects(v92);
            if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
            {
              int v122 = "kStereoModeStereoSideBySide_Mono";
              if (v82 != 1) {
                int v122 = "kStereoModeStereoSideBySide";
              }
              *(_DWORD *)uint64_t v189 = 136315138;
              *(void *)&v189[4] = v122;
              _os_log_impl(&dword_233120000, v121, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting actualStereoMode to %s", v189, 0xCu);
            }
          }
          if (v82 == 1) {
            int v81 = 4;
          }
          else {
            int v81 = 1;
          }
        }
        else if (v82 == 1)
        {
          uint64_t v85 = (re *)re::VideoDefaults::logEnabled(v79);
          if (!v85)
          {
LABEL_147:
            int v81 = 0;
            goto LABEL_148;
          }
          uint64_t v86 = (id)*re::videoLogObjects(v85);
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v189 = 0;
            uint64_t v87 = v86;
            uint64_t v88 = "[StereoModeChanged] :: Setting actualStereoMode to kStereoModeMono because mono is prefered";
            goto LABEL_210;
          }
          goto LABEL_211;
        }
      }
      else
      {
        int v80 = (re *)re::VideoDefaults::logEnabled(v79);
        if (v80)
        {
          float32x4_t v111 = (id)*re::videoLogObjects(v80);
          if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v189 = 0;
            _os_log_impl(&dword_233120000, v111, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting actualStereoMode to kOverrideStereoMode", v189, 2u);
          }
        }
        int v81 = _MergedGlobals_325;
      }
LABEL_148:
      *(_DWORD *)int v194 = v81;
      *(void *)uint64_t v189 = 0x67AF2B14BAC98610;
      re::MaterialParameterBlock::setConstant(v20, (uint64_t *)v189, 4uLL, v194, 1, (uint64_t)v162);
      v162[0] = 0;
      unsigned int v94 = (re *)re::VideoDefaults::logEnabled(v93);
      if (v94 && *(_DWORD *)(a1 + 200) != v81)
      {
        long long v110 = (id)*re::videoLogObjects(v94);
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v189 = 67109120;
          *(_DWORD *)&v189[4] = v81;
          _os_log_impl(&dword_233120000, v110, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting m_resolvedStereoMode to actualStereoMode which is %i", v189, 8u);
        }
      }
      *(_DWORD *)(a1 + 200) = v81;
      uint64_t v95 = (re::VideoDefaults *)re::VideoDefaults::opaqueTechniqueAllowed(v94);
      if (!v95) {
        goto LABEL_172;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB68, memory_order_acquire) & 1) == 0)
      {
        uint64_t v95 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_26AF8FB68);
        if (v95)
        {
          qword_26AF8FB60 = re::hashString((re *)"Transparent", v123);
          __cxa_guard_release(&qword_26AF8FB68);
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB78, memory_order_acquire) & 1) == 0)
      {
        uint64_t v95 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_26AF8FB78);
        if (v95)
        {
          qword_26AF8FB70 = re::hashString((re *)"Opaque", v124);
          __cxa_guard_release(&qword_26AF8FB78);
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB88, memory_order_acquire) & 1) == 0)
      {
        uint64_t v95 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_26AF8FB88);
        if (v95)
        {
          qword_26AF8FB80 = re::hashString((re *)"FadeDepthPrepass", v125);
          __cxa_guard_release(&qword_26AF8FB88);
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FB98, memory_order_acquire) & 1) == 0)
      {
        uint64_t v95 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_26AF8FB98);
        if (v95)
        {
          qword_26AF8FB90 = re::hashString((re *)"FadeOpaque", v126);
          __cxa_guard_release(&qword_26AF8FB98);
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FBA8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v95 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_26AF8FBA8);
        if (v95)
        {
          qword_26AF8FBA0 = re::hashString((re *)"VideoColor", v127);
          __cxa_guard_release(&qword_26AF8FBA8);
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FBB8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v95 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_26AF8FBB8);
        if (v95)
        {
          qword_26AF8FBB0 = re::hashString((re *)"", v128);
          __cxa_guard_release(&qword_26AF8FBB8);
        }
      }
      if (re::VideoDefaults::logEnabled(v95))
      {
        re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1);
        int v112 = *(unsigned __int8 *)(a1 + 288);
        long long v114 = (id)*re::videoLogObjects(v113);
        BOOL v115 = os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT);
        if (v112)
        {
          if (v115)
          {
            *(_WORD *)uint64_t v189 = 0;
            __n128 v116 = v114;
            int8x16_t v117 = "Video material supports opaque rendering.";
            goto LABEL_198;
          }
        }
        else if (v115)
        {
          *(_WORD *)uint64_t v189 = 0;
          __n128 v116 = v114;
          int8x16_t v117 = "Video material does not opaque rendering.";
LABEL_198:
          _os_log_impl(&dword_233120000, v116, OS_LOG_TYPE_DEFAULT, v117, v189, 2u);
        }
      }
      re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1);
      if (*(unsigned char *)(a1 + 288))
      {
        if (a8 && !*(unsigned char *)(a1 + 204))
        {
          float32x4_t v108 = (re *)re::VideoDefaults::logEnabled(v96);
          if (v108)
          {
            long long v109 = (id)*re::videoLogObjects(v108);
            if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v189 = 136315138;
              *(void *)&v189[4] = "VideoColorOpaque";
              _os_log_impl(&dword_233120000, v109, OS_LOG_TYPE_DEFAULT, "Using opaque technique '%s'", v189, 0xCu);
            }
          }
        }
        else
        {
          char v97 = (re *)re::VideoDefaults::logEnabled(v96);
          if (v97)
          {
            uint64_t v118 = (id)*re::videoLogObjects(v97);
            if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v189 = 136315138;
              *(void *)&v189[4] = "VideoColor";
              _os_log_impl(&dword_233120000, v118, OS_LOG_TYPE_DEFAULT, "Using transparent technique '%s'", v189, 0xCu);
            }
          }
          unint64_t v98 = qword_26AF8FB70;
          uint64_t v99 = qword_26AF8FBB0;
          if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
            dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
          }
          re::MaterialParameterBlock::addPassTechniqueMapping(v20, v98, v99, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
          unint64_t v100 = qword_26AF8FB60;
          uint64_t v101 = qword_26AF8FBA0;
          if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
            dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
          }
          re::MaterialParameterBlock::addPassTechniqueMapping(v20, v100, v101, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
          unint64_t v102 = qword_26AF8FB80;
          uint64_t v103 = qword_26AF8FBB0;
          if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
            dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
          }
          re::MaterialParameterBlock::addPassTechniqueMapping(v20, v102, v103, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
          unint64_t v104 = qword_26AF8FB90;
          uint64_t v105 = qword_26AF8FBB0;
          if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
            dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
          }
          re::MaterialParameterBlock::addPassTechniqueMapping(v20, v104, v105, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
          unint64_t v106 = qword_26AF8FB60;
          uint64_t v107 = qword_26AF8FBA0;
          if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
            dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
          }
          re::MaterialParameterBlock::addPassTechniqueMapping(v20, v106, v107, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
        }
      }
LABEL_172:
      re::ecs2::VideoComponent::applyVideoAttachmentToParameterBlock(*(void *)(a1 + 16), (char **)v78, (re::TextureHandle *)a3, v20, a4, a5);
      re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1);
      if (*(unsigned char *)(a1 + 290)) {
        re::ecs2::VideoComponent::applyVideoTextureArrayAttachmentToParameterBlock(*(void *)(a1 + 16), (void *)v78, (re::TextureHandle *)a3, v20);
      }
      v78 += 32;
      v77 -= 32;
    }
    while (v77);
  }
}

void re::ecs2::VideoComponent::removeParamsFromSystemParameterBlock(re::ecs2::VideoComponent *this, re::MaterialManager *a2, char a3, int a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FBC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8FBC8))
  {
    qword_26AF8FBC0 = re::hashString((re *)"Transparent", v24);
    __cxa_guard_release(&qword_26AF8FBC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FBD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8FBD8))
  {
    qword_26AF8FBD0 = re::hashString((re *)"Opaque", v25);
    __cxa_guard_release(&qword_26AF8FBD8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FBE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8FBE8))
  {
    qword_26AF8FBE0 = re::hashString((re *)"FadeDepthPrepass", v26);
    __cxa_guard_release(&qword_26AF8FBE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FBF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8FBF8))
  {
    qword_26AF8FBF0 = re::hashString((re *)"FadeOpaque", v27);
    __cxa_guard_release(&qword_26AF8FBF8);
  }
  uint64_t v8 = *(void *)(*((void *)this + 2) + 296);
  SystemMaterialParameterBlocuint64_t k = re::MaterialManager::getSystemMaterialParameterBlock(a2, v8);
  if (SystemMaterialParameterBlock)
  {
    unint64_t v10 = SystemMaterialParameterBlock;
    uint64_t v34 = 0xE34F2A557A3E977;
    re::MaterialParameterBlock::removeTexture((uint64_t)SystemMaterialParameterBlock, &v34);
    uint64_t v34 = 0;
    uint64_t v35 = 0x264EA9E237B8F170;
    re::MaterialParameterBlock::removeConstant(v10, &v35, 4);
    uint64_t v35 = 0x4D4BBA333CD6C2E7;
    re::MaterialParameterBlock::removeConstant(v10, &v35, 16);
    uint64_t v35 = 0x13C58749F480030;
    re::MaterialParameterBlock::removeConstant(v10, &v35, 1);
    uint64_t v35 = 0x67AF2B14BAC98610;
    re::MaterialParameterBlock::removeConstant(v10, &v35, 4);
    uint64_t v35 = 0x30C8E7322C94082DLL;
    re::MaterialParameterBlock::removeConstant(v10, &v35, 48);
    if (a4)
    {
      uint64_t v11 = qword_26AF8FBC0;
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v10, v11, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
      uint64_t v12 = qword_26AF8FBD0;
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v10, v12, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
      uint64_t v13 = qword_26AF8FBE0;
      if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
      }
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v10, v13, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
      uint64_t v14 = qword_26AF8FBF0;
      if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
      }
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v10, v14, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
      uint64_t v15 = qword_26AF8FBC0;
      if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
      }
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v10, v15, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
    }
    uint64_t v33 = 0x434F49B3406455B4;
    re::MaterialParameterBlock::removeTexture((uint64_t)v10, &v33);
    uint64_t v32 = 0x434F49B34064CA13;
    uint64_t v33 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v10, &v32);
    uint64_t v31 = 0x434F49B340653E72;
    uint64_t v32 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v10, &v31);
    uint64_t v30 = 0x434F49B3406455D3;
    uint64_t v31 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v10, &v30);
    uint64_t v29 = 0x434F49B34064CA32;
    uint64_t v30 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v10, &v29);
    uint64_t v28 = 0x434F49B340653E91;
    uint64_t v29 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v10, &v28);
    uint64_t v28 = 0;
    uint64_t v17 = *((void *)this + 12);
    if (v17)
    {
      uint64_t v18 = (char **)*((void *)this + 14);
      uint64_t v19 = 32 * v17;
      do
      {
        re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock(v18, (const re::ecs2::VideoMaterialAttachment *)v10, v16);
        v18 += 4;
        v19 -= 32;
      }
      while (v19);
    }
    uint64_t v20 = (char *)this + 120;
    uint64_t v21 = *((void *)this + 17);
    if (v21)
    {
      char v22 = (char **)*((void *)this + 19);
      uint64_t v23 = 32 * v21;
      do
      {
        re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock(v22, (const re::ecs2::VideoMaterialAttachment *)v10, v16);
        v22 += 4;
        v23 -= 32;
      }
      while (v23);
    }
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::clear((uint64_t)v20);
    if ((a3 & 1) != 0 && re::MaterialParameterBlock::isEmpty((re::MaterialParameterBlock *)v10)) {
      re::MaterialManager::removeSystemMaterialParameterBlock(a2, v8);
    }
  }
}

BOOL re::areAlmostEqual<float>(float a1, float a2, float a3, float a4)
{
  if (a1 != a3 && vabds_f32(a1, a3) >= (float)((float)((float)(fabsf(a1) + fabsf(a3)) + 1.0) * 0.00001)) {
    return 0;
  }
  if (a2 == a4) {
    return 1;
  }
  return vabds_f32(a2, a4) < (float)((float)((float)(fabsf(a2) + fabsf(a4)) + 1.0) * 0.00001);
}

void re::ecs2::VideoComponent::getVideoTextureHandles(re::ecs2::VideoComponent *this@<X0>, uint64_t a2@<X8>)
{
  if (*((void *)this + 22)
    && (re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (re::ecs2::VideoComponent *)((char *)this + 168)),
        uint64_t v3 = re::VideoAsset::loadAndConnectForRendering(v8),
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v8),
        v3))
  {
    re::VideoAsset::getVideoTextureHandles(v3, a2);
  }
  else
  {
    if ((atomic_exchange((atomic_uchar *volatile)&re::ecs2::VideoComponent::getVideoTextureHandles(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      BOOL v4 = *re::videoLogObjects(this);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get video texture handles", v7, 2u);
      }
    }
    for (uint64_t i = 0; i != 288; i += 144)
    {
      uint64_t v6 = a2 + i;
      *(void *)(v6 + 128) = 0;
      *(_DWORD *)(v6 + 120) = 0;
      *(_OWORD *)uint64_t v6 = 0uLL;
      *(_OWORD *)(v6 + 16) = 0uLL;
      *(_OWORD *)(v6 + 32) = 0uLL;
      *(_OWORD *)(v6 + 48) = 0uLL;
      *(_OWORD *)(v6 + 64) = 0uLL;
      *(_OWORD *)(v6 + 80) = 0uLL;
      *(_OWORD *)(v6 + 92) = 0uLL;
    }
    *(_DWORD *)(a2 + 288) = -1;
    *(unsigned char *)(a2 + 292) = 0;
  }
}

void re::ecs2::VideoComponent::getLegacyVideoTextureHandles(re::ecs2::VideoComponent *this, uint64_t a2)
{
  if (*(void *)(a2 + 176)
    && (re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)(a2 + 168)),
        uint64_t v3 = re::VideoAsset::loadAndConnectForRendering(v8),
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v8),
        v3))
  {
    re::VideoAsset::getLegacyVideoTextureHandles(v3, (uint64_t)this);
  }
  else
  {
    if ((atomic_exchange((atomic_uchar *volatile)&re::ecs2::VideoComponent::getLegacyVideoTextureHandles(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      BOOL v4 = *re::videoLogObjects(this);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get legacy video texture handles", v7, 2u);
      }
    }
    for (uint64_t i = 0; i != 288; i += 144)
    {
      uint64_t v6 = (char *)this + i;
      *((void *)v6 + 16) = 0;
      *((_DWORD *)v6 + 30) = 0;
      *(_OWORD *)uint64_t v6 = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      *((_OWORD *)v6 + 2) = 0uLL;
      *((_OWORD *)v6 + 3) = 0uLL;
      *((_OWORD *)v6 + 4) = 0uLL;
      *((_OWORD *)v6 + 5) = 0uLL;
      *(_OWORD *)(v6 + 92) = 0uLL;
    }
    *((_DWORD *)this + 72) = -1;
    *((unsigned char *)this + 292) = 0;
  }
}

uint64_t re::ecs2::VideoComponent::YCbCrMatrix(re::ecs2::VideoComponent *this)
{
  if (*((void *)this + 22)
    && (re::AssetHandle::AssetHandle((re::AssetHandle *)v7, (re::ecs2::VideoComponent *)((char *)this + 168)),
        uint64_t v1 = re::VideoAsset::loadAndConnectForRendering(v7),
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v7),
        v1))
  {
    uint64_t v2 = *((void *)v1 + 24);
    if (v2) {
      return *(unsigned int *)(v2 + 2576);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if ((atomic_exchange((atomic_uchar *volatile)&re::ecs2::VideoComponent::YCbCrMatrix(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      BOOL v4 = *re::videoLogObjects(this);
      BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v5) {
        return result;
      }
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get YCbCrMatrix", v6, 2u);
    }
    return 0;
  }
}

uint64_t re::ecs2::VideoComponent::imageFunction(re::ecs2::VideoComponent *this)
{
  if (*((void *)this + 22)
    && (re::AssetHandle::AssetHandle((re::AssetHandle *)v7, (re::ecs2::VideoComponent *)((char *)this + 168)),
        uint64_t v1 = re::VideoAsset::loadAndConnectForRendering(v7),
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v7),
        v1))
  {
    uint64_t v2 = *((void *)v1 + 24);
    if (v2) {
      return *(unsigned int *)(v2 + 2580);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if ((atomic_exchange(re::ecs2::VideoComponent::imageFunction(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      BOOL v4 = *re::videoLogObjects(this);
      BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v5) {
        return result;
      }
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get image function", v6, 2u);
    }
    return 0;
  }
}

void re::ecs2::VideoComponent::calculateColorSpaceTransformationMatrix(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  re::TextureHandle::TextureHandle((re::TextureHandle *)v6, (const re::TextureHandle *)a2);
  re::TextureHandle::TextureHandle((re::TextureHandle *)v7, (const re::TextureHandle *)(a2 + 16));
  re::TextureHandle::TextureHandle((re::TextureHandle *)v8, (const re::TextureHandle *)(a2 + 32));
  re::TextureHandle::TextureHandle((re::TextureHandle *)v9, (const re::TextureHandle *)(a2 + 48));
  re::TextureHandle::TextureHandle((re::TextureHandle *)v10, (const re::TextureHandle *)(a2 + 64));
  re::TextureHandle::TextureHandle((re::TextureHandle *)v11, (const re::TextureHandle *)(a2 + 80));
  *(_OWORD *)uint64_t v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v12[12] = *(_OWORD *)(a2 + 108);
  uint64_t v13 = 0;
  re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v13, &v13, *(CFTypeRef *)(a2 + 128));
  __int16 v14 = *(_WORD *)(a2 + 136);
  char v15 = *(unsigned char *)(a2 + 138);
  if (*(unsigned char *)(a1 + 205))
  {
    re::ColorHelpers::computeGamutTransformMatrix(v12[27], *(unsigned __int8 *)(a1 + 206), (uint64_t)a3);
  }
  else
  {
    *a3 = xmmword_23435FD50;
    a3[1] = xmmword_23435FD60;
    a3[2] = xmmword_23435FD80;
  }
  if (v13) {
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(&v13);
  }
  uint64_t v13 = 0;
  re::TextureHandle::invalidate((re::TextureHandle *)v11);
  re::TextureHandle::invalidate((re::TextureHandle *)v10);
  re::TextureHandle::invalidate((re::TextureHandle *)v9);
  re::TextureHandle::invalidate((re::TextureHandle *)v8);
  re::TextureHandle::invalidate((re::TextureHandle *)v7);
  re::TextureHandle::invalidate((re::TextureHandle *)v6);
}

uint64_t re::ecs2::VideoComponentSystem::onComponentUpdated()
{
  return 0;
}

void re::ecs2::VideoComponentSystem::willAddSystemToECSService(re::ecs2::VideoComponentSystem *this)
{
  v13[4] = *MEMORY[0x263EF8340];
  re::VideoLightSpillGenerator::WarmUp(this);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 14) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 15) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 16) = re::ServiceLocator::serviceOrNull<re::ColorManager>(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v6 = re::ServiceLocator::serviceOrNull<re::VideoService>(v5);
  *((void *)this + 18) = v6;
  if (v6) {
    *((void *)this + 17) = v6;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 20) = re::ServiceLocator::serviceOrNull<re::ProtectionOptionsService>(v7);
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 22) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v8);
  *((void *)this + 21) = re::ServiceLocator::serviceOrNull<re::AssetService>(*(void *)(*((void *)this + 14) + 648));
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 24) = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(v9);
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = re::ServiceLocator::serviceOrNull<re::ResourceFetchService>(v10);
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v12 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v11);
  if (v12)
  {
    if (!*((unsigned char *)this + 104))
    {
      v13[0] = this;
      v13[1] = re::ecs2::VideoComponentSystem::onComponentUpdated;
      void v13[2] = 0;
      v13[3] = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v12 + 352), (uint64_t)v13);
      *((unsigned char *)this + 104) = 1;
    }
  }
}

void re::ecs2::VideoComponentSystem::willRemoveSystemFromECSService(re::ecs2::VideoComponentSystem *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v2);
  if (v3)
  {
    if (*((unsigned char *)this + 104))
    {
      uint64_t v4 = v3;
      if (*(void *)(v3 + 368))
      {
        unint64_t v5 = 0;
        do
        {
          uint64_t v6 = (re::ecs2::VideoComponentSystem **)(*(void *)(v4 + 384) + 32 * v5);
          if (*v6 == this)
          {
            if (!*(_DWORD *)(v4 + 432))
            {
              re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)(v4 + 352), v5);
              continue;
            }
            v8[0] = 0;
            long long v7 = *((_OWORD *)v6 + 1);
            long long v9 = *(_OWORD *)v6;
            long long v10 = v7;
            re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)(v4 + 392), (uint64_t)v8);
          }
          ++v5;
        }
        while (v5 < *(void *)(v4 + 368));
      }
    }
  }
  *((void *)this + 24) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 19) = 0;
}

double re::ecs2::VideoComponentSystem::willAddSceneToECSService(re::ecs2::VideoComponentSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = *((void *)this + 19);
    if (v4) {
      (*(void (**)(uint64_t, re::ecs2::Scene *))(*(void *)v4 + 40))(v4, a2);
    }
    unint64_t v5 = (re::ecs2::Scene *)((char *)a2 + 200);
    uint64_t v6 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    long long v10 = this;
    uint64_t v11 = re::ecs2::VideoComponentSystem::willRemoveComponents;
    uint64_t v12 = 0;
    uint64_t v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 392), (uint64_t)&v10);
    long long v10 = this;
    uint64_t v11 = re::ecs2::VideoComponentSystem::onActivateVideoComponent;
    uint64_t v12 = 0;
    uint64_t v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 216), (uint64_t)&v10);
    uint64_t v7 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    long long v10 = this;
    uint64_t v11 = re::ecs2::VideoComponentSystem::onActivateVideoPlayerComponent;
    uint64_t v12 = 0;
    uint64_t v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v7 + 216), (uint64_t)&v10);
    uint64_t v8 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    long long v10 = this;
    uint64_t v11 = re::ecs2::VideoComponentSystem::willRemoveVideoPlayerComponents;
    uint64_t v12 = 0;
    uint64_t v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v8 + 392), (uint64_t)&v10);
    long long v10 = this;
    uint64_t v11 = re::ecs2::VideoComponentSystem::didAddVideoPlayerComponents;
    uint64_t v12 = 0;
    uint64_t v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v8 + 128), (uint64_t)&v10);
  }
  return result;
}

void re::ecs2::VideoComponentSystem::willRemoveSceneFromECSService(re::ecs2::VideoComponentSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = *((void *)this + 19);
    if (v4) {
      (*(void (**)(uint64_t, re::ecs2::Scene *))(*(void *)v4 + 48))(v4, a2);
    }
    unint64_t v5 = (re::ecs2::Scene *)((char *)a2 + 200);
    uint64_t v6 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v9 = this;
    *((void *)&v9 + 1) = re::ecs2::VideoComponentSystem::willRemoveComponents;
    uint64_t v10 = 0;
    uint64_t v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 392, &v9);
    *(void *)&long long v9 = this;
    *((void *)&v9 + 1) = re::ecs2::VideoComponentSystem::onActivateVideoComponent;
    uint64_t v10 = 0;
    uint64_t v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 216, &v9);
    uint64_t v7 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v9 = this;
    *((void *)&v9 + 1) = re::ecs2::VideoComponentSystem::onActivateVideoPlayerComponent;
    uint64_t v10 = 0;
    uint64_t v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v7 + 216, &v9);
    uint64_t v8 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v9 = this;
    *((void *)&v9 + 1) = re::ecs2::VideoComponentSystem::willRemoveVideoPlayerComponents;
    uint64_t v10 = 0;
    uint64_t v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v8 + 392, &v9);
    *(void *)&long long v9 = this;
    *((void *)&v9 + 1) = re::ecs2::VideoComponentSystem::didAddVideoPlayerComponents;
    uint64_t v10 = 0;
    uint64_t v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v8 + 128, &v9);
  }
}

uint64_t re::ecs2::VideoComponentSystem::willRemoveComponents(uint64_t a1, uint64_t a2, re::ecs2::VideoComponent **a3, uint64_t a4)
{
  uint64_t v4 = *(re::MaterialManager **)(*(void *)(a1 + 120) + 24);
  if (v4) {
    BOOL v5 = a4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v7 = 8 * a4;
    do
    {
      uint64_t v8 = *a3++;
      re::ecs2::VideoComponent::removeParamsFromSystemParameterBlock(v8, v4, 1, 1);
      v7 -= 8;
    }
    while (v7);
  }
  return 0;
}

uint64_t re::ecs2::VideoComponentSystem::willRemoveVideoPlayerComponents(BOOL a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *re::videoLogObjects((re *)a1);
      a1 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (a1)
      {
        *(_DWORD *)buf = 134217984;
        char v15 = v6;
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "VideoComponentSystem::willRemoveVideoPlayerComponents: %p", buf, 0xCu);
      }
      uint64_t v8 = v6[2];
      if (v8)
      {
        if (v6[6])
        {
          long long v9 = (void *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v6 + 5));
          if (v9) {
            re::VideoAsset::cleanupVideoPlayerHelper(v9);
          }
          uint64_t v10 = v6[6];
          if (v10)
          {
            unsigned int v11 = atomic_load((unsigned int *)(v10 + 704));
            if (v11 == 2)
            {
              memset(v13, 0, sizeof(v13));
              re::ecs2::VideoPlayerComponent::setVideoAsset((re *)v6, v13);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
            }
          }
        }
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      }
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::VideoComponentSystem::didAddVideoPlayerComponents(BOOL a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *re::videoLogObjects((re *)a1);
      a1 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (a1)
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v10 = v6;
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "VideoComponentSystem::didAddVideoPlayerComponents: %p", buf, 0xCu);
      }
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::VideoComponentSystem::onActivateVideoComponent(float *a1)
{
  return 0;
}

uint64_t re::ecs2::VideoComponentSystem::onActivateVideoPlayerComponent(float *a1)
{
  return 0;
}

void re::ecs2::VideoComponentSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  uint64_t v1002 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 136);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 152);
    if (v8)
    {
      if (*(unsigned char *)(v8 + 128))
      {
        long long v9 = *(void **)(v8 + 64);
        if (v9) {
          [v9 dispatchAvailableCompletionNotifications];
        }
      }
    }
  }
  if (!a2) {
    return;
  }
  CFTimeInterval v10 = CACurrentMediaTime();
  if (re::VideoDefaults::targetDisplayTimeAllowed(v11) && (uint64_t v12 = *(float32x2_t **)(v6 + 112)) != 0)
  {
    *(double *)&_D10 = v10;
    if (*(double *)&v12[148] > 0.0) {
      _D10 = v12[148];
    }
  }
  else
  {
    *(double *)&_D10 = v10;
  }
  float v14 = *(float *)&a3;
  memset(&v930, 0, sizeof(v930));
  CMTimeMakeWithSeconds(&v930, *(Float64 *)&_D10, 1000000000);
  uint64_t v15 = *(void *)(v6 + 160);
  if (v15) {
    log = (CMTime *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  else {
    log = 0;
  }
  uint64_t v16 = *(void *)(v6 + 168);
  if (v16)
  {
    uint64_t v17 = *(void *)(v6 + 136);
    if (v17)
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase((uint64_t)v982, v17 + 8);
      __int32 v18 = v982[2].i32[0];
      uint64_t v19 = 0;
      if (v982[2].i32[0])
      {
        uint64_t v20 = (int *)(v982[1].i64[0] + 8);
        while (1)
        {
          int v21 = *v20;
          v20 += 6;
          if (v21 < 0) {
            break;
          }
          if (v982[2].u32[0] == ++v19)
          {
            LODWORD(v19) = v982[2].i32[0];
            break;
          }
        }
      }
      if (v982[2].i32[0] != v19)
      {
        uint64_t v22 = v19;
        uint64_t v23 = v982[1].i64[0];
        do
        {
          uint64_t v24 = *(void *)(v23 + 24 * v22 + 16);
          os_unfair_lock_lock((os_unfair_lock_t)(v16 + 64));
          re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v16, v24, buf);
          os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 64));
          if (buf[0])
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v991, (const re::AssetHandle *)&buf[8]);
            re::AssetHandle::AssetHandle((re::AssetHandle *)v929, (const re::AssetHandle *)v991);
            unint64_t v25 = re::VideoAsset::loadAndConnectForRendering(v929);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v929);
            if (v25)
            {
              uint64_t v26 = *(void *)(v6 + 136);
              v961[0] = v24;
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v26 + 8, (uint64_t *)v961);
              uint64_t v27 = *(void *)(v6 + 136);
              v961[0] = v24;
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v27 + 56, (uint64_t *)v961);
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v991);
            if (buf[0]) {
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[8]);
            }
          }
          uint64_t v23 = v982[1].i64[0];
          if (v982[2].i32[0] <= (v19 + 1)) {
            __int32 v28 = v19 + 1;
          }
          else {
            __int32 v28 = v982[2].i32[0];
          }
          while (1)
          {
            uint64_t v22 = (v19 + 1);
            if (v28 - 1 == v19) {
              break;
            }
            LODWORD(v19) = v19 + 1;
            __int32 v29 = v22;
            if ((*(_DWORD *)(v982[1].i64[0] + 24 * v22 + 8) & 0x80000000) != 0) {
              goto LABEL_36;
            }
          }
          __int32 v29 = v28;
LABEL_36:
          LODWORD(v19) = v29;
        }
        while (v18 != v29);
      }
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase((uint64_t)buf, *(void *)(v6 + 136) + 56);
      int v30 = *(_DWORD *)&buf[32];
      if (*(_DWORD *)&buf[32])
      {
        uint64_t v31 = 0;
        uint64_t v32 = (int *)(*(void *)&buf[16] + 8);
        while (1)
        {
          int v33 = *v32;
          v32 += 6;
          if (v33 < 0) {
            break;
          }
          if (*(unsigned int *)&buf[32] == ++v31)
          {
            LODWORD(v31) = *(_DWORD *)&buf[32];
            break;
          }
        }
      }
      else
      {
        LODWORD(v31) = 0;
      }
      if (*(_DWORD *)&buf[32] != v31)
      {
        uint64_t v34 = v31;
        uint64_t v35 = *(void *)&buf[16];
        do
        {
          uint64_t v36 = *(void *)(v35 + 24 * v34 + 16);
          os_unfair_lock_lock((os_unfair_lock_t)(v16 + 64));
          re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v16, v36, v991);
          os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 64));
          if (v991[0].i8[0])
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v961, (const re::AssetHandle *)&v991[0].u32[2]);
            BOOL v37 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v961);
            if (v37)
            {
              if (*((void *)v37 + 24))
              {
                unint64_t v956 = 0;
                v951[0] = 0;
                LOBYTE(v947[0]) = 0;
                int v39 = *(float32x2_t **)(v6 + 128);
                BOOL v38 = *(char ***)(v6 + 136);
                uint64_t v40 = *(re::RenderManager **)(v6 + 120);
                CMTime v928 = v930;
                re::VideoAsset::retrieveBuffersAndUpdateRuntimeData(v37, v38, v40, v39, log, (unint64_t)&v956, &v928, *(float *)&a3, (id *)v951, (BOOL *)v947);
                if (v951[0])
                {
                  uint64_t v41 = *(void *)(v6 + 136);
                  v933[0].i64[0] = v36;
                  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v41 + 56, (uint64_t *)v933);
                }
              }
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v961);
            if (v991[0].i8[0]) {
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v991[0].u32[2]);
            }
          }
          uint64_t v35 = *(void *)&buf[16];
          if (*(_DWORD *)&buf[32] <= (v31 + 1)) {
            int v42 = v31 + 1;
          }
          else {
            int v42 = *(_DWORD *)&buf[32];
          }
          while (1)
          {
            uint64_t v34 = (v31 + 1);
            if (v42 - 1 == v31) {
              break;
            }
            LODWORD(v31) = v31 + 1;
            int v43 = v34;
            if ((*(_DWORD *)(*(void *)&buf[16] + 24 * v34 + 8) & 0x80000000) != 0) {
              goto LABEL_59;
            }
          }
          int v43 = v42;
LABEL_59:
          LODWORD(v31) = v43;
        }
        while (v30 != v43);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)buf);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v982);
    }
  }
  if ((a3 & 0x100000000) != 0) {
    return;
  }
  if (!*(void *)(v6 + 120)) {
    return;
  }
  uint64_t v44 = *(void *)(v6 + 112);
  if (v44)
  {
    if ((*(unsigned char *)(v44 + 424) & 0x10) == 0) {
      return;
    }
  }
  v826.i64[0] = re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent((re::ecs2::ImageBasedReflectionSystem *)a2, 0);
  v834 = (re::ecs2::SceneComponentTable *)(a2 + 200);
  uint64_t v45 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v46 = v45 ? *(void *)(v45 + 24) : 0;
  uint64_t v47 = re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v48 = v47 ? *(void *)(v47 + 24) : 0;
  uint64_t v49 = re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if ((!v49 || !*(void *)(v49 + 24)) && !v46 && !v48) {
    return;
  }
  unsigned int v50 = *(re::VideoManager **)(v6 + 136);
  if (v50) {
    re::VideoManager::initializeVideoProcessorIfNeeded(v50, *(re::RenderManager **)(v6 + 120));
  }
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v927);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v926, 3091, v6);
  uint64_t v51 = re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v51)
  {
    uint64_t v52 = *(void *)(v51 + 24);
    if (v52)
    {
      uint64_t v53 = *(uint64_t **)(v51 + 40);
      for (uint64_t i = 8 * v52; i; i -= 8)
      {
        uint64_t v55 = *v53;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v982, (const re::AssetHandle *)(*v53 + 40));
        float v56 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v982);
        if (v56)
        {
          float v57 = v56;
          re::VideoAsset::processResourceData(v56);
          VideoPlayerComponentHelper = re::VideoAsset::createOrGetVideoPlayerComponentHelper(v57);
          if (VideoPlayerComponentHelper)
          {
            float v59 = (uint64_t *)VideoPlayerComponentHelper;
            int v60 = *(_DWORD *)(v55 + 84);
            if (v60 == 2)
            {
              re::ecs2::VideoPlayerComponentHelper::impl::startVideoBlurFadeOut((re::ecs2::VideoPlayerComponentHelper::impl *)*VideoPlayerComponentHelper);
            }
            else if (v60 == 1)
            {
              re::ecs2::VideoPlayerComponentHelper::impl::startVideoBlurFadeIn((re::ecs2::VideoPlayerComponentHelper::impl *)*VideoPlayerComponentHelper, *(float *)(v55 + 76), *(float *)(v55 + 80));
            }
            if (*(void *)(v6 + 168))
            {
              float v63 = *(void **)(v55 + 16);
              re::AssetHandle::AssetHandle((re::AssetHandle *)v925, (const re::AssetHandle *)v982);
              re::ecs2::VideoPlayerComponentHelper::update(v59, v63, (const re::AssetHandle *)v925, *(re::AssetManager **)(v6 + 168));
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v925);
            }
            goto LABEL_93;
          }
          float v62 = (id)*re::videoLogObjects(0);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_fault_impl(&dword_233120000, v62, OS_LOG_TYPE_FAULT, "Unable to create VideoPlayerComponentHelper", buf, 2u);
          }
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)v982);
          float v62 = (id)*re::videoLogObjects(v61);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233120000, v62, OS_LOG_TYPE_DEFAULT, "Started async loading of VideoPlayerComponent's VideoAsset.", buf, 2u);
          }
        }

LABEL_93:
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v982);
        ++v53;
      }
    }
  }
  float v64 = (re::VideoDefaults *)re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v64)
  {
    uint64_t v65 = *((void *)v64 + 3);
    if (v65)
    {
      int v66 = (uint64_t *)*((void *)v64 + 5);
      uint64_t v67 = 8 * v65;
      do
      {
        uint64_t v68 = *v66;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v982, (const re::AssetHandle *)(*(void *)(*v66 + 56) + 152));
        if (!v982[0].i64[1])
        {
          Asset = (uint64_t *)re::ecs2::VideoProxyComponent::impl::generateAsset(*(re::ecs2::VideoProxyComponent::impl **)(v68 + 56), *(re::AssetManager **)(v6 + 168));
          re::AssetHandle::operator=((uint64_t)v982, Asset);
        }
        uint64_t v70 = *(void *)(v68 + 16);
        re::AssetHandle::AssetHandle((re::AssetHandle *)v924, (const re::AssetHandle *)v982);
        re::ecs2::VideoProxyComponent::update(v68, v70, (const re::AssetHandle *)v924, *(void *)(v6 + 168));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v924);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v982);
        ++v66;
        v67 -= 8;
      }
      while (v67);
    }
  }
  int v817 = a3;
  uint64_t v71 = re::VideoDefaults::logEnabled(v64);
  uint64_t v840 = v6;
  if (v71) {
    goto LABEL_1040;
  }
LABEL_101:
  v845 = *(re::RenderManager **)(v6 + 120);
  v923 = 0;
  unint64_t v921 = 0;
  v920[0] = 0;
  v920[1] = 0;
  int v922 = 0;
  ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  __asm { FMOV            V10.2S, #1.0 }
  if (ViewDescriptor)
  {
    uint64_t v76 = *((void *)ViewDescriptor + 3);
    if (v76)
    {
      uint64_t v77 = (re::ecs2::CameraViewDescriptorsComponent **)*((void *)ViewDescriptor + 5);
      v818 = (re::TextureHandle *)&v77[v76];
      uint64_t v847 = 0;
      LODWORD(v10) = 786163454;
      LODWORD(v3) = 953267991;
      do
      {
        v822 = v77;
        uint64_t v78 = *v77;
        uint64_t v79 = *((void *)*v77 + 2);
        if (v79 && (*(unsigned char *)(v79 + 288) & 1) != 0)
        {
          int v80 = (re::ecs2::EntityComponentCollection *)(v79 + 32);
          uint64_t v81 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v79 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v841 = v78;
          if (v81)
          {
            int v82 = (float *)v81;
            uint64_t v83 = *((void *)v78 + 27);
            if (!v83)
            {
              if (*((void *)v78 + 32)) {
                goto LABEL_179;
              }
              *(void *)&double v235 = re::ecs2::PerspectiveCameraComponent::calculateWorldPose(v81, 0, (uint64_t)v991).n128_u64[0];
              float LayerSize = re::RenderManager::getLayerSize(v845, 0, v235, v236);
              v982[0].i32[0] = -1;
              v982[3] = (float32x4_t)xmmword_23435FD50;
              long long v983 = xmmword_23435FD60;
              long long v984 = xmmword_23435FD80;
              *(_OWORD *)v985 = xmmword_23435FBB0;
              v982[1] = v991[0];
              v982[2] = v991[1];
              *(float *)&v985[16] = LayerSize;
              *(float *)&v985[20] = v238;
              *(void *)&v985[24] = 0x3F8000003F800000;
              float v239 = LayerSize / v238;
              if (v238 < 0.0001) {
                float v239 = 1.0;
              }
              re::ecs2::PerspectiveCameraComponent::calculateProjection(v82, (uint64_t)buf, v239);
              goto LABEL_341;
            }
            if (v83 != 1 || *((void *)v78 + 32))
            {
              unint64_t v84 = 0;
              while (1)
              {
                ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v78, (re::ecs2::CameraViewDescriptorsComponent *)v84);
                if (ViewDescriptor) {
                  break;
                }
LABEL_139:
                ++v84;
                uint64_t v78 = v841;
                if (*((void *)v841 + 27) <= v84)
                {
                  if (!*((void *)v841 + 32)) {
                    goto LABEL_342;
                  }
LABEL_179:
                  unint64_t v143 = 0;
                  while (1)
                  {
                    ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v78, (re::ecs2::CameraViewDescriptorsComponent *)(v143 + 0x10000));
                    if (ViewDescriptor) {
                      break;
                    }
LABEL_208:
                    ++v143;
                    uint64_t v78 = v841;
                    if (v143 >= *((void *)v841 + 32)) {
                      goto LABEL_342;
                    }
                  }
                  unint64_t v84 = (unint64_t)ViewDescriptor;
                  uint64_t v144 = 0;
                  uint64_t v145 = 1;
                  uint64_t v146 = 1;
                  while (2)
                  {
                    unint64_t v89 = v146;
                    if (!*(void *)(v84 + 304))
                    {
                      float32x2_t v154 = 0;
                      goto LABEL_202;
                    }
                    re::AssetHandle::AssetHandle((re::AssetHandle *)v991, (const re::AssetHandle *)(*(void *)(v84 + 320) + 24 * v144 + 32));
                    if (v991[0].i64[1])
                    {
                      uint64_t v149 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v991);
                      if (v149)
                      {
                        float32x2_t v875 = 0;
                        if (*(_DWORD *)(v149 + 240)) {
                          goto LABEL_1053;
                        }
                        id v150 = *(id *)(v149 + 160);
                        if (v150)
                        {
                          int v151 = v150;
                          float v876 = (float)(unint64_t)objc_msgSend(v150, sel_width);
                          id v152 = objc_msgSend(v151, sel_height);
                          v153.f32[0] = v876;
                          v153.f32[1] = (float)(unint64_t)v152;
                          float32x2_t v875 = v153;
                        }
LABEL_201:
                        re::AssetHandle::~AssetHandle((re::AssetHandle *)v991);
                        float32x2_t v154 = v875;
LABEL_202:
                        if (fabsf(vaddv_f32(vmul_f32(v154, v154))) >= 1.0e-10)
                        {
                          float32x2_t v878 = v154;
                          re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v82, v145, (uint64_t)v991);
                          uint64_t v167 = *(void *)(v84 + 16 * v144 + 204);
                          v982[3] = (float32x4_t)xmmword_23435FD50;
                          long long v983 = xmmword_23435FD60;
                          long long v984 = xmmword_23435FD80;
                          *(_OWORD *)v985 = xmmword_23435FBB0;
                          v982[0].i32[0] = v144;
                          v982[1] = v991[0];
                          v982[2] = v991[1];
                          *(void *)&v985[24] = v167;
                          *(float32x2_t *)&v985[16] = v878;
                          if (v878.f32[1] >= 0.0001) {
                            float v168 = v878.f32[0] / v878.f32[1];
                          }
                          else {
                            float v168 = 1.0;
                          }
                          re::ecs2::PerspectiveCameraComponent::calculateProjection(v82, (uint64_t)buf, v168);
                          re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                        }
                        uint64_t v146 = 0;
                        uint64_t v145 = 2;
                        uint64_t v144 = 1;
                        if ((v89 & 1) == 0) {
                          goto LABEL_208;
                        }
                        continue;
                      }
LABEL_199:
                      float32x2_t v158 = 0;
                    }
                    else
                    {
                      if (!*(void *)(v84 + 304)) {
                        goto LABEL_1021;
                      }
                      uint64_t v155 = *(void *)(v84 + 320);
                      unsigned int v156 = *(_DWORD *)(v155 + 4 * v144 + 80);
                      if (v156 == -1)
                      {
                        uint64_t v159 = v155 + 8 * v144;
                        uint64_t v160 = *(void **)(v159 + 88);
                        if (v160)
                        {
                          id v161 = objc_msgSend(v160, sel_width);
                          if (!*(void *)(v84 + 304)) {
                            goto LABEL_1027;
                          }
                          float v877 = (float)(unint64_t)v161;
                          int v162 = *(void **)(*(void *)(v84 + 320) + 8 * v144 + 88);
                        }
                        else
                        {
                          uint64_t v163 = *(void **)(v159 + 104);
                          if (!v163) {
                            goto LABEL_199;
                          }
                          id v164 = objc_msgSend(v163, sel_width);
                          if (!*(void *)(v84 + 304)) {
                            goto LABEL_1032;
                          }
                          float v877 = (float)(unint64_t)v164;
                          int v162 = *(void **)(*(void *)(v84 + 320) + 8 * v144 + 104);
                        }
                        id v165 = objc_msgSend(v162, sel_height, v803);
                        v166.f32[0] = v877;
                        v166.f32[1] = (float)(unint64_t)v165;
                        float32x2_t v875 = v166;
                        goto LABEL_201;
                      }
                      v158.f32[0] = re::RenderManager::getLayerSize(v845, v156, v147, v148);
                      v158.i32[1] = v157;
                    }
                    break;
                  }
                  float32x2_t v875 = v158;
                  goto LABEL_201;
                }
              }
              uint64_t v85 = ViewDescriptor;
              uint64_t v86 = 0;
              uint64_t v87 = 1;
              uint64_t v88 = 1;
              while (2)
              {
                unint64_t v89 = v88;
                if (!*((void *)v85 + 38))
                {
                  float32x2_t v97 = 0;
                  goto LABEL_133;
                }
                re::AssetHandle::AssetHandle((re::AssetHandle *)v991, (const re::AssetHandle *)(*((void *)v85 + 40) + 24 * v86 + 32));
                if (v991[0].i64[1])
                {
                  uint64_t v92 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v991);
                  if (v92)
                  {
                    float32x2_t v867 = 0;
                    if (*(_DWORD *)(v92 + 240)) {
                      goto LABEL_1053;
                    }
                    id v93 = *(id *)(v92 + 160);
                    if (v93)
                    {
                      unsigned int v94 = v93;
                      float v868 = (float)(unint64_t)objc_msgSend(v93, sel_width);
                      id v95 = objc_msgSend(v94, sel_width);
                      v96.f32[0] = v868;
                      v96.f32[1] = (float)(unint64_t)v95;
                      float32x2_t v867 = v96;
                    }
LABEL_132:
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)v991);
                    float32x2_t v97 = v867;
LABEL_133:
                    if (fabsf(vaddv_f32(vmul_f32(v97, v97))) >= 1.0e-10)
                    {
                      float32x2_t v870 = v97;
                      re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v82, v87, (uint64_t)v991);
                      uint64_t v110 = *(void *)((char *)v85 + 16 * v86 + 204);
                      v982[3] = (float32x4_t)xmmword_23435FD50;
                      long long v983 = xmmword_23435FD60;
                      long long v984 = xmmword_23435FD80;
                      *(_OWORD *)v985 = xmmword_23435FBB0;
                      v982[0].i32[0] = v86;
                      v982[1] = v991[0];
                      v982[2] = v991[1];
                      *(void *)&v985[24] = v110;
                      *(float32x2_t *)&v985[16] = v870;
                      if (v870.f32[1] >= 0.0001) {
                        float v111 = v870.f32[0] / v870.f32[1];
                      }
                      else {
                        float v111 = 1.0;
                      }
                      re::ecs2::PerspectiveCameraComponent::calculateProjection(v82, (uint64_t)buf, v111);
                      re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                    }
                    uint64_t v88 = 0;
                    uint64_t v87 = 2;
                    uint64_t v86 = 1;
                    if ((v89 & 1) == 0) {
                      goto LABEL_139;
                    }
                    continue;
                  }
LABEL_130:
                  float32x2_t v101 = 0;
                }
                else
                {
                  if (!*((void *)v85 + 38))
                  {
                    v961[0] = 0;
                    long long v983 = 0u;
                    memset(v982, 0, sizeof(v982));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)buf = 136315906;
                    *(void *)&uint8_t buf[4] = "operator[]";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 797;
                    *(_WORD *)&buf[18] = 2048;
                    *(void *)&buf[20] = 0;
                    *(_WORD *)&buf[28] = 2048;
                    *(void *)&buf[30] = 0;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_1021:
                    v961[0] = 0;
                    long long v983 = 0u;
                    memset(v982, 0, sizeof(v982));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)buf = 136315906;
                    *(void *)&uint8_t buf[4] = "operator[]";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 797;
                    *(_WORD *)&buf[18] = 2048;
                    *(void *)&buf[20] = 0;
                    *(_WORD *)&buf[28] = 2048;
                    *(void *)&buf[30] = 0;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_1022;
                  }
                  uint64_t v98 = *((void *)v85 + 40);
                  unsigned int v99 = *(_DWORD *)(v98 + 4 * v86 + 80);
                  if (v99 == -1)
                  {
                    uint64_t v102 = v98 + 8 * v86;
                    uint64_t v103 = *(void **)(v102 + 88);
                    if (v103)
                    {
                      id v104 = objc_msgSend(v103, sel_width);
                      if (!*((void *)v85 + 38)) {
                        goto LABEL_1026;
                      }
                      float v869 = (float)(unint64_t)v104;
                      uint64_t v105 = *(void **)(*((void *)v85 + 40) + 8 * v86 + 88);
                    }
                    else
                    {
                      unint64_t v106 = *(void **)(v102 + 104);
                      if (!v106) {
                        goto LABEL_130;
                      }
                      id v107 = objc_msgSend(v106, sel_width);
                      if (!*((void *)v85 + 38)) {
                        goto LABEL_1030;
                      }
                      float v869 = (float)(unint64_t)v107;
                      uint64_t v105 = *(void **)(*((void *)v85 + 40) + 8 * v86 + 104);
                    }
                    id v108 = objc_msgSend(v105, sel_height, v803);
                    v109.f32[0] = v869;
                    v109.f32[1] = (float)(unint64_t)v108;
                    float32x2_t v867 = v109;
                    goto LABEL_132;
                  }
                  v101.f32[0] = re::RenderManager::getLayerSize(v845, v99, v90, v91);
                  v101.i32[1] = v100;
                }
                break;
              }
              float32x2_t v867 = v101;
              goto LABEL_132;
            }
            ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v78, 0);
            if (ViewDescriptor)
            {
              uint64_t v199 = ViewDescriptor;
              __int32 v200 = 0;
              uint64_t v201 = 1;
              char v202 = 1;
              do
              {
                char v203 = v202;
                float32x2_t v204 = 0;
                if (!*((void *)v199 + 38))
                {
                  v204.f32[0] = re::RenderManager::getLayerSize(v845, 0, 0.0, v198);
                  v204.i32[1] = v205;
                }
                double v198 = COERCE_DOUBLE(vmul_f32(v204, v204));
                *(float *)&double v198 = fabsf(vaddv_f32(*(float32x2_t *)&v198));
                if (*(float *)&v198 >= 1.0e-10)
                {
                  float32x2_t v883 = v204;
                  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v82, v201, (uint64_t)v991);
                  v982[3] = (float32x4_t)xmmword_23435FD50;
                  long long v983 = xmmword_23435FD60;
                  long long v984 = xmmword_23435FD80;
                  *(_OWORD *)v985 = xmmword_23435FBB0;
                  v982[0].i32[0] = v200;
                  v982[1] = v991[0];
                  v982[2] = v991[1];
                  *(float32x2_t *)&v985[24] = _D10;
                  *(float32x2_t *)&v985[16] = v883;
                  if (v883.f32[1] >= 0.0001) {
                    float v206 = v883.f32[0] / v883.f32[1];
                  }
                  else {
                    float v206 = 1.0;
                  }
                  re::ecs2::PerspectiveCameraComponent::calculateProjection(v82, (uint64_t)buf, v206);
                  re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                }
                char v202 = 0;
                __int32 v200 = 1;
                uint64_t v201 = 2;
              }
              while ((v203 & 1) != 0);
            }
          }
          else
          {
            uint64_t v112 = re::ecs2::EntityComponentCollection::get(v80, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            if (v112)
            {
              __n128 v113 = (float *)v112;
              uint64_t v114 = *((void *)v78 + 27);
              if (!v114)
              {
                if (*((void *)v78 + 32)) {
                  goto LABEL_255;
                }
                *(void *)&double v276 = re::ecs2::OrthographicCameraComponent::calculateWorldPose(v112, 0, (uint64_t)v991).n128_u64[0];
                float v278 = re::RenderManager::getLayerSize(v845, 0, v276, v277);
                v982[0].i32[0] = -1;
                v982[3] = (float32x4_t)xmmword_23435FD50;
                long long v983 = xmmword_23435FD60;
                long long v984 = xmmword_23435FD80;
                *(_OWORD *)v985 = xmmword_23435FBB0;
                v982[1] = v991[0];
                v982[2] = v991[1];
                *(float *)&v985[16] = v278;
                *(float *)&v985[20] = v279;
                *(void *)&v985[24] = 0x3F8000003F800000;
                float v280 = v278 / v279;
                if (v279 < 0.0001) {
                  float v280 = 1.0;
                }
                re::ecs2::OrthographicCameraComponent::calculateProjection(v113, (uint64_t)buf, v280);
                goto LABEL_341;
              }
              if (v114 != 1 || *((void *)v78 + 32))
              {
                BOOL v115 = 0;
                while (1)
                {
                  ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v78, v115);
                  if (ViewDescriptor) {
                    break;
                  }
LABEL_175:
                  BOOL v115 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v115 + 1);
                  uint64_t v78 = v841;
                  if (*((void *)v841 + 27) <= (unint64_t)v115)
                  {
                    if (!*((void *)v841 + 32)) {
                      goto LABEL_342;
                    }
LABEL_255:
                    unint64_t v207 = 0;
                    while (1)
                    {
                      ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v78, (re::ecs2::CameraViewDescriptorsComponent *)(v207 + 0x10000));
                      if (ViewDescriptor) {
                        break;
                      }
LABEL_284:
                      ++v207;
                      uint64_t v78 = v841;
                      if (v207 >= *((void *)v841 + 32)) {
                        goto LABEL_342;
                      }
                    }
                    int v208 = ViewDescriptor;
                    uint64_t v209 = 0;
                    uint64_t v210 = 1;
                    char v211 = 1;
                    while (2)
                    {
                      char v212 = v211;
                      if (!*((void *)v208 + 38))
                      {
                        float32x2_t v220 = 0;
                        goto LABEL_278;
                      }
                      re::AssetHandle::AssetHandle((re::AssetHandle *)v991, (const re::AssetHandle *)(*((void *)v208 + 40) + 24 * v209 + 32));
                      if (v991[0].i64[1])
                      {
                        uint64_t v215 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v991);
                        if (v215)
                        {
                          float32x2_t v884 = 0;
                          if (*(_DWORD *)(v215 + 240)) {
                            goto LABEL_1053;
                          }
                          id v216 = *(id *)(v215 + 160);
                          if (v216)
                          {
                            unint64_t v217 = v216;
                            float v885 = (float)(unint64_t)objc_msgSend(v216, sel_width);
                            id v218 = objc_msgSend(v217, sel_height);
                            v219.f32[0] = v885;
                            v219.f32[1] = (float)(unint64_t)v218;
                            float32x2_t v884 = v219;
                          }
LABEL_277:
                          re::AssetHandle::~AssetHandle((re::AssetHandle *)v991);
                          float32x2_t v220 = v884;
LABEL_278:
                          if (fabsf(vaddv_f32(vmul_f32(v220, v220))) >= 1.0e-10)
                          {
                            float32x2_t v887 = v220;
                            re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)v113, v210, (uint64_t)v991);
                            uint64_t v233 = *(void *)((char *)v208 + 16 * v209 + 204);
                            v982[3] = (float32x4_t)xmmword_23435FD50;
                            long long v983 = xmmword_23435FD60;
                            long long v984 = xmmword_23435FD80;
                            *(_OWORD *)v985 = xmmword_23435FBB0;
                            v982[0].i32[0] = v209;
                            v982[1] = v991[0];
                            v982[2] = v991[1];
                            *(void *)&v985[24] = v233;
                            *(float32x2_t *)&v985[16] = v887;
                            if (v887.f32[1] >= 0.0001) {
                              float v234 = v887.f32[0] / v887.f32[1];
                            }
                            else {
                              float v234 = 1.0;
                            }
                            re::ecs2::OrthographicCameraComponent::calculateProjection(v113, (uint64_t)buf, v234);
                            re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                          }
                          char v211 = 0;
                          uint64_t v210 = 2;
                          uint64_t v209 = 1;
                          if ((v212 & 1) == 0) {
                            goto LABEL_284;
                          }
                          continue;
                        }
LABEL_275:
                        float32x2_t v224 = 0;
                      }
                      else
                      {
                        if (!*((void *)v208 + 38)) {
                          goto LABEL_1025;
                        }
                        uint64_t v221 = *((void *)v208 + 40);
                        unsigned int v222 = *(_DWORD *)(v221 + 4 * v209 + 80);
                        if (v222 == -1)
                        {
                          uint64_t v225 = v221 + 8 * v209;
                          uint64_t v226 = *(void **)(v225 + 88);
                          if (v226)
                          {
                            id v227 = objc_msgSend(v226, sel_width);
                            if (!*((void *)v208 + 38)) {
                              goto LABEL_1033;
                            }
                            float v886 = (float)(unint64_t)v227;
                            uint64_t v228 = *(void **)(*((void *)v208 + 40) + 8 * v209 + 88);
                          }
                          else
                          {
                            v229 = *(void **)(v225 + 104);
                            if (!v229) {
                              goto LABEL_275;
                            }
                            id v230 = objc_msgSend(v229, sel_width);
                            if (!*((void *)v208 + 38)) {
                              goto LABEL_1036;
                            }
                            float v886 = (float)(unint64_t)v230;
                            uint64_t v228 = *(void **)(*((void *)v208 + 40) + 8 * v209 + 104);
                          }
                          id v231 = objc_msgSend(v228, sel_height, v803);
                          v232.f32[0] = v886;
                          v232.f32[1] = (float)(unint64_t)v231;
                          float32x2_t v884 = v232;
                          goto LABEL_277;
                        }
                        v224.f32[0] = re::RenderManager::getLayerSize(v845, v222, v213, v214);
                        v224.i32[1] = v223;
                      }
                      break;
                    }
                    float32x2_t v884 = v224;
                    goto LABEL_277;
                  }
                }
                __n128 v116 = ViewDescriptor;
                uint64_t v117 = 0;
                uint64_t v118 = 1;
                char v119 = 1;
                while (2)
                {
                  char v120 = v119;
                  if (!*((void *)v116 + 38))
                  {
                    float32x2_t v128 = 0;
                    goto LABEL_169;
                  }
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v991, (const re::AssetHandle *)(*((void *)v116 + 40) + 24 * v117 + 32));
                  if (v991[0].i64[1])
                  {
                    uint64_t v123 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v991);
                    if (v123)
                    {
                      float32x2_t v871 = 0;
                      if (*(_DWORD *)(v123 + 240)) {
                        goto LABEL_1053;
                      }
                      id v124 = *(id *)(v123 + 160);
                      if (v124)
                      {
                        int v125 = v124;
                        float v872 = (float)(unint64_t)objc_msgSend(v124, sel_width);
                        id v126 = objc_msgSend(v125, sel_width);
                        v127.f32[0] = v872;
                        v127.f32[1] = (float)(unint64_t)v126;
                        float32x2_t v871 = v127;
                      }
LABEL_168:
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)v991);
                      float32x2_t v128 = v871;
LABEL_169:
                      if (fabsf(vaddv_f32(vmul_f32(v128, v128))) >= 1.0e-10)
                      {
                        float32x2_t v874 = v128;
                        re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)v113, v118, (uint64_t)v991);
                        uint64_t v141 = *(void *)((char *)v116 + 16 * v117 + 204);
                        v982[3] = (float32x4_t)xmmword_23435FD50;
                        long long v983 = xmmword_23435FD60;
                        long long v984 = xmmword_23435FD80;
                        *(_OWORD *)v985 = xmmword_23435FBB0;
                        v982[0].i32[0] = v117;
                        v982[1] = v991[0];
                        v982[2] = v991[1];
                        *(void *)&v985[24] = v141;
                        *(float32x2_t *)&v985[16] = v874;
                        if (v874.f32[1] >= 0.0001) {
                          float v142 = v874.f32[0] / v874.f32[1];
                        }
                        else {
                          float v142 = 1.0;
                        }
                        re::ecs2::OrthographicCameraComponent::calculateProjection(v113, (uint64_t)buf, v142);
                        re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                      }
                      char v119 = 0;
                      uint64_t v118 = 2;
                      uint64_t v117 = 1;
                      if ((v120 & 1) == 0) {
                        goto LABEL_175;
                      }
                      continue;
                    }
LABEL_166:
                    float32x2_t v132 = 0;
                  }
                  else
                  {
                    if (!*((void *)v116 + 38)) {
                      goto LABEL_1024;
                    }
                    uint64_t v129 = *((void *)v116 + 40);
                    unsigned int v130 = *(_DWORD *)(v129 + 4 * v117 + 80);
                    if (v130 == -1)
                    {
                      uint64_t v133 = v129 + 8 * v117;
                      uint64_t v134 = *(void **)(v133 + 88);
                      if (v134)
                      {
                        id v135 = objc_msgSend(v134, sel_width);
                        if (!*((void *)v116 + 38)) {
                          goto LABEL_1031;
                        }
                        float v873 = (float)(unint64_t)v135;
                        uint64_t v136 = *(void **)(*((void *)v116 + 40) + 8 * v117 + 88);
                      }
                      else
                      {
                        uint64_t v137 = *(void **)(v133 + 104);
                        if (!v137) {
                          goto LABEL_166;
                        }
                        id v138 = objc_msgSend(v137, sel_width);
                        if (!*((void *)v116 + 38)) {
                          goto LABEL_1034;
                        }
                        float v873 = (float)(unint64_t)v138;
                        uint64_t v136 = *(void **)(*((void *)v116 + 40) + 8 * v117 + 104);
                      }
                      id v139 = objc_msgSend(v136, sel_height, v803);
                      v140.f32[0] = v873;
                      v140.f32[1] = (float)(unint64_t)v139;
                      float32x2_t v871 = v140;
                      goto LABEL_168;
                    }
                    v132.f32[0] = re::RenderManager::getLayerSize(v845, v130, v121, v122);
                    v132.i32[1] = v131;
                  }
                  break;
                }
                float32x2_t v871 = v132;
                goto LABEL_168;
              }
              ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v78, 0);
              if (ViewDescriptor)
              {
                uint64_t v241 = ViewDescriptor;
                __int32 v242 = 0;
                uint64_t v243 = 1;
                char v244 = 1;
                do
                {
                  char v245 = v244;
                  float32x2_t v246 = 0;
                  if (!*((void *)v241 + 38))
                  {
                    v246.f32[0] = re::RenderManager::getLayerSize(v845, 0, 0.0, v240);
                    v246.i32[1] = v247;
                  }
                  double v240 = COERCE_DOUBLE(vmul_f32(v246, v246));
                  *(float *)&double v240 = fabsf(vaddv_f32(*(float32x2_t *)&v240));
                  if (*(float *)&v240 >= 1.0e-10)
                  {
                    float32x2_t v888 = v246;
                    re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)v113, v243, (uint64_t)v991);
                    v982[3] = (float32x4_t)xmmword_23435FD50;
                    long long v983 = xmmword_23435FD60;
                    long long v984 = xmmword_23435FD80;
                    *(_OWORD *)v985 = xmmword_23435FBB0;
                    v982[0].i32[0] = v242;
                    v982[1] = v991[0];
                    v982[2] = v991[1];
                    *(float32x2_t *)&v985[24] = _D10;
                    *(float32x2_t *)&v985[16] = v888;
                    if (v888.f32[1] >= 0.0001) {
                      float v248 = v888.f32[0] / v888.f32[1];
                    }
                    else {
                      float v248 = 1.0;
                    }
                    re::ecs2::OrthographicCameraComponent::calculateProjection(v113, (uint64_t)buf, v248);
                    re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                  }
                  char v244 = 0;
                  __int32 v242 = 1;
                  uint64_t v243 = 2;
                }
                while ((v245 & 1) != 0);
              }
            }
            else
            {
              ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v80, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (!ViewDescriptor) {
                goto LABEL_342;
              }
              uint64_t v169 = (uint64_t)ViewDescriptor;
              uint64_t v170 = *((void *)v78 + 27);
              if (!v170)
              {
                if (*((void *)v78 + 32)) {
                  goto LABEL_301;
                }
                re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)ViewDescriptor, 0, v991);
                float v291 = re::RenderManager::getLayerSize(v845, 0, v289, v290);
                v982[0].i32[0] = -1;
                v982[3] = (float32x4_t)xmmword_23435FD50;
                long long v983 = xmmword_23435FD60;
                long long v984 = xmmword_23435FD80;
                *(_OWORD *)v985 = xmmword_23435FBB0;
                v982[1] = v991[0];
                v982[2] = v991[1];
                *(float *)&v985[16] = v291;
                *(_DWORD *)&v985[20] = v292;
                *(void *)&v985[24] = 0x3F8000003F800000;
                re::ecs2::CustomMatrixCameraComponent::calculateProjection(v169, 0, (uint64_t)buf);
LABEL_341:
                re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                goto LABEL_342;
              }
              if (v170 != 1 || *((void *)v78 + 32))
              {
                unsigned __int8 v171 = 0;
                while (1)
                {
                  ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v78, v171);
                  if (ViewDescriptor) {
                    break;
                  }
LABEL_240:
                  unsigned __int8 v171 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v171 + 1);
                  uint64_t v78 = v841;
                  if (*((void *)v841 + 27) <= (unint64_t)v171)
                  {
                    if (!*((void *)v841 + 32)) {
                      goto LABEL_342;
                    }
LABEL_301:
                    unint64_t v249 = 0;
                    while (1)
                    {
                      ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v78, (re::ecs2::CameraViewDescriptorsComponent *)(v249 + 0x10000));
                      if (ViewDescriptor) {
                        break;
                      }
LABEL_327:
                      ++v249;
                      uint64_t v78 = v841;
                      if (v249 >= *((void *)v841 + 32)) {
                        goto LABEL_342;
                      }
                    }
                    uint64_t v250 = ViewDescriptor;
                    uint64_t v251 = 0;
                    uint64_t v252 = 1;
                    char v253 = 1;
                    while (2)
                    {
                      char v254 = v253;
                      if (!*((void *)v250 + 38))
                      {
                        float32x2_t v262 = 0;
                        goto LABEL_324;
                      }
                      re::AssetHandle::AssetHandle((re::AssetHandle *)v991, (const re::AssetHandle *)(*((void *)v250 + 40) + 24 * v251 + 32));
                      if (v991[0].i64[1])
                      {
                        uint64_t v257 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v991);
                        if (v257)
                        {
                          float32x2_t v889 = 0;
                          if (*(_DWORD *)(v257 + 240)) {
                            goto LABEL_1053;
                          }
                          id v258 = *(id *)(v257 + 160);
                          if (v258)
                          {
                            uint64_t v259 = v258;
                            float v890 = (float)(unint64_t)objc_msgSend(v258, sel_width);
                            id v260 = objc_msgSend(v259, sel_height);
                            v261.f32[0] = v890;
                            v261.f32[1] = (float)(unint64_t)v260;
                            float32x2_t v889 = v261;
                          }
LABEL_323:
                          re::AssetHandle::~AssetHandle((re::AssetHandle *)v991);
                          float32x2_t v262 = v889;
LABEL_324:
                          if (fabsf(vaddv_f32(vmul_f32(v262, v262))) >= 1.0e-10)
                          {
                            float32x2_t v892 = v262;
                            re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v169, v252, v991);
                            uint64_t v275 = *(void *)((char *)v250 + 16 * v251 + 204);
                            v982[3] = (float32x4_t)xmmword_23435FD50;
                            long long v983 = xmmword_23435FD60;
                            long long v984 = xmmword_23435FD80;
                            *(_OWORD *)v985 = xmmword_23435FBB0;
                            v982[0].i32[0] = v251;
                            v982[1] = v991[0];
                            v982[2] = v991[1];
                            *(void *)&v985[24] = v275;
                            *(float32x2_t *)&v985[16] = v892;
                            re::ecs2::CustomMatrixCameraComponent::calculateProjection(v169, v252, (uint64_t)buf);
                            re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                          }
                          char v253 = 0;
                          uint64_t v252 = 2;
                          uint64_t v251 = 1;
                          if ((v254 & 1) == 0) {
                            goto LABEL_327;
                          }
                          continue;
                        }
LABEL_321:
                        float32x2_t v266 = 0;
                      }
                      else
                      {
                        if (!*((void *)v250 + 38)) {
                          goto LABEL_1029;
                        }
                        uint64_t v263 = *((void *)v250 + 40);
                        unsigned int v264 = *(_DWORD *)(v263 + 4 * v251 + 80);
                        if (v264 == -1)
                        {
                          uint64_t v267 = v263 + 8 * v251;
                          uint64_t v268 = *(void **)(v267 + 88);
                          if (v268)
                          {
                            id v269 = objc_msgSend(v268, sel_width);
                            if (!*((void *)v250 + 38)) {
                              goto LABEL_1037;
                            }
                            float v891 = (float)(unint64_t)v269;
                            v270 = *(void **)(*((void *)v250 + 40) + 8 * v251 + 88);
                          }
                          else
                          {
                            v271 = *(void **)(v267 + 104);
                            if (!v271) {
                              goto LABEL_321;
                            }
                            id v272 = objc_msgSend(v271, sel_width);
                            if (!*((void *)v250 + 38)) {
                              goto LABEL_1039;
                            }
                            float v891 = (float)(unint64_t)v272;
                            v270 = *(void **)(*((void *)v250 + 40) + 8 * v251 + 104);
                          }
                          id v273 = objc_msgSend(v270, sel_height, v803);
                          v274.f32[0] = v891;
                          v274.f32[1] = (float)(unint64_t)v273;
                          float32x2_t v889 = v274;
                          goto LABEL_323;
                        }
                        v266.f32[0] = re::RenderManager::getLayerSize(v845, v264, v255, v256);
                        v266.i32[1] = v265;
                      }
                      break;
                    }
                    float32x2_t v889 = v266;
                    goto LABEL_323;
                  }
                }
                uint64_t v172 = ViewDescriptor;
                uint64_t v173 = 0;
                uint64_t v174 = 1;
                char v175 = 1;
                while (2)
                {
                  char v176 = v175;
                  if (!*((void *)v172 + 38))
                  {
                    float32x2_t v184 = 0;
                    goto LABEL_237;
                  }
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v991, (const re::AssetHandle *)(*((void *)v172 + 40) + 24 * v173 + 32));
                  if (v991[0].i64[1])
                  {
                    uint64_t v179 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v991);
                    if (v179)
                    {
                      float32x2_t v879 = 0;
                      if (*(_DWORD *)(v179 + 240))
                      {
LABEL_1053:
                        v797 = (re *)std::__throw_bad_variant_access[abi:nn180100]();
                        goto LABEL_1054;
                      }
                      id v180 = *(id *)(v179 + 160);
                      if (v180)
                      {
                        unsigned int v181 = v180;
                        float v880 = (float)(unint64_t)objc_msgSend(v180, sel_width);
                        id v182 = objc_msgSend(v181, sel_width);
                        v183.f32[0] = v880;
                        v183.f32[1] = (float)(unint64_t)v182;
                        float32x2_t v879 = v183;
                      }
LABEL_236:
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)v991);
                      float32x2_t v184 = v879;
LABEL_237:
                      if (fabsf(vaddv_f32(vmul_f32(v184, v184))) >= 1.0e-10)
                      {
                        float32x2_t v882 = v184;
                        re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v169, v174, v991);
                        uint64_t v197 = *(void *)((char *)v172 + 16 * v173 + 204);
                        v982[3] = (float32x4_t)xmmword_23435FD50;
                        long long v983 = xmmword_23435FD60;
                        long long v984 = xmmword_23435FD80;
                        *(_OWORD *)v985 = xmmword_23435FBB0;
                        v982[0].i32[0] = v173;
                        v982[1] = v991[0];
                        v982[2] = v991[1];
                        *(void *)&v985[24] = v197;
                        *(float32x2_t *)&v985[16] = v882;
                        re::ecs2::CustomMatrixCameraComponent::calculateProjection(v169, v174, (uint64_t)buf);
                        re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                      }
                      char v175 = 0;
                      uint64_t v174 = 2;
                      uint64_t v173 = 1;
                      if ((v176 & 1) == 0) {
                        goto LABEL_240;
                      }
                      continue;
                    }
LABEL_234:
                    float32x2_t v188 = 0;
                  }
                  else
                  {
                    if (!*((void *)v172 + 38)) {
                      goto LABEL_1028;
                    }
                    uint64_t v185 = *((void *)v172 + 40);
                    unsigned int v186 = *(_DWORD *)(v185 + 4 * v173 + 80);
                    if (v186 == -1)
                    {
                      uint64_t v189 = v185 + 8 * v173;
                      long long v190 = *(void **)(v189 + 88);
                      if (v190)
                      {
                        id v191 = objc_msgSend(v190, sel_width);
                        if (!*((void *)v172 + 38)) {
                          goto LABEL_1035;
                        }
                        float v881 = (float)(unint64_t)v191;
                        uint64_t v192 = *(void **)(*((void *)v172 + 40) + 8 * v173 + 88);
                      }
                      else
                      {
                        long long v193 = *(void **)(v189 + 104);
                        if (!v193) {
                          goto LABEL_234;
                        }
                        id v194 = objc_msgSend(v193, sel_width);
                        if (!*((void *)v172 + 38)) {
                          goto LABEL_1038;
                        }
                        float v881 = (float)(unint64_t)v194;
                        uint64_t v192 = *(void **)(*((void *)v172 + 40) + 8 * v173 + 104);
                      }
                      id v195 = objc_msgSend(v192, sel_height, v803, v804);
                      v196.f32[0] = v881;
                      v196.f32[1] = (float)(unint64_t)v195;
                      float32x2_t v879 = v196;
                      goto LABEL_236;
                    }
                    v188.f32[0] = re::RenderManager::getLayerSize(v845, v186, v177, v178);
                    v188.i32[1] = v187;
                  }
                  break;
                }
                float32x2_t v879 = v188;
                goto LABEL_236;
              }
              ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v78, 0);
              if (ViewDescriptor)
              {
                int v282 = ViewDescriptor;
                __int32 v283 = 0;
                uint64_t v284 = 1;
                char v285 = 1;
                do
                {
                  char v286 = v285;
                  float32x2_t v287 = 0;
                  if (!*((void *)v282 + 38))
                  {
                    v287.f32[0] = re::RenderManager::getLayerSize(v845, 0, 0.0, v281);
                    v287.i32[1] = v288;
                  }
                  double v281 = COERCE_DOUBLE(vmul_f32(v287, v287));
                  *(float *)&double v281 = fabsf(vaddv_f32(*(float32x2_t *)&v281));
                  if (*(float *)&v281 >= 1.0e-10)
                  {
                    float32x2_t v893 = v287;
                    re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v169, v284, v991);
                    v982[3] = (float32x4_t)xmmword_23435FD50;
                    long long v983 = xmmword_23435FD60;
                    long long v984 = xmmword_23435FD80;
                    *(_OWORD *)v985 = xmmword_23435FBB0;
                    v982[0].i32[0] = v283;
                    v982[1] = v991[0];
                    v982[2] = v991[1];
                    *(float32x2_t *)&v985[24] = _D10;
                    *(float32x2_t *)&v985[16] = v893;
                    re::ecs2::CustomMatrixCameraComponent::calculateProjection(v169, v284, (uint64_t)buf);
                    re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v982[3]);
                  }
                  char v285 = 0;
                  __int32 v283 = 1;
                  uint64_t v284 = 2;
                }
                while ((v286 & 1) != 0);
              }
            }
          }
        }
LABEL_342:
        uint64_t v77 = v822 + 1;
      }
      while (v822 + 1 != (re::ecs2::CameraViewDescriptorsComponent **)v818);
    }
  }
  v919 = 0;
  unint64_t v917 = 0;
  int v918 = 0;
  unint64_t v916 = 0;
  v293 = (re::VideoDefaults *)re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(&v915, 0);
  ++v918;
  char v294 = 0;
  uint64_t v295 = v840;
  if (re::VideoDefaults::colorSpaceTransformationAllowed(v293))
  {
    v296 = *(char **)(v840 + 128);
    if (v296[64]) {
      char v294 = *v296;
    }
    else {
      char v294 = 0;
    }
  }
  uint64_t v297 = (*(uint64_t (**)(void))(**(void **)(v840 + 192) + 24))(*(void *)(v840 + 192));
  uint64_t v298 = (re::VideoDefaults *)re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v298)
  {
    uint64_t v299 = *((void *)v298 + 3);
    if (v299)
    {
      float v300 = (uint64_t *)*((void *)v298 + 5);
      float v301 = &v300[v299];
      float v302 = &unk_2687A0000;
      char v854 = v294;
      v849 = v301;
      do
      {
        uint64_t v303 = *v300;
        uint64_t v894 = *(void *)(*v300 + 16);
        float32x4_t v304 = (re *)re::VideoDefaults::logEnabled(v298);
        if (v304)
        {
          long long v358 = (id)*re::videoLogObjects(v304);
          if (os_log_type_enabled(v358, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v359 = *(void *)(v894 + 280);
            uint64_t v360 = @"Yes";
            if ((*(_DWORD *)(v894 + 288) & 1) == 0) {
              uint64_t v360 = @"No";
            }
            v982[0].i32[0] = 136315394;
            *(uint64_t *)((char *)v982[0].i64 + 4) = v359;
            v982[0].i16[6] = 2112;
            *(uint64_t *)((char *)&v982[0].i64[1] + 6) = (uint64_t)v360;
            _os_log_impl(&dword_233120000, v358, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: Entity %s isActive == %@;",
              (uint8_t *)v982,
              0x16u);
          }
        }
        if (v302[79] != -1) {
          dispatch_once(&re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken, &__block_literal_global_35);
        }
        if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking) {
          re::ecs2::VideoComponent::removeParamsFromSystemParameterBlock((re::ecs2::VideoComponent *)v303, *(re::MaterialManager **)(*(void *)(v295 + 120) + 24), 0, *(unsigned char *)(v303 + 308) == 0);
        }
        *(_DWORD *)(v303 + 200) = -1;
        *(void *)(v303 + 192) = 0;
        *(unsigned char *)(v303 + 206) = v294;
        *(_DWORD *)(v303 + 304) = 1065353216;
        re::AssetHandle::loadAsync((re::AssetHandle *)(v303 + 32));
        uint64_t v306 = (re *)re::VideoDefaults::logEnabled(v305);
        if (v306)
        {
          uint64_t v361 = (id)*re::videoLogObjects(v306);
          if (os_log_type_enabled(v361, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v362 = *(void *)(v894 + 280);
            if (*(unsigned char *)(v894 + 288)) {
              unint64_t v363 = @"Yes";
            }
            else {
              unint64_t v363 = @"No";
            }
            uint64_t v364 = *(void *)(v303 + 40);
            if (v364)
            {
              unsigned int v365 = atomic_load((unsigned int *)(v364 + 704));
              if (v365 == 2) {
                uint64_t v366 = @"Yes";
              }
              else {
                uint64_t v366 = @"No";
              }
            }
            else
            {
              uint64_t v366 = @"No";
            }
            __int32 v373 = *(_DWORD *)(v303 + 292);
            v982[0].i32[0] = 136315906;
            *(uint64_t *)((char *)v982[0].i64 + 4) = v362;
            v982[0].i16[6] = 2112;
            *(uint64_t *)((char *)&v982[0].i64[1] + 6) = (uint64_t)v363;
            v982[1].i16[3] = 2112;
            v982[1].i64[1] = (uint64_t)v366;
            v982[2].i16[0] = 1024;
            *(__int32 *)((char *)v982[2].i32 + 2) = v373;
            _os_log_impl(&dword_233120000, v361, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: Entity %s isActive == %@; materials.isLoaded == %@; traits == %d",
              (uint8_t *)v982,
              0x26u);
          }
        }
        if ((*(unsigned char *)(v894 + 288) & 1) != 0
          && (uint64_t v307 = *(void *)(v303 + 40)) != 0
          && (unsigned int v308 = atomic_load((unsigned int *)(v307 + 704)), v308 == 2)
          && (uint64_t v309 = *(void *)(v303 + 16)) != 0
          && (uint64_t v310 = *(re::ecs2::NetworkComponent **)(v309 + 200)) != 0
          && re::ecs2::NetworkComponent::owningProcessType(v310) == 2
          && *(float *)(v295 + 208) == 0.0)
        {
          for (uint64_t j = 0; j != 18; j += 9)
          {
            v312 = &v982[j];
            v312[8].i64[0] = 0;
            v312[7].i32[2] = 0;
            float32x4_t *v312 = 0uLL;
            v312[1] = 0uLL;
            v312[2] = 0uLL;
            v312[3] = 0uLL;
            v312[4] = 0uLL;
            v312[5] = 0uLL;
            *(float32x4_t *)((char *)&v312[5] + 12) = 0uLL;
          }
          int v989 = -1;
          char v990 = 0;
          re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)v303);
          int v313 = *(unsigned __int8 *)(v303 + 289);
          v315 = (re *)re::VideoDefaults::logEnabled(v314);
          if (v313)
          {
            if (v315)
            {
              uint64_t v380 = (id)*re::videoLogObjects(v315);
              if (os_log_type_enabled(v380, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_233120000, v380, OS_LOG_TYPE_DEFAULT, "VideoComponent's material supports applying a gamma tone curve. Using Metal textures that do not apply a hardware de-gamma", buf, 2u);
              }

              uint64_t v295 = v840;
            }
            re::ecs2::VideoComponent::getVideoTextureHandles((re::ecs2::VideoComponent *)v303, (uint64_t)buf);
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>((uint64_t)buf, (uint64_t)&v980, (uint64_t)v982);
            int v989 = v980;
            char v990 = v981;
            unint64_t v316 = 288;
            do
            {
              int v317 = &buf[v316];
              if (*(uint64_t *)((char *)&v969 + v316)) {
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)((char *)&v969 + v316));
              }
              *(uint64_t *)((char *)&v969 + v316) = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)(v317 - 64));
              re::TextureHandle::invalidate((re::TextureHandle *)(v317 - 80));
              re::TextureHandle::invalidate((re::TextureHandle *)(v317 - 96));
              re::TextureHandle::invalidate((re::TextureHandle *)(v317 - 112));
              re::TextureHandle::invalidate((re::TextureHandle *)(v317 - 128));
              re::TextureHandle::invalidate((re::TextureHandle *)&v962[v316 / 0x10]);
              v316 -= 144;
            }
            while (v316);
          }
          else
          {
            if (v315)
            {
              uint64_t v381 = (id)*re::videoLogObjects(v315);
              if (os_log_type_enabled(v381, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_233120000, v381, OS_LOG_TYPE_DEFAULT, "VideoComponent's material does not support applying a gamma tone curve. Using Metal textures that apply a hardware de-gamma", buf, 2u);
              }

              uint64_t v295 = v840;
            }
            re::ecs2::VideoComponent::getLegacyVideoTextureHandles((re::ecs2::VideoComponent *)buf, v303);
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>((uint64_t)buf, (uint64_t)&v980, (uint64_t)v982);
            int v989 = v980;
            char v990 = v981;
            unint64_t v341 = 288;
            do
            {
              uint64_t v342 = &buf[v341];
              if (*(uint64_t *)((char *)&v969 + v341)) {
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)((char *)&v969 + v341));
              }
              *(uint64_t *)((char *)&v969 + v341) = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)(v342 - 64));
              re::TextureHandle::invalidate((re::TextureHandle *)(v342 - 80));
              re::TextureHandle::invalidate((re::TextureHandle *)(v342 - 96));
              re::TextureHandle::invalidate((re::TextureHandle *)(v342 - 112));
              re::TextureHandle::invalidate((re::TextureHandle *)(v342 - 128));
              re::TextureHandle::invalidate((re::TextureHandle *)&v962[v341 / 0x10]);
              v341 -= 144;
            }
            while (v341);
          }
          re::TextureHandle::TextureHandle((re::TextureHandle *)buf, (const re::TextureHandle *)v982);
          re::TextureHandle::TextureHandle((re::TextureHandle *)&buf[16], (const re::TextureHandle *)&v982[1]);
          re::TextureHandle::TextureHandle((re::TextureHandle *)&buf[32], (const re::TextureHandle *)&v982[2]);
          re::TextureHandle::TextureHandle((re::TextureHandle *)&v972, (const re::TextureHandle *)&v982[3]);
          re::TextureHandle::TextureHandle((re::TextureHandle *)v973, (const re::TextureHandle *)&v983);
          re::TextureHandle::TextureHandle((re::TextureHandle *)v974, (const re::TextureHandle *)&v984);
          *(_OWORD *)v975 = *(_OWORD *)v985;
          *(_OWORD *)&v975[12] = *(_OWORD *)&v985[12];
          v976 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v976, &v976, cf);
          uint64_t v343 = 0;
          __int16 v977 = v987;
          char v978 = v988;
          int v344 = v975[24];
          int v345 = v975[25];
          uint64_t v346 = *(void *)(v295 + 120);
          do
          {
            uint64_t v347 = &v912[v343];
            *((void *)v347 + 16) = 0;
            *((_DWORD *)v347 + 30) = 0;
            *(_OWORD *)uint64_t v347 = 0uLL;
            *((_OWORD *)v347 + 1) = 0uLL;
            *((_OWORD *)v347 + 2) = 0uLL;
            *((_OWORD *)v347 + 3) = 0uLL;
            *((_OWORD *)v347 + 4) = 0uLL;
            *((_OWORD *)v347 + 5) = 0uLL;
            v343 += 144;
            *(_OWORD *)(v347 + 92) = 0uLL;
          }
          while (v343 != 288);
          char v348 = v344 != 0;
          BOOL v349 = v345 == 0;
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)v991, (uint64_t)v982, (uint64_t)&v989, (uint64_t)v912);
          int v913 = v989;
          char v914 = v990;
          int v350 = re::ecs2::VideoComponent::YCbCrMatrix((re::ecs2::VideoComponent *)v303);
          int v351 = re::ecs2::VideoComponent::imageFunction((re::ecs2::VideoComponent *)v303);
          re::ecs2::VideoComponent::processAttachments(v303, v346, (uint64_t)v912, v350, v351, 0, v348, v349);
          for (uint64_t k = 0; k != -288; k -= 144)
          {
            unint64_t v353 = &v912[k];
            if (*(void *)&v912[k + 272]) {
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v912[k + 272]);
            }
            *(void *)&v912[k + 272] = 0;
            re::TextureHandle::invalidate((re::TextureHandle *)(v353 + 224));
            re::TextureHandle::invalidate((re::TextureHandle *)(v353 + 208));
            re::TextureHandle::invalidate((re::TextureHandle *)(v353 + 192));
            re::TextureHandle::invalidate((re::TextureHandle *)(v353 + 176));
            re::TextureHandle::invalidate((re::TextureHandle *)(v353 + 160));
            re::TextureHandle::invalidate((re::TextureHandle *)(v353 + 144));
          }
          unint64_t v355 = (re *)re::VideoDefaults::logEnabled(v354);
          if (v355)
          {
            uint64_t v374 = (id)*re::videoLogObjects(v355);
            if (os_log_type_enabled(v374, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v375 = *(void *)(v894 + 280);
              v376 = @"Yes";
              if ((*(unsigned char *)(v894 + 288) & 1) == 0) {
                v376 = @"No";
              }
              uint64_t v377 = *(void *)(v303 + 40);
              if (v377)
              {
                unsigned int v378 = atomic_load((unsigned int *)(v377 + 704));
                _ZF = v378 == 2;
                unint64_t v379 = @"Yes";
                if (!_ZF) {
                  unint64_t v379 = @"No";
                }
              }
              else
              {
                unint64_t v379 = @"No";
              }
              v991[0].i32[0] = 136315650;
              *(uint64_t *)((char *)v991[0].i64 + 4) = v375;
              v991[0].i16[6] = 2112;
              *(uint64_t *)((char *)&v991[0].i64[1] + 6) = (uint64_t)v376;
              v991[1].i16[3] = 2112;
              v991[1].i64[1] = (uint64_t)v379;
              _os_log_impl(&dword_233120000, v374, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: PlaybackComponent is Remote :: Entity %s isActive == %@; materials.isLoaded == %@",
                (uint8_t *)v991,
                0x20u);
            }

            uint64_t v295 = v840;
          }
          float v302 = (void *)&unk_2687A0000;
          if (v976) {
            re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(&v976);
          }
          v976 = 0;
          re::TextureHandle::invalidate((re::TextureHandle *)v974);
          re::TextureHandle::invalidate((re::TextureHandle *)v973);
          re::TextureHandle::invalidate((re::TextureHandle *)&v972);
          re::TextureHandle::invalidate((re::TextureHandle *)&buf[32]);
          re::TextureHandle::invalidate((re::TextureHandle *)&buf[16]);
          re::TextureHandle::invalidate((re::TextureHandle *)buf);
          unint64_t v356 = 288;
          do
          {
            uint64_t v357 = &v982[v356 / 0x10];
            if (*(void *)((char *)&v980 + v356)) {
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)((char *)&v980 + v356));
            }
            *(void *)((char *)&v980 + v3re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
            re::TextureHandle::invalidate((re::TextureHandle *)&v357[-4]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v357[-5]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v357[-6]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v357[-7]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v357[-8]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v979[v356]);
            v356 -= 144;
          }
          while (v356);
          char v294 = v854;
          float v301 = v849;
        }
        else
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v911, (const re::AssetHandle *)(v303 + 168));
          long long v318 = re::VideoAsset::loadAndConnectForRendering(v911);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v911);
          uint64_t v298 = (re::VideoDefaults *)re::VideoDefaults::logEnabled(v319);
          if (v298)
          {
            uint64_t v367 = (id)*re::videoLogObjects(v298);
            if (os_log_type_enabled(v367, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v368 = *(void *)(v894 + 280);
              uint64_t v369 = @"Yes";
              if (*(_DWORD *)(v894 + 288)) {
                int v370 = @"Yes";
              }
              else {
                int v370 = @"No";
              }
              if (!v318) {
                uint64_t v369 = @"No";
              }
              v982[0].i32[0] = 136315650;
              *(uint64_t *)((char *)v982[0].i64 + 4) = v368;
              v982[0].i16[6] = 2112;
              *(uint64_t *)((char *)&v982[0].i64[1] + 6) = (uint64_t)v370;
              v982[1].i16[3] = 2112;
              v982[1].i64[1] = (uint64_t)v369;
              _os_log_impl(&dword_233120000, v367, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: Entity %s isActive == %@; VideoAssetIsLoaded == %@",
                (uint8_t *)v982,
                0x20u);
            }

            float v302 = (void *)&unk_2687A0000;
          }
          if ((*(unsigned char *)(v894 + 288) & 1) != 0 && v318)
          {
            uint64_t v320 = (re::VideoDefaults *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v894 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v320)
            {
              unint64_t v321 = v320;
              v322 = (re *)re::VideoDefaults::logEnabled(v320);
              if (v322)
              {
                uint64_t v371 = (id)*re::videoLogObjects(v322);
                if (os_log_type_enabled(v371, OS_LOG_TYPE_DEFAULT))
                {
                  int v372 = "Enabled";
                  if (!*((unsigned char *)v321 + 25)) {
                    int v372 = "Disabled";
                  }
                  v982[0].i32[0] = 136315138;
                  *(uint64_t *)((char *)v982[0].i64 + 4) = (uint64_t)v372;
                  _os_log_impl(&dword_233120000, v371, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: PassthroughDarkeningComponent Exists and lightspillEnabled is %s", (uint8_t *)v982, 0xCu);
                }
              }
              BOOL v323 = *((unsigned char *)v321 + 25) != 0;
            }
            else
            {
              BOOL v323 = 0;
            }
            v324 = (void *)*((void *)v318 + 24);
            BOOL v325 = v324 && *v324;
            *(unsigned char *)(v303 + 310) = v325;
            re::ecs2::Component::enqueueMarkDirty(v303);
            uint64_t v326 = *(re::ecs2::NetworkComponent **)(*(void *)(v303 + 16) + 200);
            if (v326) {
              re::ecs2::NetworkComponent::markDirty(v326, (const re::ecs2::Component *)v303);
            }
            uint64_t v327 = re::VideoPSEProcessor::NeedsProcessing(v326);
            uint64_t v328 = (re::VideoDefaults *)re::VideoDefaults::overridePseEnabled(v327);
            char v329 = (char)v328;
            if (re::VideoDefaults::useLegacyVideoTextures(v328))
            {
              BOOL v330 = 1;
            }
            else
            {
              re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)v303);
              BOOL v330 = *(unsigned char *)(v303 + 289) == 0;
            }
            uint64_t v331 = *((void *)v318 + 25);
            if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v894 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
            {
              BOOL v332 = 1;
            }
            else if (v331)
            {
              BOOL v332 = *(unsigned char *)(*(void *)v331 + 4) != 0;
            }
            else
            {
              BOOL v332 = 0;
            }
            *((unsigned char *)v318 + 932) = 0;
            v982[0].i64[0] = v894;
            v982[0].i64[1] = v303;
            uint64_t v333 = re::AssetHandle::AssetHandle((re::AssetHandle *)&v982[1], (const re::AssetHandle *)(v303 + 168));
            v982[2].i64[1] = (uint64_t)v318;
            v982[3].i8[0] = v323 & (v329 ^ 1);
            v982[3].i8[1] = v330;
            v982[3].i8[2] = v332;
            v982[3].i8[3] = v331 != 0;
            uint64_t v295 = v840;
            char v294 = v854;
            float v301 = v849;
            float v302 = (void *)&unk_2687A0000;
            if (v917 >= v916)
            {
              unint64_t v334 = v917 + 1;
              if (v916 < v917 + 1)
              {
                if (v915)
                {
                  unint64_t v335 = 8;
                  if (v916) {
                    unint64_t v335 = 2 * v916;
                  }
                  if (v335 <= v334) {
                    unint64_t v336 = v917 + 1;
                  }
                  else {
                    unint64_t v336 = v335;
                  }
                  re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(&v915, v336);
                }
                else
                {
                  re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(&v915, v334);
                  ++v918;
                }
              }
            }
            unint64_t v337 = v917;
            long long v338 = (float32x4_t *)&v919[7 * v917];
            *long long v338 = v982[0];
            v338[1].i64[1] = 0;
            v338[2].i64[0] = 0;
            v338[1].i64[0] = 0;
            v338[1].i64[1] = v982[1].i64[1];
            v982[1].i64[1] = 0;
            uint64_t v339 = v338[1].i64[0];
            v338[1].i64[0] = 0;
            v338[1].i64[0] = v982[1].i64[0];
            v982[1].i64[0] = v339;
            uint64_t v340 = v338[2].i64[0];
            v338[2].i64[0] = v982[2].i64[0];
            v982[2].i64[0] = v340;
            LODWORD(v340) = v982[3].i32[0];
            v338[2].i64[1] = v982[2].i64[1];
            v338[3].i32[0] = v340;
            unint64_t v917 = v337 + 1;
            ++v918;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v982[1]);
          }
        }
        ++v300;
      }
      while (v300 != v301);
    }
  }
  uint64_t v382 = (re::VideoDefaults *)re::VideoDefaults::autoSynchronousProcessingAllowed(v298);
  uint64_t v383 = (uint64_t)v919;
  unint64_t v384 = v917;
  if (v382)
  {
    unint64_t v385 = 126 - 2 * __clz(v917);
    if (v917) {
      uint64_t v386 = v385;
    }
    else {
      uint64_t v386 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *,false>((uint64_t)v919, (long long *)&v919[7 * v917], v386, 1);
  }
  if (v384)
  {
    long long v387 = (uint64_t *)(v383 + 40);
    uint64_t v388 = 56 * v384;
    do
    {
      uint64_t v389 = *v387;
      *(void *)(v389 + 16) = -1;
      uint64_t v390 = *(void *)(v389 + 168);
      if (v390) {
        *(unsigned char *)(v390 + 7048) &= 0xE0u;
      }
      v387 += 7;
      v388 -= 56;
    }
    while (v388);
  }
  uint64_t v391 = re::VideoDefaults::histogramGenerationAllowed(v382);
  if (v391)
  {
    uint64_t v391 = re::VideoDefaults::overrideHistogramGeneration((re::VideoDefaults *)v391);
    if (!v384) {
      goto LABEL_497;
    }
    uint64_t v392 = 56 * v384;
    long long v393 = (unsigned char *)(v383 + 48);
    do
    {
      if (*v393) {
        int v394 = 1;
      }
      else {
        int v394 = v391;
      }
      if (v394 == 1)
      {
        uint64_t v395 = *((void *)v393 - 1);
        if (v395)
        {
          uint64_t v396 = *(void *)(v395 + 168);
          if (v396) {
            *(unsigned char *)(v396 + 7048) |= 1u;
          }
        }
      }
      v393 += 56;
      v392 -= 56;
    }
    while (v392);
  }
  if (v384)
  {
    uint64_t v397 = 56 * v384;
    uint64_t v398 = (unsigned char *)(v383 + 40);
    do
    {
      if (v398[9])
      {
        uint64_t v399 = *(void *)(*(void *)v398 + 168);
        if (v399) {
          *(unsigned char *)(v399 + 7048) |= 2u;
        }
      }
      v398 += 56;
      v397 -= 56;
    }
    while (v397);
  }
LABEL_497:
  int v400 = (_anonymous_namespace_ *)re::VideoDefaults::autoSynchronousProcessingAllowed((re::VideoDefaults *)v391);
  if (v400)
  {
    if (v384)
    {
      uint64_t v401 = 56 * v384;
      uint64_t v402 = v383 + 40;
      do
      {
        uint64_t v403 = *(void *)(*(void *)v402 + 168);
        if (v403) {
          *(unsigned char *)(v403 + 7048) |= 8u;
        }
        v402 += 56;
        v401 -= 56;
      }
      while (v401);
    }
  }
  else if (v384)
  {
    uint64_t v404 = 56 * v384;
    unint64_t v405 = (unsigned char *)(v383 + 40);
    do
    {
      if (v405[10])
      {
        uint64_t v406 = *(void *)(*(void *)v405 + 168);
        if (v406) {
          *(unsigned char *)(v406 + 7048) |= 8u;
        }
      }
      v405 += 56;
      v404 -= 56;
    }
    while (v404);
  }
  uint64_t v910 = 0;
  v908[2] = 0;
  v908[1] = 0;
  int v909 = 0;
  re::DynamicArray<float *>::setCapacity(v908, v384);
  ++v909;
  if (v384)
  {
    v895 = (re::TextureHandle *)(v383 + 56 * v384);
    uint64_t v407 = 56 * v384;
    v812 = (re::TextureHandle *)v383;
    long long v408 = (unsigned char *)(v383 + 40);
    do
    {
      if (v408[11])
      {
        if (*(void *)v408)
        {
          uint64_t v409 = *(void *)(*(void *)v408 + 168);
          if (v409) {
            *(unsigned char *)(v409 + 7048) |= 0x10u;
          }
        }
      }
      v408 += 56;
      v407 -= 56;
    }
    while (v407);
    int v410 = 0;
    long long v411 = (re::TextureHandle *)v383;
    do
    {
      uint64_t v412 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)v411 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v826.i64[0])
      {
        if (v826.i64[0] == v412)
        {
          uint64_t v413 = re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v413)
          {
            uint64_t v414 = *(void *)(v413 + 24);
            if (v414)
            {
              v415 = *(re::ecs2::ImageBasedReflectionReceiverComponent ***)(v413 + 40);
              uint64_t v416 = 8 * v414;
              do
              {
                uint64_t v417 = *v415;
                BOOL v418 = re::ecs2::ImageBasedReflectionReceiverComponent::receivesSpecularLightSpill(*v415);
                if (v418)
                {
                  uint64_t v419 = *(void *)(*((void *)v411 + 5) + 168);
                  if (v419) {
                    *(unsigned char *)(v419 + 7048) |= 4u;
                  }
                }
                (*(void (**)(float32x4_t *__return_ptr, uint64_t, void))(*(void *)v297 + 8))(v982, v297, *((void *)v417 + 2));
                if (v982[0].i8[0]) {
                  _ZF = v982[0].i64[1] == 0;
                }
                else {
                  _ZF = 1;
                }
                int v421 = !_ZF;
                char v422 = !_ZF || v418;
                if (v422) {
                  int v423 = v421 ^ 1;
                }
                else {
                  int v423 = re::ecs2::ImageBasedReflectionReceiverComponent::receivesDiffuseLightSpill(v417);
                }
                v410 |= v423;
                ++v415;
                v416 -= 8;
              }
              while (v416);
            }
          }
        }
      }
      long long v411 = (re::TextureHandle *)((char *)v411 + 56);
    }
    while (v411 != v895);
    uint64_t v424 = &v966;
    unint64_t v425 = v812;
    while (1)
    {
      uint64_t v426 = *((void *)v425 + 1);
      uint64_t v427 = *(void *)(v426 + 40);
      if (v427)
      {
        uint64_t v428 = *(void *)v425;
        int v429 = (re::TextureHandle *)*((void *)v425 + 5);
        unsigned int v430 = atomic_load((unsigned int *)(v427 + 704));
        if (v430 == 2 && *(float *)(v840 + 208) == 0.0)
        {
          if (*(unsigned char *)(v426 + 57) && (unint64_t v431 = v921) != 0)
          {
            uint64_t v432 = *(void *)(v428 + 176);
            if (v432)
            {
              v807 = (re::TextureHandle *)*((void *)v425 + 5);
              uint64_t v433 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v432 + 32));
              if (v433)
              {
                v813 = v425;
                re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v428, (const re::ecs2::Entity *)1, v933);
                v982[0] = (float32x4_t)xmmword_23435FD50;
                v982[1] = (float32x4_t)xmmword_23435FD60;
                v982[2] = (float32x4_t)xmmword_23435FD80;
                v982[3] = (float32x4_t)xmmword_23435FBB0;
                re::MeshAsset::tightAABBFromMesh(v433, v982, &v931);
                uint64_t v433 = 0;
                int v434 = v923;
                v819 = (re::TextureHandle *)&v923[8 * v431];
                int v811 = v410;
                v809 = v424;
                while (1)
                {
                  v968 = 0;
                  v967 = 0;
                  uint64_t v969 = 0;
                  __p = 0;
                  v964 = 0;
                  unint64_t v966 = 0;
                  std::vector<re::ecs2::PolygonFrustumClipper::Vertex>::reserve(&v964, 4uLL);
                  float v435 = v434[2].f32[0];
                  float v436 = v434[2].f32[1];
                  float v437 = v436 + v436;
                  float v438 = v434[2].f32[2];
                  float v439 = v434[2].f32[3];
                  float v440 = v438 + v438;
                  float v441 = v435 * (float)(v435 + v435);
                  float v442 = v436 * (float)(v436 + v436);
                  float v443 = v438 * (float)(v438 + v438);
                  float v444 = (float)(v435 + v435) * v436;
                  float v445 = (float)(v435 + v435) * v438;
                  float v446 = v437 * v438;
                  float v447 = (float)(v435 + v435) * v439;
                  float v448 = v437 * v439;
                  float v449 = v440 * v439;
                  v1003.columns[0].i32[3] = 0;
                  v1003.columns[0].f32[0] = 1.0 - (float)(v442 + v443);
                  v1003.columns[0].f32[1] = v444 + v449;
                  v1003.columns[0].f32[2] = v445 - v448;
                  v1003.columns[1].i32[3] = 0;
                  v1003.columns[1].f32[0] = v444 - v449;
                  v1003.columns[1].f32[1] = 1.0 - (float)(v441 + v443);
                  v1003.columns[1].f32[2] = v446 + v447;
                  float v450 = v446 - v447;
                  v1003.columns[2].i32[3] = 0;
                  v1003.columns[2].f32[0] = v445 + v448;
                  v1003.columns[2].f32[1] = v450;
                  v1003.columns[2].f32[2] = 1.0 - (float)(v441 + v442);
                  v1003.columns[3] = (simd_float4)v434[1];
                  v1003.columns[3].i32[3] = 1.0;
                  simd_float4x4 v1004 = __invert_f4(v1003);
                  float32x4_t v850 = (float32x4_t)v1004.columns[1];
                  float32x4_t v855 = (float32x4_t)v1004.columns[0];
                  float32x4_t v846 = (float32x4_t)v1004.columns[3];
                  float32x4_t v848 = (float32x4_t)v1004.columns[2];
                  float v451 = (float)((float)(v434[7].f32[0] * v434[7].f32[2]) * v434[7].f32[1]) * v434[7].f32[3];
                  *(float32x4_t *)v861 = v434[1];
                  re::AABB::transform(&v931, v933, (uint64_t)v963);
                  uint32x4_t v452 = (uint32x4_t)vcgtq_f32(v963[0], *(float32x4_t *)v861);
                  v452.i32[3] = v452.i32[2];
                  if ((vmaxvq_u32(v452) & 0x80000000) != 0
                    || (uint32x4_t v453 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v861, v963[1]),
                        v453.i32[3] = v453.i32[2],
                        (vmaxvq_u32(v453) & 0x80000000) != 0))
                  {
                    uint64_t v455 = 0;
                    float32x4_t v993 = 0u;
                    float32x4_t v992 = 0u;
                    float32x4_t v456 = v931;
                    float32x4_t v457 = v931;
                    v457.i32[0] = v932;
                    v457.i32[3] = HIDWORD(v932);
                    memset(v991, 0, sizeof(v991));
                    *(float32x4_t *)v961 = v931;
                    v962[0] = v457;
                    long long v458 = v932;
                    DWORD2(v458) = v931.i32[2];
                    v456.i32[1] = DWORD1(v932);
                    v962[1] = v458;
                    v962[2] = v456;
                    float32x4_t v460 = v434[3];
                    float32x4_t v459 = v434[4];
                    float32x4_t v461 = v434[5];
                    float32x4_t v462 = v434[6];
                    float32x4_t v463 = v933[0];
                    float32x4_t v464 = v933[1];
                    float32x4_t v465 = v933[2];
                    float32x4_t v466 = v933[3];
                    do
                    {
                      unint64_t v467 = 0;
                      *(float32x4_t *)buf = v463;
                      *(float32x4_t *)&uint8_t buf[16] = v464;
                      *(float32x4_t *)&buf[32] = v465;
                      float32x4_t v972 = v466;
                      do
                      {
                        v982[v467 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v855, COERCE_FLOAT(*(_OWORD *)&buf[v467])), v850, *(float32x2_t *)&buf[v467], 1), v848, *(float32x4_t *)&buf[v467], 2), v846, *(float32x4_t *)&buf[v467], 3);
                        v467 += 16;
                      }
                      while (v467 != 64);
                      v991[v455] = vaddq_f32(v982[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v982[0], COERCE_FLOAT(*(_OWORD *)&v961[2 * v455])), v982[1], (float32x2_t)v961[2 * v455], 1), v982[2], *(float32x4_t *)&v961[2 * v455], 2));
                      ++v455;
                    }
                    while (v455 != 4);
                    float32x4_t v468 = vaddq_f32(v462, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v460, v991[0].f32[0]), v459, *(float32x2_t *)v991[0].f32, 1), v461, v991[0], 2));
                    uint64_t v469 = (float32x4_t *)__p;
                    *(float32x4_t *)v862 = v461;
                    *(float32x4_t *)v842 = v462;
                    *(float32x4_t *)v823 = v460;
                    float32x4_t v826 = v459;
                    if ((unint64_t)__p >= v966)
                    {
                      int64_t v471 = ((unsigned char *)__p - (unsigned char *)v964) >> 5;
                      unint64_t v472 = v471 + 1;
                      if ((unint64_t)(v471 + 1) >> 59) {
                        goto LABEL_1056;
                      }
                      uint64_t v473 = v966 - (void)v964;
                      if ((uint64_t)(v966 - (void)v964) >> 4 > v472) {
                        unint64_t v472 = v473 >> 4;
                      }
                      if ((unint64_t)v473 >= 0x7FFFFFFFFFFFFFE0) {
                        unint64_t v474 = 0x7FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v474 = v472;
                      }
                      if (v474)
                      {
                        *(float32x4_t *)v856 = v468;
                        unint64_t v475 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)v424, v474);
                        float32x4_t v468 = *(float32x4_t *)v856;
                      }
                      else
                      {
                        unint64_t v475 = 0;
                      }
                      unint64_t v476 = (float32x4_t *)&v475[32 * v471];
                      *unint64_t v476 = v468;
                      v476[1].i64[0] = 0;
                      unint64_t v477 = (float32x4_t *)__p;
                      uint64_t v478 = (char *)v964;
                      unint64_t v479 = v476;
                      if (__p != v964)
                      {
                        do
                        {
                          float32x4_t v480 = v477[-1];
                          v479[-2] = v477[-2];
                          v479[-1] = v480;
                          v479 -= 2;
                          v477 -= 2;
                        }
                        while (v477 != (float32x4_t *)v478);
                        unint64_t v477 = (float32x4_t *)v478;
                      }
                      v470 = v476 + 2;
                      v964 = v479;
                      __p = &v476[2];
                      unint64_t v966 = (unint64_t)&v475[32 * v474];
                      if (v477) {
                        operator delete(v477);
                      }
                      float32x4_t v461 = *(float32x4_t *)v862;
                      float32x4_t v462 = *(float32x4_t *)v842;
                      float32x4_t v460 = *(float32x4_t *)v823;
                      float32x4_t v459 = v826;
                    }
                    else
                    {
                      *(float32x4_t *)__p = v468;
                      v469[1].i64[0] = 0;
                      v470 = v469 + 2;
                    }
                    __p = v470;
                    float32x4_t v481 = vaddq_f32(v462, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v460, v991[1].f32[0]), v459, *(float32x2_t *)v991[1].f32, 1), v461, v991[1], 2));
                    if ((unint64_t)v470 >= v966)
                    {
                      uint64_t v483 = ((char *)v470 - (unsigned char *)v964) >> 5;
                      if ((unint64_t)(v483 + 1) >> 59) {
                        goto LABEL_1056;
                      }
                      unint64_t v484 = (uint64_t)(v966 - (void)v964) >> 4;
                      if (v484 <= v483 + 1) {
                        unint64_t v484 = v483 + 1;
                      }
                      if (v966 - (unint64_t)v964 >= 0x7FFFFFFFFFFFFFE0) {
                        unint64_t v485 = 0x7FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v485 = v484;
                      }
                      if (v485)
                      {
                        *(float32x4_t *)v857 = v481;
                        uint64_t v486 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)v424, v485);
                        float32x4_t v481 = *(float32x4_t *)v857;
                      }
                      else
                      {
                        uint64_t v486 = 0;
                      }
                      uint64_t v487 = (float32x4_t *)&v486[32 * v483];
                      *uint64_t v487 = v481;
                      v487[1].i64[0] = 1065353216;
                      uint64_t v488 = (float32x4_t *)__p;
                      uint64_t v489 = (char *)v964;
                      v490 = v487;
                      if (__p != v964)
                      {
                        do
                        {
                          float32x4_t v491 = v488[-1];
                          v490[-2] = v488[-2];
                          v490[-1] = v491;
                          v490 -= 2;
                          v488 -= 2;
                        }
                        while (v488 != (float32x4_t *)v489);
                        uint64_t v488 = (float32x4_t *)v489;
                      }
                      uint64_t v482 = v487 + 2;
                      v964 = v490;
                      __p = &v487[2];
                      unint64_t v966 = (unint64_t)&v486[32 * v485];
                      if (v488) {
                        operator delete(v488);
                      }
                      float32x4_t v461 = *(float32x4_t *)v862;
                      float32x4_t v462 = *(float32x4_t *)v842;
                      float32x4_t v460 = *(float32x4_t *)v823;
                      float32x4_t v459 = v826;
                    }
                    else
                    {
                      float32x4_t *v470 = v481;
                      v470[1].i64[0] = 1065353216;
                      uint64_t v482 = v470 + 2;
                    }
                    __p = v482;
                    float32x4_t v492 = vaddq_f32(v462, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v460, v992.f32[0]), v459, *(float32x2_t *)v992.f32, 1), v461, v992, 2));
                    if ((unint64_t)v482 >= v966)
                    {
                      uint64_t v494 = ((char *)v482 - (unsigned char *)v964) >> 5;
                      if ((unint64_t)(v494 + 1) >> 59) {
                        goto LABEL_1056;
                      }
                      unint64_t v495 = (uint64_t)(v966 - (void)v964) >> 4;
                      if (v495 <= v494 + 1) {
                        unint64_t v495 = v494 + 1;
                      }
                      if (v966 - (unint64_t)v964 >= 0x7FFFFFFFFFFFFFE0) {
                        unint64_t v496 = 0x7FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v496 = v495;
                      }
                      if (v496)
                      {
                        *(float32x4_t *)v858 = v492;
                        uint64_t v497 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)v424, v496);
                        float32x4_t v492 = *(float32x4_t *)v858;
                      }
                      else
                      {
                        uint64_t v497 = 0;
                      }
                      BOOL v498 = (float32x4_t *)&v497[32 * v494];
                      *BOOL v498 = v492;
                      v498[1].i64[0] = 0x3F8000003F800000;
                      uint64_t v499 = (float32x4_t *)__p;
                      int v500 = (char *)v964;
                      v501 = v498;
                      if (__p != v964)
                      {
                        do
                        {
                          float32x4_t v502 = v499[-1];
                          v501[-2] = v499[-2];
                          v501[-1] = v502;
                          v501 -= 2;
                          v499 -= 2;
                        }
                        while (v499 != (float32x4_t *)v500);
                        uint64_t v499 = (float32x4_t *)v500;
                      }
                      int v493 = v498 + 2;
                      v964 = v501;
                      __p = &v498[2];
                      unint64_t v966 = (unint64_t)&v497[32 * v496];
                      if (v499) {
                        operator delete(v499);
                      }
                      float32x4_t v461 = *(float32x4_t *)v862;
                      float32x4_t v462 = *(float32x4_t *)v842;
                      float32x4_t v460 = *(float32x4_t *)v823;
                      float32x4_t v459 = v826;
                    }
                    else
                    {
                      *uint64_t v482 = v492;
                      v482[1].i64[0] = 0x3F8000003F800000;
                      int v493 = v482 + 2;
                    }
                    __p = v493;
                    float32x4_t v503 = vaddq_f32(v462, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v460, v993.f32[0]), v459, *(float32x2_t *)v993.f32, 1), v461, v993, 2));
                    if ((unint64_t)v493 >= v966)
                    {
                      uint64_t v505 = ((char *)v493 - (unsigned char *)v964) >> 5;
                      if ((unint64_t)(v505 + 1) >> 59) {
LABEL_1056:
                      }
                        abort();
                      unint64_t v506 = (uint64_t)(v966 - (void)v964) >> 4;
                      if (v506 <= v505 + 1) {
                        unint64_t v506 = v505 + 1;
                      }
                      if (v966 - (unint64_t)v964 >= 0x7FFFFFFFFFFFFFE0) {
                        unint64_t v507 = 0x7FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v507 = v506;
                      }
                      if (v507)
                      {
                        *(float32x4_t *)v863 = v503;
                        uint64_t v508 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)v424, v507);
                        float32x4_t v503 = *(float32x4_t *)v863;
                      }
                      else
                      {
                        uint64_t v508 = 0;
                      }
                      v509 = (float32x4_t *)&v508[32 * v505];
                      float32x4_t *v509 = v503;
                      v509[1].i64[0] = 0x3F80000000000000;
                      v510 = (float32x4_t *)__p;
                      uint64_t v511 = (char *)v964;
                      v512 = v509;
                      if (__p != v964)
                      {
                        do
                        {
                          float32x4_t v513 = v510[-1];
                          v512[-2] = v510[-2];
                          v512[-1] = v513;
                          v512 -= 2;
                          v510 -= 2;
                        }
                        while (v510 != (float32x4_t *)v511);
                        v510 = (float32x4_t *)v511;
                      }
                      int v504 = v509 + 2;
                      v964 = v512;
                      __p = &v509[2];
                      unint64_t v966 = (unint64_t)&v508[32 * v507];
                      if (v510) {
                        operator delete(v510);
                      }
                    }
                    else
                    {
                      *int v493 = v503;
                      v493[1].i64[0] = 0x3F80000000000000;
                      int v504 = v493 + 2;
                    }
                    __p = v504;
                    re::ecs2::PolygonFrustumClipper::clipToFrustum((char **)&v967, &v964);
                    int64_t v514 = (unsigned char *)__p - (unsigned char *)v964;
                    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v964) >= 0x60)
                    {
                      *(void *)&buf[32] = 0;
                      unint64_t v515 = v514 >> 5;
                      memset(buf, 0, 28);
                      uint64_t v960 = 0;
                      unint64_t v958 = 0;
                      unint64_t v956 = 0;
                      unint64_t v957 = 0;
                      int v959 = 0;
                      uint64_t v955 = 0;
                      unint64_t v953 = 0;
                      *(void *)v951 = 0;
                      unint64_t v952 = 0;
                      int v954 = 0;
                      re::DynamicArray<re::Quaternion<float>>::setCapacity(buf, v514 >> 5);
                      if (v957 < v515) {
                        re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v956, v515);
                      }
                      if (v952 < v515) {
                        re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v951, v515);
                      }
                      v517 = (float32x2_t *)v964;
                      v518 = (float32x2_t *)__p;
                      while (v517 != v518)
                      {
                        *(float32x2_t *)v516.f32 = *v517;
                        v516.i32[2] = v517[1].i32[0];
                        v519 = (const float *)&v517[1] + 1;
                        float32x4_t v520 = vld1q_dup_f32(v519);
                        float32x4_t v521 = vdivq_f32(v516, v520);
                        v982[0] = v521;
                        v521.f32[1] = -v521.f32[1];
                        v947[0] = vmul_f32(vadd_f32(*(float32x2_t *)v521.f32, _D10), (float32x2_t)0x3F0000003F000000);
                        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)buf, (__n128 *)v982);
                        re::DynamicArray<unsigned long>::add(&v956, v947);
                        v943[0] = vminnm_f32(vmaxnm_f32(v517[2], 0), _D10);
                        re::DynamicArray<unsigned long>::add(v951, v943);
                        v517 += 4;
                      }
                      v950 = 0;
                      uint64_t v948 = 0;
                      v947[0] = 0;
                      v947[1] = 0;
                      int v949 = 0;
                      v946 = 0;
                      uint64_t v944 = 0;
                      v943[0] = 0;
                      v943[1] = 0;
                      int v945 = 0;
                      re::computeConvexHull2d(v960, v958, (uint64_t)v947);
                      re::computeConvexHull2d(v955, v953, (uint64_t)v943);
                      uint64_t v454 = 0;
                      if (v948 && v944)
                      {
                        uint64_t v942 = 0;
                        uint64_t v940 = 0;
                        v939[0] = 0;
                        v939[1] = 0;
                        int v941 = 0;
                        uint64_t v938 = 0;
                        uint64_t v936 = 0;
                        uint64_t v934 = 0;
                        unint64_t v935 = 0;
                        int v937 = 0;
                        if (v958)
                        {
                          re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v939, v958);
                          unint64_t v522 = v935;
                        }
                        else
                        {
                          unint64_t v522 = 0;
                        }
                        uint64_t v523 = v953;
                        if (v522 < v953) {
                          re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v934, v953);
                        }
                        if (v948)
                        {
                          uint64_t v524 = v950;
                          uint64_t v525 = 4 * v948;
                          while (1)
                          {
                            unint64_t v84 = *v524;
                            unint64_t v89 = v958;
                            if (v958 <= v84) {
                              break;
                            }
                            re::DynamicArray<unsigned long>::add(v939, (void *)(v960 + 8 * v84));
                            ++v524;
                            v525 -= 4;
                            if (!v525) {
                              goto LABEL_644;
                            }
                          }
LABEL_1022:
                          uint64_t v970 = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          int v994 = 136315906;
                          v995 = "operator[]";
                          __int16 v996 = 1024;
                          int v997 = 789;
                          __int16 v998 = 2048;
                          unint64_t v999 = v84;
                          __int16 v1000 = 2048;
                          unint64_t v1001 = v89;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1023:
                          uint64_t v970 = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          int v994 = 136315906;
                          v995 = "operator[]";
                          __int16 v996 = 1024;
                          int v997 = 789;
                          __int16 v998 = 2048;
                          unint64_t v999 = v84;
                          __int16 v1000 = 2048;
                          unint64_t v1001 = v89;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1024:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1025:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1026:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1027:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1028:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1029:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1030:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1031:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1032:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1033:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1034:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1035:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1036:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1037:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1038:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1039:
                          v961[0] = 0;
                          long long v983 = 0u;
                          memset(v982, 0, sizeof(v982));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(void *)&uint8_t buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(void *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = 0;
                          LODWORD(v804) = 38;
                          v803 = (BOOL *)buf;
                          _os_log_send_and_compose_impl();
                          uint64_t v71 = _os_crash_msg();
                          __break(1u);
LABEL_1040:
                          v796 = (id)*re::videoLogObjects((re *)v71);
                          if (os_log_type_enabled(v796, OS_LOG_TYPE_DEFAULT))
                          {
                            v982[0].i32[0] = 134218240;
                            *(float32x2_t *)&v982[0].i32[1] = _D10;
                            v982[0].i16[6] = 2048;
                            *(double *)((char *)&v982[0].i64[1] + 6) = *(double *)&_D10 - v10;
                            _os_log_impl(&dword_233120000, v796, OS_LOG_TYPE_DEFAULT, "Target Display Time: %.6fs (%+.6fs)", (uint8_t *)v982, 0x16u);
                          }

                          uint64_t v6 = v840;
                          goto LABEL_101;
                        }
LABEL_644:
                        if (v944)
                        {
                          v526 = v946;
                          uint64_t v527 = 4 * v944;
                          do
                          {
                            unint64_t v84 = *v526;
                            unint64_t v89 = v953;
                            if (v953 <= v84) {
                              goto LABEL_1023;
                            }
                            re::DynamicArray<unsigned long>::add(&v934, (void *)(v955 + 8 * v84));
                            ++v526;
                            v527 -= 4;
                          }
                          while (v527);
                        }
                        v982[0].i64[0] = v942;
                        v982[0].i64[1] = v940;
                        re::computeSignedAreaOf2DPolygon(v982, v523);
                        float v529 = v451 * v528;
                        v982[0].i64[0] = v938;
                        v982[0].i64[1] = v936;
                        uint64_t v531 = (re::VideoDefaults *)re::computeSignedAreaOf2DPolygon(v982, v530);
                        *(float *)&CFTimeInterval v10 = v532;
                        float v533 = 1.0 / v532;
                        if (*(float *)&v10 <= 0.0001) {
                          float v533 = 0.0;
                        }
                        if (v533 <= 4.0) {
                          float v534 = v533;
                        }
                        else {
                          float v534 = 4.0;
                        }
                        uint64_t v535 = vcvtps_s32_f32(v529 * v534);
                        uint64_t v536 = (uint64_t)v451;
                        if ((uint64_t)v451 >= v535) {
                          uint64_t v536 = v535;
                        }
                        if (v535 >= 0) {
                          uint64_t v454 = v536;
                        }
                        else {
                          uint64_t v454 = 0;
                        }
                        uint64_t v537 = (re *)re::VideoDefaults::logEnabled(v531);
                        int v410 = v811;
                        uint64_t v424 = v809;
                        if (v537)
                        {
                          uint64_t v538 = (id)*re::videoLogObjects(v537);
                          if (os_log_type_enabled(v538, OS_LOG_TYPE_DEFAULT))
                          {
                            v982[0].i32[0] = 134218752;
                            *(double *)((char *)v982[0].i64 + 4) = v534;
                            v982[0].i16[6] = 2048;
                            *(double *)((char *)&v982[0].i64[1] + 6) = v529;
                            v982[1].i16[3] = 2048;
                            v982[1].i64[1] = v454;
                            v982[2].i16[0] = 2048;
                            *(double *)((char *)v982[2].i64 + 2) = (float)(*(float *)&v10 * 100.0);
                            _os_log_impl(&dword_233120000, v538, OS_LOG_TYPE_DEFAULT, "Area: %f * %f,  estimatiouint64_t n = %lld (%.0f%% visible)", (uint8_t *)v982, 0x2Au);
                          }
                        }
                        if (v934 && v938) {
                          (*(void (**)(void))(*(void *)v934 + 40))();
                        }
                        if (v939[0] && v942) {
                          (*(void (**)(void))(*(void *)v939[0] + 40))();
                        }
                      }
                      if (v943[0] && v946) {
                        (*(void (**)(void))(*(void *)v943[0] + 40))();
                      }
                      if (v947[0] && v950) {
                        (*(void (**)(void))(*(void *)v947[0] + 40))();
                      }
                      if (*(void *)v951 && v955) {
                        (*(void (**)(void))(**(void **)v951 + 40))();
                      }
                      if (v956 && v960) {
                        (*(void (**)(void))(*(void *)v956 + 40))();
                      }
                      if (*(void *)buf && *(void *)&buf[32]) {
                        (*(void (**)(void))(**(void **)buf + 40))();
                      }
                    }
                    else
                    {
                      uint64_t v454 = 0;
                    }
                  }
                  else
                  {
                    uint64_t v454 = (uint64_t)v451;
                  }
                  if (v964)
                  {
                    __p = v964;
                    operator delete(v964);
                  }
                  if (v967)
                  {
                    v968 = v967;
                    operator delete(v967);
                  }
                  if (v454 > v433) {
                    uint64_t v433 = v454;
                  }
                  v434 += 8;
                  if (v434 == (float32x4_t *)v819)
                  {
                    unint64_t v425 = v813;
                    break;
                  }
                }
              }
              int v429 = v807;
            }
            else
            {
              uint64_t v433 = 0;
            }
          }
          else
          {
            uint64_t v433 = -1;
          }
          uint64_t v539 = *((void *)v429 + 2);
          if (v539 <= v433) {
            uint64_t v539 = v433;
          }
          *((void *)v429 + 2) = v539;
        }
      }
      unint64_t v425 = (re::TextureHandle *)((char *)v425 + 56);
      if (v425 == v895)
      {
        LOBYTE(v811) = v410;
        uint64_t v383 = (uint64_t)v919;
        unint64_t v540 = v917;
        goto LABEL_700;
      }
    }
  }
  LOBYTE(v811) = 0;
  unint64_t v540 = 0;
LABEL_700:
  v992.i32[0] = 0;
  memset(v991, 0, sizeof(v991));
  uint64_t v3 = 0x7FFFFFFFLL;
  *(uint64_t *)((char *)v992.i64 + 4) = 0x7FFFFFFFLL;
  unint64_t v542 = v383 + 56 * v540;
  unint64_t v843 = v542;
  unint64_t v824 = v540;
  if (v540)
  {
    for (uint64_t m = v383; m != v542; m += 56)
    {
      uint64_t v544 = *(void *)(m + 8);
      unint64_t v545 = *(void *)(m + 40);
      if (v544) {
        BOOL v546 = v545 == 0;
      }
      else {
        BOOL v546 = 1;
      }
      if (!v546 && *(void *)(v545 + 192))
      {
        int v547 = *(unsigned __int8 *)(v544 + 56);
        unint64_t v548 = v991[0].i64[0];
        unint64_t v549 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v545 ^ (v545 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v545 ^ (v545 >> 30))) >> 27));
        unint64_t v550 = v549 ^ (v549 >> 31);
        if (!v991[0].i64[0]) {
          goto LABEL_711;
        }
        uint64_t v551 = *(unsigned int *)(v991[0].i64[1] + 4 * (v550 % v991[1].u32[2]));
        if (v551 != 0x7FFFFFFF)
        {
          uint64_t v559 = v991[1].i64[0] + 32 * v551;
          uint64_t v560 = *(void *)(v559 + 16);
          uint64_t v561 = *(unsigned int *)(v991[0].i64[1] + 4 * (v550 % v991[1].u32[2]));
          if (v560 == v545)
          {
            if (*(unsigned __int8 *)(v559 + 24) != v547)
            {
LABEL_732:
              *(unsigned char *)(v991[1].i64[0] + 32 * v551 + 24) = v547;
              long long v564 = (id)*re::videoLogObjects(v541);
              if (os_log_type_enabled(v564, OS_LOG_TYPE_DEFAULT))
              {
                v982[0].i16[0] = 0;
                _os_log_impl(&dword_233120000, v564, OS_LOG_TYPE_DEFAULT, "Differing viewing modes detected on VideoComponents that share the same VideoAsset.", (uint8_t *)v982, 2u);
              }

              unint64_t v542 = v843;
              continue;
            }
          }
          else
          {
            while (1)
            {
              uint64_t v561 = *(_DWORD *)(v991[1].i64[0] + 32 * v561 + 8) & 0x7FFFFFFF;
              if (v561 == 0x7FFFFFFF) {
                break;
              }
              uint64_t v562 = v991[1].i64[0] + 32 * v561;
              if (*(void *)(v562 + 16) == v545)
              {
                if (*(unsigned __int8 *)(v562 + 24) == v547) {
                  break;
                }
                for (n = *(unsigned int *)(v991[0].i64[1] + 4 * (v550 % v991[1].u32[2])); v560 != v545; uint64_t v551 = n)
                {
                  uint64_t n = *(_DWORD *)(v991[1].i64[0] + 32 * n + 8) & 0x7FFFFFFF;
                  uint64_t v551 = 0x7FFFFFFFLL;
                  if (n == 0x7FFFFFFF) {
                    break;
                  }
                  uint64_t v560 = *(void *)(v991[1].i64[0] + 32 * n + 16);
                }
                goto LABEL_732;
              }
            }
          }
        }
        unint64_t v548 = v550 % v991[1].u32[2];
        uint64_t v552 = *(unsigned int *)(v991[0].i64[1] + 4 * v548);
        if (v552 == 0x7FFFFFFF)
        {
          unint64_t v542 = v843;
LABEL_711:
          uint64_t v553 = v992.u32[1];
          if (v992.i32[1] == 0x7FFFFFFF)
          {
            uint64_t v553 = v992.u32[0];
            __int32 v554 = v992.i32[0];
            if (v992.i32[0] == v991[1].i32[2])
            {
              re::HashTable<re::VideoAsset const*,re::ecs2::VideoViewingMode,re::Hash<re::VideoAsset const*>,re::EqualTo<re::VideoAsset const*>,true,false>::setCapacity((uint64_t)v991, 2 * v991[1].i32[3]);
              unint64_t v542 = v843;
              __int32 v554 = v992.i32[0];
              unint64_t v548 = v550 % v991[1].u32[2];
            }
            v992.i32[0] = v554 + 1;
            uint64_t v555 = v991[1].i64[0];
            int v556 = *(_DWORD *)(v991[1].i64[0] + 32 * v553 + 8);
          }
          else
          {
            uint64_t v555 = v991[1].i64[0];
            int v556 = *(_DWORD *)(v991[1].i64[0] + 32 * v992.u32[1] + 8);
            v992.i32[1] = v556 & 0x7FFFFFFF;
          }
          uint64_t v557 = v555 + 32 * v553;
          *(_DWORD *)(v557 + 8) = v556 | 0x80000000;
          uint64_t v558 = v991[0].i64[1];
          *(_DWORD *)(v557 + 8) = *(_DWORD *)(v991[0].i64[1] + 4 * v548) | 0x80000000;
          *(void *)uint64_t v557 = v550;
          *(void *)(v557 + 16) = v545;
          *(unsigned char *)(v557 + 24) = v547;
          *(_DWORD *)(v558 + 4 * v548) = v553;
          ++v991[1].i32[3];
          ++v992.i32[2];
          continue;
        }
        unint64_t v542 = v843;
        while (*(void *)(v991[1].i64[0] + 32 * v552 + 16) != v545)
        {
          uint64_t v552 = *(_DWORD *)(v991[1].i64[0] + 32 * v552 + 8) & 0x7FFFFFFF;
          if (v552 == 0x7FFFFFFF) {
            goto LABEL_711;
          }
        }
      }
    }
  }
  unsigned int v565 = v992.i32[0];
  if (v992.i32[0])
  {
    uint64_t v566 = 0;
    uint64_t v567 = (int *)(v991[1].i64[0] + 8);
    while (1)
    {
      int v568 = *v567;
      v567 += 8;
      if (v568 < 0) {
        break;
      }
      if (v992.u32[0] == ++v566)
      {
        LODWORD(v566) = v992.i32[0];
        break;
      }
    }
  }
  else
  {
    LODWORD(v566) = 0;
  }
  if (v992.i32[0] == v566)
  {
    uint64_t v847 = 0;
    LOBYTE(v845) = 0;
  }
  else
  {
    LOBYTE(v845) = 0;
    uint64_t v847 = 0;
    uint64_t v569 = v566;
    uint64_t v570 = v991[1].i64[0];
    __int32 v827 = v992.i32[0];
    do
    {
      if (*(void *)(*(void *)(v570 + 32 * v569 + 16) + 192))
      {
        uint64_t v851 = *(void *)(v570 + 32 * v569 + 16);
        v961[0] = 0;
        uint64_t v571 = re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v571)
        {
          uint64_t v572 = *(void *)(v571 + 24);
          if (v572)
          {
            long long v573 = *(uint64_t **)(v571 + 40);
            uint64_t v574 = 8 * v572;
            do
            {
              uint64_t v575 = *v573;
              long long v576 = *(_OWORD *)(*v573 + 104);
              *(_OWORD *)buf = *(_OWORD *)(*v573 + 88);
              *(_OWORD *)&uint8_t buf[16] = v576;
              long long v577 = (re::DynamicString *)(v575 + 120);
              re::DynamicString::DynamicString((re::DynamicString *)&buf[32], (const re::DynamicString *)(v575 + 120));
              if (buf[0])
              {
                long long v905 = *(_OWORD *)buf;
                long long v906 = *(_OWORD *)&buf[16];
                re::DynamicString::DynamicString((re::DynamicString *)v907, (const re::DynamicString *)&buf[32]);
                long long v578 = v906;
                *(_OWORD *)(v851 + 40) = v905;
                *(_OWORD *)(v851 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v578;
                re::DynamicString::operator=((re::DynamicString *)(v851 + 72), (re::DynamicString *)v907);
                __n128 v579 = (_anonymous_namespace_ *)v907[0];
                if (v907[0])
                {
                  if (v907[1]) {
                    __n128 v579 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v907[0] + 40))();
                  }
                  memset(v907, 0, 32);
                }
                uint64_t v580 = (float32x4_t *)(v575 + 88);
                v982[0].i8[0] = 0;
                memset(&v982[0].u32[2], 0, 56);
                re::DynamicString::setCapacity((float32x4_t *)v982[2].i64, 0);
                float32x4_t v581 = v982[1];
                *uint64_t v580 = v982[0];
                v580[1] = v581;
                re::DynamicString::operator=(v577, (re::DynamicString *)&v982[2]);
                if (v982[2].i64[0] && (v982[2].i8[8] & 1) != 0) {
                  (*(void (**)(void))(*(void *)v982[2].i64[0] + 40))();
                }
              }
              if (*(void *)&buf[32] && (buf[40] & 1) != 0) {
                (*(void (**)(void))(**(void **)&buf[32] + 40))();
              }
              ++v573;
              v574 -= 8;
            }
            while (v574);
          }
        }
        v982[0].i8[0] = 0;
        buf[0] = 0;
        uint64_t v583 = *(float32x2_t **)(v840 + 128);
        v582 = *(char ***)(v840 + 136);
        int v584 = *(re::RenderManager **)(v840 + 120);
        CMTime v904 = v930;
        re::VideoAsset::retrieveBuffersAndUpdateRuntimeData((re::VideoAsset *)v851, v582, v584, v583, log, (unint64_t)v961, &v904, v14, (id *)v982, (BOOL *)buf);
        v847 |= v961[0];
        LOBYTE(v845) = (v982[0].u8[0] | v845 & 1) != 0;
        unsigned int v565 = v827;
      }
      if (v565 <= (int)v566 + 1) {
        unsigned int v585 = v566 + 1;
      }
      else {
        unsigned int v585 = v565;
      }
      while (1)
      {
        uint64_t v569 = (v566 + 1);
        if (v585 - 1 == v566) {
          break;
        }
        LODWORD(v566) = v566 + 1;
        unsigned int v586 = v569;
        if ((*(_DWORD *)(v570 + 32 * v569 + 8) & 0x80000000) != 0) {
          goto LABEL_768;
        }
      }
      unsigned int v586 = v585;
LABEL_768:
      LODWORD(v566) = v586;
    }
    while (v565 != v586);
  }
  double v587 = (uint64_t *)v383;
  __n128 v588 = (uint64_t *)v843;
  if (v824)
  {
    do
    {
      uint64_t v589 = v587[1];
      uint64_t v590 = *(void *)(v589 + 40);
      if (v590)
      {
        uint64_t v591 = (re::VideoAsset *)v587[5];
        unsigned int v592 = atomic_load((unsigned int *)(v590 + 704));
        if (v592 == 2)
        {
          if (*(void *)(v589 + 176))
          {
            uint64_t v593 = *((void *)v591 + 21);
            v814 = (re::TextureHandle *)v587;
            v828 = (re::VideoAsset *)v587[5];
            if (re::VideoDefaults::useLegacyVideoTextures(v541))
            {
              BOOL v594 = 1;
            }
            else
            {
              re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)v589);
              BOOL v594 = *(unsigned char *)(v589 + 289) == 0;
            }
            re::ecs2::VideoComponent::getVideoTextureHandles((re::ecs2::VideoComponent *)v589, (uint64_t)v982);
            int v595 = v985[24];
            unint64_t v596 = 288;
            do
            {
              unsigned int v597 = &v982[v596 / 0x10];
              if (*(void *)((char *)&v980 + v596)) {
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)((char *)&v980 + v596));
              }
              *(void *)((char *)&v980 + v596) = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)&v597[-4]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v597[-5]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v597[-6]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v597[-7]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v597[-8]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v979[v596]);
              v596 -= 144;
            }
            while (v596);
            for (iuint64_t i = 0; ii != 18; ii += 9)
            {
              uint64_t v600 = &v982[ii];
              v600[8].i64[0] = 0;
              v600[7].i32[2] = 0;
              *uint64_t v600 = 0uLL;
              v600[1] = 0uLL;
              v600[2] = 0uLL;
              v600[3] = 0uLL;
              v600[4] = 0uLL;
              v600[5] = 0uLL;
              *(float32x4_t *)((char *)&v600[5] + 12) = 0uLL;
            }
            int v989 = -1;
            char v990 = 0;
            uint64_t v601 = (re *)re::VideoDefaults::logEnabled(v598);
            if (v594)
            {
              if (v601)
              {
                uint64_t v621 = (id)*re::videoLogObjects(v601);
                if (os_log_type_enabled(v621, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_233120000, v621, OS_LOG_TYPE_DEFAULT, "Using legacy video textures.", buf, 2u);
                }
              }
              re::ecs2::VideoComponent::getLegacyVideoTextureHandles((re::ecs2::VideoComponent *)buf, v589);
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>((uint64_t)buf, (uint64_t)&v980, (uint64_t)v982);
              int v989 = v980;
              char v990 = v981;
              unint64_t v602 = 288;
              do
              {
                unint64_t v603 = &buf[v602];
                if (*(uint64_t *)((char *)&v969 + v602)) {
                  re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)((char *)&v969 + v602));
                }
                *(uint64_t *)((char *)&v969 + v602) = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)(v603 - 64));
                re::TextureHandle::invalidate((re::TextureHandle *)(v603 - 80));
                re::TextureHandle::invalidate((re::TextureHandle *)(v603 - 96));
                re::TextureHandle::invalidate((re::TextureHandle *)(v603 - 112));
                re::TextureHandle::invalidate((re::TextureHandle *)(v603 - 128));
                re::TextureHandle::invalidate((re::TextureHandle *)&v962[v602 / 0x10]);
                v602 -= 144;
              }
              while (v602);
            }
            else
            {
              if (v601)
              {
                v622 = (id)*re::videoLogObjects(v601);
                if (os_log_type_enabled(v622, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_233120000, v622, OS_LOG_TYPE_DEFAULT, "Using regular video textures.", buf, 2u);
                }
              }
              re::ecs2::VideoComponent::getVideoTextureHandles((re::ecs2::VideoComponent *)v589, (uint64_t)buf);
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>((uint64_t)buf, (uint64_t)&v980, (uint64_t)v982);
              int v989 = v980;
              char v990 = v981;
              unint64_t v604 = 288;
              do
              {
                uint64_t v605 = &buf[v604];
                if (*(uint64_t *)((char *)&v969 + v604)) {
                  re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)((char *)&v969 + v604));
                }
                *(uint64_t *)((char *)&v969 + v604) = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)(v605 - 64));
                re::TextureHandle::invalidate((re::TextureHandle *)(v605 - 80));
                re::TextureHandle::invalidate((re::TextureHandle *)(v605 - 96));
                re::TextureHandle::invalidate((re::TextureHandle *)(v605 - 112));
                re::TextureHandle::invalidate((re::TextureHandle *)(v605 - 128));
                re::TextureHandle::invalidate((re::TextureHandle *)&v962[v604 / 0x10]);
                v604 -= 144;
              }
              while (v604);
            }
            re::TextureHandle::TextureHandle((re::TextureHandle *)buf, (const re::TextureHandle *)v982);
            re::TextureHandle::TextureHandle((re::TextureHandle *)&buf[16], (const re::TextureHandle *)&v982[1]);
            re::TextureHandle::TextureHandle((re::TextureHandle *)&buf[32], (const re::TextureHandle *)&v982[2]);
            re::TextureHandle::TextureHandle((re::TextureHandle *)&v972, (const re::TextureHandle *)&v982[3]);
            re::TextureHandle::TextureHandle((re::TextureHandle *)v973, (const re::TextureHandle *)&v983);
            re::TextureHandle::TextureHandle((re::TextureHandle *)v974, (const re::TextureHandle *)&v984);
            *(_OWORD *)v975 = *(_OWORD *)v985;
            *(_OWORD *)&v975[12] = *(_OWORD *)&v985[12];
            v976 = 0;
            re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v976, &v976, cf);
            uint64_t v606 = 0;
            __int16 v977 = v987;
            char v978 = v988;
            int v607 = v975[25];
            uint64_t v608 = *(void *)(v840 + 120);
            do
            {
              uint64_t v609 = &v901[v606];
              *((void *)v609 + 16) = 0;
              *((_DWORD *)v609 + 30) = 0;
              *(_OWORD *)uint64_t v609 = 0uLL;
              *((_OWORD *)v609 + 1) = 0uLL;
              *((_OWORD *)v609 + 2) = 0uLL;
              *((_OWORD *)v609 + 3) = 0uLL;
              *((_OWORD *)v609 + 4) = 0uLL;
              *((_OWORD *)v609 + 5) = 0uLL;
              v606 += 144;
              *(_OWORD *)(v609 + 92) = 0uLL;
            }
            while (v606 != 288);
            BOOL v610 = v607 == 0;
            char v611 = v595 != 0;
            if (v593) {
              uint64_t v612 = v593 + 2128;
            }
            else {
              uint64_t v612 = 0;
            }
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)v961, (uint64_t)v982, (uint64_t)&v989, (uint64_t)v901);
            int v902 = v989;
            char v903 = v990;
            int v613 = re::ecs2::VideoComponent::YCbCrMatrix((re::ecs2::VideoComponent *)v589);
            int v614 = re::ecs2::VideoComponent::imageFunction((re::ecs2::VideoComponent *)v589);
            re::ecs2::VideoComponent::processAttachments(v589, v608, (uint64_t)v901, v613, v614, v612, v611, v610);
            for (juint64_t j = 0; jj != -288; jj -= 144)
            {
              long long v616 = &v901[jj];
              if (*(void *)&v901[jj + 272]) {
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v901[jj + 272]);
              }
              *(void *)&v901[jj + 272] = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)(v616 + 224));
              re::TextureHandle::invalidate((re::TextureHandle *)(v616 + 208));
              re::TextureHandle::invalidate((re::TextureHandle *)(v616 + 192));
              re::TextureHandle::invalidate((re::TextureHandle *)(v616 + 176));
              re::TextureHandle::invalidate((re::TextureHandle *)(v616 + 160));
              re::TextureHandle::invalidate((re::TextureHandle *)(v616 + 144));
            }
            if (v976) {
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(&v976);
            }
            v976 = 0;
            re::TextureHandle::invalidate((re::TextureHandle *)v974);
            re::TextureHandle::invalidate((re::TextureHandle *)v973);
            re::TextureHandle::invalidate((re::TextureHandle *)&v972);
            re::TextureHandle::invalidate((re::TextureHandle *)&buf[32]);
            re::TextureHandle::invalidate((re::TextureHandle *)&buf[16]);
            re::TextureHandle::invalidate((re::TextureHandle *)buf);
            unint64_t v617 = 288;
            do
            {
              long long v618 = &v982[v617 / 0x10];
              if (*(void *)((char *)&v980 + v617)) {
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)((char *)&v980 + v617));
              }
              *(void *)((char *)&v980 + v617) = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)&v618[-4]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v618[-5]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v618[-6]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v618[-7]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v618[-8]);
              re::TextureHandle::invalidate((re::TextureHandle *)&v979[v617]);
              v617 -= 144;
            }
            while (v617);
            double v587 = (uint64_t *)v814;
            uint64_t v591 = v828;
          }
          re::VideoAsset::dimensions(v591);
          unsigned int v620 = v619;
          re::VideoAsset::dimensions(v591);
          *(void *)(v589 + 192) = __PAIR64__(HIDWORD(v541), v620);
          __n128 v588 = (uint64_t *)v843;
        }
      }
      v587 += 7;
    }
    while (v587 != v588);
  }
  uint64_t ReadyToRender = re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (ReadyToRender)
  {
    uint64_t v624 = *(void *)(ReadyToRender + 24);
    if (v624)
    {
      uint64_t v625 = *(uint64_t **)(ReadyToRender + 40);
      uint64_t v626 = 8 * v624;
      while (1)
      {
        uint64_t v627 = *v625;
        if (!*(void *)(*v625 + 176)) {
          break;
        }
        *(void *)buf = *(void *)(v627 + 64);
        int v628 = *(unsigned __int8 *)(v627 + 57);
        uint64_t v629 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)ReadyToRender);
        if (v629)
        {
          uint64_t v629 = (re *)re::areAlmostEqual<float>(*(float *)(v627 + 64), *(float *)(v627 + 68), *(float *)(v627 + 192), *(float *)(v627 + 196));
          if ((v629 & 1) == 0)
          {
            uint64_t v642 = *re::videoLogObjects(v629);
            uint64_t v629 = (re *)os_log_type_enabled(v642, OS_LOG_TYPE_DEFAULT);
            if (v629)
            {
              double v643 = *(float *)(v627 + 192);
              double v644 = *(float *)(v627 + 196);
              v982[0].i32[0] = 134218240;
              *(double *)((char *)v982[0].i64 + 4) = v643;
              v982[0].i16[6] = 2048;
              *(double *)((char *)&v982[0].i64[1] + 6) = v644;
              _os_log_impl(&dword_233120000, v642, OS_LOG_TYPE_DEFAULT, "New video texture dimension: %f, %f", (uint8_t *)v982, 0x16u);
            }
          }
        }
        uint64_t v630 = *(void *)(v627 + 192);
        *(void *)(v627 + 64) = v630;
        switch(*(_DWORD *)(v627 + 200))
        {
          case 0xFFFFFFFF:
            *(unsigned char *)(v627 + 57) = 0;
            break;
          case 0:
            *(unsigned char *)(v627 + 57) = 1;
            break;
          case 1:
            *(unsigned char *)(v627 + 57) = 2;
            goto LABEL_833;
          case 2:
            *(unsigned char *)(v627 + 57) = 2;
            break;
          case 3:
            *(unsigned char *)(v627 + 57) = 2;
            goto LABEL_835;
          case 4:
            *(unsigned char *)(v627 + 57) = 1;
LABEL_833:
            *(float *)(v627 + 64) = *(float *)&v630 * 0.5;
            break;
          case 5:
            *(unsigned char *)(v627 + 57) = 1;
LABEL_835:
            *(float *)(v627 + 68) = *((float *)&v630 + 1) * 0.5;
            break;
          default:
            break;
        }
        uint64_t ReadyToRender = re::VideoDefaults::logEnabled(v629);
        if (ReadyToRender)
        {
          uint64_t v645 = *re::videoLogObjects((re *)ReadyToRender);
          uint64_t ReadyToRender = os_log_type_enabled(v645, OS_LOG_TYPE_DEFAULT);
          if (ReadyToRender)
          {
            __int32 v646 = *(unsigned __int8 *)(v627 + 57);
            v982[0].i64[0] = 0x104000200;
            v982[0].i16[4] = 1024;
            *(__int32 *)((char *)&v982[0].i32[2] + 2) = v646;
            _os_log_impl(&dword_233120000, v645, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->updateSyncedState :: allResourcesAreReady == %d and currentViewingMode == %hhu", (uint8_t *)v982, 0xEu);
          }
        }
        if (v628 != *(unsigned __int8 *)(v627 + 57) || *(void *)buf != *(void *)(v627 + 64)) {
          goto LABEL_839;
        }
LABEL_841:
        BOOL v631 = *(void *)(v627 + 176)
            && (uint64_t ReadyToRender = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v627 + 168))) != 0
            && *(unsigned char *)(ReadyToRender + 933) != 0;
        v632 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)ReadyToRender);
        if (!v632) {
          goto LABEL_846;
        }
        uint64_t v635 = *(void *)(v627 + 16);
        uint64_t v829 = *(void *)(v635 + 296);
        uint64_t v636 = *(void *)(v635 + 24);
        if (!v636 || (*(unsigned char *)(v636 + 288) & 0x80) != 0)
        {
          loga = (id)*re::videoLogObjects(v632);
          if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
          {
            v982[0].i32[0] = 138412546;
            uint64_t v641 = @"False";
            if (v631) {
              uint64_t v641 = @"True";
            }
            *(uint64_t *)((char *)v982[0].i64 + 4) = (uint64_t)v641;
            v982[0].i16[6] = 2048;
            *(uint64_t *)((char *)&v982[0].i64[1] + 6) = v829;
            BOOL v639 = loga;
            int32x4_t v640 = "[VideoComponentSystem]->update :: Setting isReadyToRender to %@ with VideoComponent with EntityID %llu";
            goto LABEL_883;
          }
        }
        else
        {
          uint64_t v830 = *(void *)(v636 + 296);
          uint64_t v637 = *(void *)(v636 + 24);
          if (!v637 || (*(unsigned char *)(v637 + 288) & 0x80) != 0)
          {
            loga = (id)*re::videoLogObjects(v632);
            if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
            {
              v982[0].i32[0] = 138412546;
              v652 = @"False";
              if (v631) {
                v652 = @"True";
              }
              *(uint64_t *)((char *)v982[0].i64 + 4) = (uint64_t)v652;
              v982[0].i16[6] = 2048;
              *(uint64_t *)((char *)&v982[0].i64[1] + 6) = v830;
              BOOL v639 = loga;
              int32x4_t v640 = "[VideoComponentSystem]->update :: Setting isReadyToRender to %@ with VideoComponent Parent with EntityID %llu";
              goto LABEL_883;
            }
          }
          else
          {
            uint64_t v831 = *(void *)(v637 + 296);
            loga = (id)*re::videoLogObjects(v632);
            if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
            {
              v982[0].i32[0] = 138412546;
              v638 = @"False";
              if (v631) {
                v638 = @"True";
              }
              *(uint64_t *)((char *)v982[0].i64 + 4) = (uint64_t)v638;
              v982[0].i16[6] = 2048;
              *(uint64_t *)((char *)&v982[0].i64[1] + 6) = v831;
              BOOL v639 = loga;
              int32x4_t v640 = "[VideoComponentSystem]->update :: Setting isReadyToRender to %@ with VideoComponent Parent Parent w"
                     "ith EntityID %llu";
LABEL_883:
              _os_log_impl(&dword_233120000, v639, OS_LOG_TYPE_DEFAULT, v640, (uint8_t *)v982, 0x16u);
            }
          }
        }

LABEL_846:
        uint64_t ReadyToRender = re::ecs2::VideoComponent::getReadyToRender((re::ecs2::VideoComponent *)v627);
        if ((ReadyToRender & 1) == 0 && v631)
        {
          v633 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)ReadyToRender);
          if (v633)
          {
            uint64_t v647 = (id)*re::videoLogObjects(v633);
            if (os_log_type_enabled(v647, OS_LOG_TYPE_DEFAULT))
            {
              logb = v647;
              uint64_t v648 = *(void *)(*(void *)(v627 + 16) + 296);
              uint64_t v649 = re::AssetHandle::assetInfo((re::AssetHandle *)(v627 + 168));
              if (v649[17]) {
                uint64_t v650 = v649[18];
              }
              else {
                uint64_t v650 = (uint64_t)v649 + 137;
              }
              v982[0].i32[0] = 134218498;
              *(uint64_t *)((char *)v982[0].i64 + 4) = v648;
              uint64_t v647 = logb;
              v982[0].i16[6] = 2112;
              *(uint64_t *)((char *)&v982[0].i64[1] + 6) = @"True";
              v982[1].i16[3] = 2080;
              v982[1].i64[1] = v650;
              _os_log_impl(&dword_233120000, logb, OS_LOG_TYPE_DEFAULT, "[VideoComponentSystem]->update :: Setting VideoComponent with EntityID %llu isReadyToRender to %@ for VideAsset %s", (uint8_t *)v982, 0x20u);
            }
          }
          *(unsigned char *)(v627 + 73) = 1;
          v634 = (re *)re::VideoDefaults::logEnabled(v633);
          if (v634)
          {
            uint64_t v651 = *re::videoLogObjects(v634);
            if (os_log_type_enabled(v651, OS_LOG_TYPE_DEFAULT))
            {
              v982[0].i32[0] = 136315138;
              *(uint64_t *)((char *)v982[0].i64 + 4) = (uint64_t)"TRUE";
              _os_log_impl(&dword_233120000, v651, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->setIsReadyToRender :: Setting ready to render %s", (uint8_t *)v982, 0xCu);
            }
          }
          uint64_t ReadyToRender = *(void *)(*(void *)(v627 + 16) + 200);
          if (ReadyToRender) {
            re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)ReadyToRender, (const re::ecs2::Component *)v627);
          }
        }
        ++v625;
        v626 -= 8;
        if (!v626) {
          goto LABEL_885;
        }
      }
      if (!*(unsigned char *)(v627 + 57)) {
        goto LABEL_841;
      }
      *(void *)(v627 + 64) = 0;
      *(unsigned char *)(v627 + 57) = 0;
LABEL_839:
      uint64_t ReadyToRender = *(void *)(*(void *)(v627 + 16) + 200);
      if (ReadyToRender) {
        re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)ReadyToRender, (const re::ecs2::Component *)v627);
      }
      goto LABEL_841;
    }
  }
LABEL_885:
  v653 = (re::VideoDefaults *)re::VideoDefaults::frameTimeLogEnabled((re::VideoDefaults *)ReadyToRender);
  uint64_t v654 = v840;
  if ((v653 & 1) == 0 || re::VideoDefaults::frameDropThreshold(v653) >= v14) {
    goto LABEL_886;
  }
  v797 = (re *)re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v797)
  {
    uint64_t v798 = *((void *)v797 + 3);
    if (v798)
    {
      uint64_t v799 = *((void *)v797 + 5);
      uint64_t v800 = 8 * v798;
      while (*(float *)(*(void *)v799 + 64) <= 0.0)
      {
        v799 += 8;
        v800 -= 8;
        if (!v800) {
          goto LABEL_1049;
        }
      }
LABEL_1054:
      v801 = (id)*re::videoLogObjects(v797);
      if (!os_log_type_enabled(v801, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_1052;
      }
      v982[0].i32[0] = 134217984;
      *(double *)((char *)v982[0].i64 + 4) = v14;
      v802 = "VideoFrameTime VideoPlaying deltaTime: %f";
      goto LABEL_1051;
    }
  }
LABEL_1049:
  v801 = (id)*re::videoLogObjects(v797);
  if (os_log_type_enabled(v801, OS_LOG_TYPE_DEFAULT))
  {
    v982[0].i32[0] = 134217984;
    *(double *)((char *)v982[0].i64 + 4) = v14;
    v802 = "VideoFrameTime VideoHidden deltaTime: %f";
LABEL_1051:
    _os_log_impl(&dword_233120000, v801, OS_LOG_TYPE_DEFAULT, v802, (uint8_t *)v982, 0xCu);
  }
LABEL_1052:

  uint64_t v654 = v840;
LABEL_886:
  uint64_t v655 = re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v655)
  {
    uint64_t v656 = *(void *)(v655 + 24);
    if (v656)
    {
      float32x4_t v657 = *(uint64_t **)(v655 + 40);
      uint64_t v658 = 8 * v656;
      do
      {
        uint64_t v659 = *v657;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v982, (const re::AssetHandle *)(*v657 + 40));
        v660 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v982);
        if (v660)
        {
          int v661 = re::VideoAsset::createOrGetVideoPlayerComponentHelper(v660);
          if (v661)
          {
            uint64_t v662 = (re::ecs2::VideoPlayerComponentHelper::impl **)v661;
            __n128 v663 = *(re::ecs2::Entity **)(v659 + 16);
            isVideoEntityHierarchyValid = (re::VideoDefaults *)re::ecs2::VideoPlayerComponentHelper::impl::isVideoEntityHierarchyValid((re::ecs2::VideoPlayerComponentHelper::impl *)v661, v663);
            if (isVideoEntityHierarchyValid)
            {
              if (*(void *)(v654 + 168))
              {
                long long v665 = (re *)re::VideoDefaults::logEnabled(isVideoEntityHierarchyValid);
                if (v665)
                {
                  __n128 v666 = (id)*re::videoLogObjects(v665);
                  if (os_log_type_enabled(v666, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_233120000, v666, OS_LOG_TYPE_DEFAULT, "[VideoComponentSystem]->update ::  VPC Manager Post Buffer Retrieval Update called", buf, 2u);
                  }

                  uint64_t v654 = v840;
                }
                re::ecs2::VideoPlayerComponentHelper::impl::postBufferRetrievalUpdate(*v662, v14, *(re::ecs2::Entity **)(v659 + 16), *(re::AssetManager **)(v654 + 168));
              }
              re::ecs2::VideoPlayerComponentHelper::impl::handleEntitiesPosition(*v662, v663);
              re::AssetHandle::AssetHandle((re::AssetHandle *)v900, (const re::AssetHandle *)v982);
              re::ecs2::VideoPlayerComponentHelper::updateAudioSrcPosition((uint64_t *)v662, v663, (const re::AssetHandle *)v900);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v900);
            }
          }
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v982);
        ++v657;
        v658 -= 8;
      }
      while (v658);
    }
  }
  uint64_t v667 = re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v667)
  {
    uint64_t v668 = *(void *)(v667 + 24);
    if (v668)
    {
      long long v669 = *(uint64_t **)(v667 + 40);
      uint64_t v670 = 8 * v668;
      do
      {
        uint64_t v671 = *v669;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v982, (const re::AssetHandle *)(*(void *)(*v669 + 56) + 152));
        if (re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v982))
        {
          float32x4_t v673 = *(re::AssetManager **)(v654 + 168);
          if (v673) {
            re::ecs2::VideoProxyComponent::impl::postBufferRetrievalUpdate(*(float32x2_t **)(v671 + 56), v672, *(re::ecs2::Entity **)(v671 + 16), v673);
          }
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v982);
        ++v669;
        v670 -= 8;
      }
      while (v670);
    }
  }
  long long v674 = (re::VideoDefaults *)re::ecs2::SceneComponentTable::get(v834, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v674)
  {
    uint64_t v675 = *((void *)v674 + 3);
    if (v675)
    {
      long long v676 = (uint64_t *)*((void *)v674 + 5);
      uint64_t v677 = 8 * v675;
      do
      {
        uint64_t v678 = *v676;
        uint64_t v679 = *(void *)(*v676 + 224);
        unint64_t v680 = *(void *)(*v676 + 232);
        uint64_t v681 = *(void *)(*v676 + 240);
        long long v682 = (const float *)(*v676 + 248);
        int v683 = *(_DWORD *)(*v676 + 252);
        unint64_t v684 = (unint64_t)vld1_dup_f32(v682);
        long long v685 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(*(re::RenderManager ***)(*(void *)(v840 + 120) + 24), *(void *)(*(void *)(*v676 + 16) + 296));
        *(void *)buf = v679;
        v961[0] = 111644657;
        re::MaterialParameterBlock::setConstant(v685, (uint64_t *)v961, 8uLL, buf, 32, (uint64_t)v982);
        v982[0].i64[0] = 0;
        v961[0] = v680;
        v933[0].i64[0] = 111644419;
        re::MaterialParameterBlock::setConstant(v685, (uint64_t *)v933, 8uLL, v961, 32, (uint64_t)buf);
        *(void *)buf = 0;
        v933[0].i64[0] = v681;
        unint64_t v956 = 0x30654208A56;
        re::MaterialParameterBlock::setConstant(v685, (uint64_t *)&v956, 8uLL, v933, 32, (uint64_t)v961);
        v961[0] = 0;
        unint64_t v956 = v684;
        *(void *)v951 = 0x173F7DF32DLL;
        re::MaterialParameterBlock::setConstant(v685, (uint64_t *)v951, 8uLL, &v956, 32, (uint64_t)v933);
        v933[0].i64[0] = 0;
        LODWORD(v947[0]) = v683;
        *(void *)v951 = 0x26C7B60B7DDA417CLL;
        re::MaterialParameterBlock::setConstant(v685, (uint64_t *)v951, 4uLL, v947, 3, (uint64_t)&v956);
        int v686 = *(unsigned __int8 *)(v678 + 256);
        float v687 = *(float *)(v678 + 260);
        float v864 = *(float *)(v678 + 264);
        float v688 = *(float *)(v678 + 268);
        __int32 v896 = *(_DWORD *)(v678 + 272);
        v689 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(*(re::RenderManager ***)(*(void *)(v840 + 120) + 24), *(void *)(*(void *)(v678 + 16) + 296));
        if (v686 == 3)
        {
          float v687 = powf(v687, 3.0);
        }
        else if (v686 == 2)
        {
          float v687 = 1.0 - powf(1.0 - v687, 3.0);
        }
        v691.i32[0] = v896;
        if (v864 <= v688) {
          *(float *)v690.i32 = v688;
        }
        else {
          *(float *)v690.i32 = v864;
        }
        v691.f32[1] = v864;
        float32x2_t v692 = vdiv_f32(v691, (float32x2_t)vdup_lane_s32(v690, 0));
        float32x2_t v693 = vmul_f32(vsub_f32(_D10, v692), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)buf = v692;
        v961[0] = 0x127E09672A27CC2;
        re::MaterialParameterBlock::setConstant(v689, (uint64_t *)v961, 8uLL, buf, 32, (uint64_t)v982);
        v982[0].i64[0] = 0;
        v961[0] = (unint64_t)v693;
        v933[0].i64[0] = 0x23D43237DB06601BLL;
        re::MaterialParameterBlock::setConstant(v689, (uint64_t *)v933, 8uLL, v961, 32, (uint64_t)buf);
        *(void *)buf = 0;
        LODWORD(v9re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = fmaxf(fminf(v687, 1.0), 0.0);
        v933[0].i64[0] = 93838541;
        re::MaterialParameterBlock::setConstant(v689, (uint64_t *)v933, 4uLL, &v956, 1, (uint64_t)v961);
        ++v676;
        v677 -= 8;
      }
      while (v677);
    }
  }
  if ((re::VideoDefaults::passthroughTintColorTuningAllowed(v674) & 1) == 0) {
    goto LABEL_950;
  }
  memset(buf, 0, 36);
  *(void *)&buf[36] = v3;
  if (!v917)
  {
    int v708 = 0;
    goto LABEL_947;
  }
  v694 = v919;
  long long v695 = &v919[7 * v917];
  do
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v961, (const re::AssetHandle *)(v694 + 2));
    if (v961[1])
    {
      unsigned int v696 = atomic_load((unsigned int *)(v961[1] + 704));
      if (v696 == 2)
      {
        uint64_t v697 = v694[5];
        uint64_t v698 = *(void *)(v697 + 168);
        if (v698)
        {
          if (*(unsigned char *)(v698 + 7048))
          {
            uint64_t v699 = *v694;
            uint64_t v700 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v694 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v700)
            {
              uint64_t v701 = v700;
              if (*(unsigned char *)(v700 + 25))
              {
                unint64_t v702 = *((void *)re::AssetHandle::assetInfo((re::AssetHandle *)v961) + 10);
                if (v702 == -1) {
                  unint64_t v702 = 0;
                }
                v933[0].i64[0] = v702;
                unint64_t v703 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v702 ^ (v702 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v702 ^ (v702 >> 30))) >> 27));
                unint64_t v704 = v703 ^ (v703 >> 31);
                if (!*(void *)buf)
                {
                  LODWORD(v706) = 0;
                  *(float32x4_t *)((char *)&v982[1] + 4) = (float32x4_t)xmmword_2343A79E0;
                  *(float32x4_t *)((char *)&v982[2] + 4) = (float32x4_t)xmmword_2343A79F0;
                  v982[0].i64[0] = v697;
                  v982[0].i64[1] = v699;
                  v982[1].i32[0] = *(_DWORD *)(v701 + 96);
LABEL_939:
                  re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)buf, v706, v704, v933, (uint64_t)v982);
                  ++*(_DWORD *)&buf[40];
                  goto LABEL_940;
                }
                uint64_t v705 = *(unsigned int *)(*(void *)&buf[8] + 4 * (v704 % *(unsigned int *)&buf[24]));
                if (v705 == 0x7FFFFFFF)
                {
LABEL_934:
                  *(float32x4_t *)((char *)&v982[1] + 4) = (float32x4_t)xmmword_2343A79E0;
                  *(float32x4_t *)((char *)&v982[2] + 4) = (float32x4_t)xmmword_2343A79F0;
                  v982[0].i64[0] = v697;
                  v982[0].i64[1] = v699;
                  v982[1].i32[0] = *(_DWORD *)(v701 + 96);
                  unint64_t v706 = v704 % *(unsigned int *)&buf[24];
                  uint64_t v707 = *(unsigned int *)(*(void *)&buf[8] + 4 * v706);
                  if (v707 == 0x7FFFFFFF) {
                    goto LABEL_939;
                  }
                  while (*(void *)(*(void *)&buf[16] + 80 * v707 + 16) != v702)
                  {
                    LODWORD(v707) = *(_DWORD *)(*(void *)&buf[16] + 80 * v707 + 8) & 0x7FFFFFFF;
                    if (v707 == 0x7FFFFFFF) {
                      goto LABEL_939;
                    }
                  }
                }
                else
                {
                  while (*(void *)(*(void *)&buf[16] + 80 * v705 + 16) != v702)
                  {
                    LODWORD(v705) = *(_DWORD *)(*(void *)&buf[16] + 80 * v705 + 8) & 0x7FFFFFFF;
                    if (v705 == 0x7FFFFFFF) {
                      goto LABEL_934;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_940:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v961);
    v694 += 7;
  }
  while (v694 != v695);
  int v708 = *(_DWORD *)&buf[32];
  if (!*(_DWORD *)&buf[32])
  {
LABEL_947:
    LODWORD(v709) = 0;
    goto LABEL_948;
  }
  uint64_t v709 = 0;
  long long v710 = (int *)(*(void *)&buf[16] + 8);
  while (1)
  {
    int v711 = *v710;
    v710 += 20;
    if (v711 < 0) {
      break;
    }
    if (*(unsigned int *)&buf[32] == ++v709)
    {
      LODWORD(v709) = *(_DWORD *)&buf[32];
      break;
    }
  }
LABEL_948:
  if (v708 != v709)
  {
    uint64_t v719 = v709;
    double v805 = v14;
    uint64_t v720 = *(void *)&buf[16];
    int v806 = v708;
    do
    {
      uint64_t v721 = v720 + 80 * v719;
      v724 = *(re::VideoAsset **)(v721 + 24);
      v723 = (re::TextureHandle *)(v721 + 24);
      v722 = v724;
      if (v724)
      {
        uint64_t v725 = v720 + 80 * v719;
        uint64_t v727 = *(void *)(v725 + 32);
        uint64_t v726 = v725 + 32;
        if (v727)
        {
          uint64_t v897 = v726;
          v815 = v723;
          re::VideoAsset::getVideoTextureHandles(v722, (uint64_t)v982);
          int v728 = v985[24];
          unint64_t v729 = 288;
          do
          {
            v730 = &v982[v729 / 0x10];
            if (*(void *)((char *)&v980 + v729)) {
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)((char *)&v980 + v729));
            }
            *(void *)((char *)&v980 + v729) = 0;
            re::TextureHandle::invalidate((re::TextureHandle *)&v730[-4]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v730[-5]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v730[-6]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v730[-7]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v730[-8]);
            re::TextureHandle::invalidate((re::TextureHandle *)&v979[v729]);
            v729 -= 144;
          }
          while (v729);
          v732 = (re *)re::VideoDefaults::logEnabled(v731);
          if (v732)
          {
            v791 = (id)*re::videoLogObjects(v732);
            if (os_log_type_enabled(v791, OS_LOG_TYPE_DEFAULT))
            {
              v792 = "Enabled";
              if (!v728) {
                v792 = "Disabled";
              }
              v982[0].i32[0] = 136315138;
              *(uint64_t *)((char *)v982[0].i64 + 4) = (uint64_t)v792;
              _os_log_impl(&dword_233120000, v791, OS_LOG_TYPE_DEFAULT, "=========== HDR Tuning %s ========================", (uint8_t *)v982, 0xCu);
            }
          }
          float v852 = re::VideoDefaults::hueLerpVelocityVideoTuning(0);
          float v820 = re::VideoDefaults::saturationPowerVideoTuning(0);
          float v733 = re::VideoDefaults::minSaturationVideoTuning(0);
          float v734 = re::VideoDefaults::maxSaturationVideoTuning(0);
          float v865 = re::VideoDefaults::saturationInflectionVideoTuning(0);
          float v859 = re::VideoDefaults::saturationSmoothingVideoTuning(0);
          float v735 = re::VideoDefaults::brightnessMinVideoTuning(0);
          float v736 = re::VideoDefaults::brightnessMaxVideoTuning(0);
          float v737 = re::VideoDefaults::brightnessInflectionVideoTuning(0);
          float v738 = re::VideoDefaults::brightnessSmoothingVideoTuning(0);
          float v739 = re::VideoDefaults::colorSmoothTimeVideoTuning(0);
          float v740 = re::VideoDefaults::gazeDeadbandVideoTuning(0);
          float v741 = re::VideoDefaults::gazeMaxAngleVideoTuning(0);
          if (v728)
          {
            float v835 = re::VideoDefaults::minSaturationVideoTuning((re::VideoDefaults *)1);
            float v844 = re::VideoDefaults::maxSaturationVideoTuning((re::VideoDefaults *)1);
            float v743 = re::VideoDefaults::saturationPowerVideoTuning((re::VideoDefaults *)1);
            float v744 = re::VideoDefaults::saturationInflectionVideoTuning((re::VideoDefaults *)1);
            float v859 = re::VideoDefaults::saturationSmoothingVideoTuning((re::VideoDefaults *)1);
            float v745 = re::VideoDefaults::hueLerpVelocityVideoTuning((re::VideoDefaults *)1);
            float v832 = re::VideoDefaults::brightnessMinVideoTuning((re::VideoDefaults *)1);
            float v746 = re::VideoDefaults::brightnessMaxVideoTuning((re::VideoDefaults *)1);
            float v737 = re::VideoDefaults::brightnessInflectionVideoTuning((re::VideoDefaults *)1);
            float v747 = re::VideoDefaults::brightnessSmoothingVideoTuning((re::VideoDefaults *)1);
            float logc = re::VideoDefaults::colorSmoothTimeVideoTuning((re::VideoDefaults *)1);
            float v825 = re::VideoDefaults::gazeMaxAngleVideoTuning((re::VideoDefaults *)1);
            float v740 = re::VideoDefaults::gazeDeadbandVideoTuning((re::VideoDefaults *)1);
            v748 = (float32x4_t *)("N2re4ecs213ComponentTypeINS0_23PreviewSupportComponentEEE" + 35);
            v749 = "N2re8internal13CallableMemFnINS_4ecs228BasicComponentStateSceneDataINS2_22PhysicsJointsComponentEEEMS"
                   "5_F20REEventHandlerResultPNS2_6EntityERK30REComponentWillDeactivateEventEFS6_S8_SB_EJEEE"
                 + 117;
            uint64_t v750 = v897;
          }
          else
          {
            float v832 = v735;
            float v844 = v734;
            float v835 = v733;
            float logc = v739;
            float v825 = v741;
            v748 = (float32x4_t *)"iewSupportComponentEEE";
            v749 = "lerResultPNS2_6EntityERK30REComponentWillDeactivateEventEFS6_S8_SB_EJEEE";
            float v751 = v738;
            float v743 = v820;
            float v745 = v852;
            uint64_t v750 = v897;
            float v746 = v736;
            float v747 = v751;
            float v744 = v865;
          }
          float v866 = v744;
          unint64_t v752 = v921;
          float v821 = v740;
          if (v921)
          {
            uint64_t v753 = *(void *)(*(void *)v750 + 240);
            v754 = v923;
            unint64_t v755 = v921 << 7;
            if (v753)
            {
              v756 = v923 + 1;
              float v757 = 0.0;
              unint64_t v758 = v921 << 7;
              do
              {
                v759 = *(re::ecs2::TransformComponent ***)(v753 + 16);
                if (v759)
                {
                  re::ecs2::TransformComponent::worldMatrix4x4F(v759, (const re::ecs2::Entity *)1, v982);
                  float32x4_t v760 = v982[3];
                }
                else
                {
                  float32x4_t v760 = *(float32x4_t *)(v753 + 64);
                }
                float32x4_t v761 = *v756;
                v756 += 8;
                float32x4_t v762 = vsubq_f32(v761, v760);
                float32x4_t v763 = vmulq_f32(v762, v762);
                float v757 = v757
                     + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v763, 2), vaddq_f32(v763, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v763.f32, 1))).f32[0]);
                v758 -= 128;
              }
              while (v758);
              float v764 = v757 / (float)v752;
              v748 = (float32x4_t *)("N2re4ecs213ComponentTypeINS0_23PreviewSupportComponentEEE" + 35);
              v749 = "N2re8internal13CallableMemFnINS_4ecs228BasicComponentStateSceneDataINS2_22PhysicsJointsComponentEEE"
                     "MS5_F20REEventHandlerResultPNS2_6EntityERK30REComponentWillDeactivateEventEFS6_S8_SB_EJEEE"
                   + 117;
              uint64_t v750 = v897;
            }
            else
            {
              float v764 = 0.0;
            }
            unint64_t v768 = 0;
            v766 = &v754[8 * v752];
            float32x4_t v765 = 0uLL;
            float v767 = v832;
            do
            {
              float32x4_t v769 = v754[v768 / 0x10 + 2];
              float32x4_t v770 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v769, (int32x4_t)v769), (int8x16_t)v769, 0xCuLL);
              float32x4_t v771 = *((float32x4_t *)v749 + 118);
              float32x4_t v772 = vmlaq_f32(vmulq_f32(v769, v748[232]), v771, v770);
              int8x16_t v773 = (int8x16_t)vaddq_f32(v772, v772);
              float32x4_t v774 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v773, (int32x4_t)v773), v773, 0xCuLL);
              int8x16_t v775 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v774, (int32x4_t)v774), (int8x16_t)v774, 0xCuLL), vnegq_f32(v769)), v774, v770);
              float32x4_t v742 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v775, (int32x4_t)v775), v775, 0xCuLL);
              float32x4_t v765 = vaddq_f32(v765, vaddq_f32(vaddq_f32(vmulq_laneq_f32(v774, v769, 3), v771), v742));
              v768 += 128;
            }
            while (v755 != v768);
            int v708 = v806;
          }
          else
          {
            float32x4_t v765 = 0uLL;
            float v764 = 0.0;
            v766 = v923;
            v754 = v923;
            float v767 = v832;
          }
          *(float32x4_t *)v853 = v765;
          float v833 = v764;
          v742.f32[0] = (float)v752;
          if (v752)
          {
            uint64_t v810 = v742.i64[0];
            uint64_t v776 = *(void *)(*(void *)v750 + 240);
            float32x4_t v777 = 0uLL;
            do
            {
              v778 = *(re::ecs2::TransformComponent ***)(v776 + 16);
              if (v778)
              {
                *(float32x4_t *)v898 = v777;
                re::ecs2::TransformComponent::worldMatrix4x4F(v778, (const re::ecs2::Entity *)1, v982);
                float32x4_t v777 = *(float32x4_t *)v898;
                float32x4_t v779 = v982[3];
              }
              else
              {
                float32x4_t v779 = *(float32x4_t *)(v776 + 64);
              }
              float32x4_t v780 = vsubq_f32(v779, v754[1]);
              float32x4_t v777 = vaddq_f32(v777, v780);
              v754 += 8;
            }
            while (v754 != v766);
            float v781 = v747;
            float v782 = v859;
            v742.i64[0] = v810;
            v780.i32[0] = v810;
          }
          else
          {
            float v781 = v747;
            float v782 = v859;
            float32x4_t v777 = 0uLL;
            v780.i64[0] = 0;
          }
          *(float32x4_t *)v860 = vdivq_f32(*(float32x4_t *)v853, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v742.f32, 0));
          *(float32x4_t *)v899 = vdivq_f32(v777, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v780.f32, 0));
          float v783 = re::TargetDisplayInfoProvider::{unnamed type#11}::operator()(*(void *)(*(void *)(v840 + 120) + 288) + 480);
          float v784 = re::TargetDisplayInfoProvider::{unnamed type#12}::operator()(*(void *)(*(void *)(v840 + 120) + 288) + 528);
          float v785 = *(float *)(v720 + 80 * v719 + 40);
          uint64_t v786 = *(void *)v815;
          *(_DWORD *)(v786 + 864) = v817;
          *(float *)(v786 + 868) = v833;
          *(re::DynamicString **)(v786 + 880) = v860[0];
          *(_DWORD *)(v786 + 888) = v860[1];
          *(re::DynamicString **)(v786 + 896) = v899[0];
          *(_DWORD *)(v786 + 904) = v899[1];
          float v808 = v783;
          *(float *)(v786 + 912) = v783;
          float v787 = v784;
          *(float *)(v786 + 916) = v784;
          *(float *)(v786 + 720) = v745;
          *(_OWORD *)(v786 + 724) = xmmword_234376D60;
          *(float *)(v786 + 740) = v743;
          *(void *)(v786 + 744) = 0x3FC666663D4CCCCDLL;
          *(float *)(v786 + 752) = v835;
          *(float *)(v786 + 7re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v844;
          *(float *)(v786 + 760) = v866;
          *(float *)(v786 + 764) = v782;
          *(float *)(v786 + 768) = v767;
          *(float *)(v786 + 772) = v746;
          *(void *)(v786 + 776) = 0x42C800003F800000;
          *(float *)(v786 + 784) = v737;
          *(float *)(v786 + 788) = v781;
          *(void *)(v786 + 792) = 0x40A000003F800000;
          float v816 = v785;
          *(float *)(v786 + 800) = v785;
          *(_DWORD *)(v786 + 804) = 1092616192;
          *(float *)(v786 + 808) = logc;
          *(_DWORD *)(v786 + 812) = 1120403456;
          *(int32x4_t *)(v786 + 816) = vdupq_n_s32(0x3E99999Au);
          *(void *)(v786 + 832) = 0x3E8000003F0A3D71;
          *(float *)(v786 + 840) = v821;
          *(_DWORD *)(v786 + 844) = 1036831949;
          *(float *)(v786 + 848) = v825;
          if (re::VideoDefaults::logEnabled(v788))
          {
            v793 = objc_msgSend(MEMORY[0x263F089D8], "stringWithFormat:", @"Color Tuning Frame %llu:", *(void *)(*(void *)(*(void *)(v840 + 120) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL);
            [v793 appendString:@"\n== Context ========================"];
            objc_msgSend(v793, "appendFormat:", @"\n        deltaTime: %f", *(void *)&v805);
            objc_msgSend(v793, "appendFormat:", @"\n     gazeDistance: %{private}f", v833);
            [v793 appendFormat:@"\n    gazeDirection: (%{private}f, %{private}f, %{private}f)", *(float *)v860, *((float *)v860 + 1), *(float *)&v860[1]];
            [v793 appendFormat:@"\n     gazeToCenter: (%{private}f, %{private}f, %{private}f)", *(float *)v899, *((float *)v899 + 1), *(float *)&v899[1]];
            objc_msgSend(v793, "appendFormat:", @"\n         edrValue: %f", v808);
            objc_msgSend(v793, "appendFormat:", @"\n        edrFactor: %f", v787);
            [v793 appendFormat:@"\n== Properties ====================="];
            [v793 appendFormat:@"\n-- Hue ----------------------------"];
            objc_msgSend(v793, "appendFormat:", @"\n       hueLerpVelocity: %f", v745);
            objc_msgSend(v793, "appendFormat:", @"\n    hueMinLerpVelocity: %f", 0x3FC1EB8520000000);
            objc_msgSend(v793, "appendFormat:", @"\n    hueMaxLerpVelocity: %f", 0x3FF4CCCCC0000000);
            objc_msgSend(v793, "appendFormat:", @"\n          hueLerpPower: %f", 0x4000000000000000);
            [v793 appendFormat:@"\n-- Saturation ---------------------"];
            objc_msgSend(v793, "appendFormat:", @"\n                        saturationPower: %f", 0x3FCEB851E0000000);
            objc_msgSend(v793, "appendFormat:", @"\n                       saturationPower2: %f", v743);
            objc_msgSend(v793, "appendFormat:", @"\n    saturationHueDependentMinMultiplier: %f", 0x3FA99999A0000000);
            objc_msgSend(v793, "appendFormat:", @"\n    saturationHueDependentMaxMultiplier: %f", 0x3FF8CCCCC0000000);
            objc_msgSend(v793, "appendFormat:", @"\n                          saturationMin: %f", v835);
            objc_msgSend(v793, "appendFormat:", @"\n                          saturationMax: %f", v844);
            objc_msgSend(v793, "appendFormat:", @"\n                    saturationSmoothing: %f", v782);
            objc_msgSend(v793, "appendFormat:", @"\n                   saturationInflection: %f", v866);
            [v793 appendFormat:@"\n-- Brightness ---------------------"];
            objc_msgSend(v793, "appendFormat:", @"\n             brightnessMin: %f", v767);
            objc_msgSend(v793, "appendFormat:", @"\n             brightnessMax: %f", v746);
            objc_msgSend(v793, "appendFormat:", @"\n      brightnessInflection: %f", v737);
            objc_msgSend(v793, "appendFormat:", @"\n       brightnessSmoothing: %f", v781);
            objc_msgSend(v793, "appendFormat:", @"\n           brightnessPower: %f", 0x3FF0000000000000);
            objc_msgSend(v793, "appendFormat:", @"\n    brightnessLerpVelocity: %f", 0x4059000000000000);
            objc_msgSend(v793, "appendFormat:", @"\n               darkenValue: %f", 0x3FF0000000000000);
            objc_msgSend(v793, "appendFormat:", @"\n      darkenDividingFactor: %f", 0x4014000000000000);
            [v793 appendFormat:@"\n-- Color --------------------------"];
            objc_msgSend(v793, "appendFormat:", @"\n            colorTransition: %f", v816);
            objc_msgSend(v793, "appendFormat:", @"\n     colorSmoothMaxVelocity: %f", 0x4024000000000000);
            objc_msgSend(v793, "appendFormat:", @"\n            colorSmoothTime: %f", logc);
            objc_msgSend(v793, "appendFormat:", @"\n    colorOutputLerpVelocity: %f", 0x4059000000000000);
            [v793 appendFormat:@"\n               colorDefault: [%f, %f, %f]", 0x3FD3333340000000, 0x3FD3333340000000, 0x3FD3333340000000];
            [v793 appendFormat:@"\n-- Gaze ---------------------------"];
            objc_msgSend(v793, "appendFormat:", @"\n        gazeDistancePower: %f", 0x3FE147AE20000000);
            objc_msgSend(v793, "appendFormat:", @"\n    gazeMinDistanceEffect: %f", 0x3FD0000000000000);
            objc_msgSend(v793, "appendFormat:", @"\n        gazeAngleDeadband: %f", v821);
            objc_msgSend(v793, "appendFormat:", @"\n           gazeMinDimming: %f", 0x3FB99999A0000000);
            v794 = (id)*re::videoLogObjects((re *)objc_msgSend(v793, "appendFormat:", @"\n             gazeMaxAngle: %f", v825));
            if (os_log_type_enabled(v794, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v795 = [v793 cStringUsingEncoding:1];
              v982[0].i32[0] = 136315138;
              *(uint64_t *)((char *)v982[0].i64 + 4) = v795;
              _os_log_impl(&dword_233120000, v794, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)v982, 0xCu);
            }
          }
        }
      }
      uint64_t v720 = *(void *)&buf[16];
      if (*(_DWORD *)&buf[32] <= (v709 + 1)) {
        int v789 = v709 + 1;
      }
      else {
        int v789 = *(_DWORD *)&buf[32];
      }
      while (1)
      {
        uint64_t v719 = (v709 + 1);
        if (v789 - 1 == v709) {
          break;
        }
        LODWORD(v709) = v709 + 1;
        int v790 = v719;
        if ((*(_DWORD *)(*(void *)&buf[16] + 80 * v719 + 8) & 0x80000000) != 0) {
          goto LABEL_1010;
        }
      }
      int v790 = v789;
LABEL_1010:
      LODWORD(v709) = v790;
    }
    while (v708 != v790);
  }
  re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)buf);
LABEL_950:
  uint64_t v712 = *(void *)(v840 + 160);
  if (v712 && v847) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v712 + 32))(v712, v847);
  }
  uint64_t v713 = *(void *)(v840 + 136);
  if (v713)
  {
    *(unsigned char *)(v713 + 144) = v845 & 1;
    *(unsigned char *)(v713 + 145) = v845 & 1 & v811;
  }
  v714.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v991);
  if (v908[0] && v910) {
    (*(void (**)(double))(*(void *)v908[0] + 40))(v714.n128_f64[0]);
  }
  long long v715 = v915;
  if (v915 && v919)
  {
    if (v917)
    {
      unint64_t v716 = 56 * v917;
      long long v717 = (re::AssetHandle *)(v919 + 2);
      do
      {
        re::AssetHandle::~AssetHandle(v717);
        long long v717 = (re::AssetHandle *)(v718 + 56);
        v716 -= 56;
      }
      while (v716);
      long long v715 = v915;
    }
    (*(void (**)(uint64_t *, __n128))(*v715 + 40))(v715, v714);
  }
  if (v920[0])
  {
    if (v923) {
      (*(void (**)(__n128))(*(void *)v920[0] + 40))(v714);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v926);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v927);
}

float re::TargetDisplayInfoProvider::{unnamed type#12}::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)v2 + 16);
    v3();
  }
  else
  {
    if ((atomic_exchange(re::TargetDisplayInfoProvider::{unnamed type#12}::operator()(void)const::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      uint64_t v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Max EDR factor provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 80 * v3;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 80;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::ecs2::VideoComponentSystem::~VideoComponentSystem(re::ecs2::VideoComponentSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::VideoComponentSystem::typeInfo(re::ecs2::VideoComponentSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoComponentSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoComponentSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoComponentSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoComponentSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

__n128 re::DynamicArray<anonymous namespace'::ViewInfo>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)a1)
    {
      uint64_t v15 = 2 * v4;
      BOOL v16 = v4 == 0;
      unint64_t v17 = 8;
      if (!v16) {
        unint64_t v17 = v15;
      }
      if (v17 <= v6) {
        unint64_t v18 = v6;
      }
      else {
        unint64_t v18 = v17;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 24);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32) + (*(void *)(a1 + 16) << 7);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v11 = *(_OWORD *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 112) = v9;
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 80) = v10;
  __n128 result = *(__n128 *)a2;
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v14;
  *(__n128 *)uint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v13;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void *re::DynamicArray<anonymous namespace'::ViewInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          int v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 7;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            int v7 = result;
            if (!v5[1])
            {
LABEL_9:
              void v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 7);
            __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

__n128 std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6), (re::TextureHandle *)(a1 + v6));
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6 + 16), (re::TextureHandle *)(a1 + v6 + 16));
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6 + 32), (re::TextureHandle *)(a1 + v6 + 32));
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6 + 48), (re::TextureHandle *)(a1 + v6 + 48));
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6 + 64), (re::TextureHandle *)(a1 + v6 + 64));
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6 + 80), (re::TextureHandle *)(a1 + v6 + 80));
      __n128 result = *(__n128 *)(a1 + v6 + 96);
      *(_OWORD *)(v7 + 108) = *(_OWORD *)(a1 + v6 + 108);
      *(__n128 *)(v7 + 96) = result;
      *(void *)(v7 + 128) = *(void *)(a1 + v6 + 128);
      *(void *)(a1 + v6 + 128) = 0;
      __int16 v9 = *(_WORD *)(a1 + v6 + 136);
      *(unsigned char *)(v7 + 138) = *(unsigned char *)(a1 + v6 + 138);
      *(_WORD *)(v7 + 136) = v9;
      v6 += 144;
    }
    while (a1 + v6 != a2);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::VideoComponentSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VideoComponentSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void *re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 56 * v9;
        uint64_t v11 = v8 + 16;
        uint64_t v12 = v7;
        do
        {
          *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 - 16);
          v12[3] = 0;
          v12[4] = 0;
          void v12[2] = 0;
          v12[3] = *(void *)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          uint64_t v13 = v12[2];
          void v12[2] = 0;
          void v12[2] = *(void *)v11;
          *(void *)uint64_t v11 = v13;
          uint64_t v14 = v12[4];
          v12[4] = *(void *)(v11 + 16);
          *(void *)(v11 + 16) = v14;
          uint64_t v15 = *(void *)(v11 + 24);
          *((_DWORD *)v12 + 12) = *(_DWORD *)(v11 + 32);
          void v12[5] = v15;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
          uint64_t v17 = v16 + 40;
          uint64_t v11 = v16 + 56;
          v12 += 7;
        }
        while (v17 != v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *,false>(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    double v178 = (long long *)((char *)a2 - 56);
    unint64_t v9 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = (uint64_t)a2 - v9;
          uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v9) >> 3);
          if (!(!v5 & v4))
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((unsigned __int8 *)a2 - 6) <= *(unsigned __int8 *)(a1 + 50)) {
                  return;
                }
                uint64_t v73 = (long long *)a1;
                int v74 = (long long *)((char *)a2 - 56);
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, (uint64_t)v178);
                return;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112, (uint64_t)v178);
                return;
              case 5:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112, a1 + 168);
                if (*((unsigned __int8 *)a2 - 6) <= *(unsigned __int8 *)(a1 + 218)) {
                  return;
                }
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)(a1 + 168), v178);
                if (*(unsigned __int8 *)(a1 + 218) <= *(unsigned __int8 *)(a1 + 162)) {
                  return;
                }
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)(a1 + 112), (long long *)(a1 + 168));
                if (*(unsigned __int8 *)(a1 + 162) <= *(unsigned __int8 *)(a1 + 106)) {
                  return;
                }
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)(a1 + 56), (long long *)(a1 + 112));
                if (*(unsigned __int8 *)(a1 + 106) <= *(unsigned __int8 *)(a1 + 50)) {
                  return;
                }
                uint64_t v73 = (long long *)a1;
                int v74 = (long long *)(a1 + 56);
                break;
              default:
                JUMPOUT(0);
            }
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>(v73, v74);
            return;
          }
          if (v10 <= 1343)
          {
            if (a4)
            {
              if ((long long *)a1 != a2)
              {
                float v75 = (_OWORD *)(a1 + 56);
                if ((long long *)(a1 + 56) != a2)
                {
                  uint64_t v76 = 0;
                  uint64_t v77 = (re::AssetHandle *)&v187;
                  uint64_t v78 = a1;
                  do
                  {
                    uint64_t v79 = v75;
                    if (*(unsigned __int8 *)(v78 + 106) > *(unsigned __int8 *)(v78 + 50))
                    {
                      long long v80 = *(_OWORD *)(v78 + 72);
                      long long v186 = *v75;
                      long long v187 = v80;
                      *(void *)(v78 + 72) = 0;
                      *(void *)(v78 + 80) = 0;
                      uint64_t v81 = *(void *)(v78 + 96);
                      uint64_t v188 = *(void *)(v78 + 88);
                      *(void *)(v78 + 88) = 0;
                      uint64_t v189 = v81;
                      int v82 = *(_DWORD *)(v78 + 104);
                      uint64_t v83 = v76;
                      int v190 = v82;
                      while (1)
                      {
                        uint64_t v84 = a1 + v83;
                        uint64_t v85 = *(void *)(a1 + v83 + 32);
                        uint64_t v86 = *(void *)(a1 + v83 + 40);
                        *(void *)(v84 + 32) = *(void *)(a1 + v83 + 88);
                        *(_DWORD *)(v84 + 104) = *(_DWORD *)(a1 + v83 + 48);
                        long long v87 = *(_OWORD *)(a1 + v83 + 16);
                        *(_OWORD *)(v84 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(_OWORD *)(a1 + v83);
                        long long v88 = *(_OWORD *)(a1 + v83 + 72);
                        *(_OWORD *)(v84 + 72) = v87;
                        *(_OWORD *)(v84 + 16) = v88;
                        *(void *)(v84 + 88) = v85;
                        *(void *)(v84 + 96) = v86;
                        if (!v83) {
                          break;
                        }
                        v83 -= 56;
                        if (BYTE2(v190) <= *(unsigned __int8 *)(v84 - 6))
                        {
                          uint64_t v89 = a1 + v83 + 56;
                          goto LABEL_76;
                        }
                      }
                      uint64_t v89 = a1;
LABEL_76:
                      *(_OWORD *)uint64_t v89 = v186;
                      uint64_t v90 = *(void *)(v89 + 24);
                      uint64_t v91 = *(void *)(v89 + 32);
                      *(void *)(v89 + 24) = *((void *)&v187 + 1);
                      *((void *)&v187 + 1) = v90;
                      uint64_t v92 = *(void *)(v89 + 16);
                      *(void *)(v89 + 16) = 0;
                      *(void *)(v89 + 16) = v187;
                      *(void *)(v89 + 32) = v188;
                      *(void *)&long long v187 = v92;
                      uint64_t v188 = v91;
                      uint64_t v93 = v189;
                      *(_DWORD *)(v84 + 48) = v190;
                      *(void *)(v84 + 40) = v93;
                      re::AssetHandle::~AssetHandle(v77);
                    }
                    float v75 = (_OWORD *)((char *)v79 + 56);
                    v76 += 56;
                    uint64_t v78 = (uint64_t)v79;
                  }
                  while ((_OWORD *)((char *)v79 + 56) != a2);
                }
              }
            }
            else if ((long long *)a1 != a2)
            {
              int v162 = (_OWORD *)(a1 + 56);
              if ((long long *)(a1 + 56) != a2)
              {
                uint64_t v163 = (re::AssetHandle *)&v187;
                uint64_t v164 = a1 + 96;
                do
                {
                  id v165 = v162;
                  if (*(unsigned __int8 *)(a1 + 106) > *(unsigned __int8 *)(a1 + 50))
                  {
                    long long v166 = *(_OWORD *)(a1 + 72);
                    long long v186 = *v162;
                    long long v187 = v166;
                    *(void *)(a1 + 72) = 0;
                    *(void *)(a1 + 80) = 0;
                    uint64_t v167 = *(void *)(a1 + 96);
                    uint64_t v188 = *(void *)(a1 + 88);
                    *(void *)(a1 + 88) = 0;
                    uint64_t v189 = v167;
                    uint64_t v168 = v164;
                    int v190 = *(_DWORD *)(a1 + 104);
                    do
                    {
                      uint64_t v169 = (void *)v168;
                      long long v170 = *(_OWORD *)(v168 - 80);
                      *(_OWORD *)(v168 - 40) = *(_OWORD *)(v168 - 96);
                      long long v171 = *(_OWORD *)(v168 - 24);
                      *(_OWORD *)(v168 - 24) = v170;
                      *(_OWORD *)(v168 - 80) = v171;
                      uint64_t v172 = *(void *)(v168 - 8);
                      *(void *)(v168 - 8) = *(void *)(v168 - 64);
                      *(void *)(v168 - 64) = v172;
                      *(_DWORD *)(v168 + 8) = *(_DWORD *)(v168 - 48);
                      uint64_t v173 = *(void *)(v168 - 56);
                      v168 -= 56;
                      void *v169 = v173;
                    }
                    while (BYTE2(v190) > *((unsigned __int8 *)v169 - 102));
                    *(_OWORD *)(v168 - 40) = v186;
                    uint64_t v174 = *(void *)(v168 - 16);
                    *(void *)(v168 - 16) = *((void *)&v187 + 1);
                    *((void *)&v187 + 1) = v174;
                    uint64_t v175 = *(void *)(v168 - 24);
                    *(void *)(v168 - 24) = 0;
                    *(void *)(v168 - 24) = v187;
                    *(void *)&long long v187 = v175;
                    uint64_t v176 = *(void *)(v168 - 8);
                    *(void *)(v168 - 8) = v188;
                    uint64_t v188 = v176;
                    uint64_t v177 = v189;
                    *(_DWORD *)(v168 + 8) = v190;
                    *(void *)uint64_t v168 = v177;
                    re::AssetHandle::~AssetHandle(v163);
                  }
                  int v162 = (_OWORD *)((char *)v165 + 56);
                  v164 += 56;
                  a1 = (uint64_t)v165;
                }
                while ((_OWORD *)((char *)v165 + 56) != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)a1 != a2)
            {
              int64_t v94 = (unint64_t)(v11 - 2) >> 1;
              id v95 = (re::AssetHandle *)&v187;
              int64_t v96 = v94;
              do
              {
                int64_t v97 = v96;
                if (v94 >= v96)
                {
                  uint64_t v98 = (2 * v96) | 1;
                  uint64_t v99 = a1 + 56 * v98;
                  if (2 * v97 + 2 < v11)
                  {
                    BOOL v100 = *(unsigned __int8 *)(a1 + 56 * v98 + 50) > *(unsigned __int8 *)(v99 + 106);
                    v99 += 56 * v100;
                    if (v100) {
                      uint64_t v98 = 2 * v97 + 2;
                    }
                  }
                  if (*(unsigned __int8 *)(v99 + 50) <= *(unsigned __int8 *)(a1 + 56 * v97 + 50))
                  {
                    uint64_t v101 = a1 + 56 * v97;
                    long long v186 = *(_OWORD *)v101;
                    *((void *)v95 + 1) = 0;
                    *((void *)v95 + 2) = 0;
                    *(void *)id v95 = 0;
                    *((void *)&v187 + 1) = *(void *)(v101 + 24);
                    *(void *)(v101 + 24) = 0;
                    uint64_t v102 = v187;
                    *(void *)&long long v187 = 0;
                    *(void *)&long long v187 = *(void *)(v101 + 16);
                    *(void *)(v101 + 16) = v102;
                    uint64_t v103 = v188;
                    uint64_t v188 = *(void *)(v101 + 32);
                    *(void *)(v101 + 32) = v103;
                    uint64_t v104 = *(void *)(v101 + 40);
                    int v190 = *(_DWORD *)(v101 + 48);
                    uint64_t v189 = v104;
                    do
                    {
                      uint64_t v105 = v99;
                      *(_OWORD *)uint64_t v101 = *(_OWORD *)v99;
                      uint64_t v106 = *(void *)(v101 + 24);
                      *(void *)(v101 + 24) = *(void *)(v105 + 24);
                      *(void *)(v105 + 24) = v106;
                      uint64_t v107 = *(void *)(v101 + 16);
                      *(void *)(v101 + 16) = 0;
                      *(void *)(v101 + 16) = *(void *)(v105 + 16);
                      *(void *)(v105 + 16) = v107;
                      uint64_t v108 = *(void *)(v101 + 32);
                      *(void *)(v101 + 32) = *(void *)(v105 + 32);
                      *(void *)(v105 + 32) = v108;
                      uint64_t v109 = *(void *)(v105 + 40);
                      *(_DWORD *)(v101 + 48) = *(_DWORD *)(v105 + 48);
                      *(void *)(v101 + 40) = v109;
                      if (v94 < v98) {
                        break;
                      }
                      uint64_t v110 = (2 * v98) | 1;
                      uint64_t v99 = a1 + 56 * v110;
                      uint64_t v111 = 2 * v98 + 2;
                      if (v111 < v11)
                      {
                        BOOL v100 = *(unsigned __int8 *)(a1 + 56 * v110 + 50) > *(unsigned __int8 *)(v99 + 106);
                        v99 += 56 * v100;
                        if (v100) {
                          uint64_t v110 = v111;
                        }
                      }
                      uint64_t v101 = v105;
                      uint64_t v98 = v110;
                    }
                    while (*(unsigned __int8 *)(v99 + 50) <= BYTE2(v190));
                    *(_OWORD *)uint64_t v105 = v186;
                    uint64_t v112 = *(void *)(v105 + 24);
                    uint64_t v113 = *(void *)(v105 + 32);
                    *(void *)(v105 + 24) = *((void *)&v187 + 1);
                    *((void *)&v187 + 1) = v112;
                    uint64_t v114 = *(void *)(v105 + 16);
                    *(void *)(v105 + 16) = 0;
                    *(void *)(v105 + 16) = v187;
                    *(void *)(v105 + 32) = v188;
                    *(void *)&long long v187 = v114;
                    uint64_t v188 = v113;
                    LODWORD(v114) = v190;
                    *(void *)(v105 + 40) = v189;
                    *(_DWORD *)(v105 + 48) = v114;
                    re::AssetHandle::~AssetHandle(v95);
                  }
                }
                int64_t v96 = v97 - 1;
              }
              while (v97);
              int64_t v115 = v10 / 0x38uLL;
              do
              {
                uint64_t v116 = 0;
                uint64_t v117 = a2;
                long long v180 = *(_OWORD *)a1;
                uint64_t v182 = 0;
                uint64_t v183 = 0;
                uint64_t v181 = 0;
                uint64_t v118 = *(void *)(a1 + 32);
                uint64_t v182 = *(void *)(a1 + 24);
                uint64_t v181 = *(void *)(a1 + 16);
                *(void *)(a1 + 16) = 0;
                *(void *)(a1 + 24) = 0;
                uint64_t v119 = v183;
                uint64_t v183 = v118;
                *(void *)(a1 + 32) = v119;
                LODWORD(v119) = *(_DWORD *)(a1 + 48);
                uint64_t v184 = *(void *)(a1 + 40);
                int v185 = v119;
                uint64_t v120 = a1;
                do
                {
                  uint64_t v121 = v116 + 1;
                  unint64_t v122 = v120 + 56 * (v116 + 1);
                  uint64_t v123 = (2 * v116) | 1;
                  uint64_t v124 = 2 * v116 + 2;
                  if (v124 < v115)
                  {
                    unsigned int v125 = *(unsigned __int8 *)(v120 + 56 * v121 + 50);
                    unsigned int v126 = *(unsigned __int8 *)(v122 + 106);
                    v122 += 56 * (v125 > v126);
                    if (v125 > v126) {
                      uint64_t v123 = v124;
                    }
                  }
                  *(_OWORD *)uint64_t v120 = *(_OWORD *)v122;
                  uint64_t v127 = *(void *)(v120 + 24);
                  *(void *)(v120 + 24) = *(void *)(v122 + 24);
                  *(void *)(v122 + 24) = v127;
                  uint64_t v128 = *(void *)(v120 + 16);
                  *(void *)(v120 + 16) = 0;
                  *(void *)(v120 + 16) = *(void *)(v122 + 16);
                  *(void *)(v122 + 16) = v128;
                  uint64_t v129 = *(void *)(v120 + 32);
                  *(void *)(v120 + 32) = *(void *)(v122 + 32);
                  *(void *)(v122 + 32) = v129;
                  unint64_t v130 = v122 + 40;
                  uint64_t v131 = *(void *)(v122 + 40);
                  *(_DWORD *)(v120 + 48) = *(_DWORD *)(v122 + 48);
                  *(void *)(v120 + 40) = v131;
                  uint64_t v120 = v122;
                  uint64_t v116 = v123;
                }
                while (v123 <= (uint64_t)((unint64_t)(v115 - 2) >> 1));
                a2 = (long long *)((char *)a2 - 56);
                if ((long long *)v122 == (long long *)((char *)v117 - 56))
                {
                  *(_OWORD *)unint64_t v122 = v180;
                  uint64_t v158 = *(void *)(v122 + 24);
                  *(void *)(v122 + 24) = v182;
                  uint64_t v182 = v158;
                  uint64_t v159 = *(void *)(v122 + 16);
                  *(void *)(v122 + 16) = 0;
                  *(void *)(v122 + 16) = v181;
                  uint64_t v181 = v159;
                  uint64_t v160 = *(void *)(v122 + 32);
                  *(void *)(v122 + 32) = v183;
                  uint64_t v183 = v160;
                  uint64_t v161 = v184;
                  *(_DWORD *)(v130 + 8) = v185;
                  *(void *)unint64_t v130 = v161;
                }
                else
                {
                  *(_OWORD *)unint64_t v122 = *a2;
                  uint64_t v132 = *(void *)(v122 + 24);
                  *(void *)(v122 + 24) = *((void *)v117 - 4);
                  *((void *)v117 - 4) = v132;
                  uint64_t v133 = *(void *)(v122 + 16);
                  *(void *)(v122 + 16) = 0;
                  *(void *)(v122 + 16) = *((void *)v117 - 5);
                  *((void *)v117 - 5) = v133;
                  uint64_t v134 = *(void *)(v122 + 32);
                  *(void *)(v122 + 32) = *((void *)v117 - 3);
                  *((void *)v117 - 3) = v134;
                  uint64_t v135 = *((void *)v117 - 2);
                  *(_DWORD *)(v122 + 48) = *((_DWORD *)v117 - 2);
                  *(void *)unint64_t v130 = v135;
                  *a2 = v180;
                  uint64_t v136 = *((void *)v117 - 4);
                  *((void *)v117 - 4) = v182;
                  uint64_t v182 = v136;
                  uint64_t v137 = *((void *)v117 - 5);
                  *((void *)v117 - 5) = 0;
                  *((void *)v117 - 5) = v181;
                  uint64_t v181 = v137;
                  uint64_t v138 = *((void *)v117 - 3);
                  *((void *)v117 - 3) = v183;
                  uint64_t v183 = v138;
                  uint64_t v139 = v184;
                  *((_DWORD *)v117 - 2) = v185;
                  *((void *)v117 - 2) = v139;
                  uint64_t v140 = v122 - a1 + 56;
                  if (v140 >= 57)
                  {
                    unint64_t v141 = (v140 / 0x38uLL - 2) >> 1;
                    if (*(unsigned __int8 *)(a1 + 56 * v141 + 50) > *(unsigned __int8 *)(v122 + 50))
                    {
                      long long v186 = *(_OWORD *)v122;
                      uint64_t v188 = 0;
                      long long v187 = 0uLL;
                      *((void *)&v187 + 1) = *(void *)(v122 + 24);
                      *(void *)(v122 + 24) = 0;
                      uint64_t v142 = v187;
                      *(void *)&long long v187 = 0;
                      *(void *)&long long v187 = *(void *)(v122 + 16);
                      *(void *)(v122 + 16) = v142;
                      uint64_t v143 = v188;
                      uint64_t v188 = *(void *)(v122 + 32);
                      *(void *)(v122 + 32) = v143;
                      uint64_t v144 = *(void *)v130;
                      int v190 = *(_DWORD *)(v122 + 48);
                      uint64_t v189 = v144;
                      do
                      {
                        unint64_t v145 = v122;
                        unint64_t v122 = a1 + 56 * v141;
                        *(_OWORD *)unint64_t v145 = *(_OWORD *)v122;
                        uint64_t v146 = *(void *)(v145 + 24);
                        double v147 = (uint64_t *)(v122 + 24);
                        *(void *)(v145 + 24) = *(void *)(v122 + 24);
                        *(void *)(v122 + 24) = v146;
                        uint64_t v148 = *(void *)(v145 + 16);
                        *(void *)(v145 + 16) = 0;
                        uint64_t v149 = (uint64_t *)(v122 + 16);
                        *(void *)(v145 + 16) = *(void *)(v122 + 16);
                        *(void *)(v122 + 16) = v148;
                        id v150 = (uint64_t *)(v122 + 32);
                        uint64_t v151 = *(void *)(v145 + 32);
                        *(void *)(v145 + 32) = *(void *)(v122 + 32);
                        *(void *)(v122 + 32) = v151;
                        uint64_t v153 = *(void *)(v122 + 40);
                        unint64_t v152 = v122 + 40;
                        *(_DWORD *)(v145 + 48) = *(_DWORD *)(v122 + 48);
                        *(void *)(v145 + 40) = v153;
                        if (!v141) {
                          break;
                        }
                        unint64_t v141 = (v141 - 1) >> 1;
                      }
                      while (*(unsigned __int8 *)(a1 + 56 * v141 + 50) > BYTE2(v190));
                      *(_OWORD *)unint64_t v122 = v186;
                      uint64_t v154 = *v147;
                      *double v147 = *((void *)&v187 + 1);
                      *((void *)&v187 + 1) = v154;
                      uint64_t v155 = *v149;
                      *uint64_t v149 = 0;
                      *uint64_t v149 = v187;
                      *(void *)&long long v187 = v155;
                      uint64_t v156 = *v150;
                      *id v150 = v188;
                      uint64_t v188 = v156;
                      uint64_t v157 = v189;
                      *(_DWORD *)(v152 + 8) = v190;
                      *(void *)unint64_t v152 = v157;
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v187);
                    }
                  }
                }
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v181);
                BOOL v100 = v115-- <= 2;
              }
              while (!v100);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          uint64_t v13 = (_OWORD *)(a1 + 56 * ((unint64_t)v11 >> 1));
          if ((unint64_t)v10 < 0x1C01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>((uint64_t)v13, a1, (uint64_t)v178);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, (uint64_t)v13, (uint64_t)v178);
            uint64_t v14 = 56 * v12;
            uint64_t v15 = a1 + 56 * v12;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1 + 56, v15 - 56, (uint64_t)(a2 - 7));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1 + 112, a1 + 56 + v14, (uint64_t)a2 - 168);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(v15 - 56, (uint64_t)v13, a1 + 56 + v14);
            long long v186 = *(_OWORD *)a1;
            uint64_t v188 = 0;
            long long v187 = 0uLL;
            uint64_t v16 = *(void *)(a1 + 32);
            long long v187 = *(_OWORD *)(a1 + 16);
            *(void *)(a1 + 16) = 0;
            *(void *)(a1 + 24) = 0;
            uint64_t v17 = v188;
            uint64_t v188 = v16;
            *(void *)(a1 + 32) = v17;
            LODWORD(v17) = *(_DWORD *)(a1 + 48);
            uint64_t v189 = *(void *)(a1 + 40);
            int v190 = v17;
            uint64_t v19 = *(void *)(a1 + 16);
            uint64_t v18 = *(void *)(a1 + 24);
            *(void *)(a1 + 16) = 0;
            uint64_t v20 = *(void *)(v15 + 24);
            *(void *)(a1 + 16) = *(void *)(v15 + 16);
            *(void *)(a1 + 24) = v20;
            *(void *)(v15 + 16) = v19;
            *(void *)(v15 + 24) = v18;
            uint64_t v21 = *(void *)(a1 + 32);
            uint64_t v22 = *(void *)(v15 + 40);
            int v23 = *(_DWORD *)(v15 + 48);
            *(void *)(a1 + 32) = *(void *)(v15 + 32);
            *(void *)(a1 + 40) = v22;
            *(void *)(v15 + 32) = v21;
            *(_OWORD *)a1 = *v13;
            *(_DWORD *)(a1 + 48) = v23;
            *uint64_t v13 = v186;
            *(void *)(v15 + 24) = *((void *)&v187 + 1);
            *((void *)&v187 + 1) = v18;
            uint64_t v24 = *(void *)(v15 + 16);
            *(void *)(v15 + 16) = 0;
            *(void *)(v15 + 16) = v187;
            *(void *)&long long v187 = v24;
            uint64_t v25 = *(void *)(v15 + 32);
            *(void *)(v15 + 32) = v188;
            uint64_t v188 = v25;
            uint64_t v26 = v189;
            *(_DWORD *)(v15 + 48) = v190;
            *(void *)(v15 + 40) = v26;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v187);
          }
          --a3;
          if ((a4 & 1) != 0 || *(unsigned __int8 *)(a1 - 6) > *(unsigned __int8 *)(a1 + 50)) {
            break;
          }
          long long v186 = *(_OWORD *)a1;
          uint64_t v188 = 0;
          long long v187 = 0uLL;
          uint64_t v52 = *(void *)(a1 + 32);
          long long v187 = *(_OWORD *)(a1 + 16);
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
          uint64_t v53 = v188;
          uint64_t v188 = v52;
          *(void *)(a1 + 32) = v53;
          uint64_t v54 = *(void *)(a1 + 40);
          int v190 = *(_DWORD *)(a1 + 48);
          uint64_t v189 = v54;
          if (BYTE2(v190) <= *((unsigned __int8 *)a2 - 6))
          {
            unint64_t v57 = a1 + 56;
            do
            {
              unint64_t v9 = v57;
              if (v57 >= (unint64_t)a2) {
                break;
              }
              unsigned int v58 = *(unsigned __int8 *)(v57 + 50);
              v57 += 56;
            }
            while (BYTE2(v190) <= v58);
          }
          else
          {
            uint64_t v55 = a1;
            do
            {
              unint64_t v9 = v55 + 56;
              unsigned int v56 = *(unsigned __int8 *)(v55 + 106);
              v55 += 56;
            }
            while (BYTE2(v190) <= v56);
          }
          float v59 = a2;
          if (v9 < (unint64_t)a2)
          {
            int v60 = a2;
            do
            {
              float v59 = (long long *)((char *)v60 - 56);
              unsigned int v61 = *((unsigned __int8 *)v60 - 6);
              int v60 = (long long *)((char *)v60 - 56);
            }
            while (BYTE2(v190) > v61);
          }
          while (v9 < (unint64_t)v59)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)v9, v59);
            do
            {
              unsigned int v62 = *(unsigned __int8 *)(v9 + 106);
              v9 += 56;
            }
            while (BYTE2(v190) <= v62);
            do
            {
              int v63 = *((unsigned __int8 *)v59 - 6);
              float v59 = (long long *)((char *)v59 - 56);
            }
            while (!v63);
          }
          float v64 = (_OWORD *)(v9 - 56);
          if (v9 - 56 != a1)
          {
            *(_OWORD *)a1 = *v64;
            uint64_t v65 = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = *(void *)(v9 - 32);
            *(void *)(v9 - 32) = v65;
            uint64_t v66 = *(void *)(a1 + 16);
            *(void *)(a1 + 16) = 0;
            *(void *)(a1 + 16) = *(void *)(v9 - 40);
            *(void *)(v9 - 40) = v66;
            uint64_t v67 = *(void *)(a1 + 32);
            *(void *)(a1 + 32) = *(void *)(v9 - 24);
            *(void *)(v9 - 24) = v67;
            uint64_t v68 = *(void *)(v9 - 16);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(v9 - 8);
            *(void *)(a1 + 40) = v68;
          }
          *float v64 = v186;
          uint64_t v69 = *(void *)(v9 - 32);
          *(void *)(v9 - 32) = *((void *)&v187 + 1);
          *((void *)&v187 + 1) = v69;
          uint64_t v70 = *(void *)(v9 - 40);
          *(void *)(v9 - 40) = 0;
          *(void *)(v9 - 40) = v187;
          *(void *)&long long v187 = v70;
          uint64_t v71 = *(void *)(v9 - 24);
          *(void *)(v9 - 24) = v188;
          uint64_t v188 = v71;
          uint64_t v72 = v189;
          *(_DWORD *)(v9 - 8) = v190;
          *(void *)(v9 - 16) = v72;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v187);
          a4 = 0;
        }
        uint64_t v27 = 0;
        long long v28 = *(_OWORD *)a1;
        uint64_t v188 = 0;
        long long v187 = 0uLL;
        uint64_t v29 = *(void *)(a1 + 32);
        long long v187 = *(_OWORD *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        uint64_t v30 = v188;
        uint64_t v188 = v29;
        uint64_t v31 = *(void *)(a1 + 40);
        *(void *)(a1 + 32) = v30;
        int v190 = *(_DWORD *)(a1 + 48);
        long long v186 = v28;
        uint64_t v189 = v31;
        do
        {
          unsigned int v32 = *(unsigned __int8 *)(a1 + v27 + 106);
          v27 += 56;
        }
        while (v32 > BYTE2(v190));
        unint64_t v33 = a1 + v27;
        uint64_t v34 = a2;
        if (v27 == 56)
        {
          BOOL v37 = a2;
          while (v33 < (unint64_t)v37)
          {
            uint64_t v35 = (long long *)((char *)v37 - 56);
            unsigned int v38 = *((unsigned __int8 *)v37 - 6);
            BOOL v37 = (long long *)((char *)v37 - 56);
            if (v38 > BYTE2(v190)) {
              goto LABEL_21;
            }
          }
          uint64_t v35 = v37;
        }
        else
        {
          do
          {
            uint64_t v35 = (long long *)((char *)v34 - 56);
            unsigned int v36 = *((unsigned __int8 *)v34 - 6);
            uint64_t v34 = (long long *)((char *)v34 - 56);
          }
          while (v36 <= BYTE2(v190));
        }
LABEL_21:
        if (v33 >= (unint64_t)v35)
        {
          unint64_t v9 = v33;
        }
        else
        {
          int v39 = v35;
          unint64_t v9 = v33;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)v9, v39);
            do
            {
              unsigned int v40 = *(unsigned __int8 *)(v9 + 106);
              v9 += 56;
            }
            while (v40 > BYTE2(v190));
            do
            {
              unsigned int v41 = *((unsigned __int8 *)v39 - 6);
              int v39 = (long long *)((char *)v39 - 56);
            }
            while (v41 <= BYTE2(v190));
          }
          while (v9 < (unint64_t)v39);
        }
        int v42 = (_OWORD *)(v9 - 56);
        if (v9 - 56 != a1)
        {
          *(_OWORD *)a1 = *v42;
          uint64_t v43 = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = *(void *)(v9 - 32);
          *(void *)(v9 - 32) = v43;
          uint64_t v44 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 16) = *(void *)(v9 - 40);
          *(void *)(v9 - 40) = v44;
          uint64_t v45 = *(void *)(a1 + 32);
          *(void *)(a1 + 32) = *(void *)(v9 - 24);
          *(void *)(v9 - 24) = v45;
          uint64_t v46 = *(void *)(v9 - 16);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v9 - 8);
          *(void *)(a1 + 40) = v46;
        }
        _OWORD *v42 = v186;
        uint64_t v47 = *(void *)(v9 - 32);
        *(void *)(v9 - 32) = *((void *)&v187 + 1);
        *((void *)&v187 + 1) = v47;
        uint64_t v48 = *(void *)(v9 - 40);
        *(void *)(v9 - 40) = 0;
        *(void *)(v9 - 40) = v187;
        *(void *)&long long v187 = v48;
        uint64_t v49 = *(void *)(v9 - 24);
        *(void *)(v9 - 24) = v188;
        uint64_t v188 = v49;
        uint64_t v50 = v189;
        *(_DWORD *)(v9 - 8) = v190;
        *(void *)(v9 - 16) = v50;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v187);
        if (v33 >= (unint64_t)v35) {
          break;
        }
LABEL_34:
        std::__introsort<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *,false>(a1, v9 - 56, a3, a4 & 1);
        a4 = 0;
      }
      char v51 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, v9 - 56);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(v9, (uint64_t)a2))break; {
      if ((v51 & 1) == 0)
      }
        goto LABEL_34;
    }
    a2 = (long long *)(v9 - 56);
    if ((v51 & 1) == 0) {
      continue;
    }
    break;
  }
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>(long long *a1, long long *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v5 = *((void *)a1 + 5);
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 2) = 0;
  int v6 = *((_DWORD *)a1 + 12);
  *a1 = *a2;
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  uint64_t v7 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)a1 + 4);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 12);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  *((_DWORD *)a1 + 12) = v8;
  long long v11 = a2[1];
  int v14 = v6;
  *a2 = v2;
  a2[1] = v3;
  uint64_t v12 = *((void *)a2 + 4);
  uint64_t v13 = v5;
  *((_DWORD *)a2 + 12) = v14;
  uint64_t v9 = v13;
  *((void *)a2 + 4) = v4;
  *((void *)a2 + 5) = v9;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  return result;
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 50);
  if (v6 <= *(unsigned __int8 *)(a1 + 50))
  {
    if (*(unsigned __int8 *)(a3 + 50) <= v6) {
      return result;
    }
    *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)a2, (long long *)a3).n128_u64[0];
    if (*(unsigned __int8 *)(a2 + 50) <= *(unsigned __int8 *)(a1 + 50)) {
      return result;
    }
    uint64_t v8 = (long long *)a1;
    uint64_t v9 = (long long *)a2;
  }
  else
  {
    *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)a1, (long long *)a2).n128_u64[0];
    if (*(unsigned __int8 *)(a3 + 50) <= *(unsigned __int8 *)(a2 + 50)) {
      return result;
    }
    uint64_t v8 = (long long *)a2;
    uint64_t v9 = (long long *)a3;
  }
  *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>(v8, v9).n128_u64[0];
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*(unsigned __int8 *)(a2 - 6) > *(unsigned __int8 *)(a1 + 50)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)a1, (long long *)(a2 - 56));
      }
      return v4;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a2 - 56);
      return v4;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112, a2 - 56);
      return v4;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112, a1 + 168);
      if (*(unsigned __int8 *)(a2 - 6) > *(unsigned __int8 *)(a1 + 218))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)(a1 + 168), (long long *)(a2 - 56));
        if (*(unsigned __int8 *)(a1 + 218) > *(unsigned __int8 *)(a1 + 162))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)(a1 + 112), (long long *)(a1 + 168));
          if (*(unsigned __int8 *)(a1 + 162) > *(unsigned __int8 *)(a1 + 106))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)(a1 + 56), (long long *)(a1 + 112));
            if (*(unsigned __int8 *)(a1 + 106) > *(unsigned __int8 *)(a1 + 50)) {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)a1, (long long *)(a1 + 56));
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v5 = a1 + 112;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112);
      uint64_t v6 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      uint64_t v9 = (re::AssetHandle *)&v23;
      break;
  }
  while (*(unsigned __int8 *)(v6 + 50) <= *(unsigned __int8 *)(v5 + 50))
  {
LABEL_15:
    uint64_t v5 = v6;
    v7 += 56;
    v6 += 56;
    if (v6 == a2) {
      return 1;
    }
  }
  long long v22 = *(_OWORD *)v6;
  long long v23 = *(_OWORD *)(v6 + 16);
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  uint64_t v10 = *(void *)(v6 + 40);
  uint64_t v24 = *(void *)(v6 + 32);
  *(void *)(v6 + 32) = 0;
  uint64_t v25 = v10;
  uint64_t v11 = v7;
  int v26 = *(_DWORD *)(v6 + 48);
  while (1)
  {
    uint64_t v12 = a1 + v11;
    uint64_t v13 = *(void *)(a1 + v11 + 144);
    uint64_t v14 = *(void *)(a1 + v11 + 152);
    *(void *)(v12 + 144) = *(void *)(a1 + v11 + 200);
    *(_DWORD *)(v12 + 216) = *(_DWORD *)(a1 + v11 + 160);
    long long v15 = *(_OWORD *)(a1 + v11 + 128);
    *(_OWORD *)(v12 + 168) = *(_OWORD *)(a1 + v11 + 112);
    long long v16 = *(_OWORD *)(a1 + v11 + 184);
    *(_OWORD *)(v12 + 184) = v15;
    *(_OWORD *)(v12 + 128) = v16;
    *(void *)(v12 + 200) = v13;
    *(void *)(v12 + 208) = v14;
    if (v11 == -112) {
      break;
    }
    v11 -= 56;
    if (BYTE2(v26) <= *(unsigned __int8 *)(v12 + 106))
    {
      uint64_t v17 = a1 + v11 + 168;
      goto LABEL_13;
    }
  }
  uint64_t v17 = a1;
LABEL_13:
  long long v18 = *(_OWORD *)(v17 + 16);
  long long v19 = v23;
  *(_OWORD *)uint64_t v17 = v22;
  *(_OWORD *)(v17 + 16) = v19;
  long long v23 = v18;
  uint64_t v20 = *(void *)(v17 + 32);
  *(void *)(v17 + 32) = v24;
  uint64_t v24 = v20;
  *(void *)(v12 + 152) = v25;
  ++v8;
  *(_DWORD *)(v12 + 160) = v26;
  if (v8 != 8)
  {
    re::AssetHandle::~AssetHandle(v9);
    goto LABEL_15;
  }
  BOOL v4 = v6 + 56 == a2;
  re::AssetHandle::~AssetHandle(v9);
  return v4;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a2, a3);
  if (*(unsigned __int8 *)(a4 + 50) > *(unsigned __int8 *)(a3 + 50))
  {
    *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)a3, (long long *)a4).n128_u64[0];
    if (*(unsigned __int8 *)(a3 + 50) > *(unsigned __int8 *)(a2 + 50))
    {
      *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)a2, (long long *)a3).n128_u64[0];
      if (*(unsigned __int8 *)(a2 + 50) > *(unsigned __int8 *)(a1 + 50))
      {
        *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((long long *)a1, (long long *)a2).n128_u64[0];
      }
    }
  }
  return result;
}

void re::HashTable<re::VideoAsset const*,re::ecs2::VideoViewingMode,re::Hash<re::VideoAsset const*>,re::EqualTo<re::VideoAsset const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)long long v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::VideoAsset const*,re::ecs2::VideoViewingMode,re::Hash<re::VideoAsset const*>,re::EqualTo<re::VideoAsset const*>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *(void *)v13;
            *(unsigned char *)(*(void *)(a1 + 16) + 32 * v17 + 24) = *(unsigned char *)(v13 + 8);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

__n128 re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)uint64_t v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 80;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 80 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 80 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + 80 * v9;
  __n128 result = *(__n128 *)a5;
  long long v27 = *(_OWORD *)(a5 + 16);
  long long v28 = *(_OWORD *)(a5 + 32);
  *(void *)(v25 + 72) = *(void *)(a5 + 48);
  *(_OWORD *)(v25 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v28;
  *(_OWORD *)(v25 + 40) = v27;
  *(__n128 *)(v25 + 24) = result;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void *introspect_REVisibilityMode(int a1, const re::IntrospectionBase *a2)
{
  {
    if (v9)
    {
      int v10 = re::introspectionAllocator(v9);
      int v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)int v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "Always";
      introspect_REVisibilityMode(BOOL)::enumAttributes = (uint64_t)v11;
      signed int v12 = re::introspectionAllocator(v11);
      uint64_t v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *((void *)v13 + 1) = 1;
      *((void *)v13 + 2) = "Never";
      qword_26879F890 = (uint64_t)v13;
      BOOL v14 = re::introspectionAllocator(v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = 2;
      *(void *)(v15 + 16) = "VisibleOnRemote";
      qword_26879F898 = v15;
    }
  }
  {
    uint64_t v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&introspect_REVisibilityMode(BOOL)::info, "REVisibilityMode", 1, 1, 1, 1);
    *(void *)uint64_t v16 = &unk_26E715E00;
    *((void *)v16 + 8) = &introspect_REVisibilityMode(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (a1)
  {
    if (introspect_REVisibilityMode(BOOL)::isInitialized) {
      return &introspect_REVisibilityMode(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    char v3 = introspect_REVisibilityMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if (v3) {
      return &introspect_REVisibilityMode(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (introspect_REVisibilityMode(BOOL)::isInitialized)
    {
LABEL_9:
      long long v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &introspect_REVisibilityMode(BOOL)::info;
    }
  }
  introspect_REVisibilityMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&introspect_REVisibilityMode(BOOL)::info, a2);
  v17[0] = 0x94DC8454B42571D0;
  v17[1] = (uint64_t)"REVisibilityMode";
  xmmword_26879F8C8 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((a1 & 1) == 0) {
    goto LABEL_9;
  }
  return &introspect_REVisibilityMode(BOOL)::info;
}

void *re::ecs2::SubdivisionSurfaceSystemComponentStateImpl::SubdivisionSurfaceSystemComponentStateImpl(void *a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  *a1 = &unk_26E709090;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v5[3] = re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 4;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(a1 + 2), (uint64_t)v4);
  return a1;
}

BOOL re::ecs2::SubdivisionSurfaceSystemComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v25, a5, 0);
  unint64_t v8 = v25;
  unint64_t v9 = v26;
  unint64_t v25 = a4;
  unint64_t v26 = v8;
  unint64_t v27 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v26);
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(*(void *)(*(void *)v14 + 16) + 176);
      if (*(void *)(*(void *)v14 + 240)) {
        BOOL v17 = v16 == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17 || !re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v16 + 32)))
      {
        long long v19 = (unint64_t *)(a3 + 32);
      }
      else
      {
        uint64_t v18 = v15 + 232;
        v24[0] = v18;
        v24[1] = 7;
        if (!re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v24)
          || (v23[0] = v18,
              v23[1] = 8,
              long long v19 = (unint64_t *)(a3 + 32),
              !re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v23)))
        {
          long long v19 = (unint64_t *)(a3 + 48);
        }
      }
      unint64_t v20 = v25;
      unint64_t v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v26);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *v19);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v26);
    }
    while (v26 != a5 || (unsigned __int16)v27 != 0xFFFF || WORD1(v27) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::SubdivisionSurfaceSystemComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(re::RenderManager **)(v7 + 112);
  uint64_t v9 = *((void *)v8 + 4);
  uint64_t v10 = *(void *)(v7 + 144);
  uint64_t v98 = re::RenderManager::perFrameAllocator(v8);
  uint64_t v121 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
  int v119 = 0;
  memset(v118, 0, sizeof(v118));
  uint64_t v120 = 0x7FFFFFFFLL;
  uint64_t v99 = a3;
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v11 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v12 && (uint64_t v13 = *(void *)(v12 + 24)) != 0)
  {
    int v104 = 0;
    uint64_t v14 = *(void *)(v12 + 40);
    uint64_t v15 = 8 * v13;
    do
    {
      if (*(unsigned char *)(*(void *)v14 + 25))
      {
        unint64_t v16 = *(void *)(*(void *)v14 + 16);
        if (*(unsigned char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v121, v16))
        {
          uint64_t v17 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v17 && !*(unsigned char *)(v17 + 27))
          {
            *(void *)&long long v124 = *(void *)(v16 + 296);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v118, (uint64_t *)&v124);
          }
          else
          {
            int v104 = 1;
          }
        }
      }
      v14 += 8;
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    int v104 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v124, a5, 0);
  uint64_t v116 = a4;
  long long v117 = v124;
  if ((void)v124 != a5 || WORD4(v124) != 0xFFFFLL || (DWORD2(v124) & 0xFFFF0000) != 0xFFFF0000)
  {
    int v18 = 0;
    uint64_t v110 = v9 + 72;
    int64_t v96 = (re::ecs2::RenderingSubsystem *)v11;
    uint64_t v97 = v9 + 8;
    long long v19 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    unint64_t v20 = (unint64_t)v118;
    do
    {
      uint64_t v21 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v117);
      uint64_t v107 = *(void *)v21;
      uint64_t v22 = *(void *)(*(void *)v21 + 16);
      uint64_t v23 = *(void *)(v22 + 176);
      uint64_t v24 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v23 + 32));
      uint64_t v25 = *(void *)(v24 + 392);
      unint64_t v26 = *(void *)(v24 + 376);
      uint64_t v27 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v22 + 32), (const re::ecs2::ComponentTypeBase *)v19[114]);
      int v106 = v18;
      if (v27)
      {
        uint64_t v109 = *(void *)(v27 + 208);
        unint64_t v26 = *(void *)(v27 + 192);
      }
      else
      {
        uint64_t v109 = v25;
      }
      uint64_t v114 = (void *)(v107 + 232);
      uint64_t v115 = 7;
      uint64_t v112 = v107 + 232;
      uint64_t v113 = 8;
      BOOL isEmpty = re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)&v114);
      BOOL v29 = re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)&v112);
      *(void *)&long long v124 = *(void *)(v22 + 296);
      BOOL v30 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v118, (uint64_t *)&v124);
      unsigned int v32 = (((v29 || v30) | re::ecs2::MeshComponentHelper::isMappedToOcclusionPass((re::ecs2::MeshComponentHelper *)v23, v31)) ^ 1) & v104;
      BOOL v105 = isEmpty;
      if (!isEmpty || (v32 & 1) != 0)
      {
        uint64_t v36 = *(void *)(a1 + 8);
        if (v36) {
          BOOL v37 = *(re::ecs2::TransformHelper **)(v36 + 152);
        }
        else {
          BOOL v37 = 0;
        }
        re::ecs2::TransformHelper::computeWorldMatrixForRendering(v37, (re::ecs2::TransformComponent **)v22, v111);
        uint64_t v39 = *(void *)(v107 + 392);
        unint64_t v40 = *(void *)(v39 + 88);
        uint64_t v41 = *(void *)(v39 + 96);
        unint64_t v42 = v26;
        if (v26)
        {
          if (v26 >> 58) {
            goto LABEL_85;
          }
          uint64_t v43 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v98 + 32))(v98, (v26 << 6) | 0x1F, 0);
          unint64_t v42 = v26;
          unint64_t v44 = (v43 + 31) & 0xFFFFFFFFFFFFFFF0;
          *(void *)(v44 - 16) = v26;
          *(void *)(v44 - 8) = v43;
          uint64_t v45 = (_OWORD *)(v44 + 32);
          unint64_t v46 = v26;
          do
          {
            *(v45 - 2) = xmmword_23435FD50;
            *(v45 - 1) = xmmword_23435FD60;
            *uint64_t v45 = xmmword_23435FD80;
            v45[1] = xmmword_23435FBB0;
            v45 += 4;
            --v46;
          }
          while (v46);
          if (v26)
          {
            unsigned int v101 = v32;
            uint64_t v47 = 0;
            uint64_t v48 = v110;
            while (v47 != v42)
            {
              uint64_t v49 = (_OWORD *)re::DataArray<re::MeshInstance>::tryGet(v48, *(void *)(v109 + 8 * v47));
              uint64_t v50 = 0;
              float32x4_t v51 = (float32x4_t)v111[0];
              float32x4_t v52 = (float32x4_t)v111[1];
              float32x4_t v53 = (float32x4_t)v111[2];
              float32x4_t v54 = (float32x4_t)v111[3];
              long long v55 = v49[3];
              long long v56 = v49[4];
              long long v57 = v49[5];
              *(_OWORD *)unint64_t v122 = v49[2];
              *(_OWORD *)&v122[16] = v55;
              *(_OWORD *)&v122[32] = v56;
              long long v123 = v57;
              do
              {
                *(long long *)((char *)&v124 + v50) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(_OWORD *)&v122[v50])), v52, *(float32x2_t *)&v122[v50], 1), v53, *(float32x4_t *)&v122[v50], 2), v54, *(float32x4_t *)&v122[v50], 3);
                v50 += 16;
              }
              while (v50 != 64);
              long long v58 = v125;
              long long v59 = v126;
              long long v60 = v127;
              unsigned int v61 = (_OWORD *)(v44 + (v47 << 6));
              _OWORD *v61 = v124;
              v61[1] = v58;
              v61[2] = v59;
              v61[3] = v60;
              ++v47;
              uint64_t v48 = v110;
              unint64_t v42 = v26;
              if (v47 == v26)
              {
                unsigned int v32 = v101;
                goto LABEL_38;
              }
            }
            re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v42, v42, v96);
            _os_crash();
            __break(1u);
LABEL_85:
            re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 64, v42);
            _os_crash();
            __break(1u);
LABEL_86:
            re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 24, v42);
            _os_crash();
            __break(1u);
            goto LABEL_87;
          }
        }
        else
        {
          unint64_t v44 = 0;
        }
LABEL_38:
        if (!v105)
        {
          *(void *)&long long v124 = v114;
          *((void *)&v124 + 1) = v115;
          LOWORD(v1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
          while (1)
          {
            re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)&v114, (uint64_t)v122);
            if (HIDWORD(v124) == *(_DWORD *)&v122[12] && (unsigned __int16)v125 == *(unsigned __int16 *)&v122[16]) {
              break;
            }
            unsigned int v62 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v124);
            unsigned int v63 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v124);
            if (v40 <= v62)
            {
              re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v62, v40, v96);
              _os_crash();
              __break(1u);
LABEL_67:
              re::internal::assertLog((re::internal *)6, v77, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v78, v40);
              _os_crash();
              __break(1u);
LABEL_68:
              uint64_t v81 = 0;
LABEL_69:
              int v82 = (re::RenderFrameData *)(v81 + 33);
              re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v96, 0, v81, v111);
              uint64_t v112 = *(void *)&v111[0] >> 1;
              uint64_t v83 = re::RenderFrameData::stream(v82, (const re::WeakStringID *)&v112);
              uint64_t v84 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v83, (uint64_t *)&v114);
              if (!v84)
              {
                uint64_t v85 = *(void *)(*(void *)(v83 + 48) + 8);
                uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v85 + 32))(v85, 56, 8);
                *(void *)uint64_t v86 = 0;
                *(void *)(v86 + 8) = 0;
                *(_DWORD *)(v86 + 16) = 1;
                *(void *)(v86 + 32) = 0;
                *(void *)(v86 + 40) = 0;
                *(void *)(v86 + 24) = 0;
                *(_DWORD *)(v86 + 48) = 0;
                long long v87 = (re *)re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::init(v86, v85, 1uLL);
                uint64_t v88 = re::globalAllocators(v87)[2];
                *(void *)unint64_t v122 = &unk_26E7091E8;
                *(void *)&v122[8] = v85;
                *(void *)&v122[24] = v88;
                *(void *)&v122[32] = v122;
                *((void *)&v124 + 1) = v86;
                *(void *)&long long v124 = std::__any_imp::_SmallHandler<re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul> *>::__handle[abi:nn180100];
                *((void *)&v127 + 1) = v88;
                *(void *)&long long v128 = 0;
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::operator=<24ul>((uint64_t)&v126, (uint64_t)v122);
                uint64_t v84 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v83, (uint64_t *)&v114, (re *)&v124);
                if ((void)v128)
                {
                  uint64_t v116 = &v124;
                  (*(void (**)(void, long long **))(*(void *)v128 + 16))(v128, &v116);
                }
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v126);
                if ((void)v124) {
                  ((void (*)(void, long long *, void, void, void))v124)(0, &v124, 0, 0, 0);
                }
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)v122);
              }
              uint64_t v114 = &unk_26E709178;
              unint64_t v90 = *(void *)(v89 + 40);
              unint64_t v40 = *(void *)(v89 + 8);
              if (v90 + 1 > 4 * v40)
              {
                re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::setBucketsCapacity((void *)v89, (v90 + 4) >> 2);
                unint64_t v40 = *(void *)(v89 + 8);
              }
              unint64_t v20 = v90 >> 2;
              if (v40 > v90 >> 2)
              {
                if (*(unsigned char *)(v89 + 16)) {
                  uint64_t v91 = v89 + 24;
                }
                else {
                  uint64_t v91 = *(void *)(v89 + 32);
                }
                uint64_t v92 = *(void *)(v91 + 8 * v20);
                unint64_t v93 = *(void *)(v89 + 40);
                *(void *)(v89 + 40) = v93 + 1;
                ++*(_DWORD *)(v89 + 48);
                *(void *)(v92 + 8 * (v90 & 3)) = &unk_26E709178;
                if (v93 != -1)
                {
                  re::BucketArray<unsigned long,4ul>::operator[](v89, v93);
                  re::StringID::destroyString((re::StringID *)v111);
                  goto LABEL_83;
                }
LABEL_88:
                re::internal::assertLog((re::internal *)4, v93, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
                _os_crash();
                __break(1u);
              }
LABEL_87:
              uint64_t v116 = 0;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v124 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)unint64_t v122 = 136315906;
              *(void *)&v122[4] = "operator[]";
              *(_WORD *)&v122[12] = 1024;
              *(_DWORD *)&v122[14] = 858;
              *(_WORD *)&v122[18] = 2048;
              *(void *)&v122[20] = v20;
              *(_WORD *)&v122[28] = 2048;
              *(void *)&v122[30] = v40;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_88;
            }
            uint64_t v65 = v41 + 168 * v62;
            ++*(unsigned char *)(v65 + 7);
            *(void *)(v65 + 80) = v44 + ((unint64_t)v63 << 6);
            re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v124);
          }
          unint64_t v42 = v26;
        }
        if (v32)
        {
          unsigned int v102 = v32;
          if (v42)
          {
            if (!is_mul_ok(v42, 0x18uLL) || 24 * v42 >= 0xFFFFFFFFFFFFFFF0) {
              goto LABEL_86;
            }
            unint64_t v66 = v42;
            uint64_t v67 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v98 + 32))(v98, (24 * v42 + 16) | 7, 0);
            uint64_t v68 = (void *)((v67 + 23) & 0xFFFFFFFFFFFFFFF8);
            *(v68 - 2) = v66;
            *(v68 - 1) = v67;
            unint64_t v108 = v66;
            bzero(v68, 24 * v66);
            uint64_t v69 = 0;
            unsigned int v70 = 1;
            do
            {
              uint64_t v71 = re::DataArray<re::MeshInstance>::tryGet(v110, *(void *)(v109 + 8 * v69));
              uint64_t v72 = re::DataArray<re::MeshModel>::tryGet(v97, *(void *)(v71 + 16));
              uint64_t v73 = &v68[3 * v69];
              *uint64_t v73 = v44 + (v69 << 6);
              v73[1] = *(void *)(v71 + 16);
              v73[2] = *(void *)(v72 + 56);
              uint64_t v69 = v70;
            }
            while (v108 > v70++);
            unint64_t v20 = (unint64_t)v118;
          }
          else
          {
            uint64_t v68 = 0;
          }
          *(void *)&long long v124 = v112;
          *((void *)&v124 + 1) = v113;
          LOWORD(v1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
          while (1)
          {
            re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)&v112, (uint64_t)v122);
            if (HIDWORD(v124) == *(_DWORD *)&v122[12] && (unsigned __int16)v125 == *(unsigned __int16 *)&v122[16]) {
              break;
            }
            unsigned int v75 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v124);
            unsigned int v76 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v124);
            uint64_t v78 = v75;
            if (v40 <= v75) {
              goto LABEL_67;
            }
            uint64_t v79 = v41 + 168 * v75;
            ++*(unsigned char *)(v79 + 8);
            *(void *)(v79 + 88) = &v68[3 * v76];
            re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v124);
          }
          unsigned int v32 = v102;
        }
        int v35 = v106;
      }
      else
      {
        unint64_t v33 = (unint64_t)v116;
        unint64_t v34 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v117);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v99 + 16), v33, v34, *(void *)(v99 + 32));
        int v35 = v106;
      }
      long long v19 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      int v18 = v35 | v32;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v117);
    }
    while ((void)v117 != a5 || WORD4(v117) != 0xFFFF || WORD5(v117) != 0xFFFF);
    if (v18)
    {
      uint64_t v80 = *(void *)(*(void *)(*(void *)(a1 + 8) + 112) + 104);
      if (!v80) {
        goto LABEL_68;
      }
      uint64_t v81 = (re::DynamicString **)re::RenderFrameBox::get(v80 + 344, 0xFFFFFFFFFFFFFFFuLL);
      goto LABEL_69;
    }
  }
LABEL_83:
  BOOL v94 = *(_DWORD *)(a5 + 40) != 0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v118);
  return v94;
}

uint64_t re::ecs2::SubdivisionSurfaceSystem::updateScenes(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  uint64_t v4 = *(void *)(result + 104);
  if (v4 && (*(unsigned char *)(v4 + 424) & 0x10) != 0)
  {
    uint64_t v6 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v12);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      unint64_t v8 = *(uint64_t **)a2;
      uint64_t v9 = v6 + 200;
      uint64_t v10 = 8 * v7;
      do
      {
        uint64_t v11 = *v8++;
        re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::updateForScene(v9, v11, (uint64_t)v13, 0);
        v10 -= 8;
      }
      while (v10);
    }
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v12);
  }
  return result;
}

void re::ecs2::SubdivisionSurfaceSystem::willAddSceneToECSService(re::ecs2::SubdivisionSurfaceSystem *this, re::ecs2::Scene *a2)
{
}

uint64_t re::ecs2::SubdivisionSurfaceSystem::willRemoveSceneFromECSService(re::ecs2::SubdivisionSurfaceSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 200, (uint64_t)a2);
}

void *re::ecs2::allocInfo_SubdivisionSurfaceSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_326, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_326))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8FDE8, "SubdivisionSurfaceSystem");
    __cxa_guard_release(&_MergedGlobals_326);
  }
  return &unk_26AF8FDE8;
}

void re::ecs2::initInfo_SubdivisionSurfaceSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xCEBCE26D071EC6DELL;
  v5[1] = "SubdivisionSurfaceSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_SubdivisionSurfaceSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SubdivisionSurfaceSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SubdivisionSurfaceSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::SubdivisionSurfaceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::SubdivisionSurfaceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SubdivisionSurfaceSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SubdivisionSurfaceSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::SubdivisionSurfaceSystem *re::internal::defaultConstruct<re::ecs2::SubdivisionSurfaceSystem>(int a1, int a2, re::ecs2::SubdivisionSurfaceSystem *this)
{
  return re::ecs2::SubdivisionSurfaceSystem::SubdivisionSurfaceSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SubdivisionSurfaceSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &unk_26E709090;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 22);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SubdivisionSurfaceSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &unk_26E709090;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 22);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SubdivisionSurfaceSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SubdivisionSurfaceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SubdivisionSurfaceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SubdivisionSurfaceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SubdivisionSurfaceSystem>, this);
}

uint64_t re::ecs2::SubdivisionSurfaceSystemComponentStateImpl::dependsOnComponents(re::ecs2::SubdivisionSurfaceSystemComponentStateImpl *this)
{
  return *((void *)this + 4);
}

void re::ecs2::SubdivisionSurfaceSystem::~SubdivisionSurfaceSystem(re::ecs2::SubdivisionSurfaceSystem *this)
{
  *((void *)this + 20) = &unk_26E709090;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25);
  *((void *)this + 20) = &unk_26E709090;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::SubdivisionSurfaceSystem::typeInfo(re::ecs2::SubdivisionSurfaceSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SubdivisionSurfaceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SubdivisionSurfaceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SubdivisionSurfaceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SubdivisionSurfaceSystem>, 0);
}

void re::SimplifiedMeshBufferFlagData::~SimplifiedMeshBufferFlagData(re::SimplifiedMeshBufferFlagData *this)
{
}

void *re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  __n128 result = re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  char v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        __n128 result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        long long v5 = v3 + 3;
        do
        {
          __n128 result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 32, 0);
          long long v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      __n128 result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul> *>::__id;
      if (v10) {
        __n128 result = a2 + 1;
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 8);
  __n128 result = (uint64_t *)(**a2)(3);
  uint64_t v4 = *result;
  if (*result)
  {
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5)
    {
      for (unint64_t i = 0; i != v5; ++i)
      {
        unint64_t v7 = (void (***)(void))re::BucketArray<unsigned long,4ul>::operator[](v4, i);
        (**v7)(v7);
      }
    }
    while (*(void *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(void *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (uint64_t *)v8(v2, v4);
  }
  return result;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7091E8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7091E8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SimplifiedMeshBufferFlagData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

id re::internal::defaultRetain<re::ecs2::SubdivisionSurfaceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SubdivisionSurfaceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_AcousticMeshComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FE70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8FE70))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF8FF88, "AcousticMeshComponent");
    __cxa_guard_release(&qword_26AF8FE70);
  }
  return &unk_26AF8FF88;
}

void re::ecs2::initInfo_AcousticMeshComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v55 = 0x4FE77884F66CF2DALL;
  long long v56 = "AcousticMeshComponent";
  re::StringID::destroyString((re::StringID *)&v55);
  *((_OWORD *)this + 2) = v50;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FE68, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF8FE68);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF8FE98 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      BOOL v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "mesh";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF8FEA0 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FE80, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8FE80))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF8FEC8);
        qword_26AF8FEC8 = (uint64_t)&unk_26E709388;
        __cxa_guard_release(&qword_26AF8FE80);
      }
      if ((_MergedGlobals_327 & 1) == 0)
      {
        uint64_t v13 = re::introspect_AcousticAbsorptionMaterial((re::IntrospectionBase **)1);
        if ((_MergedGlobals_327 & 1) == 0)
        {
          uint64_t v14 = v13;
          _MergedGlobals_327 = 1;
          int v15 = *(_DWORD *)(v13 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF8FEC8, 0);
          qword_26AF8FED8 = 0x2800000003;
          dword_26AF8FEE0 = v15;
          word_26AF8FEE4 = 0;
          *(void *)&xmmword_26AF8FEE8 = 0;
          *((void *)&xmmword_26AF8FEE8 + 1) = 0xFFFFFFFFLL;
          qword_26AF8FEF8 = v14;
          unk_26AF8FF00 = 0;
          qword_26AF8FEC8 = (uint64_t)&unk_26E709388;
          re::IntrospectionRegistry::add(v16, v17);
          re::getPrettyTypeName((re *)&qword_26AF8FEC8, (const re::IntrospectionBase *)&v55);
          if (v56) {
            int v18 = v57;
          }
          else {
            int v18 = (char *)&v56 + 1;
          }
          if (v55 && (v56 & 1) != 0) {
            (*(void (**)(void))(*(void *)v55 + 40))();
          }
          long long v52 = *(_OWORD *)(v14 + 32);
          long long v19 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v53);
          if (v19)
          {
            uint64_t v20 = *v19;
            *((void *)&v51 + 1) = v20;
          }
          else
          {
            long long v54 = v52;
            re::TypeBuilder::beginListType((uint64_t)&v55, v53, 1, 0x28uLL, 8uLL, &v54);
            re::TypeBuilder::setConstructor((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v55, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v55, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v55, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v55, v21);
          }
          xmmword_26AF8FEE8 = v51;
          re::StringID::destroyString((re::StringID *)v53);
        }
      }
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "absorptionMaterials";
      *(void *)(v22 + 16) = &qword_26AF8FEC8;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0xA800000002;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF8FEA8 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FE88, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8FE88))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_26AF8FF08);
        qword_26AF8FF08[0] = (uint64_t)&unk_26E709420;
        __cxa_guard_release(&qword_26AF8FE88);
      }
      if ((byte_26AF8FE61 & 1) == 0)
      {
        uint64_t v24 = re::introspect_AcousticScatteringMaterial((re::IntrospectionBase **)1);
        if ((byte_26AF8FE61 & 1) == 0)
        {
          uint64_t v25 = v24;
          byte_26AF8FE61 = 1;
          int v26 = *(_DWORD *)(v24 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF8FF08, 0);
          unk_26AF8FF18 = 0x2800000003;
          unk_26AF8FF20 = v26;
          unk_26AF8FF24 = 0;
          *(void *)&xmmword_26AF8FF28 = 0;
          *((void *)&xmmword_26AF8FF28 + 1) = 0xFFFFFFFFLL;
          unk_26AF8FF38 = v25;
          unk_26AF8FF40 = 0;
          qword_26AF8FF08[0] = (uint64_t)&unk_26E709420;
          re::IntrospectionRegistry::add(v27, v28);
          re::getPrettyTypeName((re *)qword_26AF8FF08, (const re::IntrospectionBase *)&v55);
          if (v56) {
            BOOL v29 = v57;
          }
          else {
            BOOL v29 = (char *)&v56 + 1;
          }
          if (v55 && (v56 & 1) != 0) {
            (*(void (**)(void))(*(void *)v55 + 40))();
          }
          long long v52 = *(_OWORD *)(v25 + 32);
          BOOL v30 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v53);
          if (v30)
          {
            uint64_t v31 = *v30;
            *((void *)&v51 + 1) = v31;
          }
          else
          {
            long long v54 = v52;
            re::TypeBuilder::beginListType((uint64_t)&v55, v53, 1, 0x28uLL, 8uLL, &v54);
            re::TypeBuilder::setConstructor((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v55, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v55, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v55, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v55, v32);
          }
          xmmword_26AF8FF28 = v51;
          re::StringID::destroyString((re::StringID *)v53);
        }
      }
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "scatteringMaterials";
      *(void *)(v33 + 16) = qword_26AF8FF08;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0xF800000003;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF8FEB0 = v33;
      unint64_t v34 = re::introspectionAllocator((re *)v33);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FE90, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF8FE90))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_26AF8FF48);
        qword_26AF8FF48[0] = (uint64_t)&unk_26E7094B8;
        __cxa_guard_release(&qword_26AF8FE90);
      }
      if ((byte_26AF8FE62 & 1) == 0)
      {
        uint64_t v35 = re::introspect_AcousticSoundReductionMaterial((re::IntrospectionBase **)1);
        if ((byte_26AF8FE62 & 1) == 0)
        {
          uint64_t v36 = v35;
          byte_26AF8FE62 = 1;
          int v37 = *(_DWORD *)(v35 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF8FF48, 0);
          unk_26AF8FF58 = 0x2800000003;
          unk_26AF8FF60 = v37;
          word_26AF8FF64 = 0;
          *(void *)&xmmword_26AF8FF68 = 0;
          *((void *)&xmmword_26AF8FF68 + 1) = 0xFFFFFFFFLL;
          qword_26AF8FF78 = v36;
          unk_26AF8FF80 = 0;
          qword_26AF8FF48[0] = (uint64_t)&unk_26E7094B8;
          re::IntrospectionRegistry::add(v38, v39);
          re::getPrettyTypeName((re *)qword_26AF8FF48, (const re::IntrospectionBase *)&v55);
          if (v56) {
            unint64_t v40 = v57;
          }
          else {
            unint64_t v40 = (char *)&v56 + 1;
          }
          if (v55 && (v56 & 1) != 0) {
            (*(void (**)(void))(*(void *)v55 + 40))();
          }
          long long v52 = *(_OWORD *)(v36 + 32);
          uint64_t v41 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v53);
          if (v41)
          {
            uint64_t v42 = *v41;
            *((void *)&v51 + 1) = v42;
          }
          else
          {
            long long v54 = v52;
            re::TypeBuilder::beginListType((uint64_t)&v55, v53, 1, 0x28uLL, 8uLL, &v54);
            re::TypeBuilder::setConstructor((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v55, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v55, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v55, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v55, v43);
          }
          xmmword_26AF8FF68 = v51;
          re::StringID::destroyString((re::StringID *)v53);
        }
      }
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = "soundReductionMaterials";
      *(void *)(v44 + 16) = qword_26AF8FF48;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 32) = 0x14800000004;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 48) = 0;
      *(void *)(v44 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF8FEB8 = v44;
      uint64_t v45 = re::introspectionAllocator((re *)v44);
      uint64_t v47 = re::introspect_double((re *)1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + 8) = "lastUpdateTimestamp";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + 32) = 0x1A000000005;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 48) = 0;
      *(void *)(v48 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26AF8FEC0 = v48;
      __cxa_guard_release(&qword_26AF8FE68);
    }
  }
  *((void *)this + 2) = 0x1B000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF8FE98;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AcousticMeshComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AcousticMeshComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AcousticMeshComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AcousticMeshComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v49 = v50;
}

double re::internal::defaultConstruct<re::ecs2::AcousticMeshComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::AcousticMeshComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AcousticMeshComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AcousticMeshComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AcousticMeshComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticMeshComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AcousticMeshComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AcousticMeshComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AcousticMeshComponent>, this);
}

void *re::ecs2::allocInfo_AcousticMeshSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF8FE78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF8FE78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90000, "AcousticMeshSystem");
    __cxa_guard_release(&qword_26AF8FE78);
  }
  return &unk_26AF90000;
}

void re::ecs2::initInfo_AcousticMeshSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xFAA62CA9EBAFD77ELL;
  v5[1] = "AcousticMeshSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1A800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AcousticMeshSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AcousticMeshSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AcousticMeshSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AcousticMeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AcousticMeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AcousticMeshSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AcousticMeshSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::AcousticMeshSystem *re::internal::defaultConstruct<re::ecs2::AcousticMeshSystem>(int a1, int a2, re::ecs2::AcousticMeshSystem *this)
{
  return re::ecs2::AcousticMeshSystem::AcousticMeshSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AcousticMeshSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a3 + 48));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 16);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AcousticMeshSystem>(void *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a1 + 48));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 16);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AcousticMeshSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticMeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AcousticMeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AcousticMeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AcousticMeshSystem>, this);
}

uint64_t re::DynamicArray<re::AcousticAbsorptionMaterial>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (re::DynamicString *)(*((void *)this + 4) + 112 * v4);
  re::DynamicString::DynamicString(v5, a2);
  re::DynamicArray<float>::DynamicArray((uint64_t)v5 + 32, (uint64_t *)a2 + 4);
  uint64_t result = re::DynamicArray<float>::DynamicArray((uint64_t)v5 + 72, (uint64_t *)a2 + 9);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::AcousticScatteringMaterial>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::AcousticScatteringMaterial>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (re::DynamicString *)(*((void *)this + 4) + 112 * v4);
  re::DynamicString::DynamicString(v5, a2);
  re::DynamicArray<float>::DynamicArray((uint64_t)v5 + 32, (uint64_t *)a2 + 4);
  uint64_t result = re::DynamicArray<float>::DynamicArray((uint64_t)v5 + 72, (uint64_t *)a2 + 9);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::AcousticSoundReductionMaterial>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (re::DynamicString *)(*((void *)this + 4) + 112 * v4);
  re::DynamicString::DynamicString(v5, a2);
  re::DynamicArray<float>::DynamicArray((uint64_t)v5 + 32, (uint64_t *)a2 + 4);
  uint64_t result = re::DynamicArray<float>::DynamicArray((uint64_t)v5 + 72, (uint64_t *)a2 + 9);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ecs2::AcousticMeshComponent::clearAllMeshMaterials(re::ecs2::AcousticMeshComponent *this)
{
  *((unsigned char *)this + 408) = 1;
}

void re::ecs2::AcousticMeshComponent::adjustAcousticMaterialsWetDry(re::ecs2::AcousticMeshComponent *this, float a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  if (a2 < -1.0) {
    a2 = -1.0;
  }
  float v4 = powf(3.0, -a2);
  unint64_t v5 = *((void *)this + 23);
  if (v5)
  {
    float v6 = v4;
    unint64_t v7 = 0;
    double v8 = v4;
    do
    {
      uint64_t v9 = *((void *)this + 25);
      uint64_t v10 = v9 + 112 * v7;
      uint64_t v12 = *(void *)(v10 + 88);
      uint64_t v11 = (unint64_t *)(v10 + 88);
      if (v12)
      {
        unint64_t v13 = 0;
        uint64_t v14 = (void *)(v9 + 112 * v7 + 104);
        do
        {
          *(float *)(*v14 + 4 * v13) = v6 * *(float *)(*v14 + 4 * v13);
          int v15 = (id)*re::audioLogObjects(v3);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            if (*v11 <= v13)
            {
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            double v16 = *(float *)(*v14 + 4 * v13);
            LODWORD(buf[0]) = 134218496;
            *(double *)((char *)buf + 4) = v16;
            WORD6(buf[0]) = 2048;
            *(double *)((char *)buf + 14) = v8;
            WORD3(buf[1]) = 2048;
            *((void *)&buf[1] + 1) = 0x4072C00000000000;
            _os_log_debug_impl(&dword_233120000, v15, OS_LOG_TYPE_DEBUG, "[DryWet Ratio] absorption coefficient set to %f with ratioScale set to %f, maxScaleValue set to +/- %f [%%]", (uint8_t *)buf, 0x20u);
          }

          ++v13;
        }
        while (*v11 > v13);
        unint64_t v5 = *((void *)this + 23);
      }
      ++v7;
    }
    while (v5 > v7);
  }
  *((unsigned char *)this + 408) = 1;
}

void re::ecs2::AcousticMeshComponent::adjustAcousticMaterialsSpecDiffuse(re::ecs2::AcousticMeshComponent *this, float a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  float v3 = -1.0;
  if (a2 >= -1.0) {
    float v3 = a2;
  }
  float v5 = powf(3.0, v3);
  unint64_t v6 = *((void *)this + 33);
  if (v6)
  {
    float v7 = v5;
    unint64_t v8 = 0;
    double v9 = v5;
    do
    {
      uint64_t v10 = *((void *)this + 35);
      uint64_t v11 = v10 + 112 * v8;
      uint64_t v13 = *(void *)(v11 + 88);
      uint64_t v12 = (unint64_t *)(v11 + 88);
      if (v13)
      {
        unint64_t v14 = 0;
        int v15 = (void *)(v10 + 112 * v8 + 104);
        do
        {
          *(float *)(*v15 + 4 * v14) = v7 * *(float *)(*v15 + 4 * v14);
          double v16 = (id)*re::audioLogObjects(v4);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            if (*v12 <= v14)
            {
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            double v17 = *(float *)(*v15 + 4 * v14);
            LODWORD(buf[0]) = 134218496;
            *(double *)((char *)buf + 4) = v17;
            WORD6(buf[0]) = 2048;
            *(double *)((char *)buf + 14) = v9;
            WORD3(buf[1]) = 2048;
            *((void *)&buf[1] + 1) = 0x4072C00000000000;
            _os_log_debug_impl(&dword_233120000, v16, OS_LOG_TYPE_DEBUG, "[SpecDiffuse] scattering coefficient set to %f with ratioScale set to %f, maxScaleValue set to +/- %f [%%]", (uint8_t *)buf, 0x20u);
          }

          ++v14;
        }
        while (*v12 > v14);
        unint64_t v6 = *((void *)this + 33);
      }
      ++v8;
    }
    while (v6 > v8);
  }
  *((unsigned char *)this + 408) = 1;
}

void re::ecs2::AcousticMeshComponent::adjustAcousticMaterialsDullBright(BOOL this, float a2)
{
  uint64_t v2 = this;
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  if (a2 >= -1.0) {
    float v3 = a2;
  }
  else {
    float v3 = -1.0;
  }
  if (v3 >= 0.0) {
    float v4 = 0.5;
  }
  else {
    float v4 = 0.8;
  }
  if (*(void *)(this + 184))
  {
    unint64_t v5 = 0;
    float v6 = flt_2343A7C58[v3 < 0.0];
    BOOL v42 = this;
    do
    {
      uint64_t v7 = *(void *)(v2 + 200);
      uint64_t v8 = v7 + 112 * v5;
      double v9 = (unint64_t *)(v8 + 88);
      uint64_t v10 = (unint64_t *)(v8 + 48);
      if (*(void *)(v8 + 88) == *(void *)(v8 + 48))
      {
        std::string::basic_string[abi:nn180100]<0>(&v44, "");
        uint64_t v11 = (std::string *)std::string::basic_string[abi:nn180100]<0>(&v43, "");
        if (*v9)
        {
          unint64_t v12 = 0;
          uint64_t v13 = v7 + 112 * v5;
          unint64_t v14 = (void *)(v13 + 64);
          int v15 = (void *)(v13 + 104);
          while (1)
          {
            unint64_t v16 = *v10;
            if (*v10 <= v12) {
              break;
            }
            float v17 = *(float *)(*v14 + 4 * v12);
            float v18 = (float)(log10f(v17) * 4.0) + -11.20412;
            *(float *)(*v15 + 4 * v12) = *(float *)(*v15 + 4 * v12)
                                       * (float)((float)(v3
                                                       * (float)((float)(v4
                                                                       + (float)(0.7
                                                                               / (float)(expf(-(float)(v6 + (float)((float)(v18 + 0.4) * -0.8)))
                                                                                       + 1.0)))
                                                               + -1.0))
                                               + 1.0);
            std::to_string((std::string *)v46, v17);
            uint64_t v19 = std::string::append((std::string *)v46, ", ");
            uint64_t v20 = (void *)v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            __p[2] = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p[2]) >= 0) {
              uint64_t v21 = __p;
            }
            else {
              uint64_t v21 = (void **)__p[0];
            }
            if (SHIBYTE(__p[2]) >= 0) {
              std::string::size_type v22 = HIBYTE(__p[2]);
            }
            else {
              std::string::size_type v22 = (std::string::size_type)__p[1];
            }
            std::string::append(&v44, (const std::string::value_type *)v21, v22);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            if ((v46[23] & 0x80000000) != 0) {
              operator delete(*(void **)v46);
            }
            unint64_t v16 = *v9;
            if (*v9 <= v12) {
              goto LABEL_74;
            }
            std::to_string((std::string *)v46, *(float *)(*v15 + 4 * v12));
            uint64_t v23 = std::string::append((std::string *)v46, ", ");
            uint64_t v24 = (void *)v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            __p[2] = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p[2]) >= 0) {
              uint64_t v25 = __p;
            }
            else {
              uint64_t v25 = (void **)__p[0];
            }
            if (SHIBYTE(__p[2]) >= 0) {
              std::string::size_type v26 = HIBYTE(__p[2]);
            }
            else {
              std::string::size_type v26 = (std::string::size_type)__p[1];
            }
            uint64_t v11 = std::string::append(&v43, (const std::string::value_type *)v25, v26);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            if ((v46[23] & 0x80000000) != 0) {
              operator delete(*(void **)v46);
            }
            if (*v9 <= ++v12) {
              goto LABEL_37;
            }
          }
          uint64_t v45 = 0;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v50 = 0u;
          memset(__p, 0, sizeof(__p));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v46 = 136315906;
          *(void *)&v46[4] = "operator[]";
          *(_WORD *)&v46[12] = 1024;
          *(_DWORD *)&v46[14] = 789;
          *(_WORD *)&v46[18] = 2048;
          *(void *)&v46[20] = v12;
          __int16 v47 = 2048;
          unint64_t v48 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_74:
          uint64_t v45 = 0;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v50 = 0u;
          memset(__p, 0, sizeof(__p));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v46 = 136315906;
          *(void *)&v46[4] = "operator[]";
          *(_WORD *)&v46[12] = 1024;
          *(_DWORD *)&v46[14] = 789;
          *(_WORD *)&v46[18] = 2048;
          *(void *)&v46[20] = v12;
          __int16 v47 = 2048;
          unint64_t v48 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_37:
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          long long v28 = (std::string *)v44.__r_.__value_.__r.__words[0];
          uint64_t v27 = --v44.__r_.__value_.__l.__size_;
        }
        else
        {
          uint64_t v27 = HIBYTE(v44.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&v44.__r_.__value_.__s + 23) = v27 & 0x7F;
          long long v28 = &v44;
        }
        v28->__r_.__value_.__s.__data_[v27] = 0;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v32 = (std::string *)v44.__r_.__value_.__r.__words[0];
          uint64_t v31 = --v44.__r_.__value_.__l.__size_;
        }
        else
        {
          uint64_t v31 = HIBYTE(v44.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&v44.__r_.__value_.__s + 23) = v31 & 0x7F;
          uint64_t v32 = &v44;
        }
        uint64_t v2 = v42;
        v32->__r_.__value_.__s.__data_[v31] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
          unint64_t v34 = (std::string *)v43.__r_.__value_.__r.__words[0];
          uint64_t v33 = --v43.__r_.__value_.__l.__size_;
        }
        else
        {
          uint64_t v33 = HIBYTE(v43.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&v43.__r_.__value_.__s + 23) = v33 & 0x7F;
          unint64_t v34 = &v43;
        }
        v34->__r_.__value_.__s.__data_[v33] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
          uint64_t v35 = --v43.__r_.__value_.__l.__size_;
        }
        else
        {
          uint64_t v35 = HIBYTE(v43.__r_.__value_.__r.__words[2]) - 1;
          *((unsigned char *)&v43.__r_.__value_.__s + 23) = v35 & 0x7F;
          uint64_t v36 = &v43;
        }
        v36->__r_.__value_.__s.__data_[v35] = 0;
        int v37 = *re::audioLogObjects((re *)v11);
        this = os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG);
        if (this)
        {
          unint64_t v40 = &v44;
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v40 = (std::string *)v44.__r_.__value_.__r.__words[0];
          }
          uint64_t v41 = &v43;
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v41 = (std::string *)v43.__r_.__value_.__r.__words[0];
          }
          LODWORD(__p[0]) = 134218498;
          *(double *)((char *)__p + 4) = v3;
          WORD2(__p[1]) = 2080;
          *(void **)((char *)&__p[1] + 6) = v40;
          HIWORD(__p[2]) = 2080;
          __p[3] = v41;
          _os_log_debug_impl(&dword_233120000, v37, OS_LOG_TYPE_DEBUG, "[DullBright] adjustment of %f changed the material's absorption coefficient for the frequencies %s to %s.", (uint8_t *)__p, 0x20u);
        }
        if (*v10 != 31)
        {
          uint64_t v38 = *re::audioLogObjects((re *)this);
          this = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
          if (this)
          {
            if (*(unsigned char *)(v8 + 8)) {
              uint64_t v39 = *(void **)(v8 + 16);
            }
            else {
              uint64_t v39 = (void *)(v8 + 9);
            }
            LODWORD(__p[0]) = 136315138;
            *(void **)((char *)__p + 4) = v39;
            _os_log_impl(&dword_233120000, v38, OS_LOG_TYPE_DEFAULT, "Material %s's absorpion coefficient adjustment may not match expectations. The algorithm was tuned to adjust 31 ISO 1/3 octave-band frequencies, but the material's coefficients are defined for other ones.", (uint8_t *)__p, 0xCu);
          }
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        BOOL v29 = *re::audioLogObjects((re *)this);
        this = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          if (*(unsigned char *)(v8 + 8)) {
            BOOL v30 = *(void **)(v8 + 16);
          }
          else {
            BOOL v30 = (void *)(v8 + 9);
          }
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = v30;
          _os_log_impl(&dword_233120000, v29, OS_LOG_TYPE_DEFAULT, "Material %s's absorpion coefficients could not be adjusted because the number of frequencies did not match the number of absorption coefficients.", (uint8_t *)__p, 0xCu);
        }
      }
      ++v5;
    }
    while (*(void *)(v2 + 184) > v5);
  }
  *(unsigned char *)(v2 + 408) = 1;
}

void *re::ecs2::AcousticMeshComponent::resetAllAcousticMaterials(re::ecs2::AcousticMeshComponent *this)
{
  uint64_t v2 = (void *)((char *)this + 168);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(v2, 0, *((re::DynamicString **)this + 30), *((void *)this + 28));
  re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 248);
  re::DynamicArray<re::AcousticScatteringMaterial>::copy((void *)this + 31, 0, *((re::DynamicString **)this + 40), *((void *)this + 38));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::clear((uint64_t)this + 328);
  uint64_t result = re::DynamicArray<re::AcousticSoundReductionMaterial>::copy((void *)this + 41, 0, *((re::DynamicString **)this + 50), *((void *)this + 48));
  *((unsigned char *)this + 408) = 1;
  return result;
}

void *re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(void *this, unint64_t a2, re::DynamicString *a3, uint64_t a4)
{
  if (!a4) {
    return this;
  }
  float v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v15 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v16) = 136315906;
    *(void *)((char *)&v16 + 4) = "copy";
    WORD6(v16) = 1024;
    HIWORD(v16) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, a2, v4, v15, v16);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_13;
  }
  if (v7 >= v8)
  {
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>((uint64_t *)a3, (uint64_t *)a3 + 14 * a4, (re::DynamicString *)(this[4] + 112 * a2));
  }
  else
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity(this, a2 + a4);
    uint64_t v10 = v6[2];
    uint64_t v11 = (uint64_t *)((char *)a3 + 112 * (v10 - a2));
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>((uint64_t *)a3, v11, (re::DynamicString *)(v6[4] + 112 * a2));
    if (v10 - a2 != v4)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6[4] + 112 * v6[2];
      uint64_t v14 = 112 * a2 + 112 * v4 - 112 * v10;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v13 + v12), (const re::DynamicString *)&v11[v12 / 8]);
        re::DynamicArray<float>::DynamicArray(v13 + v12 + 32, &v11[v12 / 8 + 4]);
        this = (void *)re::DynamicArray<float>::DynamicArray(v13 + v12 + 72, &v11[v12 / 8 + 9]);
        v12 += 112;
      }
      while (v14 != v12);
    }
    _OWORD v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

void *re::DynamicArray<re::AcousticScatteringMaterial>::copy(void *this, unint64_t a2, re::DynamicString *a3, uint64_t a4)
{
  if (!a4) {
    return this;
  }
  float v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v15 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v16) = 136315906;
    *(void *)((char *)&v16 + 4) = "copy";
    WORD6(v16) = 1024;
    HIWORD(v16) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, a2, v4, v15, v16);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_13;
  }
  if (v7 >= v8)
  {
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>((uint64_t *)a3, (uint64_t *)a3 + 14 * a4, (re::DynamicString *)(this[4] + 112 * a2));
  }
  else
  {
    re::DynamicArray<re::AcousticScatteringMaterial>::growCapacity(this, a2 + a4);
    uint64_t v10 = v6[2];
    uint64_t v11 = (uint64_t *)((char *)a3 + 112 * (v10 - a2));
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>((uint64_t *)a3, v11, (re::DynamicString *)(v6[4] + 112 * a2));
    if (v10 - a2 != v4)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6[4] + 112 * v6[2];
      uint64_t v14 = 112 * a2 + 112 * v4 - 112 * v10;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v13 + v12), (const re::DynamicString *)&v11[v12 / 8]);
        re::DynamicArray<float>::DynamicArray(v13 + v12 + 32, &v11[v12 / 8 + 4]);
        this = (void *)re::DynamicArray<float>::DynamicArray(v13 + v12 + 72, &v11[v12 / 8 + 9]);
        v12 += 112;
      }
      while (v14 != v12);
    }
    _OWORD v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

void *re::DynamicArray<re::AcousticSoundReductionMaterial>::copy(void *this, unint64_t a2, re::DynamicString *a3, uint64_t a4)
{
  if (!a4) {
    return this;
  }
  float v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v15 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v16) = 136315906;
    *(void *)((char *)&v16 + 4) = "copy";
    WORD6(v16) = 1024;
    HIWORD(v16) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, a2, v4, v15, v16);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_13;
  }
  if (v7 >= v8)
  {
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>((uint64_t *)a3, (uint64_t *)a3 + 14 * a4, (re::DynamicString *)(this[4] + 112 * a2));
  }
  else
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::growCapacity(this, a2 + a4);
    uint64_t v10 = v6[2];
    uint64_t v11 = (uint64_t *)((char *)a3 + 112 * (v10 - a2));
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>((uint64_t *)a3, v11, (re::DynamicString *)(v6[4] + 112 * a2));
    if (v10 - a2 != v4)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6[4] + 112 * v6[2];
      uint64_t v14 = 112 * a2 + 112 * v4 - 112 * v10;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v13 + v12), (const re::DynamicString *)&v11[v12 / 8]);
        re::DynamicArray<float>::DynamicArray(v13 + v12 + 32, &v11[v12 / 8 + 4]);
        this = (void *)re::DynamicArray<float>::DynamicArray(v13 + v12 + 72, &v11[v12 / 8 + 9]);
        v12 += 112;
      }
      while (v14 != v12);
    }
    _OWORD v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

BOOL re::ecs2::AcousticMeshStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v155 = *MEMORY[0x263EF8340];
  uint64_t v133 = 0;
  v130[1] = 0;
  uint64_t v131 = 0;
  uint64_t v129 = 0;
  v130[0] = 0;
  int v132 = 0;
  unint64_t v126 = 0;
  unint64_t v127 = 0;
  long long v125 = 0;
  int v128 = 0;
  uint64_t v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a3[1]);
  double v9 = (re *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  uint64_t v123 = *(void *)buf;
  uint64_t v124 = *(void *)&buf[8];
  uint64_t v119 = a5;
  if (*(void *)buf == a5 && *(unsigned __int16 *)&buf[8] == 0xFFFFLL)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    if ((*(_DWORD *)&buf[8] & 0xFFFF0000) == 0xFFFF0000)
    {
LABEL_121:
      if (v11 + v10)
      {
        uint64_t v91 = re::audioLogObjects(v9);
        uint64_t v92 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v91);
        if (v92) {
          goto LABEL_133;
        }
        goto LABEL_123;
      }
      goto LABEL_124;
    }
  }
  uint64_t v106 = v8;
  uint64_t v112 = a3 + 6;
  unint64_t v115 = 0;
  uint64_t v116 = a3 + 4;
  uint64_t v8 = 2048;
  uint64_t v118 = a3;
  long long v117 = a3 + 3;
  while (1)
  {
    uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v123);
    uint64_t v13 = *(void *)v12;
    if (!*(unsigned char *)(*(void *)v12 + 88)) {
      break;
    }
    if (*(unsigned char *)(*(void *)v12 + 408)) {
      goto LABEL_9;
    }
    uint64_t v14 = v120;
LABEL_103:
    double v9 = (re *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v123);
    BOOL v80 = v123 == v119 && (unsigned __int16)v124 == 0xFFFF && WORD1(v124) == 0xFFFF;
    uint64_t v120 = v14;
    if (v80)
    {
      unint64_t v11 = v127;
      uint64_t v10 = v131;
      uint64_t v8 = v106;
      goto LABEL_121;
    }
  }
  if (!*(unsigned char *)(*(void *)v12 + 408))
  {
LABEL_39:
    uint64_t v14 = *(void *)(v13 + 72);
    if (!v14)
    {
      int v43 = 0;
      unint64_t v40 = 0;
      uint64_t v14 = v120;
      uint64_t v38 = v117;
      uint64_t v39 = v118;
      goto LABEL_47;
    }
    uint64_t v38 = v117;
    uint64_t v39 = v118;
    if (*(unsigned char *)(v13 + 161))
    {
      unint64_t v40 = *(void *)(v13 + 64);
      uint64_t v114 = *(void *)(v13 + 56);
      uint8_t v113 = *(unsigned char *)(v13 + 160);
      uint64_t v5 = *(void *)(v13 + 416);
      *(void *)(v13 + 72) = 0;
      uint64_t v41 = re::audioLogObjects((re *)v12);
      uint64_t v12 = re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v41);
      if (v12)
      {
        uint64_t v81 = *re::audioLogObjects((re *)v12);
        uint64_t v12 = os_log_type_enabled(v81, OS_LOG_TYPE_INFO);
        if (v12)
        {
          *(_DWORD *)buf = 134218496;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v40;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = v114;
          _os_log_impl(&dword_233120000, v81, OS_LOG_TYPE_INFO, "AcousticMeshStateImpl::processDirtyComponents() prepared mesh update for meshID(%llu) sceneID(%llu) entityID(%llu)", buf, 0x20u);
        }
      }
      unint64_t v42 = v40 >> 8;
      unint64_t v40 = v40;
      unint64_t v115 = v42;
      int v43 = 1;
      if (!*(void *)(v13 + 72)) {
        goto LABEL_47;
      }
    }
    else
    {
      int v43 = 0;
      unint64_t v40 = 0;
      uint64_t v14 = v120;
    }
    if (!*(unsigned char *)(v13 + 408))
    {
LABEL_83:
      if (*(unsigned char *)(*(void *)(v13 + 16) + 288))
      {
        uint64_t v72 = 0;
        *(unsigned char *)(v13 + 88) = 1;
        *(unsigned char *)(v13 + 408) = 0;
        do
        {
          unint64_t v73 = re::ecs2::ComponentBucketsBase::componentHandle((re::ecs2::ComponentBucketsBase *)v39[2], v38[v72], (re::ecs2::Component *)v13);
          if (v73 != -1 && (v74 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v76 = v73;
            unint64_t v77 = v74;
            goto LABEL_101;
          }
          ++v72;
        }
        while (v72 != 4);
        unint64_t v76 = -1;
        unint64_t v77 = 0xFFFFFFFFLL;
LABEL_101:
        uint64_t v78 = v112;
        goto LABEL_102;
      }
LABEL_84:
      for (uint64_t i = 0; i != 4; ++i)
      {
        unint64_t v69 = re::ecs2::ComponentBucketsBase::componentHandle((re::ecs2::ComponentBucketsBase *)v39[2], v38[i], (re::ecs2::Component *)v13);
        BOOL v71 = v69 == -1 || (v70 & 0xFFFFFF00000000) == 0;
        if (!v71)
        {
          unint64_t v76 = v69;
          unint64_t v77 = v70;
          goto LABEL_100;
        }
      }
      unint64_t v76 = -1;
      unint64_t v77 = 0xFFFFFFFFLL;
LABEL_100:
      uint64_t v78 = v116;
LABEL_102:
      re::ecs2::ComponentBucketsBase::moveComponent((re::ecs2::ComponentBucketsBase *)v39[2], v76, v77, *v78);
      goto LABEL_103;
    }
LABEL_47:
    if (!*(unsigned char *)(v13 + 161) && !*(void *)(v13 + 80))
    {
      uint64_t v62 = *(void *)(v13 + 40);
      if (v62)
      {
        unsigned int v63 = atomic_load((unsigned int *)(v62 + 704));
        if (v63 == 2)
        {
          uint64_t v64 = *(void *)(v13 + 40);
          if (v64)
          {
            unint64_t v122 = v40;
            uint64_t v65 = *(uint64_t **)(v64 + 264);
            BOOL v71 = v65 == re::AcousticMeshAsset::assetType((re::AcousticMeshAsset *)v12);
            unint64_t v40 = v122;
            if (v71)
            {
              uint64_t v66 = re::AssetHandle::asset<re::AcousticMeshAsset>((re::AcousticMeshAsset *)(v13 + 32));
              re::ObjCObject::operator=((id *)(v13 + 80), (id *)(v66 + 752));
            }
          }
          else
          {
            re::AcousticMeshAsset::assetType((re::AcousticMeshAsset *)v12);
          }
        }
      }
    }
    if (*(void *)(v13 + 80))
    {
      int v121 = v43;
      *(void *)buf = 0;
      do
      {
        arc4random_buf(buf, 8uLL);
        uint64_t v44 = *(void *)buf;
      }
      while (*(void *)buf < 0x3E8uLL);
      *(void *)(v13 + 72) = *(void *)buf;
      if (*(unsigned char *)(v13 + 161))
      {
        if (v121)
        {
          uint64_t v45 = (re *)*(id *)(v13 + 80);
          unint64_t v46 = re::audioLogObjects(v45);
          __int16 v47 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v46);
          uint64_t v48 = v40 | (v115 << 8);
          if (v47)
          {
            loga = *re::audioLogObjects(v47);
            __int16 v47 = (re *)os_log_type_enabled(loga, OS_LOG_TYPE_INFO);
            if (v47)
            {
              *(_DWORD *)buf = 134218752;
              *(void *)&uint8_t buf[4] = v14;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v44;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&buf[24] = v48;
              *(_WORD *)&buf[32] = 2048;
              *(void *)&buf[34] = v114;
              _os_log_impl(&dword_233120000, loga, OS_LOG_TYPE_INFO, "AcousticMeshStateImpl::processDirtyComponents() prepared mesh update for oldMeshID(%llu) newMeshID(%llu) sceneID(%llu) entityID(%llu)", buf, 0x2Au);
            }
          }
          *(void *)buf = v48;
          *(void *)&buf[8] = v114;
          *(void *)&uint8_t buf[16] = v14;
          *(void *)&buf[24] = v44;
          *(void *)&buf[32] = v45;
          buf[40] = v113;
          *(_DWORD *)&buf[41] = *(_DWORD *)v135;
          *(_DWORD *)&buf[44] = *(_DWORD *)&v135[3];
          *(void *)&uint8_t buf[48] = v5;
          int v154 = 1;
          unint64_t v49 = v127;
          if (v127 >= v126)
          {
            unint64_t v50 = v127 + 1;
            if (v126 < v127 + 1)
            {
              if (v125)
              {
                unint64_t v51 = 8;
                if (v126) {
                  unint64_t v51 = 2 * v126;
                }
                if (v51 <= v50) {
                  unint64_t v52 = v127 + 1;
                }
                else {
                  unint64_t v52 = v51;
                }
                re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::setCapacity(&v125, v52);
              }
              else
              {
                re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::setCapacity(&v125, v50);
                ++v128;
              }
            }
            unint64_t v49 = v127;
          }
          uint64_t v67 = v129 + 168 * v49;
          *(unsigned char *)uint64_t v67 = 0;
          *(_DWORD *)(v67 + 160) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>,(std::__variant_detail::_Trait)1>>(v67, (uint64_t)buf);
          ++v127;
          ++v128;
          if (v154 != -1) {
            ((void (*)(uint64_t *, uint8_t *))off_26E709320[v154])(&v134, buf);
          }
        }
        else
        {
          uint64_t v107 = *(void *)(v13 + 56);
          os_log_t log = *(os_log_t *)(v13 + 64);
          long long v57 = (re *)*(id *)(v13 + 80);
          uint8_t v58 = *(unsigned char *)(v13 + 160);
          uint64_t v59 = *(void *)(v13 + 416);
          long long v60 = re::audioLogObjects(v57);
          unsigned int v61 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v60);
          if (v61)
          {
            os_log_t v104 = (os_log_t)*re::audioLogObjects(v61);
            if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v98 = *(void *)(v13 + 64);
              uint64_t v99 = *(void *)(v13 + 56);
              uint64_t v88 = v14;
              uint64_t v89 = *(void *)(v13 + 72);
              id v102 = *(id *)(v13 + 80);
              BOOL v105 = v104;
              BOOL v100 = [v102 submeshes];
              uint64_t v96 = [v100 count];
              id v97 = *(id *)(v13 + 80);
              uint64_t v90 = [v97 vertexCount];
              *(_DWORD *)buf = 134219008;
              *(void *)&uint8_t buf[4] = v89;
              uint64_t v14 = v88;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v98;
              uint64_t v38 = v117;
              uint64_t v39 = v118;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&buf[24] = v99;
              *(_WORD *)&buf[32] = 2048;
              *(void *)&buf[34] = v96;
              *(_WORD *)&buf[42] = 2048;
              *(void *)&buf[44] = v90;
              _os_log_debug_impl(&dword_233120000, v105, OS_LOG_TYPE_DEBUG, "AcousticMeshStateImpl::processDirtyComponents() prepared new ARKit mesh for meshID(%llu) sceneID(%llu) entityID(%llu) submeshes(%lu) vertices(%lu)", buf, 0x34u);
            }
          }
          *(void *)buf = log;
          *(void *)&buf[8] = v107;
          *(void *)&uint8_t buf[16] = v44;
          *(void *)&buf[24] = v57;
          buf[32] = v58;
          *(void *)&buf[40] = v59;
          int v153 = 1;
          re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::add((uint64_t)v130, (uint64_t)buf);
          if (v153 != -1) {
            ((void (*)(unsigned char *, uint8_t *))off_26E709330[v153])(v135, buf);
          }
        }
      }
      else
      {
        uint64_t v144 = 0;
        int v137 = 0;
        long long v136 = 0u;
        memset(&v135[8], 0, 32);
        int v140 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v141 = 0u;
        long long v142 = 0u;
        int v143 = 0;
        uint64_t v53 = *(void **)(v13 + 80);
        *(void *)&v135[16] = *(void *)(v13 + 72);
        *(int8x16_t *)uint64_t v135 = vextq_s8(*(int8x16_t *)(v13 + 56), *(int8x16_t *)(v13 + 56), 8uLL);
        *(void *)&v135[24] = v53;
        re::DynamicArray<re::AcousticAbsorptionMaterial>::operator=((uint64_t)&v135[32], (uint64_t *)(v13 + 168));
        re::DynamicArray<re::AcousticScatteringMaterial>::operator=((uint64_t)&v138 + 8, (uint64_t *)(v13 + 248));
        long long v54 = (re *)re::DynamicArray<re::AcousticSoundReductionMaterial>::operator=((uint64_t)&v141 + 8, (uint64_t *)(v13 + 328));
        uint64_t v55 = re::audioLogObjects(v54);
        long long v56 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v55);
        if (v56)
        {
          int v82 = *re::audioLogObjects(v56);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v83 = *(void *)(v13 + 64);
            os_log_t v103 = *(os_log_t *)(v13 + 56);
            uint64_t v84 = *(void *)(v13 + 72);
            os_log_t logb = (os_log_t)*(id *)(v13 + 80);
            uint64_t v85 = v82;
            unint64_t v108 = [logb submeshes];
            uint64_t v101 = [v108 count];
            id v86 = *(id *)(v13 + 80);
            uint64_t v87 = [v86 vertexCount];
            *(_DWORD *)buf = 134219008;
            *(void *)&uint8_t buf[4] = v84;
            uint64_t v38 = v117;
            uint64_t v39 = v118;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v83;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&buf[24] = v103;
            *(_WORD *)&buf[32] = 2048;
            *(void *)&buf[34] = v101;
            *(_WORD *)&buf[42] = 2048;
            *(void *)&buf[44] = v87;
            _os_log_debug_impl(&dword_233120000, v85, OS_LOG_TYPE_DEBUG, "AcousticMeshStateImpl::processDirtyComponents() prepared new non-ARKit mesh for meshID(%llu) sceneID(%llu) entityID(%llu) submeshes(%lu) vertices(%lu)", buf, 0x34u);
          }
        }
        *(_OWORD *)buf = *(_OWORD *)v135;
        *(void *)&uint8_t buf[16] = *(void *)&v135[16];
        *(_OWORD *)&buf[24] = *(_OWORD *)&v135[24];
        *(_OWORD *)&v135[24] = 0u;
        *(_OWORD *)&buf[40] = v136;
        long long v136 = 0u;
        ++v137;
        *(_DWORD *)&buf[56] = 1;
        long long v146 = v138;
        long long v147 = v139;
        long long v138 = 0u;
        long long v139 = 0u;
        uint64_t v152 = v144;
        long long v149 = v141;
        long long v141 = 0u;
        long long v150 = v142;
        long long v142 = 0u;
        uint64_t v144 = 0;
        ++v140;
        ++v143;
        int v148 = 1;
        int v151 = 1;
        int v153 = 0;
        re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::add((uint64_t)v130, (uint64_t)buf);
        if (v153 != -1) {
          ((void (*)(uint64_t *, uint8_t *))off_26E709330[v153])(&v134, buf);
        }
        re::ecs2::AcousticMeshComponent::resetAllAcousticMaterials((re::ecs2::AcousticMeshComponent *)v13);
        re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)&v141 + 8);
        re::DynamicArray<re::AcousticScatteringMaterial>::deinit((uint64_t)&v138 + 8);
        re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit((uint64_t)&v135[32]);
      }
    }
    if (!*(void *)(v13 + 72)) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
LABEL_9:
  uint64_t v15 = *re::audioLogObjects((re *)v12);
  uint64_t v12 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
  if (v12)
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_233120000, v15, OS_LOG_TYPE_DEBUG, "Updating the Acoustic Materials", buf, 2u);
  }
  unint64_t v16 = *(void *)(v13 + 184);
  if (!v16)
  {
LABEL_25:
    unint64_t v28 = *(void *)(v13 + 264);
    if (v28)
    {
      for (unint64_t j = 0; j < v28; ++j)
      {
        uint64_t v30 = *(void *)(v13 + 280);
        uint64_t v31 = v30 + 112 * j;
        uint64_t v33 = *(void *)(v31 + 88);
        uint64_t v32 = (unint64_t *)(v31 + 88);
        if (v33)
        {
          unint64_t v22 = 0;
          unint64_t v34 = (void *)(v30 + 112 * j + 104);
          do
          {
            float v35 = *(float *)(*v34 + 4 * v22);
            if (v35 > 0.95) {
              float v35 = 0.95;
            }
            if (v35 < 0.1) {
              float v35 = 0.1;
            }
            *(float *)(*v34 + 4 * v22) = v35;
            uint64_t v36 = (id)*re::audioLogObjects((re *)v12);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v26 = *v32;
              if (*v32 <= v22) {
                goto LABEL_132;
              }
              double v37 = *(float *)(*v34 + 4 * v22);
              *(_DWORD *)buf = 134218496;
              *(double *)&uint8_t buf[4] = v37;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = 0x3FB99999A0000000;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&buf[24] = 0x3FEE666660000000;
              _os_log_debug_impl(&dword_233120000, v36, OS_LOG_TYPE_DEBUG, "Scattering coefficient set to %f with clampMin set to %f, clampMax set to %f", buf, 0x20u);
            }

            ++v22;
          }
          while (*v32 > v22);
          unint64_t v28 = *(void *)(v13 + 264);
        }
      }
    }
    goto LABEL_39;
  }
  uint64_t v17 = 0;
  while (1)
  {
    uint64_t v18 = *(void *)(v13 + 200);
    uint64_t v19 = v18 + 112 * v17;
    uint64_t v21 = *(void *)(v19 + 88);
    uint64_t v20 = (unint64_t *)(v19 + 88);
    if (v21) {
      break;
    }
LABEL_24:
    if (v16 <= ++v17) {
      goto LABEL_25;
    }
  }
  unint64_t v22 = 0;
  uint64_t v23 = (void *)(v18 + 112 * v17 + 104);
  while (2)
  {
    float v24 = *(float *)(*v23 + 4 * v22);
    if (v24 > 0.95) {
      float v24 = 0.95;
    }
    if (v24 < 0.01) {
      float v24 = 0.01;
    }
    *(float *)(*v23 + 4 * v22) = v24;
    uint64_t v25 = (id)*re::audioLogObjects((re *)v12);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
LABEL_20:

      if (*v20 <= ++v22)
      {
        unint64_t v16 = *(void *)(v13 + 184);
        goto LABEL_24;
      }
      continue;
    }
    break;
  }
  unint64_t v26 = *v20;
  if (*v20 > v22)
  {
    double v27 = *(float *)(*v23 + 4 * v22);
    *(_DWORD *)buf = 134218496;
    *(double *)&uint8_t buf[4] = v27;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = 0x3F847AE140000000;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&buf[24] = 0x3FEE666660000000;
    _os_log_debug_impl(&dword_233120000, v25, OS_LOG_TYPE_DEBUG, "Absorption coefficient set to %f with clampMin set to %f, clampMax set to %f", buf, 0x20u);
    goto LABEL_20;
  }
  uint64_t v134 = 0;
  long long v146 = 0u;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uint64_t v135 = 136315906;
  *(void *)&v135[4] = "operator[]";
  *(_WORD *)&v135[12] = 1024;
  *(_DWORD *)&v135[14] = 789;
  *(_WORD *)&v135[18] = 2048;
  *(void *)&v135[20] = v22;
  *(_WORD *)&v135[28] = 2048;
  *(void *)&v135[30] = v26;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_132:
  uint64_t v134 = 0;
  long long v146 = 0u;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uint64_t v135 = 136315906;
  *(void *)&v135[4] = "operator[]";
  *(_WORD *)&v135[12] = 1024;
  *(_DWORD *)&v135[14] = 789;
  *(_WORD *)&v135[18] = 2048;
  *(void *)&v135[20] = v22;
  *(_WORD *)&v135[28] = 2048;
  *(void *)&v135[30] = v26;
  _os_log_send_and_compose_impl();
  uint64_t v92 = (re *)_os_crash_msg();
  __break(1u);
LABEL_133:
  id v95 = *re::audioLogObjects(v92);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = v127;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v131;
    _os_log_debug_impl(&dword_233120000, v95, OS_LOG_TYPE_DEBUG, "AcousticMeshStateImpl::processDirtyComponents() prepared to update %lu and add %lu meshes", buf, 0x16u);
  }
LABEL_123:
  unint64_t v11 = v127;
LABEL_124:
  if (v11)
  {
    re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::DynamicArray((uint64_t)buf, (uint64_t *)&v125);
    *(_DWORD *)&buf[40] = 2;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v8 + 232))(v8, buf);
    if (*(_DWORD *)&buf[40] != -1) {
      ((void (*)(unsigned char *, uint8_t *))off_26E709350[*(unsigned int *)&buf[40]])(v135, buf);
    }
  }
  if (v131)
  {
    re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::DynamicArray((uint64_t)buf, v130);
    *(_DWORD *)&buf[40] = 1;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v8 + 232))(v8, buf);
    if (*(_DWORD *)&buf[40] != -1) {
      ((void (*)(unsigned char *, uint8_t *))off_26E709350[*(unsigned int *)&buf[40]])(v135, buf);
    }
  }
  BOOL v93 = *(_DWORD *)(v119 + 40) != 0;
  re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::deinit((uint64_t)&v125);
  re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::deinit((uint64_t)v130);
  return v93;
}

uint64_t re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32) + 160 * v5;
  *(unsigned char *)uint64_t v11 = 0;
  *(_DWORD *)(v11 + 152) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>>(v11, a2);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    unint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::AcousticMeshStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v36, a5, 0);
  __n128 v34 = v36;
  if (v36.n128_u64[0] != a5 || v36.n128_u16[4] != 0xFFFFLL || (v36.n128_u32[2] & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v34);
      uint64_t v11 = *(void *)v10;
      if (*(unsigned char *)(*(void *)v10 + 88) && !*(unsigned char *)(v11 + 408))
      {
        re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v11 + 16), (const re::ecs2::Entity *)1, &v36);
        if (!*(unsigned char *)(v11 + 89) || !re::areAlmostEqual<float>((float *)&v36, (float *)(v11 + 96)))
        {
          __n128 v21 = v37;
          *(__n128 *)(v11 + 96) = v36;
          *(__n128 *)(v11 + 112) = v21;
          __n128 v22 = v39;
          *(__n128 *)(v11 + 128) = v38;
          *(__n128 *)(v11 + 144) = v22;
          float32x4_t v23 = *(float32x4_t *)(v11 + 112);
          float32x4_t v24 = *(float32x4_t *)(v11 + 128);
          float32x4_t v25 = *(float32x4_t *)(v11 + 144);
          v35[0] = *(float32x4_t *)(v11 + 96);
          v35[1] = v23;
          void v35[2] = v24;
          v35[3] = v25;
          re::audio::cleanUpTransformForPHASE(v35, v18, v19, v20, (uint64_t)&v36);
          __n128 v31 = v37;
          __n128 v32 = v36;
          __n128 v30 = v38;
          __n128 v33 = v39;
          uint64_t v26 = *(void *)(v11 + 16);
          do
          {
            uint64_t v27 = v26;
            uint64_t v26 = *(void *)(v26 + 24);
          }
          while (v26);
          uint64_t v28 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), *(void *)(v27 + 16));
          (*(void (**)(__n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))(*(void *)v28 + 272))(v32, v31, v30, v33, *(__n128 *)(v11 + 96), *(__n128 *)(v11 + 112), *(__n128 *)(v11 + 128), *(__n128 *)(v11 + 144));
          *(unsigned char *)(v11 + 89) = 1;
        }
      }
      else
      {
        for (uint64_t i = 24; i != 56; i += 8)
        {
          unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), *(void *)(a3 + i), (re::ecs2::Component *)v11);
          if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v16 = v13;
            unint64_t v17 = v14;
            goto LABEL_18;
          }
        }
        unint64_t v16 = -1;
        unint64_t v17 = 0xFFFFFFFFLL;
LABEL_18:
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::setComponentState(a3, v16, v17);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v34);
    }
    while (v34.n128_u64[0] != a5 || v34.n128_u16[4] != 0xFFFF || v34.n128_u16[5] != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AcousticMeshSystem::willAddSystemToECSService(re::ecs2::AcousticMeshSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((void *)this + 46) = result;
  *((void *)this + 15) = result;
  return result;
}

uint64_t re::ecs2::AcousticMeshSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + re::DynamicArray<re::AcousticSoundReductionMaterial>::clear((uint64_t)this + 368) = 0;
  *(void *)(this + 120) = 0;
  return this;
}

uint64_t re::ecs2::AcousticMeshSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v48 = a2;
  if (!a2) {
    return this;
  }
  uint64_t v2 = this;
  float v3 = (_DWORD *)re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(void *)&long long v50 = v2;
  *((void *)&v50 + 1) = re::ecs2::AcousticMeshSystem::activateComponents;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v3 + 54, (uint64_t)&v50);
  *(void *)&long long v50 = v2;
  *((void *)&v50 + 1) = re::ecs2::AcousticMeshSystem::deactivateComponents;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v3 + 76, (uint64_t)&v50);
  *(void *)&long long v50 = v2;
  *((void *)&v50 + 1) = re::ecs2::AcousticMeshSystem::deactivateComponents;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v3 + 98, (uint64_t)&v50);
  std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__emplace_unique_key_args<re::ecs2::Scene *,re::ecs2::Scene * const&>(v2 + 384, &v48, &v48);
  uint64_t v4 = (uint64_t)v48;
  v49[0] = (uint64_t)v48;
  unint64_t v5 = *(void *)(v2 + 256);
  int v6 = *(_DWORD *)(v2 + 264);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(v2 + 272);
    }
    else {
      uint64_t v7 = *(void **)(v2 + 280);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_18;
      }
    }
    goto LABEL_17;
  }
  if (v6)
  {
    BOOL v8 = (uint64_t *)(v2 + 272);
    if (!v5) {
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v8 = *(uint64_t **)(v2 + 280);
    if (!v5) {
      goto LABEL_18;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_17:
    *(void *)&long long v50 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v2 + 248, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v2 + 128, v50);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::init(v13, v2 + 128, v4);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v2 + 184), v49, (uint64_t *)&v50);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v2 + 248, v50);
    uint64_t v14 = v2 + 296;
    unint64_t v15 = v50;
    goto LABEL_50;
  }
LABEL_18:
  long long v57 = 0u;
  long long v50 = 0u;
  *(void *)&long long v51 = 0;
  *((void *)&v51 + 1) = -1;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v54 = 0;
  uint64_t v55 = 1;
  long long v56 = 0uLL;
  unint64_t v16 = *(void *)(v2 + 168);
  *(void *)&long long v57 = 0;
  unint64_t v17 = *(void *)(v2 + 136);
  DWORD2(v57) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,4ul>::setBucketsCapacity((uint64_t *)(v2 + 128), (v16 + 4) >> 2);
    unint64_t v17 = *(void *)(v2 + 136);
  }
  if (v17 <= v16 >> 2)
  {
    v49[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v16 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  if (*(unsigned char *)(v2 + 144)) {
    uint64_t v18 = v2 + 152;
  }
  else {
    uint64_t v18 = *(void *)(v2 + 160);
  }
  uint64_t v19 = *(void *)(v18 + 8 * (v16 >> 2));
  ++*(void *)(v2 + 168);
  ++*(_DWORD *)(v2 + 176);
  uint64_t v20 = v19 + 112 * (v16 & 3);
  long long v21 = v50;
  long long v22 = v51;
  long long v23 = v52;
  *(void *)(v20 + 48) = v53;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)uint64_t v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v53 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v50);
  uint64_t v25 = *(void *)(v2 + 168);
  if (!v25)
  {
LABEL_73:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v2 + 128, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::init(v26, v2 + 128, v49[0]);
  *(void *)&v66[0] = *(void *)(v2 + 168) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v2 + 184), v49, (uint64_t *)v66);
  unint64_t v27 = *(void *)(v2 + 168);
  unint64_t v28 = *(void *)(v2 + 288);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(v2 + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 288) = v27;
  *(void *)&long long v50 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v2 + 248), v29, &v50);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(v2 + 288) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(v2 + 264)) {
      uint64_t v32 = v2 + 272;
    }
    else {
      uint64_t v32 = *(void *)(v2 + 280);
    }
    *(void *)(v32 + 8 * *(void *)(v2 + 256) - 8) &= v30;
  }
  unint64_t v33 = *(void *)(v2 + 168);
  unint64_t v34 = *(void *)(v2 + 336);
  if ((v33 & 0x3F) != 0) {
    unint64_t v35 = (v33 >> 6) + 1;
  }
  else {
    unint64_t v35 = v33 >> 6;
  }
  *(void *)(v2 + 336) = v33;
  *(void *)&long long v50 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v2 + 296), v35, &v50);
  if (v33 && v34 > v33)
  {
    uint64_t v36 = 63;
    uint64_t v37 = *(void *)(v2 + 336) & 0x3FLL;
    if (v37 && v37 != 63) {
      uint64_t v36 = ~(-1 << v37);
    }
    if (*(unsigned char *)(v2 + 312)) {
      uint64_t v38 = v2 + 320;
    }
    else {
      uint64_t v38 = *(void *)(v2 + 328);
    }
    *(void *)(v38 + 8 * *(void *)(v2 + 304) - 8) &= v36;
  }
  unint64_t v15 = *(void *)&v66[0];
  uint64_t v14 = v2 + 296;
LABEL_50:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(v2 + 360)) {
    goto LABEL_68;
  }
  unint64_t v39 = *(void *)(v2 + 304);
  int v40 = *(_DWORD *)(v2 + 312);
  if (v39 >= 0xB)
  {
    if (v40) {
      uint64_t v41 = (void *)(v2 + 320);
    }
    else {
      uint64_t v41 = *(void **)(v2 + 328);
    }
    uint64_t v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43) {
        goto LABEL_68;
      }
    }
    goto LABEL_66;
  }
  if (v40)
  {
    unint64_t v42 = (uint64_t *)(v2 + 320);
    if (!v39) {
      goto LABEL_68;
    }
  }
  else
  {
    unint64_t v42 = *(uint64_t **)(v2 + 328);
    if (!v39) {
      goto LABEL_68;
    }
  }
  uint64_t v44 = 0;
  uint64_t v45 = 8 * v39;
  do
  {
    uint64_t v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
  {
LABEL_66:
    __int16 v47 = *(re::ecs2::System **)(v2 + 344);
    if (!*((unsigned char *)v47 + 86)) {
      re::ecs2::System::queueToRun(v47, 0.0);
    }
  }
LABEL_68:
  this = *(void *)(v2 + 368);
  if (this)
  {
    this = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(void *)this + 16))(this, v48);
    if (this) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 32))(this, 770);
    }
  }
  return this;
}

uint64_t ___ZN2re4ecs218AcousticMeshSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = (re *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(void *)(a1 + 32) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v3 = *((void *)v2 + 3);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)*((void *)v2 + 5);
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = *re::audioLogObjects(v2);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = v7;
        uint64_t v10 = *(void *)(*(void *)(v8 + 104) + 280);
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = *(void *)(v6 + 16);
        uint64_t v13 = *(void *)(v12 + 280);
        uint64_t v14 = *(void *)(v12 + 296);
        uint64_t v15 = *(void *)(v6 + 72);
        *(_DWORD *)buf = 136316162;
        uint64_t v18 = v10;
        __int16 v19 = 2048;
        uint64_t v20 = v11;
        __int16 v21 = 2080;
        uint64_t v22 = v13;
        __int16 v23 = 2048;
        uint64_t v24 = v14;
        __int16 v25 = 2048;
        uint64_t v26 = v15;
        _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "[AcousticMeshSystem::ServiceResetCallback] deregistering geometry for scene(%s, %llu) entity(%s, %llu) meshAssetID(%llu)", buf, 0x34u);
      }
      *(void *)(v6 + 72) = 0;
      *(_WORD *)(v6 + 88) = 0;
      uint64_t v2 = (re *)re::ecs2::Component::markDirty((void *)v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), 3, *(void *)(a1 + 40), 1);
}

void *re::ecs2::AcousticMeshSystem::willRemoveSceneFromECSService(void *this, re::ecs2::Scene *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v16 = a2;
  if (a2)
  {
    uint64_t v2 = this;
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(void *)&long long v17 = v2;
    *((void *)&v17 + 1) = re::ecs2::AcousticMeshSystem::activateComponents;
    uint64_t v18 = 0;
    __int16 v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 216, &v17);
    *(void *)&long long v17 = v2;
    *((void *)&v17 + 1) = re::ecs2::AcousticMeshSystem::deactivateComponents;
    uint64_t v18 = 0;
    __int16 v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 304, &v17);
    *(void *)&long long v17 = v2;
    *((void *)&v17 + 1) = re::ecs2::AcousticMeshSystem::deactivateComponents;
    uint64_t v18 = 0;
    __int16 v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v17);
    std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__erase_unique<re::ecs2::Scene *>(v2 + 48, &v16);
    *(void *)&long long v17 = v16;
    uint64_t v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v2 + 23, &v17);
    if (v4 != -1)
    {
      uint64_t v5 = v2[24] + 16 * v4;
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)(v2 + 31), *(void *)(v5 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)(v2 + 37), *(void *)(v5 + 8));
      uint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)(v2 + 16), *(void *)(v5 + 8));
      if (*v6)
      {
        uint64_t v7 = v6;
        *uint64_t v6 = 0;
        uint64_t v8 = v6 + 1;
        uint64_t v9 = *(void *)(v6[1] + 288);
        if (v9)
        {
          uint64_t v10 = v6[12];
          if (v10)
          {
            for (unint64_t i = 0; i != v10; ++i)
            {
              uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
              re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
        uint64_t v13 = 0;
        uint64_t v14 = v7 + 3;
        do
        {
          uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
          if (*(void *)v15) {
            re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
          }
          v14[v13++] = -1;
        }
        while (v13 != 4);
        void *v8 = 0;
        v8[1] = 0;
      }
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v2 + 23, &v17);
    }
    this = (void *)v2[46];
    if (this)
    {
      this = (void *)(*(uint64_t (**)(void *, re::ecs2::Scene *))(*this + 16))(this, v16);
      if (this) {
        return (void *)(*(uint64_t (**)(void *, uint64_t, void))(*this + 40))(this, 770, *(void *)(*((void *)v16 + 13) + 272) >> 1);
      }
    }
  }
  return this;
}

uint64_t re::ecs2::AcousticMeshSystem::activateComponents(BOOL a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t v4 = a3;
    uint64_t v5 = &a3[a4];
    do
    {
      uint64_t v6 = *v4;
      *(unsigned char *)(v6 + 89) = 0;
      uint64_t v7 = *(void *)(v6 + 16);
      *(void *)(v6 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(void *)(v7 + 296);
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = *(void *)(v7 + 24);
      }
      while (v7);
      *(void *)(v6 + 64) = *(void *)(*(void *)(*(void *)(v8 + 16) + 104) + 272) >> 1;
      uint64_t v9 = *re::audioLogObjects((re *)a1);
      a1 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if (a1)
      {
        uint64_t v10 = *(void *)(v6 + 16);
        uint64_t v11 = v9;
        do
        {
          uint64_t v12 = v10;
          uint64_t v10 = *(void *)(v10 + 24);
        }
        while (v10);
        uint64_t v13 = *(void *)(*(void *)(*(void *)(v12 + 16) + 104) + 280);
        uint64_t v14 = *(void *)(*(void *)(v6 + 16) + 280);
        uint64_t v16 = *(void *)(v6 + 56);
        uint64_t v15 = *(void *)(v6 + 64);
        *(_DWORD *)buf = 136315906;
        uint64_t v19 = v13;
        __int16 v20 = 2048;
        uint64_t v21 = v15;
        __int16 v22 = 2080;
        uint64_t v23 = v14;
        __int16 v24 = 2048;
        uint64_t v25 = v16;
        _os_log_debug_impl(&dword_233120000, v11, OS_LOG_TYPE_DEBUG, "[AcousticMeshSystem::activateComponents] component for scene(%s, %llu) entity(%s, %llu)", buf, 0x2Au);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t re::ecs2::AcousticMeshSystem::deactivateComponents(unint64_t prime, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v92 = *MEMORY[0x263EF8340];
  if (*(void *)(prime + 368)) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    goto LABEL_127;
  }
  unint64_t v7 = prime;
  *(_OWORD *)__p = 0u;
  long long v80 = 0u;
  uint64_t v75 = a4;
  float v81 = 1.0;
  *(_OWORD *)unint64_t v76 = 0u;
  *(_OWORD *)unint64_t v77 = 0u;
  int v78 = 1065353216;
  uint64_t v8 = &a3[a4];
  uint64_t v9 = a3;
  do
  {
    uint64_t v10 = *v9;
    uint64_t v11 = *(void *)(*v9 + 72);
    if (!v11) {
      goto LABEL_96;
    }
    LOBYTE(v91) = 0;
    v90[24] = 0;
    uint64_t v12 = *(void *)(v10 + 56);
    unint64_t v13 = *(void *)(v10 + 64);
    *(void *)uint64_t v90 = v13;
    *(void *)&v90[8] = v12;
    *(void *)&v90[16] = v11;
    if (*(unsigned char *)(v10 + 161))
    {
      *(void *)&v90[24] = *(void *)(v10 + 416);
      LOBYTE(v91) = 1;
    }
    unint64_t v14 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        unint64_t v4 = v13;
        if (__p[1] <= (void *)v13) {
          unint64_t v4 = v13 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v4 = ((unint64_t)__p[1] - 1) & v13;
      }
      uint64_t v16 = (unint64_t *)*((void *)__p[0] + v4);
      if (v16)
      {
        for (unint64_t i = *v16; i; unint64_t i = *(void *)i)
        {
          unint64_t v18 = *(void *)(i + 8);
          if (v18 == v13)
          {
            if (*(void *)(i + 16) == v13) {
              goto LABEL_81;
            }
          }
          else
          {
            if (v15.u32[0] > 1uLL)
            {
              if ((void *)v18 >= __p[1]) {
                v18 %= (unint64_t)__p[1];
              }
            }
            else
            {
              v18 &= (unint64_t)__p[1] - 1;
            }
            if (v18 != v4) {
              break;
            }
          }
        }
      }
    }
    prime = (unint64_t)operator new(0x40uLL);
    unint64_t i = prime;
    *(void *)prime = 0;
    *(void *)(prime + 8) = v13;
    *(void *)(prime + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
    *(void *)(prime + 16) = v13;
    *(void *)(prime + 24) = 0;
    *(void *)(prime + 32) = 0;
    *(void *)(prime + 40) = 0;
    *(_DWORD *)(prime + 48) = 0;
    float v19 = (float)(unint64_t)(*((void *)&v80 + 1) + 1);
    if (!v14 || (float)(v81 * (float)v14) < v19)
    {
      BOOL v20 = (v14 & (v14 - 1)) != 0;
      if (v14 < 3) {
        BOOL v20 = 1;
      }
      unint64_t v21 = v20 | (2 * v14);
      unint64_t v22 = vcvtps_u32_f32(v19 / v81);
      if (v21 <= v22) {
        size_t v23 = v22;
      }
      else {
        size_t v23 = v21;
      }
      if (v23 == 1)
      {
        size_t v23 = 2;
      }
      else if ((v23 & (v23 - 1)) != 0)
      {
        prime = std::__next_prime(v23);
        size_t v23 = prime;
        unint64_t v14 = (unint64_t)__p[1];
      }
      if (v23 > v14) {
        goto LABEL_37;
      }
      if (v23 < v14)
      {
        prime = vcvtps_u32_f32((float)*((unint64_t *)&v80 + 1) / v81);
        if (v14 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
        {
          prime = std::__next_prime(prime);
        }
        else
        {
          uint64_t v30 = 1 << -(char)__clz(prime - 1);
          if (prime >= 2) {
            prime = v30;
          }
        }
        if (v23 <= prime) {
          size_t v23 = prime;
        }
        if (v23 >= v14)
        {
          unint64_t v14 = (unint64_t)__p[1];
        }
        else
        {
          if (v23)
          {
LABEL_37:
            if (v23 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            __int16 v24 = operator new(8 * v23);
            prime = (unint64_t)__p[0];
            __p[0] = v24;
            if (prime) {
              operator delete((void *)prime);
            }
            uint64_t v25 = 0;
            __p[1] = (void *)v23;
            do
              *((void *)__p[0] + v25++) = 0;
            while (v23 != v25);
            uint64_t v26 = (void **)v80;
            if ((void)v80)
            {
              size_t v27 = *(void *)(v80 + 8);
              uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
              v28.i16[0] = vaddlv_u8(v28);
              if (v28.u32[0] > 1uLL)
              {
                if (v27 >= v23) {
                  v27 %= v23;
                }
              }
              else
              {
                v27 &= v23 - 1;
              }
              *((void *)__p[0] + v27) = &v80;
              for (j = *v26; j; size_t v27 = v32)
              {
                size_t v32 = j[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v32 >= v23) {
                    v32 %= v23;
                  }
                }
                else
                {
                  v32 &= v23 - 1;
                }
                if (v32 != v27)
                {
                  if (!*((void *)__p[0] + v32))
                  {
                    *((void *)__p[0] + v32) = v26;
                    goto LABEL_62;
                  }
                  *uint64_t v26 = (void *)*j;
                  *unint64_t j = **((void **)__p[0] + v32);
                  **((void **)__p[0] + v32) = j;
                  unint64_t j = v26;
                }
                size_t v32 = v27;
LABEL_62:
                uint64_t v26 = (void **)j;
                unint64_t j = (void *)*j;
              }
            }
            unint64_t v14 = v23;
            goto LABEL_66;
          }
          prime = (unint64_t)__p[0];
          __p[0] = 0;
          if (prime) {
            operator delete((void *)prime);
          }
          unint64_t v14 = 0;
          __p[1] = 0;
        }
      }
LABEL_66:
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v14 <= v13) {
          unint64_t v4 = v13 % v14;
        }
        else {
          unint64_t v4 = v13;
        }
      }
      else
      {
        unint64_t v4 = (v14 - 1) & v13;
      }
    }
    unint64_t v33 = __p[0];
    unint64_t v34 = (unint64_t *)*((void *)__p[0] + v4);
    if (v34)
    {
      *(void *)unint64_t i = *v34;
    }
    else
    {
      *(void *)unint64_t i = v80;
      *(void *)&long long v80 = i;
      v33[v4] = &v80;
      if (!*(void *)i) {
        goto LABEL_80;
      }
      unint64_t v35 = *(void *)(*(void *)i + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v35 >= v14) {
          v35 %= v14;
        }
      }
      else
      {
        v35 &= v14 - 1;
      }
      unint64_t v34 = (unint64_t *)((char *)__p[0] + 8 * v35);
    }
    *unint64_t v34 = i;
LABEL_80:
    ++*((void *)&v80 + 1);
LABEL_81:
    unint64_t v36 = *(void *)(i + 32);
    unint64_t v37 = *(void *)(i + 40);
    if (v37 >= v36)
    {
      unint64_t v4 = v37 + 1;
      if (v36 < v37 + 1)
      {
        if (*(void *)(i + 24))
        {
          uint64_t v38 = 2 * v36;
          BOOL v6 = v36 == 0;
          unint64_t v39 = 8;
          if (!v6) {
            unint64_t v39 = v38;
          }
          if (v39 <= v4) {
            unint64_t v40 = v4;
          }
          else {
            unint64_t v40 = v39;
          }
          prime = (unint64_t)re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((void *)(i + 24), v40);
        }
        else
        {
          prime = (unint64_t)re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((void *)(i + 24), v4);
          ++*(_DWORD *)(i + 48);
        }
      }
      unint64_t v37 = *(void *)(i + 40);
    }
    uint64_t v41 = *(void *)(i + 56) + 40 * v37;
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v90;
    *(_OWORD *)(v41 + 16) = *(_OWORD *)&v90[16];
    *(void *)(v41 + 32) = v91;
    ++*(void *)(i + 40);
    ++*(_DWORD *)(i + 48);
    unint64_t v42 = re::audioLogObjects((re *)prime);
    uint64_t v43 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v42);
    if (v43)
    {
      __int16 v47 = *re::audioLogObjects(v43);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v49 = *(void *)(v10 + 64);
        uint64_t v48 = *(void *)(v10 + 72);
        uint64_t v50 = *(void *)(v10 + 56);
        *(_DWORD *)buf = 134218496;
        uint64_t v84 = v48;
        __int16 v85 = 2048;
        uint64_t v86 = v49;
        __int16 v87 = 2048;
        uint64_t v88 = v50;
        _os_log_debug_impl(&dword_233120000, v47, OS_LOG_TYPE_DEBUG, "AcousticMeshSystem::deactivateComponents: component mesh(%llu) for scene(%llu) entity(%llu)", buf, 0x20u);
      }
    }
    uint64_t v44 = *(void *)(v10 + 16);
    do
    {
      uint64_t v45 = v44;
      uint64_t v44 = *(void *)(v44 + 24);
    }
    while (v44);
    uint64_t v46 = *(void *)(v45 + 16);
    prime = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((float *)v76, *(unint64_t *)v90, v90);
    *(void *)(prime + 24) = v46;
LABEL_96:
    ++v9;
  }
  while (v9 != v8);
  if (*((void *)&v80 + 1))
  {
    long long v51 = re::audioLogObjects((re *)prime);
    long long v52 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v51);
    if (v52)
    {
      unint64_t v74 = *re::audioLogObjects(v52);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v90 = 134217984;
        *(void *)&v90[4] = *((void *)&v80 + 1);
        _os_log_debug_impl(&dword_233120000, v74, OS_LOG_TYPE_DEBUG, "AcousticMeshSystem::deactivateComponents: adding %lu meshes for removal", v90, 0xCu);
      }
    }
    for (uint64_t k = (void *)v80; k; uint64_t k = (void *)*k)
    {
      *(void *)uint64_t v90 = k[2];
      re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray((uint64_t)&v90[8], k + 3);
      uint64_t v54 = *(void *)(v7 + 368);
      uint64_t v55 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((float *)v76, *(unint64_t *)v90, v90);
      uint64_t v56 = (*(uint64_t (**)(uint64_t, void))(*(void *)v54 + 16))(v54, v55[3]);
      re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray((uint64_t)buf, (uint64_t *)&v90[8]);
      int v89 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v56 + 232))(v56, buf);
      if (v89 != -1) {
        ((void (*)(char *, uint8_t *))off_26E709350[v89])(&v82, buf);
      }
      if (*(void *)&v90[8] && *((void *)&v91 + 1)) {
        (*(void (**)(void))(**(void **)&v90[8] + 40))();
      }
    }
  }
  long long v57 = v77[0];
  if (v77[0])
  {
    do
    {
      int v58 = (void *)*v57;
      operator delete(v57);
      long long v57 = v58;
    }
    while (v58);
  }
  uint64_t v59 = v76[0];
  v76[0] = 0;
  if (v59) {
    operator delete(v59);
  }
  __int16 v60 = (void *)v80;
  if ((void)v80)
  {
    do
    {
      int v61 = (void *)*v60;
      re::DynamicArray<unsigned long>::deinit((uint64_t)(v60 + 3));
      operator delete(v60);
      __int16 v60 = v61;
    }
    while (v61);
  }
  prime = (unint64_t)__p[0];
  __p[0] = 0;
  if (prime) {
    operator delete((void *)prime);
  }
  a4 = v75;
LABEL_127:
  if (a4)
  {
    __int16 v62 = &v5[a4];
    do
    {
      uint64_t v63 = *v5;
      __int16 v64 = re::audioLogObjects((re *)prime);
      prime = re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v64);
      if (prime)
      {
        unint64_t v65 = *re::audioLogObjects((re *)prime);
        prime = os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG);
        if (prime)
        {
          uint64_t v66 = *(void *)(v63 + 16);
          uint64_t v67 = v65;
          do
          {
            uint64_t v68 = v66;
            uint64_t v66 = *(void *)(v66 + 24);
          }
          while (v66);
          uint64_t v69 = *(void *)(*(void *)(*(void *)(v68 + 16) + 104) + 280);
          uint64_t v70 = *(void *)(*(void *)(v63 + 16) + 280);
          uint64_t v72 = *(void *)(v63 + 56);
          uint64_t v71 = *(void *)(v63 + 64);
          *(_DWORD *)uint64_t v90 = 136315906;
          *(void *)&v90[4] = v69;
          *(_WORD *)&v90[12] = 2048;
          *(void *)&v90[14] = v71;
          *(_WORD *)&v90[22] = 2080;
          *(void *)&v90[24] = v70;
          LOWORD(v91) = 2048;
          *(void *)((char *)&v91 + 2) = v72;
          _os_log_debug_impl(&dword_233120000, v67, OS_LOG_TYPE_DEBUG, "[AcousticMeshSystem::deactivateComponents] component for scene(%s, %llu) entity(%s, %llu)", v90, 0x2Au);
        }
      }
      *(_WORD *)(v63 + 88) = 0;
      ++v5;
      *(void *)(v63 + 64) = 0;
      *(void *)(v63 + 72) = 0;
      *(void *)(v63 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
    }
    while (v5 != v62);
  }
  return 0;
}

uint64_t re::ecs2::AcousticMeshSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v36[0] = a3;
  v36[1] = a4;
  if (a2)
  {
    uint64_t v4 = result;
    if (*(void *)(result + 368))
    {
      uint64_t v6 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v6) {
        unint64_t v7 = *(void *)(v6 + 24);
      }
      else {
        unint64_t v7 = 0;
      }
      uint64_t v8 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v35);
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v8);
      if (isStatisticCollectionEnabled)
      {
        uint64_t v10 = re::profilerThreadContext(isStatisticCollectionEnabled);
        uint64_t v11 = *(int64x2_t **)(v10 + 152);
        if (v11)
        {
          unint64_t v12 = v11[588].u64[0];
          if (v12 >= v7) {
            unint64_t v12 = v7;
          }
          v11[588].i64[0] = v12;
          unint64_t v13 = v11[588].u64[1];
          if (v13 <= v7) {
            unint64_t v13 = v7;
          }
          v11[588].i64[1] = v13;
          int64x2_t v14 = vdupq_n_s64(1uLL);
          v14.i64[0] = v7;
          v11[589] = vaddq_s64(v11[589], v14);
          *(unsigned char *)(v10 + 184) = 0;
        }
      }
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34, 3057, v4);
      uint64_t v37 = a2;
      unint64_t v15 = *(void *)(*(void *)(v4 + 192)
                      + 16
                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 184), &v37)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v4 + 296, v15);
      uint64_t v16 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4 + 128, v15);
      uint64_t v17 = *(void *)(*v16 + 224);
      unint64_t v18 = v16[3];
      unint64_t v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v18);
      if (*(_DWORD *)(v19 + 40)) {
        int v20 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v17 + 24))(v17, v36, v16, v18, v19, 0);
      }
      else {
        int v20 = 0;
      }
      unint64_t v21 = v16[5];
      unint64_t v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v21);
      if (*(_DWORD *)(v22 + 40)) {
        v20 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v17 + 32))(v17, v36, v16, v21, v22, 0);
      }
      unint64_t v23 = v16[6];
      unint64_t v24 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v23);
      if (*(_DWORD *)(v24 + 40))
      {
        if (((v20 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v17 + 40))(v17, v36, v16, v23, v24, 0)) & 1) == 0)goto LABEL_21; {
      }
        }
      else if (!v20)
      {
LABEL_21:
        if (*(unsigned char *)(v4 + 360))
        {
          unint64_t v25 = *(void *)(v4 + 304);
          int v26 = *(_DWORD *)(v4 + 312);
          if (v25 >= 0xB)
          {
            if (v26) {
              size_t v27 = (void *)(v4 + 320);
            }
            else {
              size_t v27 = *(void **)(v4 + 328);
            }
            uint64_t v29 = 8 * v25;
            while (!*v27)
            {
              ++v27;
              v29 -= 8;
              if (!v29) {
                goto LABEL_41;
              }
            }
LABEL_39:
            unint64_t v33 = *(re::ecs2::System **)(v4 + 344);
            if (!*((unsigned char *)v33 + 86)) {
              re::ecs2::System::queueToRun(v33, 0.0);
            }
            goto LABEL_41;
          }
          if ((v26 & 1) == 0)
          {
            uint8x8_t v28 = *(uint64_t **)(v4 + 328);
            if (!v25) {
              goto LABEL_41;
            }
LABEL_36:
            uint64_t v30 = 0;
            uint64_t v31 = 8 * v25;
            do
            {
              uint64_t v32 = *v28++;
              v30 |= v32;
              v31 -= 8;
            }
            while (v31);
            if (!v30) {
              goto LABEL_41;
            }
            goto LABEL_39;
          }
          uint8x8_t v28 = (uint64_t *)(v4 + 320);
          if (v25) {
            goto LABEL_36;
          }
        }
LABEL_41:
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v35);
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 296, v15);
      goto LABEL_21;
    }
  }
  return result;
}

void re::ecs2::AcousticMeshSystem::~AcousticMeshSystem(re::ecs2::AcousticMeshSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 384);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AcousticMeshSystem::typeInfo(re::ecs2::AcousticMeshSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticMeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AcousticMeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AcousticMeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AcousticMeshSystem>, 0);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AcousticMeshComponent>::dependsOnComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AcousticMeshComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AcousticMeshComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 120);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit(a2 + 80);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 32);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 112);
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit(a2 + 72);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 160);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E709320[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 160) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 160);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E709340[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 160) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v4;
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a3 + 32) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  uint64_t v6 = *(void *)(a3 + 48);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a2 + 48) = v6;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a2 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(void *)(a3 + 56);
  *(void *)(a3 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(void *)(a3 + 72) = v8;
  ++*(_DWORD *)(a3 + 64);
  ++*(_DWORD *)(a2 + 64);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 104) = 0;
  uint64_t v9 = *(void *)(a3 + 88);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(void *)(a2 + 88) = v9;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a3 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = *(void *)(a3 + 112);
  *(void *)(a3 + 112) = v11;
  ++*(_DWORD *)(a3 + 104);
  ++*(_DWORD *)(a2 + 104);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 144) = 0;
  uint64_t v12 = *(void *)(a3 + 128);
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(void *)(a2 + 128) = v12;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = *(void *)(a3 + 136);
  *(void *)(a3 + 136) = v13;
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = *(void *)(a3 + 152);
  *(void *)(a3 + 152) = v14;
  ++*(_DWORD *)(a3 + 144);
  ++*(_DWORD *)(a2 + 144);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v3;
  uint64_t v4 = *(void *)(a3 + 32);
  *(void *)(a3 + 32) = 0;
  *(void *)(a2 + 32) = v4;
  __n128 result = *(__n128 *)(a3 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::deinit(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INS_7variantIJNSA_16AcousticMeshDataENSA_21AcousticARKitMeshDataEEEEEENS9_INSD_IJNSA_22AcousticMeshUpdateDataENSA_27AcousticARKitMeshUpdateDataEEEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>::deinit(a2);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 152);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26E709330[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 152) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 152);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E709368[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 152) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  unint64_t v4 = a3[1].n128_u64[1];
  a3[1].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[1].n128_u64[1] = v4;
  a2[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = 0;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u32[2] = 0;
  unint64_t v5 = a3[2].n128_u64[1];
  a2[2].n128_u64[0] = a3[2].n128_u64[0];
  a2[2].n128_u64[1] = v5;
  a3[2].n128_u64[0] = 0;
  a3[2].n128_u64[1] = 0;
  unint64_t v6 = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = a3[3].n128_u64[0];
  a3[3].n128_u64[0] = v6;
  unint64_t v7 = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = a3[4].n128_u64[0];
  a3[4].n128_u64[0] = v7;
  ++a3[3].n128_u32[2];
  ++a2[3].n128_u32[2];
  a2[6].n128_u64[1] = 0;
  a2[5].n128_u64[0] = 0;
  a2[5].n128_u64[1] = 0;
  a2[4].n128_u64[1] = 0;
  a2[6].n128_u32[0] = 0;
  unint64_t v8 = a3[5].n128_u64[0];
  a2[4].n128_u64[1] = a3[4].n128_u64[1];
  a2[5].n128_u64[0] = v8;
  a3[4].n128_u64[1] = 0;
  a3[5].n128_u64[0] = 0;
  unint64_t v9 = a2[5].n128_u64[1];
  a2[5].n128_u64[1] = a3[5].n128_u64[1];
  a3[5].n128_u64[1] = v9;
  unint64_t v10 = a2[6].n128_u64[1];
  a2[6].n128_u64[1] = a3[6].n128_u64[1];
  a3[6].n128_u64[1] = v10;
  ++a3[6].n128_u32[0];
  ++a2[6].n128_u32[0];
  a2[9].n128_u64[0] = 0;
  a2[7].n128_u64[1] = 0;
  a2[8].n128_u64[0] = 0;
  a2[7].n128_u64[0] = 0;
  a2[8].n128_u32[2] = 0;
  unint64_t v11 = a3[7].n128_u64[1];
  a2[7].n128_u64[0] = a3[7].n128_u64[0];
  a2[7].n128_u64[1] = v11;
  a3[7].n128_u64[0] = 0;
  a3[7].n128_u64[1] = 0;
  unint64_t v12 = a2[8].n128_u64[0];
  a2[8].n128_u64[0] = a3[8].n128_u64[0];
  a3[8].n128_u64[0] = v12;
  unint64_t v13 = a2[9].n128_u64[0];
  a2[9].n128_u64[0] = a3[9].n128_u64[0];
  a3[9].n128_u64[0] = v13;
  ++a3[8].n128_u32[2];
  ++a2[8].n128_u32[2];
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  uint64_t v4 = *((void *)a3 + 3);
  *((void *)a3 + 3) = 0;
  *(void *)(a2 + 24) = v4;
  __n128 result = (__n128)a3[2];
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void *re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit(a2);
  *(void *)a2 = a3;
  __n128 result = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::AcousticAbsorptionMaterial>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v21 = 0;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  re::DynamicString::setCapacity(&v14, 0);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity((void *)a4, v8 + 1);
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v9 = *(void *)(a4 + 32) + 112 * v8;
  *(void *)uint64_t v9 = v14;
  uint64_t v10 = v16;
  *(_OWORD *)(v9 + 8) = v15;
  *(_DWORD *)(v9 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 24) = v10;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0;
  *(_DWORD *)(v9 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 1;
  *(_DWORD *)(v9 + 96) = 0;
  *(void *)(v9 + 80) = 0;
  *(void *)(v9 + 88) = 0;
  *(void *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 96) = 1;
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)(a4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v11 + 1;
  ++*(_DWORD *)(a4 + 24);
  unint64_t v12 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 112 * v11);
  re::introspectionInitElement(a2, a3, a1[6], v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AcousticAbsorptionMaterial>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

void re::DynamicArray<re::AcousticAbsorptionMaterial>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  long long v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 112 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = (re::DynamicString *)(*((void *)v3 + 4) + v8);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v10 + 72);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v10 + 32);
      re::DynamicString::deinit(v10);
      ++v9;
      v8 += 112;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 112 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 40) = 0;
        *(_DWORD *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 104) = 0;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        v6 += 112;
        *(_DWORD *)(v7 + 96) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::DynamicArray<re::AcousticAbsorptionMaterial>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  __n128 result = re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::AcousticAbsorptionMaterial>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 112 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticAbsorptionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AcousticScatteringMaterial>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::AcousticScatteringMaterial>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::AcousticScatteringMaterial>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v21 = 0;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  re::DynamicString::setCapacity(&v14, 0);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::AcousticScatteringMaterial>::growCapacity((void *)a4, v8 + 1);
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v9 = *(void *)(a4 + 32) + 112 * v8;
  *(void *)uint64_t v9 = v14;
  uint64_t v10 = v16;
  *(_OWORD *)(v9 + 8) = v15;
  *(_DWORD *)(v9 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 24) = v10;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0;
  *(_DWORD *)(v9 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 1;
  *(_DWORD *)(v9 + 96) = 0;
  *(void *)(v9 + 80) = 0;
  *(void *)(v9 + 88) = 0;
  *(void *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 96) = 1;
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)(a4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v11 + 1;
  ++*(_DWORD *)(a4 + 24);
  unint64_t v12 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 112 * v11);
  re::introspectionInitElement(a2, a3, a1[6], v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AcousticScatteringMaterial>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

void re::DynamicArray<re::AcousticScatteringMaterial>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  int v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 112 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = (re::DynamicString *)(*((void *)v3 + 4) + v8);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v10 + 72);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v10 + 32);
      re::DynamicString::deinit(v10);
      ++v9;
      v8 += 112;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 112 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 40) = 0;
        *(_DWORD *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 104) = 0;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        v6 += 112;
        *(_DWORD *)(v7 + 96) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::DynamicArray<re::AcousticScatteringMaterial>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AcousticScatteringMaterial>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::AcousticScatteringMaterial>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::AcousticScatteringMaterial>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::AcousticScatteringMaterial>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 112 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticScatteringMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::AcousticSoundReductionMaterial>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v21 = 0;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  re::DynamicString::setCapacity(&v14, 0);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::growCapacity((void *)a4, v8 + 1);
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v9 = *(void *)(a4 + 32) + 112 * v8;
  *(void *)uint64_t v9 = v14;
  uint64_t v10 = v16;
  *(_OWORD *)(v9 + 8) = v15;
  *(_DWORD *)(v9 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 24) = v10;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0;
  *(_DWORD *)(v9 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 1;
  *(_DWORD *)(v9 + 96) = 0;
  *(void *)(v9 + 80) = 0;
  *(void *)(v9 + 88) = 0;
  *(void *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 96) = 1;
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)(a4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v11 + 1;
  ++*(_DWORD *)(a4 + 24);
  unint64_t v12 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 112 * v11);
  re::introspectionInitElement(a2, a3, a1[6], v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AcousticSoundReductionMaterial>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

void re::DynamicArray<re::AcousticSoundReductionMaterial>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  int v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 112 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = (re::DynamicString *)(*((void *)v3 + 4) + v8);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v10 + 72);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v10 + 32);
      re::DynamicString::deinit(v10);
      ++v9;
      v8 += 112;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 112 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 40) = 0;
        *(_DWORD *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 104) = 0;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        v6 += 112;
        *(_DWORD *)(v7 + 96) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::DynamicArray<re::AcousticSoundReductionMaterial>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::AcousticSoundReductionMaterial>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::AcousticSoundReductionMaterial>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 112 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AcousticSoundReductionMaterial>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::AcousticMeshComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E67A0;
  double result = 0.0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 74) = 0u;
  *(_WORD *)(v1 + 160) = 1;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  *(void *)(v1 + 400) = 0;
  *(unsigned char *)(v1 + 408) = 0;
  *(void *)(v1 + 4re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 2re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_DWORD *)(v1 + 312) = 0;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_DWORD *)(v1 + 352) = 0;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_DWORD *)(v1 + 392) = 0;
  return result;
}

id re::internal::defaultRetain<re::ecs2::AcousticMeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AcousticMeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial const*,re::AcousticAbsorptionMaterial*>(uint64_t *result, uint64_t *a2, re::DynamicString *this)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      re::DynamicString::operator=(this, (re::DynamicString *)v5);
      re::DynamicArray<float>::operator=((uint64_t)this + 32, v5 + 4);
      double result = (uint64_t *)re::DynamicArray<float>::operator=((uint64_t)this + 72, v5 + 9);
      v5 += 14;
      this = (re::DynamicString *)((char *)this + 112);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AcousticMeshSystem>(re::ecs2::AcousticMeshSystem *,REEventHandlerResult (re::ecs2::AcousticMeshSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  BOOL v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E709550;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    long long v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    long long v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *long long v16 = &unk_26E7095A8;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    long long v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    long long v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E709600;
    v22[1] = a1;
    _OWORD v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    unint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    int v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v26 = v23;
    v26[1] = v25;
    size_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    uint8x8_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *uint8x8_t v28 = &unk_26E709658;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    unint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    double result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E709550;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E7095A8;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        __int16 v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *__int16 v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *uint64_t v49 = &unk_26E709600;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E709658;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        double result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709550;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709550;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7095A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7095A8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709600;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709600;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709658;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709658;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

double anonymous namespace'::internalDrawBox(uint64_t a1, float32x4_t *a2, float *a3, __n128 *a4, float a5)
{
  float v46 = a5;
  float v7 = *a3;
  float v8 = a3[1];
  float v9 = a3[4] - *a3;
  float v10 = a3[5] - v8;
  float v11 = a3[2];
  float v12 = a3[6] - v11;
  float32x4_t v13 = *a2;
  float32x4_t v14 = a2[1];
  float32x4_t v15 = a2[2];
  float32x4_t v16 = a2[3];
  float32x4_t v17 = vmulq_n_f32(*a2, *a3);
  float32x4_t v18 = vmlaq_n_f32(v17, v14, v8);
  float32x4_t v45 = vaddq_f32(v16, vmlaq_n_f32(v18, v15, v11));
  float32x4_t v19 = vmulq_n_f32(v13, v7 + v9);
  float32x4_t v20 = vmlaq_n_f32(v19, v14, v8);
  float v21 = v11 + v12;
  float32x4_t v43 = vaddq_f32(v16, vmlaq_n_f32(v20, v15, v21));
  float32x4_t v44 = vaddq_f32(v16, vmlaq_n_f32(v20, v15, v11));
  float v22 = v8 + v10;
  float32x4_t v23 = vmlaq_n_f32(v17, v14, v22);
  float32x4_t v41 = vaddq_f32(v16, vmlaq_n_f32(v23, v15, v11));
  float32x4_t v42 = vaddq_f32(v16, vmlaq_n_f32(v18, v15, v21));
  float32x4_t v24 = vmlaq_n_f32(v19, v14, v22);
  float32x4_t v39 = vaddq_f32(v16, vmlaq_n_f32(v24, v15, v21));
  float32x4_t v40 = vaddq_f32(v16, vmlaq_n_f32(v24, v15, v11));
  float32x4_t v38 = vaddq_f32(v16, vmlaq_n_f32(v23, v15, v21));
  unint64_t v25 = re::PrimitiveRenderingContext::addLine(a1, &v45, &v44);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v25, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v25, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v26 = re::PrimitiveRenderingContext::addLine(a1, &v44, &v43);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v26, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v26, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v27 = re::PrimitiveRenderingContext::addLine(a1, &v43, &v42);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v27, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v27, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v28 = re::PrimitiveRenderingContext::addLine(a1, &v45, &v42);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v28, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v28, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v29 = re::PrimitiveRenderingContext::addLine(a1, &v45, &v41);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v29, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v29, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v30 = re::PrimitiveRenderingContext::addLine(a1, &v44, &v40);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v30, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v30, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v31 = re::PrimitiveRenderingContext::addLine(a1, &v43, &v39);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v31, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v31, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v32 = re::PrimitiveRenderingContext::addLine(a1, &v42, &v38);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v32, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v32, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v33 = re::PrimitiveRenderingContext::addLine(a1, &v41, &v40);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v33, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v33, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v34 = re::PrimitiveRenderingContext::addLine(a1, &v40, &v39);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v34, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v34, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v35 = re::PrimitiveRenderingContext::addLine(a1, &v39, &v38);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v35, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v35, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  unint64_t v36 = re::PrimitiveRenderingContext::addLine(a1, &v41, &v38);
  re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v36, &v46, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v36, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), (re *)*(void *)(a1 + 1192)).n128_u64[0];
  return result;
}

re::ecs2::SkeletalDebugComponentStateImpl *re::ecs2::SkeletalDebugComponentStateImpl::SkeletalDebugComponentStateImpl(re::ecs2::SkeletalDebugComponentStateImpl *this, re::ecs2::SkeletalDebugSystem *a2)
{
  void v5[5] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E7096B0;
  *((void *)this + 1) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  void v5[2] = re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v5[3] = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v5[4] = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 5;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::SkeletalDebugComponentStateImpl *)((char *)this + 16), (uint64_t)v4);
  return this;
}

BOOL re::ecs2::SkeletalDebugComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v36, a5, 0);
  unint64_t v8 = v36;
  unint64_t v9 = v37;
  unint64_t v36 = a4;
  unint64_t v37 = v8;
  unint64_t v38 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v37);
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(*(void *)v14 + 16);
      if (*(unsigned char *)(*(void *)v14 + 25)
        || *(unsigned char *)(v15 + 120)
        || (float32x4_t v17 = (unint64_t *)(a3 + 32), *(unsigned char *)(v15 + 121)))
      {
        uint64_t v18 = *(void *)(v16 + 176);
        float32x4_t v17 = (unint64_t *)(a3 + 32);
        if (v18)
        {
          float32x4_t v17 = (unint64_t *)(a3 + 32);
          if (*(void *)(v18 + 40))
          {
            uint64_t v19 = *(unsigned __int16 *)(v16 + 82);
            float32x4_t v17 = (unint64_t *)(a3 + 32);
            if (*(_WORD *)(v16 + 82))
            {
              float32x4_t v20 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                    + 16);
              float v21 = *(int16x8_t **)(v16 + 88);
              int16x8_t v22 = vld1q_dup_s16(v20);
              int v23 = 1;
              float32x4_t v24 = v21;
              uint64_t v25 = *(unsigned __int16 *)(v16 + 82);
              while (1)
              {
                uint16x8_t v26 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v22, *v24), (int8x16_t)xmmword_23436BBD0);
                v26.i16[0] = vmaxvq_u16(v26);
                if (v26.i32[0]) {
                  break;
                }
                v23 -= 8;
                ++v24;
                if (!--v25)
                {
LABEL_17:
                  float32x4_t v17 = (unint64_t *)(a3 + 32);
                  goto LABEL_27;
                }
              }
              int v27 = v26.u16[0] - v23;
              int v28 = *(unsigned __int16 *)(v16 + 80);
              float32x4_t v17 = (unint64_t *)(a3 + 32);
              if (v27 < v28)
              {
                float32x4_t v17 = (unint64_t *)(a3 + 32);
                if (*(void *)(v16 + 232))
                {
                  unint64_t v29 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                        + 16);
                  int16x8_t v30 = vld1q_dup_s16(v29);
                  int v31 = 1;
                  while (1)
                  {
                    uint16x8_t v32 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v30, *v21), (int8x16_t)xmmword_23436BBD0);
                    v32.i16[0] = vmaxvq_u16(v32);
                    if (v32.i32[0]) {
                      break;
                    }
                    v31 -= 8;
                    ++v21;
                    if (!--v19) {
                      goto LABEL_17;
                    }
                  }
                  if (v32.u16[0] - v31 >= v28) {
                    float32x4_t v17 = (unint64_t *)(a3 + 32);
                  }
                  else {
                    float32x4_t v17 = (unint64_t *)(a3 + 48);
                  }
                }
              }
            }
          }
        }
      }
LABEL_27:
      unint64_t v33 = v36;
      unint64_t v34 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v37);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v33, v34, *v17);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v37);
    }
    while (v37 != a5 || (unsigned __int16)v38 != 0xFFFF || WORD1(v38) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::SkeletalDebugComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v399 = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v373, a5, 0);
  uint64_t v355 = a4;
  long long v356 = v373;
  if ((void)v373 != v5 || WORD4(v373) != 0xFFFFLL || (DWORD2(v373) & 0xFFFF0000) != 4294901760)
  {
    uint64_t v300 = v5;
    do
    {
      uint64_t v9 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v356);
      uint64_t v314 = *(void *)v9;
      uint64_t v10 = *(void *)(*(void *)v9 + 16);
      uint64_t v11 = *(void *)(v10 + 176);
      float v12 = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      float32x4_t v13 = *(void **)(v10 + 232);
      uint64_t v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      uint64_t v16 = *(void *)(v11 + 40);
      if (v16 && (unsigned int v17 = atomic_load((unsigned int *)(v16 + 704)), v17 == 2))
      {
        uint64_t v340 = v14;
        uint64_t v307 = v13;
        uint64_t v299 = v15;
        unint64_t v335 = (re::MeshAsset *)(v11 + 32);
        uint64_t v18 = (void *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v11 + 32));
        uint64_t v19 = v18[49];
        uint64_t v20 = v18[47];
        uint64_t v21 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v21)
        {
          int16x8_t v22 = (const re::MeshNameMap *)(v21 + 216);
          uint64_t v303 = *(void *)(v21 + 208);
          uint64_t v306 = *(void *)(v21 + 192);
        }
        else
        {
          uint64_t v306 = v20;
          uint64_t v303 = v19;
          int16x8_t v22 = (const re::MeshNameMap *)(v18 + 56);
        }
        uint64_t v25 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(v13 + 4));
        if (v25) {
          uint16x8_t v26 = (const re::SkeletalPoseDefinitionAsset *)v25;
        }
        else {
          uint16x8_t v26 = (const re::SkeletalPoseDefinitionAsset *)(v13 + 19);
        }
        unint64_t v27 = re::ecs2::SkeletalPoseComponent::calculateRigMappingDataDepHash((uint64_t)v13, v12);
        re::ecs2::SkeletalPoseComponent::ensureSkeletalPoseRigMappingDataUpToDate(v13, v26, (const re::MeshAsset *)v18, v22, (const re::RigRuntimeData *)(v12 + 23), v27);
        uint64_t v5 = v300;
        if (v13[59] && v13[71] <= *(void *)(v340 + 112))
        {
          re::ecs2::TransformComponent::worldSRT((re::ecs2::TransformComponent **)v10, (const re::ecs2::Entity *)1, (uint64_t)&v352);
          float32x4_t v349 = 0uLL;
          uint64_t v28 = v10;
          uint64_t v350 = 0;
          uint64_t v351 = 0x3F80000000000000;
          do
          {
            uint64_t v29 = v28;
            uint64_t v28 = *(void *)(v28 + 24);
          }
          while (v28);
          uint64_t PerspectiveCameraInScene = re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(*(void *)(v29 + 16));
          uint64_t v31 = v10;
          do
          {
            uint64_t v32 = v31;
            uint64_t v31 = *(void *)(v31 + 24);
          }
          while (v31);
          uint64_t v33 = *(void *)(v32 + 16);
          if (PerspectiveCameraInScene)
          {
            uint64_t v34 = re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(v33);
            re::ecs2::PerspectiveCameraComponent::calculateWorldPose(v34, 0, (uint64_t)&v349);
          }
          else
          {
            uint64_t OrthographicCameraInScene = re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(v33);
            uint64_t v37 = v10;
            do
            {
              uint64_t v38 = v37;
              uint64_t v37 = *(void *)(v37 + 24);
            }
            while (v37);
            uint64_t v39 = *(void *)(v38 + 16);
            if (OrthographicCameraInScene)
            {
              uint64_t v40 = re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(v39);
              re::ecs2::OrthographicCameraComponent::calculateWorldPose(v40, 0, (uint64_t)&v349);
            }
            else if (re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(v39))
            {
              do
              {
                uint64_t v41 = v10;
                uint64_t v10 = *(void *)(v10 + 24);
              }
              while (v10);
              uint64_t CustomMatrixCameraInScene = re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(*(void *)(v41 + 16));
              re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(CustomMatrixCameraInScene, 0, &v349);
            }
          }
          if (*(unsigned char *)(v314 + 25))
          {
            uint64_t v43 = *(void *)(v340 + 112);
            v348[0] = *(void *)(v340 + 128);
            v348[1] = v43;
            float32x4_t v304 = (re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>(v335);
            uint64_t v45 = *(void *)(a1 + 8);
            uint64_t v46 = *(void *)(v45 + 112);
            if (v46)
            {
              uint64_t v301 = *(void *)(v45 + 120);
              uint64_t v47 = v314;
              unint64_t v48 = *(void *)(v314 + 40);
              unint64_t v49 = v48 >> 1;
              if ((v48 & 1) == 0) {
                unint64_t v49 = v48 >> 1;
              }
              if (v49)
              {
                if (re::DynamicString::operator!=(v314 + 32, v314 + 208) || !*(void *)(v314 + 256))
                {
                  if (v48)
                  {
                    uint64_t v50 = v314;
                    uint64_t v51 = *(re::internal **)(v314 + 48);
                  }
                  else
                  {
                    uint64_t v50 = v314;
                    uint64_t v51 = (re::internal *)(v314 + 41);
                  }
                  re::internal::regularExpressionCreate(v51, (uint64_t)&v363);
                  uint64_t v54 = *(void *)(v50 + 216);
                  uint64_t v324 = v46;
                  if (v54)
                  {
                    *(void *)(v50 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
                    uint64_t v55 = *(unsigned char **)(v50 + 224);
                  }
                  else
                  {
                    *(unsigned char *)(v50 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v54 & 1;
                    uint64_t v55 = (unsigned char *)(v50 + 217);
                  }
                  *uint64_t v55 = 0;
                  uint64_t v56 = (void *)(v50 + 240);
                  re::DynamicArray<re::DynamicArray<unsigned char>>::clear(v50 + 240);
                  if (v363.i8[0])
                  {
                    unint64_t v57 = v13[71];
                    re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(v56, v57);
                    unint64_t v341 = v57;
                    if (v57)
                    {
                      unint64_t v58 = 0;
                      unsigned int v59 = 0;
                      while (1)
                      {
                        unint64_t v60 = v59;
                        if (v13[80] <= (unint64_t)v59) {
                          unint64_t v61 = 0xFFFFFFFFLL;
                        }
                        else {
                          unint64_t v61 = *(unsigned int *)(v13[81] + 4 * v59);
                        }
                        uint64_t v62 = re::MeshAsset::skeletonAtIndex(v304, v61);
                        unint64_t v63 = *(void *)(v314 + 256);
                        if (v63 <= v58) {
                          goto LABEL_216;
                        }
                        uint64_t v64 = v62;
                        unint64_t v65 = *(void *)(v62 + 24);
                        re::DynamicArray<BOOL>::resize(*(void *)(v314 + 272) + 40 * v58, v65);
                        if (v65) {
                          break;
                        }
LABEL_77:
                        unint64_t v58 = (v60 + 1);
                        unsigned int v59 = v60 + 1;
                        float32x4_t v13 = v307;
                        if (v341 <= v58) {
                          goto LABEL_78;
                        }
                      }
                      uint64_t v67 = 0;
                      unint64_t v63 = 8;
                      while (1)
                      {
                        unint64_t v68 = *(void *)(v64 + 24);
                        if (v68 <= (unint64_t)v67) {
                          goto LABEL_209;
                        }
                        uint64_t v69 = *(char **)(*(void *)(v64 + 32) + v63);
                        uint64_t v70 = strrchr(v69, 47);
                        uint64_t v71 = v70 ? v70 + 1 : v69;
                        re::internal::regularExpressionFullMatch(v71, (void **)&v363.i64[1], (uint64_t)v397);
                        int16x8_t v22 = *(const re::MeshNameMap **)(v314 + 256);
                        if ((unint64_t)v22 <= v58) {
                          break;
                        }
                        uint64_t v72 = *(void *)(v314 + 272);
                        int16x8_t v22 = *(const re::MeshNameMap **)(v72 + 40 * v58 + 16);
                        if (v22 <= (const re::MeshNameMap *)v67) {
                          goto LABEL_211;
                        }
                        int v73 = v397[0];
                        v67->n128_u8[*(void *)(v72 + 40 * v58 + 32)] = v397[0];
                        if (v73)
                        {
                          if (*(void *)&v397[8])
                          {
                            uint64_t v66 = *(void *)&v397[40];
                            if (*(void *)&v397[40]) {
                              (*(void (**)(void))(**(void **)&v397[8] + 40))();
                            }
                          }
                        }
                        uint64_t v67 = (__n128 *)((char *)v67 + 1);
                        v63 += 16;
                        if ((__n128 *)v65 == v67) {
                          goto LABEL_77;
                        }
                      }
LABEL_210:
                      v362.i64[0] = 0;
                      long long v376 = 0u;
                      long long v377 = 0u;
                      long long v374 = 0u;
                      long long v375 = 0u;
                      long long v373 = 0u;
                      unint64_t v60 = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)uint64_t v368 = 136315906;
                      *(void *)&v368[4] = "operator[]";
                      *(_WORD *)&v368[12] = 1024;
                      *(_DWORD *)&v368[14] = 789;
                      __int16 v369 = 2048;
                      unint64_t v370 = v58;
                      __int16 v371 = 2048;
                      int v372 = v22;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_211:
                      v362.i64[0] = 0;
                      long long v376 = 0u;
                      long long v377 = 0u;
                      long long v374 = 0u;
                      long long v375 = 0u;
                      long long v373 = 0u;
                      unint64_t v205 = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)uint64_t v368 = 136315906;
                      *(void *)&v368[4] = "operator[]";
                      *(_WORD *)&v368[12] = 1024;
                      *(_DWORD *)&v368[14] = 789;
                      __int16 v369 = 2048;
                      unint64_t v370 = (unint64_t)v67;
                      __int16 v371 = 2048;
                      int v372 = v22;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_212:
                      re::internal::assertLog((re::internal *)6, v204, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v205, v63);
                      _os_crash();
                      __break(1u);
LABEL_213:
                      re::internal::assertLog((re::internal *)6, v204, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v205, v22);
                      _os_crash();
                      __break(1u);
LABEL_214:
                      *(void *)uint64_t v368 = 0;
                      float32x4_t v366 = 0u;
                      long long v367 = 0u;
                      float32x4_t v364 = 0u;
                      float32x4_t v365 = 0u;
                      float32x4_t v363 = 0u;
                      unint64_t v58 = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)uint64_t v397 = 136315906;
                      *(void *)&v397[4] = "operator[]";
                      *(_WORD *)&v397[12] = 1024;
                      *(_DWORD *)&v397[14] = 789;
                      *(_WORD *)&v397[18] = 2048;
                      *(void *)&v397[20] = v60;
                      *(_WORD *)&v397[28] = 2048;
                      *(void *)&v397[30] = v63;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_215:
                      re::internal::assertLog((re::internal *)4, v85, "assertion failure: '%s' (%s:line %i) ", "assetService", "isFontLoaded", 320);
                      _os_crash();
                      __break(1u);
LABEL_216:
                      *(void *)uint64_t v368 = 0;
                      long long v376 = 0u;
                      long long v377 = 0u;
                      long long v374 = 0u;
                      long long v375 = 0u;
                      long long v373 = 0u;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)uint64_t v397 = 136315906;
                      *(void *)&v397[4] = "operator[]";
                      *(_WORD *)&v397[12] = 1024;
                      *(_DWORD *)&v397[14] = 789;
                      *(_WORD *)&v397[18] = 2048;
                      *(void *)&v397[20] = v58;
                      *(_WORD *)&v397[28] = 2048;
                      *(void *)&v397[30] = v63;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_217;
                    }
                  }
LABEL_78:
                  re::DynamicString::operator=((re::DynamicString *)(v314 + 208), (re::DynamicString *)(v314 + 32));
                  if (v363.i8[0])
                  {
                    std::unique_ptr<re::internal::RegexRoot,std::function<void ()(re::internal::RegexRoot*)>>::~unique_ptr[abi:nn180100](&v363.i64[1]);
                    uint64_t v46 = v324;
                  }
                  else
                  {
                    uint64_t v46 = v324;
                    if (v364.i64[1] && (v365.i8[0] & 1) != 0) {
                      (*(void (**)(void))(*(void *)v364.i64[1] + 40))();
                    }
                  }
                  uint64_t v47 = v314;
                }
              }
              else
              {
                uint64_t v52 = *(void *)(v314 + 216);
                if (v52)
                {
                  *(void *)(v314 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
                  long long v53 = *(unsigned char **)(v314 + 224);
                }
                else
                {
                  *(unsigned char *)(v314 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v52 & 1;
                  long long v53 = (unsigned char *)(v314 + 217);
                }
                *long long v53 = 0;
                re::DynamicArray<re::DynamicArray<unsigned char>>::clear(v314 + 240);
              }
              uint64_t v74 = *(void *)(v46 + 104);
              uint64_t v296 = *(void *)(v74 + 304);
              uint64_t v295 = *(void *)(v74 + 312);
              re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)&v373, *(void *)(v295 + 224), *(re::RenderManager **)(v295 + 248));
              char v390 = *(unsigned char *)(v47 + 27);
              float v75 = *(float *)(v47 + 116);
              float v76 = v352.f32[0];
              unint64_t v77 = v13[71];
              re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((void *)(v47 + 240), v77);
              v78.n128_u64[0] = *(void *)(v47 + 96);
              v78.n128_u32[2] = *(_DWORD *)(v47 + 104);
              v78.n128_u32[3] = 1.0;
              __n128 v358 = v78;
              unint64_t v302 = v77;
              if (!v77) {
                goto LABEL_134;
              }
              unint64_t v60 = 0;
              unsigned int v79 = 0;
              float v80 = fmax((float)(v75 * v76), 0.001);
              uint64_t v298 = (re *)(v314 + 184);
              while (1)
              {
                unint64_t v58 = v79;
                if (v13[80] <= (unint64_t)v79) {
                  unint64_t v81 = 0xFFFFFFFFLL;
                }
                else {
                  unint64_t v81 = *(unsigned int *)(v13[81] + 4 * v79);
                }
                uint64_t v82 = "RigDataValueEEENS3_IPS4_EEE3$_0";
                unsigned int v308 = (void *)re::MeshAsset::skeletonAtIndex(v304, v81);
                unint64_t v63 = *(void *)(v314 + 256);
                if (v63)
                {
                  if (v63 <= v60) {
                    goto LABEL_214;
                  }
                  uint64_t v83 = *(void *)(v314 + 272) + 40 * v60;
                  uint64_t v315 = *(void *)(v83 + 32);
                  int16x8_t v22 = *(const re::MeshNameMap **)(v83 + 16);
                }
                else
                {
                  int16x8_t v22 = 0;
                  uint64_t v315 = 0;
                }
                unint64_t v84 = re::SkeletalPoseRigMappingData::poseRigMapAbsoluteJointTransforms((uint64_t)(v307 + 59), v58, v348);
                if (!v85) {
                  goto LABEL_133;
                }
                unint64_t v87 = v84;
                unint64_t v88 = v85;
                unint64_t v305 = v58;
                unint64_t v58 = 0;
                uint64_t v321 = v308[7];
                unint64_t v325 = v308[6];
                v86.i32[0] = *(_DWORD *)(v314 + 112);
                float v360 = v80;
                float v89 = (float)(*(float *)v86.i32 * 0.25) / *(float *)v86.i32;
                float32x4_t v316 = (float32x4_t)vdupq_lane_s32(v86, 0);
                float v318 = *(float *)v86.i32;
                uint64_t v90 = (__n128 *)("NSt3__110__function6__funcIZN2re4ecs216ECSSerialization17loadFromAssetDataEPNS3_5SceneE"
                                 "PNS2_12AssetServiceERKNS3_14SceneAssetDataEE3$_1NS_9allocatorISC_EEFvPNS2_8internal23Me"
                                 "shSortGroupFixupTableEEEE"
                               + 68);
                unint64_t v63 = 0x234385000;
                uint64_t v67 = (__n128 *)("N2re8internal13CallableMemFnINS_4ecs222HierarchyStateTrackingINS2_25RootPhysicsSimulati"
                                 "onDataEEEMS5_F20REEventHandlerResultPNS2_6EntityERK30REComponentWillDeactivateEventEFS6_S8_SB_EJEEE"
                               + 30);
                int v313 = v22;
                do
                {
                  if (v58 >= (unint64_t)v22 || *(unsigned char *)(v315 + v58))
                  {
                    if (v325 <= v58)
                    {
                      re::internal::assertLog((re::internal *)6, v85, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v58, v325);
                      _os_crash();
                      __break(1u);
LABEL_209:
                      re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v67, v68);
                      _os_crash();
                      __break(1u);
                      goto LABEL_210;
                    }
                    unint64_t v91 = *(unsigned int *)(v321 + 4 * v58);
                    float32x4_t v92 = v352;
                    float32x4_t v93 = v354;
                    if (v88 > v91)
                    {
                      float32x4_t v94 = vmulq_f32(v352, *(float32x4_t *)(v87 + (v58 << 6) + 48));
                      float32x4_t v95 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v353, v353), (int8x16_t)v353, 0xCuLL);
                      float32x4_t v96 = vnegq_f32((float32x4_t)v353);
                      float32x4_t v97 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), (int8x16_t)v94, 0xCuLL), v96), v94, v95);
                      int8x16_t v98 = (int8x16_t)vaddq_f32(v97, v97);
                      float32x4_t v99 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), v98, 0xCuLL);
                      int8x16_t v100 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), (int8x16_t)v99, 0xCuLL), v96), v99, v95);
                      float32x4_t v363 = vaddq_f32(v354, vaddq_f32(vaddq_f32(v94, vmulq_laneq_f32(v99, (float32x4_t)v353, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), v100, 0xCuLL)));
                      float32x4_t v101 = vmulq_f32(v352, *(float32x4_t *)(v87 + (v91 << 6) + 48));
                      float32x4_t v102 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL), v96), v101, v95);
                      int8x16_t v103 = (int8x16_t)vaddq_f32(v102, v102);
                      float32x4_t v104 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), v103, 0xCuLL);
                      int8x16_t v105 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL), v96), v104, v95);
                      float32x4_t v106 = vaddq_f32(v354, vaddq_f32(vaddq_f32(v101, vmulq_laneq_f32(v104, (float32x4_t)v353, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), v105, 0xCuLL)));
                      *(float32x4_t *)uint64_t v397 = v106;
                      float32x4_t v107 = vsubq_f32(v363, v106);
                      float32x4_t v108 = vmulq_f32(v107, v107);
                      LODWORD(v109) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1))).u32[0];
                      float v110 = *((float *)v82 + 157);
                      if (fabsf(v109) >= v110)
                      {
                        float32x2_t v111 = vrsqrte_f32((float32x2_t)LODWORD(v109));
                        float32x2_t v112 = vmul_f32(v111, vrsqrts_f32((float32x2_t)LODWORD(v109), vmul_f32(v111, v111)));
                        float32x4_t v113 = vmulq_n_f32(v107, vmul_f32(v112, vrsqrts_f32((float32x2_t)LODWORD(v109), vmul_f32(v112, v112))).f32[0]);
                        float32x4_t v114 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v113, (int32x4_t)v113), (int8x16_t)v113, 0xCuLL);
                        float32x4_t v115 = vmlaq_f32(vmulq_f32(v113, (float32x4_t)xmmword_23437C090), (float32x4_t)xmmword_23435FD60, v114);
                        float32x4_t v116 = vmulq_f32(v115, v115);
                        if (fabsf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), v116)).f32[0]) >= v110)
                        {
                          float32x4_t v118 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v115, (int32x4_t)v115), (int8x16_t)v115, 0xCuLL);
                        }
                        else
                        {
                          int8x16_t v117 = (int8x16_t)vmlaq_f32(vmulq_f32(v113, (float32x4_t)xmmword_23437C0A0), (float32x4_t)xmmword_23435FD80, v114);
                          float32x4_t v118 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), v117, 0xCuLL);
                        }
                        float v119 = sqrtf(v109);
                        int32x4_t v120 = (int32x4_t)vmulq_f32(v118, v118);
                        v120.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v120, 2), vadd_f32(*(float32x2_t *)v120.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v120.i8, 1))).u32[0];
                        float32x2_t v121 = vrsqrte_f32((float32x2_t)v120.u32[0]);
                        float32x2_t v122 = vmul_f32(v121, vrsqrts_f32((float32x2_t)v120.u32[0], vmul_f32(v121, v121)));
                        float32x4_t v123 = vmulq_n_f32(v118, vmul_f32(v122, vrsqrts_f32((float32x2_t)v120.u32[0], vmul_f32(v122, v122))).f32[0]);
                        float32x4_t v124 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v123, (int32x4_t)v123), (int8x16_t)v123, 0xCuLL), vnegq_f32(v113)), v123, v114);
                        float32x4_t v125 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v124, (int32x4_t)v124), (int8x16_t)v124, 0xCuLL);
                        int32x4_t v126 = (int32x4_t)vmulq_f32(v124, v124);
                        v126.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v126, 2), *(float32x2_t *)v126.i8)).u32[0];
                        float32x2_t v127 = vrsqrte_f32((float32x2_t)v126.u32[0]);
                        float32x2_t v128 = vmul_f32(v127, vrsqrts_f32((float32x2_t)v126.u32[0], vmul_f32(v127, v127)));
                        float32x4_t v129 = vmulq_n_f32(v125, vmul_f32(v128, vrsqrts_f32((float32x2_t)v126.u32[0], vmul_f32(v128, v128))).f32[0]);
                        float v130 = v119 * 0.1;
                        if ((float)(v119 * 0.1) > 0.025) {
                          float v130 = 0.025;
                        }
                        float32x4_t v131 = vmulq_n_f32(v123, v130);
                        float32x4_t v132 = vmulq_n_f32(v129, v130);
                        float v133 = v119 * 0.2;
                        if (v133 > 0.04) {
                          float v133 = 0.04;
                        }
                        float32x4_t v134 = vaddq_f32(v106, vmulq_n_f32(v113, v133));
                        *(float32x4_t *)uint64_t v368 = vaddq_f32(v134, v131);
                        float32x4_t v361 = vsubq_f32(v134, v131);
                        float32x4_t v362 = vaddq_f32(v134, v132);
                        float32x4_t v359 = vsubq_f32(v134, v132);
                        unint64_t v135 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, v397, v368);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v135, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v135, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v136 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, v397, &v362);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v136, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v136, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v137 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, v397, &v361);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v137, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v137, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v138 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, v397, &v359);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v138, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v138, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v139 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, v368, &v362);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v139, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v139, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v140 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, &v362, &v361);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v140, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v140, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v141 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, &v361, &v359);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v141, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v141, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v142 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, &v359, v368);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v142, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v142, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v143 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, v368, &v363);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v143, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v143, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v144 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, &v362, &v363);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v144, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v144, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v145 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, &v361, &v363);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v145, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v145, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        unint64_t v146 = re::PrimitiveRenderingContext::addLine((uint64_t)&v373, &v359, &v363);
                        re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v146, &v360, (_anonymous_namespace_ *)v380, v382, v378, v383, v396);
                        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v146, &v358, (_anonymous_namespace_ *)v379, &v381, v378, v383, v396);
                        float32x4_t v92 = v352;
                        float32x4_t v93 = v354;
                        uint64_t v82 = "ZN2re8internal28ikParameterSolverNodeCompileERNS_14RigGraphSystemENS_5SliceIPKNS_12RigData"
                              "ValueEEENS3_IPS4_EEE3$_0"
                            + 83;
                        uint64_t v90 = (__n128 *)"etDataEPNS3_5SceneEPNS2_12AssetServiceERKNS3_14SceneAssetDataEE3$_1NS_9allocatorISC_EEFvPNS2_8internal23MeshSortGroupFixupTableEEEE";
                        unint64_t v63 = (unint64_t)"S_4ecs222HierarchyStateTrackingINS2_25RootPhysicsSimulationDataEEEMS5_F20REEventHandlerResultPNS2_6EntityERK30REComponentWillDeactivateEventEFS6_S8_SB_EJEEE";
                        uint64_t v67 = (__n128 *)"S_4ecs222HierarchyStateTrackingINS2_25RootPhysicsSimulationDataEEEMS5_F20REEventHandlerResultPNS2_6EntityERK30REComponentWillDeactivateEventEFS6_S8_SB_EJEEE";
                        int16x8_t v22 = v313;
                      }
                    }
                    uint64_t v147 = 0;
                    float v148 = *(float *)v353.i32;
                    float v149 = v148 + v148;
                    float v150 = *(float *)&v353.i32[2];
                    float v151 = v150 + v150;
                    float v152 = v148 * (float)(v148 + v148);
                    float v153 = *(float *)&v353.i32[1] * (float)(*(float *)&v353.i32[1] + *(float *)&v353.i32[1]);
                    float v154 = v150 * (float)(v150 + v150);
                    float v155 = v149 * *(float *)&v353.i32[1];
                    float v156 = v149 * *(float *)&v353.i32[2];
                    float v157 = (float)(*(float *)&v353.i32[1] + *(float *)&v353.i32[1]) * *(float *)&v353.i32[2];
                    float v158 = v149 * *(float *)&v353.i32[3];
                    float v159 = (float)(*(float *)&v353.i32[1] + *(float *)&v353.i32[1]) * *(float *)&v353.i32[3];
                    v160.i32[3] = 0;
                    v160.f32[0] = 1.0 - (float)(v153 + v154);
                    v160.f32[1] = v155 + (float)(v151 * *(float *)&v353.i32[3]);
                    v160.f32[2] = v156 - v159;
                    v161.i32[3] = 0;
                    v161.f32[0] = v155 - (float)(v151 * *(float *)&v353.i32[3]);
                    int v162 = (_OWORD *)(v87 + (v58 << 6));
                    long long v163 = v162[1];
                    long long v164 = v162[2];
                    long long v165 = v162[3];
                    v161.f32[1] = 1.0 - (float)(v152 + v154);
                    v161.f32[2] = v157 + v158;
                    v166.i32[3] = 0;
                    v166.f32[0] = v156 + v159;
                    v166.f32[1] = v157 - v158;
                    v166.f32[2] = 1.0 - (float)(v152 + v153);
                    float32x4_t v167 = vmulq_n_f32(v160, v92.f32[0]);
                    v93.i32[3] = 1.0;
                    float32x4_t v168 = vmulq_n_f32(v161, *(float *)vshrq_n_u64((uint64x2_t)v92, 0x20uLL).i32);
                    *(_OWORD *)uint64_t v397 = *v162;
                    *(_OWORD *)&v397[16] = v163;
                    float32x4_t v169 = vmulq_laneq_f32(v166, v92, 2);
                    *(_OWORD *)&v397[32] = v164;
                    long long v398 = v165;
                    do
                    {
                      *(float32x4_t *)((char *)&v363 + v147) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v167, COERCE_FLOAT(*(_OWORD *)&v397[v147])), v168, *(float32x2_t *)&v397[v147], 1), v169, *(float32x4_t *)&v397[v147], 2), v93, *(float32x4_t *)&v397[v147], 3);
                      v147 += 16;
                    }
                    while (v147 != 64);
                    float32x4_t v170 = v363;
                    float v171 = v360;
                    float32x4_t v172 = vaddq_f32(v366, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v363, v318), (float32x4_t)0, v364), (float32x4_t)0, v365));
                    float32x4_t v362 = v366;
                    float32x4_t v363 = vdivq_f32(v172, (float32x4_t)vdupq_laneq_s32((int32x4_t)v172, 3));
                    float32x4_t v173 = vmulq_f32(v170, (float32x4_t)0);
                    float32x4_t v174 = vaddq_f32(v366, vmlaq_f32(vmlaq_f32(v173, v316, v364), (float32x4_t)0, v365));
                    *(float32x4_t *)uint64_t v397 = vdivq_f32(v174, (float32x4_t)vdupq_laneq_s32((int32x4_t)v174, 3));
                    float32x4_t v342 = v366;
                    float32x4_t v175 = vaddq_f32(v366, vmlaq_f32(vmlaq_f32(v173, (float32x4_t)0, v364), v316, v365));
                    *(_OWORD *)uint64_t v331 = *(_OWORD *)v397;
                    float32x4_t v336 = vdivq_f32(v175, (float32x4_t)vdupq_laneq_s32((int32x4_t)v175, 3));
                    *(float32x4_t *)uint64_t v368 = v336;
                    float32x4_t v361 = (float32x4_t)v90[213];
                    float32x4_t v176 = vsubq_f32(v363, v366);
                    float32x4_t v177 = vmulq_f32(v176, v176);
                    float32x4_t v361 = *(float32x4_t *)(v63 + 1136);
                    float32x4_t v362 = v342;
                    float32x4_t v178 = vsubq_f32(*(float32x4_t *)v331, v342);
                    float32x4_t v179 = vmulq_f32(v178, v178);
                    float32x4_t v361 = (float32x4_t)v67[74];
                    float32x4_t v362 = v342;
                    float32x4_t v180 = vsubq_f32(v336, v342);
                    float32x4_t v181 = vmulq_f32(v180, v180);
                  }
                  ++v58;
                }
                while (v58 != v88);
                unint64_t v58 = v305;
                if (!*(unsigned char *)(v314 + 26)) {
                  goto LABEL_133;
                }
                if (!v301) {
                  goto LABEL_215;
                }
                uint64_t v182 = *(void *)(v314 + 192);
                if (!v182) {
                  goto LABEL_116;
                }
                unsigned int v183 = atomic_load((unsigned int *)(v182 + 704));
                if (v183 != 2)
                {
                  if (!*(void *)(v314 + 192))
                  {
LABEL_116:
                    (*(void (**)(float32x4_t *__return_ptr))(*(void *)v301 + 8))(&v363);
                    float32x4_t v184 = *(float32x4_t *)(v314 + 184);
                    *(float32x4_t *)(v314 + 184) = v363;
                    float32x4_t v363 = v184;
                    uint64_t v185 = *(void *)(v314 + 200);
                    *(void *)(v314 + 200) = v364.i64[0];
                    v364.i64[0] = v185;
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v363);
                  }
                  re::AssetHandle::loadAsync(v298);
                }
                uint64_t v186 = *(void *)(v314 + 192);
                if (v186)
                {
                  unsigned int v187 = atomic_load((unsigned int *)(v186 + 704));
                  if (v187 == 2)
                  {
                    re::makeFontID(v298, (re::StringID *)v368);
                    float v188 = *(float *)v353.i32;
                    float v189 = v188 + v188;
                    float v190 = *(float *)&v353.i32[2];
                    float v191 = v190 + v190;
                    float v192 = v188 * (float)(v188 + v188);
                    float v193 = *(float *)&v353.i32[1] * (float)(*(float *)&v353.i32[1] + *(float *)&v353.i32[1]);
                    float v194 = v190 * (float)(v190 + v190);
                    float v195 = v189 * *(float *)&v353.i32[1];
                    float v196 = v189 * *(float *)&v353.i32[2];
                    float v197 = (float)(*(float *)&v353.i32[1] + *(float *)&v353.i32[1]) * *(float *)&v353.i32[2];
                    float v198 = v189 * *(float *)&v353.i32[3];
                    float v199 = (float)(*(float *)&v353.i32[1] + *(float *)&v353.i32[1]) * *(float *)&v353.i32[3];
                    v200.i32[3] = 0;
                    v200.f32[0] = 1.0 - (float)(v193 + v194);
                    v200.f32[1] = v195 + (float)(v191 * *(float *)&v353.i32[3]);
                    v200.f32[2] = v196 - v199;
                    v201.i32[3] = 0;
                    v201.f32[0] = v195 - (float)(v191 * *(float *)&v353.i32[3]);
                    v201.f32[1] = 1.0 - (float)(v192 + v194);
                    v201.f32[2] = v197 + v198;
                    v202.i32[3] = 0;
                    v202.f32[0] = v196 + v199;
                    v202.f32[1] = v197 - v198;
                    v202.f32[2] = 1.0 - (float)(v192 + v193);
                    float32x4_t v319 = vmulq_n_f32(v201, *(float *)vshrq_n_u64((uint64x2_t)v352, 0x20uLL).i32);
                    float32x4_t v322 = vmulq_n_f32(v200, v352.f32[0]);
                    float32x4_t v317 = vmulq_laneq_f32(v202, v352, 2);
                    float32x4_t v203 = v354;
                    v203.i32[3] = 1.0;
                    float32x4_t v312 = v203;
                    re::StringID::StringID((re::StringID *)&v357, (const StringID *)v368);
                    unint64_t v205 = 0;
                    v212.i32[0] = v350;
                    float v206 = *(float *)v212.i32 + *(float *)v212.i32;
                    float v207 = *(float *)&v351;
                    float v208 = (float)(*(float *)v212.i32 + *(float *)v212.i32) * *(float *)&v351;
                    float v209 = (float)(*((float *)&v350 + 1) + *((float *)&v350 + 1)) * *((float *)&v351 + 1);
                    float v210 = *(float *)&v351 * (float)(*((float *)&v350 + 1) + *((float *)&v350 + 1));
                    float v211 = (float)(*(float *)v212.i32 + *(float *)v212.i32) * *((float *)&v351 + 1);
                    *(float *)v212.i32 = *(float *)v212.i32 * (float)(*(float *)v212.i32 + *(float *)v212.i32);
                    float v213 = *((float *)&v350 + 1) * (float)(*((float *)&v350 + 1) + *((float *)&v350 + 1));
                    v214.i32[3] = 0;
                    v214.f32[0] = v208 + v209;
                    v214.f32[1] = v210 - v211;
                    v214.f32[2] = 1.0 - (float)(*(float *)v212.i32 + v213);
                    float v215 = v206 * *((float *)&v350 + 1);
                    float v216 = (float)(v207 + v207) * *((float *)&v351 + 1);
                    float v217 = v207 * (float)(v207 + v207);
                    v218.i32[3] = 0;
                    v218.f32[0] = v215 - v216;
                    v218.f32[1] = 1.0 - (float)(*(float *)v212.i32 + v217);
                    v218.f32[2] = v210 + v211;
                    float32x4_t v310 = v218;
                    float32x4_t v311 = v214;
                    unint64_t v63 = v308[3];
                    uint64_t v219 = v308[4];
                    v220.i32[3] = 0;
                    v220.f32[0] = 1.0 - (float)(v217 + v213);
                    v220.f32[1] = v215 + v216;
                    v220.f32[2] = v208 - v209;
                    float32x4_t v309 = v220;
                    unint64_t v60 = v296;
                    do
                    {
                      if (!v22) {
                        goto LABEL_124;
                      }
                      if ((unint64_t)v22 <= v205) {
                        goto LABEL_213;
                      }
                      if (*(unsigned char *)(v315 + v205))
                      {
LABEL_124:
                        if (v63 <= v205) {
                          goto LABEL_212;
                        }
                        long long v221 = *(_OWORD *)(v87 + (v205 << 6) + 48);
                        HIDWORD(v221) = 1.0;
                        long long v343 = v221;
                        v212.i32[0] = *(_DWORD *)(v314 + 80);
                        *(float32x4_t *)BOOL v332 = vmulq_n_f32(v310, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(v212, 0), 0x20uLL).i32);
                        *(float32x4_t *)unint64_t v337 = vmulq_n_f32(v311, *(float *)v212.i32);
                        float32x4_t v326 = vmulq_n_f32(v309, *(float *)v212.i32);
                        unsigned int v222 = *(char **)(v219 + 16 * v205 + 8);
                        __int32 v223 = strrchr(v222, 47);
                        uint64_t v224 = 0;
                        *(float32x4_t *)uint64_t v397 = v326;
                        *(_OWORD *)&v397[16] = *(_OWORD *)v332;
                        *(_OWORD *)&v397[32] = *(_OWORD *)v337;
                        long long v398 = v343;
                        do
                        {
                          *(float32x4_t *)((char *)&v363 + v224) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v322, COERCE_FLOAT(*(_OWORD *)&v397[v224])), v319, *(float32x2_t *)&v397[v224], 1), v317, *(float32x4_t *)&v397[v224], 2), v312, *(float32x4_t *)&v397[v224], 3);
                          v224 += 16;
                        }
                        while (v224 != 64);
                        if (v223) {
                          uint64_t v225 = v223 + 1;
                        }
                        else {
                          uint64_t v225 = v222;
                        }
                        re::DebugRenderer::drawText(v296, (long long *)&v363, v225, &v357, (long long *)(v314 + 64));
                        int16x8_t v22 = v313;
                      }
                      ++v205;
                    }
                    while (v205 != v88);
                    re::StringID::destroyString((re::StringID *)&v357);
                    re::StringID::destroyString((re::StringID *)v368);
                    LODWORD(v58) = v305;
                  }
                }
LABEL_133:
                unint64_t v60 = (v58 + 1);
                unsigned int v79 = v58 + 1;
                float32x4_t v13 = v307;
                if (v302 <= v60)
                {
LABEL_134:
                  if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)&v373)) {
                    re::PrimitiveRenderer::submitContext(v295, (unint64_t *)&v373);
                  }
                  if (v391)
                  {
                    if (v395) {
                      (*(void (**)(void))(*(void *)v391 + 40))();
                    }
                    uint64_t v395 = 0;
                    uint64_t v392 = 0;
                    uint64_t v393 = 0;
                    uint64_t v391 = 0;
                    ++v394;
                  }
                  re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v389);
                  uint64_t v5 = v300;
                  if (v384)
                  {
                    if (v388) {
                      (*(void (**)(void))(*(void *)v384 + 40))();
                    }
                    uint64_t v388 = 0;
                    uint64_t v385 = 0;
                    uint64_t v386 = 0;
                    uint64_t v384 = 0;
                    ++v387;
                  }
                  for (uint64_t i = 976; i != 816; i -= 40)
                    re::DynamicArray<unsigned long>::deinit((uint64_t)&v373 + i);
                  do
                  {
                    re::DynamicArray<unsigned long>::deinit((uint64_t)&v373 + i);
                    i -= 40;
                  }
                  while (i != 656);
                  do
                  {
                    re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v373 + i);
                    i -= 40;
                  }
                  while (i != 496);
                  for (uint64_t j = 240; j != -40; j -= 40)
                    re::DynamicArray<unsigned long>::deinit((uint64_t)&v373 + j);
                  goto LABEL_150;
                }
              }
            }
LABEL_217:
            re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) ", "renderManager", "doDrawModelSkeletons", 404);
            _os_crash();
            __break(1u);
LABEL_218:
            re::internal::assertLog((re::internal *)4, v35, "assertion failure: '%s' (%s:line %i) ", "meshBoundingBoxes.size() == instances.size()", "doDrawModelBoundingBoxes", 338);
            _os_crash();
            __break(1u);
          }
LABEL_150:
          uint64_t v228 = v299;
          if (v299)
          {
            if (*(unsigned char *)(v314 + 120))
            {
              uint64_t v229 = *(void *)(v299 + 96);
              if (v229)
              {
                if (*(void *)(v229 + 104) != v306) {
                  goto LABEL_218;
                }
                uint64_t v230 = *(void *)(*(void *)(a1 + 8) + 112);
                uint64_t v231 = *(void *)(v230 + 32);
                int32x4_t v232 = v353;
                float32x4_t v327 = v352;
                float32x4_t v344 = v354;
                uint64_t v233 = *(void *)(*(void *)(v230 + 104) + 312);
                re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)&v373, *(void *)(v233 + 224), *(re::RenderManager **)(v233 + 248));
                char v390 = *(unsigned char *)(v314 + 27);
                if (v306)
                {
                  unint64_t v234 = 0;
                  double v235 = (re::MeshBoundingBoxes *)(v229 + 80);
                  float v236 = *(float *)v232.i32 * (float)(*(float *)v232.i32 + *(float *)v232.i32);
                  float v237 = *(float *)&v232.i32[1] * (float)(*(float *)&v232.i32[1] + *(float *)&v232.i32[1]);
                  float v238 = *(float *)&v232.i32[2] * (float)(*(float *)&v232.i32[2] + *(float *)&v232.i32[2]);
                  float v239 = (float)(*(float *)v232.i32 + *(float *)v232.i32) * *(float *)&v232.i32[1];
                  float v240 = (float)(*(float *)v232.i32 + *(float *)v232.i32) * *(float *)&v232.i32[2];
                  float v241 = (float)(*(float *)&v232.i32[1] + *(float *)&v232.i32[1]) * *(float *)&v232.i32[2];
                  float v242 = (float)(*(float *)v232.i32 + *(float *)v232.i32) * *(float *)&v232.i32[3];
                  float v243 = (float)(*(float *)&v232.i32[1] + *(float *)&v232.i32[1]) * *(float *)&v232.i32[3];
                  float v244 = (float)(*(float *)&v232.i32[2] + *(float *)&v232.i32[2]) * *(float *)&v232.i32[3];
                  v245.i32[3] = 0;
                  v245.f32[0] = 1.0 - (float)(v237 + v238);
                  v245.f32[1] = v239 + v244;
                  v245.f32[2] = v240 - v243;
                  v246.i32[3] = 0;
                  v246.f32[0] = v239 - v244;
                  v246.f32[1] = 1.0 - (float)(v236 + v238);
                  v246.f32[2] = v241 + v242;
                  *(float *)&unsigned int v247 = 1.0 - (float)(v236 + v237);
                  v248.f32[0] = v240 + v243;
                  v248.f32[1] = v241 - v242;
                  v248.i64[1] = v247;
                  float32x4_t v333 = vmulq_n_f32(v246, *(float *)vshrq_n_u64((uint64x2_t)v327, 0x20uLL).i32);
                  float32x4_t v338 = vmulq_n_f32(v245, v327.f32[0]);
                  float32x4_t v328 = vmulq_laneq_f32(v248, v327, 2);
                  float32x4_t v249 = v344;
                  v249.i32[3] = 1.0;
                  float32x4_t v345 = v249;
                  float v250 = fmax((float)(*(float *)(v314 + 116) * v352.f32[0]), 0.001);
                  uint64_t v251 = v231 + 72;
                  do
                  {
                    uint64_t v252 = (_OWORD *)re::DataArray<re::MeshInstance>::get(v251, *(void *)(v303 + 8 * v234));
                    uint64_t v253 = 0;
                    long long v254 = v252[3];
                    long long v255 = v252[4];
                    long long v256 = v252[5];
                    *(_OWORD *)uint64_t v397 = v252[2];
                    *(_OWORD *)&v397[16] = v254;
                    *(_OWORD *)&v397[32] = v255;
                    long long v398 = v256;
                    do
                    {
                      *(float32x4_t *)((char *)&v363 + v253) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v338, COERCE_FLOAT(*(_OWORD *)&v397[v253])), v333, *(float32x2_t *)&v397[v253], 1), v328, *(float32x4_t *)&v397[v253], 2), v345, *(float32x4_t *)&v397[v253], 3);
                      v253 += 16;
                    }
                    while (v253 != 64);
                    uint64_t v257 = (float *)re::MeshBoundingBoxes::boundingBox(v235, v234);
                    ++v234;
                  }
                  while (v234 != v306);
                }
                if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)&v373)) {
                  re::PrimitiveRenderer::submitContext(v233, (unint64_t *)&v373);
                }
                if (v391)
                {
                  if (v395) {
                    (*(void (**)(void))(*(void *)v391 + 40))();
                  }
                  uint64_t v395 = 0;
                  uint64_t v392 = 0;
                  uint64_t v393 = 0;
                  uint64_t v391 = 0;
                  ++v394;
                }
                re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v389);
                uint64_t v5 = v300;
                if (v384)
                {
                  if (v388) {
                    (*(void (**)(void))(*(void *)v384 + 40))();
                  }
                  uint64_t v388 = 0;
                  uint64_t v385 = 0;
                  uint64_t v386 = 0;
                  uint64_t v384 = 0;
                  ++v387;
                }
                for (uint64_t k = 976; k != 816; k -= 40)
                  re::DynamicArray<unsigned long>::deinit((uint64_t)&v373 + k);
                do
                {
                  re::DynamicArray<unsigned long>::deinit((uint64_t)&v373 + k);
                  k -= 40;
                }
                while (k != 656);
                do
                {
                  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v373 + k);
                  k -= 40;
                }
                while (k != 496);
                for (uint64_t m = 240; m != -40; m -= 40)
                  re::DynamicArray<unsigned long>::deinit((uint64_t)&v373 + m);
                uint64_t v228 = v299;
              }
            }
            if (*(unsigned char *)(v314 + 121))
            {
              uint64_t v260 = *(void *)(v228 + 96);
              if (v260)
              {
                uint64_t v261 = *(void *)(*(void *)(a1 + 8) + 112);
                uint64_t v262 = *(void *)(v261 + 32);
                int32x4_t v263 = v353;
                float32x4_t v329 = v352;
                float32x4_t v346 = v354;
                uint64_t v264 = *(void *)(*(void *)(v261 + 104) + 312);
                re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)&v373, *(void *)(v264 + 224), *(re::RenderManager **)(v264 + 248));
                char v390 = *(unsigned char *)(v314 + 27);
                uint64_t v265 = v303;
                if (v306)
                {
                  unint64_t v266 = 0;
                  uint64_t v267 = 0;
                  uint64_t v268 = (re::MeshBoundingBoxes *)(v260 + 152);
                  float v269 = *(float *)v263.i32 * (float)(*(float *)v263.i32 + *(float *)v263.i32);
                  float v270 = *(float *)&v263.i32[1] * (float)(*(float *)&v263.i32[1] + *(float *)&v263.i32[1]);
                  float v271 = *(float *)&v263.i32[2] * (float)(*(float *)&v263.i32[2] + *(float *)&v263.i32[2]);
                  float v272 = (float)(*(float *)v263.i32 + *(float *)v263.i32) * *(float *)&v263.i32[1];
                  float v273 = (float)(*(float *)v263.i32 + *(float *)v263.i32) * *(float *)&v263.i32[2];
                  float v274 = (float)(*(float *)&v263.i32[1] + *(float *)&v263.i32[1]) * *(float *)&v263.i32[2];
                  float v275 = (float)(*(float *)v263.i32 + *(float *)v263.i32) * *(float *)&v263.i32[3];
                  float v276 = (float)(*(float *)&v263.i32[1] + *(float *)&v263.i32[1]) * *(float *)&v263.i32[3];
                  float v277 = (float)(*(float *)&v263.i32[2] + *(float *)&v263.i32[2]) * *(float *)&v263.i32[3];
                  v278.i32[3] = 0;
                  v278.f32[0] = 1.0 - (float)(v270 + v271);
                  v278.f32[1] = v272 + v277;
                  v278.f32[2] = v273 - v276;
                  v279.i32[3] = 0;
                  v279.f32[0] = v272 - v277;
                  v279.f32[1] = 1.0 - (float)(v269 + v271);
                  v279.f32[2] = v274 + v275;
                  float v280 = v269 + v270;
                  v281.i32[3] = 0;
                  v281.f32[0] = v273 + v276;
                  v281.f32[1] = v274 - v275;
                  v281.f32[2] = 1.0 - v280;
                  float32x4_t v334 = vmulq_n_f32(v279, *(float *)vshrq_n_u64((uint64x2_t)v329, 0x20uLL).i32);
                  float32x4_t v339 = vmulq_n_f32(v278, v329.f32[0]);
                  float32x4_t v330 = vmulq_laneq_f32(v281, v329, 2);
                  float32x4_t v282 = v346;
                  v282.i32[3] = 1.0;
                  float32x4_t v347 = v282;
                  float v283 = fmax((float)(*(float *)(v314 + 116) * v352.f32[0]), 0.001);
                  uint64_t v323 = v262 + 72;
                  uint64_t v320 = v262 + 8;
                  do
                  {
                    uint64_t v284 = re::DataArray<re::MeshInstance>::get(v323, *(void *)(v265 + 8 * v267));
                    uint64_t v285 = 0;
                    long long v286 = *(_OWORD *)(v284 + 48);
                    long long v287 = *(_OWORD *)(v284 + 64);
                    long long v288 = *(_OWORD *)(v284 + 80);
                    *(_OWORD *)uint64_t v397 = *(_OWORD *)(v284 + 32);
                    *(_OWORD *)&v397[16] = v286;
                    *(_OWORD *)&v397[32] = v287;
                    long long v398 = v288;
                    do
                    {
                      *(float32x4_t *)((char *)&v363 + v285) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v339, COERCE_FLOAT(*(_OWORD *)&v397[v285])), v334, *(float32x2_t *)&v397[v285], 1), v330, *(float32x4_t *)&v397[v285], 2), v347, *(float32x4_t *)&v397[v285], 3);
                      v285 += 16;
                    }
                    while (v285 != 64);
                    uint64_t v289 = *(void *)(re::DataArray<re::MeshModel>::get(v320, *(void *)(v284 + 16)) + 56);
                    if (v289)
                    {
                      unint64_t v290 = v289 + v266;
                      do
                      {
                        float v291 = (float *)re::MeshBoundingBoxes::boundingBox(v268, v266);
                        ++v266;
                        --v289;
                      }
                      while (v289);
                      unint64_t v266 = v290;
                      uint64_t v265 = v303;
                    }
                    ++v267;
                  }
                  while (v267 != v306);
                }
                if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)&v373)) {
                  re::PrimitiveRenderer::submitContext(v264, (unint64_t *)&v373);
                }
                if (v391)
                {
                  if (v395) {
                    (*(void (**)(void))(*(void *)v391 + 40))();
                  }
                  uint64_t v395 = 0;
                  uint64_t v392 = 0;
                  uint64_t v393 = 0;
                  uint64_t v391 = 0;
                  ++v394;
                }
                re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v389);
                uint64_t v5 = v300;
                if (v384)
                {
                  if (v388) {
                    (*(void (**)(void))(*(void *)v384 + 40))();
                  }
                  uint64_t v388 = 0;
                  uint64_t v385 = 0;
                  uint64_t v386 = 0;
                  uint64_t v384 = 0;
                  ++v387;
                }
                for (uint64_t n = 976; n != 816; n -= 40)
                  re::DynamicArray<unsigned long>::deinit((uint64_t)&v373 + n);
                do
                {
                  re::DynamicArray<unsigned long>::deinit((uint64_t)&v373 + n);
                  n -= 40;
                }
                while (n != 656);
                do
                {
                  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v373 + n);
                  n -= 40;
                }
                while (n != 496);
                for (iuint64_t i = 240; ii != -40; ii -= 40)
                  re::DynamicArray<unsigned long>::deinit((uint64_t)&v373 + ii);
              }
            }
          }
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v11 + 32));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v356);
    }
    while ((void)v356 != v5 || WORD4(v356) != 0xFFFF || WORD5(v356) != 0xFFFF);
  }
  return *(_DWORD *)(v5 + 40) != 0;
}

uint64_t re::ecs2::SkeletalDebugSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  v28[0] = a3;
  v28[1] = a4;
  uint64_t v6 = *(void *)(result + 104);
  if (!v6 || (*(unsigned char *)(v6 + 424) & 0x10) != 0)
  {
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v27);
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26, 3087, v5);
    uint64_t v29 = a2;
    unint64_t v7 = *(void *)(*(void *)(v5 + 232)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v5 + 224), &v29)+ 8);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v5 + 336, v7);
    unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 168, v7);
    uint64_t v9 = *(void *)(*v8 + 224);
    unint64_t v10 = v8[3];
    unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v10);
    if (*(_DWORD *)(v11 + 40)) {
      int v12 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v9 + 24))(v9, v28, v8, v10, v11, 0);
    }
    else {
      int v12 = 0;
    }
    unint64_t v13 = v8[5];
    unint64_t v14 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v13);
    if (*(_DWORD *)(v14 + 40)) {
      v12 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v9 + 32))(v9, v28, v8, v13, v14, 0);
    }
    unint64_t v15 = v8[6];
    unint64_t v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v15);
    if (*(_DWORD *)(v16 + 40))
    {
      if (((v12 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v9 + 40))(v9, v28, v8, v15, v16, 0)) & 1) == 0)goto LABEL_11; {
    }
      }
    else if (!v12)
    {
LABEL_11:
      if (*(unsigned char *)(v5 + 400))
      {
        unint64_t v17 = *(void *)(v5 + 344);
        int v18 = *(_DWORD *)(v5 + 352);
        if (v17 >= 0xB)
        {
          if (v18) {
            uint64_t v19 = (void *)(v5 + 360);
          }
          else {
            uint64_t v19 = *(void **)(v5 + 368);
          }
          uint64_t v21 = 8 * v17;
          while (!*v19)
          {
            ++v19;
            v21 -= 8;
            if (!v21) {
              goto LABEL_31;
            }
          }
LABEL_29:
          uint64_t v25 = *(re::ecs2::System **)(v5 + 384);
          if (!*((unsigned char *)v25 + 86)) {
            re::ecs2::System::queueToRun(v25, 0.0);
          }
          goto LABEL_31;
        }
        if ((v18 & 1) == 0)
        {
          uint64_t v20 = *(uint64_t **)(v5 + 368);
          if (!v17) {
            goto LABEL_31;
          }
LABEL_26:
          uint64_t v22 = 0;
          uint64_t v23 = 8 * v17;
          do
          {
            uint64_t v24 = *v20++;
            v22 |= v24;
            v23 -= 8;
          }
          while (v23);
          if (!v22) {
            goto LABEL_31;
          }
          goto LABEL_29;
        }
        uint64_t v20 = (uint64_t *)(v5 + 360);
        if (v17) {
          goto LABEL_26;
        }
      }
LABEL_31:
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v27);
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v5 + 336, v7);
    goto LABEL_11;
  }
  return result;
}

uint64_t re::ecs2::SkeletalDebugSystem::willAddSystemToECSService(re::ecs2::SkeletalDebugSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  *((void *)this + 15) = result;
  return result;
}

void *re::ecs2::SkeletalDebugSystem::willRemoveSystemFromECSService(void *this)
{
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  return this;
}

void re::ecs2::SkeletalDebugSystem::willAddSceneToECSService(re::ecs2::SkeletalDebugSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 168;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::SkeletalDebugSystem *)((char *)this + 288);
  unint64_t v6 = *((void *)this + 37);
  int v7 = *((_DWORD *)this + 76);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)this + 312);
    }
    else {
      unint64_t v8 = (void *)*((void *)this + 40);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 312);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 40);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 288, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::SkeletalDebugSystem *)((char *)this + 224), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    unint64_t v15 = (char *)this + 336;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 26);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 22);
  DWORD2(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 21, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 22);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    unsigned int v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 184)) {
    uint64_t v19 = (char *)this + 192;
  }
  else {
    uint64_t v19 = (char *)*((void *)this + 25);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 26);
  ++*((_DWORD *)this + 54);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 26);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 26) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::SkeletalDebugSystem *)((char *)this + 224), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 26);
  unint64_t v29 = *((void *)this + 41);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 41) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 41) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 304)) {
      uint64_t v33 = (char *)this + 312;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 40);
    }
    *(void *)&v33[8 * *((void *)this + 37) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 26);
  unint64_t v35 = *((void *)this + 47);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 47) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::SkeletalDebugSystem *)((char *)this + 336), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 47) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 352)) {
      uint64_t v39 = (char *)this + 360;
    }
    else {
      uint64_t v39 = (char *)*((void *)this + 46);
    }
    *(void *)&v39[8 * *((void *)this + 43) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  unint64_t v15 = (char *)this + 336;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 400)) {
    return;
  }
  unint64_t v40 = *((void *)this + 43);
  int v41 = *((_DWORD *)this + 88);
  if (v40 >= 0xB)
  {
    if (v41) {
      float32x4_t v42 = (void *)((char *)this + 360);
    }
    else {
      float32x4_t v42 = (void *)*((void *)this + 46);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = (re::ecs2::System *)*((void *)this + 48);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 360);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 46);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::SkeletalDebugSystem::willRemoveSceneFromECSService(re::ecs2::SkeletalDebugSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 224);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 28, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 29) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 288, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 336, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 168, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      *unint64_t v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        unint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      void *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_SkeletalDebugComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_328))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF900D8, "SkeletalDebugComponent");
    __cxa_guard_release(&_MergedGlobals_328);
  }
  return &unk_26AF900D8;
}

void re::ecs2::initInfo_SkeletalDebugComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v39[0] = 0xBC69695610230606;
  v39[1] = "SkeletalDebugComponent";
  re::StringID::destroyString((re::StringID *)v39);
  *((_OWORD *)this + 2) = v40;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90080, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF90080);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF90090 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "drawModelSkeleton";
      *(void *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF90098 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "drawJointNames";
      *(void *)(v15 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1A00000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF900A0 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      unint64_t v18 = re::IntrospectionInfo<re::DynamicString>::get(1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "jointNameFilter";
      *(void *)(v19 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF900A8 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v21 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "textColor";
      *(void *)(v22 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x4000000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF900B0 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      uint64_t v25 = re::introspect_float((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "textScale";
      *(void *)(v26 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x5000000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF900B8 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      uint64_t v28 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "boneColor";
      *(void *)(v29 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x6000000007;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF900C0 = v29;
      unint64_t v30 = re::introspectionAllocator((re *)v29);
      uint64_t v32 = re::introspect_float((re *)1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "axisLength";
      *(void *)(v33 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0x7000000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF900C8 = v33;
      unint64_t v34 = re::introspectionAllocator((re *)v33);
      unint64_t v36 = re::introspect_BOOL((re *)1, v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "drawJointsWithDepth";
      *(void *)(v37 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x1B00000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF900D0 = v37;
      __cxa_guard_release(&qword_26AF90080);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + 8) = &qword_26AF90090;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalDebugComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalDebugComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalDebugComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalDebugComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v38 = v40;
}

uint64_t re::internal::defaultConstruct<re::ecs2::SkeletalDebugComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::SkeletalDebugComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalDebugComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)(a3 + 30));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 26));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 23));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalDebugComponent>(void *a1)
{
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)(a1 + 30));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 26));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 23));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkeletalDebugComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalDebugComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalDebugComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalDebugComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalDebugComponent>, this);
}

void *re::ecs2::allocInfo_SkeletalDebugSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90088, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90088))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90150, "SkeletalDebugSystem");
    __cxa_guard_release(&qword_26AF90088);
  }
  return &unk_26AF90150;
}

void re::ecs2::initInfo_SkeletalDebugSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xC92384EC8ACA73D2;
  v5[1] = "SkeletalDebugSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_SkeletalDebugSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalDebugSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalDebugSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::SkeletalDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::SkeletalDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalDebugSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalDebugSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::SkeletalDebugSystem *re::internal::defaultConstruct<re::ecs2::SkeletalDebugSystem>(int a1, int a2, re::ecs2::SkeletalDebugSystem *this)
{
  return re::ecs2::SkeletalDebugSystem::SkeletalDebugSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalDebugSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 21);
  a3[16] = &unk_26E7096B0;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 18);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalDebugSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 21);
  a1[16] = &unk_26E7096B0;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 18);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkeletalDebugSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalDebugSystem>, this);
}

uint64_t re::ecs2::SkeletalDebugComponentStateImpl::dependsOnComponents(re::ecs2::SkeletalDebugComponentStateImpl *this)
{
  return *((void *)this + 4);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalDebugComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalDebugComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::SkeletalDebugSystem::~SkeletalDebugSystem(re::ecs2::SkeletalDebugSystem *this)
{
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &unk_26E7096B0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 18);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21);
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &unk_26E7096B0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 18);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::SkeletalDebugSystem::typeInfo(re::ecs2::SkeletalDebugSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalDebugSystem>, 0);
}

void anonymous namespace'::internalDrawArrow(uint64_t a1, float32x4_t *a2, float32x4_t *a3, __n128 *a4, float a5, float a6)
{
  float v28 = a5;
  float32x4_t v6 = vsubq_f32(*a3, *a2);
  float32x4_t v7 = vmulq_f32(v6, v6);
  LODWORD(v8) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  if (fabsf(v8) >= 1.0e-10)
  {
    float v12 = v8;
    float32x2_t v13 = vrsqrte_f32((float32x2_t)LODWORD(v8));
    float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
    float32x4_t v23 = vmulq_n_f32(v6, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
    unint64_t v15 = re::PrimitiveRenderingContext::addLine(a1, a2, a3);
    re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v15, &v28, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v15, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
    if (fabsf(v23.f32[2]) >= 0.00001)
    {
      v17.i32[0] = 0;
      v17.f32[1] = -v23.f32[2];
      float32x4_t v16 = v23;
      v17.i64[1] = v23.u32[1];
    }
    else
    {
      float32x4_t v16 = v23;
      v17.i64[1] = 0;
      v17.f32[0] = -v23.f32[1];
      v17.i32[1] = v23.i32[0];
    }
    int32x4_t v18 = (int32x4_t)vmulq_f32(v17, v17);
    v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
    float32x2_t v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
    float32x2_t v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
    float32x4_t v24 = vmulq_n_f32(vmulq_n_f32(v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]), a6 * 0.25);
    float32x4_t v26 = vmulq_n_f32(v16, a6);
    float32x4_t v27 = vaddq_f32(vsubq_f32(*a3, v26), v24);
    unint64_t v21 = re::PrimitiveRenderingContext::addLine(a1, a3, &v27);
    re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v21, &v28, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v21, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
    float32x4_t v27 = vsubq_f32(vsubq_f32(*a3, v26), v24);
    unint64_t v22 = re::PrimitiveRenderingContext::addLine(a1, a3, &v27);
    re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, v22, &v28, (_anonymous_namespace_ *)(a1 + 240), (unsigned char *)(a1 + 518), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v22, a4, (_anonymous_namespace_ *)(a1 + 200), (unsigned char *)(a1 + 517), *(void *)(a1 + 136), *(void *)(a1 + 528), *(re **)(a1 + 1192));
  }
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    float32x4_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E7097A0;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    float32x2_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *float32x2_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    float32x4_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *float32x4_t v16 = &unk_26E7097F8;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    float32x2_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *float32x2_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E709850;
    v22[1] = a1;
    _OWORD v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    unint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    float32x4_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *float32x4_t v26 = v23;
    v26[1] = v25;
    float32x4_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    float v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *float v28 = &unk_26E7098A8;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E7097A0;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        unint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E7097F8;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        unint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E709850;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E7098A8;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        unsigned int v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *unsigned int v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      float v8 = (void *)(v4 + 192);
    }
    else {
      float v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    float32x2_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    float32x4_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      float v8 = (void *)(v4 + 192);
    }
    else {
      float v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    float32x2_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    float32x4_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      float v8 = (void *)(v4 + 192);
    }
    else {
      float v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    float32x2_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    float32x4_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      float v8 = (void *)(v4 + 192);
    }
    else {
      float v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    float32x2_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    float32x4_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    float32x4_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    float32x4_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    float32x4_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    float32x4_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7097A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7097A0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7097F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7097F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709850;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709850;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7098A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E7098A8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::SkeletalDebugComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 2re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = 0u;
  uint64_t v2 = (void *)(a1 + 208);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v3 = (void *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)uint64_t v4 = &unk_26E6F0818;
  *(_DWORD *)(v4 + 24) = 0;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(void *)(a1 + 64) = 0x3F8000003F800000;
  *(void *)(a1 + 72) = 0x3F8000003F800000;
  *(_DWORD *)(a1 + 80) = 1084227584;
  *(_OWORD *)(a1 + 96) = xmmword_234386CD0;
  *(void *)(a1 + 112) = 0x3CA3D70A3DCCCCCDLL;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_23435FD80;
  *(_OWORD *)(a1 + 144) = xmmword_234376D50;
  *(_OWORD *)(a1 + 160) = xmmword_2343854A0;
  *(void *)(a1 + 176) = -1;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(void *)(a1 + 232) = 0;
  re::DynamicString::setCapacity(v2, 0);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 248) = 0;
  *(void *)(a1 + 2re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::SkeletalDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SkeletalDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t *re::peerVideoStreamingLogObjects(re *this)
{
  {
    re::peerVideoStreamingLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "PeerVideoStreaming");
  }
  return &re::peerVideoStreamingLogObjects(void)::logObjects;
}

uint64_t re::PeerVideoStreamingLogObjects::loggingEnabled(re::PeerVideoStreamingLogObjects *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_26879F000;
  {
    uint64_t v1 = (unsigned char *)&unk_26879F000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"peervideostreaming.log.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 0;
      }
      re::PeerVideoStreamingLogObjects::loggingEnabled(void)::value = v5;
      uint64_t v1 = (unsigned char *)&unk_26879F000;
    }
  }
  return v1[2320];
}

void *re::ecs2::allocInfo_DynamicLightShadowComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_329, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_329))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF901E8, "DynamicLightShadowComponent");
    __cxa_guard_release(&_MergedGlobals_329);
  }
  return &unk_26AF901E8;
}

void re::ecs2::initInfo_DynamicLightShadowComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x8E6D63D77A0FC50CLL;
  v13[1] = "DynamicLightShadowComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF901D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF901D0);
    if (v4)
    {
      char v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF901D8 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "enableDynamicLightShadow";
      *(void *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF901E0 = v11;
      __cxa_guard_release(&qword_26AF901D0);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF901D8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicLightShadowComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DynamicLightShadowComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DynamicLightShadowComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicLightShadowComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::DynamicLightShadowComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F58A8;
}

void *re::internal::defaultDestruct<re::ecs2::DynamicLightShadowComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::DynamicLightShadowComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F58A8;
}

void *re::internal::defaultDestructV2<re::ecs2::DynamicLightShadowComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DynamicLightShadowComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicLightShadowComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicLightShadowComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicLightShadowComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicLightShadowComponent>, this);
}

void re::DynamicArray<re::ecs2::AnimationShadowEntry>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 32);
    uint64_t v4 = 144 * v2;
    do
    {
      re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)v3);
      std::unique_ptr<re::Timeline,std::function<void ()(re::Timeline*)>>::~unique_ptr[abi:nn180100](v3 + 6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 3));
      v3 += 18;
      v4 -= 144;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::DynamicArray<re::ecs2::AnimationEntry>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  if (v2)
  {
    unint64_t result = *(void *)(result + 32);
    uint64_t v3 = 248 * v2;
    do
    {
      re::ecs2::AnimationEntry::~AnimationEntry((id *)result);
      unint64_t result = v4 + 248;
      v3 -= 248;
    }
    while (v3);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

re::ecs2::AnimationComponentEntry *re::DynamicArray<re::ecs2::AnimationComponentEntry>::clear(re::ecs2::AnimationComponentEntry *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = 0;
  if (v2)
  {
    unint64_t result = (re::ecs2::AnimationComponentEntry *)*((void *)result + 4);
    uint64_t v3 = 72 * v2;
    do
    {
      re::ecs2::AnimationComponentEntry::~AnimationComponentEntry(result);
      unint64_t result = (re::ecs2::AnimationComponentEntry *)(v4 + 72);
      v3 -= 72;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

double re::ecs2::AnimationComponentEntry::deinit(re::ecs2::AnimationComponentEntry *this)
{
  if (*(void *)this)
  {

    *(void *)this = 0;
  }
  *((void *)this + 1) = 0;
  *((_WORD *)this + 12) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 40) = 0;
  *((_DWORD *)this + 11) = 0x80000000;
  *((void *)this + 6) = "";
  return re::AnimationController::stop((re::ecs2::AnimationComponentEntry *)((char *)this + 56), 0.0);
}

double re::ecs2::AnimationEntry::deinit(re::ecs2::AnimationEntry *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))(v2 + 288);
    if (v3)
    {
      uint64_t v4 = re::globalAllocators(this)[2];
      (**v3)(v3);
      this = (re::ecs2::AnimationEntry *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40))(v4, v3);
      uint64_t v2 = *((void *)v1 + 6);
      *(void *)(v2 + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 288) = 0;
    }
    uint64_t v5 = re::globalAllocators(this)[2];
    re::FromToByAnimationAssetData<re::GenericSRT<float>>::~FromToByAnimationAssetData(v2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v2);
  }
  *((void *)v1 + 6) = 0;
  uint64_t v6 = (const void *)*((void *)v1 + 11);
  if (v6)
  {
    CFRelease(v6);
    *((void *)v1 + 11) = 0;
  }
  if (*((void *)v1 + 28))
  {
    WeakRetained = objc_loadWeakRetained((id *)v1 + 27);
    if (WeakRetained)
    {
      unint64_t v8 = WeakRetained;
      int v9 = (char *)(WeakRetained - 1);
      do
      {
        uint64_t v10 = v9;
        int v9 = (char *)*((void *)v9 + 3);
      }
      while (v9);
      uint64_t v11 = *((void *)v10 + 2);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 56);
        if (v12)
        {
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
          uint64_t v14 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v13);
          if (v14)
          {
            uint64_t v15 = v14;
            float32x4_t v16 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v8 + 3), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)v15 + 72))(v15, *((void *)v1 + 28), (uint64_t)v16 + 32);
            uint64_t v17 = (re::ecs2::NetworkComponent *)v8[24];
            if (!v17) {
              uint64_t v17 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v8 + 3), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            }
            re::ecs2::NetworkComponent::markDirty(v17, v16);
          }
        }
      }
    }
    *((void *)v1 + 28) = 0;
  }
  objc_destroyWeak((id *)v1 + 27);
  *((void *)v1 + 27) = 0;
  uint64_t v18 = (const void *)*((void *)v1 + 30);
  if (v18)
  {
    CFRelease(v18);
    *((void *)v1 + 30) = 0;
  }
  if (*(void *)v1)
  {

    *(void *)uint64_t v1 = 0;
  }
  *((void *)v1 + 1) = 0;
  uint64_t v19 = *((void *)v1 + 3);
  if (v19)
  {

    *((void *)v1 + 3) = 0;
  }
  *((void *)v1 + 4) = 0;
  *((_WORD *)v1 + 28) = 512;
  *((unsigned char *)v1 + 58) = 0;
  *((void *)v1 + 9) = 0;
  *((void *)v1 + 10) = 0;
  *((void *)v1 + 8) = 0;
  *((void *)v1 + 12) = 0;
  *((void *)v1 + 13) = 0;
  *((_DWORD *)v1 + 29) = 0x80000000;
  *((unsigned char *)v1 + 112) = 0;
  *((void *)v1 + 15) = "";
  *((void *)v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *((unsigned char *)v1 + 136) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)((char *)v1 + 140) = result;
  return result;
}

void re::ecs2::AnimationEntry::parentTimebase(re::ecs2::AnimationEntry *this@<X0>, re::ecs2::Entity *a2@<X1>, OpaqueCMTimebase *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *((void *)this + 11);
  if (v5)
  {
    *(unsigned char *)a4 = 1;
LABEL_3:
    *(void *)(a4 + 8) = v5;
    return;
  }
  uint64_t v7 = *((void *)this + 12);
  if (v7)
  {
    if (*((void *)this + 29) == v7)
    {
      *(unsigned char *)a4 = 1;
      uint64_t v5 = *((void *)this + 30);
      goto LABEL_3;
    }
    unint64_t v8 = a2;
    int v9 = (const void *)*((void *)this + 30);
    if (v9)
    {
      CFRelease(v9);
      *((void *)this + 30) = 0;
    }
    if (!v8) {
      goto LABEL_17;
    }
    do
    {
      uint64_t v10 = v8;
      unint64_t v8 = (re::ecs2::Entity *)*((void *)v8 + 3);
    }
    while (v8);
    uint64_t v11 = *((void *)v10 + 2);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 56)) != 0
      && (uint64_t v13 = (*(uint64_t (**)(uint64_t, re::ecs2::Entity *, OpaqueCMTimebase *))(*(void *)v12 + 32))(v12, a2, a3), (v14 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v13)) != 0)&& (v15 = (*(uint64_t (**)(uint64_t, void))(*(void *)v14 + 96))(v14, *((void *)this + 12))) != 0)
    {
      *((void *)this + 29) = *((void *)this + 12);
      *((void *)this + 30) = v15;
      *(unsigned char *)a4 = 1;
      *(void *)(a4 + 8) = v15;
    }
    else
    {
LABEL_17:
      *(unsigned char *)a4 = 0;
    }
  }
  else
  {
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = a3;
  }
}

void re::ecs2::AnimationShadowEntry::deinit(re::ecs2::AnimationShadowEntry *this)
{
  *(void *)this = 0;
  re::AnimationController::stop((re::ecs2::AnimationShadowEntry *)((char *)this + 8), 0.0);
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  *((void *)this + 4) = 0;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    std::function<void ()(re::Timeline *)>::operator()(*((void *)this + 10), v3);
  }
  *((unsigned char *)this + 88) = 2;
}

re::ecs2::AnimationComponent *re::ecs2::AnimationComponent::AnimationComponent(id **this)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0);
  *(void *)(v2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E709900;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v2 + 120) = 0;
  *(_DWORD *)(v2 + 128) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 160) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_DWORD *)(v2 + 112) = 0;
  *(_OWORD *)(v2 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_DWORD *)(v2 + 200) = 0;
  *(void *)(v2 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = 0;
  *(void *)(v2 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1000;
  *(void *)(v2 + 224) = 0;
  *(void *)(v2 + 232) = 0;
  *(_WORD *)(v2 + 240) = 0;
  re::make::shared::object<re::ecs2::AnimationComponent::AnimationComponentEventDelegate,re::ecs2::AnimationComponent&>((re *)v2, &v5);
  uint64_t v3 = this[10];
  this[10] = v5;
  uint64_t v5 = v3;
  if (v3) {

  }
  return (re::ecs2::AnimationComponent *)this;
}

uint64_t anonymous namespace'::animationTokenIndex<re::ecs2::AnimationShadowEntry>(uint64_t result, unint64_t a2, char *a3, unint64_t a4)
{
  if (!a2) {
    goto LABEL_12;
  }
  uint64_t v4 = &a3[144 * a2];
  uint64_t v5 = a3;
  do
  {
    uint64_t v6 = &v5[144 * (a2 >> 1)];
    unint64_t v8 = *(void *)v6;
    uint64_t v7 = v6 + 144;
    BOOL v9 = v8 >= a4;
    if (v8 >= a4) {
      a2 >>= 1;
    }
    else {
      a2 += ~(a2 >> 1);
    }
    if (!v9) {
      uint64_t v5 = v7;
    }
  }
  while (a2);
  if (v5 != v4 && *(void *)v5 == a4)
  {
    *(unsigned char *)double result = 1;
    *(void *)(result + 8) = 0x8E38E38E38E38E39 * ((v5 - a3) >> 4);
  }
  else
  {
LABEL_12:
    *(unsigned char *)double result = 0;
  }
  return result;
}

uint64_t anonymous namespace'::animationTokenIndex<re::ecs2::AnimationEntry>(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2) {
    goto LABEL_12;
  }
  uint64_t v4 = a3 + 248 * a2;
  uint64_t v5 = a3;
  do
  {
    uint64_t v6 = v5 + 248 * (a2 >> 1);
    unint64_t v7 = *(void *)(v6 + 128);
    uint64_t v8 = v6 + 248;
    if (v7 >= a4) {
      a2 >>= 1;
    }
    else {
      a2 += ~(a2 >> 1);
    }
    if (v7 < a4) {
      uint64_t v5 = v8;
    }
  }
  while (a2);
  if (v5 != v4 && *(void *)(v5 + 128) == a4)
  {
    *(unsigned char *)double result = 1;
    *(void *)(result + 8) = 0xEF7BDEF7BDEF7BDFLL * ((v5 - a3) >> 3);
  }
  else
  {
LABEL_12:
    *(unsigned char *)double result = 0;
  }
  return result;
}

uint64_t re::AssetHandle::loadedAsset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(re::AssetHandle *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

void re::ecs2::AnimationComponent::initOwnershipState(re::ecs2::AnimationComponent *this)
{
  if (!*((unsigned char *)this + 240))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2 && (uint64_t v3 = *(void *)(v2 + 200)) != 0 && *(void *)(v3 + 32) && RESyncableGetOwnerPeerID())
    {
      *((unsigned char *)this + 240) = 1;
    }
    else
    {
      *((unsigned char *)this + 240) = 2;
      uint64_t v4 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
        uint64_t v6 = *((void *)this + 13);
        if (v6)
        {
          double v7 = v5;
          uint64_t v8 = (const re::ecs2::AnimationEntry *)*((void *)this + 15);
          uint64_t v9 = 248 * v6;
          do
          {
            re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v7, v8, (uint64_t)v10);
            if (v10[0]) {
              *((void *)v8 + 9) = v11;
            }
            uint64_t v8 = (const re::ecs2::AnimationEntry *)((char *)v8 + 248);
            v9 -= 248;
          }
          while (v9);
        }
      }
    }
  }
}

uint64_t re::ecs2::AnimationComponent::parentSimulationTimer(re::ecs2::AnimationComponent *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 0;
  }
  do
  {
    uint64_t v2 = v1;
    uint64_t v1 = *(void *)(v1 + 24);
  }
  while (v1);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 56);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
  return re::ServiceLocator::serviceOrNull<re::SimulationTimer>(v5);
}

void re::ecs2::AnimationComponent::animationEntryParentTime(re::ecs2::Entity **this@<X0>, double a2@<D0>, const re::ecs2::AnimationEntry *a3@<X1>, uint64_t a4@<X8>)
{
  re::ecs2::AnimationEntry::parentTimebase(a3, this[2], this[28], (uint64_t)v8);
  if (v8[0])
  {
    if (timebase)
    {
      CMTimebaseGetTime(&time, timebase);
      Float64 Seconds = CMTimeGetSeconds(&time);
      *(unsigned char *)a4 = 1;
      *(Float64 *)(a4 + 8) = Seconds;
    }
    else
    {
      *(unsigned char *)a4 = 1;
      *(double *)(a4 + 8) = a2;
    }
  }
  else
  {
    *(unsigned char *)a4 = 0;
  }
}

void *re::ecs2::AnimationComponent::processFinishedAnimations(void *this, re::ecs2::Component *a2)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 240) != 2)
  {
    if (this[13]) {
      char v41 = 3;
    }
    else {
      char v41 = 1;
    }
    *((unsigned char *)this + 240) = v41;
    return this;
  }
  unint64_t v3 = this[19];
  if (!v3) {
    goto LABEL_50;
  }
  char v4 = 0;
  unint64_t v5 = 0;
LABEL_4:
  char v45 = v4;
  do
  {
    uint64_t v6 = *(void *)(v2 + 168);
    if (*(unsigned char *)(v6 + 248 * v5 + 57) == 2)
    {
      uint64_t v27 = v6 + 248 * v5;
      uint64_t v28 = *(void *)(v27 + 192);
      if (v28)
      {
        uint64_t v29 = *(void **)(v27 + 208);
        uint64_t v30 = &v29[2 * v28];
        do
        {
          uint64_t v31 = *(void *)(v2 + 16);
          do
          {
            uint64_t v32 = v31;
            uint64_t v31 = *(void *)(v31 + 24);
          }
          while (v31);
          uint64_t v33 = *(void *)(v32 + 16);
          *(void *)&v47[0] = *v29;
          uint64_t v34 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v33 + 152, (uint64_t *)v47);
          if (v34)
          {
            uint64_t v35 = *(void *)(v34 + 8);
            if (v35)
            {
              uint64_t v36 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v35 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (v36) {
                re::ecs2::AnimationComponent::stop(v36, v29[1], 0.0);
              }
            }
          }
          v29 += 2;
        }
        while (v29 != v30);
        unint64_t v3 = *(void *)(v2 + 152);
      }
      if (v3 <= v5)
      {
        memset(v47, 0, sizeof(v47));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v37 = *(void *)(v2 + 168);
      if (v3 - 1 > v5)
      {
        uint64_t v38 = (long long *)(v37 + 248 * v5);
        if ((long long *)((char *)v38 + 248) != (long long *)(v37 + 248 * v3))
        {
          uint64_t v39 = 248 * v3 - 248 * v5 - 248;
          do
          {
            uint64_t v40 = (long long *)((char *)v38 + 248);
            re::ecs2::AnimationEntry::operator=(v38, (long long *)((char *)v38 + 248));
            uint64_t v38 = v40;
            v39 -= 248;
          }
          while (v39);
          unint64_t v3 = *(void *)(v2 + 152);
          uint64_t v37 = *(void *)(v2 + 168);
        }
      }
      re::ecs2::AnimationEntry::~AnimationEntry((id *)(v37 + 248 * v3 - 248));
      unint64_t v3 = *(void *)(v2 + 152) - 1;
      *(void *)(v2 + 152) = v3;
      ++*(_DWORD *)(v2 + 160);
      *(_DWORD *)(v2 + 128) = 0;
      char v4 = 1;
      if (v5 >= v3)
      {
LABEL_49:
        re::ecs2::NetworkComponent::markComponentDirty((re::ecs2::NetworkComponent *)v2, a2);
        goto LABEL_50;
      }
      goto LABEL_4;
    }
    uint64_t v7 = v6 + 248 * v5;
    uint64_t v9 = *(void *)(v7 + 88);
    uint64_t v8 = v7 + 88;
    uint64_t v10 = *(void *)(v2 + 16);
    uint64_t v11 = (void *)(v8 + 136);
    if (v9 != *(void *)(v8 + 136) && v10 != 0)
    {
      do
      {
        uint64_t v13 = v10;
        uint64_t v10 = *(void *)(v10 + 24);
      }
      while (v10);
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v15 = *(void *)(v14 + 56);
        if (v15)
        {
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
          uint64_t v17 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v16);
          if (v17)
          {
            uint64_t v18 = v17;
            LOBYTE(v47[0]) = 0;
            SceneDataEntity = makeSceneDataEntity(v14, (uint64_t)v47, 1, re::ecs2::Scene::kSharedSceneDataEntityID, 1);
            uint64_t v46 = (re::ecs2::Entity *)((char *)SceneDataEntity + 32);
            uint64_t v20 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v20)
            {
              unint64_t v21 = (const re::ecs2::Component *)v20;
              if (*v11)
              {
                (*(void (**)(uint64_t, void, uint64_t))(*(void *)v18 + 72))(v18, *v11, v20 + 32);
                uint64_t v22 = (re::ecs2::NetworkComponent *)*((void *)SceneDataEntity + 25);
                if (!v22) {
                  uint64_t v22 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add(v46, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                }
                re::ecs2::NetworkComponent::markDirty(v22, v21);
                *uint64_t v11 = 0;
              }
              uint64_t v23 = v6 + 248 * v5;
              *(void *)(v23 + 96) = 0;
              uint64_t v24 = (uint64_t *)(v23 + 96);
              a2 = *(re::ecs2::Component **)v8;
              if (*(void *)v8)
              {
                uint64_t v25 = (*(uint64_t (**)(uint64_t, re::ecs2::Component *, uint64_t, void))(*(void *)v18 + 64))(v18, a2, (uint64_t)v21 + 32, 0);
                float32x4_t v26 = (re::ecs2::NetworkComponent *)*((void *)SceneDataEntity + 25);
                if (!v26) {
                  float32x4_t v26 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add(v46, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                }
                re::ecs2::NetworkComponent::markDirty(v26, v21);
                if (v25)
                {
                  objc_storeWeak((id *)(v6 + 248 * v5 + 216), (char *)SceneDataEntity + 8);
                  uint64_t *v24 = v25;
                  *uint64_t v11 = *(void *)v8;
                }
              }
            }
          }
        }
      }
    }
    ++v5;
    unint64_t v3 = *(void *)(v2 + 152);
  }
  while (v5 < v3);
  if (v45) {
    goto LABEL_49;
  }
LABEL_50:
  this = re::ecs2::AnimationComponent::synchronizeOwnedAnimationEntries((void *)v2);
  uint64_t v43 = *(void *)(v2 + 152);
  if (v43 != *(void *)(v2 + 104))
  {
LABEL_59:
    re::internal::assertLog((re::internal *)4, v42, "assertion failure: '%s' (%s:line %i) Owned animation entries expected to match animation entries.", "m_ownedAnimationEntries.size() == m_animationEntries.size()", "processFinishedAnimations", 726);
    _os_crash();
    __break(1u);
  }
  if (v43) {
    char v44 = 2;
  }
  else {
    char v44 = 1;
  }
  *(unsigned char *)(v2 + 240) = v44;
  if (!v43)
  {
    return re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)(v2 + 136), 0);
  }
  return this;
}

uint64_t re::ecs2::AnimationComponent::stop(uint64_t this, uint64_t a2, float a3)
{
  uint64_t v3 = *(void *)(this + 152);
  if (v3)
  {
    char v4 = (float *)(*(void *)(this + 168) + 148);
    uint64_t v5 = 248 * v3;
    while (*(void *)(v4 - 5) != a2)
    {
      v4 += 62;
      v5 -= 248;
      if (!v5) {
        return re::ecs2::Component::enqueueMarkDirty(this);
      }
    }
    if (a3 <= 0.0)
    {
      char v7 = 2;
    }
    else
    {
      *char v4 = a3;
      char v7 = 4;
    }
    *((unsigned char *)v4 - 91) = v7;
    *(_DWORD *)(this + 128) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void *re::ecs2::AnimationComponent::synchronizeOwnedAnimationEntries(void *this)
{
  if (!*((unsigned char *)this + 241))
  {
    uint64_t v1 = (uint64_t)this;
    if (*((unsigned char *)this + 240) == 2)
    {
      int v2 = *((_DWORD *)this + 32);
      if (!v2 || *((_DWORD *)this + 28) != v2)
      {
        this = (void *)re::DynamicArray<re::ecs2::AnimationEntry>::clear((uint64_t)(this + 11));
        uint64_t v3 = *(void *)(v1 + 136);
        if (*(void *)(v1 + 88))
        {
          char v4 = (void *)(v1 + 88);
          if (v3)
          {
            this = re::DynamicArray<re::ecs2::AnimationEntry>::copy(v4, v1 + 136);
            ++*(_DWORD *)(v1 + 112);
          }
          else
          {
            this = (void *)re::DynamicArray<re::ecs2::AnimationEntry>::clear((uint64_t)v4);
          }
        }
        else if (v3)
        {
          unint64_t v5 = *(void *)(v1 + 152);
          *(void *)(v1 + 88) = v3;
          re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)(v1 + 88), v5);
          ++*(_DWORD *)(v1 + 112);
          this = re::DynamicArray<re::ecs2::AnimationEntry>::copy((void *)(v1 + 88), v1 + 136);
        }
        *(_DWORD *)(v1 + 128) = *(_DWORD *)(v1 + 112);
        if (!*(void *)(v1 + 104))
        {
          return re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)(v1 + 88), 0);
        }
      }
    }
  }
  return this;
}

void re::ecs2::AnimationComponent::processDefaultTimebaseChanges(re::ecs2::AnimationComponent *this)
{
  if (*((void *)this + 9) != *((void *)this + 29))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      do
      {
        uint64_t v3 = v2;
        uint64_t v2 = *(void *)(v2 + 24);
      }
      while (v2);
      uint64_t v4 = *(void *)(v3 + 16);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 56);
        if (v5)
        {
          uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
          uint64_t v7 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v6);
          uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 96))(v7, *((void *)this + 9));
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v10 = (const void *)*((void *)this + 28);
            if (v10) {
              CFRelease(v10);
            }
            uint64_t v11 = *((void *)this + 9);
            *((void *)this + 28) = v9;
            *((void *)this + 29) = v11;
          }
        }
      }
    }
  }
}

uint64_t re::ecs2::AnimationComponent::processActiveAnimations(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v54 = (_anonymous_namespace_ *)(a1 + 176);
  long long v5 = 0uLL;
  __asm { FMOV            V8.2S, #1.0 }
  int v10 = 1;
  do
  {
    *(unsigned char *)(a1 + 241) = 1;
    unint64_t v11 = *(void *)(a1 + 192);
    unint64_t v12 = *(void *)(a1 + 104);
    if (!v11) {
      goto LABEL_37;
    }
    if (!v12)
    {
LABEL_33:
      uint64_t v26 = 144 * v12;
      unint64_t v27 = v12;
      do
      {
        uint64_t v28 = (uint64_t *)(*(void *)(a1 + 208) + v26);
        re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)v28);
        std::unique_ptr<re::Timeline,std::function<void ()(re::Timeline*)>>::~unique_ptr[abi:nn180100](v28 + 6);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v28 + 3));
        ++v27;
        v26 += 144;
      }
      while (v27 < *(void *)(a1 + 192));
      *(void *)(a1 + 192) = v12;
      ++*(_DWORD *)(a1 + 200);
      if (!v12) {
        goto LABEL_46;
      }
      goto LABEL_45;
    }
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(a1 + 120) + 248 * v13;
      uint64_t v15 = *(void *)(a1 + 208);
      uint64_t v16 = (uint64_t *)(v15 + 144 * v13);
      unint64_t v17 = *(void *)(v14 + 128);
      if (v17 <= *v16)
      {
        if (v17 < *v16)
        {
          int v62 = 0;
          *(_OWORD *)&v63[4] = v5;
          long long v64 = v5;
          long long v59 = v5;
          long long v60 = v5;
          long long v57 = v5;
          long long v58 = v5;
          long long v55 = v5;
          long long v56 = v5;
          BYTE8(v60) = 2;
          uint64_t v61 = 0;
          *(void *)unint64_t v63 = _D8;
          unint64_t v12 = v11 + 1;
          v63[12] = 0;
          if (v11 + 1 <= v13) {
            goto LABEL_76;
          }
          if (v11 >= *(void *)(a1 + 184))
          {
            re::DynamicArray<re::ecs2::AnimationShadowEntry>::growCapacity(v54, v11 + 1);
            long long v5 = 0uLL;
            unint64_t v11 = *(void *)(a1 + 192);
            uint64_t v15 = *(void *)(a1 + 208);
          }
          uint64_t v20 = v15 + 144 * v11;
          if (v11 <= v13)
          {
            *(void *)(v20 + 80) = 0;
            *(_OWORD *)uint64_t v20 = v5;
            *(_OWORD *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v5;
            *(_OWORD *)(v20 + 32) = v5;
            *(void *)(v20 + 48) = 0;
            *(_WORD *)(v20 + 88) = 2;
            *(void *)(v20 + 96) = 0;
            *(unsigned char *)(v20 + 104) = 0;
            *(void *)(v20 + 108) = _D8;
            *(_DWORD *)(v20 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
            *(unsigned char *)(v20 + 120) = 0;
          }
          else
          {
            *(void *)(v20 + 80) = 0;
            *(_OWORD *)uint64_t v20 = v5;
            *(_OWORD *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v5;
            *(_OWORD *)(v20 + 32) = v5;
            *(void *)(v20 + 48) = 0;
            *(_WORD *)(v20 + 88) = 2;
            *(void *)(v20 + 96) = 0;
            *(unsigned char *)(v20 + 104) = 0;
            *(void *)(v20 + 108) = _D8;
            *(_DWORD *)(v20 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
            *(unsigned char *)(v20 + 120) = 0;
            re::ecs2::AnimationShadowEntry::operator=((uint64_t *)v20, (uint64_t *)(v20 - 144));
            uint64_t v21 = *(void *)(a1 + 208);
            uint64_t v22 = *(void *)(a1 + 192);
            uint64_t v23 = (uint64_t *)(v21 + 144 * v22 - 144);
            if (v23 != (uint64_t *)(v21 + 144 * v13))
            {
              uint64_t v24 = 144 * v13 - 144 * v22 + 144;
              do
              {
                unint64_t v12 = (unint64_t)(v23 - 18);
                re::ecs2::AnimationShadowEntry::operator=(v23, v23 - 18);
                uint64_t v23 = (uint64_t *)v12;
                v24 += 144;
              }
              while (v24);
              uint64_t v21 = *(void *)(a1 + 208);
            }
            uint64_t v20 = v21 + 144 * v13;
          }
          re::ecs2::AnimationShadowEntry::operator=((uint64_t *)v20, (uint64_t *)&v55);
          ++*(void *)(a1 + 192);
          ++*(_DWORD *)(a1 + 200);
          re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)&v55);
          std::unique_ptr<re::Timeline,std::function<void ()(re::Timeline*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v58);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v56 + 8));
          unint64_t v2 = *(void *)(a1 + 192);
          if (v2 <= v13) {
            goto LABEL_77;
          }
          uint64_t v16 = (uint64_t *)(*(void *)(a1 + 208) + 144 * v13);
        }
        ++v13;
        unint64_t v11 = *(void *)(a1 + 192);
      }
      else
      {
        if (v11 <= v13)
        {
          *(void *)unint64_t v65 = 0;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v55 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v72[0] = 136315906;
          *(void *)&v72[1] = "removeStableAt";
          LOWORD(v72[3]) = 1024;
          *(_DWORD *)((char *)&v72[3] + 2) = 969;
          HIWORD(v72[4]) = 2048;
          *(void *)&v72[5] = v13;
          LOWORD(v72[7]) = 2048;
          *(void *)((char *)&v72[7] + 2) = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_76:
          long long v73 = 0u;
          long long v74 = 0u;
          memset(v72, 0, sizeof(v72));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v65 = 136315906;
          *(void *)&v65[4] = "insert";
          __int16 v66 = 1024;
          int v67 = 887;
          __int16 v68 = 2048;
          unint64_t v69 = v13;
          __int16 v70 = 2048;
          unint64_t v71 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_77:
          *(void *)unint64_t v65 = 0;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v55 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v72[0] = 136315906;
          *(void *)&v72[1] = "operator[]";
          LOWORD(v72[3]) = 1024;
          *(_DWORD *)((char *)&v72[3] + 2) = 789;
          HIWORD(v72[4]) = 2048;
          *(void *)&v72[5] = v13;
          LOWORD(v72[7]) = 2048;
          *(void *)((char *)&v72[7] + 2) = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_78;
        }
        if (v11 - 1 > v13 && v16 + 18 != (uint64_t *)(v15 + 144 * v11))
        {
          uint64_t v18 = 144 * v11 - 144 * v13 - 144;
          do
          {
            uint64_t v19 = v16 + 18;
            re::ecs2::AnimationShadowEntry::operator=(v16, v16 + 18);
            uint64_t v16 = v19;
            v18 -= 144;
          }
          while (v18);
          unint64_t v11 = *(void *)(a1 + 192);
          uint64_t v15 = *(void *)(a1 + 208);
        }
        unint64_t v2 = v15 + 144 * v11;
        re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)(v2 - 144));
        std::unique_ptr<re::Timeline,std::function<void ()(re::Timeline*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v2 - 96));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v2 - 120));
        unint64_t v11 = *(void *)(a1 + 192) - 1;
        *(void *)(a1 + 192) = v11;
        ++*(_DWORD *)(a1 + 200);
      }
      unint64_t v12 = *(void *)(a1 + 104);
      _CF = v13 >= v11 || v13 >= v12;
      long long v5 = 0uLL;
    }
    while (!_CF);
    if (v11 > v12) {
      goto LABEL_33;
    }
LABEL_37:
    if (v11 >= v12)
    {
      unint64_t v12 = v11;
      if (!v11) {
        goto LABEL_46;
      }
LABEL_45:
      uint64_t v36 = *(void *)(a1 + 104);
      if (v12 == v36) {
        goto LABEL_46;
      }
LABEL_78:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Expected shadow entry count(%zu) to match entry count (%zu)!", "!m_shadowEntries.size() || m_shadowEntries.size() == m_animationEntries.size()", "processActiveAnimations", 852, v12, v36);
      _os_crash();
      __break(1u);
    }
    uint64_t v29 = 248 * v11;
    long long v30 = 0uLL;
    do
    {
      uint64_t v31 = *(void *)(a1 + 120);
      int v62 = 0;
      *(_OWORD *)&v63[4] = v30;
      long long v64 = v30;
      long long v59 = v30;
      long long v60 = v30;
      long long v57 = v30;
      long long v58 = v30;
      long long v55 = v30;
      long long v56 = v30;
      BYTE8(v60) = 2;
      uint64_t v61 = 0;
      *(void *)unint64_t v63 = _D8;
      v63[12] = 0;
      unint64_t v32 = *(void *)(a1 + 192);
      long long v33 = 0uLL;
      if (v32 >= *(void *)(a1 + 184))
      {
        re::DynamicArray<re::ecs2::AnimationShadowEntry>::growCapacity(v54, v32 + 1);
        long long v33 = 0uLL;
        unint64_t v32 = *(void *)(a1 + 192);
      }
      uint64_t v34 = *(void *)(a1 + 208) + 144 * v32;
      *(void *)(v34 + 80) = 0;
      *(_OWORD *)uint64_t v34 = v33;
      *(_OWORD *)(v34 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v33;
      *(_OWORD *)(v34 + 32) = v33;
      *(void *)(v34 + 48) = 0;
      *(_WORD *)(v34 + 88) = 2;
      *(void *)(v34 + 96) = 0;
      *(unsigned char *)(v34 + 104) = 0;
      *(void *)(v34 + 108) = _D8;
      *(_DWORD *)(v34 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
      *(unsigned char *)(v34 + 120) = 0;
      re::ecs2::AnimationShadowEntry::operator=((uint64_t *)v34, (uint64_t *)&v55);
      ++*(void *)(a1 + 192);
      ++*(_DWORD *)(a1 + 200);
      re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)&v55);
      std::unique_ptr<re::Timeline,std::function<void ()(re::Timeline*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v58);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v56 + 8));
      long long v30 = 0uLL;
      v10 &= v35;
      ++v11;
      v29 += 248;
    }
    while (v11 < *(void *)(a1 + 104));
    unint64_t v12 = *(void *)(a1 + 192);
    if (v12) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v37 = *(re::ecs2::NetworkComponent **)(v2 + 200);
      if (v37)
      {
        if (*((void *)v37 + 4))
        {
          if (RESyncableIsAuthoritative())
          {
            unint64_t v12 = *(void *)(a1 + 192);
            goto LABEL_51;
          }
        }
        else
        {
LABEL_51:
          if (v12)
          {
            uint64_t v52 = v37;
            uint64_t v53 = (re::ecs2::Entity *)v2;
            BOOL v38 = 0;
            char v39 = 0;
            uint64_t v40 = (unsigned char *)(*(void *)(a1 + 208) + 88);
            uint64_t v41 = 144 * v12;
            do
            {
              if (!*v40)
              {
                unint64_t v2 = v40[16] & 4;
                uint64_t v42 = *((void *)v40 - 7);
                if (!v42) {
                  goto LABEL_59;
                }
                unsigned int v43 = atomic_load((unsigned int *)(v42 + 704));
                if (v43 != 2) {
                  goto LABEL_59;
                }
                char v44 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
                char v45 = (uint64_t *)*((void *)v40 - 7);
                if (v45) {
                  char v45 = (uint64_t *)v45[33];
                }
                if (v44 == v45)
                {
                  uint64_t v46 = re::AssetHandle::loadedAsset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)(v40 - 64));
                  if (v46) {
                    re::AnimationSceneEntityData::markTargetEntityAsDirty((re::AnimationSceneEntityData *)(v46 + 24), v53, v2 == 0);
                  }
                }
                else
                {
LABEL_59:
                  BOOL v38 = (v38 | (v2 >> 2)) != 0;
                  v39 |= v2 == 0;
                }
              }
              v40 += 144;
              v41 -= 144;
            }
            while (v41);
            if ((v39 & 1) != 0 && (uint64_t v47 = (const re::ecs2::Component *)*((void *)v53 + 21)) != 0)
            {
              uint64_t v48 = v52;
              re::ecs2::NetworkComponent::markDirty(v52, v47);
            }
            else
            {
              uint64_t v48 = v52;
            }
            if (v38)
            {
              long long v49 = (const re::ecs2::Component *)*((void *)v53 + 30);
              if (v49) {
                re::ecs2::NetworkComponent::markDirty(v48, v49);
              }
            }
          }
        }
      }
    }
    *(unsigned char *)(a1 + 241) = 0;
    int v50 = *(_DWORD *)(a1 + 128);
    re::ecs2::AnimationComponent::synchronizeOwnedAnimationEntries((void *)a1);
    long long v5 = 0uLL;
  }
  while (v50 != *(_DWORD *)(a1 + 128));
  if (!*(void *)(a1 + 192)) {
    re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(v54, 0);
  }
  return v10 & 1;
}

uint64_t anonymous namespace'::processAnimationState(uint64_t a1, uint64_t *a2, uint64_t a3, re::ecs2::Entity **a4, OpaqueCMTimebase *a5)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  re::ecs2::AnimationEntry::parentTimebase((re::ecs2::AnimationEntry *)a1, a4[2], a5, (uint64_t)v85);
  if (!v85[0]) {
    return 0;
  }
  int v11 = *(unsigned __int8 *)(a1 + 57);
  if (v11 == *((unsigned __int8 *)a2 + 88))
  {
    int v12 = 0;
    goto LABEL_4;
  }
  if (v11 == 2)
  {
    re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)a2);
    return 1;
  }
  uint64_t v40 = *(void *)(a1 + 128);
  if (v40 != *a2)
  {
    *a2 = v40;
    *((unsigned char *)a2 + 104) = *(unsigned char *)(a1 + 136);
  }
  uint64_t v41 = a2[1];
  if (v41)
  {
    uint64_t v9 = (re *)re::DataArray<re::internal::TimelineTree>::tryGet(v41 + (a2[2] >> 56 << 6) + 72, a2[2]);
    if (v9)
    {
      int v12 = 0;
      int v42 = *(unsigned __int8 *)(a1 + 57);
LABEL_92:
      switch(v42)
      {
        case 0:
          re::AnimationController::resume((re::AnimationController *)(a2 + 1));
          int v12 = 1;
          break;
        case 1:
        case 3:
        case 5:
          re::AnimationController::pause((re::AnimationController *)(a2 + 1));
          break;
        default:
          long long v74 = *re::ecsComponentsLogObjects(v9);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            int v75 = *(char *)(a1 + 57);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v75;
            _os_log_impl(&dword_233120000, v74, OS_LOG_TYPE_DEFAULT, "Unexpected animiation playback state: %u", buf, 8u);
          }
          break;
      }
      goto LABEL_4;
    }
  }
  if (!*(void *)(a1 + 48))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v84, (const re::AssetHandle *)a1);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v84);
    re::AssetHandle::operator=((uint64_t)(a2 + 3), (uint64_t *)a1);
    if (Timeline) {
      goto LABEL_88;
    }
    return 0;
  }
  *(void *)uint64_t v90 = &unk_26E709A58;
  *(void *)&v92[4] = v90;
  *(void *)&long long v95 = &buf[8];
  *(void *)&buf[8] = &unk_26E709A58;
  *(void *)buf = 0;
  uint64_t v45 = a2[6];
  a2[6] = v44;
  if (v45) {
    std::function<void ()(re::Timeline *)>::operator()(a2[10], v45);
  }
  uint64_t v46 = a2 + 7;
  uint64_t v47 = (uint64_t *)a2[10];
  a2[10] = 0;
  if (v47 == a2 + 7)
  {
    (*(void (**)(uint64_t *))(*v46 + 32))(a2 + 7);
  }
  else if (v47)
  {
    (*(void (**)(uint64_t *))(*v47 + 40))(v47);
  }
  if ((void)v95)
  {
    if ((uint8_t *)v95 == &buf[8])
    {
      a2[10] = (uint64_t)v46;
      (*(void (**)(uint8_t *, uint64_t *))(*(void *)&buf[8] + 24))(&buf[8], a2 + 7);
    }
    else
    {
      a2[10] = v95;
      *(void *)&long long v95 = 0;
    }
  }
  else
  {
    a2[10] = 0;
  }
  std::unique_ptr<re::Timeline,std::function<void ()(re::Timeline*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(re::Timeline *)>::~__value_func[abi:nn180100](v90);
  Timeline = (void *)a2[6];
  if (!Timeline) {
    return 0;
  }
LABEL_88:
  long long v82 = *(_OWORD *)(a1 + 104);
  uint64_t v83 = *(void *)(a1 + 120);
  a2[1] = (*(uint64_t (**)(uint64_t, void *, uint8_t *, long long *, void, re::ecs2::Entity **))(*(void *)a3 + 72))(a3, Timeline, buf, &v82, *(unsigned __int8 *)(a1 + 136), a4 + 10);
  a2[2] = v71;
  double v10 = re::BindNode::deinit((re::BindNode *)buf);
  uint64_t v72 = a2[1];
  if (v72)
  {
    uint64_t v73 = *a2;
    uint64_t v9 = (re *)re::DataArray<re::internal::TimelineTree>::tryGet(v72 + (a2[2] >> 56 << 6) + 72, a2[2]);
    if (v9) {
      *((void *)v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = v73;
    }
  }
  int v42 = *(unsigned __int8 *)(a1 + 57);
  int v12 = 1;
  if (*(unsigned char *)(a1 + 57)) {
    goto LABEL_92;
  }
LABEL_4:
  *((unsigned char *)a2 + 88) = *(unsigned char *)(a1 + 57);
  float v13 = *(float *)(a1 + 140);
  if (*((float *)a2 + 27) != v13)
  {
    re::AnimationController::setSpeed((uint64_t)(a2 + 1), v13);
    *((_DWORD *)a2 + 27) = *(_DWORD *)(a1 + 140);
  }
  float v14 = *(float *)(a1 + 144);
  if (*((float *)a2 + 28) != v14)
  {
    re::AnimationController::setBlendFactor((re::AnimationController *)(a2 + 1), v14, 0);
    *((_DWORD *)a2 + 28) = *(_DWORD *)(a1 + 144);
    int v12 = 1;
  }
  uint64_t v15 = v86;
  if (v86 != (void *)a2[12])
  {
    re::AnimationController::setParentClockOrTimebase(a2 + 1, v86);
    a2[12] = (uint64_t)v15;
  }
  if (*((unsigned __int8 *)a2 + 89) != *(unsigned __int8 *)(a1 + 58))
  {
    re::AnimationController::setTime(a2 + 1, *(double *)(a1 + 80));
    *((unsigned char *)a2 + 89) = *(unsigned char *)(a1 + 58);
    int v12 = 1;
  }
  LODWORD(v10) = *(_DWORD *)(a1 + 148);
  if (*((float *)a2 + 29) != *(float *)&v10)
  {
    re::AnimationController::stop((re::AnimationController *)(a2 + 1), v10);
    *((_DWORD *)a2 + 29) = *(_DWORD *)(a1 + 148);
  }
  if (!*((unsigned char *)a2 + 120) || !*(unsigned char *)(a1 + 152))
  {
    if (!(*(unsigned __int8 *)(a1 + 152) | *((unsigned __int8 *)a2 + 120))) {
      goto LABEL_108;
    }
    if (!*(unsigned char *)(a1 + 152))
    {
      if (!*((unsigned char *)a2 + 120)) {
        goto LABEL_101;
      }
      unint64_t v48 = a2[17];
      if (!v48) {
        goto LABEL_101;
      }
      long long v49 = a4[2];
      if (!v49) {
        goto LABEL_101;
      }
      unint64_t v50 = *a2;
      uint64_t v51 = a4[2];
      do
      {
        uint64_t v52 = v51;
        uint64_t v51 = (re::ecs2::Entity *)*((void *)v51 + 3);
      }
      while (v51);
      uint64_t v53 = *((void *)v52 + 2);
      if (!v53) {
        goto LABEL_101;
      }
      *(void *)buf = a2[16];
      uint64_t v54 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v53 + 152, (uint64_t *)buf);
      if (!v54) {
        goto LABEL_101;
      }
      uint64_t v55 = *(void *)(v54 + 8);
      if (!v55) {
        goto LABEL_101;
      }
      uint64_t v56 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v55 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!v56) {
        goto LABEL_101;
      }
      uint64_t v26 = v56;
      uint64_t v57 = *((void *)v49 + 37);
      if (!v88[0]) {
        goto LABEL_101;
      }
      unint64_t v58 = v89;
      unint64_t v59 = *(void *)(v26 + 152);
      if (v59 <= v89)
      {
        v87[0] = 0;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v90 = 136315906;
        *(void *)&v90[4] = "operator[]";
        *(_WORD *)&v90[12] = 1024;
        *(_DWORD *)&v90[14] = 789;
        __int16 v91 = 2048;
        *(void *)float32x4_t v92 = v58;
        *(_WORD *)&v92[8] = 2048;
        *(void *)&v92[10] = v59;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
        uint64_t v60 = *(void *)(v26 + 168);
        uint64_t v61 = v60 + 248 * v89;
        unint64_t v63 = *(void *)(v61 + 192);
        int v62 = (uint64_t *)(v61 + 192);
        unint64_t v59 = v63;
        long long v64 = (char *)v62[2];
        unint64_t v65 = &v64[16 * v63];
        __int16 v66 = v64;
        if (v63)
        {
          uint64_t v67 = 16 * v59;
          __int16 v66 = (char *)v62[2];
          while (*(void *)v66 != v57 || *((void *)v66 + 1) != v50)
          {
            v66 += 16;
            v67 -= 16;
            if (!v67)
            {
              __int16 v66 = v65;
              break;
            }
          }
        }
        unint64_t v50 = (v66 - v64) >> 4;
        if (v50 == v59) {
          goto LABEL_100;
        }
        if (v59 > v50)
        {
          uint64_t v68 = v59 - 1;
          if (v59 - 1 > v50)
          {
            *(_OWORD *)&v64[16 * v50] = *((_OWORD *)v65 - 1);
            uint64_t v68 = *v62 - 1;
          }
          *int v62 = v68;
          ++*(_DWORD *)(v60 + 248 * v58 + 200);
          goto LABEL_100;
        }
      }
      v87[0] = 0;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v90 = 136315906;
      *(void *)&v90[4] = "removeAt";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 931;
      __int16 v91 = 2048;
      *(void *)float32x4_t v92 = v50;
      *(_WORD *)&v92[8] = 2048;
      *(void *)&v92[10] = v59;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      JUMPOUT(0x2339E85A0);
    }
LABEL_23:
    re::AnimationController::timebase(a2 + 1, (uint64_t)buf);
    if (!buf[0]) {
      goto LABEL_101;
    }
    re::AnimationController::timebase(a2 + 1, (uint64_t)v80);
    unint64_t v16 = *(void *)(a1 + 168);
    if (!v16) {
      goto LABEL_101;
    }
    unint64_t v17 = (unint64_t)a4[2];
    if (!v17) {
      goto LABEL_101;
    }
    uint64_t v18 = v81;
    uint64_t v19 = *a2;
    uint64_t v20 = a4[2];
    do
    {
      uint64_t v21 = v20;
      uint64_t v20 = (re::ecs2::Entity *)*((void *)v20 + 3);
    }
    while (v20);
    uint64_t v22 = *((void *)v21 + 2);
    if (!v22) {
      goto LABEL_101;
    }
    *(void *)buf = *(void *)(a1 + 160);
    uint64_t v23 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v22 + 152, (uint64_t *)buf);
    if (!v23) {
      goto LABEL_101;
    }
    uint64_t v24 = *(void *)(v23 + 8);
    if (!v24) {
      goto LABEL_101;
    }
    uint64_t v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v24 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (!v25) {
      goto LABEL_101;
    }
    uint64_t v26 = v25;
    if (!v88[0]) {
      goto LABEL_101;
    }
    unint64_t v27 = v89;
    unint64_t v28 = *(void *)(v26 + 192);
    if (v28 <= v89)
    {
      v87[0] = 0;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      *(_OWORD *)buf = 0u;
      unint64_t v79 = v28;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v90 = 136315906;
      *(void *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 789;
      __int16 v91 = 2048;
      *(void *)float32x4_t v92 = v27;
      *(_WORD *)&v92[8] = 2048;
      *(void *)&v92[10] = v79;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      re::AnimationController::timebase((void *)(*(void *)(v26 + 208) + 144 * v89 + 8), (uint64_t)v87);
      if (!LOBYTE(v87[0])) {
        goto LABEL_101;
      }
      CMTimebaseSetSourceTimebase(v18, (CMTimebaseRef)v87[1]);
      uint64_t v29 = *(void *)(v17 + 296);
      if (!v88[0]) {
        goto LABEL_101;
      }
      unint64_t v17 = v89;
      unint64_t v16 = *(void *)(v26 + 152);
      if (v16 > v89)
      {
        uint64_t v30 = *(void *)(v26 + 168);
        uint64_t v31 = v30 + 248 * v89;
        unint64_t v34 = *(void *)(v31 + 192);
        long long v33 = (unint64_t *)(v31 + 192);
        unint64_t v32 = v34;
        unint64_t v35 = *(v33 - 1);
        if (v34 >= v35)
        {
          unint64_t v36 = v32 + 1;
          if (v35 < v32 + 1)
          {
            uint64_t v37 = (_anonymous_namespace_ *)(v33 - 2);
            if (*(v33 - 2))
            {
              unint64_t v38 = 2 * v35;
              if (!v35) {
                unint64_t v38 = 8;
              }
              if (v38 <= v36) {
                unint64_t v39 = v36;
              }
              else {
                unint64_t v39 = v38;
              }
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(v37, v39);
            }
            else
            {
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(v33 - 2, v36);
              ++*(_DWORD *)(v30 + 248 * v17 + 200);
            }
          }
          unint64_t v32 = *v33;
        }
        uint64_t v76 = v30 + 248 * v17;
        unint64_t v77 = (void *)(*(void *)(v76 + 208) + 16 * v32);
        *unint64_t v77 = v29;
        v77[1] = v19;
        unint64_t *v33 = v32 + 1;
        ++*(_DWORD *)(v76 + 200);
LABEL_100:
        *(_DWORD *)(v26 + 128) = 0;
LABEL_101:
        if (*((unsigned char *)a2 + 120)) {
          BOOL v78 = 0;
        }
        else {
          BOOL v78 = *(unsigned char *)(a1 + 152) == 0;
        }
        if (!v78)
        {
          if (!*((unsigned char *)a2 + 120) || *(unsigned char *)(a1 + 152))
          {
            if (!*((unsigned char *)a2 + 120))
            {
              if (*(unsigned char *)(a1 + 152)) {
                *((unsigned char *)a2 + 120) = 1;
              }
            }
            *((_OWORD *)a2 + 8) = *(_OWORD *)(a1 + 160);
            if (!v12) {
              return 1;
            }
            goto LABEL_109;
          }
          *((unsigned char *)a2 + 120) = 0;
        }
        goto LABEL_108;
      }
    }
    v87[2] = 0;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v90 = 136315906;
    *(void *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 789;
    __int16 v91 = 2048;
    *(void *)float32x4_t v92 = v17;
    *(_WORD *)&v92[8] = 2048;
    *(void *)&v92[10] = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (a2[16] != *(void *)(a1 + 160) || a2[17] != *(void *)(a1 + 168)) {
    goto LABEL_23;
  }
LABEL_108:
  if (v12) {
LABEL_109:
  }
    re::AnimationController::updateAndApply((re::AnimationController *)(a2 + 1));
  return 1;
}

uint64_t re::ServiceLocator::serviceOrNull<re::SimulationTimer>(uint64_t a1)
{
  {
    re::introspect<re::SimulationTimer>(void)::info = re::introspect_SimulationTimer(0);
  }
  uint64_t v2 = re::introspect<re::SimulationTimer>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void re::ecs2::AnimationComponent::pauseAnimationsForDeactivation(re::ecs2::AnimationComponent *this)
{
  if (*((unsigned char *)this + 240) == 2)
  {
    uint64_t v2 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
      uint64_t v4 = *((void *)this + 19);
      if (v4)
      {
        double v5 = v3;
        uint64_t v6 = *((void *)this + 21);
        uint64_t v7 = 248 * v4;
        do
        {
          if (!*(unsigned char *)(v6 + 57))
          {
            double v8 = *(double *)(v6 + 72);
            *(unsigned char *)(v6 + 57) = 3;
            re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v5, (const re::ecs2::AnimationEntry *)v6, (uint64_t)v14);
            if (v14[0])
            {
              double v10 = *(double *)(v6 + 80) + (v15 - v8) * *(float *)(v6 + 140);
              *(double *)(v6 + 72) = v15;
              *(double *)(v6 + 80) = v10;
            }
            else
            {
              int v11 = *re::ecsComponentsLogObjects(v9);
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)float v13 = 0;
                _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Animation deactivated while desynchronized, possible inconsistent state.", v13, 2u);
              }
              double v12 = *(double *)(v6 + 80) + (v5 - v8) * *(float *)(v6 + 140);
              *(double *)(v6 + 72) = v5;
              *(double *)(v6 + 80) = v12;
            }
            ++*(unsigned char *)(v6 + 58);
            *((_DWORD *)this + 32) = 0;
          }
          v6 += 248;
          v7 -= 248;
        }
        while (v7);
      }
    }
  }
}

void re::ecs2::AnimationComponent::detachAnimations(re::ecs2::AnimationComponent *this)
{
  if (*((unsigned char *)this + 240) == 2)
  {
    re::ecs2::AnimationComponent::pauseAnimationsForDeactivation(this);
    uint64_t v2 = *((void *)this + 19);
    if (v2)
    {
      uint64_t v3 = 248 * v2;
      uint64_t v4 = (unsigned char *)(*((void *)this + 21) + 57);
      do
      {
        if (*v4 == 3) {
          *uint64_t v4 = 5;
        }
        v4 += 248;
        v3 -= 248;
      }
      while (v3);
    }
    re::DynamicArray<re::ecs2::AnimationShadowEntry>::clear((uint64_t)this + 176);
  }
}

uint64_t re::ecs2::AnimationComponent::play(uint64_t a1, uint64_t *a2, long long *a3, unsigned int a4, char a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10
    || (uint64_t v11 = *(void *)(v10 + 200)) == 0
    || !*(void *)(v11 + 32)
    || (uint64_t IsAuthoritative = RESyncableIsAuthoritative(), (IsAuthoritative & 1) != 0))
  {
    re::ecs2::AnimationEntry::AnimationEntry((re::ecs2::AnimationEntry *)v27);
    uint64_t v13 = re::ecs2::AnimationComponent::parentSimulationTimer((re::ecs2::AnimationComponent *)a1);
    uint64_t v14 = 0;
    if (v13 && (*(unsigned char *)(v10 + 288) & 1) != 0)
    {
      (*(void (**)(uint64_t, double))(*(void *)v13 + 48))(v13, 0.0);
      char v15 = 0;
    }
    else
    {
      char v15 = 3;
    }
    uint64_t v31 = v14;
    char v30 = v15;
    *(unsigned char *)(a1 + 240) = 2;
    uint64_t v16 = *(void *)(a1 + 216) + 1;
    do
    {
      uint64_t v17 = v16;
      uint64_t v16 = 1;
    }
    while (!v17);
    *(void *)(a1 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v17;
    long long v33 = *a3;
    uint64_t v34 = *((void *)a3 + 2);
    uint64_t v35 = v17;
    uint64_t v32 = 0;
    char v29 = a5;
    char v36 = a4;
    re::AssetHandle::operator=((uint64_t)v28, a2);
    uint64_t v18 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    uint64_t v19 = a2[1];
    if (v19) {
      uint64_t v20 = *(uint64_t **)(v19 + 264);
    }
    else {
      uint64_t v20 = 0;
    }
    if (v18 == v20)
    {
      re::AssetHandle::loadNow(v19, 0);
      uint64_t v23 = re::AssetHandle::loadedAsset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)a2);
      if (!v23) {
        goto LABEL_21;
      }
      re::AnimationSceneEntityData::prepareEntityHierarchyForAnimationScene((re::AnimationSceneEntityData *)(v23 + 24), *(re::ecs2::Entity **)(a1 + 16), (re::ecs2::Entity *)((a4 >> 1) & 1));
    }
    else if (*(unsigned char *)(v19 + 312) {
           && *(_DWORD *)(*(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)a2) + 8) + 8) == 17)
    }
    {
      uint64_t v21 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)a2);
      uint64_t v22 = (re::SRTAnimationAssetData *)*((void *)v21 + 1);
LABEL_21:
      re::DynamicArray<re::ecs2::AnimationEntry>::add(a1 + 136, (long long *)v27);
      *(_DWORD *)(a1 + 128) = 0;
      if ((a4 & 2) != 0) {
        re::ecs2::NetworkComponent::markComponentDirty((re::ecs2::NetworkComponent *)a1, v24);
      }
      re::ecs2::AnimationComponent::synchronizeOwnedAnimationEntries((void *)a1);
      re::ecs2::AnimationEntry::~AnimationEntry(v27);
      return v17;
    }
    re::AssetHandle::operator=((uint64_t)v27, a2);
    goto LABEL_21;
  }
  uint64_t v26 = *re::ecsComponentsLogObjects((re *)IsAuthoritative);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v27[0]) = 0;
    _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Cannot play animation on entity, current process is non-authoritative.", (uint8_t *)v27, 2u);
  }
  return 0;
}

uint64_t re::AssetHandle::asset<re::TimelineAsset>(re::TimelineAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::TimelineAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        uint64_t v7 = (char *)v6[18];
      }
      else {
        uint64_t v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

long long *re::DynamicArray<re::ecs2::AnimationEntry>::add(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  double result = re::ecs2::AnimationEntry::AnimationEntry(*(void *)(a1 + 32) + 248 * v5, a2);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::ecs2::AnimationComponent::pause(re::ecs2::AnimationComponent *this, uint64_t a2)
{
  uint64_t v4 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 19);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 21);
      uint64_t v7 = 248 * v5;
      while (*(void *)(v6 + 128) != a2)
      {
        v6 += 248;
        v7 -= 248;
        if (!v7) {
          return;
        }
      }
      if (!*(unsigned char *)(v6 + 57))
      {
        double v8 = *(double *)(v6 + 72);
        double v9 = (*(double (**)(uint64_t))(*(void *)v4 + 48))(v4);
        *(unsigned char *)(v6 + 57) = 1;
        re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v9, (const re::ecs2::AnimationEntry *)v6, (uint64_t)v14);
        if (v14[0])
        {
          double v9 = v15;
        }
        else
        {
          uint64_t v11 = *re::ecsComponentsLogObjects(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v13 = 0;
            _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Animation paused while desynchronized, possible inconsistent state.", v13, 2u);
          }
        }
        double v12 = (v9 - v8) * *(float *)(v6 + 140);
        *(double *)(v6 + 72) = v9;
        *(double *)(v6 + 80) = v12;
        *((_DWORD *)this + 32) = 0;
      }
    }
  }
}

void re::ecs2::AnimationComponent::resume(re::ecs2::AnimationComponent *this, uint64_t a2)
{
  uint64_t v4 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 19);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 21) + 72;
      uint64_t v7 = 248 * v5;
      while (*(void *)(v6 + 56) != a2)
      {
        v6 += 248;
        v7 -= 248;
        if (!v7) {
          return;
        }
      }
      if (*(unsigned char *)(v6 - 15) == 1)
      {
        if (*(_DWORD *)(*((void *)this + 2) + 288)) {
          char v8 = 0;
        }
        else {
          char v8 = 3;
        }
        *(unsigned char *)(v6 - 15) = v8;
        *(double *)uint64_t v6 = (*(double (**)(uint64_t))(*(void *)v4 + 48))(v4);
        *((_DWORD *)this + 32) = 0;
      }
    }
  }
}

re::ecs2::AnimationComponentEntry *re::ecs2::AnimationComponent::stopAll(re::ecs2::AnimationComponent *this)
{
  uint64_t v2 = *((void *)this + 19);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 21);
    *((_DWORD *)this + 32) = 0;
    uint64_t v4 = 248 * v2;
    uint64_t v5 = (unsigned char *)(v3 + 57);
    do
    {
      *uint64_t v5 = 2;
      v5 += 248;
      v4 -= 248;
    }
    while (v4);
  }
  uint64_t v6 = *((void *)this + 6);
  if (v6)
  {
    uint64_t v7 = 72 * v6;
    char v8 = (re::AnimationController *)(*((void *)this + 8) + 56);
    do
    {
      re::AnimationController::stop(v8, 0.0);
      char v8 = (re::AnimationController *)((char *)v8 + 72);
      v7 -= 72;
    }
    while (v7);
  }
  return re::DynamicArray<re::ecs2::AnimationComponentEntry>::clear((re::ecs2::AnimationComponent *)((char *)this + 32));
}

void re::ecs2::AnimationComponent::animationDuration(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, _anonymous_namespace_ *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*((void *)this + 19)) {
    uint64_t v4 = (char *)this + 136;
  }
  else {
    uint64_t v4 = (char *)this + 88;
  }
  if (v8[0])
  {
    unint64_t v5 = v9;
    unint64_t v6 = *((void *)v4 + 2);
    if (v6 <= v9)
    {
      uint64_t v10 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v11 = 136315906;
      double v12 = "operator[]";
      __int16 v13 = 1024;
      int v14 = 797;
      __int16 v15 = 2048;
      unint64_t v16 = v5;
      __int16 v17 = 2048;
      unint64_t v18 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v7 = (const re::ecs2::AnimationEntry *)(*((void *)v4 + 4) + 248 * v9);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void anonymous namespace'::getTimelineDuration(_anonymous_namespace_ *this, const re::ecs2::AnimationEntry *a2)
{
  uint64_t v3 = *((void *)a2 + 6);
  if (v3)
  {
    *(unsigned char *)this = 1;
    uint64_t v4 = *(void *)(v3 + 80);
  }
  else
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v6, a2);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
    if (!Timeline)
    {
      *(unsigned char *)this = 0;
      return;
    }
    (*(void (**)(void *))(*Timeline + 40))(Timeline);
    *(unsigned char *)this = 1;
  }
  *((void *)this + 1) = v4;
}

void re::ecs2::AnimationComponent::fadeBlendFactor(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (v10[0])
  {
    unint64_t v5 = v11;
    unint64_t v6 = *((void *)this + 24);
    if (v6 <= v11)
    {
      uint64_t v12 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v13 = 136315906;
      int v14 = "operator[]";
      __int16 v15 = 1024;
      int v16 = 797;
      __int16 v17 = 2048;
      unint64_t v18 = v5;
      __int16 v19 = 2048;
      unint64_t v20 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v7 = (re::AnimationController *)(*((void *)this + 26) + 144 * v11 + 8);
    char v8 = (const re::Timeline *)re::AnimationController::timeline(v7);
    float v9 = re::AnimationController::blendFactor(v7, v8);
    *(unsigned char *)a3 = 1;
    *(float *)(a3 + 4) = v9;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::ecs2::AnimationComponent::animationPlaybackTime(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*((void *)this + 19)) {
    unint64_t v6 = (char *)this + 136;
  }
  else {
    unint64_t v6 = (char *)this + 88;
  }
  if (!v22[0]) {
    goto LABEL_17;
  }
  unint64_t v7 = v23;
  unint64_t v8 = *((void *)v6 + 2);
  if (v8 <= v23)
  {
    uint64_t v20 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    *(void *)uint64_t v26 = "operator[]";
    *(_WORD *)&v26[8] = 1024;
    *(_DWORD *)&v26[10] = 797;
    __int16 v27 = 2048;
    unint64_t v28 = v7;
    __int16 v29 = 2048;
    unint64_t v30 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v9 = *((void *)v6 + 4);
  uint64_t v10 = v9 + 248 * v23;
  int v12 = *(unsigned __int8 *)(v10 + 57);
  unint64_t v11 = (unsigned char *)(v10 + 57);
  if (v12 == 2
    || (uint64_t v13 = *(void *)(v9 + 248 * v23 + 64),
        v13 != (re::ecs2::AnimationComponent::currentFrameCount(*((re::ecs2::AnimationComponent **)this + 2)) & 0xFFFFFFFFFFFFFFFLL)))
  {
    if (!(_BYTE)v20) {
      goto LABEL_13;
    }
    unint64_t v3 = v21;
    unint64_t v15 = *((void *)this + 24);
    if (v15 > v21)
    {
      uint64_t v16 = *((void *)this + 26);
      if (*(unsigned __int8 *)(v16 + 144 * v21 + 89) == *(unsigned __int8 *)(v9 + 248 * v7 + 58))
      {
        re::AnimationController::time((re::AnimationController *)(v16 + 144 * v21 + 8), a3);
        return;
      }
LABEL_13:
      if ((_BYTE)v31)
      {
        switch(*v11)
        {
          case 0:
            uint64_t v17 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
            if (!v17) {
              goto LABEL_17;
            }
            double v18 = (*(double (**)(uint64_t))(*(void *)v17 + 48))(v17);
            re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v18, (const re::ecs2::AnimationEntry *)(v9 + 248 * v7), (uint64_t)&v25);
            if (!(_BYTE)v25) {
              goto LABEL_17;
            }
            double v14 = *(double *)(v9 + 248 * v7 + 80)
                + (*(double *)&v26[4] - *(double *)(v9 + 248 * v7 + 72)) * *(float *)(v9 + 248 * v7 + 140);
            break;
          case 1:
          case 3:
          case 5:
            double v14 = *(double *)(v9 + 248 * v7 + 80);
            break;
          default:
            goto LABEL_17;
        }
        if (v14 <= *((double *)&v31 + 1))
        {
          *(unsigned char *)a3 = 1;
          goto LABEL_19;
        }
      }
LABEL_17:
      *(unsigned char *)a3 = 0;
      return;
    }
LABEL_25:
    uint64_t v24 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    unint64_t v19 = v15;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    *(void *)uint64_t v26 = "operator[]";
    *(_WORD *)&v26[8] = 1024;
    *(_DWORD *)&v26[10] = 797;
    __int16 v27 = 2048;
    unint64_t v28 = v3;
    __int16 v29 = 2048;
    unint64_t v30 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(unsigned char *)a3 = 1;
  double v14 = *(double *)(v9 + 248 * v7 + 80);
LABEL_19:
  *(double *)(a3 + 8) = v14;
}

unint64_t re::ecs2::AnimationComponent::currentFrameCount(re::ecs2::AnimationComponent *this)
{
  if (!this) {
    return 0xFFFFFFFFFFFFFFFLL;
  }
  do
  {
    uint64_t v1 = this;
    this = (re::ecs2::AnimationComponent *)*((void *)this + 3);
  }
  while (this);
  uint64_t v2 = *((void *)v1 + 2);
  if (v2
    && (uint64_t v3 = *(void *)(v2 + 56)) != 0
    && (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3),
        (uint64_t v5 = re::ServiceLocator::serviceOrNull<re::FrameManager>(v4)) != 0))
  {
    return *(void *)(v5 + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(v5 + 16) << 60);
  }
  else
  {
    return 0xFFFFFFFFFFFFFFFLL;
  }
}

void re::ecs2::AnimationComponent::setAnimationPlaybackTime(re::ecs2::AnimationComponent *this, unint64_t a2, double a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (v16[0])
  {
    unint64_t v7 = v17;
    unint64_t v8 = *((void *)this + 19);
    if (v8 <= v17)
    {
      uint64_t v18 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unint64_t v19 = 136315906;
      uint64_t v20 = "operator[]";
      __int16 v21 = 1024;
      int v22 = 789;
      __int16 v23 = 2048;
      unint64_t v24 = v7;
      __int16 v25 = 2048;
      unint64_t v26 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = *((void *)this + 21);
    uint64_t v10 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
    if (v10)
    {
      double v11 = (*(double (**)(uint64_t))(*(void *)v10 + 48))(v10);
      re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v11, (const re::ecs2::AnimationEntry *)(v9 + 248 * v7), (uint64_t)buf);
      if (buf[0])
      {
        double v11 = *(double *)&buf[8];
      }
      else
      {
        double v14 = *re::ecsComponentsLogObjects(v12);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unint64_t v19 = 0;
          _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "Animation setting playback time while desynchronized, possible inconsistent state.", v19, 2u);
        }
      }
      *(double *)(v9 + 248 * v7 + 72) = v11;
    }
    uint64_t v15 = v9 + 248 * v7;
    *(double *)(v15 + 80) = a3;
    *((_DWORD *)this + 32) = 0;
    ++*(unsigned char *)(v15 + 58);
    *(void *)(v15 + 64) = re::ecs2::AnimationComponent::currentFrameCount(*((re::ecs2::AnimationComponent **)this + 2)) & 0xFFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v13 = *re::ecsComponentsLogObjects(v6);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Cannot set playback time for invalid animation token: %llu", buf, 0xCu);
    }
  }
}

uint64_t re::ecs2::AnimationComponent::animationPlaybackSpeed@<X0>(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*((void *)this + 19)) {
    uint64_t v4 = (char *)this + 136;
  }
  else {
    uint64_t v4 = (char *)this + 88;
  }
  if (v9[0])
  {
    unint64_t v6 = v10;
    unint64_t v7 = *((void *)v4 + 2);
    if (v7 <= v10)
    {
      uint64_t v11 = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      uint64_t v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      unint64_t v17 = v6;
      __int16 v18 = 2048;
      unint64_t v19 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *((void *)v4 + 4) + 248 * v10;
    *(unsigned char *)a3 = 1;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v8 + 140);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

BOOL re::ecs2::AnimationComponent::setAnimationPlaybackSpeed(re::ecs2::AnimationComponent *this, unint64_t a2, float a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v7 = v20[0];
  if (v20[0])
  {
    re::ecs2::AnimationComponent::animationPlaybackTime(this, a2, (uint64_t)v18);
    unint64_t v8 = v21;
    unint64_t v9 = *((void *)this + 19);
    if (v9 <= v21)
    {
      uint64_t v22 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v23 = 136315906;
      long long v24 = "operator[]";
      __int16 v25 = 1024;
      int v26 = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v8;
      __int16 v29 = 2048;
      unint64_t v30 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v10 = *((void *)this + 21);
    *(float *)(v10 + 248 * v21 + 140) = a3;
    *((_DWORD *)this + 32) = 0;
    uint64_t v11 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
    if (v11)
    {
      double v12 = (*(double (**)(uint64_t))(*(void *)v11 + 48))(v11);
      re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v12, (const re::ecs2::AnimationEntry *)(v10 + 248 * v8), (uint64_t)buf);
      if (buf[0])
      {
        double v12 = *(double *)&buf[8];
      }
      else
      {
        int v15 = *re::ecsComponentsLogObjects(v13);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long v23 = 0;
          _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Animation setting playback speed while desynchronized, possible inconsistent state.", v23, 2u);
        }
      }
      *(double *)(v10 + 248 * v8 + 72) = v12;
    }
    if (v18[0])
    {
      double v16 = v19;
    }
    else
    {
      re::ecs2::AnimationComponent::animationDuration(this, a2, (_anonymous_namespace_ *)buf);
      double v16 = *(double *)&buf[8];
      if (!buf[0]) {
        double v16 = 0.0;
      }
    }
    *(double *)(v10 + 248 * v8 + 80) = v16;
  }
  else
  {
    __int16 v14 = *re::ecsComponentsLogObjects(v6);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "Cannot set playback speed for invalid animation token: %llu", buf, 0xCu);
    }
  }
  return v7 != 0;
}

uint64_t re::ecs2::AnimationComponent::animationBlendFactor@<X0>(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*((void *)this + 19)) {
    uint64_t v4 = (char *)this + 136;
  }
  else {
    uint64_t v4 = (char *)this + 88;
  }
  if (v9[0])
  {
    unint64_t v6 = v10;
    unint64_t v7 = *((void *)v4 + 2);
    if (v7 <= v10)
    {
      uint64_t v11 = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      uint64_t v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 797;
      __int16 v16 = 2048;
      unint64_t v17 = v6;
      __int16 v18 = 2048;
      unint64_t v19 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *((void *)v4 + 4) + 248 * v10;
    *(unsigned char *)a3 = 1;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v8 + 144);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

BOOL re::ecs2::AnimationComponent::setAnimationBlendFactor(re::ecs2::AnimationComponent *this, unint64_t a2, float a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v7 = v12[0];
  if (v12[0])
  {
    unint64_t v8 = v13;
    unint64_t v9 = *((void *)this + 19);
    if (v9 <= v13)
    {
      uint64_t v14 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v15 = 136315906;
      __int16 v16 = "operator[]";
      __int16 v17 = 1024;
      int v18 = 789;
      __int16 v19 = 2048;
      unint64_t v20 = v8;
      __int16 v21 = 2048;
      unint64_t v22 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(float *)(*((void *)this + 21) + 248 * v13 + 144) = a3;
    *((_DWORD *)this + 32) = 0;
  }
  else
  {
    unint64_t v10 = *re::ecsComponentsLogObjects(v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Cannot set blend factor for invalid animation token: %llu", buf, 0xCu);
    }
  }
  return v7 != 0;
}

void re::ecs2::AnimationComponent::animationParentTimebase(re::ecs2::AnimationComponent *this@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*((void *)this + 19)) {
    uint64_t v5 = (char *)this + 136;
  }
  else {
    uint64_t v5 = (char *)this + 88;
  }
  if (v10[0])
  {
    unint64_t v6 = v11;
    unint64_t v7 = *((void *)v5 + 2);
    if (v7 <= v11)
    {
      uint64_t v12 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v13 = 136315906;
      uint64_t v14 = "operator[]";
      __int16 v15 = 1024;
      int v16 = 797;
      __int16 v17 = 2048;
      unint64_t v18 = v6;
      __int16 v19 = 2048;
      unint64_t v20 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v8 = (re::ecs2::Entity *)*((void *)this + 2);
    unint64_t v9 = (re::ecs2::AnimationEntry *)(*((void *)v5 + 4) + 248 * v11);
    re::ecs2::AnimationEntry::parentTimebase(v9, v8, 0, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
  }
}

void re::ecs2::AnimationComponent::setAnimationParentTimebase(re::ecs2::AnimationComponent *this, unint64_t a2, OpaqueCMTimebase *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (v18[0])
  {
    uint64_t v5 = re::ecs2::AnimationComponent::parentSimulationTimer(this);
    if (v5)
    {
      unint64_t v6 = v19;
      unint64_t v7 = *((void *)this + 19);
      if (v7 <= v19)
      {
        uint64_t v20 = 0;
        memset(v29, 0, sizeof(v29));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136315906;
        long long v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 789;
        __int16 v25 = 2048;
        unint64_t v26 = v6;
        __int16 v27 = 2048;
        unint64_t v28 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v8 = *((void *)this + 21);
      double v9 = (*(double (**)(uint64_t))(*(void *)v5 + 48))(v5);
      re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)this, v9, (const re::ecs2::AnimationEntry *)(v8 + 248 * v6), (uint64_t)v29);
      double Seconds = v9;
      if (a3)
      {
        CMTimebaseGetTime(&time, a3);
        double Seconds = CMTimeGetSeconds(&time);
      }
      if (LOBYTE(v29[0]))
      {
        double v9 = *((double *)v29 + 1);
      }
      else
      {
        uint64_t v12 = *re::ecsComponentsLogObjects(v10);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "Animation setting timebase while desynchronized, possible inconsistent state.", buf, 2u);
        }
      }
      uint64_t v13 = v8 + 248 * v6;
      int v16 = *(const void **)(v13 + 88);
      __int16 v15 = (double *)(v13 + 88);
      uint64_t v14 = v16;
      *(v15 - 2) = Seconds - (v9 - *(v15 - 2));
      if (v16) {
        CFRelease(v14);
      }
      *(void *)__int16 v15 = a3;
      if (a3) {
        CFRetain(a3);
      }
      *((_DWORD *)this + 32) = 0;
    }
  }
}

uint64_t re::ecs2::AnimationComponent::shadowAnimationController(re::ecs2::AnimationComponent *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  do
  {
    uint64_t v5 = v2;
    uint64_t v2 = *(void *)(v2 + 24);
  }
  while (v2);
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6) {
    return 0;
  }
  if (!*(void *)(v6 + 56)) {
    return 0;
  }
  re::ecs2::AnimationComponent::initOwnershipState(this);
  re::ecs2::AnimationComponent::processFinishedAnimations(this, v7);
  re::ecs2::AnimationComponent::processDefaultTimebaseChanges(this);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v6 + 56) + 32))(*(void *)(v6 + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::AnimationService>(v8);
  re::ecs2::AnimationComponent::processActiveAnimations((uint64_t)this, v9);
  uint64_t v10 = *((void *)this + 24);
  if (!v10) {
    return 0;
  }
  uint64_t result = *((void *)this + 26) + 8;
  uint64_t v12 = 144 * v10;
  while (*(void *)(result - 8) != a2)
  {
    result += 144;
    v12 -= 144;
    if (!v12) {
      return 0;
    }
  }
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::AnimationService>(uint64_t a1)
{
  {
    re::introspect<re::AnimationService>(void)::info = re::introspect_AnimationService(0);
  }
  uint64_t v2 = re::introspect<re::AnimationService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

unint64_t re::ecs2::AnimationComponent::animationEntry(re::ecs2::AnimationComponent *this, unint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*((void *)this + 19)) {
    uint64_t v2 = (char *)this + 136;
  }
  else {
    uint64_t v2 = (char *)this + 88;
  }
  if (!v6[0]) {
    return 0;
  }
  unint64_t v3 = v7;
  unint64_t v4 = *((void *)v2 + 2);
  if (v4 <= v7)
  {
    uint64_t v8 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v9 = 136315906;
    uint64_t v10 = "operator[]";
    __int16 v11 = 1024;
    int v12 = 797;
    __int16 v13 = 2048;
    unint64_t v14 = v3;
    __int16 v15 = 2048;
    unint64_t v16 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)v2 + 4) + 248 * v7;
}

void *re::ecs2::AnimationComponent::AnimationComponentEventDelegate::addEvent(uint64_t a1, char a2, re::AnimationController *this, uint64_t a4, double a5)
{
  uint64_t result = (void *)re::AnimationController::userData(this);
  uint64_t v10 = result;
  int v11 = *(_DWORD *)(a4 + 60);
  unint64_t v12 = *(void *)(a1 + 80);
  unint64_t v13 = *(void *)(a1 + 48);
  if (v12 + 1 > 8 * v13)
  {
    unint64_t v13 = *(void *)(a1 + 48);
  }
  if (v13 <= v12 >> 3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v14 = a1 + 64;
  }
  else {
    uint64_t v14 = *(void *)(a1 + 72);
  }
  float v15 = a5;
  uint64_t v16 = *(void *)(v14 + 8 * (v12 >> 3));
  ++*(void *)(a1 + 80);
  ++*(_DWORD *)(a1 + 88);
  uint64_t v17 = v16 + 40 * (v12 & 7);
  *(unsigned char *)uint64_t v17 = a2;
  *(void *)(v17 + 8) = v10;
  *(float *)(v17 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v15;
  *(_DWORD *)(v17 + 20) = v11;
  *(void *)(v17 + 24) = 0;
  *(void *)(v17 + 32) = 0;
  return result;
}

void re::ecs2::AnimationComponent::AnimationComponentEventDelegate::publishTimelineEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    long long v18 = WeakRetained;
    uint64_t v19 = WeakRetained[1];
    if (v19)
    {
      long long v20 = (void *)(v19 + 8);
      id v21 = (id)(v19 + 8);
      uint64_t v22 = v19;
      do
      {
        uint64_t v23 = v22;
        uint64_t v22 = *(void *)(v22 + 24);
      }
      while (v22);
      uint64_t v24 = *(void *)(v23 + 16);
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(v24 + 56) + 32))(*(void *)(v24 + 56));
        unint64_t v26 = (re *)re::ServiceLocator::serviceOrNull<re::Engine>(v25);
        if (v26)
        {
          if (*((void *)v26 + 173))
          {
            uint64_t v71 = (re::EventBus *)*((void *)v26 + 173);
            if (a8) {
              double v27 = *(double *)(a8 + 40);
            }
            else {
              double v27 = 0.0;
            }
            unint64_t v28 = *(void **)(a5 + 80);
            if (v28)
            {
              double v29 = v27;
              unint64_t v26 = v28 + 1;
              double v27 = v29;
              long long v20 = (void *)(v19 + 8);
            }
            switch(a2)
            {
              case 5:
                uint64_t v78 = 0;
                long long v76 = 0u;
                long long v77 = 0u;
                long long v74 = 0u;
                long long v75 = 0u;
                *(void *)buf = v19;
                uint64_t v73 = a3;
                float v30 = a9;
                *(float *)&long long v74 = v30;
                long long v31 = v28 + 3;
                *((void *)&v74 + 1) = v28[4];
                *(void *)&long long v75 = a6;
                *((void *)&v75 + 1) = v28 + 3;
                *(void *)&long long v76 = a7;
                if (*(void *)(a8 + 32)) {
                  uint64_t v32 = a8;
                }
                else {
                  uint64_t v32 = 0;
                }
                *((void *)&v76 + 1) = v32;
                *(double *)&long long v77 = v27;
                *((void *)&v77 + 1) = *(void *)(a8 + 48);
                LOBYTE(v78) = *(unsigned char *)(a8 + 56);
                double v33 = *(float *)(a8 + 8);
                double v79 = *(double *)(a4 + 24);
                double v80 = v33;
                long long v34 = v28;
                long long v35 = (const void *)(v28[3] >> 1);
                Type = re::EventBus::getTypeId<REAnimationHasTimelineEventStart>();
                re::EventBus::publish(v71, v19, (uint64_t)Type, (uint64_t)buf, 0x68uLL, v35);
                uint64_t v37 = v19;
                do
                {
                  uint64_t v38 = v37;
                  uint64_t v37 = *(void *)(v37 + 24);
                }
                while (v37);
                if (*(void *)(v38 + 16))
                {
                  uint64_t v39 = v19;
                  do
                  {
                    uint64_t v40 = v39;
                    uint64_t v39 = *(void *)(v39 + 24);
                  }
                  while (v39);
                  uint64_t v41 = *(re::EventBus **)(*(void *)(v40 + 16) + 288);
                  if (v41) {
                    re::EventBus::publish<re::ecs2::Entity,REAnimationHasTimelineEventStart>(v41, v19, (uint64_t)buf, (const void *)(*v31 >> 1));
                  }
                }
                goto LABEL_50;
              case 6:
                *(double *)&long long v74 = a9;
                uint64_t v43 = v28[4];
                *(void *)&long long v76 = *(void *)(a4 + 24);
                float v44 = *(float *)(a8 + 8);
                DWORD2(v76) = *(_DWORD *)(a8 + 4);
                *(void *)buf = v19;
                uint64_t v73 = a3;
                *((void *)&v74 + 1) = v43;
                *(void *)&long long v75 = a6;
                *((void *)&v75 + 1) = v28 + 3;
                *(double *)&long long v77 = v44;
                if (*(void *)(a8 + 32)) {
                  uint64_t v45 = a8;
                }
                else {
                  uint64_t v45 = 0;
                }
                *((void *)&v77 + 1) = v45;
                uint64_t v78 = a7;
                double v79 = v27;
                double v80 = *(double *)(a8 + 48);
                char v81 = *(unsigned char *)(a8 + 56);
                long long v34 = v28;
                uint64_t v46 = (const void *)(v28[3] >> 1);
                uint64_t HasTimelineEvent = re::EventBus::getTypeId<REAnimationHasTimelineEventUpdate>();
                unint64_t v48 = v71;
                uint64_t v49 = v19;
                unint64_t v50 = 112;
                goto LABEL_41;
              case 7:
                uint64_t v78 = 0;
                long long v76 = 0u;
                long long v77 = 0u;
                long long v74 = 0u;
                long long v75 = 0u;
                *(void *)buf = v19;
                uint64_t v73 = a3;
                float v51 = a9;
                *(float *)&long long v74 = v51;
                uint64_t v52 = v28 + 3;
                *((void *)&v74 + 1) = v28[4];
                *(void *)&long long v75 = a6;
                *((void *)&v75 + 1) = v28 + 3;
                *(void *)&long long v76 = a7;
                long long v34 = v28;
                if (a8)
                {
                  if (*(void *)(a8 + 32)) {
                    uint64_t v53 = a8;
                  }
                  else {
                    uint64_t v53 = 0;
                  }
                }
                else
                {
                  uint64_t v53 = 0;
                }
                *((void *)&v76 + 1) = v53;
                *(double *)&long long v77 = v27;
                *((void *)&v77 + 1) = *(void *)(a8 + 48);
                LOBYTE(v78) = *(unsigned char *)(a8 + 56);
                uint64_t v60 = (const void *)(*v52 >> 1);
                uint64_t v61 = re::EventBus::getTypeId<REAnimationHasTimelineEventEnd>();
                re::EventBus::publish(v71, v19, v61, (uint64_t)buf, 0x58uLL, v60);
                uint64_t v62 = v19;
                do
                {
                  uint64_t v63 = v62;
                  uint64_t v62 = *(void *)(v62 + 24);
                }
                while (v62);
                if (*(void *)(v63 + 16))
                {
                  uint64_t v64 = v19;
                  do
                  {
                    uint64_t v65 = v64;
                    uint64_t v64 = *(void *)(v64 + 24);
                  }
                  while (v64);
                  __int16 v66 = *(re::EventBus **)(*(void *)(v65 + 16) + 288);
                  if (v66)
                  {
                    uint64_t v67 = (const void *)(*v52 >> 1);
                    uint64_t v68 = re::EventBus::getTypeId<REAnimationHasTimelineEventEnd>();
                    re::EventBus::publish(v66, v19, v68, (uint64_t)buf, 0x58uLL, v67);
                  }
                }
                goto LABEL_50;
              case 8:
                *(void *)buf = v19;
                uint64_t v73 = a3;
                float v54 = a9;
                *(float *)&long long v74 = v54;
                *((void *)&v74 + 1) = v28[4];
                *(void *)&long long v75 = *(void *)(a4 + 24);
                *((void *)&v75 + 1) = v28 + 3;
                *(void *)&long long v76 = a7;
                *((double *)&v76 + 1) = v27;
                long long v34 = v28;
                uint64_t v46 = (const void *)(v28[3] >> 1);
                uint64_t v55 = re::EventBus::getTypeId<REAnimationTimelineEventPause>();
                goto LABEL_36;
              case 9:
                *(void *)buf = v19;
                uint64_t v73 = a3;
                float v56 = a9;
                *(float *)&long long v74 = v56;
                *((void *)&v74 + 1) = v28[4];
                *(void *)&long long v75 = *(void *)(a4 + 24);
                *((void *)&v75 + 1) = v28 + 3;
                *(void *)&long long v76 = a7;
                *((double *)&v76 + 1) = v27;
                long long v34 = v28;
                uint64_t v46 = (const void *)(v28[3] >> 1);
                uint64_t v55 = re::EventBus::getTypeId<REAnimationTimelineEventResume>();
LABEL_36:
                uint64_t HasTimelineEvent = v55;
                unint64_t v48 = v71;
                uint64_t v49 = v19;
                unint64_t v50 = 64;
                goto LABEL_41;
              case 10:
                *(void *)buf = v19;
                uint64_t v73 = a3;
                float v57 = a9;
                *(float *)&long long v74 = v57;
                *((void *)&v74 + 1) = v28[4];
                *(void *)&long long v75 = a6;
                *((void *)&v75 + 1) = v28 + 3;
                *(void *)&long long v76 = a7;
                *((double *)&v76 + 1) = v27;
                *(void *)&long long v77 = *(void *)(a8 + 48);
                BYTE8(v77) = *(unsigned char *)(a8 + 56);
                double v58 = *(float *)(a8 + 8);
                uint64_t v78 = *(void *)(a4 + 24);
                double v79 = v58;
                long long v34 = v28;
                uint64_t v46 = (const void *)(v28[3] >> 1);
                uint64_t HasTimelineEvent = re::EventBus::getTypeId<REAnimationTimelineEventSkipped>();
                unint64_t v48 = v71;
                uint64_t v49 = v19;
                unint64_t v50 = 96;
                goto LABEL_41;
              case 11:
                *(void *)buf = v19;
                uint64_t v73 = a3;
                *(void *)&long long v74 = v28[4];
                *((void *)&v74 + 1) = v28 + 3;
                *(void *)&long long v75 = a7;
                *((double *)&v75 + 1) = v27;
                long long v34 = v28;
                uint64_t v46 = (const void *)(v28[3] >> 1);
                uint64_t v59 = re::EventBus::getTypeId<REAnimationTimelineEventTerminated>();
                goto LABEL_40;
              case 12:
                *(void *)buf = v19;
                uint64_t v73 = a3;
                *(void *)&long long v74 = v28[4];
                *((void *)&v74 + 1) = v28 + 3;
                *(void *)&long long v75 = a7;
                *((double *)&v75 + 1) = v27;
                long long v34 = v28;
                uint64_t v46 = (const void *)(v28[3] >> 1);
                uint64_t v59 = re::EventBus::getTypeId<REAnimationTimelineEventCreated>();
LABEL_40:
                uint64_t HasTimelineEvent = v59;
                unint64_t v48 = v71;
                uint64_t v49 = v19;
                unint64_t v50 = 48;
LABEL_41:
                re::EventBus::publish(v48, v49, HasTimelineEvent, (uint64_t)buf, v50, v46);
                goto LABEL_51;
              default:
                long long v34 = v28;
                int v42 = *re::animationLogObjects(v26);
                if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = a2;
                  _os_log_error_impl(&dword_233120000, v42, OS_LOG_TYPE_ERROR, "Unexpected event state %d", buf, 8u);
                }
LABEL_50:
                if (v34) {
LABEL_51:
                }

                break;
            }
          }
        }
      }
      do
      {
        uint64_t v69 = v19;
        uint64_t v19 = *(void *)(v19 + 24);
      }
      while (v19);
      uint64_t v70 = *(void *)(v69 + 16);
      if (v70) {
        (*(void (**)(void))(**(void **)(v70 + 56) + 200))(*(void *)(v70 + 56));
      }
    }
  }
}

uint64_t re::EventBus::publish<re::ecs2::Entity,REAnimationHasTimelineEventStart>(re::EventBus *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  Type = re::EventBus::getTypeId<REAnimationHasTimelineEventStart>();
  return re::EventBus::publish(a1, a2, (uint64_t)Type, a3, 0x68uLL, a4);
}

uint64_t re::ecs2::AnimationComponent::setParentAnimation(re::ecs2::AnimationComponent *this, unint64_t a2, re::ecs2::Entity *a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (v14[0])
  {
    if (a3) {
      uint64_t v8 = *((void *)a3 + 37);
    }
    else {
      uint64_t v8 = 0;
    }
    unint64_t v9 = v15;
    unint64_t v10 = *((void *)this + 19);
    if (v10 <= v15)
    {
      uint64_t v16 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v17 = 136315906;
      long long v18 = "operator[]";
      __int16 v19 = 1024;
      int v20 = 789;
      __int16 v21 = 2048;
      unint64_t v22 = v9;
      __int16 v23 = 2048;
      unint64_t v24 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v11 = *((void *)this + 21) + 248 * v15;
    int v13 = *(unsigned __int8 *)(v11 + 152);
    uint64_t v12 = v11 + 152;
    if (!v13) {
      *(unsigned char *)uint64_t v12 = 1;
    }
    *(void *)(v12 + 8) = v8;
    *(void *)(v12 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = a4;
    *((_DWORD *)this + 32) = 0;
  }
  return result;
}

void re::ecs2::AnimationComponent::AnimationComponentEventDelegate::publishEvents(id *this)
{
  WeakRetained = objc_loadWeakRetained(this + 4);
  if (WeakRetained)
  {
    unint64_t v3 = WeakRetained;
    if (!*((_DWORD *)this + 6))
    {
      *((_DWORD *)this + 6) = 1;
      uint64_t v4 = WeakRetained[1];
      if (v4)
      {
        id v5 = (id)(v4 + 8);
        uint64_t v6 = v3[1];
        if (v6)
        {
          uint64_t v7 = v3[1];
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = *(void *)(v7 + 24);
          }
          while (v7);
          if (*(void *)(v8 + 16))
          {
            do
            {
              uint64_t v9 = v6;
              uint64_t v6 = *(void *)(v6 + 24);
            }
            while (v6);
            unint64_t v10 = *(re::EventBus **)(*(void *)(v9 + 16) + 288);
            if (v10) {
              goto LABEL_79;
            }
          }
        }
        uint64_t v11 = v4;
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = *(void *)(v11 + 24);
        }
        while (v11);
        uint64_t v13 = *(void *)(v12 + 16);
        if (v13)
        {
          uint64_t v14 = *(void *)(v13 + 56);
          if (v14)
          {
            uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
            uint64_t v16 = re::ServiceLocator::serviceOrNull<re::Engine>(v15);
            if (v16)
            {
              unint64_t v10 = *(re::EventBus **)(v16 + 1384);
              if (v10)
              {
LABEL_79:
                if (this[10])
                {
                  unint64_t v17 = 0;
                  do
                  {
                    uint64_t v18 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)(this + 5), v17);
                    uint64_t v19 = v18;
                    switch(*(unsigned char *)v18)
                    {
                      case 1:
                        uint64_t v20 = *(void *)(v18 + 8);
                        uint64_t v56 = v4;
                        uint64_t v57 = v20;
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90370, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF90370))
                        {
                          qword_26AF90368 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"26REAnimationHasStartedEvent" & 0x7FFFFFFFFFFFFFFFLL), v37);
                          __cxa_guard_release(&qword_26AF90370);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF90368, (uint64_t)&v56, 0x10uLL, 0);
                        uint64_t v21 = *(void *)(v19 + 8);
                        LODWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
                        HIDWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v21;
                        LODWORD(v57) = *(_DWORD *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90380, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF90380))
                        {
                          qword_26AF90378 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24REAnimationDidStartEvent" & 0x7FFFFFFFFFFFFFFFLL), v38);
                          __cxa_guard_release(&qword_26AF90380);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF90378, (uint64_t)&v56, 0xCuLL, 0);
                        uint64_t v22 = *(void *)(v19 + 8);
                        LODWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
                        HIDWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v22;
                        LODWORD(v57) = *(_DWORD *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90390, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF90390))
                        {
                          qword_26AF90388 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"21REAnimationStartEvent" & 0x7FFFFFFFFFFFFFFFLL), v39);
                          __cxa_guard_release(&qword_26AF90390);
                        }
                        uint64_t v23 = qword_26AF90388;
                        goto LABEL_37;
                      case 2:
                        uint64_t v24 = *(void *)(v18 + 8);
                        uint64_t v56 = v4;
                        uint64_t v57 = v24;
                        LODWORD(v58) = *(_DWORD *)(v18 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF903A0, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF903A0))
                        {
                          qword_26AF90398 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"28REAnimationHasCompletedEvent" & 0x7FFFFFFFFFFFFFFFLL), v40);
                          __cxa_guard_release(&qword_26AF903A0);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF90398, (uint64_t)&v56, 0x18uLL, 0);
                        uint64_t v56 = *(void *)(v19 + 8);
                        LODWORD(v57) = *(_DWORD *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF903B0, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF903B0))
                        {
                          qword_26AF903A8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"25REAnimationCompletedEvent" & 0x7FFFFFFFFFFFFFFFLL), v41);
                          __cxa_guard_release(&qword_26AF903B0);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF903A8, (uint64_t)&v56, 0x10uLL, 0);
                        uint64_t v25 = *(void *)(v19 + 8);
                        LODWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
                        HIDWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v25;
                        LODWORD(v57) = *(_DWORD *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF903C0, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF903C0))
                        {
                          qword_26AF903B8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"27REAnimationDidCompleteEvent" & 0x7FFFFFFFFFFFFFFFLL), v42);
                          __cxa_guard_release(&qword_26AF903C0);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF903B8, (uint64_t)&v56, 0xCuLL, 0);
                        uint64_t v26 = *(void *)(v19 + 8);
                        LODWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
                        HIDWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v26;
                        LODWORD(v57) = *(_DWORD *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF903D0, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF903D0))
                        {
                          qword_26AF903C8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24REAnimationCompleteEvent" & 0x7FFFFFFFFFFFFFFFLL), v43);
                          __cxa_guard_release(&qword_26AF903D0);
                        }
                        uint64_t v23 = qword_26AF903C8;
                        goto LABEL_37;
                      case 3:
                        uint64_t v27 = *(void *)(v18 + 8);
                        uint64_t v56 = v4;
                        uint64_t v57 = v27;
                        uint64_t v58 = *(void *)(v18 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF903E0, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF903E0))
                        {
                          qword_26AF903D8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"25REAnimationHasLoopedEvent" & 0x7FFFFFFFFFFFFFFFLL), v44);
                          __cxa_guard_release(&qword_26AF903E0);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF903D8, (uint64_t)&v56, 0x18uLL, 0);
                        uint64_t v56 = *(void *)(v19 + 8);
                        uint64_t v57 = *(void *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF903F0, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF903F0))
                        {
                          qword_26AF903E8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"22REAnimationLoopedEvent" & 0x7FFFFFFFFFFFFFFFLL), v45);
                          __cxa_guard_release(&qword_26AF903F0);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF903E8, (uint64_t)&v56, 0x10uLL, 0);
                        uint64_t v28 = *(void *)(v19 + 8);
                        LODWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
                        HIDWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v28;
                        uint64_t v57 = *(void *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90400, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF90400))
                        {
                          qword_26AF903F8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"23REAnimationDidLoopEvent" & 0x7FFFFFFFFFFFFFFFLL), v46);
                          __cxa_guard_release(&qword_26AF90400);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF903F8, (uint64_t)&v56, 0x10uLL, 0);
                        uint64_t v29 = *(void *)(v19 + 8);
                        LODWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
                        HIDWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v29;
                        uint64_t v57 = *(void *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90410, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF90410))
                        {
                          qword_26AF90408 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"20REAnimationLoopEvent" & 0x7FFFFFFFFFFFFFFFLL), v47);
                          __cxa_guard_release(&qword_26AF90410);
                        }
                        uint64_t v23 = qword_26AF90408;
                        uint64_t v30 = v10;
                        uint64_t v31 = v4;
                        unint64_t v32 = 16;
                        goto LABEL_38;
                      case 4:
                        uint64_t v33 = *(void *)(v18 + 8);
                        uint64_t v56 = v4;
                        uint64_t v57 = v33;
                        LODWORD(v58) = *(_DWORD *)(v18 + 16);
                        uint64_t HasTerminated = re::EventBus::getTypeId<REAnimationHasTerminatedEvent>();
                        re::EventBus::publish(v10, v4, HasTerminated, (uint64_t)&v56, 0x18uLL, 0);
                        uint64_t v56 = *(void *)(v19 + 8);
                        LODWORD(v57) = *(_DWORD *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90430, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF90430))
                        {
                          qword_26AF90428 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"26REAnimationTerminatedEvent" & 0x7FFFFFFFFFFFFFFFLL), v48);
                          __cxa_guard_release(&qword_26AF90430);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF90428, (uint64_t)&v56, 0x10uLL, 0);
                        uint64_t v35 = *(void *)(v19 + 8);
                        LODWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
                        HIDWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v35;
                        LODWORD(v57) = *(_DWORD *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90440, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF90440))
                        {
                          qword_26AF90438 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"28REAnimationDidTerminateEvent" & 0x7FFFFFFFFFFFFFFFLL), v49);
                          __cxa_guard_release(&qword_26AF90440);
                        }
                        re::EventBus::publish(v10, v4, qword_26AF90438, (uint64_t)&v56, 0xCuLL, 0);
                        uint64_t v36 = *(void *)(v19 + 8);
                        LODWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
                        HIDWORD(vre::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v36;
                        LODWORD(v57) = *(_DWORD *)(v19 + 16);
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90450, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_26AF90450))
                        {
                          qword_26AF90448 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"25REAnimationTerminateEvent" & 0x7FFFFFFFFFFFFFFFLL), v50);
                          __cxa_guard_release(&qword_26AF90450);
                        }
                        uint64_t v23 = qword_26AF90448;
LABEL_37:
                        uint64_t v30 = v10;
                        uint64_t v31 = v4;
                        unint64_t v32 = 12;
LABEL_38:
                        re::EventBus::publish(v30, v31, v23, (uint64_t)&v56, v32, 0);
                        break;
                      default:
                        break;
                    }
                    ++v17;
                  }
                  while (v17 < (unint64_t)this[10]);
                }
              }
            }
          }
        }
      }
      id v51 = this[10];
      if (v51)
      {
        for (unint64_t i = 0; (id)i != v51; ++i)
        {
          uint64_t v53 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)(this + 5), i);
          uint64_t v54 = *(void *)(v53 + 24);
          if (v54)
          {
            uint64_t v55 = v53;

            *(void *)(v55 + 24) = 0;
          }
        }
      }
      this[10] = 0;
      ++*((_DWORD *)this + 22);
      --*((_DWORD *)this + 6);
      if (v4) {
    }
      }
  }
}

uint64_t re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + 40 * (a2 & 7);
}

BOOL re::ecs2::AnimationComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v28, a5, 0);
  unint64_t v9 = v28;
  unint64_t v10 = v29;
  unint64_t v28 = a4;
  unint64_t v29 = v9;
  unint64_t v30 = v10;
  uint64_t v11 = (unsigned __int16)v10;
  uint64_t v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      uint64_t v15 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v29);
      uint64_t v16 = *(unsigned __int8 **)v15;
      uint64_t v17 = *(void *)(*(void *)v15 + 16);
      uint64_t v18 = (unint64_t *)(a3 + 32);
      if (v17)
      {
        uint64_t v19 = *(void *)(v17 + 200);
        if (v19 && (!*(void *)(v19 + 32) || RESyncableIsAuthoritative()))
        {
          int v20 = v16[240] == 2;
        }
        else
        {
          uint64_t v21 = *(void *)(a1 + 8);
          if (v21) {
            int v20 = (*(unsigned __int8 *)(v21 + 424) >> 4) & 1;
          }
          else {
            int v20 = 0;
          }
        }
        re::ecs2::AnimationComponent::initOwnershipState((re::ecs2::AnimationComponent *)v16);
        if (v16[240]) {
          BOOL v22 = v20 == 0;
        }
        else {
          BOOL v22 = 1;
        }
        uint64_t v18 = (unint64_t *)(a3 + 32);
        if (!v22)
        {
          re::ecs2::AnimationComponent::processDefaultTimebaseChanges((re::ecs2::AnimationComponent *)v16);
          uint64_t v18 = (unint64_t *)(a3 + 40);
        }
      }
      unint64_t v23 = v28;
      unint64_t v24 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v29);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v23, v24, *v18);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v29);
    }
    while (v29 != a5 || (unsigned __int16)v30 != 0xFFFF || WORD1(v30) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    unint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

uint64_t re::ecs2::AnimationComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), *(void *)(a3 + 8));
  if (result)
  {
    uint64_t v9 = result;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v24, a5, 0);
    unint64_t v10 = v24;
    unint64_t v11 = v25;
    unint64_t v24 = a4;
    unint64_t v25 = v10;
    unint64_t v26 = v11;
    uint64_t v12 = (unsigned __int16)v11;
    uint64_t v13 = v11 & 0xFFFF0000;
    if (v10 != a5 || v12 != 0xFFFF || v13 != 4294901760)
    {
      do
      {
        uint64_t v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25);
        uint64_t v17 = *(void **)v16;
        ++*(_DWORD *)(*(void *)(*(void *)v16 + 80) + 24);
        re::ecs2::AnimationComponent::processFinishedAnimations(v17, v18);
        int active = re::ecs2::AnimationComponent::processActiveAnimations((uint64_t)v17, v9);
        uint64_t v20 = v17[10];
        int v21 = *(_DWORD *)(v20 + 24) - 1;
        *(_DWORD *)(v20 + 24) = v21;
        if (!v21 && *(void *)(v20 + 80)) {
          (*(void (**)(uint64_t))(*(void *)v20 + 48))(v20);
        }
        if (active)
        {
          unint64_t v22 = v24;
          unint64_t v23 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v25);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v22, v23, *(void *)(a3 + 32));
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
      }
      while (v25 != a5 || (unsigned __int16)v26 != 0xFFFF || WORD1(v26) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  return result;
}

BOOL re::ecs2::AnimationComponentStateImplLegacy::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  unint64_t v8 = v21;
  unint64_t v9 = v22;
  unint64_t v21 = a4;
  unint64_t v22 = v8;
  unint64_t v23 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = *(void *)(*(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22)
                      + 48);
      unint64_t v15 = v21;
      unint64_t v16 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
      if (v14) {
        uint64_t v17 = 40;
      }
      else {
        uint64_t v17 = 32;
      }
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v15, v16, *(void *)(a3 + v17));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AnimationComponentStateImplLegacy::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(void *)(a3 + 8));
  if (result)
  {
    uint64_t v8 = result;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v44, a5, 0);
    v33[3] = a4;
    long long v34 = v44[0];
    if (*(void *)&v44[0] != a5 || WORD4(v44[0]) != 0xFFFFLL || (DWORD2(v44[0]) & 0xFFFF0000) != 4294901760)
    {
      do
      {
        uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v34);
        uint64_t v13 = *(re **)v11;
        uint64_t v14 = *(void *)(*(void *)v11 + 16);
        if (v14)
        {
          if (*(unsigned char *)(v14 + 288))
          {
            uint64_t v15 = *((void *)v13 + 6);
            if (v15)
            {
              uint64_t v16 = 0;
              for (unint64_t i = 0; i != v15; ++i)
              {
                unint64_t v18 = *((void *)v13 + 6);
                if (v18 <= i)
                {
                  uint64_t v35 = 0;
                  memset(v44, 0, sizeof(v44));
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  int v36 = 136315906;
                  uint64_t v37 = "operator[]";
                  __int16 v38 = 1024;
                  int v39 = 789;
                  __int16 v40 = 2048;
                  unint64_t v41 = i;
                  __int16 v42 = 2048;
                  unint64_t v43 = v18;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                uint64_t v19 = *((void *)v13 + 8);
                uint64_t v20 = v19 + v16;
                int v21 = *(unsigned __int8 *)(v19 + v16 + 25);
                if (v21 == 2)
                {
                  LODWORD(v12) = *(_DWORD *)(v20 + 36);
                  double v12 = re::AnimationController::stop((re::AnimationController *)(v20 + 56), v12);
                  *(unsigned char *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
                }
                else if (v21 == 1)
                {
                  uint64_t v22 = v19 + v16;
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)(v19 + v16));
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
                  if (Timeline)
                  {
                    long long v24 = *(_OWORD *)(v22 + 32);
                    uint64_t v32 = *(void *)(v22 + 48);
                    long long v31 = v24;
                    uint64_t v25 = (*(uint64_t (**)(uint64_t, void *, _OWORD *, long long *, uint64_t, void *))(*(void *)v8 + 72))(v8, Timeline, v44, &v31, 4, (void *)v13 + 10);
                    *(void *)(v22 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v25;
                    *(void *)(v22 + 64) = v26;
                    uint64_t v27 = (re::AnimationController *)(v22 + 56);
                    if (v25)
                    {
                      uint64_t v28 = re::DataArray<re::internal::TimelineTree>::tryGet(v25 + (v26 >> 56 << 6) + 72, v26);
                      if (v28) {
                        *(void *)(v28 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = i;
                      }
                    }
                    re::AnimationController::updateAndApply(v27);
                    *(unsigned char *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
                    double v12 = re::BindNode::deinit((re::BindNode *)v44);
                  }
                }
                v16 += 72;
              }
            }
          }
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v34);
      }
      while ((void)v34 != a5 || WORD4(v34) != 0xFFFF || WORD5(v34) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  return result;
}

void *anonymous namespace'::getTimeline(void *result)
{
  uint64_t v1 = result[1];
  if (!v1) {
    return 0;
  }
  unint64_t v2 = result;
  unsigned int v3 = atomic_load((unsigned int *)(v1 + 704));
  if (v3 != 2) {
    goto LABEL_10;
  }
  uint64_t v4 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  id v5 = (uint64_t *)v2[1];
  if (v5) {
    id v5 = (uint64_t *)v5[33];
  }
  if (v4 != v5)
  {
    uint64_t v6 = re::TimelineAsset::assetType((re::TimelineAsset *)v4);
    uint64_t v8 = *(uint64_t **)(v2[1] + 264);
    if (v6 != v8)
    {
      re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) Unknown timeline asset handle type: %s", "!\"Unreachable code\"", "getTimeline", 112, *v8);
      uint64_t result = (void *)_os_crash();
      __break(1u);
      return result;
    }
    uint64_t result = v2;
    goto LABEL_8;
  }
  uint64_t result = (void *)re::AssetHandle::loadedAsset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)v2);
  if (!result) {
    return result;
  }
  uint64_t v9 = result[1];
  if (!v9) {
    return 0;
  }
  unsigned int v10 = atomic_load((unsigned int *)(v9 + 704));
  if (v10 != 2)
  {
LABEL_10:
    re::AssetHandle::loadAsync((re::AssetHandle *)result);
    return 0;
  }
LABEL_8:
  uint64_t result = (void *)re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)result);
  if (result) {
    return (void *)result[2];
  }
  return result;
}

void anonymous namespace'::getAnimationTarget(uint64_t a1, re *this, int a3)
{
  if (a3 == 2)
  {
    uint64_t v3 = *((void *)this + 2);
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 24);
    }
    while (v3);
    uint64_t v6 = *(_anonymous_namespace_ **)(*(void *)(v4 + 16) + 56);
    re::makeBindNode(v6, a1);
  }
  else if (a3 == 1)
  {
    uint64_t v7 = *((void *)this + 2);
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = *(void *)(v7 + 24);
    }
    while (v7);
    unsigned int v10 = *(re **)(v8 + 16);
    re::makeBindNode(v10, a1);
  }
  else if (a3)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)this, "assertion failure: '%s' (%s:line %i) Invalid animation component target.", "!\"Unreachable code\"", "getAnimationTarget", 69);
    _os_crash();
    __break(1u);
  }
  else
  {
    re::makeEntityBindNodeForComponent(this, a1);
  }
}

void re::ecs2::AnimationSystem::willAddSceneToECSService(re::ecs2::AnimationSystem *this, re::EventBus **a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v37 = (re::ecs2::Scene *)a2;
  uint64_t v3 = a2[36];
  if (v3)
  {
    v31[0] = 0;
    v31[1] = 0;
    int v32 = 1;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v33 = 0;
    int v36 = 0;
    uint64_t v4 = re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    uint64_t Type = re::EventBus::getTypeId<REComponentDidActivateEvent>();
    EventInfo = (re *)re::EventBus::addOrGetEventInfo(v3, Type);
    uint64_t v7 = re::globalAllocators(EventInfo)[2];
    v50[0] = &unk_26E70A058;
    uint64_t v51 = v7;
    uint64_t v52 = v50;
    re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>((uint64_t)v50, 0, &v47);
    uint64_t v8 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)&v47, 0, (uint64_t)v4);
    uint64_t v10 = v9;
    re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v47);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v50);
    uint64_t v11 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v31);
    *uint64_t v11 = v8;
    v11[1] = v10;
    uint64_t v14 = v13;
    uint64_t v15 = (re *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v31);
    *(void *)uint64_t v15 = v12;
    *((void *)v15 + 1) = v14;
    uint64_t v42 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v42 + 32))(v42, 32, 0);
    *uint64_t v16 = &unk_26E709AE8;
    v16[1] = this;
    void v16[2] = re::ecs2::AnimationSystem::willRemoveComponentHandler;
    v16[3] = 0;
    unint64_t v43 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, (uint64_t)v41, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v31);
    *uint64_t v20 = v17;
    v20[1] = v19;
    int v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v41);
    uint64_t v22 = re::globalAllocators(v21)[2];
    uint64_t v39 = v22;
    unint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v22 + 32))(v22, 32, 0);
    void *v23 = &unk_26E709B40;
    v23[1] = this;
    void v23[2] = re::ecs2::AnimationSystem::animationTerminatedHandler;
    v23[3] = 0;
    __int16 v40 = v23;
    uint64_t v45 = v22;
    uint64_t v46 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::operator=<24ul>((uint64_t)v44, (uint64_t)v38);
    uint64_t HasTerminated = re::EventBus::getTypeId<REAnimationHasTerminatedEvent>();
    unint64_t v25 = re::EventBus::addOrGetEventInfo(v3, HasTerminated);
    uint64_t v51 = v45;
    uint64_t v52 = 0;
    uint64_t v26 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::operator=<24ul>((uint64_t)v50, (uint64_t)v44);
    v48[5] = re::globalAllocators(v26)[2];
    uint64_t v49 = 0;
    uint64_t v47 = &unk_26E709C00;
    v48[3] = v51;
    v48[4] = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::operator=<24ul>((uint64_t)v48, (uint64_t)v50);
    uint64_t v49 = &v47;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::destroyCallable((uint64_t)v50);
    uint64_t v27 = re::EventBus::EventInfo::addSubscription(v25, (uint64_t)&v47, 0, 0);
    uint64_t v29 = v28;
    re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v47);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::destroyCallable((uint64_t)v44);
    unint64_t v30 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v31);
    void *v30 = v27;
    v30[1] = v29;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::destroyCallable((uint64_t)v38);
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 104, (uint64_t *)&v37, (uint64_t)v31);
    re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v31);
    if (v31[0] && (v32 & 1) == 0) {
      (*(void (**)(void))(*(void *)v31[0] + 40))();
    }
    a2 = (re::EventBus **)v37;
  }
  re::ecs2::BasicComponentStates<re::ecs2::AnimationComponent>::addScene((uint64_t)this + 240, (uint64_t)a2);
  re::ecs2::BasicComponentStates<re::ecs2::AnimationComponent>::addScene((uint64_t)this + 496, (uint64_t)v37);
}

uint64_t anonymous namespace'::activateComponent(uint64_t a1)
{
  uint64_t v1 = (re::ecs2::AnimationComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v1)
  {
    unint64_t v2 = v1;
    if (*((unsigned char *)v1 + 240) == 2)
    {
      uint64_t v3 = re::ecs2::AnimationComponent::parentSimulationTimer(v1);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
        uint64_t v5 = *((void *)v2 + 19);
        if (v5)
        {
          double v6 = v4;
          uint64_t v7 = *((void *)v2 + 21);
          uint64_t v8 = 248 * v5;
          do
          {
            int v9 = *(unsigned __int8 *)(v7 + 57);
            if (v9 == 5 || v9 == 3)
            {
              *(unsigned char *)(v7 + 57) = 0;
              re::ecs2::AnimationComponent::animationEntryParentTime((re::ecs2::Entity **)v2, v6, (const re::ecs2::AnimationEntry *)v7, (uint64_t)v17);
              if (v17[0])
              {
                double v12 = v18;
              }
              else
              {
                uint64_t v13 = *re::ecsComponentsLogObjects(v11);
                BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
                double v12 = v6;
                if (v14)
                {
                  v16[0] = 0;
                  _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Animation activated while desynchronized, possible inconsistent state.", (uint8_t *)v16, 2u);
                  double v12 = v6;
                }
              }
              *(double *)(v7 + 72) = v12;
              *((_DWORD *)v2 + 32) = 0;
            }
            v7 += 248;
            v8 -= 248;
          }
          while (v8);
        }
      }
    }
  }
  return 0;
}

uint64_t anonymous namespace'::deactivateComponent(uint64_t a1)
{
  uint64_t v1 = (re::ecs2::AnimationComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v1) {
    re::ecs2::AnimationComponent::pauseAnimationsForDeactivation(v1);
  }
  return 0;
}

uint64_t re::ecs2::AnimationSystem::willRemoveComponentHandler(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (re::ecs2::AnimationComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2) {
    re::ecs2::AnimationComponent::detachAnimations(v2);
  }
  return 0;
}

uint64_t re::ecs2::AnimationSystem::animationTerminatedHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*((unsigned char *)v4 + 240) == 2)
    {
      unint64_t v6 = re::ecs2::AnimationComponent::animationEntry(v4, *(void *)(a3 + 8));
      if (v6)
      {
        if (*(unsigned char *)(v6 + 57) != 5)
        {
          re::ecs2::AnimationComponent::stop((uint64_t)v5, *(void *)(a3 + 8), 0.0);
          re::ecs2::NetworkComponent::markComponentDirty(v5, v7);
          re::ecs2::Component::markDirty(v5);
        }
      }
    }
  }
  return 0;
}

void re::ecs2::BasicComponentStates<re::ecs2::AnimationComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  v56[0] = a2;
  double v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v48 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v48);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)&v48);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v48);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v48;
    goto LABEL_49;
  }
LABEL_17:
  long long v55 = 0u;
  long long v48 = 0u;
  *(void *)&long long v49 = 0;
  *((void *)&v49 + 1) = -1;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v52 = 0;
  uint64_t v53 = 1;
  long long v54 = 0uLL;
  unint64_t v16 = *(void *)(a1 + 40);
  *(void *)&long long v55 = 0;
  unint64_t v17 = *(void *)(a1 + 8);
  DWORD2(v55) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v16 + 4) >> 2);
    unint64_t v17 = *(void *)(a1 + 8);
  }
  if (v17 <= v16 >> 2)
  {
    v56[1] = 0;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v57 = 136315906;
    uint64_t v58 = "operator[]";
    __int16 v59 = 1024;
    int v60 = 858;
    __int16 v61 = 2048;
    unint64_t v62 = v16 >> 2;
    __int16 v63 = 2048;
    unint64_t v64 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v18 = a1 + 24;
  }
  else {
    uint64_t v18 = *(void *)(a1 + 32);
  }
  uint64_t v19 = *(void *)(v18 + 8 * (v16 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v20 = v19 + 112 * (v16 & 3);
  long long v21 = v48;
  long long v22 = v49;
  long long v23 = v50;
  *(void *)(v20 + 48) = v51;
  *(_OWORD *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)uint64_t v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v51 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v48);
  uint64_t v25 = *(void *)(a1 + 40);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::init(v26, a1, v56[0]);
  *(void *)&v65[0] = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)v65);
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 160);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 160) = v27;
  *(void *)&long long v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v29, &v48);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 160) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v32 = a1 + 144;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 152);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 128) - 8) &= v30;
  }
  unint64_t v33 = *(void *)(a1 + 40);
  unint64_t v34 = *(void *)(a1 + 208);
  if ((v33 & 0x3F) != 0) {
    unint64_t v35 = (v33 >> 6) + 1;
  }
  else {
    unint64_t v35 = v33 >> 6;
  }
  *(void *)(a1 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = v33;
  *(void *)&long long v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v35, &v48);
  if (v33 && v34 > v33)
  {
    uint64_t v36 = 63;
    uint64_t v37 = *(void *)(a1 + 208) & 0x3FLL;
    if (v37 && v37 != 63) {
      uint64_t v36 = ~(-1 << v37);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v38 = a1 + 192;
    }
    else {
      uint64_t v38 = *(void *)(a1 + 200);
    }
    *(void *)(v38 + 8 * *(void *)(a1 + 176) - 8) &= v36;
  }
  unint64_t v15 = *(void *)&v65[0];
  uint64_t v14 = a1 + 168;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v39 = *(void *)(a1 + 176);
  int v40 = *(_DWORD *)(a1 + 184);
  if (v39 >= 0xB)
  {
    if (v40) {
      unint64_t v41 = (void *)(a1 + 192);
    }
    else {
      unint64_t v41 = *(void **)(a1 + 200);
    }
    uint64_t v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43) {
        return;
      }
    }
LABEL_65:
    uint64_t v47 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v47 + 86)) {
      re::ecs2::System::queueToRun(v47, 0.0);
    }
    return;
  }
  if (v40)
  {
    uint64_t v42 = (uint64_t *)(a1 + 192);
    if (!v39) {
      return;
    }
  }
  else
  {
    uint64_t v42 = *(uint64_t **)(a1 + 200);
    if (!v39) {
      return;
    }
  }
  uint64_t v44 = 0;
  uint64_t v45 = 8 * v39;
  do
  {
    uint64_t v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44) {
    goto LABEL_65;
  }
}

re *re::ecs2::AnimationSystem::willAddSystemToECSService(re::ecs2::AnimationSystem *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = re::ServiceLocator::serviceOrNull<re::ecs2::AnimationSceneService>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = (re *)re::ServiceLocator::serviceOrNull<re::Engine>(v3);
  *((void *)this + 26) = result;
  unint64_t v5 = (re::EventBus *)*((void *)result + 173);
  if (v5)
  {
    uint64_t v10 = re::globalAllocators(result)[2];
    int v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10 + 32))(v10, 32, 0);
    *int v6 = &unk_26E709BA8;
    v6[1] = this;
    char v6[2] = re::ecs2::AnimationSystem::sceneWillRemoveHandler;
    void v6[3] = 0;
    uint64_t v11 = v6;
    *((void *)this + 19) = re::EventBus::subscribe<re::ecs2::Scene,RESceneWillRemoveEvent>(v5, (uint64_t)v9, 0, 0);
    *((void *)this + 20) = v7;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::destroyCallable((uint64_t)v9);
    uint64_t result = (re *)*((void *)this + 26);
  }
  uint64_t v8 = *((void *)this + 25);
  *((void *)this + 28) = result;
  *((void *)this + 29) = v8;
  *((void *)this + 61) = v8;
  return result;
}

uint64_t re::ecs2::AnimationSystem::sceneWillRemoveHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3)
    {
      double v4 = *(re::ecs2::AnimationComponent ***)(v2 + 40);
      uint64_t v5 = 8 * v3;
      do
      {
        int v6 = *v4++;
        re::ecs2::AnimationComponent::detachAnimations(v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::AnimationSystem::willRemoveSceneFromECSService(re::ecs2::AnimationSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v11 = a2;
  uint64_t v3 = (char *)this + 104;
  uint64_t v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v11);
  if (v4)
  {
    uint64_t v5 = *((void *)v11 + 36);
    if (v5)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(void *)(v4 + 40);
      if (v7)
      {
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v9 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v6, i);
          re::EventBus::unsubscribe(v5, *(void *)v9, *(void *)(v9 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v11);
  }
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 240, (uint64_t)v11);
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 496, (uint64_t)v11);
}

uint64_t re::ecs2::AnimationSystem::willRemoveSystemFromECSService(re::ecs2::AnimationSystem *this)
{
  uint64_t result = *(void *)(*((void *)this + 26) + 1384);
  if (result) {
    uint64_t result = re::EventBus::unsubscribe(result, *((void *)this + 19), *((void *)this + 20));
  }
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  return result;
}

uint64_t re::ecs2::AnimationSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = a3;
  v18[1] = a4;
  if (a2)
  {
    if ((a3 & 0xFF00000000) == 0)
    {
      uint64_t v4 = result;
      if (*(void *)(result + 200))
      {
        uint64_t v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v17);
        isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
        if (isStatisticCollectionEnabled)
        {
          uint64_t v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
          uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          unint64_t v10 = v9 ? *(void *)(v9 + 24) : 0;
          uint64_t v11 = *(int64x2_t **)(v8 + 152);
          if (v11)
          {
            unint64_t v12 = v11[432].u64[0];
            if (v12 >= v10) {
              unint64_t v12 = v10;
            }
            v11[432].i64[0] = v12;
            unint64_t v13 = v11[432].u64[1];
            if (v13 <= v10) {
              unint64_t v13 = v10;
            }
            v11[432].i64[1] = v13;
            int64x2_t v14 = vdupq_n_s64(1uLL);
            v14.i64[0] = v10;
            v11[433] = vaddq_s64(v11[433], v14);
            *(unsigned char *)(v8 + 184) = 0;
          }
        }
        re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v16, 3029, v4);
        re::ecs2::BasicComponentStates<re::ecs2::AnimationComponent>::updateForScene(v4 + 240, a2, (uint64_t)v18);
        uint64_t v15 = *(void *)(v4 + 208);
        if (v15)
        {
          if ((*(unsigned char *)(v15 + 424) & 0x10) != 0) {
            re::ecs2::BasicComponentStates<re::ecs2::AnimationComponent>::updateForScene(v4 + 496, a2, (uint64_t)v18);
          }
        }
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v16);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v17);
      }
    }
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::AnimationComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  unint64_t v5 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v24)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v5);
  uint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v5);
  uint64_t v7 = *(void *)(*v6 + 224);
  unint64_t v8 = v6[3];
  unint64_t v9 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v6[2] + 8, v8);
  if (*(_DWORD *)(v9 + 40)) {
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v7 + 24))(v7, a3, v6, v8, v9, 0);
  }
  else {
    int v10 = 0;
  }
  unint64_t v11 = v6[5];
  unint64_t v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v6[2] + 8, v11);
  if (*(_DWORD *)(v12 + 40)) {
    v10 |= (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v7 + 32))(v7, a3, v6, v11, v12, 0);
  }
  unint64_t v13 = v6[6];
  unint64_t v14 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v6[2] + 8, v13);
  if (*(_DWORD *)(v14 + 40))
  {
    if (((v10 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, void))(*(void *)v7 + 40))(v7, a3, v6, v13, v14, 0)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v10) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v5);
LABEL_9:
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v15 = *(void *)(a1 + 176);
  int v16 = *(_DWORD *)(a1 + 184);
  if (v15 >= 0xB)
  {
    if (v16) {
      unint64_t v17 = (void *)(a1 + 192);
    }
    else {
      unint64_t v17 = *(void **)(a1 + 200);
    }
    uint64_t v19 = 8 * v15;
    while (!*v17)
    {
      ++v17;
      v19 -= 8;
      if (!v19) {
        return;
      }
    }
LABEL_27:
    long long v23 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v23 + 86)) {
      re::ecs2::System::queueToRun(v23, 0.0);
    }
    return;
  }
  if (v16)
  {
    uint64_t v18 = (uint64_t *)(a1 + 192);
    if (!v15) {
      return;
    }
  }
  else
  {
    uint64_t v18 = *(uint64_t **)(a1 + 200);
    if (!v15) {
      return;
    }
  }
  uint64_t v20 = 0;
  uint64_t v21 = 8 * v15;
  do
  {
    uint64_t v22 = *v18++;
    v20 |= v22;
    v21 -= 8;
  }
  while (v21);
  if (v20) {
    goto LABEL_27;
  }
}

void re::ecs2::introspect_AnimationComponentTarget(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90268, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF90268);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Entity";
      qword_26AF90488 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      unint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)unint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Scene";
      qword_26AF90490 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Service";
      qword_26AF90498 = v30;
      __cxa_guard_release(&qword_26AF90268);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90270, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90270))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF90628, "AnimationComponentTarget", 1, 1, 1, 1);
    qword_26AF90628 = (uint64_t)&unk_26E715E00;
    qword_26AF90668 = (uint64_t)&re::ecs2::introspect_AnimationComponentTarget(BOOL)::enumTable;
    dword_26AF90638 = 9;
    __cxa_guard_release(&qword_26AF90270);
  }
  if ((_MergedGlobals_330 & 1) == 0)
  {
    _MergedGlobals_330 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF90628, a2);
    uint64_t v32 = 0xC1A027EF051A1D4;
    unint64_t v33 = "AnimationComponentTarget";
    v36[0] = 6104748;
    v36[1] = "char";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF90668;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            unint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.unint64_t var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.unint64_t var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF90648 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnimationComponentTarget", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_AnimationComponentRequest(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90278, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF90278);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "None";
      qword_26AF904A0 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      unint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)unint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Start";
      qword_26AF904A8 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Stop";
      qword_26AF904B0 = v30;
      __cxa_guard_release(&qword_26AF90278);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90280, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90280))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF90670, "AnimationComponentRequest", 1, 1, 1, 1);
    qword_26AF90670 = (uint64_t)&unk_26E715E00;
    qword_26AF906B0 = (uint64_t)&re::ecs2::introspect_AnimationComponentRequest(BOOL)::enumTable;
    dword_26AF90680 = 9;
    __cxa_guard_release(&qword_26AF90280);
  }
  if ((byte_26AF90261 & 1) == 0)
  {
    byte_26AF90261 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF90670, a2);
    uint64_t v32 = 0x77264D5E53E0FCACLL;
    unint64_t v33 = "AnimationComponentRequest";
    v36[0] = 6104748;
    v36[1] = "char";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF906B0;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            unint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.unint64_t var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.unint64_t var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF90690 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnimationComponentRequest", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_AnimationEntryState(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90288, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF90288);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Playing";
      qword_26AF904D8 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      unint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)unint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Paused";
      qword_26AF904E0 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Stopped";
      qword_26AF904E8 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "DeactivatePaused";
      qword_26AF904F0 = (uint64_t)v32;
      unint64_t v33 = re::introspectionAllocator(v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = 4;
      *(void *)(v34 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "FadeOut";
      qword_26AF904F8 = v34;
      __cxa_guard_release(&qword_26AF90288);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90290, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90290))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF906B8, "AnimationEntryState", 1, 1, 1, 1);
    qword_26AF906B8 = (uint64_t)&unk_26E715E00;
    qword_26AF906F8 = (uint64_t)&re::ecs2::introspect_AnimationEntryState(BOOL)::enumTable;
    dword_26AF906C8 = 9;
    __cxa_guard_release(&qword_26AF90290);
  }
  if ((byte_26AF90262 & 1) == 0)
  {
    byte_26AF90262 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF906B8, a2);
    uint64_t v36 = 0x3630FE52B2D2DB86;
    uint64_t v37 = "AnimationEntryState";
    v40[0] = 6104748;
    v40[1] = "char";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v40);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v40);
      uint64_t v4 = (unsigned int *)qword_26AF906F8;
      v39[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            unint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v38.var0 = 2 * v10;
            v38.unint64_t var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v14, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v38.var0 = 2 * v18;
              v38.unint64_t var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v22, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v23);
      xmmword_26AF906D8 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnimationEntryState", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_AnimationComponentEntry(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90298, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90298))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90700, "AnimationComponentEntry");
    __cxa_guard_release(&qword_26AF90298);
  }
  return &unk_26AF90700;
}

void re::ecs2::initInfo_AnimationComponentEntry(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v19[0] = 0x637CB5C20625B3F2;
  v19[1] = "AnimationComponentEntry";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF902A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF902A0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "timeline";
      *(void *)(v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF904B8 = v8;
      unint64_t v9 = (re::ecs2 *)re::introspectionAllocator((re *)v8);
      re::ecs2::introspect_AnimationComponentTarget(v9, v10);
      uint64_t v11 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "target";
      *(void *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF90628;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF904C0 = v11;
      unint64_t v12 = (re::ecs2 *)re::introspectionAllocator((re *)v11);
      re::ecs2::introspect_AnimationComponentRequest(v12, v13);
      uint64_t v14 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "request";
      *(void *)(v14 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF90670;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1900000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF904C8 = v14;
      unint64_t v15 = re::introspectionAllocator((re *)v14);
      uint64_t v16 = re::introspect_AnimationHandoffDesc((re::IntrospectionBase **)1);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "handoff";
      *(void *)(v17 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x2000000004;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF904D0 = v17;
      __cxa_guard_release(&qword_26AF902A0);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF904B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationComponentEntry>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationComponentEntry>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationComponentEntry>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationComponentEntry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

void re::internal::defaultConstruct<re::ecs2::AnimationComponentEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a3 = 0;
  *(_WORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 44) = 0x80000000;
  *(void *)(a3 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 48) = "";
}

void re::internal::defaultDestruct<re::ecs2::AnimationComponentEntry>(uint64_t a1, uint64_t a2, re::ecs2::AnimationComponentEntry *a3)
{
}

uint64_t re::internal::defaultConstructV2<re::ecs2::AnimationComponentEntry>(uint64_t result)
{
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_WORD *)(result + 24) = 0;
  *(_DWORD *)(result + 44) = 0x80000000;
  *(void *)(result + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 48) = "";
  return result;
}

void *re::ecs2::allocInfo_ExternalAnimationEntry(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF902B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF902B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90778, "ExternalAnimationEntry");
    __cxa_guard_release(&qword_26AF902B0);
  }
  return &unk_26AF90778;
}

void re::ecs2::initInfo_ExternalAnimationEntry(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x2AAB698E8554D832;
  v14[1] = "ExternalAnimationEntry";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF902B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF902B8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_uint64_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "entity";
      *(void *)(v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF90478 = v8;
      unint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_uint64_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "token";
      *(void *)(v12 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF90480 = v12;
      __cxa_guard_release(&qword_26AF902B8);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF90478;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ExternalAnimationEntry>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ExternalAnimationEntry>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ExternalAnimationEntry>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ExternalAnimationEntry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::ExternalAnimationEntry>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

void *re::internal::defaultConstructV2<re::ecs2::ExternalAnimationEntry>(void *result)
{
  re *result = 0;
  result[1] = 0;
  return result;
}

void *re::ecs2::allocInfo_AnimationEntry(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF902C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF902C8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF907F0, "AnimationEntry");
    __cxa_guard_release(&qword_26AF902C8);
  }
  return &unk_26AF907F0;
}

void re::ecs2::initInfo_AnimationEntry(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v59[0] = 0xC56CB686D928B6DCLL;
  v59[1] = "AnimationEntry";
  re::StringID::destroyString((re::StringID *)v59);
  *((_OWORD *)this + 2) = v60;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF902D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF902D0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "timeline";
      *(void *)(v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF90868 = v8;
      unint64_t v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::SRTAnimationAssetData *>::get();
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "srtTimelineData";
      *(void *)(v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF90528;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x3000000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF90870 = v10;
      uint64_t v11 = (re::ecs2 *)re::introspectionAllocator((re *)v10);
      re::ecs2::introspect_AnimationComponentTarget(v11, v12);
      uint64_t v13 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "target";
      *(void *)(v13 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF90628;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x3800000003;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF90878 = v13;
      uint64_t v14 = (re::ecs2 *)re::introspectionAllocator((re *)v13);
      re::ecs2::introspect_AnimationEntryState(v14, v15);
      uint64_t v16 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "animationState";
      *(void *)(v16 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF906B8;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x3900000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF90880 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_uint8_t((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "statePlaybackTimeVersion";
      *(void *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x3A00000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF90888 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_double((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "stateTime";
      *(void *)(v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x4800000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF90890 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      unint64_t v27 = re::introspect_double((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "statePlaybackTime";
      *(void *)(v28 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x5000000007;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF90898 = v28;
      unint64_t v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_uint64_t((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "parentTimebaseID";
      *(void *)(v32 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x6000000008;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF908A0 = v32;
      unint64_t v33 = re::introspectionAllocator((re *)v32);
      uint64_t v34 = re::introspect_AnimationHandoffDesc((re::IntrospectionBase **)1);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "handoff";
      *(void *)(v35 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x6800000009;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF908A8 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      StringID v38 = re::introspect_uint64_t((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + 8) = "animationToken";
      *(void *)(v39 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x800000000ALL;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 48) = 0;
      *(void *)(v39 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF908B0 = v39;
      int v40 = re::introspectionAllocator((re *)v39);
      uint64_t v42 = re::introspect_uint8_t((re *)1, v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + 8) = "playbackFlags";
      *(void *)(v43 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0x880000000BLL;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 48) = 0;
      *(void *)(v43 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF908B8 = v43;
      uint64_t v44 = re::introspectionAllocator((re *)v43);
      uint64_t v46 = re::introspect_float((re *)1, v45);
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + 8) = "playbackSpeed";
      *(void *)(v47 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v46;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0x8C0000000CLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + 48) = 0;
      *(void *)(v47 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26AF908C0 = v47;
      long long v48 = re::introspectionAllocator((re *)v47);
      long long v50 = re::introspect_float((re *)1, v49);
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + 8) = "blendFactor";
      *(void *)(v51 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v50;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + 32) = 0x900000000DLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + 48) = 0;
      *(void *)(v51 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_26AF908C8 = v51;
      uint64_t v52 = re::introspectionAllocator((re *)v51);
      long long v54 = re::introspect_float((re *)1, v53);
      uint64_t v55 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 72, 8);
      *(_DWORD *)uint64_t v55 = 1;
      *(void *)(v55 + 8) = "fadeOutTime";
      *(void *)(v55 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v54;
      *(void *)(v55 + 24) = 0;
      *(void *)(v55 + 32) = 0x940000000ELL;
      *(_DWORD *)(v55 + 40) = 0;
      *(void *)(v55 + 48) = 0;
      *(void *)(v55 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_26AF908D0 = v55;
      uint64_t v56 = (re::ecs2 *)re::introspectionAllocator((re *)v55);
      re::IntrospectionInfo<re::Optional<re::ecs2::ExternalAnimationEntry>>::get(v56);
      uint64_t v57 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v56 + 32))(v56, 72, 8);
      *(_DWORD *)uint64_t v57 = 1;
      *(void *)(v57 + 8) = "parentAnimationEntry";
      *(void *)(v57 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF90568;
      *(void *)(v57 + 24) = 0;
      *(void *)(v57 + 32) = 0x980000000FLL;
      *(_DWORD *)(v57 + 40) = 0;
      *(void *)(v57 + 48) = 0;
      *(void *)(v57 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v57 + 64) = 0;
      qword_26AF908D8 = v57;
      __cxa_guard_release(&qword_26AF902D0);
    }
  }
  *((void *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 15;
  *((void *)this + 8) = &qword_26AF90868;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationEntry>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationEntry>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationEntry>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationEntry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v58 = v60;
}

void re::IntrospectionInfo<re::SRTAnimationAssetData *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90458, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90458))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF90528);
    __cxa_guard_release(&qword_26AF90458);
  }
  if ((byte_26AF90263 & 1) == 0)
  {
    byte_26AF90263 = 1;
    uint64_t v0 = re::introspect_SRTAnimationAssetData((re::IntrospectionBase **)1);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF90528, 0);
    qword_26AF90538 = 0x800000001;
    dword_26AF90540 = 8;
    word_26AF90544 = 0;
    *(void *)&xmmword_26AF90548 = 0;
    *((void *)&xmmword_26AF90548 + 1) = 0xFFFFFFFFLL;
    qword_26AF90528 = (uint64_t)&unk_26E6CDA08;
    qword_26AF90558 = v0;
    qword_26AF90560 = 0;
    re::IntrospectionRegistry::add(v1, v2);
    re::getPrettyTypeName((re *)&qword_26AF90528, (const re::IntrospectionBase *)&v6);
    if (BYTE8(v6)) {
      uint64_t v3 = v7;
    }
    else {
      uint64_t v3 = (char *)&v6 + 9;
    }
    if (void)v6 && (BYTE8(v6)) {
      (*(void (**)(void))(*(void *)v6 + 40))();
    }
    if (v8 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      long long v4 = v6;
    }
    else
    {
      long long v6 = *(_OWORD *)(v0 + 32);
      long long v4 = v5;
    }
    xmmword_26AF90548 = v4;
    re::StringID::destroyString((re::StringID *)&v8);
  }
}

void re::IntrospectionInfo<re::Optional<re::ecs2::ExternalAnimationEntry>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90460, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF90460);
    if (a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF90568);
      qword_26AF90568 = (uint64_t)&unk_26E709DB8;
      __cxa_guard_release(&qword_26AF90460);
    }
  }
  if ((byte_26AF90264 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF902C0;
    if (qword_26AF902C0
      || (uint64_t v1 = re::ecs2::allocInfo_ExternalAnimationEntry(a1),
          qword_26AF902C0 = (uint64_t)v1,
          re::ecs2::initInfo_ExternalAnimationEntry((re::ecs2 *)v1, v2),
          (byte_26AF90264 & 1) == 0))
    {
      byte_26AF90264 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF90568, 0);
      qword_26AF90578 = 0x180000000DLL;
      dword_26AF90580 = v3;
      word_26AF90584 = 0;
      *(void *)&xmmword_26AF90588 = 0;
      *((void *)&xmmword_26AF90588 + 1) = 0xFFFFFFFFLL;
      qword_26AF90598 = (uint64_t)v1;
      qword_26AF905A0 = 0;
      qword_26AF90568 = (uint64_t)&unk_26E709DB8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF90568, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x18uLL, 8uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::ecs2::ExternalAnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::ecs2::ExternalAnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF90588 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

re::ecs2::AnimationEntry *re::internal::defaultConstruct<re::ecs2::AnimationEntry>(int a1, int a2, re::ecs2::AnimationEntry *this)
{
  return re::ecs2::AnimationEntry::AnimationEntry(this);
}

void re::internal::defaultDestruct<re::ecs2::AnimationEntry>(uint64_t a1, uint64_t a2, id *a3)
{
}

void *re::ecs2::allocInfo_AnimationComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF902E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF902E8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF908E0, "AnimationComponent");
    __cxa_guard_release(&qword_26AF902E8);
  }
  return &unk_26AF908E0;
}

void re::ecs2::initInfo_AnimationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v46 = 0x3B8DF49FA88D23F2;
  uint64_t v47 = "AnimationComponent";
  re::StringID::destroyString((re::StringID *)&v46);
  *((_OWORD *)this + 2) = v41;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF902E0, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF902E0);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF90500 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      uint64_t v9 = v8;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90468, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF90468);
        if (v8)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF905A8);
          qword_26AF905A8 = (uint64_t)&unk_26E709E38;
          __cxa_guard_release(&qword_26AF90468);
        }
      }
      if ((byte_26AF90265 & 1) == 0)
      {
        long long v10 = (void *)qword_26AF902A8;
        if (qword_26AF902A8
          || (long long v10 = re::ecs2::allocInfo_AnimationComponentEntry(v8),
              qword_26AF902A8 = (uint64_t)v10,
              re::ecs2::initInfo_AnimationComponentEntry((re::ecs2 *)v10, v11),
              (byte_26AF90265 & 1) == 0))
        {
          byte_26AF90265 = 1;
          int v12 = *((_DWORD *)v10 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF905A8, 0);
          qword_26AF905B8 = 0x2800000003;
          dword_26AF905C0 = v12;
          word_26AF905C4 = 0;
          *(void *)&xmmword_26AF905C8 = 0;
          *((void *)&xmmword_26AF905C8 + 1) = 0xFFFFFFFFLL;
          qword_26AF905D8 = (uint64_t)v10;
          qword_26AF905E0 = 0;
          qword_26AF905A8 = (uint64_t)&unk_26E709E38;
          re::IntrospectionRegistry::add(v13, v14);
          re::getPrettyTypeName((re *)&qword_26AF905A8, (const re::IntrospectionBase *)&v46);
          if (v47) {
            char v15 = v48;
          }
          else {
            char v15 = (char *)&v47 + 1;
          }
          if (v46 && (v47 & 1) != 0) {
            (*(void (**)(void))(*(void *)v46 + 40))();
          }
          long long v43 = *((_OWORD *)v10 + 2);
          uint64_t v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
          if (v16)
          {
            uint64_t v17 = *v16;
            *((void *)&v42 + 1) = v17;
          }
          else
          {
            long long v45 = v43;
            re::TypeBuilder::beginListType((uint64_t)&v46, v44, 1, 0x28uLL, 8uLL, &v45);
            re::TypeBuilder::setConstructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v46, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v46, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v46, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v18);
          }
          xmmword_26AF905C8 = v42;
          re::StringID::destroyString((re::StringID *)v44);
        }
      }
      uint64_t v19 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "animations";
      *(void *)(v19 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF905A8;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2000000001;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF90508 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_uint64_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "defaultTimebaseID";
      *(void *)(v23 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x4800000002;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF90510 = v23;
      uint64_t v24 = (re::ecs2 *)re::introspectionAllocator((re *)v23);
      uint64_t v25 = v24;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90470, memory_order_acquire) & 1) == 0)
      {
        uint64_t v24 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF90470);
        if (v24)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF905E8);
          qword_26AF905E8 = (uint64_t)&unk_26E709ED0;
          __cxa_guard_release(&qword_26AF90470);
        }
      }
      if ((byte_26AF90266 & 1) == 0)
      {
        uint64_t v26 = (void *)qword_26AF902D8;
        if (qword_26AF902D8
          || (uint64_t v26 = re::ecs2::allocInfo_AnimationEntry(v24),
              qword_26AF902D8 = (uint64_t)v26,
              re::ecs2::initInfo_AnimationEntry((re::ecs2 *)v26, v27),
              (byte_26AF90266 & 1) == 0))
        {
          byte_26AF90266 = 1;
          int v28 = *((_DWORD *)v26 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF905E8, 0);
          qword_26AF905F8 = 0x2800000003;
          dword_26AF90600 = v28;
          word_26AF90604 = 0;
          *(void *)&xmmword_26AF90608 = 0;
          *((void *)&xmmword_26AF90608 + 1) = 0xFFFFFFFFLL;
          qword_26AF90618 = (uint64_t)v26;
          qword_26AF90620 = 0;
          qword_26AF905E8 = (uint64_t)&unk_26E709ED0;
          re::IntrospectionRegistry::add(v29, v30);
          re::getPrettyTypeName((re *)&qword_26AF905E8, (const re::IntrospectionBase *)&v46);
          if (v47) {
            uint64_t v31 = v48;
          }
          else {
            uint64_t v31 = (char *)&v47 + 1;
          }
          if (v46 && (v47 & 1) != 0) {
            (*(void (**)(void))(*(void *)v46 + 40))();
          }
          long long v43 = *((_OWORD *)v26 + 2);
          uint64_t v32 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
          if (v32)
          {
            uint64_t v33 = *v32;
            *((void *)&v42 + 1) = v33;
          }
          else
          {
            long long v45 = v43;
            re::TypeBuilder::beginListType((uint64_t)&v46, v44, 1, 0x28uLL, 8uLL, &v45);
            re::TypeBuilder::setConstructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v46, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v46, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v46, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v34);
          }
          xmmword_26AF90608 = v42;
          re::StringID::destroyString((re::StringID *)v44);
        }
      }
      uint64_t v35 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "m_animationEntries";
      *(void *)(v35 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF905E8;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x5800000003;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF90518 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      StringID v38 = re::introspect_uint64_t((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + 8) = "m_currentAnimationToken";
      *(void *)(v39 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0xD800000004;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 48) = 0;
      *(void *)(v39 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF90520 = v39;
      __cxa_guard_release(&qword_26AF902E0);
    }
  }
  *((void *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF90500;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v40 = v41;
}

re::ecs2::AnimationComponent *re::internal::defaultConstruct<re::ecs2::AnimationComponent>(int a1, int a2, id **this)
{
  return re::ecs2::AnimationComponent::AnimationComponent(this);
}

void re::internal::defaultDestruct<re::ecs2::AnimationComponent>(uint64_t a1, uint64_t a2, re::ecs2::AnimationComponent *a3)
{
}

uint64_t re::ecs2::introspect_AnimationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationComponent>, this);
}

void *re::ecs2::allocInfo_AnimationSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF902F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF902F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90958, "AnimationSystem");
    __cxa_guard_release(&qword_26AF902F0);
  }
  return &unk_26AF90958;
}

void re::ecs2::initInfo_AnimationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xE82A1A547CEAFD66;
  v5[1] = "AnimationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x2E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AnimationSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AnimationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AnimationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::AnimationSystem *re::internal::defaultConstruct<re::ecs2::AnimationSystem>(int a1, int a2, re::ecs2::AnimationSystem *this)
{
  return re::ecs2::AnimationSystem::AnimationSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AnimationSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 62);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 30);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 13);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AnimationSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 62);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 30);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 13);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnimationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationSystem>, this);
}

void re::ecs2::AnimationComponent::AnimationComponentEventDelegate::~AnimationComponentEventDelegate(re::ecs2::AnimationComponent::AnimationComponentEventDelegate *this)
{
  re::ecs2::AnimationComponent::AnimationComponentEventDelegate::~AnimationComponentEventDelegate(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t *v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_26E709958;
  uint64_t v2 = (uint64_t *)((char *)this + 40);
  int v3 = *((void *)this + 10);
  if (v3)
  {
    for (unint64_t i = 0; i != v3; ++i)
    {
      long long v5 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)v2, i);
      long long v6 = *(void *)(v5 + 24);
      if (v6)
      {
        uint64_t v7 = v5;

        *(void *)(v7 + 24) = 0;
      }
    }
  }
  while (*((void *)this + 6))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  *((void *)this + 10) = 0;
  ++*((_DWORD *)this + 22);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  objc_destroyWeak((id *)this + 4);
  *((void *)this + 4) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnimationComponent>::dependsOnComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnimationComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AnimationComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::AnimationSystem::~AnimationSystem(re::ecs2::AnimationSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 62);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 30);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AnimationSystem::typeInfo(re::ecs2::AnimationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationSystem>, 0);
}

void re::ecs2::AnimationComponent::~AnimationComponent(re::ecs2::AnimationComponent *this)
{
  re::ecs2::AnimationComponent::~AnimationComponent(this);
  JUMPOUT(0x237DBCBD0);
}

{
  const void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *((void *)this + 29) = 0;
  uint64_t v2 = (const void *)*((void *)this + 28);
  if (v2) {
    CFRelease(v2);
  }
  re::DynamicArray<re::ecs2::AnimationShadowEntry>::clear((uint64_t)this + 176);
  re::DynamicArray<re::ecs2::AnimationEntry>::clear((uint64_t)this + 88);
  *((_DWORD *)this + 32) = 0;
  re::DynamicArray<re::ecs2::AnimationEntry>::clear((uint64_t)this + 136);
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::clear((re::ecs2::AnimationComponent *)((char *)this + 32));
  *((void *)this + 27) = 1000;
  *((unsigned char *)this + 240) = 0;
  int v3 = *((void *)this + 22);
  if (v3)
  {
    long long v4 = (uint64_t *)*((void *)this + 26);
    if (v4)
    {
      long long v5 = *((void *)this + 24);
      if (v5)
      {
        uint64_t v6 = 144 * v5;
        do
        {
          re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)v4);
          std::unique_ptr<re::Timeline,std::function<void ()(re::Timeline*)>>::~unique_ptr[abi:nn180100](v4 + 6);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v4 + 3));
          v4 += 18;
          v6 -= 144;
        }
        while (v6);
        int v3 = *((void *)this + 22);
        long long v4 = (uint64_t *)*((void *)this + 26);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 40))(v3, v4);
    }
    *((void *)this + 26) = 0;
    *((void *)this + 23) = 0;
    *((void *)this + 24) = 0;
    *((void *)this + 22) = 0;
    ++*((_DWORD *)this + 50);
  }
  re::DynamicArray<re::ecs2::AnimationEntry>::deinit((uint64_t)this + 136);
  re::DynamicArray<re::ecs2::AnimationEntry>::deinit((uint64_t)this + 88);
  unint64_t v7 = *((void *)this + 10);
  if (v7)
  {

    *((void *)this + 10) = 0;
  }
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit((uint64_t)this + 32);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t *std::unique_ptr<re::Timeline,std::function<void ()(re::Timeline*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::Timeline *)>::operator()(a1[4], v2);
  }
  std::__function::__value_func<void ()(re::Timeline *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void *std::__function::__value_func<void ()(re::Timeline *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E709A58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E709A58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::operator()(uint64_t a1, uint64_t *a2, Allocator *a3)
{
  return re::internal::destroy(*a2, *(re::Timeline **)(a1 + 8), a3);
}

uint64_t std::__function::__func<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0,std::allocator<anonymous namespace'::processAnimationState(re::ecs2::AnimationEntry const&,re::ecs2::AnimationShadowEntry &,re::AnimationService *,re::ecs2::AnimationComponent *,OpaqueCMTimebase *)::$_0>,void ()(re::Timeline *)>::target_type()
{
}

re::ecs2::AnimationEntry *re::ecs2::AnimationEntry::AnimationEntry(re::ecs2::AnimationEntry *this)
{
  *(_OWORD *)((char *)this + 41) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_WORD *)((char *)this + 57) = 2;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((unsigned char *)this + 112) = 0;
  *((_DWORD *)this + 29) = 0x80000000;
  *((void *)this + 15) = "";
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *((unsigned char *)this + 136) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)((char *)this + 140) = _D0;
  *((_DWORD *)this + 37) = 0;
  *((unsigned char *)this + 152) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 50) = 0;
  *((void *)this + 24) = 0;
  objc_initWeak((id *)this + 27, 0);
  *((void *)this + 29) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  return this;
}

void re::ecs2::AnimationEntry::~AnimationEntry(id *this)
{
  re::ecs2::AnimationEntry::deinit((re::ecs2::AnimationEntry *)this);
  objc_destroyWeak(this + 27);
  this[27] = 0;
  id v2 = this[22];
  if (v2)
  {
    if (this[26]) {
      (*(void (**)(id))(*(void *)v2 + 40))(v2);
    }
    this[26] = 0;
    this[23] = 0;
    this[24] = 0;
    this[22] = 0;
    ++*((_DWORD *)this + 50);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 3));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)this);
}

void re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  id v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    id v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709AE8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709AE8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709B40;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709B40;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  unint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    unint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      unint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709BA8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709BA8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AnimationSystem,REEventHandlerResult (re::ecs2::AnimationSystem::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::ecs2::AnimationComponentEntry::~AnimationComponentEntry(re::ecs2::AnimationComponentEntry *this)
{
  if (*(void *)this)
  {

    *(void *)this = 0;
  }
  *((void *)this + 1) = 0;
  *((_WORD *)this + 12) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 40) = 0;
  *((_DWORD *)this + 11) = 0x80000000;
  *((void *)this + 6) = "";
  re::AnimationController::stop((re::ecs2::AnimationComponentEntry *)((char *)this + 56), 0.0);
  re::AssetHandle::~AssetHandle(this);
}

id *std::function<void ()(re::Timeline *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (a1) {
    return (id *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v5);
  }
  uint64_t v3 = (re *)std::__throw_bad_function_call[abi:nn180100]();
  return re::make::shared::object<re::ecs2::AnimationComponent::AnimationComponentEventDelegate,re::ecs2::AnimationComponent&>(v3, v4);
}

id *re::make::shared::object<re::ecs2::AnimationComponent::AnimationComponentEventDelegate,re::ecs2::AnimationComponent&>@<X0>(re *a1@<X0>, id **a2@<X8>)
{
  long long v4 = re::globalAllocators(a1);
  uint64_t v5 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 96, 8);
  unint64_t result = re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationComponentEventDelegate(v5, a1);
  *a2 = result;
  return result;
}

id *re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationComponentEventDelegate(id *this, re::ecs2::AnimationComponent *a2)
{
  *this = &unk_26E709958;
  *((_DWORD *)this + 6) = 0;
  objc_initWeak(this + 4, (char *)a2 + 8);
  this[5] = 0;
  this[6] = 0;
  *((_DWORD *)this + 14) = 1;
  this[9] = 0;
  this[10] = 0;
  this[8] = 0;
  *((_DWORD *)this + 22) = 0;
  return this;
}

long long *re::ecs2::AnimationEntry::operator=(long long *a1, long long *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v4 = *a1;
  *(void *)a1 = 0;
  uint64_t v5 = *((void *)a1 + 2);
  *(long long *)((char *)a1 + 8) = 0u;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = v6;
  uint64_t v7 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  long long v8 = *a2;
  *a2 = v4;
  *(_OWORD *)to = v8;
  *((void *)a2 + 2) = v5;
  *(void *)&to[16] = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)to);
  long long v9 = *(long long *)((char *)a1 + 24);
  *((void *)a1 + 3) = 0;
  uint64_t v10 = *((void *)a1 + 5);
  a1[2] = 0u;
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  uint64_t v11 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *((void *)a1 + 5);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  long long v13 = *(long long *)((char *)a2 + 24);
  *(long long *)((char *)a2 + 24) = v9;
  *(_OWORD *)to = v13;
  *((void *)a2 + 5) = v10;
  *(void *)&to[16] = v12;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)to);
  uint64_t v14 = *((void *)a1 + 6);
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  LOBYTE(v14) = *((unsigned char *)a1 + 56);
  *((unsigned char *)a1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v14;
  LOBYTE(v14) = *((unsigned char *)a1 + 57);
  *((unsigned char *)a1 + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v14;
  LOBYTE(v14) = *((unsigned char *)a1 + 58);
  *((unsigned char *)a1 + 58) = *((unsigned char *)a2 + 58);
  *((unsigned char *)a2 + 58) = v14;
  uint64_t v15 = *((void *)a1 + 9);
  *((void *)a1 + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v15;
  uint64_t v16 = *((void *)a1 + 10);
  *((void *)a1 + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *((void *)a2 + 10);
  *((void *)a2 + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v16;
  uint64_t v17 = *((void *)a1 + 11);
  *((void *)a1 + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v17;
  uint64_t v18 = *((void *)a1 + 12);
  *((void *)a1 + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v18;
  uint64_t v19 = *((void *)a1 + 15);
  long long v20 = *(long long *)((char *)a1 + 104);
  uint64_t v21 = *((void *)a2 + 15);
  *(long long *)((char *)a1 + 104) = *(long long *)((char *)a2 + 104);
  *((void *)a1 + 15) = v21;
  *(long long *)((char *)a2 + 104) = v20;
  *((void *)a2 + 15) = v19;
  uint64_t v22 = *((void *)a1 + 16);
  *((void *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v22;
  LOBYTE(v22) = *((unsigned char *)a1 + 136);
  *((unsigned char *)a1 + 136) = *((unsigned char *)a2 + 136);
  *((unsigned char *)a2 + 136) = v22;
  LODWORD(v2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *((_DWORD *)a1 + 35);
  *((_DWORD *)a1 + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v20;
  LODWORD(v2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *((_DWORD *)a1 + 36);
  *((_DWORD *)a1 + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v20;
  LODWORD(v2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *((_DWORD *)a1 + 37);
  *((_DWORD *)a1 + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v20;
  *(void *)to = 0;
  objc_moveWeak((id *)to, (id *)a1 + 27);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a1 + 27, (id *)a2 + 27);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a2 + 27, (id *)to);
  objc_destroyWeak((id *)to);
  uint64_t v23 = *((void *)a1 + 28);
  *((void *)a1 + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v23;
  uint64_t v24 = *((void *)a1 + 29);
  *((void *)a1 + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v24;
  uint64_t v25 = *((void *)a1 + 30);
  *((void *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 30) = v25;
  int v26 = *((unsigned __int8 *)a1 + 152);
  if (*((unsigned char *)a1 + 152))
  {
    *(_OWORD *)&to[7] = a1[10];
    if (!*((unsigned char *)a2 + 152))
    {
      *((unsigned char *)a1 + 152) = 0;
      BOOL v27 = *((unsigned char *)a2 + 152) != 0;
      goto LABEL_11;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + 152))
    {
      int v28 = 0;
      goto LABEL_7;
    }
    *((unsigned char *)a1 + 152) = 1;
  }
  a1[10] = a2[10];
  int v28 = *((unsigned __int8 *)a2 + 152);
LABEL_7:
  if (!(v28 | v26)) {
    goto LABEL_15;
  }
  BOOL v27 = v28 != 0;
  if (!v26 && v28)
  {
    *((unsigned char *)a2 + 152) = 0;
    goto LABEL_15;
  }
LABEL_11:
  if (v26 && !v27) {
    *((unsigned char *)a2 + 152) = 1;
  }
  a2[10] = *(_OWORD *)&to[7];
LABEL_15:
  uint64_t v29 = (uint64_t)(a2 + 11);
  *(void *)to = *((void *)a1 + 22);
  *(_OWORD *)&to[8] = *(long long *)((char *)a1 + 184);
  *((void *)a1 + 22) = 0;
  *((void *)a1 + 23) = 0;
  *((void *)a1 + 24) = 0;
  uint64_t v33 = *((void *)a1 + 26);
  *((void *)a1 + 26) = 0;
  ++*((_DWORD *)a1 + 50);
  int v32 = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a1 + 11), v29);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v29, (uint64_t)to);
  if (*(void *)to && v33) {
    (*(void (**)(void))(**(void **)to + 40))();
  }
  return a1;
}

void *re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xF8uLL))
        {
          uint64_t v2 = 248 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 248 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 248, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (long long *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 248 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ecs2::AnimationEntry::AnimationEntry(v11, v8);
          re::ecs2::AnimationEntry::~AnimationEntry((id *)v8);
          long long v8 = (long long *)((char *)v8 + 248);
          v11 += 248;
          v10 -= 248;
        }
        while (v10);
        long long v8 = (long long *)v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, long long *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

long long *re::ecs2::AnimationEntry::AnimationEntry(uint64_t a1, long long *a2)
{
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 57) = 2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0x80000000;
  *(void *)(a1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = "";
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 14ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = _D0;
  *(_DWORD *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 20ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(a1 + 192) = 0;
  objc_initWeak((id *)(a1 + 216), 0);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 24ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(a1 + 224) = 0;
  return re::ecs2::AnimationEntry::operator=((long long *)a1, a2);
}

uint64_t *re::ecs2::AnimationShadowEntry::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a2[1] = v5;
  a2[2] = v6;
  long long v7 = *(_OWORD *)(a1 + 3);
  a1[3] = 0;
  a1[4] = 0;
  uint64_t v8 = a1[5];
  a1[5] = 0;
  a1[4] = a2[4];
  a2[4] = 0;
  uint64_t v9 = a1[3];
  a1[3] = 0;
  a1[3] = a2[3];
  a2[3] = v9;
  uint64_t v10 = a1[5];
  a1[5] = a2[5];
  long long v11 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a2 + 3) = v7;
  *(_OWORD *)BOOL v27 = v11;
  a2[5] = v8;
  *(void *)&v27[16] = v10;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
  uint64_t v12 = a1[6];
  a1[6] = a2[6];
  a2[6] = v12;
  if (a2 != a1)
  {
    long long v13 = a1 + 7;
    uint64_t v14 = a2 + 7;
    uint64_t v15 = (uint64_t *)a1[10];
    uint64_t v16 = (uint64_t *)a2[10];
    if (v15 == a1 + 7)
    {
      if (v16 == v14)
      {
        (*(void (**)(uint64_t *, unsigned char *))(a1[7] + 24))(a1 + 7, v27);
        (*(void (**)(uint64_t))(*(void *)a1[10] + 32))(a1[10]);
        a1[10] = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a2[10] + 24))(a2[10], a1 + 7);
        (*(void (**)(uint64_t))(*(void *)a2[10] + 32))(a2[10]);
        a2[10] = 0;
        a1[10] = (uint64_t)v13;
        (*(void (**)(unsigned char *, uint64_t *))(*(void *)v27 + 24))(v27, a2 + 7);
        (*(void (**)(unsigned char *))(*(void *)v27 + 32))(v27);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *))(a1[7] + 24))(a1 + 7, a2 + 7);
        (*(void (**)(uint64_t))(*(void *)a1[10] + 32))(a1[10]);
        a1[10] = a2[10];
      }
      a2[10] = (uint64_t)v14;
    }
    else if (v16 == v14)
    {
      (*(void (**)(uint64_t *, uint64_t *))(a2[7] + 24))(a2 + 7, a1 + 7);
      (*(void (**)(uint64_t))(*(void *)a2[10] + 32))(a2[10]);
      a2[10] = a1[10];
      a1[10] = (uint64_t)v13;
    }
    else
    {
      a1[10] = (uint64_t)v16;
      a2[10] = (uint64_t)v15;
    }
  }
  char v17 = *((unsigned char *)a1 + 88);
  *((unsigned char *)a1 + 88) = *((unsigned char *)a2 + 88);
  *((unsigned char *)a2 + 88) = v17;
  char v18 = *((unsigned char *)a1 + 89);
  *((unsigned char *)a1 + 89) = *((unsigned char *)a2 + 89);
  *((unsigned char *)a2 + 89) = v18;
  uint64_t v19 = a1[12];
  a1[12] = a2[12];
  a2[12] = v19;
  LOBYTE(v19) = *((unsigned char *)a1 + 104);
  *((unsigned char *)a1 + 104) = *((unsigned char *)a2 + 104);
  *((unsigned char *)a2 + 104) = v19;
  int v20 = *((_DWORD *)a1 + 27);
  *((_DWORD *)a1 + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v20;
  int v21 = *((_DWORD *)a1 + 28);
  *((_DWORD *)a1 + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v21;
  int v22 = *((_DWORD *)a1 + 29);
  *((_DWORD *)a1 + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v22;
  int v23 = *((unsigned __int8 *)a1 + 120);
  if (*((unsigned char *)a1 + 120))
  {
    *(_OWORD *)&v27[7] = *((_OWORD *)a1 + 8);
    if (!*((unsigned char *)a2 + 120))
    {
      *((unsigned char *)a1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      BOOL v24 = *((unsigned char *)a2 + 120) != 0;
      goto LABEL_20;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + 120))
    {
      int v25 = 0;
      goto LABEL_16;
    }
    *((unsigned char *)a1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
  }
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  int v25 = *((unsigned __int8 *)a2 + 120);
LABEL_16:
  if (!(v25 | v23)) {
    return a1;
  }
  BOOL v24 = v25 != 0;
  if (!v23 && v25)
  {
    *((unsigned char *)a2 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    return a1;
  }
LABEL_20:
  if (v23 && !v24) {
    *((unsigned char *)a2 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
  }
  *((_OWORD *)a2 + 8) = *(_OWORD *)&v27[7];
  return a1;
}

void *re::DynamicArray<re::ecs2::AnimationShadowEntry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::ecs2::AnimationShadowEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          uint64_t v2 = 144 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 144 * v9;
        __asm { FMOV            V8.2S, #1.0 }
        do
        {
          char v17 = &v7[v10 / 8];
          v17[10] = 0;
          *(_OWORD *)char v17 = 0u;
          *((_OWORD *)v17 + 1) = 0u;
          *((_OWORD *)v17 + 2) = 0u;
          v17[6] = 0;
          *((_WORD *)v17 + 44) = 2;
          v17[12] = 0;
          *((unsigned char *)v17 + 104) = 0;
          *(void *)((char *)v17 + 108) = _D8;
          *((_DWORD *)v17 + 29) = 0;
          *((unsigned char *)v17 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
          re::ecs2::AnimationShadowEntry::operator=(&v7[v10 / 8], (uint64_t *)(v8 + v10));
          re::ecs2::AnimationShadowEntry::deinit((re::ecs2::AnimationShadowEntry *)(v8 + v10));
          std::unique_ptr<re::Timeline,std::function<void ()(re::Timeline*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v8 + v10 + 48));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + v10 + 24));
          v10 += 144;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

id *re::DynamicArray<re::ecs2::AnimationEntry>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity(a1, *(void *)(a2 + 16));
    unint64_t result = (id *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 248 * a1[2], a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = 248 * v9;
      uint64_t v11 = *(void *)(a2 + 32) + v10;
      uint64_t v12 = a1[4] + v10;
      uint64_t v13 = 248 * v4 - v10;
      __asm { FMOV            V8.2S, #1.0 }
      do
      {
        *(_OWORD *)(v12 + 41) = 0u;
        *(_OWORD *)(v12 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)uint64_t v12 = 0u;
        *(_WORD *)(v12 + 57) = 2;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(unsigned char *)(v12 + 112) = 0;
        *(_DWORD *)(v12 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0x80000000;
        *(void *)(v12 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = "";
        *(void *)(v12 + 128) = 0;
        *(unsigned char *)(v12 + 136) = 0;
        *(void *)(v12 + 14ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = _D8;
        *(_DWORD *)(v12 + 148) = 0;
        *(unsigned char *)(v12 + 152) = 0;
        *(void *)(v12 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = 0;
        *(void *)(v12 + 176) = 0;
        *(void *)(v12 + 184) = 0;
        *(_DWORD *)(v12 + 20ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
        *(void *)(v12 + 192) = 0;
        objc_initWeak((id *)(v12 + 216), 0);
        *(void *)(v12 + 232) = 0;
        *(void *)(v12 + 24ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
        *(void *)(v12 + 224) = 0;
        unint64_t result = (id *)re::ecs2::AnimationEntry::operator=(v12, v11);
        v11 += 248;
        v12 += 248;
        v13 -= 248;
      }
      while (v13);
    }
  }
  else
  {
    unint64_t result = (id *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 248 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      unint64_t result = (id *)(a1[4] + 248 * v4);
      uint64_t v7 = -248 * v4 + 248 * v6;
      do
      {
        re::ecs2::AnimationEntry::~AnimationEntry(result);
        unint64_t result = (id *)(v8 + 248);
        v7 -= 248;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,re::ecs2::AnimationEntry *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      unint64_t result = re::ecs2::AnimationEntry::operator=(a3, v5);
      v5 += 248;
      a3 += 248;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::ecs2::AnimationEntry::operator=(uint64_t a1, uint64_t a2)
{
  re::ecs2::AnimationEntry::deinit((re::ecs2::AnimationEntry *)a1);
  re::AssetHandle::operator=(a1, (uint64_t *)a2);
  unint64_t v4 = (_anonymous_namespace_ *)re::AssetHandle::operator=(a1 + 24, (uint64_t *)(a2 + 24));
  uint64_t v5 = *(re::SRTAnimationAssetData **)(a2 + 48);
  if (v5)
  {
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)(a1 + 48) = v6;
  *(_WORD *)(a1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(_WORD *)(a2 + 56);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v7 = *(const void **)(a2 + 88);
  *(void *)(a1 + 88) = v7;
  if (v7) {
    CFRetain(v7);
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v8;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 14ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(a2 + 140);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (*(unsigned char *)(a1 + 152) || *(unsigned char *)(a2 + 152))
  {
    if (!*(unsigned char *)(a1 + 152) || *(unsigned char *)(a2 + 152))
    {
      if (!*(unsigned char *)(a1 + 152) && *(unsigned char *)(a2 + 152)) {
        *(unsigned char *)(a1 + 152) = 1;
      }
      *(_OWORD *)(a1 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(_OWORD *)(a2 + 160);
    }
    else
    {
      *(unsigned char *)(a1 + 152) = 0;
    }
  }
  if (a1 != a2)
  {
    uint64_t v9 = *(void *)(a2 + 176);
    if (*(void *)(a1 + 176))
    {
      if (v9) {
        re::DynamicArray<re::RigNodeChannel>::copy((void **)(a1 + 176), a2 + 176);
      }
      else {
        *(void *)(a1 + 192) = 0;
      }
      ++*(_DWORD *)(a1 + 200);
    }
    else if (v9)
    {
      unint64_t v10 = *(void *)(a2 + 192);
      *(void *)(a1 + 176) = v9;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)(a1 + 176), v10);
      ++*(_DWORD *)(a1 + 200);
      re::DynamicArray<re::RigNodeChannel>::copy((void **)(a1 + 176), a2 + 176);
    }
  }
  uint64_t v11 = *(const void **)(a2 + 224);
  *(void *)(a1 + 224) = v11;
  if (v11) {
    CFRetain(v11);
  }
  uint64_t v12 = *(const void **)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 24ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v12;
  if (v12) {
    CFRetain(v12);
  }
  return a1;
}

uint64_t re::EventBus::getTypeId<REAnimationHasTimelineEventUpdate>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90300, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90300))
  {
    qword_26AF902F8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"33REAnimationHasTimelineEventUpdate" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF90300);
  }
  return qword_26AF902F8;
}

uint64_t re::EventBus::getTypeId<REAnimationHasTimelineEventEnd>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90310, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90310))
  {
    qword_26AF90308 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"30REAnimationHasTimelineEventEnd" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF90310);
  }
  return qword_26AF90308;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventCreated>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90320))
  {
    qword_26AF90318 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"31REAnimationTimelineEventCreated" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF90320);
  }
  return qword_26AF90318;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventTerminated>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90330, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90330))
  {
    qword_26AF90328 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"34REAnimationTimelineEventTerminated" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF90330);
  }
  return qword_26AF90328;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventSkipped>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90340, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90340))
  {
    qword_26AF90338 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"31REAnimationTimelineEventSkipped" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF90340);
  }
  return qword_26AF90338;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventPause>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90350, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90350))
  {
    qword_26AF90348 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"29REAnimationTimelineEventPause" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF90350);
  }
  return qword_26AF90348;
}

uint64_t re::EventBus::getTypeId<REAnimationTimelineEventResume>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90360, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90360))
  {
    qword_26AF90358 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"30REAnimationTimelineEventResume" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF90360);
  }
  return qword_26AF90358;
}

uint64_t re::EventBus::getTypeId<REAnimationHasTerminatedEvent>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90420, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90420))
  {
    qword_26AF90418 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"29REAnimationHasTerminatedEvent" & 0x7FFFFFFFFFFFFFFFLL), v1);
    __cxa_guard_release(&qword_26AF90420);
  }
  return qword_26AF90418;
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~Callable()
{
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*a2, a3);
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70A058;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70A058;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 16;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E709C00;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E709C00;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E709C00;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E709C00;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REAnimationHasTerminatedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REAnimationHasTerminatedEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *unint64_t v10 = &unk_26E709C58;
    v10[1] = a1;
    void v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E709CB0;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    double v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    int v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v20 = v17;
    v20[1] = v19;
    int v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    int v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *int v22 = &unk_26E709D08;
    v22[1] = a1;
    _OWORD v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    long long v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    int v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v26 = v23;
    v26[1] = v25;
    BOOL v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *uint64_t v28 = &unk_26E709D60;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    long long v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    int v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      uint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E709C58;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        long long v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *long long v43 = &unk_26E709CB0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E709D08;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        unint64_t v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E709D60;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        unint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        __int16 v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *__int16 v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709C58;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709C58;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709CB0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709CB0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709D08;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709D08;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E709D60;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E709D60;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::ecs2::ExternalAnimationEntry>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::ecs2::ExternalAnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  unint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::ecs2::ExternalAnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, long long *a2)
{
  if (a2)
  {
    long long v3 = *a2;
    if (*(unsigned char *)result)
    {
      long long v2 = *a2;
    }
    else
    {
      *(unsigned char *)unint64_t result = 1;
      long long v2 = v3;
    }
    *(_OWORD *)(result + 8) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit(a2);
  *(void *)a2 = a3;
  unint64_t result = re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::AnimationComponentEntry>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  HIDWORD(v11) = 0x80000000;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = "";
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::add(a4, v10);
  re::ecs2::AnimationComponentEntry::~AnimationComponentEntry((re::ecs2::AnimationComponentEntry *)v10);
  unint64_t v8 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 72 * *(void *)(a4 + 16) - 72);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationComponentEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 72 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 72 * a3;
}

uint64_t re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    long long v3 = *(re::ecs2::AnimationComponentEntry **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 72 * v4;
        do
        {
          re::ecs2::AnimationComponentEntry::~AnimationComponentEntry(v3);
          long long v3 = (re::ecs2::AnimationComponentEntry *)((char *)v3 + 72);
          v5 -= 72;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        long long v3 = *(re::ecs2::AnimationComponentEntry **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::ecs2::AnimationComponentEntry *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          uint64_t v2 = 72 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        void v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (long long *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 72 * v9;
        long long v11 = v7;
        do
        {
          *((unsigned char *)v11 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
          v11[4] = 0;
          v11[1] = 0;
          void v11[2] = 0;
          *long long v11 = 0;
          *((_WORD *)v11 + 12) = 0;
          *((_DWORD *)v11 + 11) = 0x80000000;
          v11[7] = 0;
          v11[8] = 0;
          v11[6] = "";
          re::ecs2::AnimationComponentEntry::operator=((long long *)v11, v8);
          re::ecs2::AnimationComponentEntry::~AnimationComponentEntry((re::ecs2::AnimationComponentEntry *)v8);
          unint64_t v8 = (long long *)((char *)v8 + 72);
          v11 += 9;
          v10 -= 72;
        }
        while (v10);
        unint64_t v8 = (long long *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, long long *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

long long *re::ecs2::AnimationComponentEntry::operator=(long long *a1, long long *a2)
{
  long long v4 = *a1;
  *(void *)a1 = 0;
  uint64_t v5 = *((void *)a1 + 2);
  *(long long *)((char *)a1 + 8) = 0u;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = v6;
  uint64_t v7 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  long long v8 = *a2;
  *a2 = v4;
  long long v17 = v8;
  *((void *)a2 + 2) = v5;
  uint64_t v18 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  char v9 = *((unsigned char *)a1 + 24);
  *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v9;
  char v10 = *((unsigned char *)a1 + 25);
  *((unsigned char *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = *((unsigned char *)a2 + 25);
  *((unsigned char *)a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = v10;
  uint64_t v11 = *((void *)a1 + 6);
  long long v12 = a1[2];
  uint64_t v13 = *((void *)a2 + 6);
  a1[2] = a2[2];
  *((void *)a1 + 6) = v13;
  a2[2] = v12;
  *((void *)a2 + 6) = v11;
  uint64_t v14 = *((void *)a1 + 7);
  uint64_t v15 = *((void *)a1 + 8);
  *(long long *)((char *)a1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *((void *)a1 + 7) = *((void *)a2 + 7);
  *((void *)a1 + 8) = *((void *)a2 + 8);
  *((void *)a2 + 7) = v14;
  *((void *)a2 + 8) = v15;
  return a1;
}

void re::DynamicArray<re::ecs2::AnimationComponentEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 72 * a2;
    unint64_t v9 = a2;
    do
    {
      re::ecs2::AnimationComponentEntry::~AnimationComponentEntry((re::ecs2::AnimationComponentEntry *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 72;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 72 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
        *(void *)(v7 + 64) = 0;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0uLL;
        *(_DWORD *)(v7 + 44) = 0x80000000;
        *(void *)(v7 + 48) = "";
        v6 += 72;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

long long *re::DynamicArray<re::ecs2::AnimationComponentEntry>::add(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::growCapacity((void *)a1, v4 + 1);
    unint64_t v4 = *(void *)(a1 + 16);
  }
  uint64_t v5 = *(void *)(a1 + 32) + 72 * v4;
  *(unsigned char *)(v5 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)uint64_t v5 = 0;
  *(_WORD *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 44) = 0x80000000;
  *(void *)(v5 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 48) = "";
  uint64_t result = re::ecs2::AnimationComponentEntry::operator=((long long *)v5, a2);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void *re::DynamicArray<re::ecs2::AnimationComponentEntry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::clear((re::ecs2::AnimationComponentEntry *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::AnimationComponentEntry>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      char v10 = *(char **)(a1 + 32);
      uint64_t v11 = 72 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 72;
        v11 -= 72;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 72 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 72 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationComponentEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::AnimationEntry>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::AnimationEntry>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::AnimationEntry>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  re::ecs2::AnimationEntry::AnimationEntry((re::ecs2::AnimationEntry *)v10);
  re::DynamicArray<re::ecs2::AnimationEntry>::add(a4, v10);
  re::ecs2::AnimationEntry::~AnimationEntry((id *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 248 * *(void *)(a4 + 16) - 248);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AnimationEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 248 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 248 * a3;
}

uint64_t re::DynamicArray<re::ecs2::AnimationEntry>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    int v3 = *(id **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 248 * v4;
        do
        {
          re::ecs2::AnimationEntry::~AnimationEntry(v3);
          v3 += 31;
          v5 -= 248;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        int v3 = *(id **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, id *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::ecs2::AnimationEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 248 * a2;
    unint64_t v9 = a2;
    do
    {
      re::ecs2::AnimationEntry::~AnimationEntry((id *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 248;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 248 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(void *)(v7 + 24ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
        *(_OWORD *)(v7 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        re::ecs2::AnimationEntry::AnimationEntry((re::ecs2::AnimationEntry *)v7);
        v6 += 248;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::AnimationEntry>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::AnimationEntry>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::AnimationEntry>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::AnimationEntry>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 248 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 248;
        v11 -= 248;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 248 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 248 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AnimationEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::AnimationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AnimationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void re::ecs2::TextComponent::~TextComponent(id *this)
{
  *this = &unk_26E70A0B0;
  [this[4] invalidate];
  id v2 = this[4];
  this[4] = 0;

  [this[6] invalidate];
  id v3 = this[6];
  this[6] = 0;

  id v4 = this[10];
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = (CGColor *)this[11];
  if (v5) {
    CGColorRelease(v5);
  }

  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  re::ecs2::TextComponent::~TextComponent(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::TextComponent::setSize(re::ecs2::TextComponent *this, const CGSize *a2)
{
  id v3 = this;
  uint64_t v16 = *MEMORY[0x263EF8340];
  CGFloat width = a2->width;
  double height = a2->height;
  BOOL v6 = *((double *)this + 8) == a2->width && *((double *)this + 9) == height;
  double v7 = a2->width;
  if (!v6)
  {
    this = (re::ecs2::TextComponent *)re::ecs2::Component::markDirty(this);
    double v7 = a2->width;
  }
  if (v7 > 2048.0)
  {
    uint64_t v8 = *re::ecsComponentsLogObjects(this);
    this = (re::ecs2::TextComponent *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (this)
    {
      CGFloat v9 = a2->width;
      int v12 = 134218240;
      CGFloat v13 = v9;
      __int16 v14 = 1024;
      int v15 = 2048;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Clamping TextComponent width from %f to %d. Larger sizes are not supported.", (uint8_t *)&v12, 0x12u);
    }
    CGFloat width = 2048.0;
  }
  if (a2->height > 2048.0)
  {
    unint64_t v10 = *re::ecsComponentsLogObjects(this);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      CGFloat v11 = a2->height;
      int v12 = 134218240;
      CGFloat v13 = v11;
      __int16 v14 = 1024;
      int v15 = 2048;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Clamping TextComponent height from %f to %d. Larger sizes are not supported.", (uint8_t *)&v12, 0x12u);
    }
    double height = 2048.0;
  }
  *((CGFloat *)v3 + 8) = width;
  *((double *)v3 + 9) = height;
}

void re::ecs2::TextComponent::setAttributedString(re::ecs2::TextComponent *this, const __CFAttributedString *a2)
{
  if (*((const __CFAttributedString **)this + 10) != a2)
  {
    re::ecs2::Component::markDirty(this);
    id v4 = (const void *)*((void *)this + 10);
    if (v4) {
      CFRelease(v4);
    }
    *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = a2;
    if (a2)
    {
      CFRetain(a2);
    }
  }
}

CGColorRef re::ecs2::TextComponent::setBackgroundColor(CGColorRef this, CGColor *a2)
{
  id v2 = a2;
  id v3 = this;
  if (!a2)
  {
    CFStringRef v4 = (const __CFString *)*MEMORY[0x263F001C8];
    do
      this = CGColorGetConstantColor(v4);
    while (!this);
    id v2 = this;
  }
  if ((CGColor *)v3[11] != v2)
  {
    re::ecs2::Component::markDirty(v3);
    unint64_t v5 = (const void *)v3[11];
    if (v5) {
      CFRelease(v5);
    }
    v3[11] = v2;
    return (CGColorRef)CFRetain(v2);
  }
  return this;
}

float re::ecs2::TextComponent::edgeInsets(re::ecs2::TextComponent *this)
{
  return *((float *)this + 25);
}

uint64_t re::ecs2::TextComponent::initComponentType(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26879AB90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26879AB90))
  {
    qword_26879AB88 = re::internal::getOrCreateInfo((re::internal *)"TextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextComponent, (void (*)(re::IntrospectionBase *))&unk_26879AB80, 0);
    __cxa_guard_release(&qword_26879AB90);
  }
  re::getPrettyTypeName((re *)qword_26879AB88, (const re::IntrospectionBase *)&v25);
  id v2 = (re *)re::DynamicString::rfind((uint64_t)&v25, "Component", v23);
  if (v23[0])
  {
    uint64_t v3 = (v26[0] & 1) != 0 ? v26[0] >> 1 : LOBYTE(v26[0]) >> 1;
    if (v24 == v3 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v25, 0, v24, (re::DynamicString *)&v21);
      re::DynamicString::operator=((re::DynamicString *)&v25, (re::DynamicString *)&v21);
      id v2 = (re *)v21;
      if (v21)
      {
        if (v22) {
          id v2 = (re *)(*(uint64_t (**)(void))(*(void *)v21 + 40))();
        }
      }
    }
  }
  CFStringRef v4 = re::globalAllocators(v2);
  unint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 80, 8);
  BOOL v6 = v5;
  if (v26[0]) {
    double v7 = (const char *)v26[1];
  }
  else {
    double v7 = (char *)v26 + 1;
  }
  *(void *)&v20.var0 = 0;
  v20.unint64_t var1 = "";
  *(void *)BOOL v6 = &unk_26E6E1EB8;
  *((void *)v6 + 1) = 0;
  *((_WORD *)v6 + 8) = -1;
  re::StringID::StringID((_anonymous_namespace_ *)((char *)v6 + 24), &v20);
  *((_DWORD *)v6 + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 4;
  *(void *)BOOL v6 = &unk_26E70A240;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 6) = a1;
  *((void *)v6 + 9) = 0xFFFFFFFFLL;
  *((void *)v6 + 7) = re::ecs2::ComponentTypeBase::makeAllocator(*((re::ecs2::ComponentTypeBase **)v6 + 4), (const char *)0x80);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26879AB90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26879AB90))
  {
    qword_26879AB88 = re::internal::getOrCreateInfo((re::internal *)"TextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextComponent, (void (*)(re::IntrospectionBase *))&unk_26879AB80, 0);
    __cxa_guard_release(&qword_26879AB90);
  }
  uint64_t v8 = qword_26879AB88;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v27);
  CGFloat v9 = *(char **)(v8 + 48);
  if (v9)
  {
    uint64_t v10 = *v9;
    if (*v9)
    {
      char v11 = v9[1];
      if (v11)
      {
        int v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          uint64_t v10 = 31 * v10 + v11;
          int v13 = *v12++;
          char v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v21 = 2 * v10;
  uint64_t v22 = v9;
  __int16 v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v21);
  if (v14)
  {
    uint64_t v15 = *v14;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  *((void *)v6 + 8) = v16;
  *((void *)v6 + 9) = v15;
  re::StringID::destroyString((re::StringID *)&v21);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v27);
  re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentuint64_t Type = v6;
  re::StringID::destroyString((re::StringID *)&v20);
  uint64_t v18 = re::ecs2::ComponentTypeRegistry::instance(v17);
  re::ecs2::ComponentTypeRegistry::add((re::ecs2::ComponentTypeRegistry *)v18, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t result = v25;
  if (v25 && (v26[0] & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v25 + 40))();
  }
  *((void *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType + 1) = re::ecs2::TextComponent::clone;
  return result;
}

re::ecs2::TextComponent *re::ecs2::TextComponent::clone(re::ecs2::TextComponent *this, const re::ecs2::Component *a2)
{
  (*(void (**)(re::ecs2::TextComponent **__return_ptr))(*(void *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                 + 32))(v9);
  uint64_t v3 = v9[0];
  *(_OWORD *)CGFloat v9 = *((_OWORD *)this + 4);
  re::ecs2::TextComponent::setSize(v3, (const CGSize *)v9);
  re::ecs2::TextComponent::setAttributedString(v3, *((const __CFAttributedString **)this + 10));
  re::ecs2::TextComponent::setBackgroundColor(v3, *((CGColor **)this + 11));
  float v4 = *((float *)this + 24);
  if (*((float *)v3 + 24) != v4) {
    re::ecs2::Component::markDirty(v3);
  }
  *((float *)v3 + 24) = v4;
  unint64_t v5 = _Block_copy(*((const void **)this + 15));
  BOOL v6 = _Block_copy(v5);
  double v7 = (void *)*((void *)v3 + 15);
  *((void *)v3 + 15) = v6;

  return v3;
}

uint64_t re::ecs2::TextComponentStateImpl::dependsOnComponents(re::ecs2::TextComponentStateImpl *this)
{
  return *((void *)this + 8);
}

uint64_t re::ecs2::TextComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v90, (uint64_t)a5, 0);
  char v81 = v90[0];
  id v82 = v90[1];
  if (v90[0] == a5 && LOWORD(v90[1]) == 0xFFFFLL && ((uint64_t)v90[1] & 0xFFFF0000) == 4294901760) {
    return a5[10] != 0;
  }
  uint64_t v76 = (void **)(a1 + 16);
  CFStringRef name = (const __CFString *)*MEMORY[0x263F002D8];
  uint64_t v73 = (const re::TextureHandle *)(a1 + 24);
  unint64_t v11 = 0x263F15000uLL;
  float64x2_t v72 = (float64x2_t)vdupq_n_s64(0x3F371EA104B00977uLL);
  while (1)
  {
    uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v81);
    if (!*(unsigned char *)(a1 + 40)) {
      break;
    }
LABEL_19:
    unint64_t v33 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v81);
    re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v33, *(void *)(a3 + 32));
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v81);
    if (v81 == a5 && (unsigned __int16)v82 == 0xFFFF && WORD1(v82) == 0xFFFF) {
      return a5[10] != 0;
    }
  }
  uint64_t v13 = *(void *)v12;
  __int16 v14 = *(void **)(*(void *)v12 + 16);
  uint64_t v15 = +[RETextLayer layer];
  [v15 setName:@"TextComponent Text Layer"];
  [v15 setValue:MEMORY[0x263EFFA88] forKeyPath:@"separatedOptions.enableContext"];
  if (*(unsigned char *)(a1 + 40))
  {
    v83[1] = 0;
    v83[2] = 0;
    v83[0] = 0x3FF0000000000000;
    v83[3] = 0xBFF0000000000000;
    v83[4] = 0;
    v83[5] = 0;
    [v15 setAffineTransform:v83];
  }
  uint64_t v16 = _Block_copy(*(const void **)(v13 + 120));

  if (v16) {
    [v15 setGeometryFlipped:1];
  }
  long long v17 = [MEMORY[0x263F157E0] layer];
  [v17 setName:@"Parent of TextComponent Layer"];
  [v17 addSublayer:v15];
  uint64_t v18 = *(void **)(v13 + 40);
  *(void *)(v13 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v17;

  [*(id *)(v11 + 2304) begin];
  [*(id *)(v11 + 2304) setDisableActions:1];
  double v20 = *(double *)(v13 + 64);
  double v19 = *(double *)(v13 + 72);
  float v21 = *(float *)(v13 + 96);
  int v22 = *(unsigned __int8 *)(a1 + 40);
  id v23 = *(id *)(v13 + 40);
  unint64_t v24 = v23;
  if (v22)
  {
    [v23 setContentsScale:2.0];
    objc_msgSend(*(id *)(v13 + 56), "setFrame:", 0.0, 0.0, v20, v19);
  }
  else
  {
    uint64_t v25 = [v23 sublayers];
    uint64_t v26 = [v25 objectAtIndex:0];

    objc_msgSend(v24, "setFrame:", 0.0, 0.0, v20, v19);
    [v24 setContentsScale:2.0];

    unint64_t v24 = (void *)v26;
  }
  objc_msgSend(v24, "setFrame:", 0.0, 0.0, v20, v19);
  [v24 setAttributedString:*(void *)(v13 + 80)];
  [v24 setBackgroundColor:*(void *)(v13 + 88)];
  LODWORD(v27) = *(_DWORD *)(v13 + 100);
  LODWORD(v28) = *(_DWORD *)(v13 + 104);
  LODWORD(v29) = *(_DWORD *)(v13 + 108);
  LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 30) = *(_DWORD *)(v13 + 112);
  objc_msgSend(v24, "setEdgeInsets:", v27, v28, v29, v30);
  uint64_t v31 = _Block_copy(*(const void **)(v13 + 120));
  [v24 setRenderBlock:v31];

  [v24 setNeedsDisplay];
  int v32 = (re *)[*(id *)(v11 + 2304) commit];
  if (*(unsigned char *)(a1 + 40))
  {
LABEL_18:

    unint64_t v11 = 0x263F15000;
    goto LABEL_19;
  }
  double v80 = v14;
  size_t v36 = vcvtpd_u64_f64(v20);
  size_t v37 = vcvtpd_u64_f64(v19);
  if (!(v37 * v36))
  {
    long long v48 = *re::ecsComponentsLogObjects(v32);
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    LODWORD(v90[0]) = 134218240;
    *(id *)((char *)v90 + 4) = (id)v36;
    WORD2(v90[1]) = 2048;
    *(id *)((char *)&v90[1] + 6) = (id)v37;
    long long v49 = v48;
    uint64_t v50 = "TextComponent attempted to create an empty context size of (%lu x %lu)";
LABEL_47:
    _os_log_impl(&dword_233120000, v49, OS_LOG_TYPE_DEFAULT, v50, (uint8_t *)v90, 0x16u);
    goto LABEL_18;
  }
  uint64_t v38 = CGColorSpaceCreateWithName(name);
  uint64_t v39 = CGBitmapContextCreate(0, v36, v37, 8uLL, 4 * v36, v38, 1u);
  CGColorSpaceRelease(v38);
  if (!v39)
  {
    uint64_t v51 = *re::ecsComponentsLogObjects(v40);
    if (!os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    LODWORD(v90[0]) = 134218240;
    *(id *)((char *)v90 + 4) = (id)v36;
    WORD2(v90[1]) = 2048;
    *(id *)((char *)&v90[1] + 6) = (id)v37;
    long long v49 = v51;
    uint64_t v50 = "TextComponent failed to create a context size of (%lu x %lu)";
    goto LABEL_47;
  }
  [*(id *)(v13 + 40) renderInContext:v39];
  CGImageRef v41 = CGBitmapContextCreateImage(v39);
  CGContextRelease(v39);
  image = v41;
  if (!v41)
  {
    uint64_t v52 = *re::ecsComponentsLogObjects(v42);
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    LODWORD(v90[0]) = 134218240;
    *(id *)((char *)v90 + 4) = (id)v36;
    WORD2(v90[1]) = 2048;
    *(id *)((char *)&v90[1] + 6) = (id)v37;
    long long v49 = v52;
    uint64_t v50 = "TextComponent failed to create an image of a given bitmap context of size (%lu x %lu)";
    goto LABEL_47;
  }
  id v75 = *(id *)(*(void *)(*(void *)(a1 + 8) + 112) + 184);
  uint64_t v87 = 0;
  id v88 = v75;
  v90[0] = 0;
  *(void *)long long v96 = 0;
  TextureCompressionuint64_t Type = re::mtl::getTextureCompressionType(&v88, &v87, v90, v96);
  id v43 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  id v86 = v43;
  objc_msgSend(v43, sel_setStorageMode_, 0);
  if ((objc_msgSend(v43, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v43, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v43, sel_setCompressionType_, TextureCompressionType);
  }
  memset(v96, 0, sizeof(v96));
  int v99 = 0;
  char v100 = 0;
  int v101 = 0;
  char v102 = 0;
  *(void *)uint64_t v98 = 0;
  v98[8] = 0;
  int v103 = 6;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  id v104 = 0;
  long long v97 = 0x100000001uLL;
  uint64_t v44 = re::ImportGraphicsContext::createFromRenderManager(*(re::ImportGraphicsContext **)(*(void *)(a1 + 8) + 112), (re::ImportGraphicsContext *)v85);
  uint64_t v45 = CGImageRetain(image);
  if (!v94)
  {
    id v46 = v90[1];
    id v84 = v46;

    if (v94 != -1) {
      uint64_t v47 = (re *)((uint64_t (*)(char *, id *))*(&off_26E70A220 + v94))(&v89, &v90[1]);
    }
    if (v46)
    {
      NS::SharedPtr<MTL::Texture>::operator=(v76, &v84);
      if (*(void *)(a1 + 32) && *(void *)v73)
      {
        re::TextureHandle::setMetalTexture(v73, v76);
      }
      else
      {
        re::TextureManager::registerTexture(*(os_unfair_lock_s **)(*(void *)(*(void *)(a1 + 8) + 112) + 64), v76, (os_unfair_lock_s **)v90);
        re::TextureHandle::operator=(v73, (re::TextureHandle *)v90);
        re::TextureHandle::invalidate((re::TextureHandle *)v90);
      }
    }
    else
    {
      uint64_t v53 = *re::ecsComponentsLogObjects(v47);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v90[0]) = 0;
        _os_log_impl(&dword_233120000, v53, OS_LOG_TYPE_DEFAULT, "TextComponent failed to convert a CGImage to an mtl::Texture", (uint8_t *)v90, 2u);
      }
    }
    if (v84) {

    }
    if (v86) {
    CGImageRelease(image);
    }
    long long v54 = v80;
    imagea = (re::ecs2::EntityComponentCollection *)(v80 + 4);
    uint64_t v55 = (float32x2_t *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v80 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    float32_t v56 = (double)v36 * 0.000352777778;
    v57.f64[0] = (double)v37;
    v57.f64[1] = v21;
    v55[4].f32[1] = v56;
    v55[5] = vcvt_f32_f64(vmulq_f64(v57, v72));
    v55[4].i16[0] = 32;
    v55[6].i32[1] = 4;
    re::ecs2::Component::markDirty(v55);
    uint64_t v58 = (void *)v80[22];
    if (!v58) {
      uint64_t v58 = (void *)re::ecs2::EntityComponentCollection::add(imagea, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
    if (!v58[9])
    {
      (*(void (**)(id *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 120) + 8))(v90);
      long long v54 = v80;
      re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v58 + 7), (re::AssetHandle *)v90);
      re::ecs2::Component::markDirty(v58);
      __int16 v59 = (re::ecs2::NetworkComponent *)v80[25];
      if (v59
        || (__int16 v59 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add(imagea, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) != 0)
      {
        re::ecs2::NetworkComponent::markDirty(v59, (const re::ecs2::Component *)v58);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v90);
    }
    long long v60 = (const re::ecs2::Component *)v54[24];
    if (!v60) {
      long long v60 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::add(imagea, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
    if (!*((void *)v60 + 6))
    {
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize((uint64_t)v60 + 32, 1uLL);
      if (!*((void *)v60 + 6)) {
        goto LABEL_77;
      }
      uint64_t v62 = *((void *)v60 + 8);
      re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock>(v61, v90);
      ++*(_DWORD *)(v62 + 16);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v62, (uint64_t)v90[0]);
      *(void *)(v62 + 8) = 0;
      if (v90[0]) {
    }
      }
    LOBYTE(v90[0]) = 0;
    v90[1] = *v76;
    unsigned int v94 = 0;
    id v95 = 0;
    *(void *)((char *)&v97 + 5) = 0;
    *(void *)&long long v97 = 0;
    *(_DWORD *)long long v96 = 16777473;
    v96[4] = 1;
    *(_DWORD *)&v96[8] = 1;
    *(_DWORD *)uint64_t v98 = 0;
    uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v90, 6, (long long *)v96);

    if (v94 != -1) {
      uint64_t v64 = (re::TextureAsset *)((uint64_t (*)(unsigned char *, id *))*(&off_26E70A220 + v94))(v96, &v90[1]);
    }
    uint64_t v65 = *(void *)(*(void *)(a1 + 8) + 120);
    uint64_t v66 = re::TextureAsset::assetType(v64);
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)v65
                                                                                                  + 416))(v85, v65, TextureAsset, v66, 0, 0, 0);
    if (!*((void *)v60 + 6))
    {
      id v88 = 0;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v91 = 0u;
      memset(v90, 0, sizeof(v90));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v96 = 136315906;
      *(void *)&v96[4] = "operator[]";
      LOWORD(v97) = 1024;
      *(_DWORD *)((char *)&v97 + 2) = 789;
      WORD3(v97) = 2048;
      *((void *)&v97 + 1) = 0;
      *(_WORD *)uint64_t v98 = 2048;
      *(void *)&v98[2] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_77:
      v85[0] = 0;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v91 = 0u;
      memset(v90, 0, sizeof(v90));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v96 = 136315906;
      *(void *)&v96[4] = "operator[]";
      LOWORD(v97) = 1024;
      *(_DWORD *)((char *)&v97 + 2) = 789;
      WORD3(v97) = 2048;
      *((void *)&v97 + 1) = 0;
      *(_WORD *)uint64_t v98 = 2048;
      *(void *)&v98[2] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v67 = *((void *)v60 + 8);
    ++*(_DWORD *)(v67 + 16);
    uint64_t v68 = *(void *)v67;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v90, (const re::AssetHandle *)v85);
    re::ecs2::SerializableMaterialParameterBlock::setTexture(v68, "textureBaseColor", (const re::AssetHandle *)v90);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v90);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)v60);
    uint64_t v69 = (re::ecs2::NetworkComponent *)v80[25];
    if (v69
      || (uint64_t v69 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add(imagea, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) != 0)
    {
      re::ecs2::NetworkComponent::markDirty(v69, (const re::ecs2::Component *)v55);
      re::ecs2::NetworkComponent::markDirty(v69, v60);
      re::ecs2::NetworkComponent::markDirty(v69, (const re::ecs2::Component *)v13);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v85);
    goto LABEL_18;
  }
  uint64_t v71 = std::__throw_bad_variant_access[abi:nn180100]();
  return re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::setComponentState(v71);
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

re::ecs2::TextSystem *re::ecs2::TextSystem::TextSystem(re::ecs2::TextSystem *this)
{
  v11[1] = *MEMORY[0x263EF8340];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(void *)uint64_t v2 = &unk_26E70A148;
  uint64_t v3 = v2 + 160;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = &unk_26E70A108;
  *(void *)(v2 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = v2;
  *(void *)(v2 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(v2 + 224) = 0;
  *(void *)(v2 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *((unsigned char *)this + 20ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  uint64_t v10 = 1;
  v11[0] = re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  CGFloat v9 = v11;
  float v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 208), (uint64_t)&v9);
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 30) = 0;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 62) = 1;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 7ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 1;
  *((void *)this + 51) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 104) = 1;
  *(_OWORD *)((char *)this + 449) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 44ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 44, 0);
  *((_DWORD *)this + 92) += 2;
  *((void *)this + 49) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 50, 0);
  *((_DWORD *)this + 104) += 2;
  *((void *)this + 55) = 0;
  *((void *)this + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = this;
  *((void *)this + 57) = v3;
  *((unsigned char *)this + 464) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  LOBYTE(v1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v9);
  return this;
}

double re::ecs2::TextSystem::willAddSceneToECSService(re::ecs2::TextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (a2)
  {
    float v4 = (char *)this + 232;
    uint64_t v51 = a2;
    unint64_t v5 = (re::ecs2::TextSystem *)((char *)this + 352);
    unint64_t v6 = *((void *)this + 45);
    int v7 = *((_DWORD *)this + 92);
    if (v6 >= 0xB)
    {
      if (v7) {
        uint64_t v8 = (void *)((char *)this + 376);
      }
      else {
        uint64_t v8 = (void *)*((void *)this + 48);
      }
      uint64_t v10 = 8 * v6;
      while (!*v8)
      {
        ++v8;
        v10 -= 8;
        if (!v10) {
          goto LABEL_18;
        }
      }
      goto LABEL_17;
    }
    if (v7)
    {
      CGFloat v9 = (uint64_t *)((char *)this + 376);
      if (!v6) {
        goto LABEL_18;
      }
    }
    else
    {
      CGFloat v9 = (uint64_t *)*((void *)this + 48);
      if (!v6) {
        goto LABEL_18;
      }
    }
    uint64_t v11 = 0;
    uint64_t v12 = 8 * v6;
    do
    {
      uint64_t v13 = *v9++;
      v11 |= v13;
      v12 -= 8;
    }
    while (v12);
    if (v11)
    {
LABEL_17:
      *(void *)&long long v53 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 352, 0);
      uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v53);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::TextSystem *)((char *)this + 288), &v51, (uint64_t *)&v53);
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v53);
      uint64_t v15 = (char *)this + 400;
      unint64_t v16 = v53;
      goto LABEL_50;
    }
LABEL_18:
    long long v60 = 0u;
    long long v53 = 0u;
    *(void *)&long long v54 = 0;
    *((void *)&v54 + 1) = -1;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v57 = 0;
    uint64_t v58 = 1;
    long long v59 = 0uLL;
    unint64_t v17 = *((void *)this + 34);
    *(void *)&long long v60 = 0;
    unint64_t v18 = *((void *)this + 30);
    DWORD2(v6ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    if (v17 + 1 > 4 * v18)
    {
      re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,4ul>::setBucketsCapacity((void *)this + 29, (v17 + 4) >> 2);
      unint64_t v18 = *((void *)this + 30);
    }
    if (v18 <= v17 >> 2)
    {
      uint64_t v52 = 0;
      memset(v69, 0, sizeof(v69));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v61 = 136315906;
      uint64_t v62 = "operator[]";
      __int16 v63 = 1024;
      int v64 = 858;
      __int16 v65 = 2048;
      unint64_t v66 = v17 >> 2;
      __int16 v67 = 2048;
      unint64_t v68 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      if (*((unsigned char *)this + 248)) {
        double v19 = (char *)this + 256;
      }
      else {
        double v19 = (char *)*((void *)this + 33);
      }
      uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
      ++*((void *)this + 34);
      ++*((_DWORD *)this + 70);
      uint64_t v21 = v20 + 112 * (v17 & 3);
      long long v22 = v53;
      long long v23 = v54;
      long long v24 = v55;
      *(void *)(v21 + 48) = v56;
      *(_OWORD *)(v21 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v23;
      *(_OWORD *)(v21 + 32) = v24;
      *(_OWORD *)uint64_t v21 = v22;
      re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v56 + 8);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v53);
      uint64_t v26 = *((void *)this + 34);
      if (v26)
      {
        uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
        re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::init(v27, (uint64_t)v4, (uint64_t)v51);
        *(void *)&v69[0] = *((void *)this + 34) - 1;
        re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::TextSystem *)((char *)this + 288), &v51, (uint64_t *)v69);
        unint64_t v28 = *((void *)this + 34);
        unint64_t v29 = *((void *)this + 49);
        if ((v28 & 0x3F) != 0) {
          unint64_t v30 = (v28 >> 6) + 1;
        }
        else {
          unint64_t v30 = v28 >> 6;
        }
        *((void *)this + 49) = v28;
        *(void *)&long long v53 = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v53);
        if (v28 && v29 > v28)
        {
          uint64_t v31 = 63;
          uint64_t v32 = *((void *)this + 49) & 0x3FLL;
          if (v32 && v32 != 63) {
            uint64_t v31 = ~(-1 << v32);
          }
          if (*((unsigned char *)this + 368)) {
            unint64_t v33 = (char *)this + 376;
          }
          else {
            unint64_t v33 = (char *)*((void *)this + 48);
          }
          *(void *)&v33[8 * *((void *)this + 45) - 8] &= v31;
        }
        unint64_t v34 = *((void *)this + 34);
        unint64_t v35 = *((void *)this + 55);
        if ((v34 & 0x3F) != 0) {
          unint64_t v36 = (v34 >> 6) + 1;
        }
        else {
          unint64_t v36 = v34 >> 6;
        }
        *((void *)this + 55) = v34;
        *(void *)&long long v53 = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::TextSystem *)((char *)this + 400), v36, &v53);
        if (v34 && v35 > v34)
        {
          uint64_t v37 = 63;
          uint64_t v38 = *((void *)this + 55) & 0x3FLL;
          if (v38 && v38 != 63) {
            uint64_t v37 = ~(-1 << v38);
          }
          if (*((unsigned char *)this + 416)) {
            uint64_t v39 = (char *)this + 424;
          }
          else {
            uint64_t v39 = (char *)*((void *)this + 54);
          }
          *(void *)&v39[8 * *((void *)this + 51) - 8] &= v37;
        }
        unint64_t v16 = *(void *)&v69[0];
        uint64_t v15 = (char *)this + 400;
LABEL_50:
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
        if (*((unsigned char *)this + 464))
        {
          unint64_t v40 = *((void *)this + 51);
          int v41 = *((_DWORD *)this + 104);
          if (v40 >= 0xB)
          {
            if (v41) {
              long long v42 = (void *)((char *)this + 424);
            }
            else {
              long long v42 = (void *)*((void *)this + 54);
            }
            uint64_t v44 = 8 * v40;
            while (!*v42)
            {
              ++v42;
              v44 -= 8;
              if (!v44) {
                goto LABEL_68;
              }
            }
LABEL_66:
            long long v48 = (re::ecs2::System *)*((void *)this + 56);
            if (!*((unsigned char *)v48 + 86)) {
              re::ecs2::System::queueToRun(v48, 0.0);
            }
            goto LABEL_68;
          }
          if ((v41 & 1) == 0)
          {
            id v43 = (uint64_t *)*((void *)this + 54);
            if (!v40) {
              goto LABEL_68;
            }
LABEL_63:
            uint64_t v45 = 0;
            uint64_t v46 = 8 * v40;
            do
            {
              uint64_t v47 = *v43++;
              v45 |= v47;
              v46 -= 8;
            }
            while (v46);
            if (!v45) {
              goto LABEL_68;
            }
            goto LABEL_66;
          }
          id v43 = (uint64_t *)((char *)this + 424);
          if (v40) {
            goto LABEL_63;
          }
        }
LABEL_68:
        uint64_t v49 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        *(void *)&long long v53 = this;
        *((void *)&v53 + 1) = re::ecs2::TextSystem::willRemoveComponents;
        *(void *)&long long v54 = 0;
        *((void *)&v54 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::TextSystem>(re::ecs2::TextSystem *,REEventHandlerResult (re::ecs2::TextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
        return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(v49 + 392, (uint64_t)&v53);
      }
    }
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v51, v52);
    _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::TextSystem::willRemoveComponents()
{
  return 0;
}

void re::ecs2::TextSystem::willRemoveSceneFromECSService(re::ecs2::TextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2)
  {
    *(void *)&long long v18 = a2;
    float v4 = (uint64_t *)((char *)this + 288);
    uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 36, &v18);
    if (v5 != -1)
    {
      uint64_t v6 = *((void *)this + 37) + 16 * v5;
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 352, *(void *)(v6 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 400, *(void *)(v6 + 8));
      int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 232, *(void *)(v6 + 8));
      if (*v7)
      {
        uint64_t v8 = v7;
        *int v7 = 0;
        CGFloat v9 = v7 + 1;
        uint64_t v10 = *(void *)(v7[1] + 288);
        if (v10)
        {
          uint64_t v11 = v7[12];
          if (v11)
          {
            for (unint64_t i = 0; i != v11; ++i)
            {
              uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
              re::EventBus::unsubscribe(v10, *(void *)v13, *(void *)(v13 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
        uint64_t v14 = 0;
        uint64_t v15 = v8 + 3;
        do
        {
          unint64_t v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
          if (*(void *)v16) {
            re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
          }
          v15[v14++] = -1;
        }
        while (v14 != 4);
        *CGFloat v9 = 0;
        v9[1] = 0;
      }
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v4, &v18);
    }
    uint64_t v17 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(void *)&long long v18 = this;
    *((void *)&v18 + 1) = re::ecs2::TextSystem::willRemoveComponents;
    uint64_t v19 = 0;
    uint64_t v20 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::TextSystem>(re::ecs2::TextSystem *,REEventHandlerResult (re::ecs2::TextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(v17 + 392, &v18);
  }
}

uint64_t re::ecs2::TextSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v30[0] = a3;
  v30[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v29);
  if (*(void *)(a1 + 112))
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6)
    {
      int v7 = *(uint64_t **)a2;
      uint64_t v28 = *(void *)a2 + 8 * v6;
      while (1)
      {
        uint64_t v31 = *v7;
        unint64_t v8 = *(void *)(*(void *)(a1 + 296)
                       + 16
                       * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 288), &v31)+ 8);
        re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 400, v8);
        CGFloat v9 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 232, v8);
        uint64_t v10 = *(void *)(*v9 + 224);
        unint64_t v11 = v9[3];
        unint64_t v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v11);
        if (*(_DWORD *)(v12 + 40)) {
          int v13 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 24))(v10, v30, v9, v11, v12, 0);
        }
        else {
          int v13 = 0;
        }
        unint64_t v14 = v9[5];
        unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v14);
        if (*(_DWORD *)(v15 + 40)) {
          v13 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 32))(v10, v30, v9, v14, v15, 0);
        }
        unint64_t v16 = v9[6];
        unint64_t v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v16);
        if (*(_DWORD *)(v17 + 40)) {
          break;
        }
        if (v13) {
          goto LABEL_11;
        }
LABEL_12:
        if (*(unsigned char *)(a1 + 464))
        {
          unint64_t v18 = *(void *)(a1 + 408);
          int v19 = *(_DWORD *)(a1 + 416);
          if (v18 < 0xB)
          {
            long long v22 = (uint64_t *)(a1 + 424);
            if ((v19 & 1) == 0) {
              long long v22 = *(uint64_t **)(a1 + 432);
            }
            if (!v18) {
              goto LABEL_30;
            }
            uint64_t v23 = 0;
            uint64_t v24 = 8 * v18;
            do
            {
              uint64_t v25 = *v22++;
              v23 |= v25;
              v24 -= 8;
            }
            while (v24);
            if (!v23) {
              goto LABEL_30;
            }
          }
          else
          {
            uint64_t v20 = (void *)(a1 + 424);
            if ((v19 & 1) == 0) {
              uint64_t v20 = *(void **)(a1 + 432);
            }
            uint64_t v21 = 8 * v18;
            while (!*v20)
            {
              ++v20;
              v21 -= 8;
              if (!v21) {
                goto LABEL_30;
              }
            }
          }
          uint64_t v26 = *(re::ecs2::System **)(a1 + 448);
          if (!*((unsigned char *)v26 + 86)) {
            re::ecs2::System::queueToRun(v26, 0.0);
          }
        }
LABEL_30:
        if (++v7 == (uint64_t *)v28) {
          return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
        }
      }
      if (((v13 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 40))(v10, v30, v9, v16, v17, 0)) & 1) == 0)goto LABEL_12; {
LABEL_11:
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 400, v8);
      goto LABEL_12;
    }
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
}

void *re::ecs2::allocInfo_TextSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_206, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_206))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879AB98, "TextSystem");
    __cxa_guard_release(&_MergedGlobals_206);
  }
  return &unk_26879AB98;
}

void re::ecs2::initInfo_TextSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x106ABBCAF453B8;
  v5[1] = "TextSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1D800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_TextSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::TextSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::TextSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::TextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::TextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TextSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TextSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::TextSystem *re::internal::defaultConstruct<re::ecs2::TextSystem>(int a1, int a2, re::ecs2::TextSystem *this)
{
  return re::ecs2::TextSystem::TextSystem(this);
}

void re::internal::defaultDestruct<re::ecs2::TextSystem>(uint64_t a1, uint64_t a2, re::ecs2::TextSystem *a3)
{
}

uint64_t re::ecs2::introspect_TextSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TextSystem>, this);
}

void *re::ecs2::allocInfo_TextComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26879AB78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26879AB78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879AC10, "TextComponent");
    __cxa_guard_release(&qword_26879AB78);
  }
  return &unk_26879AC10;
}

void re::ecs2::initInfo_TextComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x76749A51D9215460;
  v9[1] = "TextComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26879AB70, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26879AB70);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26879AB68 = v7;
      __cxa_guard_release(&qword_26879AB70);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26879AB68;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::TextComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::TextComponent>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TextComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TextComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

__n128 re::internal::defaultConstruct<re::ecs2::TextComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E70A0B0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  __n128 result = *(__n128 *)MEMORY[0x263F001B0];
  *(void *)(v3 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(__n128 *)(v3 + 64) = result;
  *(_OWORD *)(v3 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

__n128 re::internal::defaultConstructV2<re::ecs2::TextComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E70A0B0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  __n128 result = *(__n128 *)MEMORY[0x263F001B0];
  *(void *)(v1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(__n128 *)(v1 + 64) = result;
  *(_OWORD *)(v1 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::TextComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::TextComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::TextComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::TextComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::TextSystem::~TextSystem(re::ecs2::TextSystem *this)
{
  re::ecs2::TextSystem::~TextSystem(this);
  JUMPOUT(0x237DBCBD0);
}

{
  char *v2;
  void *v3;

  uint64_t v2 = (char *)this + 232;
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 232);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 288);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 352);
  *((void *)this + 49) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 400);
  *((void *)this + 55) = 0;
  *((void *)this + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *((void *)this + 57) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 400);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 352);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 288);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)v2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  *((void *)this + 2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = &unk_26E70A108;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 26);
  re::TextureHandle::invalidate((re::ecs2::TextSystem *)((char *)this + 184));
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {

    *((void *)this + 22) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::TextSystem::typeInfo(re::ecs2::TextSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TextSystem>, 0);
}

double re::ecs2::ComponentType<re::ecs2::TextComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::TextComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::TextComponent>::~ComponentType(uint64_t a1)
{
  re::ecs2::ComponentType<re::ecs2::TextComponent>::~ComponentType(a1);
  JUMPOUT(0x237DBCBD0);
}

__n128 re::ecs2::ComponentType<re::ecs2::TextComponent>::doMakeComponent@<Q0>(void *a1@<X8>)
{
  uint64_t v2 = (ArcSharedObject *)(*(uint64_t (**)(void, uint64_t, void))(**((void **)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((void *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 128, 0);
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E70A0B0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  __n128 result = *(__n128 *)MEMORY[0x263F001B0];
  *(void *)(v3 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(__n128 *)(v3 + 64) = result;
  *(_OWORD *)(v3 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::TextComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 656, 8);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)(v3 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)uint64_t v3 = &unk_26E70A2B0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(void *)(v3 + 20ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_DWORD *)(v3 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 24ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(v3 + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 248) = 0u;
  *(_DWORD *)(v3 + 28ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(void *)(v3 + 304) = 0;
  *(void *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + re::DynamicArray<re::AcousticSoundReductionMaterial>::clear((uint64_t)this + 328) = 0;
  *(void *)(v3 + 32ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 384) = 0;
  *(_DWORD *)(v3 + re::DynamicArray<re::AcousticSoundReductionMaterial>::clear((uint64_t)this + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(void *)(v3 + 392) = 0;
  *(void *)(v3 + 40ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_DWORD *)(v3 + 4re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(v3 + 408) = 0;
  *(void *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 4re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 44ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(void *)(v3 + 48ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v3 + 488) = 0;
  *(void *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(void *)(v3 + 52ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(void *)(v3 + 528) = 0;
  *(void *)(v3 + 552) = 0;
  *(void *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 56ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
  *(void *)(v3 + 576) = 0;
  *(void *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(void *)(v3 + 584) = 0;
  *(void *)(v3 + 608) = 0;
  *(void *)(v3 + 60ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_DWORD *)(v3 + 6re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
  *(void *)(v3 + 632) = 0;
  *(void *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(void *)(v3 + 64ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  long long v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::TextComponent>::doGetComponentIntrospectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26879AB90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26879AB90))
  {
    qword_26879AB88 = re::internal::getOrCreateInfo((re::internal *)"TextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TextComponent, (void (*)(re::IntrospectionBase *))&unk_26879AB80, 0);
    __cxa_guard_release(&qword_26879AB90);
  }
  return qword_26879AB88;
}

__n128 re::ecs2::ComponentType<re::ecs2::TextComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::TextComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t re::ecs2::ComponentType<re::ecs2::TextComponent>::~ComponentType(uint64_t a1)
{
  *(void *)a1 = &unk_26E70A240;
  if (*(void *)(a1 + 48)) {
    RESyncRelease();
  }
  re::internal::destroyPersistent<re::Allocator>((re *)"~ComponentType", 46, *(void (****)(void))(a1 + 56));
  *(void *)a1 = &unk_26E6E1EB8;
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::~SceneComponentCollection(void *a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *a1 = &unk_26E70A2B0;
  uint64_t v2 = (uint64_t)(a1 + 16);
  if (a1[16]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 16));
  }
  if (a1[27]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 27));
  }
  if (a1[38]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 38));
  }
  if (a1[49]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 60));
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)(a1 + 75));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 75));
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit((uint64_t)(a1 + 68));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 68));
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit((uint64_t)(a1 + 61));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 61));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 49));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 38));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 27));
  re::Event<re::Engine>::~Event(v2);
  re::ecs2::SceneComponentCollectionBase::~SceneComponentCollectionBase((re::ecs2::SceneComponentCollectionBase *)a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(re::ecs2::Component ***)(a2 + 32);
      uint64_t v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      uint64_t v7 = 8 * v4;
      do
      {
        unint64_t v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::registerCallbacks(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2[3])
  {
    uint64_t v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::TextComponent>;
    uint64_t v7 = 0;
    unint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    uint64_t v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::TextComponent>;
    uint64_t v7 = 0;
    unint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    uint64_t v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::TextComponent>;
    uint64_t v7 = 0;
    unint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    uint64_t v5 = a2;
    uint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::TextComponent>;
    uint64_t v7 = 0;
    unint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>::unregisterCallbacks(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2[3])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::TextComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::TextComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::TextComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::TextComponent>;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 24);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 32);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 40);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::TextComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 48);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  long long v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    long long v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  double result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *unint64_t v10 = &unk_26E70A358;
    v10[1] = a1;
    long long v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E70A3B0;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    double v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E70A408;
    v22[1] = a1;
    _OWORD v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    long long v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *uint64_t v28 = &unk_26E70A460;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    long long v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    double result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E70A358;
        v37[1] = a1;
        void v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        long long v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        unint64_t v68 = 0;
        id v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *id v43 = &unk_26E70A3B0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        unint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        __int16 v65 = 0;
        uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *uint64_t v49 = &unk_26E70A408;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        __int16 v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E70A460;
        v55[1] = a1;
        void v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v59 = v56;
        v59[1] = v58;
        double result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)(v4 + 192);
    }
    else {
      int v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)(v4 + 192);
    }
    else {
      int v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)(v4 + 192);
    }
    else {
      int v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)(v4 + 192);
    }
    else {
      int v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70A358;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70A358;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70A3B0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70A3B0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70A408;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70A408;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70A460;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70A460;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::TextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::createSubscription<re::ecs2::TextSystem>(re::ecs2::TextSystem *,REEventHandlerResult (re::ecs2::TextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Slice<re::ecs2::TextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TextComponent>,re::Slice<re::ecs2::TextComponent*>>::Subscription const&,re::Slice<re::ecs2::TextComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

id re::internal::defaultRetain<re::ecs2::TextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::TextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(re::NetworkSystemFeatureFlags *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_26879F000;
  {
    uint64_t v1 = (unsigned char *)&unk_26879F000;
    if (v3)
    {
      re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(void)::enable = re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(void)::$_0::operator()(v3, v4);
      uint64_t v1 = (unsigned char *)&unk_26879F000;
    }
  }
  return v1[2336];
}

BOOL re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  re::Defaults::BOOLValue((re::Defaults *)"enableECSNetworkHFLogs", a2, (char *)v6);
  if (LOBYTE(v6[0])) {
    unsigned __int8 v3 = BYTE1(v6[0]);
  }
  else {
    unsigned __int8 v3 = 0;
  }
  uint64_t v4 = *re::ecsNetworkLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "enableECSNetworkHFLogs=%d.", (uint8_t *)v6, 8u);
  }
  return v3 != 0;
}

uint64_t re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(re::NetworkSystemFeatureFlags *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_26879F000;
  {
    uint64_t v1 = (unsigned char *)&unk_26879F000;
    if (v3)
    {
      re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(void)::enable = re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(void)::$_0::operator()(v3, v4);
      uint64_t v1 = (unsigned char *)&unk_26879F000;
    }
  }
  return v1[2352];
}

BOOL re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  re::Defaults::BOOLValue((re::Defaults *)"suppressNetworkReparentMarkDirty", a2, (char *)v6);
  if (LOBYTE(v6[0])) {
    unsigned __int8 v3 = BYTE1(v6[0]);
  }
  else {
    unsigned __int8 v3 = 1;
  }
  uint64_t v4 = *re::ecsNetworkLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "suppressNetworkReparentMarkDirty=%d.", (uint8_t *)v6, 8u);
  }
  return v3 != 0;
}

uint64_t re::NetworkSystemFeatureFlags::enableAltSharedApp(re::NetworkSystemFeatureFlags *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_26879F000;
  {
    uint64_t v1 = (unsigned char *)&unk_26879F000;
    if (v3)
    {
      re::NetworkSystemFeatureFlags::enableAltSharedApp(void)::enable = re::NetworkSystemFeatureFlags::enableAltSharedApp(void)::$_0::operator()(v3, v4);
      uint64_t v1 = (unsigned char *)&unk_26879F000;
    }
  }
  return v1[2368];
}

BOOL re::NetworkSystemFeatureFlags::enableAltSharedApp(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  re::Defaults::BOOLValue((re::Defaults *)"enableAltSharedApp", a2, (char *)v6);
  if (LOBYTE(v6[0])) {
    unsigned __int8 v3 = BYTE1(v6[0]);
  }
  else {
    unsigned __int8 v3 = 0;
  }
  uint64_t v4 = *re::ecsNetworkLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "enableAltSharedApp=%d.", (uint8_t *)v6, 8u);
  }
  return v3 != 0;
}

void *re::ecs2::allocInfo_MotionStateComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF909D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF909D8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90A20, "MotionStateComponent");
    __cxa_guard_release(&qword_26AF909D8);
  }
  return &unk_26AF90A20;
}

void re::ecs2::initInfo_MotionStateComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v33[0] = 0x8DBCDE6D401C29C4;
  v33[1] = "MotionStateComponent";
  re::StringID::destroyString((re::StringID *)v33);
  *((_OWORD *)this + 2) = v34;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_331, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_331);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF909E0 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "m_linearVelocity";
      *(void *)(v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x6000000001;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF909E8 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v12 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "m_angularVelocity";
      *(void *)(v13 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x7000000002;
      *(_DWORD *)(v13 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF909F0 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      unint64_t v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "isSleeping";
      *(void *)(v17 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x1900000003;
      *(_DWORD *)(v17 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF909F8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v19 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "m_userSetLinearVelocity";
      *(void *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x8000000004;
      *(_DWORD *)(v20 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF90A00 = v20;
      unint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_uint32_t((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "m_userSetLinearVelocityVersion";
      *(void *)(v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x9000000005;
      *(_DWORD *)(v24 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF90A08 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      uint64_t v26 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "m_userSetAngularVelocity";
      *(void *)(v27 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0xA000000006;
      *(_DWORD *)(v27 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF90A10 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_uint32_t((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "m_userSetAngularVelocityVersion";
      *(void *)(v31 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0xB000000007;
      *(_DWORD *)(v31 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF90A18 = v31;
      __cxa_guard_release(&_MergedGlobals_331);
    }
  }
  *((void *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((void *)this + 8) = &qword_26AF909E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MotionStateComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::MotionStateComponent>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MotionStateComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MotionStateComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v32 = v34;
}

double re::internal::defaultConstruct<re::ecs2::MotionStateComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6EC0;
  *(_WORD *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *(void *)(v3 + 32) = 0x3F8000003F800000;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1065353216;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0x3F80000000000000;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(unsigned char *)(v3 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 14ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(void *)(v3 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_DWORD *)(v3 + 184) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MotionStateComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::MotionStateComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F6EC0;
  *(_WORD *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *(void *)(v1 + 32) = 0x3F8000003F800000;
  *(void *)(v1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1065353216;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0x3F80000000000000;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 14ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(void *)(v1 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = 0;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_DWORD *)(v1 + 184) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MotionStateComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MotionStateComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MotionStateComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MotionStateComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MotionStateComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MotionStateComponent>, this);
}

uint64_t re::ecs2::MotionStateComponent::makeSyncInfo(re::ecs2::MotionStateComponent *this)
{
  uint64_t v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetDebugName();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadDeltaCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadDeltaCb();
  return v1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
  *(_OWORD *)(a3 + 96) = 0uLL;
  *(_OWORD *)(a3 + 112) = 0uLL;
  *(_OWORD *)(a3 + 128) = 0uLL;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0uLL;
  *(_DWORD *)(a3 + 176) = 0;
  *(unsigned char *)(a3 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(unsigned char *)(a3 + 26) = 1;
  return 1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 25))
  {
    MEMORY[0x237DBB060](a2, a3 + 96, 4);
    MEMORY[0x237DBB060](a2, a3 + 100, 4);
    MEMORY[0x237DBB060](a2, a3 + 104, 4);
    MEMORY[0x237DBB060](a2, a3 + 112, 4);
    MEMORY[0x237DBB060](a2, a3 + 116, 4);
    MEMORY[0x237DBB060](a2, a3 + 120, 4);
  }
  MEMORY[0x237DBB060](a2, a3 + 80, 1);
  if (!*(unsigned char *)(a3 + 25))
  {
    MEMORY[0x237DBB060](a2, a3 + 128, 4);
    MEMORY[0x237DBB060](a2, a3 + 132, 4);
    MEMORY[0x237DBB060](a2, a3 + 136, 4);
    MEMORY[0x237DBB060](a2, a3 + 144, 4);
    MEMORY[0x237DBB060](a2, a3 + 160, 4);
    MEMORY[0x237DBB060](a2, a3 + 164, 4);
    MEMORY[0x237DBB060](a2, a3 + 168, 4);
    MEMORY[0x237DBB060](a2, a3 + 176, 4);
  }
  return 1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v10 = 0;
  RESyncBitReaderReadBool();
  MEMORY[0x237DBB060](a3, &v10, 1);
  if (!v10)
  {
    long long v9 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a3, &v9, 4);
    MEMORY[0x237DBB060](a3, (char *)&v9 + 4, 4);
    MEMORY[0x237DBB060](a3, (char *)&v9 + 8, 4);
    long long v8 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a3, &v8, 4);
    MEMORY[0x237DBB060](a3, (char *)&v8 + 4, 4);
    MEMORY[0x237DBB060](a3, (char *)&v8 + 8, 4);
  }
  char v7 = 0;
  RESyncBitReaderReadUInt8();
  MEMORY[0x237DBB060](a3, &v7, 1);
  if (!v10)
  {
    long long v9 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a3, &v9, 4);
    MEMORY[0x237DBB060](a3, (char *)&v9 + 4, 4);
    MEMORY[0x237DBB060](a3, (char *)&v9 + 8, 4);
    int v6 = 0;
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a3, &v6, 4);
    long long v8 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a3, &v8, 4);
    MEMORY[0x237DBB060](a3, (char *)&v8 + 4, 4);
    MEMORY[0x237DBB060](a3, (char *)&v8 + 8, 4);
    int v5 = 0;
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a3, &v5, 4);
  }
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v11 = 0;
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadBool();
  long long v10 = 0u;
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  int v8 = 0;
  RESyncBitReaderReadData();
  long long v9 = 0u;
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  int v7 = 0;
  RESyncBitReaderReadData();
  MEMORY[0x237DBB060](a4, &v11, 1);
  if (!v11)
  {
    long long v10 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a4, &v10, 4);
    MEMORY[0x237DBB060](a4, (char *)&v10 + 4, 4);
    MEMORY[0x237DBB060](a4, (char *)&v10 + 8, 4);
    long long v9 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a4, &v9, 4);
    MEMORY[0x237DBB060](a4, (char *)&v9 + 4, 4);
    MEMORY[0x237DBB060](a4, (char *)&v9 + 8, 4);
  }
  char v6 = 0;
  RESyncBitReaderReadData();
  RESyncBitReaderReadBool();
  MEMORY[0x237DBB060](a4, &v6, 1);
  if (!v11)
  {
    long long v10 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a4, &v10, 4);
    MEMORY[0x237DBB060](a4, (char *)&v10 + 4, 4);
    MEMORY[0x237DBB060](a4, (char *)&v10 + 8, 4);
    int v8 = 0;
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a4, &v8, 4);
    long long v9 = 0u;
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a4, &v9, 4);
    MEMORY[0x237DBB060](a4, (char *)&v9 + 4, 4);
    MEMORY[0x237DBB060](a4, (char *)&v9 + 8, 4);
    int v7 = 0;
    RESyncBitReaderReadUInt32();
    MEMORY[0x237DBB060](a4, &v7, 4);
  }
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_5()
{
  return RESyncBitWriterWriteUInt32();
}

uint64_t ___ZN2re4ecs220MotionStateComponent12makeSyncInfoEv_block_invoke_6()
{
  return RESyncBitWriterWriteUInt32();
}

void re::ecs2::RayTracedShadowReceiverSystem::willAddSystemToECSService(re::ecs2::RayTracedShadowReceiverSystem *this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = *((void *)this + 15);
  if (v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v2 + 8))(&v5);
    long long v3 = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)((char *)this + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = v5;
    long long v5 = v3;
    uint64_t v4 = *((void *)this + 23);
    *((void *)this + 23) = v6;
    uint64_t v6 = v4;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  }
}

double re::ecs2::RayTracedShadowReceiverSystem::willRemoveSystemFromECSService(re::ecs2::RayTracedShadowReceiverSystem *this)
{
  long long v2 = *(_OWORD *)((char *)this + 168);
  uint64_t v3 = *((void *)this + 23);
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0;
  long long v5 = v2;
  uint64_t v6 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  *((void *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::RayTracedShadowReceiverSystem::updateScenes(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v228 = *MEMORY[0x263EF8340];
  uint64_t v4 = (re::AssetHandle *)(a1 + 21);
  uint64_t v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 21));
  if (!v5 || *(unsigned char *)(v5 + 1656))
  {
    re::AssetHandle::loadAsync(v4);
    return;
  }
  uint64_t v6 = v3[13];
  if (!v6 || (*(unsigned char *)(v6 + 424) & 0x10) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      int v8 = *(re::ecs2::RenderingSubsystem ***)a2;
      uint64_t v9 = *(void *)a2 + 8 * v7;
      long long v10 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      char v11 = &unk_26879F000;
      int64x2_t v146 = vdupq_n_s64(1uLL);
      unint64_t v155 = (unint64_t)v3;
      uint64_t v150 = v9;
      do
      {
        long long v164 = *v8;
        if (*v8)
        {
          uint64_t v12 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v164 + 200), (const re::ecs2::ComponentTypeBase *)v10[239]);
          if (v12)
          {
            unint64_t v13 = *(void *)(v12 + 24);
            if (v13)
            {
              uint64_t v14 = *(uint64_t **)(v12 + 40);
              if (v11[216] != -1) {
                dispatch_once(&re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken, &__block_literal_global_15);
              }
              if (!re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows)
              {
                uint64_t v15 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v164 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (!v15 || !*(void *)(v15 + 24) || !*(unsigned char *)(**(void **)(v15 + 40) + 30))
                {
                  uint64_t v16 = re::AssetHandle::asset<re::MaterialAsset>(v4);
                  if (v16)
                  {
                    uint64_t v149 = v16;
                    uint64_t v18 = (re::RenderManager *)v3[14];
                    if (!v18) {
                      goto LABEL_143;
                    }
                    uint64_t v19 = (re::MeshAsset *)re::RenderManager::perFrameAllocator(v18);
                    uint64_t v20 = v3[15];
                    unint64_t v21 = re::MeshAsset::assetType(v19);
                    (*(void (**)(void *__return_ptr, uint64_t, const char *, uint64_t *))(*(void *)v20 + 32))(v182, v20, "sharedCircularPlaneMesh.compiledmesh", v21);
                    uint64_t v22 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v182);
                    if (v22)
                    {
                      uint64_t v23 = v22;
                      uint64_t v147 = v4;
                      uint64_t v181 = (*(uint64_t (**)(void))(**(void **)(v155 + 136) + 24))(*(void *)(v155 + 136));
                      uint64_t v24 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v181 + 16))(v181);
                      int v25 = *((_DWORD *)v24 + 31);
                      if (!v25) {
                        int v25 = *((_DWORD *)v24 + 4);
                      }
                      signed int v26 = v25 + 1;
                      unsigned int v179 = 0;
                      long long v177 = 0u;
                      long long v178 = 0u;
                      uint64_t v180 = 0x7FFFFFFFLL;
                      v189.i32[0] = 0;
                      float32x4_t v187 = 0u;
                      float32x4_t v188 = 0u;
                      *(uint64_t *)((char *)v189.i64 + 4) = 0x7FFFFFFFLL;
                      uint64_t v28 = 8 * v13;
                      uint64_t v29 = v14;
                      float v148 = &v14[v13];
                      do
                      {
                        ++v29;
                        *(void *)&long long v183 = 0;
                        (*(void (**)(unsigned char *__return_ptr))(*(void *)v181 + 8))(v224);
                        if (v224[0]) {
                          uint64_t v30 = *(void *)&v224[8];
                        }
                        else {
                          uint64_t v30 = 0;
                        }
                        *(void *)&long long v183 = v30;
                        *(_DWORD *)uint64_t v224 = 0;
                        uint64_t v31 = (void *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)&v187, (uint64_t *)&v183, (int *)v224);
                        ++*v31;
                        v28 -= 8;
                      }
                      while (v28);
                      __int32 v32 = v189.i32[0];
                      if (v189.i32[0])
                      {
                        uint64_t v33 = 0;
                        long long v34 = (int *)(v188.i64[0] + 8);
                        while (1)
                        {
                          int v35 = *v34;
                          v34 += 8;
                          if (v35 < 0) {
                            break;
                          }
                          if (v189.u32[0] == ++v33)
                          {
                            LODWORD(v33) = v189.i32[0];
                            break;
                          }
                        }
                      }
                      else
                      {
                        LODWORD(v33) = 0;
                      }
                      if (v189.i32[0] != v33)
                      {
                        uint64_t v36 = v33;
                        uint64_t v37 = v188.i64[0];
                        do
                        {
                          uint64_t v38 = v37 + 32 * v36;
                          unint64_t v39 = *(void *)(v38 + 24);
                          memset(&v224[8], 0, 20);
                          *(void *)&v224[32] = 0;
                          *(void *)uint64_t v224 = v19;
                          re::DynamicArray<re::MeshScene>::setCapacity(v224, v39);
                          unint64_t v42 = *(void *)(v38 + 16);
                          int v41 = (void *)(v38 + 16);
                          unint64_t v40 = v42;
                          ++*(_DWORD *)&v224[24];
                          unint64_t v43 = 0x94D049BB133111EBLL
                              * ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                * (v42 ^ (v42 >> 30))) >> 27));
                          unint64_t v44 = v43 ^ (v43 >> 31);
                          if ((void)v177)
                          {
                            unint64_t v45 = v44 % DWORD2(v178);
                            uint64_t v46 = *(unsigned int *)(*((void *)&v177 + 1) + 4 * v45);
                            if (v46 != 0x7FFFFFFF)
                            {
                              while (*(void *)(v178 + (v46 << 6) + 16) != v40)
                              {
                                uint64_t v46 = *(_DWORD *)(v178 + (v46 << 6) + 8) & 0x7FFFFFFF;
                                if (v46 == 0x7FFFFFFF) {
                                  goto LABEL_43;
                                }
                              }
                              goto LABEL_44;
                            }
                          }
                          else
                          {
                            LODWORD(v45) = 0;
                          }
LABEL_43:
                          re::HashTable<unsigned long long,re::RayTracedShadowReceiverCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v177, v45, v44, v41, (uint64_t)v224);
                          ++HIDWORD(v180);
LABEL_44:
                          re::DynamicArray<re::MeshScene>::deinit((uint64_t)v224);
                          uint64_t v37 = v188.i64[0];
                          if (v189.i32[0] <= (v33 + 1)) {
                            __int32 v47 = v33 + 1;
                          }
                          else {
                            __int32 v47 = v189.i32[0];
                          }
                          while (1)
                          {
                            uint64_t v36 = (v33 + 1);
                            if (v47 - 1 == v33) {
                              break;
                            }
                            LODWORD(v33) = v33 + 1;
                            __int32 v48 = v36;
                            if ((*(_DWORD *)(v188.i64[0] + 32 * v36 + 8) & 0x80000000) != 0) {
                              goto LABEL_51;
                            }
                          }
                          __int32 v48 = v47;
LABEL_51:
                          LODWORD(v33) = v48;
                        }
                        while (v32 != v48);
                      }
                      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v187);
                      uint64_t v49 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v176);
                      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v49);
                      if (isStatisticCollectionEnabled)
                      {
                        uint64_t v51 = re::profilerThreadContext(isStatisticCollectionEnabled);
                        uint64_t v52 = *(int64x2_t **)(v51 + 152);
                        if (v52)
                        {
                          unint64_t v53 = v52[428].u64[0];
                          if (v53 >= v13) {
                            unint64_t v53 = v13;
                          }
                          v52[428].i64[0] = v53;
                          unint64_t v54 = v52[428].u64[1];
                          if (v54 <= v13) {
                            unint64_t v54 = v13;
                          }
                          v52[428].i64[1] = v54;
                          v55.i64[1] = v146.i64[1];
                          v55.i64[0] = v13;
                          v52[429] = vaddq_s64(v52[429], v55);
                          *(unsigned char *)(v51 + 184) = 0;
                        }
                      }
                      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v175, 3079, v155);
                      uint64_t v174 = (*(uint64_t (**)(void))(**(void **)(v155 + 144) + 16))(*(void *)(v155 + 144));
                      do
                      {
                        uint64_t v56 = *v14;
                        uint64_t v57 = *(void **)(*v14 + 16);
                        if (*(unsigned char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v174, (unint64_t)v57))
                        {
                          if (*(unsigned char *)(v56 + 25))
                          {
                            uint64_t v58 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v57 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                            if (!v58 || *(unsigned char *)(v58 + 27))
                            {
                              re::ecs2::ShadowHelper::findShadowReceiverAnchor((uint64_t)v57, (uint64_t)&v181, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0, v224);
                              if (v224[0])
                              {
                                float32x4_t v151 = v227;
                                unsigned int v152 = *(_DWORD *)&v224[24];
                                float32x4_t v156 = *(float32x4_t *)&v224[32];
                                uint64_t v158 = *(void *)&v224[16];
                                uint64_t v161 = v225;
                                unsigned int v153 = v226;
                                uint64_t v59 = *(void *)(*(void *)(v155 + 112) + 32);
                                v167.i64[0] = 0x3F8000003F800000;
                                v167.i64[1] = 1065353216;
                                uint64_t v168 = 0;
                                uint64_t v169 = 0x3F80000000000000;
                                uint64_t v170 = 0;
                                uint64_t v171 = 0;
                                re::ecs2::computeSubtreeCasterAABB(&v172, v57, v59, &v167);
                                uint32x4_t v60 = (uint32x4_t)vcgtq_f32(v172, v173);
                                v60.i32[3] = v60.i32[2];
                                if ((vmaxvq_u32(v60) & 0x80000000) == 0)
                                {
                                  re::ecs2::TransformComponent::parentWorldMatrix4x4F((re::ecs2::TransformComponent *)v57, (const re::ecs2::Entity *)1, v166);
                                  re::AABB::transform(&v172, v166, (uint64_t)&v187);
                                  float32x4_t v172 = v187;
                                  float32x4_t v173 = v188;
                                  uint32x4_t v61 = (uint32x4_t)vcgtq_f32(v187, v188);
                                  v61.i32[3] = v61.i32[2];
                                  if ((vmaxvq_u32(v61) & 0x80000000) != 0)
                                  {
                                    float32x4_t v63 = 0uLL;
                                  }
                                  else
                                  {
                                    v62.i64[0] = 0x3F0000003F000000;
                                    v62.i64[1] = 0x3F0000003F000000;
                                    float32x4_t v63 = vmulq_f32(vaddq_f32(v187, v188), v62);
                                  }
                                  *(void *)&long long v64 = v161;
                                  int32x4_t v66 = (int32x4_t)v156;
                                  *(void *)&long long v65 = v158;
                                  uint64_t v67 = 0;
                                  float32x4_t v68 = vsubq_f32(v188, v187);
                                  v68.i32[3] = 0;
                                  v223[0] = vmaxnmq_f32(v68, (float32x4_t)0);
                                  v223[1] = vmulq_f32(v223[0], (float32x4_t)xmmword_2343A9580);
                                  v223[2] = vmulq_f32(v223[0], (float32x4_t)xmmword_2343A9590);
                                  v223[3] = vmulq_f32(v223[0], (float32x4_t)xmmword_2343A95A0);
                                  float32x4_t v69 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v66, v66), (int8x16_t)v156, 0xCuLL);
                                  float32x4_t v70 = vnegq_f32(v156);
                                  float v71 = 0.0;
                                  float v72 = 0.0;
                                  do
                                  {
                                    float32x4_t v73 = v223[v67];
                                    float32x4_t v74 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL), v70), v73, v69);
                                    float32x4_t v75 = vmulq_f32(v74, v74);
                                    float v76 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), v75)).f32[0]);
                                    float32x4_t v77 = vmulq_f32(v156, v73);
                                    float32x4_t v78 = vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1));
                                    float32x4_t v79 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2);
                                    if (v71 < v76) {
                                      float v71 = v76;
                                    }
                                    float v80 = fabsf(vaddq_f32(v79, v78).f32[0]);
                                    if (v72 < v80) {
                                      float v72 = v80;
                                    }
                                    ++v67;
                                  }
                                  while (v67 != 4);
                                  if (v72 >= v71) {
                                    float v81 = v71;
                                  }
                                  else {
                                    float v81 = v72;
                                  }
                                  float32x4_t v82 = vaddq_f32(vmulq_lane_f32(v156, *(float32x2_t *)v156.f32, 1), (float32x4_t)xmmword_23435FD90);
                                  float32x4_t v83 = vmulq_f32(v82, v82);
                                  float v84 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).f32[0];
                                  float32x4_t v85 = 0uLL;
                                  if (v84 > 0.0)
                                  {
                                    v85.f32[0] = sqrtf(v84);
                                    float32x4_t v85 = vdivq_f32(v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 0));
                                  }
                                  uint64_t v86 = 0;
                                  float v87 = v71 * 0.5;
                                  float v88 = v87 + v81;
                                  float32x4_t v89 = vmulq_f32(v156, vsubq_f32(v63, v151));
                                  float32x4_t v90 = vaddq_f32(vsubq_f32(v63, vmulq_n_f32(v156, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1))).f32[0])), vmulq_n_f32(v85, (float)(1.0 - fabsf(v156.f32[1])) * (float)(v88 - v87)));
                                  v90.i32[3] = 1.0;
                                  *((void *)&v65 + 1) = v152;
                                  v66.i32[3] = 0;
                                  *((void *)&v64 + 1) = v153;
                                  long long v183 = v65;
                                  int32x4_t v184 = v66;
                                  float v91 = v88 + v88;
                                  long long v185 = v64;
                                  long long v186 = xmmword_23435FBB0;
                                  do
                                  {
                                    *(float32x4_t *)((char *)&v187 + v86) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_23435FD50, COERCE_FLOAT(*(long long *)((char *)&v183 + v86))), (float32x4_t)xmmword_23435FD60, *(float32x2_t *)((char *)&v183 + v86), 1), (float32x4_t)xmmword_23435FD80, *(float32x4_t *)((char *)&v183 + v86), 2), v90, *(float32x4_t *)((char *)&v183 + v86), 3);
                                    v86 += 16;
                                  }
                                  while (v86 != 64);
                                  uint64_t v92 = 0;
                                  float32x4_t v93 = v187;
                                  float32x4_t v94 = v188;
                                  float32x4_t v95 = v189;
                                  float32x4_t v96 = v190;
                                  LODWORD(v97) = 0;
                                  *((float *)&v97 + 1) = v91;
                                  *(void *)&long long v98 = 0;
                                  *((void *)&v98 + 1) = LODWORD(v91);
                                  long long v183 = LODWORD(v91);
                                  int32x4_t v184 = (int32x4_t)v97;
                                  long long v185 = v98;
                                  long long v186 = xmmword_23435FBB0;
                                  do
                                  {
                                    *(float32x4_t *)((char *)&v187 + v92) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, COERCE_FLOAT(*(long long *)((char *)&v183 + v92))), v94, *(float32x2_t *)((char *)&v183 + v92), 1), v95, *(float32x4_t *)((char *)&v183 + v92), 2), v96, *(float32x4_t *)((char *)&v183 + v92), 3);
                                    v92 += 16;
                                  }
                                  while (v92 != 64);
                                  float32x4_t v162 = v187;
                                  *(float32x4_t *)float v157 = v189;
                                  *(float32x4_t *)float v159 = v188;
                                  float32x4_t v154 = v190;
                                  char v207 = 0;
                                  char v208 = 0;
                                  long long v209 = 0u;
                                  float32x4_t v187 = 0u;
                                  float32x4_t v188 = 0u;
                                  v189.i64[0] = 0;
                                  float32x4_t v190 = 0u;
                                  long long v191 = 0u;
                                  long long v192 = 0u;
                                  float32x4_t v193 = 0u;
                                  long long v194 = 0u;
                                  long long v195 = 0u;
                                  long long v196 = 0u;
                                  long long v197 = 0u;
                                  char v198 = 0;
                                  long long v199 = 0u;
                                  long long v200 = 0u;
                                  long long v201 = 0u;
                                  long long v202 = 0u;
                                  long long v203 = 0u;
                                  long long v204 = 0u;
                                  long long v205 = 0u;
                                  memset(v206, 0, 28);
                                  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
                                    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                                  }
                                  uint64_t v210 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
                                  __asm { FMOV            V0.2S, #1.0 }
                                  uint64_t v211 = _D0;
                                  int v212 = 1065353216;
                                  long long v213 = 0u;
                                  memset(v214, 0, sizeof(v214));
                                  unint64_t v215 = 0xFFFFFFFF00000001;
                                  int32x4_t v216 = vdupq_n_s32(0x7F800000u);
                                  *(void *)&long long v104 = 0x7F0000007FLL;
                                  *((void *)&v104 + 1) = 0x7F0000007FLL;
                                  long long v217 = v104;
                                  uint64_t v218 = 0;
                                  char v219 = 0;
                                  uint64_t v220 = 0;
                                  char v221 = 0;
                                  uint64_t v222 = 0x10100010001;
                                  uint64_t v105 = *(const void **)(v23 + 376);
                                  v165[0] = *(const void **)(v23 + 392);
                                  v165[1] = v105;
                                  v184.i64[0] = 0;
                                  long long v183 = 0uLL;
                                  re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(&v183, (uint64_t)v19, (unint64_t)v105);
                                  re::FixedArray<re::SkinningInfluence>::copy(&v183, v165);
                                  v187.i64[0] = v184.i64[0];
                                  v187.i64[1] = *((void *)&v183 + 1);
                                  if ((void)v183 && *((void *)&v183 + 1)) {
                                    (*(void (**)(void))(*(void *)v183 + 40))();
                                  }
                                  uint64_t v106 = (*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
                                  uint64_t v107 = *(void *)(v23 + 880);
                                  *(void *)&long long v183 = *(void *)(v23 + 888);
                                  *((void *)&v183 + 1) = v107;
                                  v188.i64[1] = re::MeshBoundingBoxes::MeshBoundingBoxes(v106, (uint64_t)v19, (const void **)&v183, 1);
                                  uint64_t v108 = (*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
                                  uint64_t v109 = *(void *)(v23 + 904);
                                  *(void *)&long long v183 = *(void *)(v23 + 912);
                                  *((void *)&v183 + 1) = v109;
                                  v189.i64[0] = re::MeshBoundingBoxes::MeshBoundingBoxes(v108, (uint64_t)v19, (const void **)&v183, 1);
                                  uint64_t v218 = v189.i64[0];
                                  float32x4_t v190 = v162;
                                  long long v191 = *(_OWORD *)v159;
                                  long long v192 = *(_OWORD *)v157;
                                  float32x4_t v193 = v154;
                                  uint64_t v110 = *(void *)(v149 + 1664);
                                  float32x2_t v111 = (void *)(*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 8, 8);
                                  *float32x2_t v111 = v110;
                                  *(void *)&long long v194 = v111;
                                  *((void *)&v194 + 1) = 1;
                                  uint64_t v112 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(*(re::MaterialParameterBlock **)(v149 + 1672), v19);
                                  float32x4_t v113 = (uint64_t *)(*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 8, 8);
                                  *float32x4_t v113 = v112;
                                  *(void *)&long long v200 = v113;
                                  *((void *)&v200 + 1) = 1;
                                  (*(void (**)(long long *__return_ptr))(*(void *)v181 + 8))(&v183);
                                  if ((_BYTE)v183) {
                                    unint64_t v114 = *((void *)&v183 + 1);
                                  }
                                  else {
                                    unint64_t v114 = 0;
                                  }
                                  if (!(void)v177
                                    || (unint64_t v115 = 0x94D049BB133111EBLL
                                             * ((0xBF58476D1CE4E5B9 * (v114 ^ (v114 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                 * (v114 ^ (v114 >> 30))) >> 27)),
                                        uint64_t v116 = *(unsigned int *)(*((void *)&v177 + 1)
                                                               + 4 * ((v115 ^ (v115 >> 31)) % DWORD2(v178))),
                                        v116 == 0x7FFFFFFF))
                                  {
LABEL_96:
                                    int8x16_t v117 = 0;
                                  }
                                  else
                                  {
                                    while (*(void *)(v178 + (v116 << 6) + 16) != v114)
                                    {
                                      uint64_t v116 = *(_DWORD *)(v178 + (v116 << 6) + 8) & 0x7FFFFFFF;
                                      if (v116 == 0x7FFFFFFF) {
                                        goto LABEL_96;
                                      }
                                    }
                                    int8x16_t v117 = (_anonymous_namespace_ *)(v178 + (v116 << 6) + 24);
                                  }
                                  if (*(void *)v117) {
                                    re::DynamicArray<re::MeshScene>::add(v117, (long long *)&v187);
                                  }
                                  if (v206[2])
                                  {
                                    if ((void)v204) {
                                      *(void *)&long long v204 = 0;
                                    }
                                    if (*((void *)&v203 + 1)) {
                                      (*(void (**)(void))(*(void *)v206[2] + 40))();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        ++v14;
                      }
                      while (v14 != v148);
                      uint64_t v118 = *(void *)(*(void *)(v155 + 112) + 104);
                      if (v118) {
                        float32x4_t v160 = (re::DynamicString **)re::RenderFrameBox::get(v118 + 344, 0xFFFFFFFFFFFFFFFuLL);
                      }
                      else {
                        float32x4_t v160 = 0;
                      }
                      unsigned int v163 = v179;
                      uint64_t v119 = 0;
                      if (v179)
                      {
                        int32x4_t v120 = (int *)(v178 + 8);
                        while (1)
                        {
                          int v121 = *v120;
                          v120 += 16;
                          if (v121 < 0) {
                            break;
                          }
                          if (v179 == ++v119)
                          {
                            LODWORD(v119) = v179;
                            break;
                          }
                        }
                      }
                      if (v179 != v119)
                      {
                        uint64_t v122 = v119;
                        uint64_t v123 = v178;
                        while (1)
                        {
                          uint64_t v124 = v123 + (v122 << 6);
                          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v164, *(const re::ecs2::Scene **)(v124 + 16), v160, &v183);
                          v172.i64[0] = (unint64_t)v183 >> 1;
                          uint64_t v125 = re::RenderFrameData::stream((re::RenderFrameData *)(v160 + 33), (const re::WeakStringID *)&v172);
                          int32x4_t v126 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v125, (uint64_t *)v223);
                          if (!v126)
                          {
                            uint64_t v127 = *(void *)(*(void *)(v125 + 48) + 8);
                            uint64_t v128 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v127 + 32))(v127, 56, 8);
                            *(void *)uint64_t v128 = 0;
                            *(void *)(v128 + 8) = 0;
                            *(_DWORD *)(v128 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
                            *(void *)(v128 + 32) = 0;
                            *(void *)(v128 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
                            *(void *)(v128 + 24) = 0;
                            *(_DWORD *)(v128 + 48) = 0;
                            float32x4_t v129 = (re *)re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::init(v128, v127, 1uLL);
                            uint64_t v130 = re::globalAllocators(v129)[2];
                            *(void *)uint64_t v224 = &unk_26E70A648;
                            *(void *)&v224[8] = v127;
                            *(void *)&v224[24] = v130;
                            *(void *)&v224[32] = v224;
                            v187.i64[1] = v128;
                            v187.i64[0] = (uint64_t)std::__any_imp::_SmallHandler<re::BucketArray<re::RayTracedShadowReceiverCollection,4ul> *>::__handle[abi:nn180100];
                            v190.i64[1] = v130;
                            *(void *)&long long v191 = 0;
                            re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::operator=<24ul>((uint64_t)&v189, (uint64_t)v224);
                            int32x4_t v126 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v125, (uint64_t *)v223, (re *)&v187);
                            if ((void)v191)
                            {
                              v166[0].i64[0] = (uint64_t)&v187;
                              (*(void (**)(void, float32x4_t *))(*(void *)v191 + 16))(v191, v166);
                            }
                            re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v189);
                            if (v187.i64[0]) {
                              ((void (*)(void, float32x4_t *, void, void, void))v187.i64[0])(0, &v187, 0, 0, 0);
                            }
                            re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)v224);
                          }
                          uint64_t v131 = v124 + 24;
                          uint64_t v133 = *(void *)(v124 + 24);
                          uint64_t v134 = *(void *)(v124 + 32);
                          uint64_t v135 = *(void *)(v124 + 40);
                          *(void *)uint64_t v131 = 0;
                          *(void *)(v131 + 8) = 0;
                          *(void *)(v131 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
                          uint64_t v136 = *(void *)(v131 + 32);
                          *(void *)(v131 + 32) = 0;
                          ++*(_DWORD *)(v131 + 24);
                          unint64_t v137 = *(void *)(v132 + 40);
                          unint64_t v138 = *(void *)(v132 + 8);
                          if (v137 + 1 > 4 * v138)
                          {
                            re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::setBucketsCapacity((void *)v132, (v137 + 4) >> 2);
                            unint64_t v138 = *(void *)(v132 + 8);
                          }
                          if (v138 <= v137 >> 2) {
                            break;
                          }
                          if (*(unsigned char *)(v132 + 16)) {
                            uint64_t v139 = v132 + 24;
                          }
                          else {
                            uint64_t v139 = *(void *)(v132 + 32);
                          }
                          uint64_t v140 = *(void *)(v139 + 8 * (v137 >> 2));
                          ++*(void *)(v132 + 40);
                          ++*(_DWORD *)(v132 + 48);
                          uint64_t v141 = v140 + 40 * (v137 & 3);
                          *(void *)uint64_t v141 = v133;
                          v187.i64[0] = 0;
                          *(void *)(v141 + 8) = v134;
                          v187.i64[1] = 0;
                          *(void *)(v141 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v135;
                          v188.i64[0] = 0;
                          *(void *)(v141 + 32) = v136;
                          v189.i64[0] = 0;
                          v188.i32[2] = 2;
                          *(_DWORD *)(v141 + 24) = 1;
                          re::DynamicArray<re::MeshScene>::deinit((uint64_t)&v187);
                          uint64_t v143 = *(void *)(v132 + 40);
                          if (!v143) {
                            goto LABEL_142;
                          }
                          re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v132, v143 - 1);
                          re::StringID::destroyString((re::StringID *)&v183);
                          uint64_t v123 = v178;
                          if (v179 <= (int)v119 + 1) {
                            unsigned int v144 = v119 + 1;
                          }
                          else {
                            unsigned int v144 = v179;
                          }
                          while (1)
                          {
                            uint64_t v122 = (v119 + 1);
                            if (v144 - 1 == v119) {
                              break;
                            }
                            LODWORD(v119) = v119 + 1;
                            unsigned int v145 = v122;
                            if ((*(_DWORD *)(v178 + (v122 << 6) + 8) & 0x80000000) != 0) {
                              goto LABEL_136;
                            }
                          }
                          unsigned int v145 = v144;
LABEL_136:
                          LODWORD(v119) = v145;
                          if (v163 == v145) {
                            goto LABEL_137;
                          }
                        }
                        v166[0].i64[0] = 0;
                        float32x4_t v190 = 0u;
                        long long v191 = 0u;
                        float32x4_t v188 = 0u;
                        float32x4_t v189 = 0u;
                        float32x4_t v187 = 0u;
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)uint64_t v224 = 136315906;
                        *(void *)&v224[4] = "operator[]";
                        *(_WORD *)&v224[12] = 1024;
                        *(_DWORD *)&v224[14] = 858;
                        *(_WORD *)&v224[18] = 2048;
                        *(void *)&v224[20] = v137 >> 2;
                        *(_WORD *)&v224[28] = 2048;
                        *(void *)&v224[30] = v138;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_142:
                        re::internal::assertLog((re::internal *)4, v142, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v146.i64[0]);
                        _os_crash();
                        __break(1u);
LABEL_143:
                        re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 167);
                        _os_crash();
                        __break(1u);
                      }
LABEL_137:
                      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v175);
                      re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v176);
                      re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v177);
                      uint64_t v4 = v147;
                    }
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)v182);
                    uint64_t v3 = (void *)v155;
                    uint64_t v9 = v150;
                    long long v10 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
                    char v11 = (void *)&unk_26879F000;
                  }
                }
              }
            }
          }
        }
        ++v8;
      }
      while (v8 != (re::ecs2::RenderingSubsystem **)v9);
    }
  }
}

float32x4_t re::ecs2::computeSubtreeCasterAABB(float32x4_t *a1, void *a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v8 = a2[22];
  if (!v8
    || (uint64_t v9 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v8 + 32))) == 0
    || (uint64_t v10 = v9,
        (uint64_t v11 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) != 0)&& !*(unsigned char *)(v11 + 27))
  {
    float32x4_t result = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v21.i64[0] = 0x7F0000007FLL;
    v21.i64[1] = 0x7F0000007FLL;
    *a1 = result;
    a1[1] = v21;
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(v10 + 392);
  uint64_t v13 = *(void *)(v10 + 376);
  uint64_t v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v14)
  {
    uint64_t v12 = *(void *)(v14 + 208);
    uint64_t v13 = *(void *)(v14 + 192);
  }
  re::ecs2::MeshComponent::updateStaticBoundingBoxData((void *)v8, *(const re::ecs2::Entity **)(v8 + 16), 0);
  uint64_t v15 = *(void *)(v8 + 288);
  uint64_t v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (v16 && (uint64_t v17 = *(void *)(v16 + 96)) != 0)
  {
    uint64_t v18 = (re::MeshBoundingBoxes *)(v17 + 80);
    float32x4_t result = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    *a1 = result;
    a1[1] = v20;
    if (!v13) {
      goto LABEL_12;
    }
  }
  else
  {
    float32x4_t result = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v58.i64[0] = 0x7F0000007FLL;
    v58.i64[1] = 0x7F0000007FLL;
    *a1 = result;
    a1[1] = v58;
    if (!v15) {
      goto LABEL_12;
    }
    uint64_t v18 = (re::MeshBoundingBoxes *)(v15 + 152);
    if (!v13) {
      goto LABEL_12;
    }
  }
  if (v13 == *((void *)v18 + 3))
  {
    unint64_t v59 = 0;
    float32x4_t v60 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v61.i64[0] = 0x7F0000007FLL;
    v61.i64[1] = 0x7F0000007FLL;
    do
    {
      float32x4_t v67 = v61;
      float32x4_t v68 = v60;
      float32x4_t v62 = (float32x4_t *)re::DataArray<re::MeshInstance>::get(a3 + 72, *(void *)(v12 + 8 * v59));
      float32x4_t v63 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox(v18, v59);
      re::AABB::transform(v63, v62 + 2, (uint64_t)&v70);
      float32x4_t v65 = v67;
      float32x4_t v64 = v68;
      v64.i32[3] = 0;
      float32x4_t result = (float32x4_t)v70;
      float32x4_t v66 = v71;
      result.i32[3] = 0;
      v65.i32[3] = 0;
      v66.i32[3] = 0;
      float32x4_t v60 = vminnmq_f32(v64, result);
      float32x4_t v61 = vmaxnmq_f32(v65, v66);
      *a1 = v60;
      a1[1] = v61;
      ++v59;
    }
    while (v13 != v59);
  }
LABEL_12:
  uint64_t v22 = (float32x4_t *)a2[30];
  if (v22)
  {
    _Q2 = a4[1];
    _Q3 = v22[3];
    float32x4_t v25 = vmulq_f32(*a4, v22[2]);
    float32x4_t v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL);
    float32x4_t v27 = vnegq_f32(_Q2);
    int8x16_t v28 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), (int8x16_t)_Q3, 0xCuLL), v27), _Q3, v26);
    _S7 = _Q3.i32[3];
    float32x4_t v30 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), v28, 0xCuLL), _Q3, _Q2, 3), _Q2, _Q3, 3);
    __asm { FMLA            S3, S7, V2.S[3] }
    float32x4_t v35 = v22[4];
    float32x4_t v36 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL), v27), v35, v26);
    int8x16_t v37 = (int8x16_t)vaddq_f32(v36, v36);
    float32x4_t v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), v37, 0xCuLL);
    float v39 = (float)(v30.f32[0] + v30.f32[0]) * v30.f32[0];
    float v40 = vmuls_lane_f32(v30.f32[1] + v30.f32[1], *(float32x2_t *)v30.f32, 1);
    float v41 = vmuls_lane_f32(v30.f32[2] + v30.f32[2], v30, 2);
    float v42 = vmuls_lane_f32(v30.f32[0] + v30.f32[0], *(float32x2_t *)v30.f32, 1);
    float v43 = vmuls_lane_f32(v30.f32[0] + v30.f32[0], v30, 2);
    float v44 = vmuls_lane_f32(v30.f32[1] + v30.f32[1], v30, 2);
    v30.i32[3] = _Q3.i32[0];
    int8x16_t v45 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL), v27), v38, v26);
    float32x4_t v46 = vaddq_f32(a4[2], vmulq_f32(*a4, vaddq_f32(vaddq_f32(v35, vmulq_laneq_f32(v38, _Q2, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), v45, 0xCuLL))));
    *a4 = v25;
    a4[1] = v30;
    a4[2] = v46;
    _Q2.f32[0] = _Q3.f32[0] * (float)(v30.f32[0] + v30.f32[0]);
    v26.f32[0] = _Q3.f32[0] * (float)(v30.f32[1] + v30.f32[1]);
    _Q3.f32[0] = _Q3.f32[0] * (float)(v30.f32[2] + v30.f32[2]);
    v47.i32[3] = 0;
    v47.f32[0] = 1.0 - (float)(v40 + v41);
    v30.i32[3] = 0;
    v47.f32[1] = v42 + _Q3.f32[0];
    v47.f32[2] = v43 - v26.f32[0];
    v38.i32[3] = 0;
    v38.f32[0] = v42 - _Q3.f32[0];
    v38.f32[1] = 1.0 - (float)(v39 + v41);
    v38.f32[2] = v44 + _Q2.f32[0];
    v30.f32[0] = v43 + v26.f32[0];
    v30.f32[1] = v44 - _Q2.f32[0];
    v30.f32[2] = 1.0 - (float)(v39 + v40);
    __n128 v70 = (__n128)vmulq_n_f32(v47, v25.f32[0]);
    float32x4_t v71 = vmulq_n_f32(v38, *(float *)vshrq_n_u64((uint64x2_t)v25, 0x20uLL).i32);
    v46.i32[3] = 1.0;
    float32x4_t v72 = vmulq_laneq_f32(v30, v25, 2);
    float32x4_t v73 = v46;
    re::AABB::transform(a1, (float32x4_t *)&v70, (uint64_t)v74);
    result.i64[0] = *(void *)&v74[0];
    float32x4_t v48 = (float32x4_t)v74[1];
    *a1 = (float32x4_t)v74[0];
    a1[1] = v48;
  }
  uint64_t v49 = a2[41];
  if (v49)
  {
    uint64_t v50 = (uint64_t *)a2[43];
    uint64_t v51 = 8 * v49;
    do
    {
      uint64_t v52 = *v50++;
      float32x4_t v53 = a4[1];
      v69[0] = *a4;
      v69[1] = v53;
      v69[2] = a4[2];
      re::ecs2::computeSubtreeCasterAABB(&v70, v52, a3, v69);
      float32x4_t v54 = *a1;
      float32x4_t v55 = a1[1];
      v54.i32[3] = 0;
      float32x4_t v56 = (float32x4_t)v70;
      float32x4_t v57 = v71;
      v56.i32[3] = 0;
      float32x4_t result = vminnmq_f32(v54, v56);
      v55.i32[3] = 0;
      v57.i32[3] = 0;
      *a1 = result;
      a1[1] = vmaxnmq_f32(v55, v57);
      v51 -= 8;
    }
    while (v51);
  }
  return result;
}

void *re::ecs2::allocInfo_RayTracedShadowReceiverComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_332, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_332))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90AC0, "RayTracedShadowReceiverComponent");
    __cxa_guard_release(&_MergedGlobals_332);
  }
  return &unk_26AF90AC0;
}

void re::ecs2::initInfo_RayTracedShadowReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xA5B027ABDA48EFCALL;
  v13[1] = "RayTracedShadowReceiverComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90AA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF90AA0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF90AB0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "isVisible";
      *(void *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF90AB8 = v11;
      __cxa_guard_release(&qword_26AF90AA0);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF90AB0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayTracedShadowReceiverComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::RayTracedShadowReceiverComponent>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RayTracedShadowReceiverComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RayTracedShadowReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::RayTracedShadowReceiverComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_WORD *)(v3 + 24) = 256;
  *(void *)uint64_t v3 = &unk_26E6EFE50;
}

void *re::internal::defaultDestruct<re::ecs2::RayTracedShadowReceiverComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::RayTracedShadowReceiverComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_WORD *)(v1 + 24) = 256;
  *(void *)uint64_t v1 = &unk_26E6EFE50;
}

void *re::internal::defaultDestructV2<re::ecs2::RayTracedShadowReceiverComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RayTracedShadowReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayTracedShadowReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayTracedShadowReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayTracedShadowReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayTracedShadowReceiverComponent>, this);
}

void *re::ecs2::allocInfo_RayTracedShadowReceiverSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90AA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90AA8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90B38, "RayTracedShadowReceiverSystem");
    __cxa_guard_release(&qword_26AF90AA8);
  }
  return &unk_26AF90B38;
}

void re::ecs2::initInfo_RayTracedShadowReceiverSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x972D57F883EE808ELL;
  v5[1] = "RayTracedShadowReceiverSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_RayTracedShadowReceiverSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayTracedShadowReceiverSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::RayTracedShadowReceiverSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::RayTracedShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::RayTracedShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RayTracedShadowReceiverSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RayTracedShadowReceiverSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::RayTracedShadowReceiverSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E70A578;
  *(unsigned char *)(v3 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::RayTracedShadowReceiverSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 21));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::RayTracedShadowReceiverSystem>(_OWORD *a1)
{
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E70A578;
  *(unsigned char *)(v1 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::RayTracedShadowReceiverSystem>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 21));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RayTracedShadowReceiverSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayTracedShadowReceiverSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayTracedShadowReceiverSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayTracedShadowReceiverSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayTracedShadowReceiverSystem>, this);
}

void re::ecs2::RayTracedShadowReceiverSystem::~RayTracedShadowReceiverSystem(re::ecs2::RayTracedShadowReceiverSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::ecs2::RayTracedShadowReceiverSystem *)((char *)this + 168));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::RayTracedShadowReceiverSystem::typeInfo(re::ecs2::RayTracedShadowReceiverSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayTracedShadowReceiverSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayTracedShadowReceiverSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayTracedShadowReceiverSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayTracedShadowReceiverSystem>, 0);
}

void re::HashTable<unsigned long long,re::RayTracedShadowReceiverCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)int8x16_t v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::RayTracedShadowReceiverCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v25 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  uint64_t v26 = *(void *)(v25 + 40);
  *(void *)(v25 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(a5 + 16);
  *(void *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v26;
  uint64_t v27 = *(void *)(v25 + 56);
  *(void *)(v25 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void *re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  double result = re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::RayTracedShadowReceiverCollection,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 160, 0);
          long long v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          long long v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            long long v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::RayTracedShadowReceiverCollection,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      double result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::RayTracedShadowReceiverCollection,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::RayTracedShadowReceiverCollection,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::RayTracedShadowReceiverCollection,4ul> *>::__id;
      if (v10) {
        double result = a2 + 1;
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 8);
  double result = (uint64_t *)(**a2)(3);
  uint64_t v4 = *result;
  if (*result)
  {
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5)
    {
      for (unint64_t i = 0; i != v5; ++i)
      {
        uint64_t v7 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, i);
        re::DynamicArray<re::MeshScene>::deinit(v7);
      }
    }
    while (*(void *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(void *)(v4 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (uint64_t *)v8(v2, v4);
  }
  return result;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70A648;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70A648;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::RayTracedShadowReceiverCollection>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

id re::internal::defaultRetain<re::ecs2::RayTracedShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RayTracedShadowReceiverSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition(uint64_t a1, int a2, re::ecs2::EntityHandle *a3, uint64_t a4, char a5)
{
  *(_DWORD *)a1 = a2;
  re::ecs2::EntityHandle::EntityHandle((id *)(a1 + 16), a3);
  re::StringID::StringID((re::StringID *)(a1 + 40), (const StringID *)((char *)a3 + 24));
  long long v9 = *((_OWORD *)a3 + 4);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v9;
  re::ecs2::EntityHandle::EntityHandle((id *)(a1 + 96), (const re::ecs2::EntityHandle *)a4);
  re::StringID::StringID((re::StringID *)(a1 + 120), (const StringID *)(a4 + 24));
  long long v10 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a1 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v10;
  *(unsigned char *)(a1 + 176) = a5;
  for (uint64_t i = 180; i != 204; i += 8)
    *(void *)(a1 + i) = 0xBF8000003F800000;
  do
  {
    *(void *)(a1 + i) = 0xBF8000003F800000;
    i += 8;
  }
  while (i != 228);
  return a1;
}

BOOL re::ecs2::PhysicsJointDefinition::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  BOOL result = re::ecs2::PinHandle::operator==(a1 + 16, a2 + 16);
  if (result)
  {
    BOOL result = re::ecs2::PinHandle::operator==(a1 + 96, a2 + 96);
    if (result)
    {
      if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176)
        && *(float *)(a1 + 180) == *(float *)(a2 + 180)
        && *(float *)(a1 + 184) == *(float *)(a2 + 184)
        && *(float *)(a1 + 188) == *(float *)(a2 + 188)
        && *(float *)(a1 + 192) == *(float *)(a2 + 192)
        && *(float *)(a1 + 196) == *(float *)(a2 + 196)
        && *(float *)(a1 + 200) == *(float *)(a2 + 200)
        && *(float *)(a1 + 204) == *(float *)(a2 + 204)
        && *(float *)(a1 + 208) == *(float *)(a2 + 208)
        && *(float *)(a1 + 212) == *(float *)(a2 + 212)
        && *(float *)(a1 + 216) == *(float *)(a2 + 216)
        && *(float *)(a1 + 228) == *(float *)(a2 + 228))
      {
        return *(float *)(a1 + 232) == *(float *)(a2 + 232);
      }
      return 0;
    }
  }
  return result;
}

uint64_t re::ecs2::PhysicsJointDefinition::getDataToCreateRuntimeJoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, float32x4_t *a6, re **a7, float32x4_t *a8)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  *a7 = 0;
  *a5 = 0;
  a8->i64[0] = 0;
  a8->i64[1] = 0;
  a8[1].i64[0] = 0;
  a8[1].i64[1] = 0x3F80000000000000;
  float32x4_t v9 = a8[1];
  *a6 = *a8;
  a6[1] = v9;
  uint64_t v10 = *(void *)(a3 + 56);
  if (!v10)
  {
    uint64_t v27 = *re::physicsLogObjects(0);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): scene->ecsService() == nullptr!";
LABEL_17:
      uint64_t v29 = (simd_float4x4 *)buf;
      float32x4_t v30 = v27;
      uint32_t v31 = 2;
LABEL_18:
      _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)v29, v31);
    }
    return 3;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
  uint64_t v19 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v18);
  if (!v19)
  {
    uint64_t v27 = *re::physicsLogObjects(0);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): PhysicsSimulationService == nullptr!";
      goto LABEL_17;
    }
    return 3;
  }
  uint64_t v20 = (re::ecs2::PhysicsSimulationService *)v19;
  uint64_t v99 = a4;
  uint64_t v21 = re::ecs2::EntityHandle::resolve(a1 + 16, (char *)a3);
  uint64_t v22 = (uint64_t)v21;
  if (!v21) {
    goto LABEL_12;
  }
  int v23 = v21;
  do
  {
    signed int v24 = v23;
    int v23 = (char *)*((void *)v23 + 3);
  }
  while (v23);
  if (!*((void *)v24 + 2))
  {
LABEL_12:
    if (!*(void *)(a1 + 24))
    {
      float32x4_t v96 = 0;
      uint64_t v97 = 0;
      long long v98 = "null";
      goto LABEL_21;
    }
    uint64_t v27 = *re::physicsLogObjects((re *)v21);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 was deleted";
      goto LABEL_17;
    }
    return 3;
  }
  long long v98 = (const char *)*((void *)v21 + 35);
  uint64_t v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v25)
  {
    float v40 = *re::physicsLogObjects(0);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
      return 3;
    }
    *(_DWORD *)buf = 136315394;
    float32x2_t v111 = v98;
    __int16 v112 = 2048;
    float32x4_t v113 = (const re::ecs2::Entity *)v22;
    int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) does not have RigidBodyComponent";
    goto LABEL_54;
  }
  uint64_t v97 = v25;
  uint64_t v26 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v20, (const re::ecs2::Entity *)v22);
  if (!v26)
  {
    int v41 = *(_DWORD *)(v22 + 288);
    float v40 = *re::physicsLogObjects(0);
    BOOL v42 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
    if (v41)
    {
      if (!v42) {
        return 3;
      }
      *(_DWORD *)buf = 136315394;
      float32x2_t v111 = v98;
      __int16 v112 = 2048;
      float32x4_t v113 = (const re::ecs2::Entity *)v22;
      int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) does not have PhysicsSimulation";
      goto LABEL_54;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136315394;
      float32x2_t v111 = v98;
      __int16 v112 = 2048;
      float32x4_t v113 = (const re::ecs2::Entity *)v22;
      float v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) is not active";
      float v44 = (simd_float4x4 *)buf;
LABEL_36:
      int8x16_t v45 = v40;
LABEL_59:
      uint32_t v51 = 22;
LABEL_60:
      _os_log_impl(&dword_233120000, v45, OS_LOG_TYPE_DEFAULT, v43, (uint8_t *)v44, v51);
    }
    return 2;
  }
  float32x4_t v96 = v26;
LABEL_21:
  unint64_t v33 = (unint64_t)re::ecs2::EntityHandle::resolve(a1 + 96, (char *)a3);
  if (v33)
  {
    long long v34 = (char *)v33;
    do
    {
      float32x4_t v35 = v34;
      long long v34 = (char *)*((void *)v34 + 3);
    }
    while (v34);
    if (*((void *)v35 + 2))
    {
      float32x4_t v95 = *(const char **)(v33 + 280);
      float32x4_t v36 = (const re::ecs2::Entity *)v33;
      uint64_t v37 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v33 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v37)
      {
        uint64_t v94 = v37;
        float32x4_t v38 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v20, v36);
        if (v38)
        {
          float v39 = v38;
          unint64_t v33 = (unint64_t)v36;
          goto LABEL_45;
        }
        int v49 = *((_DWORD *)v36 + 72);
        float32x4_t v46 = *re::physicsLogObjects(0);
        BOOL v50 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
        if ((v49 & 1) == 0)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136315394;
            float32x2_t v111 = v95;
            __int16 v112 = 2048;
            float32x4_t v113 = v36;
            float v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) is not active";
            float v44 = (simd_float4x4 *)buf;
LABEL_58:
            int8x16_t v45 = v46;
            goto LABEL_59;
          }
          return 2;
        }
        if (!v50) {
          return 3;
        }
        *(_DWORD *)buf = 136315394;
        float32x2_t v111 = v95;
        __int16 v112 = 2048;
        float32x4_t v113 = v36;
        int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) does not have PhysicsSimulation";
      }
      else
      {
        float32x4_t v46 = *re::physicsLogObjects(0);
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
          return 3;
        }
        *(_DWORD *)buf = 136315394;
        float32x2_t v111 = v95;
        __int16 v112 = 2048;
        float32x4_t v113 = v36;
        int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity1 %s (%p) does not have RigidBodyComponent";
      }
      uint64_t v29 = (simd_float4x4 *)buf;
      float32x4_t v30 = v46;
      goto LABEL_73;
    }
  }
  if (*(void *)(a1 + 104))
  {
    uint64_t v27 = *re::physicsLogObjects((re *)v33);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      return 3;
    }
    *(_WORD *)buf = 0;
    int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity1 was deleted";
    goto LABEL_17;
  }
  if (!(v22 | v33))
  {
    uint64_t v27 = *re::physicsLogObjects((re *)v33);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      return 3;
    }
    *(_WORD *)buf = 0;
    int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Both Entities are null";
    goto LABEL_17;
  }
  float v39 = 0;
  uint64_t v94 = 0;
  float32x4_t v95 = "null";
LABEL_45:
  if (v22 == v33)
  {
    float v40 = *re::physicsLogObjects((re *)v33);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
      return 3;
    }
    *(_DWORD *)buf = 136315394;
    float32x2_t v111 = v98;
    __int16 v112 = 2048;
    float32x4_t v113 = (const re::ecs2::Entity *)v22;
    int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entities %s (%p) are the same";
LABEL_54:
    uint64_t v29 = (simd_float4x4 *)buf;
    float32x4_t v30 = v40;
LABEL_73:
    uint32_t v31 = 22;
    goto LABEL_18;
  }
  float32x4_t v93 = (re::ecs2::TransformComponent **)v33;
  if (v96 && v39 && v96 != v39)
  {
    float32x4_t v47 = v39;
    float32x4_t v48 = *re::physicsLogObjects((re *)v33);
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      return 3;
    }
    *(_DWORD *)buf = 136316418;
    float32x2_t v111 = v98;
    __int16 v112 = 2048;
    float32x4_t v113 = (const re::ecs2::Entity *)v22;
    __int16 v114 = 2080;
    unint64_t v115 = v95;
    __int16 v116 = 2048;
    int8x16_t v117 = v93;
    __int16 v118 = 2048;
    uint64_t v119 = v96;
    __int16 v120 = 2048;
    int v121 = v47;
    int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity %s (%p) and Entity %s (%p) have different Physic"
          "sSimulations: %p %p";
    uint64_t v29 = (simd_float4x4 *)buf;
    goto LABEL_51;
  }
  uint64_t v52 = (uint64_t)v39;
  float32x4_t v53 = (simd_float4 *)re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity((uint64_t)v20, v22);
  simd_float4 v91 = v53[8];
  simd_float4 v92 = v53[7];
  simd_float4 v89 = v53[10];
  simd_float4 v90 = v53[9];
  re::ecs2::PinHandle::pinPose((id *)(a1 + 16), 1, (uint64_t)v105);
  if (!v105[0])
  {
    float32x4_t v71 = *re::physicsLogObjects(v54);
    if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
      return 3;
    }
    float32x4_t v72 = *(const char **)(a1 + 48);
    *(_DWORD *)buf = 136315650;
    float32x2_t v111 = v98;
    __int16 v112 = 2048;
    float32x4_t v113 = (const re::ecs2::Entity *)v22;
    __int16 v114 = 2080;
    unint64_t v115 = v72;
    int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) does not have Pin named %s";
    uint64_t v29 = (simd_float4x4 *)buf;
    float32x4_t v30 = v71;
    goto LABEL_78;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v22, (const re::ecs2::Entity *)1, buf);
  v123.columns[1] = v91;
  v123.columns[0] = v92;
  v123.columns[3] = v89;
  v123.columns[2] = v90;
  simd_float4x4 v109 = __invert_f4(v123);
  *(double *)v55.i64 = re::operator*<float>((float32x4_t *)&v109, (uint64_t)buf, v104);
  re::Matrix4x4<float>::extractScale((uint64_t)v104, v55, v56, v57);
  v59.i64[0] = v58;
  v59.i64[1] = v60;
  float32x4_t v61 = v107;
  *a6 = v106;
  a6[1] = v61;
  *a6 = vmulq_f32(*a6, v59);
  re::ecs2::PinHandle::pinPose((id *)(a1 + 96), 1, (uint64_t)v101);
  if (!v101[0])
  {
    float32x4_t v73 = *re::physicsLogObjects(v62);
    if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT)) {
      return 3;
    }
    uint64_t v74 = *(void *)(a1 + 128);
    v109.columns[0].i32[0] = 136315650;
    *(uint64_t *)((char *)v109.columns[0].i64 + 4) = (uint64_t)v95;
    v109.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v109.columns[0].i64[1] + 6) = (uint64_t)v93;
    v109.columns[1].i16[3] = 2080;
    v109.columns[1].i64[1] = v74;
    int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity1 %s (%p) does not have Pin named %s";
    uint64_t v29 = &v109;
    float32x4_t v30 = v73;
LABEL_78:
    uint32_t v31 = 32;
    goto LABEL_18;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(v93, (const re::ecs2::Entity *)1, &v109);
  v124.columns[1] = v91;
  v124.columns[0] = v92;
  v124.columns[3] = v89;
  v124.columns[2] = v90;
  simd_float4x4 v108 = __invert_f4(v124);
  *(double *)v63.i64 = re::operator*<float>((float32x4_t *)&v108, (uint64_t)&v109, v100);
  re::Matrix4x4<float>::extractScale((uint64_t)v100, v63, v64, v65);
  v67.i64[0] = (uint64_t)v66;
  v67.i64[1] = v68;
  float32x4_t v69 = v103;
  *a8 = v102;
  a8[1] = v69;
  *a8 = vmulq_f32(*a8, v67);
  if (v96) {
    uint64_t v70 = (uint64_t)v96;
  }
  else {
    uint64_t v70 = v52;
  }
  if (v70 != a2)
  {
    float32x4_t v48 = *re::physicsLogObjects(v66);
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      return 3;
    }
    v108.columns[0].i32[0] = 136316418;
    *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
    v108.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
    v108.columns[1].i16[3] = 2080;
    v108.columns[1].i64[1] = (uint64_t)v95;
    v108.columns[2].i16[0] = 2048;
    *(uint64_t *)((char *)v108.columns[2].i64 + 2) = (uint64_t)v93;
    v108.columns[2].i16[5] = 2048;
    *(uint64_t *)((char *)&v108.columns[2].i64[1] + 4) = v70;
    v108.columns[3].i16[2] = 2048;
    *(uint64_t *)((char *)v108.columns[3].i64 + 6) = a2;
    int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): PhysicsSimulation from Entities different from the give"
          "n simulation, Entity %s (%p), Entity %s (%p): %p %p";
    uint64_t v29 = &v108;
LABEL_51:
    float32x4_t v30 = v48;
    uint32_t v31 = 62;
    goto LABEL_18;
  }
  if ((*(_DWORD *)a1 - 1) >= 6)
  {
    float32x4_t v79 = *re::physicsLogObjects(v66);
    if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
      return 3;
    }
    __int32 v80 = *(_DWORD *)a1;
    v108.columns[0].i32[0] = 136316162;
    *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
    v108.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
    v108.columns[1].i16[3] = 2080;
    v108.columns[1].i64[1] = (uint64_t)v95;
    v108.columns[2].i16[0] = 2048;
    *(uint64_t *)((char *)v108.columns[2].i64 + 2) = (uint64_t)v93;
    v108.columns[2].i16[5] = 1024;
    v108.columns[2].i32[3] = v80;
    int8x16_t v28 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity %s (%p), Entity %s (%p), unrecognized joint type %d";
    uint64_t v29 = &v108;
    float32x4_t v30 = v79;
    uint32_t v31 = 48;
    goto LABEL_18;
  }
  if (!v97)
  {
    uint64_t v76 = v94;
    if (!v94)
    {
LABEL_97:
      float v87 = *re::physicsLogObjects(v66);
      if (!os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT)) {
        return 2;
      }
      v108.columns[0].i32[0] = 136315906;
      *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
      v108.columns[0].i16[6] = 2048;
      *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
      v108.columns[1].i16[3] = 2080;
      v108.columns[1].i64[1] = (uint64_t)v95;
      v108.columns[2].i16[0] = 2048;
      *(uint64_t *)((char *)v108.columns[2].i64 + 2) = (uint64_t)v93;
      float v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Neither Entity %s (%p) nor Entity %s (%p) has dynamic RigidBody";
      float v44 = &v108;
      int8x16_t v45 = v87;
      uint32_t v51 = 42;
      goto LABEL_60;
    }
    char v78 = 0;
    goto LABEL_89;
  }
  uint64_t v75 = *(void *)(v97 + 336);
  *a5 = v75;
  uint64_t v76 = v94;
  if (!v75)
  {
    float v40 = *re::physicsLogObjects(v66);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
      return 2;
    }
    v108.columns[0].i32[0] = 136315394;
    *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
    v108.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
    float v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity %s (%p) does not have RigidBody";
    float v44 = &v108;
    goto LABEL_36;
  }
  BOOL v77 = *(_DWORD *)(v75 + 208) == 2;
  char v78 = v77;
  if (v94)
  {
LABEL_89:
    float v81 = *(re **)(v76 + 336);
    *a7 = v81;
    if (v81)
    {
      if (*((_DWORD *)v81 + 52) == 2) {
        char v78 = 1;
      }
      if ((v78 & 1) == 0) {
        goto LABEL_97;
      }
      goto LABEL_93;
    }
    float32x4_t v46 = *re::physicsLogObjects(v66);
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
      return 2;
    }
    v108.columns[0].i32[0] = 136315394;
    *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v95;
    v108.columns[0].i16[6] = 2048;
    *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = (uint64_t)v93;
    float v43 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity %s (%p) does not have RigidBody";
    float v44 = &v108;
    goto LABEL_58;
  }
  if (!v77) {
    goto LABEL_97;
  }
LABEL_93:
  if (v99)
  {
    uint64_t v82 = (*(uint64_t (**)(void))(**(void **)(v99 + 40) + 16))(*(void *)(v99 + 40));
    float32x4_t v83 = (re *)(*(uint64_t (**)(void))(**(void **)(v99 + 40) + 24))(*(void *)(v99 + 40));
    if (v82 != *a5)
    {
      float v84 = *re::physicsLogObjects(v83);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
      {
        v108.columns[0].i32[0] = 136315394;
        *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v98;
        v108.columns[0].i16[6] = 2048;
        *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = v22;
        float32x4_t v85 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity0 %s (%p) RigidBody is different from expected";
        uint64_t v86 = v84;
LABEL_106:
        _os_log_impl(&dword_233120000, v86, OS_LOG_TYPE_DEFAULT, v85, (uint8_t *)&v108, 0x16u);
        return 1;
      }
      return 1;
    }
    if (v83 != *a7)
    {
      float v88 = *re::physicsLogObjects(v83);
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        v108.columns[0].i32[0] = 136315394;
        *(uint64_t *)((char *)v108.columns[0].i64 + 4) = (uint64_t)v95;
        v108.columns[0].i16[6] = 2048;
        *(uint64_t *)((char *)&v108.columns[0].i64[1] + 6) = (uint64_t)v93;
        float32x4_t v85 = "PhysicsJointDefinition::getDataToCreateRuntimeJoint(): Entity1 %s (%p) RigidBody is different from expected";
        uint64_t v86 = v88;
        goto LABEL_106;
      }
      return 1;
    }
  }
  return 0;
}

void *re::ecs2::allocInfo_PhysicsJointDefinition(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90BC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90BC0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90C98, "PhysicsJointDefinition");
    __cxa_guard_release(&qword_26AF90BC0);
  }
  return &unk_26AF90C98;
}

void re::ecs2::initInfo_PhysicsJointDefinition(re::ecs2 *this, re::IntrospectionBase *a2)
{
  *(void *)&long long v34 = 0x19B84C07D352F8ACLL;
  *((void *)&v34 + 1) = "PhysicsJointDefinition";
  re::StringID::destroyString((re::StringID *)&v34);
  *((_OWORD *)this + 2) = v32;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90BB8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF90BB8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_PhysicsJointType((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_type";
      *(void *)(v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF90BD8 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      BOOL v11 = re::introspect_BOOL((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_checkForCollisions";
      *(void *)(v12 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0xB000000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF90BE0 = v12;
      unint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v14 = re::ecs2::introspect_PinHandle((re::IntrospectionBase **)1);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "m_pinHandle0";
      *(void *)(v15 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1000000003;
      *(_DWORD *)(v15 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF90BE8 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v17 = re::ecs2::introspect_PinHandle((re::IntrospectionBase **)1);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "m_pinHandle1";
      *(void *)(v18 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x6000000004;
      *(_DWORD *)(v18 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF90BF0 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90BC8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF90BC8))
      {
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF90C08);
        __cxa_guard_release(&qword_26AF90BC8);
      }
      if ((_MergedGlobals_333 & 1) == 0)
      {
        _MergedGlobals_333 = 1;
        uint64_t v20 = (const re::IntrospectionBase *)re::introspect_LinearLimit((re::IntrospectionBase **)1);
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF90C08, v20, 3);
        re::IntrospectionRegistry::add(v21, v22);
        re::getPrettyTypeName((re *)&unk_26AF90C08, (const re::IntrospectionBase *)&v34);
        if (BYTE8(v34)) {
          int v23 = v35;
        }
        else {
          int v23 = (char *)&v34 + 9;
        }
        if (void)v34 && (BYTE8(v34)) {
          (*(void (**)(void))(*(void *)v34 + 40))();
        }
        long long v34 = *((_OWORD *)v20 + 2);
        xmmword_26AF90C28 = v33;
        re::StringID::destroyString((re::StringID *)v36);
      }
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "m_linearLimits";
      *(void *)(v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &unk_26AF90C08;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0xB400000005;
      *(_DWORD *)(v24 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF90BF8 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90BD0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF90BD0))
      {
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF90C50);
        __cxa_guard_release(&qword_26AF90BD0);
      }
      if ((byte_26AF90BB1 & 1) == 0)
      {
        byte_26AF90BB1 = 1;
        uint64_t v26 = (const re::IntrospectionBase *)re::introspect_AngularLimit((re::IntrospectionBase **)1);
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF90C50, v26, 3);
        re::IntrospectionRegistry::add(v27, v28);
        re::getPrettyTypeName((re *)&unk_26AF90C50, (const re::IntrospectionBase *)&v34);
        if (BYTE8(v34)) {
          uint64_t v29 = v35;
        }
        else {
          uint64_t v29 = (char *)&v34 + 9;
        }
        if (void)v34 && (BYTE8(v34)) {
          (*(void (**)(void))(*(void *)v34 + 40))();
        }
        long long v34 = *((_OWORD *)v26 + 2);
        xmmword_26AF90C70 = v33;
        re::StringID::destroyString((re::StringID *)v36);
      }
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "m_angularLimits";
      *(void *)(v30 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &unk_26AF90C50;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0xCC00000006;
      *(_DWORD *)(v30 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF90C00 = v30;
      __cxa_guard_release(&qword_26AF90BB8);
    }
  }
  *((void *)this + 2) = 0xF000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF90BD8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsJointDefinition>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::PhysicsJointDefinition>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsJointDefinition>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsJointDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  long long v31 = v32;
}

id *re::internal::defaultConstruct<re::ecs2::PhysicsJointDefinition>(int a1, int a2, id *this)
{
  return re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition(this);
}

void re::internal::defaultDestruct<re::ecs2::PhysicsJointDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(a3 + 96));
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(a3 + 16));
}

void re::internal::defaultDestructV2<re::ecs2::PhysicsJointDefinition>(uint64_t a1)
{
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(a1 + 96));
  re::ecs2::PinHandle::~PinHandle((re::ecs2::PinHandle *)(a1 + 16));
}

uint64_t re::ecs2::introspect_PhysicsJointDefinition(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsJointDefinition", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsJointDefinition, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsJointDefinition, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsJointDefinition>, this);
}

__n128 re::ecs2::VideoPlayerStatusComponent::didUpdateInApp(re::ecs2::VideoPlayerStatusComponent *this, __n128 result)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v4 = *((void *)this + 2);
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      uint64_t v7 = *(re::EventBus **)(v6 + 288);
      if (v7)
      {
        int v8 = *((unsigned __int8 *)this + 49);
        if (*((unsigned __int8 *)this + 136) != v8)
        {
          LOBYTE(v17) = *((unsigned char *)this + 136);
          BYTE1(v17) = v8;
          uint64_t Type = re::EventBus::getTypeId<REVideoPlayerContentTypeChangedEvent>();
          re::EventBus::publish(v7, v2, (uint64_t)Type, (uint64_t)&v17, 2uLL, 0);
          *((unsigned char *)this + 136) = *((unsigned char *)this + 49);
        }
        result.n128_u64[0] = *((void *)this + 8);
        uint32x2_t v10 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)((char *)this + 152), (float32x2_t)result.n128_u64[0]));
        if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) != 0)
        {
          uint64_t v17 = *((void *)this + 7);
          unint64_t v18 = result.n128_u64[0];
          BOOL v11 = re::EventBus::getTypeId<REVideoPlayerVideoSizeChangedEvent>();
          re::EventBus::publish(v7, v2, (uint64_t)v11, (uint64_t)&v17, 0x10uLL, 0);
          BOOL result = *(__n128 *)((char *)this + 56);
          *((__n128 *)this + 9) = result;
        }
        int v12 = *((unsigned __int8 *)this + 72);
        if (*((unsigned __int8 *)this + 160) != v12)
        {
          LOBYTE(v17) = *((unsigned char *)this + 160);
          BYTE1(v17) = v12;
          unint64_t v13 = re::EventBus::getTypeId<REVideoPlayerViewingModeChangedEvent>();
          re::EventBus::publish(v7, v2, (uint64_t)v13, (uint64_t)&v17, 2uLL, 0);
          *((unsigned char *)this + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *((unsigned char *)this + 72);
        }
        uint64_t v15 = (__n128 *)((char *)this + 88);
        unint64_t v14 = *((void *)this + 11);
        if (*((void *)this + 22) != v14)
        {
          uint64_t v17 = *((void *)this + 10);
          unint64_t v18 = v14;
          uint64_t v19 = *((void *)this + 12);
          unint64_t v16 = re::EventBus::getTypeId<REVideoPlayerVideoReceiverEndpointChangedEvent>();
          re::EventBus::publish(v7, v2, (uint64_t)v16, (uint64_t)&v17, 0x18uLL, 0);
          objc_storeStrong((id *)this + 21, *((id *)this + 10));
          BOOL result = *v15;
          *((__n128 *)this + 11) = *v15;
        }
      }
    }
  }
  return result;
}

void re::ecs2::VideoPlayerStatusComponent::setMediaInfo(re::ecs2::Component *a1, unsigned __int8 *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v2 = *a2;
  if (*((unsigned __int8 *)a1 + 48) != v2)
  {
    *((unsigned char *)a1 + 48) = v2;
    uint64_t v4 = *(re::ecs2::NetworkComponent **)(*((void *)a1 + 2) + 200);
    if (v4) {
      re::ecs2::NetworkComponent::markDirty(v4, a1);
    }
    uint64_t v5 = *re::videoLogObjects(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *((unsigned __int8 *)a1 + 48);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "VideoPlayerStatusComponent setMediaInfo media: %d", (uint8_t *)v7, 8u);
    }
  }
}

void re::ecs2::VideoPlayerStatusComponent::setContentInfo(re::ecs2::Component *a1, unsigned __int8 *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v2 = *a2;
  if (*((unsigned __int8 *)a1 + 49) != v2)
  {
    *((unsigned char *)a1 + 49) = v2;
    uint64_t v4 = *(re::ecs2::NetworkComponent **)(*((void *)a1 + 2) + 200);
    if (v4) {
      re::ecs2::NetworkComponent::markDirty(v4, a1);
    }
    uint64_t v5 = *re::videoLogObjects(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *((unsigned __int8 *)a1 + 49);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "VideoPlayerStatusComponent setContentInfo media: %d", (uint8_t *)v7, 8u);
    }
  }
}

void re::ecs2::VideoPlayerStatusComponent::setVideoIsReadyToRender(re::ecs2::VideoPlayerStatusComponent *this, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*((unsigned __int8 *)this + 73) != a2)
  {
    *((unsigned char *)this + 73) = a2;
    uint64_t v3 = *(re::ecs2::NetworkComponent **)(*((void *)this + 2) + 200);
    if (v3) {
      re::ecs2::NetworkComponent::markDirty(v3, this);
    }
    uint64_t v4 = *re::videoLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *((unsigned __int8 *)this + 73);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "VideoPlayerStatusComponent setVideoIsuint64_t ReadyToRender = %d", (uint8_t *)v6, 8u);
    }
  }
}

void re::ecs2::VideoPlayerStatusComponent::setVideoReceiverEndpointAvailable(re::ecs2::VideoPlayerStatusComponent *this, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (*((unsigned __int8 *)this + 104) != a2)
  {
    *((unsigned char *)this + 104) = a2;
    uint64_t v3 = *(re::ecs2::NetworkComponent **)(*((void *)this + 2) + 200);
    if (v3) {
      re::ecs2::NetworkComponent::markDirty(v3, this);
    }
    uint64_t v4 = *re::videoLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *((unsigned __int8 *)this + 104);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "VideoPlayerStatusComponent setVideoReceiverEndpointAvailable = %d", (uint8_t *)v6, 8u);
    }
  }
}

void re::ecs2::introspect_VideoPlayerMediaType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D18, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF90D18);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "InvalidVideo";
      qword_26AF90D88 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Video";
      qword_26AF90D90 = v28;
      __cxa_guard_release(&qword_26AF90D18);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90D20))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF90DA8, "VideoPlayerMediaType", 1, 1, 1, 1);
    qword_26AF90DA8 = (uint64_t)&unk_26E715E00;
    qword_26AF90DE8 = (uint64_t)&re::ecs2::introspect_VideoPlayerMediaType(BOOL)::enumTable;
    dword_26AF90DB8 = 9;
    __cxa_guard_release(&qword_26AF90D20);
  }
  if ((_MergedGlobals_334 & 1) == 0)
  {
    _MergedGlobals_334 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF90DA8, a2);
    uint64_t v30 = 0xE22DD1D6E86A0B04;
    long long v31 = "VideoPlayerMediaType";
    v34[0] = 0x31CD534126;
    v34[1] = "uint8_t";
    int v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      uint64_t v4 = (unsigned int *)qword_26AF90DE8;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            float32x4_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  int v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.unint64_t var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.unint64_t var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF90DC8 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "VideoPlayerMediaType", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_VideoPlayerMediaInfo(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90D28))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90E90, "VideoPlayerMediaInfo");
    __cxa_guard_release(&qword_26AF90D28);
  }
  return &unk_26AF90E90;
}

void re::ecs2::initInfo_VideoPlayerMediaInfo(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xE22DD1D6E85FB5ECLL;
  v9[1] = "VideoPlayerMediaInfo";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D38, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF90D38);
    if (v4)
    {
      int v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      re::ecs2::introspect_VideoPlayerMediaType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "mediaType";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF90DA8;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF90D30 = v7;
      __cxa_guard_release(&qword_26AF90D38);
    }
  }
  *((void *)this + 2) = 0x100000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF90D30;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoPlayerMediaInfo>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::VideoPlayerMediaInfo>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoPlayerMediaInfo>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoPlayerMediaInfo>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void *re::ecs2::allocInfo_VideoPlayerContentInfo(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90D48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90F08, "VideoPlayerContentInfo");
    __cxa_guard_release(&qword_26AF90D48);
  }
  return &unk_26AF90F08;
}

void re::ecs2::initInfo_VideoPlayerContentInfo(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xDC86BCC6BE29816;
  v9[1] = "VideoPlayerContentInfo";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D58, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF90D58);
    if (v4)
    {
      int v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      re::ecs2::introspect_VideoPlayerContentType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "contentType";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF90DF0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF90D50 = v7;
      __cxa_guard_release(&qword_26AF90D58);
    }
  }
  *((void *)this + 2) = 0x100000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF90D50;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoPlayerContentInfo>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::VideoPlayerContentInfo>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoPlayerContentInfo>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoPlayerContentInfo>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::ecs2::introspect_VideoPlayerContentType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D68, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF90D68);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "InvalidVideo";
      qword_26AF90D98 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Video";
      qword_26AF90DA0 = v28;
      __cxa_guard_release(&qword_26AF90D68);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90D70))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF90DF0, "VideoPlayerContentType", 1, 1, 1, 1);
    qword_26AF90DF0 = (uint64_t)&unk_26E715E00;
    qword_26AF90E30 = (uint64_t)&re::ecs2::introspect_VideoPlayerContentType(BOOL)::enumTable;
    dword_26AF90E00 = 9;
    __cxa_guard_release(&qword_26AF90D70);
  }
  if ((byte_26AF90D11 & 1) == 0)
  {
    byte_26AF90D11 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF90DF0, a2);
    uint64_t v30 = 0xDC86BCC6BECED2ELL;
    long long v31 = "VideoPlayerContentType";
    v34[0] = 0x31CD534126;
    v34[1] = "uint8_t";
    int v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      uint64_t v4 = (unsigned int *)qword_26AF90E30;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            float32x4_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  int v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.unint64_t var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.unint64_t var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF90E10 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "VideoPlayerContentType", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_VideoPlayerStatusComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF90D80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF90F80, "VideoPlayerStatusComponent");
    __cxa_guard_release(&qword_26AF90D80);
  }
  return &unk_26AF90F80;
}

void re::ecs2::initInfo_VideoPlayerStatusComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v48[0] = 0x10446737D3AC3CDELL;
  v48[1] = "VideoPlayerStatusComponent";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF90D78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF90D78);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF90E38 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      float32x4_t v9 = v8;
      uint64_t v10 = (re::ecs2 *)qword_26AF90D40;
      if (!qword_26AF90D40)
      {
        uint64_t v10 = (re::ecs2 *)re::ecs2::allocInfo_VideoPlayerMediaInfo(v8);
        qword_26AF90D40 = (uint64_t)v10;
        re::ecs2::initInfo_VideoPlayerMediaInfo(v10, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_mediaInfo";
      *(void *)(v12 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF90E40 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v14 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "m_currentPlayerScreenSize";
      *(void *)(v15 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x3800000002;
      *(_DWORD *)(v15 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF90E48 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_float((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "m_safezoneradius";
      *(void *)(v19 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1C00000003;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF90E50 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v21 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "m_currentSceneSize";
      *(void *)(v22 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x2000000004;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF90E58 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      uint64_t v25 = re::ecs2::introspect_VideoViewingMode((re::ecs2 *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "m_currentViewingMode";
      *(void *)(v26 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x4800000006;
      *(_DWORD *)(v26 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF90E60 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      uint64_t v29 = re::introspect_BOOL((re *)1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "m_videoIsReadyToRender";
      *(void *)(v30 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x4900000007;
      *(_DWORD *)(v30 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF90E68 = v30;
      long long v31 = re::introspectionAllocator((re *)v30);
      uint64_t v32 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "m_currentScreenVideoDimension";
      *(void *)(v33 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0x4000000008;
      *(_DWORD *)(v33 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF90E70 = v33;
      long long v34 = (re::ecs2 *)re::introspectionAllocator((re *)v33);
      float32x4_t v35 = v34;
      float32x4_t v36 = (re::ecs2 *)qword_26AF90D60;
      if (!qword_26AF90D60)
      {
        float32x4_t v36 = (re::ecs2 *)re::ecs2::allocInfo_VideoPlayerContentInfo(v34);
        qword_26AF90D60 = (uint64_t)v36;
        re::ecs2::initInfo_VideoPlayerContentInfo(v36, v37);
      }
      uint64_t v38 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "m_contentInfo";
      *(void *)(v38 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v36;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0x3100000009;
      *(_DWORD *)(v38 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF90E78 = v38;
      float v39 = re::introspectionAllocator((re *)v38);
      int v41 = re::introspect_BOOL((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "m_videoReceiverEndpointAvailable";
      *(void *)(v42 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0x680000000ALL;
      *(_DWORD *)(v42 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_26AF90E80 = v42;
      float v43 = re::introspectionAllocator((re *)v42);
      int8x16_t v45 = re::introspect_AssetHandle((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "m_videoAsset";
      *(void *)(v46 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0x700000000BLL;
      *(_DWORD *)(v46 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF90E88 = v46;
      __cxa_guard_release(&qword_26AF90D78);
    }
  }
  *((void *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_26AF90E38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoPlayerStatusComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::VideoPlayerStatusComponent>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoPlayerStatusComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoPlayerStatusComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

void re::internal::defaultConstruct<re::ecs2::VideoPlayerStatusComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoPlayerStatusComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoPlayerStatusComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoPlayerStatusComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoPlayerStatusComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoPlayerStatusComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoPlayerStatusComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoPlayerStatusComponent>, this);
}

char *re::EventBus::getTypeId<REVideoPlayerContentTypeChangedEvent>()
{
  uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<REVideoPlayerContentTypeChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"36REVideoPlayerContentTypeChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[468];
}

char *re::EventBus::getTypeId<REVideoPlayerVideoSizeChangedEvent>()
{
  uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<REVideoPlayerVideoSizeChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"34REVideoPlayerVideoSizeChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[470];
}

char *re::EventBus::getTypeId<REVideoPlayerViewingModeChangedEvent>()
{
  uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<REVideoPlayerViewingModeChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"36REVideoPlayerViewingModeChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[472];
}

char *re::EventBus::getTypeId<REVideoPlayerVideoReceiverEndpointChangedEvent>()
{
  uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<REVideoPlayerVideoReceiverEndpointChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"46REVideoPlayerVideoReceiverEndpointChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      uint64_t v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[474];
}

void re::make::shared::unsafelyInplace<re::ecs2::VideoPlayerStatusComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F1940;
  *(_DWORD *)(v1 + 28) = -1082130432;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(void *)(v1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v1 + 64) = 0;
  *(_WORD *)(v1 + 72) = 0;
  *(void *)(v1 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v1 + 88) = -1;
  *(void *)(v1 + 96) = 0;
  *(unsigned char *)(v1 + 104) = 0;
  *(void *)(v1 + 144) = 0;
  *(void *)(v1 + 152) = 0;
  *(unsigned char *)(v1 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v1 + 128) = 0;
  *(unsigned char *)(v1 + 136) = 0;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = 0;
  *(void *)(v1 + 176) = -1;
  *(void *)(v1 + 184) = 0;
}

double re::ecs2::downgradeStaticTextComponentFromFall2023@<D0>(re::ecs2 *this@<X0>, unsigned char *a2@<X8>)
{
  char v6 = *((unsigned char *)this + 144);
  long long v8 = *((_OWORD *)this + 8);
  char v9 = v6;
  re::ColorGamut4F::as((uint64_t)&v8, 0, 3, (uint64_t)&v10);
  double result = *(double *)&v10;
  *((_OWORD *)this + 8) = v10;
  *((unsigned char *)this + 144) = v11;
  *a2 = 1;
  return result;
}

void *re::ecs2::allocInfo_StaticTextComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91000, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91000))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91048, "StaticTextComponent");
    __cxa_guard_release(&qword_26AF91000);
  }
  return &unk_26AF91048;
}

void re::ecs2::initInfo_StaticTextComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v30[0] = 0x57F126D54E440CC4;
  v30[1] = "StaticTextComponent";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_335, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_335);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF91010 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "color";
      *(void *)(v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x8000000001;
      *(_DWORD *)(v10 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF91018 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      int v13 = re::ecs2::introspect_TextAnchor((re::ecs2 *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "anchor";
      *(void *)(v14 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF91020 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      uint64_t v17 = re::IntrospectionInfo<re::DynamicString>::get(1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "text";
      *(void *)(v18 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2800000003;
      *(_DWORD *)(v18 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF91028 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      uint64_t v21 = re::introspect_AssetHandle((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "fontAssetHandle";
      *(void *)(v22 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x4800000004;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF91030 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      uint64_t v25 = re::introspect_ColorGamut((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "colorGamut";
      *(void *)(v26 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x9000000005;
      *(_DWORD *)(v26 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF91038 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 64, 8);
      *(_DWORD *)uint64_t v28 = 6;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0;
      *(unsigned char *)(v28 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
      *(void *)(v28 + 48) = re::ecs2::downgradeStaticTextComponentFromFall2023;
      *(_DWORD *)(v28 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 2;
      qword_26AF91040 = v28;
      __cxa_guard_release(&_MergedGlobals_335);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF91010;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::StaticTextComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::StaticTextComponent>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StaticTextComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StaticTextComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

uint64_t re::internal::defaultConstruct<re::ecs2::StaticTextComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::StaticTextComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::StaticTextComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::StaticTextComponent>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_StaticTextComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StaticTextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StaticTextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StaticTextComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StaticTextComponent>, this);
}

void *re::ecs2::allocInfo_StaticTextSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91008, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91008))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF910C0, "StaticTextSystem");
    __cxa_guard_release(&qword_26AF91008);
  }
  return &unk_26AF910C0;
}

void re::ecs2::initInfo_StaticTextSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xEB707E3A47CF15D4;
  v5[1] = "StaticTextSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_StaticTextSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::StaticTextSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::StaticTextSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::StaticTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::StaticTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StaticTextSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StaticTextSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::StaticTextSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E70A6A0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::StaticTextSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::StaticTextSystem>(_OWORD *a1)
{
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E70A6A0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::StaticTextSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_StaticTextSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StaticTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StaticTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StaticTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StaticTextSystem>, this);
}

double re::ecs2::StaticTextSystem::willAddSceneToECSService(re::ecs2::StaticTextSystem *this, re::ecs2::Scene *a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 13);
  if (!v2 || (*(unsigned char *)(v2 + 424) & 0x10) != 0)
  {
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v5[0] = 0;
    void v5[2] = 0;
    uint64_t v5[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::createSubscription(REEventHandlerResult (*)(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Slice<re::ecs2::StaticTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::Subscription const&,re::Slice<re::ecs2::StaticTextComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 304), (uint64_t)v5);
  }
  return result;
}

uint64_t anonymous namespace'::deactivateComponent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 120) + 56) + 32))(*(void *)(*(void *)(a1 + 120) + 56));
  uint64_t v6 = re::ServiceLocator::service<re::RenderManager>(v5);
  if (a3)
  {
    uint64_t v7 = *(re::TextManager **)(v6 + 72);
    uint64_t v8 = 8 * a3;
    do
    {
      uint64_t v9 = *a2++;
      re::TextManager::removeStaticText(v7, *(void *)(v9 + 96), *(void *)(v9 + 104));
      v8 -= 8;
    }
    while (v8);
  }
  return 0;
}

void re::ecs2::StaticTextSystem::willRemoveSceneFromECSService(re::ecs2::StaticTextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 13);
  if (!v2 || (*(unsigned char *)(v2 + 424) & 0x10) != 0)
  {
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::createSubscription(REEventHandlerResult (*)(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Slice<re::ecs2::StaticTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::Subscription const&,re::Slice<re::ecs2::StaticTextComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 304, &v4);
  }
}

uint64_t re::ecs2::StaticTextSystem::updateScenes(uint64_t result, uint64_t **a2)
{
  uint64_t v2 = result;
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(result + 104);
  if (!v3 || (*(unsigned char *)(v3 + 424) & 0x10) != 0)
  {
    long long v4 = a2[1];
    if (v4)
    {
      uint64_t v5 = *a2;
      uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      uint64_t v7 = (uint64_t)&(*a2)[(void)v4];
      uint64_t v52 = v7;
      uint64_t v53 = result;
      do
      {
        uint64_t v8 = *v5;
        if (*v5)
        {
          uint64_t v9 = *(void *)(v2 + 112);
          if (!v9)
          {
            re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 152);
            _os_crash();
            __break(1u);
          }
          int32x4_t v56 = *(re::TextManager **)(v9 + 72);
          if (v56)
          {
            uint64_t v10 = *(unsigned __int8 **)(v9 + 152);
            float32x4_t v55 = v5;
            if (v10) {
              unsigned int v57 = *v10;
            }
            else {
              unsigned int v57 = 0;
            }
            re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v71);
            re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)v6[245]);
            re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v70, 3021, v2);
            uint64_t v11 = *(void *)(*(void *)(v2 + 112) + 104);
            if (v11) {
              float32x4_t v54 = (re::RenderFrame *)re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
            }
            else {
              float32x4_t v54 = 0;
            }
            uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v2 + 136) + 24))(*(void *)(v2 + 136));
            int v13 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
            int v14 = *((_DWORD *)v13 + 31);
            if (!v14) {
              int v14 = *((_DWORD *)v13 + 4);
            }
            signed int v15 = v14 + 1;
            unsigned int v68 = 0;
            long long v66 = 0u;
            long long v67 = 0u;
            uint64_t v69 = 0x7FFFFFFFLL;
            uint64_t v65 = (*(uint64_t (**)(void))(**(void **)(v2 + 144) + 16))(*(void *)(v2 + 144));
            uint64_t v16 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)v6[245]);
            if (v16)
            {
              uint64_t v17 = *(void *)(v16 + 24);
              if (v17)
              {
                uint64_t v18 = *(float32x4_t ***)(v16 + 40);
                uint64_t v19 = &v18[v17];
                do
                {
                  uint64_t v20 = *v18;
                  uint64_t v21 = (re::ecs2::TransformComponent **)(*v18)[1].i64[0];
                  if (*(unsigned char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v65, (unint64_t)v21))
                  {
                    uint64_t v64 = 0;
                    (*(void (**)(float32x4_t *__return_ptr, uint64_t, re::ecs2::TransformComponent **))(*(void *)v12 + 8))(&v76, v12, v21);
                    if (v76.i8[0]) {
                      uint64_t v22 = v76.i64[1];
                    }
                    else {
                      uint64_t v22 = 0;
                    }
                    uint64_t v63 = 0;
                    uint64_t v64 = v22;
                    v76.i64[0] = (uint64_t)&v66;
                    v76.i64[1] = v8;
                    v77.i64[0] = v22;
                    uint64_t v23 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v66, (uint64_t *)&v77);
                    if (v23)
                    {
                      uint64_t v24 = *v23;
                    }
                    else
                    {
                      unint64_t v25 = 0xBF58476D1CE4E5B9
                          * ((*(void *)(*(void *)(v76.i64[1] + 104) + 272) >> 31) ^ (*(void *)(*(void *)(v76.i64[1] + 104) + 272) >> 1));
                      unint64_t v26 = (0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31);
                      unint64_t v27 = 0x94D049BB133111EBLL
                          * ((0xBF58476D1CE4E5B9 * (v77.i64[0] ^ ((unint64_t)v77.i64[0] >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v77.i64[0] ^ ((unint64_t)v77.i64[0] >> 30))) >> 27));
                      uint64_t v24 = ((v27 ^ (v27 >> 31)) + (v26 << 6) + (v26 >> 2) - 0x61C8864680B583E9) ^ v26;
                    }
                    uint64_t v63 = v24;
                    __int8 v28 = v20[9].i8[0];
                    float32x4_t v72 = v20[8];
                    v73.i8[0] = v28;
                    re::ColorGamut4F::as((uint64_t)&v72, v57, 1, (uint64_t)&v76);
                    float32x4_t v58 = v76;
                    uint64_t v29 = v20[6].i64[0];
                    if (v29) {
                      goto LABEL_27;
                    }
                    uint64_t v33 = (re *)&v20[4].u32[2];
                    uint64_t v34 = v20[5].i64[0];
                    if (v34)
                    {
                      unsigned int v35 = atomic_load((unsigned int *)(v34 + 704));
                      if (v35 == 2)
                      {
                        re::makeFontID(v33, (re::StringID *)&v59);
                        v20[7].i64[0] = re::TextManager::computeSize((BOOL)v56, (const re::DynamicString *)&v20[2].u32[2], (const re::FontID *)&v59, v36, v37, v38);
                        re::StringID::invalid((re::StringID *)&v76);
                        v77.i64[0] = 0x3F8000003F800000;
                        v77.i64[1] = 0x3F8000003F800000;
                        float32x4_t v78 = 0u;
                        float32x4_t v79 = 0u;
                        float32x4_t v80 = 0u;
                        float32x4_t v81 = 0u;
                        uint64_t v82 = -1;
                        uint64_t v83 = 0;
                        uint64_t v84 = 0;
                        long long v85 = re::kInvalidStringRenderHandle;
                        re::ecs2::TransformComponent::worldMatrix4x4F(v21, (const re::ecs2::Entity *)1, &v72);
                        float32x4_t v78 = v72;
                        float32x4_t v79 = v73;
                        float32x4_t v80 = v74;
                        float32x4_t v81 = v75;
                        uint64_t v82 = v63;
                        float32x4_t v77 = v58;
                        re::StringID::operator=((unint64_t *)&v76, (uint64_t *)&v59);
                        v20[6].i64[0] = re::TextManager::addStaticText(v56, (uint64_t)&v20[2].i64[1], (uint64_t)&v76);
                        v20[6].i64[1] = v39;
                        v20[2].i8[0] = 1;
                        re::StringID::destroyString((re::StringID *)&v76);
                        re::StringID::destroyString((re::StringID *)&v59);
                        uint64_t v29 = v20[6].i64[0];
                        if (!v29) {
                          goto LABEL_55;
                        }
LABEL_27:
                        uint64_t v30 = v20[6].i64[1];
                        re::ecs2::TransformComponent::worldMatrix4x4F(v21, (const re::ecs2::Entity *)1, &v59);
                        if (v20[1].i32[3] == 1)
                        {
                          unint64_t v31 = 0;
                          float32x4_t v32 = vnegq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v59, v20[7].f32[0] * 0.5), (float32x4_t)0, v60), (float32x4_t)0, v61), vmlaq_f32(vmlaq_n_f32(vmulq_f32(v59, (float32x4_t)0), v60, v20[7].f32[1] * -0.5), (float32x4_t)0, v61)));
                          v32.i32[3] = 1.0;
                          float32x4_t v72 = v59;
                          float32x4_t v73 = v60;
                          float32x4_t v74 = v61;
                          float32x4_t v75 = v62;
                          do
                          {
                            *(float32x4_t *)((char *)&v76 + v31) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_23435FD50, COERCE_FLOAT(*(_OWORD *)((char *)&v72 + v31))), (float32x4_t)xmmword_23435FD60, *(float32x2_t *)&v72.f32[v31 / 4], 1), (float32x4_t)xmmword_23435FD80, *(float32x4_t *)((char *)&v72 + v31), 2), v32, *(float32x4_t *)((char *)&v72 + v31), 3);
                            v31 += 16;
                          }
                          while (v31 != 64);
                          float32x4_t v59 = v76;
                          float32x4_t v60 = v77;
                          float32x4_t v61 = v78;
                          float32x4_t v62 = v79;
                        }
                        re::TextManager::modifyStaticTextColor(v56, v29, v30, v58.i64[0], v58.i64[1]);
                        re::TextManager::modifyStaticTextWorldMatrix(v56, v29, v30, (long long *)&v59);
                        re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long long &>((uint64_t)&v66, &v64, &v63);
                        goto LABEL_37;
                      }
                    }
                    re::AssetHandle::loadAsync(v33);
                  }
LABEL_37:
                  ++v18;
                }
                while (v18 != v19);
              }
            }
            unsigned int v40 = v68;
            if (v68)
            {
              uint64_t v41 = 0;
              uint64_t v42 = (int *)(v67 + 8);
              float v43 = (re::DynamicString **)v54;
              while (1)
              {
                int v44 = *v42;
                v42 += 8;
                if (v44 < 0) {
                  break;
                }
                if (v68 == ++v41)
                {
                  LODWORD(v41) = v68;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v41) = 0;
              float v43 = (re::DynamicString **)v54;
            }
            if (v68 != v41)
            {
              uint64_t v45 = v41;
              uint64_t v46 = v67;
              do
              {
                uint64_t v47 = v46 + 32 * v45;
                uint64_t v48 = *(void *)(v47 + 24);
                re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, *(const re::ecs2::Scene **)(v47 + 16), v43, &v76);
                v72.i64[0] = (unint64_t)v76.i64[0] >> 1;
                v59.i64[0] = v48;
                uint64_t v49 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v43 + 33), (const re::WeakStringID *)&v72)+ 48);
                (*(void (**)(void))(v49 + 680))();
                re::StringID::destroyString((re::StringID *)&v76);
                uint64_t v46 = v67;
                if (v68 <= (int)v41 + 1) {
                  unsigned int v50 = v41 + 1;
                }
                else {
                  unsigned int v50 = v68;
                }
                int v51 = v41;
                while (1)
                {
                  uint64_t v45 = (v51 + 1);
                  if (v50 - 1 == v51) {
                    break;
                  }
                  ++v51;
                  LODWORD(v41) = v45;
                  if ((*(_DWORD *)(v67 + 32 * v45 + 8) & 0x80000000) != 0) {
                    goto LABEL_54;
                  }
                }
                LODWORD(v41) = v50;
LABEL_54:
                ;
              }
              while (v40 != v41);
            }
LABEL_55:
            re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v66);
            re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v70);
            double result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v71);
            uint64_t v7 = v52;
            uint64_t v2 = v53;
            uint64_t v5 = v55;
            uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
          }
        }
        ++v5;
      }
      while (v5 != (uint64_t *)v7);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long long &>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

void re::ecs2::StaticTextSystem::~StaticTextSystem(re::ecs2::StaticTextSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::StaticTextSystem::typeInfo(re::ecs2::StaticTextSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StaticTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StaticTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StaticTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StaticTextSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::StaticTextComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6F1000;
  *(_DWORD *)(v2 + 28) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)(v2 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  uint64_t v3 = (void *)(v2 + 40);
  re::DynamicString::setCapacity(v3, 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = re::kInvalidStringRenderHandle;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0x3F8000003F800000;
  *(void *)(a1 + 136) = 0x3F8000003F800000;
  *(unsigned char *)(a1 + 144) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::StaticTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::StaticTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::createSubscription(REEventHandlerResult (*)(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Slice<re::ecs2::StaticTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::StaticTextComponent>,re::Slice<re::ecs2::StaticTextComponent*>>::Subscription const&,re::Slice<re::ecs2::StaticTextComponent*>&&)#1}::__invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a2 + 8))(a1, *a3, a3[1]);
}

void *re::ecs2::allocInfo_MeshSortGroupToken(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91140))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF911D8, "MeshSortGroupToken");
    __cxa_guard_release(&qword_26AF91140);
  }
  return &unk_26AF911D8;
}

void re::ecs2::initInfo_MeshSortGroupToken(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v24[0] = 0xE012E5EA2B5454CALL;
  v24[1] = "MeshSortGroupToken";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_336, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_336);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::introspect_uint64_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_groupId";
      *(void *)(v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF91168 = v8;
      unint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_MeshSortingConfiguration((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_sortingConfiguration";
      *(void *)(v12 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF91170 = v12;
      unsigned int v13 = re::introspectionAllocator((re *)v12);
      signed int v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_useDepthBias";
      *(void *)(v16 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x900000003;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF91178 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v18 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "m_sortPointOverride";
      *(void *)(v19 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1000000004;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF91180 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v21 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "m_groupNormal";
      *(void *)(v22 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x3000000005;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF91188 = v22;
      __cxa_guard_release(&_MergedGlobals_336);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF91168;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSortGroupToken>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::MeshSortGroupToken>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSortGroupToken>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSortGroupToken>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v25;
}

void re::internal::defaultConstruct<re::ecs2::MeshSortGroupToken>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(_WORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::MeshSortGroupToken>(uint64_t result)
{
  *(void *)double result = 0;
  *(_WORD *)(result + 8) = 0;
  *(unsigned char *)(result + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(unsigned char *)(result + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  return result;
}

void *re::ecs2::allocInfo_MeshSortingComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91150, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91150))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91250, "MeshSortingComponent");
    __cxa_guard_release(&qword_26AF91150);
  }
  return &unk_26AF91250;
}

void re::ecs2::initInfo_MeshSortingComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v41[0] = 0x3ED245A66561E00CLL;
  v41[1] = "MeshSortingComponent";
  re::StringID::destroyString((re::StringID *)v41);
  *((_OWORD *)this + 2) = v42;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91158, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF91158);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF91190 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_MeshSortingConfiguration((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "sortingConfiguration";
      *(void *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF91198 = v11;
      uint64_t v12 = (re::ecs2 *)re::introspectionAllocator((re *)v11);
      unsigned int v13 = v12;
      int v14 = (re::ecs2 *)qword_26AF91148;
      if (!qword_26AF91148)
      {
        int v14 = (re::ecs2 *)re::ecs2::allocInfo_MeshSortGroupToken(v12);
        qword_26AF91148 = (uint64_t)v14;
        re::ecs2::initInfo_MeshSortGroupToken(v14, v15);
      }
      uint64_t v16 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "groupToken";
      *(void *)(v16 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v14;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF911A0 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_int((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "priorityInGroup";
      *(void *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0xA000000003;
      *(_DWORD *)(v20 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF911A8 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      long long v23 = re::introspect_int((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "depthPriorityInGroup";
      *(void *)(v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0xA400000004;
      *(_DWORD *)(v24 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF911B0 = v24;
      long long v25 = re::introspectionAllocator((re *)v24);
      uint64_t v26 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "sortPointOverride";
      *(void *)(v27 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x13000000005;
      *(_DWORD *)(v27 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF911B8 = v27;
      __int8 v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::IntrospectionInfo<re::DynamicArray<int>>::get(1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "meshPartPrioritiesInGroup";
      *(void *)(v31 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x14000000006;
      *(_DWORD *)(v31 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF911C0 = v31;
      float32x4_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::IntrospectionInfo<re::DynamicArray<int>>::get(1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "meshPartDepthPrioritiesInGroup";
      *(void *)(v35 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x16800000007;
      *(_DWORD *)(v35 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF911C8 = v35;
      double v36 = re::introspectionAllocator((re *)v35);
      __n128 v38 = re::introspect_BOOL((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + 8) = "isManagingUISorting";
      *(void *)(v39 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0xA800000008;
      *(_DWORD *)(v39 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      *(void *)(v39 + 48) = 0;
      *(void *)(v39 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF911D0 = v39;
      __cxa_guard_release(&qword_26AF91158);
    }
  }
  *((void *)this + 2) = 0x1D000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + 8) = &qword_26AF91190;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSortingComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::MeshSortingComponent>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSortingComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSortingComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v40 = v42;
}

double re::internal::defaultConstruct<re::ecs2::MeshSortingComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::MeshSortingComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshSortingComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshSortingComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshSortingComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSortingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSortingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSortingComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSortingComponent>, this);
}

void *re::ecs2::allocInfo_MeshSortingSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91160))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF912C8, "MeshSortingSystem");
    __cxa_guard_release(&qword_26AF91160);
  }
  return &unk_26AF912C8;
}

void re::ecs2::initInfo_MeshSortingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x410912A8B5CB478CLL;
  v5[1] = "MeshSortingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_MeshSortingSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSortingSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::MeshSortingSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshSortingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshSortingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSortingSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSortingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::MeshSortingSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E70A730;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::MeshSortingSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::MeshSortingSystem>(uint64_t a1)
{
  *(void *)(a1 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E70A730;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::MeshSortingSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshSortingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSortingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSortingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSortingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSortingSystem>, this);
}

__n128 re::ecs2::MeshSortGroupToken::createNewToken@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  uuid_generate_random((unsigned __int8 *)v6);
  *(void *)a2 = (v6[1] + (v6[0] << 6) + (v6[0] >> 2) - 0x61C8864680B583E9) ^ v6[0];
  *(_WORD *)(a2 + 8) = *(_WORD *)a1;
  if (*(unsigned char *)(a1 + 16))
  {
    *(unsigned char *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
    __n128 result = *(__n128 *)(a1 + 32);
    *(__n128 *)(a2 + 32) = result;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    *(unsigned char *)(a2 + 48) = 1;
    __n128 result = *(__n128 *)(a1 + 64);
    *(__n128 *)(a2 + 64) = result;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    *(unsigned char *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
    __n128 result = *(__n128 *)(a1 + 96);
    long long v5 = *(_OWORD *)(a1 + 112);
    *(__n128 *)(a2 + 96) = result;
    *(_OWORD *)(a2 + 112) = v5;
  }
  return result;
}

uint64_t re::ecs2::MeshSortGroupToken::createNewToken@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    *(unsigned char *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
    *(unsigned char *)(a3 + 48) = 0;
    *(unsigned char *)(a3 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    *(void *)a3 = *(void *)(v3 + 296);
    *(_WORD *)(a3 + 8) = *(_WORD *)a2;
    if (*(unsigned char *)(a2 + 16))
    {
      *(unsigned char *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
    }
    if (*(unsigned char *)(a2 + 48))
    {
      *(unsigned char *)(a3 + 48) = 1;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
    }
    if (*(unsigned char *)(a2 + 80))
    {
      *(unsigned char *)(a3 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
      long long v4 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 112) = v4;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Component must be part of an entity", "component->entity() != nullptr", "createNewToken", 86);
    __n128 result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::MeshSortGroupToken::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    *(void *)__n128 result = *(void *)a2;
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    int v2 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned char *)(result + 16)) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = v2 == 0;
    }
    if (!v3)
    {
      if (*(unsigned char *)(result + 16)) {
        BOOL v4 = v2 == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4)
      {
        *(unsigned char *)(result + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
      }
      else
      {
        if (!*(unsigned char *)(result + 16) && *(unsigned char *)(a2 + 16)) {
          *(unsigned char *)(result + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
        }
        *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
      }
    }
    if (*(unsigned char *)(result + 48)) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = *(unsigned char *)(a2 + 48) == 0;
    }
    if (!v5)
    {
      if (!*(unsigned char *)(result + 48) || *(unsigned char *)(a2 + 48))
      {
        if (!*(unsigned char *)(result + 48) && *(unsigned char *)(a2 + 48)) {
          *(unsigned char *)(result + 48) = 1;
        }
        *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 64);
      }
      else
      {
        *(unsigned char *)(result + 48) = 0;
      }
    }
    if (*(unsigned char *)(result + 80) || *(unsigned char *)(a2 + 80))
    {
      if (!*(unsigned char *)(result + 80) || *(unsigned char *)(a2 + 80))
      {
        if (!*(unsigned char *)(result + 80) && *(unsigned char *)(a2 + 80)) {
          *(unsigned char *)(result + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
        }
        long long v6 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(result + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(result + 112) = v6;
      }
      else
      {
        *(unsigned char *)(result + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
      }
    }
    *(void *)a2 = 0;
    *(_WORD *)(a2 + 8) = 0;
    if (*(unsigned char *)(a2 + 16)) {
      *(unsigned char *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
    }
    if (*(unsigned char *)(a2 + 48)) {
      *(unsigned char *)(a2 + 48) = 0;
    }
    if (*(unsigned char *)(a2 + 80)) {
      *(unsigned char *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    }
  }
  return result;
}

uint64_t re::ecs2::MeshSortingSystem::willAddSystemToECSService(re::ecs2::MeshSortingSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v2);
  return re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
}

double re::ecs2::MeshSortingSystem::willRemoveSystemFromECSService(re::ecs2::MeshSortingSystem *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::MeshSortingSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v388 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 104);
  if (!v3 || (*(unsigned char *)(v3 + 424) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      BOOL v5 = *(re::ecs2::RenderingSubsystem ***)a2;
      uint64_t v6 = *(void *)a2 + 8 * v4;
      uint64_t v7 = &off_268773000;
      int32x4_t v326 = vdupq_n_s32(0x7F800000u);
      uint64_t v321 = v6;
      do
      {
        long long v375 = *v5;
        uint64_t v8 = (re::ecs2::RenderingSubsystem *)((char *)v375 + 200);
        uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v375 + 200), (const re::ecs2::ComponentTypeBase *)v7[266]);
        if (v9)
        {
          float32x4_t v327 = *(uint64_t **)(v9 + 40);
          uint64_t v330 = *(void *)(v9 + 24);
        }
        else
        {
          float32x4_t v327 = 0;
          uint64_t v330 = 0;
        }
        uint64_t v10 = re::ecs2::SceneComponentTable::get(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v10)
        {
          unint64_t v325 = *(re::ecs2::HierarchicalFadeComponent ***)(v10 + 40);
          uint64_t v328 = *(void *)(v10 + 24);
        }
        else
        {
          unint64_t v325 = 0;
          uint64_t v328 = 0;
        }
        uint64_t v11 = re::ecs2::SceneComponentTable::get(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v11)
        {
          uint64_t v324 = *(uint64_t **)(v11 + 40);
          uint64_t v13 = *(void *)(v11 + 24);
        }
        else
        {
          uint64_t v324 = 0;
          uint64_t v13 = 0;
        }
        if (v330 || v328 || v13)
        {
          uint64_t v14 = *(void *)(v2 + 112);
          if (!v14)
          {
            re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 328);
            _os_crash();
            __break(1u);
          }
          uint64_t v322 = v13;
          uint64_t v323 = v5;
          long long v374 = (re::RenderFrame *)re::RenderFrameBox::get(*(void *)(v14 + 104) + 344, 0xFFFFFFFFFFFFFFFuLL);
          signed int v15 = (re::Allocator *)*((void *)v374 + 47);
          long long v373 = v15;
          uint64_t v372 = (*(uint64_t (**)(void))(**(void **)(v2 + 136) + 24))(*(void *)(v2 + 136));
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v372 + 16))(v372);
          int v17 = *(_DWORD *)(v16 + 124);
          if (!v17) {
            int v17 = *(_DWORD *)(v16 + 16);
          }
          unsigned int v370 = 0;
          long long v368 = 0u;
          long long v369 = 0u;
          uint64_t v371 = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v368, (uint64_t)v15, v17 + 1);
          unsigned int v366 = 0;
          long long v364 = 0u;
          long long v365 = 0u;
          uint64_t v367 = 0x7FFFFFFFLL;
          float32x4_t v339 = v15;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v364, (uint64_t)v15, 3);
          re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v363);
          int v361 = 0;
          memset(v360, 0, sizeof(v360));
          uint64_t v362 = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v360, (uint64_t)v363, 3);
          uint64_t v18 = v327;
          if (v330)
          {
            while (1)
            {
              uint64_t v19 = *v18;
              uint64_t v21 = *v18 + 176;
              uint64_t v20 = *(void *)v21;
              v379.i64[0] = *v18;
              BOOL v122 = v20 == 0;
              uint64_t v22 = 32;
              if (v122) {
                uint64_t v21 = v19 + 32;
              }
              else {
                uint64_t v22 = 176;
              }
              if (*(unsigned char *)(v21 + 9) && *(unsigned char *)(v21 + 8) != 5) {
                break;
              }
LABEL_53:
              if (++v18 == &v327[v330])
              {
                int v44 = v373;
                goto LABEL_56;
              }
            }
            unint64_t v23 = *(void *)(v19 + v22);
            unint64_t v24 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
            unint64_t v25 = v24 ^ (v24 >> 31);
            if ((void)v364)
            {
              unint64_t v26 = v25 % DWORD2(v365);
              uint64_t v27 = *((void *)&v364 + 1);
              uint64_t v28 = *(unsigned int *)(*((void *)&v364 + 1) + 4 * v26);
              if (v28 != 0x7FFFFFFF)
              {
                while (*(void *)(v365 + (v28 << 6) + 16) != v23)
                {
                  uint64_t v28 = *(_DWORD *)(v365 + (v28 << 6) + 8) & 0x7FFFFFFF;
                  if (v28 == 0x7FFFFFFF) {
                    goto LABEL_30;
                  }
                }
                re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(v365 + (v28 << 6) + 24), &v379);
                goto LABEL_53;
              }
LABEL_30:
              memset(&v382[8], 0, 20);
              *(void *)&v382[32] = 0;
              *(void *)uint64_t v382 = v339;
              re::DynamicArray<float *>::setCapacity(v382, 0);
              ++*(_DWORD *)&v382[24];
              re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v382, &v379);
              unint64_t v29 = v26;
              uint64_t v30 = *(unsigned int *)(v27 + 4 * v26);
              if (v30 != 0x7FFFFFFF)
              {
                while (*(void *)(v365 + (v30 << 6) + 16) != v23)
                {
                  uint64_t v30 = *(_DWORD *)(v365 + (v30 << 6) + 8) & 0x7FFFFFFF;
                  if (v30 == 0x7FFFFFFF) {
                    goto LABEL_35;
                  }
                }
                goto LABEL_50;
              }
            }
            else
            {
              memset(&v382[8], 0, 20);
              *(void *)&v382[32] = 0;
              *(void *)uint64_t v382 = v339;
              re::DynamicArray<float *>::setCapacity(v382, 0);
              ++*(_DWORD *)&v382[24];
              re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v382, &v379);
              unint64_t v29 = 0;
            }
LABEL_35:
            uint64_t v31 = v367;
            if (v367 == 0x7FFFFFFF)
            {
              uint64_t v31 = v366;
              unsigned int v32 = v366;
              if (v366 == DWORD2(v365))
              {
                re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v364, 2 * HIDWORD(v365));
                unsigned int v32 = v366;
                unint64_t v29 = v25 % DWORD2(v365);
              }
              unsigned int v366 = v32 + 1;
              uint64_t v33 = v365;
              int v34 = *(_DWORD *)(v365 + (v31 << 6) + 8);
            }
            else
            {
              uint64_t v33 = v365;
              int v34 = *(_DWORD *)(v365 + ((unint64_t)v367 << 6) + 8);
              LODWORD(v367) = v34 & 0x7FFFFFFF;
            }
            uint64_t v35 = v33 + (v31 << 6);
            *(_DWORD *)(v35 + 8) = v34 | 0x80000000;
            uint64_t v36 = *((void *)&v364 + 1);
            *(_DWORD *)(v35 + 8) = *(_DWORD *)(*((void *)&v364 + 1) + 4 * v29) | 0x80000000;
            *(void *)uint64_t v35 = v25;
            *(void *)(v35 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v23;
            *(void *)(v35 + 24) = 0;
            double v37 = (void *)(v35 + 24);
            *(void *)(v35 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
            __n128 v38 = (void **)(v35 + 56);
            *(void *)(v35 + 32) = 0;
            *(void *)(v35 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
            *(_DWORD *)(v35 + 48) = 0;
            if (*(void *)v382)
            {
              unint64_t v39 = *(void *)&v382[16];
              *double v37 = *(void *)v382;
              re::DynamicArray<float *>::setCapacity(v37, v39);
              unint64_t v41 = *(void *)(v35 + 40);
              long long v40 = (unint64_t *)(v35 + 40);
              ++*((_DWORD *)v40 + 2);
              if (v39 >= v41)
              {
                re::DynamicArray<float *>::setCapacity(v37, v39);
                unint64_t v42 = *v40;
                uint64_t v43 = *(void *)&v382[32];
                if (*v40)
                {
                  memmove(*v38, *(const void **)&v382[32], 8 * v42);
                  unint64_t v42 = *v40;
                }
                memcpy((char *)*v38 + 8 * v42, (const void *)(v43 + 8 * v42), 8 * v39 - 8 * v42);
              }
              else if (v39)
              {
                memmove(*v38, *(const void **)&v382[32], 8 * v39);
              }
              *long long v40 = v39;
            }
            *(_DWORD *)(v36 + 4 * v29) = v31;
            ++HIDWORD(v365);
            ++HIDWORD(v367);
            uint64_t v2 = a1;
LABEL_50:
            if (*(void *)v382 && *(void *)&v382[32]) {
              (*(void (**)(void))(**(void **)v382 + 40))();
            }
            goto LABEL_53;
          }
          int v44 = v339;
LABEL_56:
          v356[1] = 0;
          unint64_t v357 = 0;
          int v358 = 0;
          uint64_t v359 = 0;
          uint64_t v340 = (uint64_t)v44;
          v356[0] = v44;
          re::DynamicArray<float *>::setCapacity(v356, 0);
          ++v358;
          unsigned int v45 = v366;
          if (v366)
          {
            uint64_t v46 = 0;
            uint64_t v47 = (int *)(v365 + 8);
            while (1)
            {
              int v48 = *v47;
              v47 += 16;
              if (v48 < 0) {
                break;
              }
              if (v366 == ++v46)
              {
                LODWORD(v46) = v366;
                break;
              }
            }
          }
          else
          {
            LODWORD(v46) = 0;
          }
          if (v366 != v46)
          {
            uint64_t v49 = v46;
            uint64_t v50 = v365;
            do
            {
              uint64_t v51 = v50 + (v49 << 6);
              uint64_t v52 = *(void *)(v51 + 40);
              if (v52)
              {
                uint64_t v53 = *(uint64_t **)(v51 + 56);
                uint64_t v54 = 8 * v52;
                do
                {
                  uint64_t v55 = *v53++;
                  *(void *)uint64_t v382 = v55;
                  re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v356, v382);
                  v54 -= 8;
                }
                while (v54);
              }
              uint64_t v56 = v359;
              unint64_t v57 = v357;
              unint64_t v58 = 126 - 2 * __clz(v357);
              if (v357) {
                uint64_t v59 = v58;
              }
              else {
                uint64_t v59 = 0;
              }
              std::__introsort<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **,false>(v359, (uint64_t *)(v359 + 8 * v357), v59, 1);
              if (v57)
              {
                char v60 = 0;
                int v61 = *(_DWORD *)(*(void *)v56 + 160);
                uint64_t v62 = 8 * v57;
                do
                {
                  uint64_t v64 = *(void *)v56;
                  v56 += 8;
                  uint64_t v63 = v64;
                  int v65 = *(_DWORD *)(v64 + 160);
                  if (v61 != v65) {
                    ++v60;
                  }
                  *(unsigned char *)(v63 + 40ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v60;
                  int v61 = v65;
                  v62 -= 8;
                }
                while (v62);
              }
              unint64_t v357 = 0;
              ++v358;
              if (v45 <= (int)v46 + 1) {
                unsigned int v66 = v46 + 1;
              }
              else {
                unsigned int v66 = v45;
              }
              while (1)
              {
                uint64_t v49 = (v46 + 1);
                if (v66 - 1 == v46) {
                  break;
                }
                LODWORD(v46) = v46 + 1;
                unsigned int v67 = v49;
                if ((*(_DWORD *)(v50 + (v49 << 6) + 8) & 0x80000000) != 0) {
                  goto LABEL_82;
                }
              }
              unsigned int v67 = v66;
LABEL_82:
              LODWORD(v46) = v67;
            }
            while (v45 != v67);
          }
          uint64_t v68 = *(void *)(v2 + 160);
          if (v68)
          {
            uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)v68 + 16))(v68);
            long long v353 = 0u;
            long long v354 = 0u;
            LODWORD(v355) = 0;
            *(void *)((char *)&v355 + 4) = 0x7FFFFFFFLL;
            if (*(void *)v69)
            {
              uint64_t v70 = v69;
              if (*(_DWORD *)(v69 + 28) <= 3u) {
                signed int v71 = 3;
              }
              else {
                signed int v71 = *(_DWORD *)(v69 + 28);
              }
              re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v353, *(void *)v69, v71);
              unsigned int v72 = DWORD2(v354);
              if (HIDWORD(v354))
              {
                if (DWORD2(v354)) {
                  memset_pattern16(*((void **)&v353 + 1), &unk_2343655D0, 4 * DWORD2(v354));
                }
                if (v355)
                {
                  uint64_t v73 = 0;
                  uint64_t v74 = 48 * v355;
                  do
                  {
                    int v75 = *(_DWORD *)(v354 + v73 + 8);
                    if (v75 < 0) {
                      *(_DWORD *)(v354 + v73 + 8) = v75 & 0x7FFFFFFF;
                    }
                    v73 += 48;
                  }
                  while (v74 != v73);
                }
                *(void *)&long long v355 = 0x7FFFFFFF00000000;
                HIDWORD(v354) = 0;
                unsigned int v72 = DWORD2(v354);
                ++DWORD2(v355);
              }
              unsigned int v76 = *(_DWORD *)(v70 + 28);
              if (v72 < v76) {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)&v353, v76);
              }
              unint64_t v77 = *(unsigned int *)(v70 + 32);
              if (v77)
              {
                uint64_t v78 = 0;
                for (unint64_t i = 0; i < v77; ++i)
                {
                  uint64_t v80 = *(void *)(v70 + 16);
                  float32x4_t v81 = (uint64_t *)(v80 + v78);
                  if ((*(_DWORD *)(v80 + v78 + 8) & 0x80000000) != 0)
                  {
                    unint64_t v82 = *v81;
                    uint64_t v83 = DWORD1(v355);
                    unint64_t v84 = *v81 % (unint64_t)DWORD2(v354);
                    if (DWORD1(v355) == 0x7FFFFFFF)
                    {
                      uint64_t v83 = v355;
                      int v85 = v355;
                      if (v355 == DWORD2(v354))
                      {
                        re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)&v353, 2 * HIDWORD(v354));
                        int v85 = v355;
                        unint64_t v84 = v82 % DWORD2(v354);
                      }
                      LODWORD(v355) = v85 + 1;
                      uint64_t v86 = v354;
                      int v87 = *(_DWORD *)(v354 + 48 * v83 + 8);
                    }
                    else
                    {
                      uint64_t v86 = v354;
                      int v87 = *(_DWORD *)(v354 + 48 * DWORD1(v355) + 8);
                      DWORD1(v355) = v87 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v86 + 48 * v83 + 8) = v87 | 0x80000000;
                    *(_DWORD *)(v354 + 48 * v83 + 8) = *(_DWORD *)(v354 + 48 * v83 + 8) & 0x80000000 | *(_DWORD *)(*((void *)&v353 + 1) + 4 * v84);
                    *(void *)(v354 + 48 * v83) = v82;
                    *(void *)(v354 + 48 * v83 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v81[2];
                    uint64_t v88 = v354;
                    uint64_t v89 = v354 + 48 * v83;
                    *(_OWORD *)(v89 + 24) = *(_OWORD *)(v81 + 3);
                    int v90 = *(unsigned __int8 *)(v80 + v78 + 40);
                    *(unsigned char *)(v89 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v90;
                    if (v90) {
                      *(_DWORD *)(v88 + 48 * v83 + 44) = *(_DWORD *)(v80 + v78 + 44);
                    }
                    *(_DWORD *)(*((void *)&v353 + 1) + 4 * v84) = v83;
                    ++HIDWORD(v354);
                    unint64_t v77 = *(unsigned int *)(v70 + 32);
                    uint64_t v2 = a1;
                  }
                  v78 += 48;
                }
              }
            }
          }
          else
          {
            long long v354 = 0u;
            long long v355 = 0u;
            long long v353 = 0u;
            DWORD1(v355) = 0x7FFFFFFF;
          }
          uint64_t v352 = 0;
          uint64_t v91 = (*(uint64_t (**)(void))(**(void **)(v2 + 40) + 32))(*(void *)(v2 + 40));
          uint64_t v92 = re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v91);
          uint64_t v352 = v92;
          if (v92)
          {
            uint64_t v93 = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 16))(v92);
            *(_OWORD *)float32x4_t v349 = 0u;
            long long v350 = 0u;
            LODWORD(v351) = 0;
            *(void *)((char *)&v351 + 4) = 0x7FFFFFFFLL;
            if (*(void *)v93)
            {
              uint64_t v94 = v93;
              if (*(_DWORD *)(v93 + 28) <= 3u) {
                signed int v95 = 3;
              }
              else {
                signed int v95 = *(_DWORD *)(v93 + 28);
              }
              re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v349, *(void *)v93, v95);
              unsigned int v96 = DWORD2(v350);
              if (HIDWORD(v350))
              {
                if (DWORD2(v350)) {
                  memset_pattern16(v349[1], &unk_2343655D0, 4 * DWORD2(v350));
                }
                if (v351)
                {
                  uint64_t v97 = 0;
                  uint64_t v98 = 40 * v351;
                  do
                  {
                    int v99 = *(_DWORD *)(v350 + v97 + 8);
                    if (v99 < 0) {
                      *(_DWORD *)(v350 + v97 + 8) = v99 & 0x7FFFFFFF;
                    }
                    v97 += 40;
                  }
                  while (v98 != v97);
                }
                LODWORD(v351) = 0;
                HIDWORD(v35ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
                unsigned int v96 = DWORD2(v350);
                *(void *)((char *)&v351 + 4) = __PAIR64__(DWORD2(v351), 0x7FFFFFFF) + 0x100000000;
              }
              unsigned int v100 = *(_DWORD *)(v94 + 28);
              if (v96 < v100) {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v349, v100);
              }
              unint64_t v101 = *(unsigned int *)(v94 + 32);
              if (v101)
              {
                uint64_t v102 = 0;
                for (unint64_t j = 0; j < v101; ++j)
                {
                  long long v104 = (uint64_t *)(*(void *)(v94 + 16) + v102);
                  if ((v104[1] & 0x80000000) != 0)
                  {
                    unint64_t v105 = *v104;
                    uint64_t v106 = DWORD1(v351);
                    unint64_t v107 = *v104 % (unint64_t)DWORD2(v350);
                    if (DWORD1(v351) == 0x7FFFFFFF)
                    {
                      uint64_t v106 = v351;
                      int v108 = v351;
                      if (v351 == DWORD2(v350))
                      {
                        re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v349, 2 * HIDWORD(v350));
                        int v108 = v351;
                        unint64_t v107 = v105 % DWORD2(v350);
                      }
                      LODWORD(v351) = v108 + 1;
                      uint64_t v109 = v350;
                      int v110 = *(_DWORD *)(v350 + 40 * v106 + 8);
                    }
                    else
                    {
                      uint64_t v109 = v350;
                      int v110 = *(_DWORD *)(v350 + 40 * DWORD1(v351) + 8);
                      DWORD1(v351) = v110 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v109 + 40 * v106 + 8) = v110 | 0x80000000;
                    *(_DWORD *)(v350 + 40 * v106 + 8) = *(_DWORD *)(v350 + 40 * v106 + 8) & 0x80000000 | *((_DWORD *)v349[1] + v107);
                    *(void *)(v350 + 40 * v106) = v105;
                    *(void *)(v350 + 40 * v106 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v104[2];
                    *(_OWORD *)(v350 + 40 * v106 + 24) = *(_OWORD *)(v104 + 3);
                    *((_DWORD *)v349[1] + v107) = v106;
                    ++HIDWORD(v350);
                    unint64_t v101 = *(unsigned int *)(v94 + 32);
                  }
                  v102 += 40;
                }
              }
            }
          }
          else
          {
            long long v350 = 0u;
            long long v351 = 0u;
            *(_OWORD *)float32x4_t v349 = 0u;
            DWORD1(v351) = 0x7FFFFFFF;
          }
          uint64_t v348 = (*(uint64_t (**)(void))(**(void **)(v2 + 144) + 16))(*(void *)(v2 + 144));
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v375, 0, (re::DynamicString **)v374, v347);
          __int16 v112 = v327;
          float32x4_t v113 = &v327[v330];
          if (v330)
          {
            do
            {
              uint64_t v114 = *v112;
              uint64_t v115 = 176;
              if (*(void *)(*v112 + 176))
              {
                uint64_t v116 = *v112 + 176;
              }
              else
              {
                uint64_t v115 = 32;
                uint64_t v116 = *v112 + 32;
              }
              unint64_t v378 = *(void *)(v114 + v115);
              int v117 = *(unsigned __int8 *)(v116 + 8);
              int v118 = *(unsigned __int8 *)(v116 + 9);
              BOOL v119 = *(unsigned char *)(v116 + 9) != 0;
              uint64_t v120 = *(void *)(*(void *)(v2 + 112) + 88);
              if (v120)
              {
                v379.i8[0] = 0;
                *(void *)uint64_t v382 = 0xF2997E03A38ACEACLL;
                *(void *)&v382[8] = "meshsorting:enableDepthBias";
                int v121 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v120, v382, &v379);
                re::StringID::destroyString((re::StringID *)v382);
                if (!v121)
                {
                  if (v118) {
                    BOOL v122 = v379.u8[0] == 0;
                  }
                  else {
                    BOOL v122 = 1;
                  }
                  BOOL v119 = !v122;
                }
                float32x4_t v113 = &v327[v330];
              }
              float32x4_t v377 = *(float32x4_t *)(v114 + 304);
              if (v117 != 5) {
                goto LABEL_159;
              }
              if (*(unsigned char *)(v116 + 16)) {
                float32x4_t v377 = *(float32x4_t *)(v116 + 32);
              }
              if (*(unsigned char *)(v116 + 48))
              {
                uint64_t v124 = *(void *)(v116 + 64);
                uint64_t v123 = *(void *)(v116 + 72);
              }
              else
              {
LABEL_159:
                uint64_t v124 = 0;
                uint64_t v123 = 0;
              }
              if (!v378) {
                goto LABEL_212;
              }
              long long v376 = *(re::ecs2::TransformComponent **)(v114 + 16);
              uint64_t QualifiedComponentForSorting = re::ecs2::MeshSortingSystem::getQualifiedComponentForSorting((re::ecs2::TransformComponent *)((char *)v376 + 32), v111);
              if (QualifiedComponentForSorting)
              {
                int32x4_t v126 = (id *)QualifiedComponentForSorting;
                if ((*(uint64_t (**)(uint64_t))(*(void *)QualifiedComponentForSorting + 32))(QualifiedComponentForSorting) != 6)
                {
                  uint64_t v129 = (*((uint64_t (**)(id *))*v126 + 4))(v126);
                  v130.i64[0] = 0x7F0000007FLL;
                  v130.i64[1] = 0x7F0000007FLL;
                  float32x4_t v334 = v130;
                  uint64_t v331 = v123;
                  if (v129 == -1)
                  {
                    id v131 = v126[6];
                    float32x4_t v336 = (float32x4_t)v326;
                    if (v131)
                    {
                      [v131 worldBoundingBox];
                      v132.i32[3] = 0;
                      float32x4_t v336 = vminnmq_f32(v132, (float32x4_t)xmmword_234382180);
                      v133.i32[3] = 0;
                      float32x4_t v128 = vmaxnmq_f32(v133, (float32x4_t)xmmword_234382190);
LABEL_169:
                      float32x4_t v334 = v128;
                    }
                  }
                  else
                  {
                    float32x4_t v336 = (float32x4_t)v326;
                  }
                  (*(void (**)(unsigned char *__return_ptr))(*(void *)v372 + 8))(v382);
                  if (v382[0]) {
                    uint64_t v134 = *(void *)&v382[8];
                  }
                  else {
                    uint64_t v134 = 0;
                  }
                  uint64_t v346 = v134;
                  uint64_t v135 = re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>((uint64_t)&v368, &v346, &v373);
                  uint64_t v136 = *(void *)(v114 + 336);
                  *(void *)uint64_t v382 = *(void *)(v114 + 352);
                  *(void *)&v382[8] = v136;
                  re::DynamicArray<int>::DynamicArray((uint64_t)&v379, v340, (uint64_t)v382);
                  uint64_t v137 = *(void *)(v114 + 376);
                  *(void *)uint64_t v382 = *(void *)(v114 + 392);
                  *(void *)&v382[8] = v137;
                  re::DynamicArray<int>::DynamicArray((uint64_t)v344, v340, (uint64_t)v382);
                  if (v117 != 5 && v119) {
                    int v139 = *(unsigned __int8 *)(v114 + 400);
                  }
                  else {
                    int v139 = *(_DWORD *)(v114 + 160);
                  }
                  unint64_t v343 = *((void *)v376 + 37);
                  unint64_t v140 = v343;
                  *(void *)uint64_t v382 = v378;
                  int v141 = *(_DWORD *)(v114 + 164);
                  *(_DWORD *)&v382[8] = v139;
                  *(_DWORD *)&v382[12] = v141;
                  re::DynamicArray<float>::DynamicArray((uint64_t)&v382[16], (uint64_t *)&v379);
                  re::DynamicArray<float>::DynamicArray((uint64_t)&v383.i64[1], (uint64_t *)v344);
                  unint64_t v143 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (v140 ^ (v140 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v140 ^ (v140 >> 30))) >> 27));
                  unint64_t v144 = v143 ^ (v143 >> 31);
                  if (*(void *)v135)
                  {
                    unint64_t v145 = v144 % *(unsigned int *)(v135 + 24);
                    uint64_t v146 = *(unsigned int *)(*(void *)(v135 + 8) + 4 * v145);
                    if (v146 != 0x7FFFFFFF)
                    {
                      uint64_t v147 = *(void *)(v135 + 16);
                      while (*(void *)(v147 + 120 * v146 + 16) != v140)
                      {
                        LODWORD(v146) = *(_DWORD *)(v147 + 120 * v146 + 8) & 0x7FFFFFFF;
                        if (v146 == 0x7FFFFFFF) {
                          goto LABEL_186;
                        }
                      }
LABEL_187:
                      if (v383.i64[1])
                      {
                        if (v387) {
                          (*(void (**)(__n128))(*(void *)v383.i64[1] + 40))(v142);
                        }
                        uint64_t v387 = 0;
                        uint64_t v384 = 0;
                        uint64_t v385 = 0;
                        v383.i64[1] = 0;
                        ++v386;
                      }
                      if (*(void *)&v382[16] && v383.i64[0]) {
                        (*(void (**)(__n128))(**(void **)&v382[16] + 40))(v142);
                      }
                      uint64_t v148 = *(void *)(v135 + 96);
                      *(void *)&long long v149 = 0x7F0000007FLL;
                      *((void *)&v149 + 1) = 0x7F0000007FLL;
                      *(int32x4_t *)uint64_t v382 = v326;
                      *(_OWORD *)&v382[16] = v149;
                      v382[32] = v117;
                      float32x4_t v383 = v377;
                      uint64_t v384 = v124;
                      uint64_t v385 = v331;
                      LOWORD(v386) = v119;
                      BYTE2(v386) = *(unsigned char *)(v116 + 80);
                      unint64_t v150 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (v378 ^ (v378 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v378 ^ (v378 >> 30))) >> 27));
                      unint64_t v151 = v150 ^ (v150 >> 31);
                      if (v148)
                      {
                        unint64_t v152 = v151 % *(unsigned int *)(v135 + 120);
                        uint64_t v153 = *(unsigned int *)(*(void *)(v135 + 104) + 4 * v152);
                        if (v153 != 0x7FFFFFFF)
                        {
                          uint64_t v154 = *(void *)(v135 + 112);
                          while (*(void *)(v154 + (v153 << 7) + 16) != v378)
                          {
                            uint64_t v153 = *(_DWORD *)(v154 + (v153 << 7) + 8) & 0x7FFFFFFF;
                            if (v153 == 0x7FFFFFFF) {
                              goto LABEL_201;
                            }
                          }
                          unint64_t v156 = v154 + (v153 << 7);
                          goto LABEL_203;
                        }
                      }
                      else
                      {
                        LODWORD(v152) = 0;
                      }
LABEL_201:
                      unsigned int v155 = re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v135 + 96, v152, v151, &v378, v382);
                      ++*(_DWORD *)(v135 + 136);
                      unint64_t v156 = *(void *)(v135 + 112) + ((unint64_t)v155 << 7);
LABEL_203:
                      unint64_t v157 = v156 + 32;
                      *(unsigned char *)(v135 + 192) |= !v119;
                      float32x4_t v158 = *(float32x4_t *)(v156 + 32);
                      float32x4_t v159 = *(float32x4_t *)(v156 + 48);
                      v158.i32[3] = 0;
                      float32x4_t v160 = v336;
                      v160.i32[3] = 0;
                      float32x4_t v161 = vminnmq_f32(v158, v160);
                      v159.i32[3] = 0;
                      float32x4_t v162 = v334;
                      v162.i32[3] = 0;
                      *(float32x4_t *)(v156 + 32) = v161;
                      *(float32x4_t *)(v156 + 48) = vmaxnmq_f32(v159, v162);
                      *(void *)uint64_t v382 = 0;
                      unsigned int v163 = (void *)re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v353, (uint64_t *)&v376);
                      if (v163) {
                        *(void *)uint64_t v382 = *v163;
                      }
                      long long v164 = (void *)re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long long &>((uint64_t)v360, (uint64_t *)&v378, v382);
                      *(unsigned char *)(v157 + 81) |= *v164 != *(void *)v382;
                      if (*(void *)&v344[0])
                      {
                        float32x2_t v111 = v345;
                        if (v345) {
                          (*(void (**)(void))(**(void **)&v344[0] + 40))();
                        }
                      }
                      if (v379.i64[0])
                      {
                        float32x2_t v111 = *(const re::ecs2::EntityComponentCollection **)v381;
                        if (*(void *)v381) {
                          (*(void (**)(void))(*(void *)v379.i64[0] + 40))();
                        }
                      }
                      goto LABEL_211;
                    }
                  }
                  else
                  {
                    LODWORD(v145) = 0;
                  }
LABEL_186:
                  __n128 v142 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v135, v145, v144, &v343, (__n128 *)v382);
                  ++*(_DWORD *)(v135 + 40);
                  goto LABEL_187;
                }
                re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v376, (const re::ecs2::Entity *)1, v382);
                uint64_t v127 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v126 + 4));
                if (v127)
                {
                  uint64_t v331 = v123;
                  re::MeshAsset::aabbFromMesh(v127, (float32x4_t *)v382, (uint64_t)&v379);
                  float32x4_t v336 = v379;
                  float32x4_t v128 = v380;
                  goto LABEL_169;
                }
              }
LABEL_211:
              float32x4_t v113 = &v327[v330];
LABEL_212:
              ++v112;
              uint64_t v2 = a1;
            }
            while (v112 != v113);
          }
          int v165 = v351;
          uint64_t v166 = 0;
          if (v351)
          {
            float32x4_t v167 = (int *)(v350 + 8);
            while (1)
            {
              int v168 = *v167;
              v167 += 10;
              if (v168 < 0) {
                break;
              }
              if (v351 == ++v166)
              {
                LODWORD(v166) = v351;
                break;
              }
            }
          }
          if (v351 != v166)
          {
            uint64_t v169 = v166;
            uint64_t v170 = v350;
            do
            {
              uint64_t v171 = v170 + 40 * v169;
              uint64_t v173 = *(void *)(v171 + 16);
              float32x4_t v172 = (unint64_t *)(v171 + 16);
              if (re::ecs2::MeshSortingSystem::getQualifiedComponentForSorting((re::ecs2::MeshSortingSystem *)(v173 + 32), v111)&& *(unsigned char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v348, *v172))
              {
                (*(void (**)(unsigned char *__return_ptr))(*(void *)v372 + 8))(v382);
                if (v382[0]) {
                  uint64_t v174 = *(void *)&v382[8];
                }
                else {
                  uint64_t v174 = 0;
                }
                v379.i64[0] = v174;
                uint64_t v175 = re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>((uint64_t)&v368, (uint64_t *)&v379, &v373);
                *(void *)&v344[0] = *(void *)(*v172 + 296);
                *(void *)uint64_t v382 = 0;
                *(void *)&v382[8] = 0;
                *(void *)re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v175 + 48, (uint64_t *)v344, v382) = v172[1];
              }
              uint64_t v170 = v350;
              if (v351 <= (int)v166 + 1) {
                int v176 = v166 + 1;
              }
              else {
                int v176 = v351;
              }
              while (1)
              {
                uint64_t v169 = (v166 + 1);
                if (v176 - 1 == v166) {
                  break;
                }
                LODWORD(v166) = v166 + 1;
                int v177 = v169;
                if ((*(_DWORD *)(v350 + 40 * v169 + 8) & 0x80000000) != 0) {
                  goto LABEL_233;
                }
              }
              int v177 = v176;
LABEL_233:
              LODWORD(v166) = v177;
            }
            while (v165 != v177);
          }
          if (v352)
          {
            *(void *)uint64_t v382 = v2;
            *(void *)&v382[8] = &v348;
            *(void *)&v382[16] = &v375;
            *(void *)&v382[24] = &v374;
            *(void *)&v382[32] = v340;
            *(void *)&v382[40] = &v352;
            v383.i64[0] = (uint64_t)&v368;
            v383.i64[1] = (uint64_t)&v372;
            long long v178 = v324;
            if (v322)
            {
              uint64_t v179 = 8 * v322;
              do
              {
                uint64_t v180 = *v178;
                int v181 = *(unsigned __int8 *)(*v178 + 25);
                if (v181 != 1)
                {
                  re::ecs2::MeshSortingSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)const::$_0::operator()((uint64_t)v382, *(void *)(v180 + 16), *(void *)(*(void *)(v180 + 16) + 296), v181, *(unsigned char *)(v180 + 26));
                  if (*(unsigned char *)(v180 + 26))
                  {
                    (*(void (**)(float32x4_t *__return_ptr))(*(void *)v372 + 8))(&v379);
                    if (v379.i8[0]) {
                      uint64_t v182 = v379.i64[1];
                    }
                    else {
                      uint64_t v182 = 0;
                    }
                    *(void *)&v344[0] = v182;
                    uint64_t v183 = re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>((uint64_t)&v368, (uint64_t *)v344, &v373);
                    *(unsigned char *)(v183 + 193) = 1;
                    float32x4_t v379 = 0uLL;
                    *(void *)re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v183 + 48, (uint64_t *)(v180 + 32), &v379) = *(void *)(*(void *)(v180 + 16) + 296);
                  }
                }
                ++v178;
                v179 -= 8;
              }
              while (v179);
            }
            int32x4_t v184 = v325;
            if (v328)
            {
              uint64_t v185 = 8 * v328;
              do
              {
                long long v186 = *v184;
                if (*(unsigned char *)(*((void *)*v184 + 2) + 288))
                {
                  re::ecs2::HierarchicalFadeComponent::getFadeGroupID(*v184, (uint64_t)&v379);
                  if (v379.i8[0]) {
                    re::ecs2::MeshSortingSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)const::$_0::operator()((uint64_t)v382, *((void *)v186 + 2), v379.u64[1], 2, 0);
                  }
                }
                ++v184;
                v185 -= 8;
              }
              while (v185);
            }
          }
          int v187 = v355;
          if (v355)
          {
            uint64_t v188 = 0;
            float32x4_t v189 = (int *)(v354 + 8);
            while (1)
            {
              int v190 = *v189;
              v189 += 12;
              if (v190 < 0) {
                break;
              }
              if (v355 == ++v188)
              {
                LODWORD(v188) = v355;
                break;
              }
            }
          }
          else
          {
            LODWORD(v188) = 0;
          }
          if (v355 != v188)
          {
            uint64_t v191 = v188;
            uint64_t v192 = v354;
            unsigned int v193 = v355;
            do
            {
              uint64_t v194 = v192 + 48 * v191;
              uint64_t v196 = *(void *)(v194 + 24);
              long long v195 = (void *)(v194 + 24);
              if (v196)
              {
                uint64_t v197 = *(void *)(v192 + 48 * v191 + 16);
                (*(void (**)(unsigned char *__return_ptr))(*(void *)v372 + 8))(v382);
                if (v382[0]) {
                  uint64_t v198 = *(void *)&v382[8];
                }
                else {
                  uint64_t v198 = 0;
                }
                v379.i64[0] = v198;
                uint64_t v199 = re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>((uint64_t)&v368, (uint64_t *)&v379, &v373);
                *(void *)&v344[0] = *(void *)(v197 + 296);
                *(void *)uint64_t v382 = 0;
                *(void *)&v382[8] = 0;
                *(void *)(re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v199 + 48, (uint64_t *)v344, v382)+ 8) = *v195;
                unsigned int v193 = v355;
                uint64_t v192 = v354;
              }
              if (v193 <= (int)v188 + 1) {
                unsigned int v200 = v188 + 1;
              }
              else {
                unsigned int v200 = v193;
              }
              while (1)
              {
                uint64_t v191 = (v188 + 1);
                if (v200 - 1 == v188) {
                  break;
                }
                LODWORD(v188) = v188 + 1;
                unsigned int v201 = v191;
                if ((*(_DWORD *)(v192 + 48 * v191 + 8) & 0x80000000) != 0) {
                  goto LABEL_270;
                }
              }
              unsigned int v201 = v200;
LABEL_270:
              LODWORD(v188) = v201;
            }
            while (v187 != v201);
          }
          (*(void (**)(unsigned char *__return_ptr))(*(void *)v352 + 64))(v382);
          int v202 = *(_DWORD *)&v382[32];
          if (*(_DWORD *)&v382[32])
          {
            uint64_t v203 = 0;
            long long v204 = (int *)(*(void *)&v382[16] + 8);
            while (1)
            {
              int v205 = *v204;
              v204 += 6;
              if (v205 < 0) {
                break;
              }
              if (*(unsigned int *)&v382[32] == ++v203)
              {
                LODWORD(v203) = *(_DWORD *)&v382[32];
                break;
              }
            }
          }
          else
          {
            LODWORD(v203) = 0;
          }
          if (*(_DWORD *)&v382[32] != v203)
          {
            uint64_t v206 = v203;
            uint64_t v207 = *(void *)&v382[16];
            do
            {
              uint64_t v208 = *(void *)(v207 + 24 * v206 + 16);
              (*(void (**)(float32x4_t *__return_ptr))(*(void *)v372 + 8))(&v379);
              if (v379.i8[0]) {
                unint64_t v209 = v379.u64[1];
              }
              else {
                unint64_t v209 = 0;
              }
              if ((void)v368)
              {
                unint64_t v210 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v209 ^ (v209 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v209 ^ (v209 >> 30))) >> 27));
                uint64_t v211 = *(unsigned int *)(*((void *)&v368 + 1) + 4 * ((v210 ^ (v210 >> 31)) % DWORD2(v369)));
                if (v211 != 0x7FFFFFFF)
                {
                  uint64_t v212 = v369;
                  while (*(void *)(v369 + 224 * v211 + 16) != v209)
                  {
                    LODWORD(v211) = *(_DWORD *)(v369 + 224 * v211 + 8) & 0x7FFFFFFF;
                    if (v211 == 0x7FFFFFFF) {
                      goto LABEL_298;
                    }
                  }
                  if (*(void *)(v369 + 224 * v211 + 72))
                  {
                    unint64_t v213 = *(void *)(v208 + 296);
                    unint64_t v214 = 0x94D049BB133111EBLL
                         * ((0xBF58476D1CE4E5B9 * (v213 ^ (v213 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                             * (v213 ^ (v213 >> 30))) >> 27));
                    uint64_t v215 = v369 + 224 * v211;
                    unint64_t v216 = (v214 ^ (v214 >> 31)) % *(unsigned int *)(v215 + 96);
                    uint64_t v217 = *(void *)(v215 + 80);
                    uint64_t v218 = *(unsigned int *)(v217 + 4 * v216);
                    if (v218 != 0x7FFFFFFF)
                    {
                      uint64_t v219 = v369 + 224 * v211;
                      uint64_t v222 = *(void *)(v219 + 88);
                      uint64_t v220 = (uint64_t *)(v219 + 88);
                      uint64_t v221 = v222;
                      if (*(void *)(v222 + 40 * v218 + 16) == v213)
                      {
                        *(_DWORD *)(v217 + 4 * v2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(v221 + 40 * v218 + 8) & 0x7FFFFFFF;
LABEL_295:
                        uint64_t v224 = *v220;
                        uint64_t v225 = *v220 + 40 * v218;
                        int v228 = *(_DWORD *)(v225 + 8);
                        float32x4_t v227 = (int *)(v225 + 8);
                        int v226 = v228;
                        if (v228 < 0)
                        {
                          *float32x4_t v227 = v226 & 0x7FFFFFFF;
                          uint64_t v224 = *v220;
                          int v226 = *(_DWORD *)(*v220 + 40 * v218 + 8);
                        }
                        uint64_t v229 = (_DWORD *)(v212 + 224 * v211);
                        *(_DWORD *)(v224 + 40 * v218 + 8) = v229[27] | v226 & 0x80000000;
                        --v229[25];
                        int v230 = v229[28] + 1;
                        v229[27] = v218;
                        v229[28] = v230;
                      }
                      else
                      {
                        while (1)
                        {
                          uint64_t v223 = v218;
                          uint64_t v218 = *(_DWORD *)(v221 + 40 * v218 + 8) & 0x7FFFFFFF;
                          if (v218 == 0x7FFFFFFF) {
                            break;
                          }
                          if (*(void *)(v221 + 40 * v218 + 16) == v213)
                          {
                            *(_DWORD *)(v221 + 40 * v223 + 8) = *(_DWORD *)(v221 + 40 * v223 + 8) & 0x80000000 | *(_DWORD *)(v221 + 40 * v218 + 8) & 0x7FFFFFFF;
                            goto LABEL_295;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_298:
              uint64_t v207 = *(void *)&v382[16];
              if (*(_DWORD *)&v382[32] <= (v203 + 1)) {
                int v231 = v203 + 1;
              }
              else {
                int v231 = *(_DWORD *)&v382[32];
              }
              while (1)
              {
                uint64_t v206 = (v203 + 1);
                if (v231 - 1 == v203) {
                  break;
                }
                LODWORD(v203) = v203 + 1;
                int v232 = v206;
                if ((*(_DWORD *)(*(void *)&v382[16] + 24 * v206 + 8) & 0x80000000) != 0) {
                  goto LABEL_305;
                }
              }
              int v232 = v231;
LABEL_305:
              LODWORD(v203) = v232;
            }
            while (v202 != v232);
          }
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v382);
          unsigned int v329 = v370;
          uint64_t v233 = 0;
          if (v370)
          {
            unint64_t v234 = (int *)(v369 + 8);
            while (1)
            {
              int v235 = *v234;
              v234 += 56;
              if (v235 < 0) {
                break;
              }
              if (v370 == ++v233)
              {
                LODWORD(v233) = v370;
                break;
              }
            }
          }
          unsigned int v236 = v370;
          if (v370 != v233)
          {
            uint64_t v237 = v233;
            uint64_t v238 = v369;
            do
            {
              uint64_t v332 = v238;
              re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v382);
              *(_DWORD *)char v381 = 0;
              float32x4_t v379 = 0u;
              float32x4_t v380 = 0u;
              *(void *)&v381[4] = 0x7FFFFFFFLL;
              re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v379, (uint64_t)v382, 3);
              float v240 = (float32x4_t **)&v327[v330];
              if (v330)
              {
                uint64_t v241 = v332 + 224 * v237;
                float v242 = (void *)(v241 + 72);
                unint64_t v337 = (unsigned int *)(v241 + 96);
                unint64_t v335 = (void *)(v241 + 80);
                unint64_t v341 = (uint64_t *)(v241 + 88);
                for (uint64_t k = (float32x4_t **)v327; k != v240; ++k)
                {
                  float v244 = *k;
                  if ((*k)[1].i8[9] == 5)
                  {
                    unint64_t v378 = *(void *)(v244[1].i64[0] + 296);
                    if (re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v242, (uint64_t *)&v378))
                    {
                      if (*v242)
                      {
                        unint64_t v245 = 0x94D049BB133111EBLL
                             * ((0xBF58476D1CE4E5B9 * (v378 ^ (v378 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                 * (v378 ^ (v378 >> 30))) >> 27));
                        uint64_t v246 = *(unsigned int *)(*v335 + 4 * ((v245 ^ (v245 >> 31)) % *v337));
                        uint64_t v247 = *v341;
                        if (v246 != 0x7FFFFFFF)
                        {
                          while (*(void *)(v247 + 40 * v246 + 16) != v378)
                          {
                            uint64_t v246 = *(_DWORD *)(v247 + 40 * v246 + 8) & 0x7FFFFFFF;
                            if (v246 == 0x7FFFFFFF) {
                              goto LABEL_323;
                            }
                          }
LABEL_324:
                          char v248 = 0;
                          uint64_t v249 = 0;
                          float32x4_t v239 = *(float32x4_t *)(v247 + 40 * v246 + 24);
                          float32x4_t v377 = v239;
                          while (2)
                          {
                            char v250 = v248;
                            uint64_t v251 = (re::ecs2::TransformComponent *)v377.i64[v249];
                            long long v376 = v251;
                            if (v251)
                            {
                              unint64_t v252 = 0x94D049BB133111EBLL
                                   * ((0xBF58476D1CE4E5B9 * ((unint64_t)v251 ^ ((unint64_t)v251 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v251 ^ ((unint64_t)v251 >> 30))) >> 27));
                              unint64_t v253 = v252 ^ (v252 >> 31);
                              memset(v344, 0, sizeof(v344));
                              if (!v379.i64[0])
                              {
                                LODWORD(v254) = 0;
                                goto LABEL_336;
                              }
                              unint64_t v254 = v253 % v380.u32[2];
                              uint64_t v255 = *(unsigned int *)(v379.i64[1] + 4 * v254);
                              if (v255 == 0x7FFFFFFF) {
                                goto LABEL_336;
                              }
                              uint64_t v256 = v380.i64[0];
                              if (*(re::ecs2::TransformComponent **)(v380.i64[0] + (v255 << 6) + 16) != v251)
                              {
                                while (1)
                                {
                                  uint64_t v255 = *(_DWORD *)(v380.i64[0] + (v255 << 6) + 8) & 0x7FFFFFFF;
                                  if (v255 == 0x7FFFFFFF) {
                                    break;
                                  }
                                  if (*(re::ecs2::TransformComponent **)(v380.i64[0] + (v255 << 6) + 16) == v251) {
                                    goto LABEL_331;
                                  }
                                }
LABEL_336:
                                re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v379, v254, v253, &v376, (uint64_t)v344);
                                ++*(_DWORD *)&v381[8];
                                if (v379.i64[0])
                                {
LABEL_331:
                                  uint64_t v256 = v380.i64[0];
                                  uint64_t v255 = *(unsigned int *)(v379.i64[1] + 4 * (v253 % v380.u32[2]));
                                  if (v255 == 0x7FFFFFFF) {
                                    goto LABEL_338;
                                  }
                                  while (*(re::ecs2::TransformComponent **)(v380.i64[0] + (v255 << 6) + 16) != v251)
                                  {
                                    uint64_t v255 = *(_DWORD *)(v380.i64[0] + (v255 << 6) + 8) & 0x7FFFFFFF;
                                    if (v255 == 0x7FFFFFFF) {
                                      goto LABEL_338;
                                    }
                                  }
                                }
                                else
                                {
                                  uint64_t v256 = v380.i64[0];
LABEL_338:
                                  uint64_t v255 = 0x7FFFFFFFLL;
                                }
                              }
                              uint64_t v257 = (float32x4_t *)(v256 + (v255 << 6));
                              float32x4_t v239 = vaddq_f32(v244[19], v257[3]);
                              v257[3] = v239;
                              ++v257[2].i64[0];
                            }
                            char v248 = 1;
                            uint64_t v249 = 1;
                            if (v250) {
                              goto LABEL_341;
                            }
                            continue;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v247 = *v341;
                      }
LABEL_323:
                      LODWORD(v246) = 0x7FFFFFFF;
                      goto LABEL_324;
                    }
LABEL_341:
                    float v240 = (float32x4_t **)&v327[v330];
                  }
                }
              }
              uint64_t v258 = v332 + 224 * v237;
              unsigned int v261 = *(_DWORD *)(v258 + 200);
              uint64_t v259 = (int *)(v258 + 200);
              uint64_t v260 = v261;
              if (v261)
              {
                uint64_t v262 = 0;
                int32x4_t v263 = (int *)(*(void *)(v332 + 224 * v237 + 184) + 8);
                while (1)
                {
                  int v264 = *v263;
                  v263 += 44;
                  if (v264 < 0) {
                    break;
                  }
                  if (v260 == ++v262)
                  {
                    LODWORD(v2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 62) = v260;
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 62) = 0;
              }
              if (v260 != v262)
              {
                uint64_t v265 = v262;
                uint64_t v266 = v332 + 224 * v237;
                uint64_t v269 = *(void *)(v266 + 184);
                uint64_t v267 = (uint64_t *)(v266 + 184);
                uint64_t v268 = v269;
                uint64_t v270 = v379.i64[0];
                do
                {
                  float v271 = (float32x4_t *)(v268 + 176 * v265);
                  if (!v270
                    || (unint64_t v272 = v271[1].u64[0],
                        unint64_t v273 = 0x94D049BB133111EBLL
                             * ((0xBF58476D1CE4E5B9 * (v272 ^ (v272 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                 * (v272 ^ (v272 >> 30))) >> 27)),
                        uint64_t v274 = *(unsigned int *)(v379.i64[1] + 4 * ((v273 ^ (v273 >> 31)) % v380.u32[2])),
                        v274 == 0x7FFFFFFF))
                  {
LABEL_355:
                    float32x4_t v239 = v271[2];
                    float32x4_t v275 = v271[3];
                    uint32x4_t v276 = (uint32x4_t)vcgtq_f32(v239, v275);
                    v276.i32[3] = v276.i32[2];
                    if ((vmaxvq_u32(v276) & 0x80000000) != 0)
                    {
                      uint64_t v280 = 0;
                      uint64_t v279 = 0;
                    }
                    else
                    {
                      float32x4_t v277 = vaddq_f32(v239, v275);
                      v278.i64[0] = 0x3F0000003F000000;
                      v278.i64[1] = 0x3F0000003F000000;
                      float32x4_t v239 = vmulq_f32(v277, v278);
                      uint64_t v279 = v239.i64[1];
                      uint64_t v280 = v239.i64[0];
                    }
                    uint64_t v281 = v268 + 176 * v265;
                    *(void *)(v281 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v280;
                    *(void *)(v281 + 88) = v279;
                  }
                  else
                  {
                    while (*(void *)(v380.i64[0] + (v274 << 6) + 16) != v272)
                    {
                      uint64_t v274 = *(_DWORD *)(v380.i64[0] + (v274 << 6) + 8) & 0x7FFFFFFF;
                      if (v274 == 0x7FFFFFFF) {
                        goto LABEL_355;
                      }
                    }
                    float32x4_t v282 = (float32x4_t *)(v380.i64[0] + (v274 << 6));
                    v239.f32[0] = (float)v282[2].u64[0];
                    float32x4_t v239 = vdivq_f32(v282[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v239.f32, 0));
                    float v283 = (float32x4_t *)(v268 + 176 * v265);
                    v283[5] = v239;
                    v283[6].i16[0] = v282[2].i64[0];
                  }
                  uint64_t v268 = *v267;
                  if (*v259 <= (v262 + 1)) {
                    int v284 = v262 + 1;
                  }
                  else {
                    int v284 = *v259;
                  }
                  while (1)
                  {
                    uint64_t v265 = (v262 + 1);
                    if (v284 - 1 == v262) {
                      break;
                    }
                    LODWORD(v2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 62) = v262 + 1;
                    int v285 = v265;
                    if ((*(_DWORD *)(v268 + 176 * v265 + 8) & 0x80000000) != 0) {
                      goto LABEL_367;
                    }
                  }
                  int v285 = v284;
LABEL_367:
                  LODWORD(v2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 62) = v285;
                }
                while (v260 != v285);
              }
              re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v379);
              re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v382);
              long long v286 = &v327[v330];
              if (v330)
              {
                uint64_t v287 = v332 + 224 * v237;
                long long v288 = (void *)(v287 + 72);
                uint64_t v338 = v287 + 168;
                uint64_t v289 = (unsigned int *)(v287 + 96);
                unint64_t v290 = (void *)(v287 + 80);
                float32x4_t v342 = (uint64_t *)(v287 + 88);
                float v291 = v327;
                do
                {
                  uint64_t v292 = *v291;
                  if (*(unsigned char *)(*v291 + 416))
                  {
                    if (*v288)
                    {
                      unint64_t v293 = *(void *)(*(void *)(v292 + 16) + 296);
                      unint64_t v294 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (v293 ^ (v293 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v293 ^ (v293 >> 30))) >> 27));
                      uint64_t v295 = *(unsigned int *)(*v290 + 4 * ((v294 ^ (v294 >> 31)) % *v289));
                      if (v295 != 0x7FFFFFFF)
                      {
                        uint64_t v296 = *v342;
                        while (*(void *)(v296 + 40 * v295 + 16) != v293)
                        {
                          int v297 = *(_DWORD *)(v296 + 40 * v295 + 8);
                          uint64_t v295 = v297 & 0x7FFFFFFF;
                          if ((v297 & 0x7FFFFFFF) == 0x7FFFFFFF) {
                            goto LABEL_385;
                          }
                        }
                        unint64_t v298 = *(void *)(v296 + 40 * v295 + 24);
                        if (v298)
                        {
                          uint64_t v299 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v338, v298);
                          long long v286 = &v327[v330];
                          if (v299)
                          {
                            if (!*(unsigned char *)(v299 + 80))
                            {
                              long long v301 = *(_OWORD *)(v292 + 448);
                              *(_OWORD *)&v382[15] = *(_OWORD *)(v292 + 432);
                              long long v300 = *(_OWORD *)&v382[15];
                              *(_OWORD *)&v382[31] = v301;
                              *(unsigned char *)(v299 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
                              *(_OWORD *)(v299 + 96) = v300;
                              *(_OWORD *)(v299 + 112) = v301;
                              *(void *)(v299 + 128) = v293;
                            }
                          }
                        }
                        unint64_t v302 = *(void *)(v296 + 40 * v295 + 32);
                        if (v302)
                        {
                          uint64_t v303 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v338, v302);
                          long long v286 = &v327[v330];
                          if (v303)
                          {
                            if (!*(unsigned char *)(v303 + 80))
                            {
                              uint64_t v304 = *(void *)(*(void *)(v292 + 16) + 296);
                              long long v306 = *(_OWORD *)(v292 + 448);
                              *(_OWORD *)&v382[15] = *(_OWORD *)(v292 + 432);
                              long long v305 = *(_OWORD *)&v382[15];
                              *(_OWORD *)&v382[31] = v306;
                              *(unsigned char *)(v303 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
                              *(_OWORD *)(v303 + 96) = v305;
                              *(_OWORD *)(v303 + 112) = v306;
                              *(void *)(v303 + 128) = v304;
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_385:
                  ++v291;
                }
                while (v291 != v286);
              }
              unsigned int v236 = v370;
              uint64_t v238 = v369;
              if (v370 <= (int)v233 + 1) {
                unsigned int v307 = v233 + 1;
              }
              else {
                unsigned int v307 = v370;
              }
              uint64_t v2 = a1;
              while (1)
              {
                uint64_t v237 = (v233 + 1);
                if (v307 - 1 == v233) {
                  break;
                }
                LODWORD(v233) = v233 + 1;
                unsigned int v308 = v237;
                if ((*(_DWORD *)(v369 + 224 * v237 + 8) & 0x80000000) != 0) {
                  goto LABEL_394;
                }
              }
              unsigned int v308 = v307;
LABEL_394:
              LODWORD(v233) = v308;
            }
            while (v329 != v308);
          }
          uint64_t v309 = 0;
          if (v236)
          {
            float32x4_t v310 = (int *)(v369 + 8);
            while (1)
            {
              int v311 = *v310;
              v310 += 56;
              if (v311 < 0) {
                break;
              }
              if (v236 == ++v309)
              {
                LODWORD(v309) = v236;
                break;
              }
            }
          }
          if (v236 != v309)
          {
            float32x4_t v312 = (re::RenderFrame *)((char *)v374 + 264);
            uint64_t v313 = v309;
            uint64_t v314 = v369;
            unsigned int v315 = v236;
            do
            {
              uint64_t v316 = v314 + 224 * v313;
              if (*(_DWORD *)(v316 + 148) || *(_DWORD *)(v314 + 224 * v313 + 196))
              {
                re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v375, *(const re::ecs2::Scene **)(v316 + 16), (re::DynamicString **)v374, v382);
                v379.i64[0] = *(void *)v382 >> 1;
                uint64_t v317 = **(void **)(re::RenderFrameData::stream(v312, (const re::WeakStringID *)&v379) + 48);
                (*(void (**)(void))(v317 + 976))();
                re::StringID::destroyString((re::StringID *)v382);
                unsigned int v315 = v370;
                uint64_t v314 = v369;
              }
              if (v315 <= (int)v309 + 1) {
                unsigned int v318 = v309 + 1;
              }
              else {
                unsigned int v318 = v315;
              }
              while (1)
              {
                uint64_t v313 = (v309 + 1);
                if (v318 - 1 == v309) {
                  break;
                }
                LODWORD(v309) = v309 + 1;
                unsigned int v319 = v313;
                if ((*(_DWORD *)(v314 + 224 * v313 + 8) & 0x80000000) != 0) {
                  goto LABEL_412;
                }
              }
              unsigned int v319 = v318;
LABEL_412:
              LODWORD(v309) = v319;
            }
            while (v236 != v319);
          }
          re::StringID::destroyString((re::StringID *)v347);
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v349);
          double v320 = _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)&v353);
          if (v356[0])
          {
            if (v359) {
              (*(void (**)(double))(*(void *)v356[0] + 40))(v320);
            }
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v360);
          re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v363);
          re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v364);
          re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v368);
          BOOL v5 = v323;
          uint64_t v6 = v321;
          uint64_t v7 = &off_268773000;
        }
        ++v5;
      }
      while (v5 != (re::ecs2::RenderingSubsystem **)v6);
    }
  }
}

BOOL re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 40 * v4 + 16) == v2) {
    return 1;
  }
  do
  {
    LODWORD(v4) = *(_DWORD *)(v6 + 40 * v4 + 8) & 0x7FFFFFFF;
    BOOL result = v4 != 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF && *(void *)(v6 + 40 * v4 + 16) != v2);
  return result;
}

uint64_t *re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = v3 << 6;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 64;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t re::ecs2::MeshSortingSystem::getQualifiedComponentForSorting(re::ecs2::MeshSortingSystem *this, const re::ecs2::EntityComponentCollection *a2)
{
  uint64_t result = *((void *)this + 18);
  if (!result)
  {
    uint64_t result = re::ecs2::EntityComponentCollection::get(this, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!result)
    {
      uint64_t result = re::ecs2::EntityComponentCollection::get(this, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (result) {
        return *(void *)(result + 32);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::Allocator *&>(uint64_t a1, uint64_t *a2, re::Allocator **a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(a1 + 16);
      if (*(void *)(v11 + 224 * v10 + 16) == v6)
      {
LABEL_6:
        uint64_t v12 = v11 + 224 * v10;
        return v12 + 24;
      }
      while (1)
      {
        LODWORD(v1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(_DWORD *)(v11 + 224 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 224 * v10 + 16) == v6) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 36);
  if (v13 == 0x7FFFFFFF)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 32);
    int v14 = v13;
    if (v13 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v14 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v14 + 1;
    uint64_t v15 = *(void *)(a1 + 16);
    int v16 = *(_DWORD *)(v15 + 224 * v13 + 8);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 16);
    int v16 = *(_DWORD *)(v15 + 224 * v13 + 8);
    *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v15 + 224 * v13 + 8) = v16 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 224 * v13 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 224 * v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 224 * vre::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = v8;
  *(void *)(*(void *)(a1 + 16) + 224 * v13 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
  re::MeshSortingCollection::MeshSortingCollection((re::MeshSortingCollection *)(*(void *)(a1 + 16) + 224 * v13 + 24), *a3);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v13;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 224 * v13;
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 40 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 40 * v10 + 16) != v6)
  {
    LODWORD(v1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 40 * v10;
  return v12 + 24;
}

void re::ecs2::MeshSortingSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)const::$_0::operator()(uint64_t a1, unint64_t a2, unint64_t a3, char a4, char a5)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  unint64_t v38 = a3;
  if (!*(unsigned char *)re::ecs2::RenderOptions::forEntity(*(re::ecs2::RenderOptions **)(a1 + 8), a2)) {
    return;
  }
  (*(void (**)(_OWORD *__return_ptr))(***(void ***)(a1 + 56) + 8))(v39);
  unint64_t v9 = LOBYTE(v39[0]) ? (const re::ecs2::Scene *)*((void *)&v39[0] + 1) : 0;
  uint64_t v10 = **(void **)(a1 + 40);
  re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(**(re::ecs2::RenderingSubsystem ***)(a1 + 16), v9, **(re::DynamicString ****)(a1 + 24), v39);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, _OWORD *, void))(*(void *)v10 + 48))(v10, v39, *(void *)(**(void **)(a1 + 24) + 368));
  re::StringID::destroyString((re::StringID *)v39);
  if (!v11) {
    return;
  }
  if (!*(void *)v11) {
    return;
  }
  unint64_t v12 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  unint64_t v13 = v12 ^ (v12 >> 31);
  uint64_t v14 = *(unsigned int *)(*(void *)(v11 + 8) + 4 * (v13 % *(unsigned int *)(v11 + 24)));
  if (v14 == 0x7FFFFFFF) {
    return;
  }
  uint64_t v15 = *(void *)(v11 + 16);
  while (*(void *)(v15 + 80 * v14 + 16) != a3)
  {
    int v16 = *(_DWORD *)(v15 + 80 * v14 + 8);
    uint64_t v14 = v16 & 0x7FFFFFFF;
    if ((v16 & 0x7FFFFFFF) == 0x7FFFFFFF) {
      return;
    }
  }
  int v17 = (_OWORD *)(v15 + 80 * v14 + 32);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = (0xBF58476D1CE4E5B9 * ((unint64_t)v9 ^ ((unint64_t)v9 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                         * ((unint64_t)v9 ^ ((unint64_t)v9 >> 30))) >> 27);
  unint64_t v20 = (0x94D049BB133111EBLL * v19) ^ ((0x94D049BB133111EBLL * v19) >> 31);
  if (!*(void *)v18)
  {
    uint64_t v36 = v15 + 80 * v14 + 32;
    unint64_t v37 = v12 ^ (v12 >> 31);
    LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0;
    goto LABEL_15;
  }
  unint64_t v21 = v20 % *(unsigned int *)(v18 + 24);
  uint64_t v22 = *(unsigned int *)(*(void *)(v18 + 8) + 4 * v21);
  if (v22 == 0x7FFFFFFF)
  {
LABEL_13:
    uint64_t v36 = v15 + 80 * v14 + 32;
    unint64_t v37 = v12 ^ (v12 >> 31);
LABEL_15:
    uint64_t v23 = *(unsigned int *)(v18 + 36);
    if (v23 == 0x7FFFFFFF)
    {
      uint64_t v23 = *(unsigned int *)(v18 + 32);
      int v24 = v23;
      if (v23 == *(_DWORD *)(v18 + 24))
      {
        unint64_t v25 = v20;
        re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v18, 2 * *(_DWORD *)(v18 + 28));
        unint64_t v20 = v25;
        LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = v25 % *(unsigned int *)(v18 + 24);
        int v24 = *(_DWORD *)(v18 + 32);
      }
      *(_DWORD *)(v18 + 32) = v24 + 1;
      uint64_t v26 = *(void *)(v18 + 16);
      int v27 = *(_DWORD *)(v26 + 224 * v23 + 8);
    }
    else
    {
      uint64_t v26 = *(void *)(v18 + 16);
      int v27 = *(_DWORD *)(v26 + 224 * v23 + 8);
      *(_DWORD *)(v18 + 36) = v27 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v26 + 224 * v23 + 8) = v27 | 0x80000000;
    *(_DWORD *)(*(void *)(v18 + 16) + 224 * v23 + 8) = *(_DWORD *)(*(void *)(v18 + 16) + 224 * v23 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v18 + 8) + 4 * v21);
    *(void *)(*(void *)(v18 + 16) + 224 * v23) = v20;
    *(void *)(*(void *)(v18 + 16) + 224 * v23 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v9;
    uint64_t v28 = *(re::Allocator **)(a1 + 32);
    unsigned int v29 = v21;
    re::MeshSortingCollection::MeshSortingCollection((re::MeshSortingCollection *)(*(void *)(v18 + 16) + 224 * v23 + 24), v28);
    *(_DWORD *)(*(void *)(v18 + 8) + 4 * v29) = v23;
    ++*(_DWORD *)(v18 + 28);
    ++*(_DWORD *)(v18 + 40);
    uint64_t v30 = *(void *)(v18 + 16) + 224 * v23 + 24;
    int v17 = (_OWORD *)v36;
    unint64_t v13 = v37;
    goto LABEL_25;
  }
  uint64_t v31 = *(void *)(v18 + 16);
  while (*(const re::ecs2::Scene **)(v31 + 224 * v22 + 16) != v9)
  {
    LODWORD(v22) = *(_DWORD *)(v31 + 224 * v22 + 8) & 0x7FFFFFFF;
    if (v22 == 0x7FFFFFFF) {
      goto LABEL_13;
    }
  }
  uint64_t v30 = v31 + 224 * v22 + 24;
LABEL_25:
  uint64_t v32 = *(void *)(v30 + 144);
  v39[0] = *v17;
  v39[1] = v17[1];
  char v40 = a4;
  char v41 = a5;
  char v42 = *(unsigned char *)(v15 + 80 * v14 + 64);
  char v46 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  __int16 v45 = 0;
  if (v32)
  {
    unint64_t v33 = v13 % *(unsigned int *)(v30 + 168);
    uint64_t v34 = *(unsigned int *)(*(void *)(v30 + 152) + 4 * v33);
    if (v34 != 0x7FFFFFFF)
    {
      uint64_t v35 = *(void *)(v30 + 160);
      if (*(void *)(v35 + 176 * v34 + 16) == a3) {
        return;
      }
      while (1)
      {
        LODWORD(v34) = *(_DWORD *)(v35 + 176 * v34 + 8) & 0x7FFFFFFF;
        if (v34 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v35 + 176 * v34 + 16) == a3) {
          return;
        }
      }
    }
  }
  else
  {
    LODWORD(v33) = 0;
  }
  re::HashTable<unsigned long long,re::MeshSortingCollection::RenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v30 + 144, v33, v13, &v38, (uint64_t)v39);
  ++*(_DWORD *)(v30 + 184);
}

uint64_t *re::internal::MeshSortGroupFixupTable::fixupMeshSortGroupsForEntity(re::internal::MeshSortGroupFixupTable *this, re::ecs2::Entity *a2)
{
  uint64_t result = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result) {
    uint64_t result = re::internal::MeshSortGroupFixupTable::fixupMeshSortGroup((uint64_t *)this, (re::ecs2::MeshSortingComponent *)result);
  }
  uint64_t v5 = *((void *)a2 + 41);
  if (v5)
  {
    uint64_t v6 = (re::ecs2::Entity **)*((void *)a2 + 43);
    uint64_t v7 = 8 * v5;
    do
    {
      unint64_t v8 = *v6++;
      uint64_t result = (uint64_t *)re::internal::MeshSortGroupFixupTable::fixupMeshSortGroupsForEntity(this, v8, 0);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t *re::internal::MeshSortGroupFixupTable::fixupMeshSortGroup(uint64_t *this, re::ecs2::MeshSortingComponent *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v3 = (__n128 *)((char *)a2 + 176);
  unint64_t v2 = *((void *)a2 + 22);
  uint64_t v4 = (__n128 *)((char *)a2 + 32);
  uint64_t v5 = 176;
  if (v2)
  {
    uint64_t v6 = (char *)a2 + 176;
  }
  else
  {
    uint64_t v5 = 32;
    uint64_t v6 = (char *)a2 + 32;
  }
  unint64_t v7 = *(void *)((char *)a2 + v5);
  unint64_t v37 = v7;
  if (!v7) {
    return this;
  }
  uint64_t v9 = (uint64_t)this;
  uint64_t v10 = *this;
  unint64_t v11 = v7 ^ (v7 >> 30);
  if (!*this
    || (unint64_t v12 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v11) ^ ((0xBF58476D1CE4E5B9 * v11) >> 27)),
        uint64_t v13 = *(unsigned int *)(this[1] + 4 * ((v12 ^ (v12 >> 31)) % *((unsigned int *)this + 6))),
        v13 == 0x7FFFFFFF))
  {
LABEL_7:
    char v14 = v6[8];
    char v15 = v6[9];
    int v16 = v6[16];
    if (v6[16]) {
      long long v39 = *((_OWORD *)v6 + 2);
    }
    char v33 = 0;
    char v35 = 0;
    char v36 = 0;
    uuid_generate_random(out);
    uint64_t v30 = (*(void *)&out[8] + (*(void *)out << 6) + (*(void *)out >> 2) - 0x61C8864680B583E9) ^ *(void *)out;
    char v31 = v14;
    char v32 = v15;
    if (v16)
    {
      char v33 = 1;
      long long v34 = v39;
    }
    unint64_t v17 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v11) ^ ((0xBF58476D1CE4E5B9 * v11) >> 27));
    unint64_t v18 = v17 ^ (v17 >> 31);
    uint64_t v10 = *(void *)v9;
    if (*(void *)v9)
    {
      unint64_t v19 = v18 % *(unsigned int *)(v9 + 24);
      uint64_t v20 = *(unsigned int *)(*(void *)(v9 + 8) + 4 * v19);
      if (v20 != 0x7FFFFFFF)
      {
        uint64_t v21 = *(void *)(v9 + 16);
        if (*(void *)(v21 + 160 * v20 + 16) == v7)
        {
LABEL_23:
          unint64_t v2 = v3->n128_u64[0];
          goto LABEL_24;
        }
        while (1)
        {
          LODWORD(v2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(_DWORD *)(v21 + 160 * v20 + 8) & 0x7FFFFFFF;
          if (v20 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v21 + 160 * v20 + 16) == v7) {
            goto LABEL_23;
          }
        }
      }
    }
    else
    {
      LODWORD(v19) = 0;
    }
    re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v9, v19, v18, &v37, (uint64_t)&v30);
    ++*(_DWORD *)(v9 + 40);
    uint64_t v10 = *(void *)v9;
    goto LABEL_23;
  }
  uint64_t v22 = this[2];
  while (*(void *)(v22 + 160 * v13 + 16) != v7)
  {
    LODWORD(vre::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = *(_DWORD *)(v22 + 160 * v13 + 8) & 0x7FFFFFFF;
    if (v13 == 0x7FFFFFFF) {
      goto LABEL_7;
    }
  }
LABEL_24:
  if (v2)
  {
    unsigned int v23 = 0x7FFFFFFF;
    if (v10)
    {
      unint64_t v24 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v11) ^ ((0xBF58476D1CE4E5B9 * v11) >> 27));
      uint64_t v25 = *(unsigned int *)(*(void *)(v9 + 8) + 4 * ((v24 ^ (v24 >> 31)) % *(unsigned int *)(v9 + 24)));
      if (v25 != 0x7FFFFFFF)
      {
        uint64_t v26 = *(void *)(v9 + 16);
        if (*(void *)(v26 + 160 * v25 + 16) == v7)
        {
LABEL_30:
          unsigned int v23 = v25;
        }
        else
        {
          while (1)
          {
            LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = *(_DWORD *)(v26 + 160 * v25 + 8) & 0x7FFFFFFF;
            unsigned int v23 = 0x7FFFFFFF;
            if (v25 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v26 + 160 * v25 + 16) == v7) {
              goto LABEL_30;
            }
          }
        }
      }
    }
    uint64_t v4 = v3;
  }
  else
  {
    unsigned int v23 = 0x7FFFFFFF;
    if (v10)
    {
      unint64_t v27 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v11) ^ ((0xBF58476D1CE4E5B9 * v11) >> 27));
      uint64_t v28 = *(unsigned int *)(*(void *)(v9 + 8) + 4 * ((v27 ^ (v27 >> 31)) % *(unsigned int *)(v9 + 24)));
      if (v28 != 0x7FFFFFFF)
      {
        uint64_t v29 = *(void *)(v9 + 16);
        if (*(void *)(v29 + 160 * v28 + 16) == v7)
        {
LABEL_39:
          unsigned int v23 = v28;
        }
        else
        {
          while (1)
          {
            LODWORD(v28) = *(_DWORD *)(v29 + 160 * v28 + 8) & 0x7FFFFFFF;
            unsigned int v23 = 0x7FFFFFFF;
            if (v28 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v29 + 160 * v28 + 16) == v7) {
              goto LABEL_39;
            }
          }
        }
      }
    }
  }
  re::ecs2::MeshSortGroupToken::operator=(v4, (__n128 *)(*(void *)(v9 + 16) + 160 * v23 + 32));
  return re::ecs2::Component::markDirty(a2);
}

void re::ecs2::MeshSortingSystem::~MeshSortingSystem(re::ecs2::MeshSortingSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::MeshSortingSystem::typeInfo(re::ecs2::MeshSortingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSortingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSortingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSortingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSortingSystem>, 0);
}

double re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = v3 << 7;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 128;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 120;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    re::DynamicArray<unsigned long>::deinit(result + 80);
    return re::DynamicArray<unsigned long>::deinit(v2 + 40);
  }
  return result;
}

re::MeshSortingCollection *re::MeshSortingCollection::MeshSortingCollection(re::MeshSortingCollection *this, re::Allocator *a2)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 36) = 0x7FFFFFFFLL;
  re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)this, (uint64_t)a2, 3);
  *((_DWORD *)this + 2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(void *)((char *)this + 84) = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)this + 48, (uint64_t)a2, 3);
  *((_DWORD *)this + 32) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(void *)((char *)this + 132) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)this + 96, (uint64_t)a2, 3);
  *((_DWORD *)this + 44) = 0;
  *((_OWORD *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(void *)((char *)this + 18ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0x7FFFFFFFLL;
  re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)this + 144, (uint64_t)a2, 3);
  *((_WORD *)this + 96) = 0;
  return this;
}

void re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  unint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 7), 16);
  if (v12)
  {
    char v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)uint64_t v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      if (v8)
      {
        uint64_t v10 = 0;
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = 224 * v8;
        do
        {
          char v14 = (void *)(v6 + v10);
          if ((*(_DWORD *)(v6 + v10 + 8) & 0x80000000) != 0)
          {
            char v15 = v14 + 3;
            unint64_t v16 = *v14;
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = *v14 % v17;
            uint64_t v19 = *(unsigned int *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              uint64_t v19 = *(unsigned int *)(a1 + 32);
              int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 224 * v19 + 8);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 224 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 224 * v19 + 8) = v22 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 224 * v19 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 224 * v19 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v18);
            *(void *)(*(void *)(a1 + 16) + 224 * v19) = v16;
            *(void *)(*(void *)(a1 + 16) + 224 * v19 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v14[2];
            uint64_t v23 = *(void *)(a1 + 16) + 224 * v19;
            *(_DWORD *)(v23 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
            *(_OWORD *)(v23 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
            *(_OWORD *)(v23 + 24) = 0u;
            *(void *)(v23 + 6ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v23 + 24), v15);
            *(_DWORD *)(v23 + 104) = 0;
            *(_OWORD *)(v23 + 88) = 0u;
            *(_OWORD *)(v23 + 72) = 0u;
            *(void *)(v23 + 108) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v23 + 72), (uint64_t *)(v6 + v10 + 72));
            *(_DWORD *)(v23 + 152) = 0;
            *(_OWORD *)(v23 + 136) = 0u;
            *(_OWORD *)(v23 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
            *(void *)(v23 + 1re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v23 + 120), (uint64_t *)(v6 + v10 + 120));
            *(_OWORD *)(v23 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = 0u;
            v23 += 168;
            *(_DWORD *)(v23 + 32) = 0;
            *(_OWORD *)(v23 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
            *(void *)(v23 + 36) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v23, (uint64_t *)(v6 + v10 + 168));
            *(_WORD *)(v23 + 48) = *(_WORD *)(v6 + v10 + 216);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v18) = v19;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v10 += 224;
        }
        while (v13 != v10);
      }
      re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

void re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 224 * v10, 16);
  if (v12)
  {
    char v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::MeshSortingCollection::RenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  unsigned int v9 = *(_DWORD *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 32);
    unsigned int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v34, 0, 36);
          *(void *)&v34[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v34, v13, v12);
          long long v15 = *(_OWORD *)v34;
          *(_OWORD *)long long v34 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v34[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&unsigned char v34[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v34[24];
          *(_OWORD *)&v34[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v34[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::MeshSortingCollection::RenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 16);
              }
              ++v21;
              v22 += 176;
            }
            while (v21 < v20);
          }
          re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v34);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      unsigned int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 176 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 176 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  uint64_t v26 = 176 * v9;
  *(_DWORD *)(v23 + v26 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v26) = a3;
  *(void *)(*(void *)(a1 + 16) + v26 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v28 = v27 + v26;
  LOWORD(v26) = *(_WORD *)(a5 + 64);
  long long v30 = *(_OWORD *)(a5 + 32);
  long long v29 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v28 + 64) = v30;
  *(_OWORD *)(v28 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v29;
  *(_WORD *)(v28 + 96) = v26;
  *(_OWORD *)(v28 + 32) = *(_OWORD *)a5;
  LODWORD(v26) = *(unsigned __int8 *)(a5 + 80);
  *(unsigned char *)(v28 + 112) = v26;
  if (v26)
  {
    char v31 = (_OWORD *)(v27 + 176 * v9);
    long long v32 = *(_OWORD *)(a5 + 96);
    long long v33 = *(_OWORD *)(a5 + 128);
    v31[9] = *(_OWORD *)(a5 + 112);
    v31[10] = v33;
    v31[8] = v32;
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

double re::make::shared::unsafelyInplace<re::ecs2::MeshSortingComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *((_OWORD *)a1 + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  int v1 = (_OWORD *)((char *)a1 + 304);
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6E1C00;
  *(void *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(unsigned char *)(v2 + 48) = 0;
  *(unsigned char *)(v2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(unsigned char *)(v2 + 112) = 0;
  *(void *)(v2 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0x7FFFFFFF00000000;
  *(unsigned char *)(v2 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 168) = 0;
  *(void *)(v2 + 176) = 0;
  *(_WORD *)(v2 + 184) = 0;
  *(unsigned char *)(v2 + 192) = 0;
  *(unsigned char *)(v2 + 224) = 0;
  *(unsigned char *)(v2 + 2re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v2 + 392) = 0;
  *(unsigned char *)(v2 + 40ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(unsigned char *)(v2 + 4re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)v1 + 28) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 32ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_DWORD *)(v2 + std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 384) = 0;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + re::DynamicArray<re::AcousticSoundReductionMaterial>::clear((uint64_t)this + 368) = 0u;
  return result;
}

id re::internal::defaultRetain<re::ecs2::MeshSortingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshSortingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

__n128 re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)uint64_t v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 16);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,computeAndSaveSortPointPerRPG(re::MeshSortingCollection &,re::Slice<re::ecs2::MeshSortingComponent *> &)::SimpleAverageAccumulator,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 6);
  __n128 result = *(__n128 *)a5;
  long long v27 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(v25 + 48) = v27;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*(_DWORD *)(v40 + 160) < *(_DWORD *)(*v10 + 160))
                {
                  *int v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                __n128 result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                __n128 result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                char v42 = v10 + 1;
                uint64_t v43 = v10 + 2;
                uint64_t v44 = v10 + 3;
                __n128 result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v45 = *(a2 - 1);
                uint64_t v46 = v10[3];
                if (*(_DWORD *)(v45 + 160) < *(_DWORD *)(v46 + 160))
                {
                  uint64_t *v44 = v45;
                  *(a2 - 1) = v46;
                  uint64_t v47 = *v44;
                  uint64_t v48 = *v43;
                  int v49 = *(_DWORD *)(*v44 + 160);
                  if (v49 < *(_DWORD *)(*v43 + 160))
                  {
                    *uint64_t v43 = v47;
                    uint64_t *v44 = v48;
                    uint64_t v50 = *v42;
                    if (v49 < *(_DWORD *)(*v42 + 160))
                    {
                      v10[1] = v47;
                      long long v10[2] = v50;
                      uint64_t v51 = *v10;
                      if (v49 < *(_DWORD *)(*v10 + 160))
                      {
                        *int v10 = v47;
                        v10[1] = v51;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v52 = v10 + 1;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 8;
                uint64_t v56 = v10;
                do
                {
                  uint64_t v58 = *v56;
                  uint64_t v57 = v56[1];
                  uint64_t v56 = v52;
                  int v59 = *(_DWORD *)(v57 + 160);
                  if (v59 < *(_DWORD *)(v58 + 160))
                  {
                    uint64_t v60 = v55;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v6ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v58;
                      uint64_t v61 = v60 - 8;
                      if (v60 == 8)
                      {
                        uint64_t v62 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v58 = *(uint64_t *)((char *)v10 + v60 - 16);
                      v60 -= 8;
                    }
                    while (v59 < *(_DWORD *)(v58 + 160));
                    uint64_t v62 = (uint64_t *)((char *)v10 + v61);
LABEL_85:
                    *uint64_t v62 = v57;
                  }
                  uint64_t v52 = v56 + 1;
                  v55 += 8;
                }
                while (v56 + 1 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                uint64_t v93 = *v9;
                uint64_t v92 = v9[1];
                uint64_t v9 = v52;
                int v94 = *(_DWORD *)(v92 + 160);
                if (v94 < *(_DWORD *)(v93 + 160))
                {
                  do
                  {
                    *uint64_t v52 = v93;
                    uint64_t v93 = *(v52 - 2);
                    --v52;
                  }
                  while (v94 < *(_DWORD *)(v93 + 160));
                  *uint64_t v52 = v92;
                }
                uint64_t v52 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  unsigned int v67 = &v10[v66];
                  uint64_t v68 = *v67;
                  if (2 * v65 + 2 < (uint64_t)v12)
                  {
                    __n128 result = *(unsigned int *)(v68 + 160);
                    if ((int)result < *(_DWORD *)(v67[1] + 160))
                    {
                      uint64_t v68 = v67[1];
                      ++v67;
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  uint64_t v69 = &v10[v65];
                  uint64_t v70 = *v69;
                  int v71 = *(_DWORD *)(*v69 + 160);
                  if (*(_DWORD *)(v68 + 160) >= v71)
                  {
                    do
                    {
                      unsigned int v72 = v67;
                      *uint64_t v69 = v68;
                      if (v63 < v66) {
                        break;
                      }
                      __n128 result = (2 * v66) | 1;
                      unsigned int v67 = &v10[result];
                      uint64_t v73 = 2 * v66 + 2;
                      uint64_t v68 = *v67;
                      if (v73 < (uint64_t)v12 && *(_DWORD *)(v68 + 160) < *(_DWORD *)(v67[1] + 160))
                      {
                        uint64_t v68 = v67[1];
                        ++v67;
                        __n128 result = v73;
                      }
                      uint64_t v69 = v72;
                      uint64_t v66 = result;
                    }
                    while (*(_DWORD *)(v68 + 160) >= v71);
                    *unsigned int v72 = v70;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              uint64_t v74 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v75 = 0;
                uint64_t v76 = *v10;
                unint64_t v77 = v10;
                do
                {
                  uint64_t v78 = &v77[v75];
                  uint64_t v81 = v78[1];
                  float32x4_t v79 = v78 + 1;
                  uint64_t v80 = v81;
                  uint64_t v82 = (2 * v75) | 1;
                  uint64_t v83 = 2 * v75 + 2;
                  if (v83 < v74)
                  {
                    __n128 result = *(unsigned int *)(v80 + 160);
                    if ((int)result < *(_DWORD *)(v79[1] + 160))
                    {
                      uint64_t v80 = v79[1];
                      ++v79;
                      uint64_t v82 = v83;
                    }
                  }
                  *unint64_t v77 = v80;
                  unint64_t v77 = v79;
                  uint64_t v75 = v82;
                }
                while (v82 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                if (v79 == --a2)
                {
                  *float32x4_t v79 = v76;
                }
                else
                {
                  *float32x4_t v79 = *a2;
                  *a2 = v76;
                  uint64_t v84 = (char *)v79 - (char *)v10 + 8;
                  if (v84 >= 9)
                  {
                    unint64_t v85 = (((unint64_t)v84 >> 3) - 2) >> 1;
                    uint64_t v86 = &v10[v85];
                    uint64_t v87 = *v86;
                    uint64_t v88 = *v79;
                    int v89 = *(_DWORD *)(*v79 + 160);
                    if (*(_DWORD *)(*v86 + 160) < v89)
                    {
                      do
                      {
                        int v90 = v86;
                        *float32x4_t v79 = v87;
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                        uint64_t v86 = &v10[v85];
                        uint64_t v87 = *v86;
                        float32x4_t v79 = v90;
                      }
                      while (*(_DWORD *)(*v86 + 160) < v89);
                      *int v90 = v88;
                    }
                  }
                }
              }
              while (v74-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          BOOL v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v9 + 2, &v9[v13 + 1], a2 - 3);
            __n128 result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *uint64_t v9 = *v14;
            *BOOL v14 = v15;
          }
          else
          {
            __n128 result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          int v17 = *(_DWORD *)(v16 + 160);
          if (*(_DWORD *)(*(v9 - 1) + 160) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)(*(a2 - 1) + 160))
          {
            long long v32 = v9 + 1;
            do
            {
              int v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= *(_DWORD *)(*v10 + 160));
          }
          else
          {
            int v10 = v9;
            do
            {
              uint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)(v31 + 160));
          }
          long long v33 = a2;
          if (v10 < a2)
          {
            long long v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *(_DWORD *)(v34 + 160));
          }
          if (v10 < v33)
          {
            uint64_t v35 = *v10;
            uint64_t v36 = *v33;
            do
            {
              *int v10 = v36;
              uint64_t *v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                uint64_t v35 = v37;
              }
              while (v17 >= *(_DWORD *)(v37 + 160));
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while (v17 < *(_DWORD *)(v38 + 160));
            }
            while (v10 < v33);
          }
          long long v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v39;
          }
          a4 = 0;
          uint64_t *v39 = v16;
        }
        int v17 = *(_DWORD *)(v16 + 160);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 160) < v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 160) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 160) >= v17);
        }
        if (v20 >= v21)
        {
          long long v29 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v25 = &v9[v18];
          uint64_t v26 = v21;
          do
          {
            *uint64_t v25 = v24;
            *uint64_t v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              uint64_t v19 = v27;
            }
            while (*(_DWORD *)(v27 + 160) < v17);
            do
            {
              uint64_t v28 = *--v26;
              uint64_t v24 = v28;
            }
            while (*(_DWORD *)(v28 + 160) >= v17);
          }
          while (v25 < v26);
          long long v29 = v25 - 1;
        }
        if (v29 != v9) {
          *uint64_t v9 = *v29;
        }
        *long long v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        int v10 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v9, v29);
      int v10 = v29 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  int v5 = *(_DWORD *)(*a2 + 160);
  int v6 = *(_DWORD *)(*result + 160);
  uint64_t v7 = *a3;
  int v8 = *(_DWORD *)(*a3 + 160);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)(*a2 + 160) < *(_DWORD *)(*result + 160))
      {
        uint64_t *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      uint64_t *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 160) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      uint64_t *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 160) < *(_DWORD *)(*a1 + 160))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)(v21 + 160) < *(_DWORD *)(v22 + 160))
      {
        *uint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        int v25 = *(_DWORD *)(*v20 + 160);
        if (v25 < *(_DWORD *)(*v19 + 160))
        {
          *uint64_t v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 160))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 160))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    int v14 = *(_DWORD *)(*v9 + 160);
    if (v14 < *(_DWORD *)(*v8 + 160))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 160))
        {
          int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      int v17 = a1;
LABEL_13:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,compressPriorityInGroupUsing(re::DynamicArray<re::ecs2::MeshSortingComponent *> &)::$_0 &,re::ecs2::MeshSortingComponent **>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a4 + 160) < *(_DWORD *)(*a3 + 160))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 160) < *(_DWORD *)(*a2 + 160))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)(*a2 + 160) < *(_DWORD *)(*a1 + 160))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

double re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)(v6 + 168));
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v6 + 120));
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)(v6 + 72));
          re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 224;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        uint64_t v7 = v6 + v4;
        int v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          uint64_t v11 = *(void *)(v7 + 24);
          uint64_t v10 = (void *)(v7 + 24);
          uint64_t v9 = v11;
          if (v11)
          {
            uint64_t v12 = v6 + v4;
            if (*(void *)(v6 + v4 + 56)) {
              (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
            }
            *(void *)(v12 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
            v10[1] = 0;
            long long v10[2] = 0;
            *uint64_t v10 = 0;
            ++*(_DWORD *)(v12 + 48);
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)int v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 32;
        do
        {
          if ((*(_DWORD *)(v13 - 24) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 32);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + (v17 << 6) + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 6) + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + (v17 << 6)) = v14;
            *(void *)(*(void *)(a1 + 16) + (v17 << 6) + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(void *)(v13 - 16);
            uint64_t v21 = *(void *)(a1 + 16) + (v17 << 6);
            *(void *)(v21 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
            *(_DWORD *)(v21 + 48) = 0;
            *(void *)(v21 + 32) = 0;
            *(void *)(v21 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
            *(void *)(v21 + 24) = 0;
            *(void *)(v21 + 24) = *(void *)(v13 - 8);
            *(void *)(v13 - 8) = 0;
            *(void *)(v21 + 32) = *(void *)v13;
            *(void *)uint64_t v13 = 0;
            uint64_t v22 = *(void *)(v21 + 40);
            *(void *)(v21 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(v13 + 8);
            *(void *)(v13 + 8) = v22;
            uint64_t v23 = *(void *)(v21 + 56);
            *(void *)(v21 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(void *)(v13 + 24);
            *(void *)(v13 + 24) = v23;
            ++*(_DWORD *)(v13 + 16);
            ++*(_DWORD *)(v21 + 48);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 64;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

uint64_t re::DynamicArray<int>::DynamicArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = 0;
  unint64_t v5 = *(void *)(a3 + 8);
  *(void *)a1 = a2;
  if (v5)
  {
    re::DynamicArray<int>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<float>::copy((void *)a1, 0, *(char **)a3, *(void *)(a3 + 8));
  }
  else
  {
    re::DynamicArray<int>::setCapacity((void *)a1, 0);
    ++*(_DWORD *)(a1 + 24);
  }
  return a1;
}

__n128 re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, __n128 *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(void *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v32, v13, v12);
          long long v15 = *(_OWORD *)v32;
          *(_OWORD *)long long v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v32[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v32[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 8);
              }
              ++v21;
              v22 += 120;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 120 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 120 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 120 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 120 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 120 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 120 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 120 * v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 120 * v9;
  __n128 result = *a5;
  *(__n128 *)(v26 + 24) = *a5;
  *(void *)(v26 + 72) = 0;
  *(_DWORD *)(v26 + 64) = 0;
  *(void *)(v26 + 48) = 0;
  *(void *)(v26 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v26 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v26 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = a5[1].n128_u64[0];
  a5[1].n128_u64[0] = 0;
  *(void *)(v26 + 48) = a5[1].n128_u64[1];
  a5[1].n128_u64[1] = 0;
  unint64_t v28 = *(void *)(v26 + 56);
  *(void *)(v26 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = a5[2].n128_u64[0];
  a5[2].n128_u64[0] = v28;
  unint64_t v29 = *(void *)(v26 + 72);
  *(void *)(v26 + 72) = a5[3].n128_u64[0];
  a5[3].n128_u64[0] = v29;
  ++a5[2].n128_u32[2];
  ++*(_DWORD *)(v26 + 64);
  *(void *)(v26 + 112) = 0;
  *(void *)(v26 + 88) = 0;
  *(void *)(v26 + 96) = 0;
  *(void *)(v26 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_DWORD *)(v26 + 104) = 0;
  *(void *)(v26 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = a5[3].n128_u64[1];
  a5[3].n128_u64[1] = 0;
  *(void *)(v26 + 88) = a5[4].n128_u64[0];
  a5[4].n128_u64[0] = 0;
  unint64_t v30 = *(void *)(v26 + 96);
  *(void *)(v26 + 96) = a5[4].n128_u64[1];
  a5[4].n128_u64[1] = v30;
  unint64_t v31 = *(void *)(v26 + 112);
  *(void *)(v26 + 112) = a5[5].n128_u64[1];
  a5[5].n128_u64[1] = v31;
  ++a5[5].n128_u32[0];
  ++*(_DWORD *)(v26 + 104);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(void *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v32, v13, v12);
          long long v15 = *(_OWORD *)v32;
          *(_OWORD *)long long v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v32[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v32[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 16);
              }
              ++v21;
              v22 += 128;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + (v9 << 7) + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + (v9 << 7) + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + (v9 << 7) + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 7) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 7) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 7)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 7) + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  uint64_t v26 = (_OWORD *)(*(void *)(a1 + 16) + (v9 << 7));
  long long v28 = a5[4];
  long long v27 = a5[5];
  long long v29 = a5[3];
  v26[4] = a5[2];
  v26[5] = v29;
  v26[6] = v28;
  v26[7] = v27;
  long long v30 = a5[1];
  v26[2] = *a5;
  void v26[3] = v30;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(void *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v13, v12);
          long long v15 = *(_OWORD *)v27;
          *(_OWORD *)long long v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v27[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v27[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&unsigned char v27[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 8);
              }
              ++v21;
              v22 += 40;
            }
            while (v21 < v20);
          }
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 40 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 40 * v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  *(_OWORD *)(*(void *)(a1 + 16) + 40 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v31, v13, v12);
          long long v15 = *(_OWORD *)v31;
          *(_OWORD *)unint64_t v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v31[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v31[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 16);
              }
              ++v21;
              v22 += 160;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 160 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 160 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 160 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 160 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 160 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 160 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 160 * v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = v26 + 160 * v9;
  *(unsigned char *)(v27 + 112) = 0;
  long long v28 = (unsigned char *)(v27 + 112);
  *((void *)v28 - 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(v28 - 64) = 0;
  *(v28 - 32) = 0;
  *((_WORD *)v28 - 36) = 0;
  *((void *)v28 - 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)a5;
  *((_WORD *)v28 - 36) = *(_WORD *)(a5 + 8);
  if (*(unsigned char *)(a5 + 16))
  {
    *(v28 - 64) = 1;
    *(_OWORD *)(v26 + 160 * v9 + 64) = *(_OWORD *)(a5 + 32);
  }
  if (*(unsigned char *)(a5 + 48))
  {
    *(v28 - 32) = 1;
    *(_OWORD *)(v26 + 160 * v9 + 96) = *(_OWORD *)(a5 + 64);
  }
  if (*(unsigned char *)(a5 + 80))
  {
    uint64_t v29 = v26 + 160 * v9;
    *long long v28 = 1;
    long long v30 = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(v29 + 128) = *(_OWORD *)(a5 + 96);
    *(_OWORD *)(v29 + 144) = v30;
  }
  *(void *)a5 = 0;
  *(_WORD *)(a5 + 8) = 0;
  if (*(unsigned char *)(a5 + 16)) {
    *(unsigned char *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  }
  if (*(unsigned char *)(a5 + 48)) {
    *(unsigned char *)(a5 + 48) = 0;
  }
  if (*(unsigned char *)(a5 + 80)) {
    *(unsigned char *)(a5 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

re *re::ecs2::AssetMutateTrackingSystem::willAddSceneToECSService(re *this, re::EventBus **a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v8 = (re::ecs2::Scene *)a2;
  uint64_t v2 = a2[36];
  if (v2)
  {
    unint64_t v3 = this;
    uint64_t v4 = (re *)((char *)this + 104);
    uint64_t v10 = re::globalAllocators(this)[2];
    unint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10 + 32))(v10, 32, 0);
    *unint64_t v5 = &unk_26E70A848;
    v5[1] = v3;
    void v5[2] = re::ecs2::AssetMutateTrackingSystem::sceneEntityWillRemoveHandler;
    uint64_t v5[3] = 0;
    int v11 = v5;
    *(void *)&long long v7 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v2, (uint64_t)v9, 0, 0);
    *((void *)&v7 + 1) = v6;
    re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::addNew(v4, (uint64_t *)&v8, &v7);
    return (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)v9);
  }
  return this;
}

uint64_t re::ecs2::AssetMutateTrackingSystem::sceneEntityWillRemoveHandler(void *a1, unint64_t a2)
{
  unint64_t v3 = a1 + 21;
  uint64_t v4 = re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1 + 21, a2);
  if (v4 != -1)
  {
    unint64_t v5 = (int8x16_t *)(a1[21] + (v4 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v4 & 0xF] = v8;
    unint64_t v9 = a1[23];
    unint64_t v10 = *(void *)(a1[22] + 24 * v4);
    unint64_t v11 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    a1[26] ^= (v11 >> 31) ^ v11;
    uint64_t v12 = a1[25];
    if (v7) {
      ++v12;
    }
    unint64_t v13 = a1[24] - 1;
    a1[24] = v13;
    a1[25] = v12;
    if (v9 >= 0x11 && v13 < v9 >> 2) {
      re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::resize(v3, 0);
    }
  }
  return 0;
}

uint64_t re::ecs2::AssetMutateTrackingSystem::willRemoveSceneFromECSService(re::ecs2::AssetMutateTrackingSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v5 = a2;
  unint64_t v3 = (uint64_t *)((char *)this + 104);
  uint64_t result = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)this + 13, (uint64_t *)&v5);
  if (result != -1)
  {
    if (*((void *)v5 + 36)) {
      re::EventBus::unsubscribe(*((void *)v5 + 36), *(void *)(*((void *)this + 14) + 24 * result + 8), *(void *)(*((void *)this + 14) + 24 * result + 16));
    }
    return re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::remove(v3, (uint64_t *)&v5);
  }
  return result;
}

void re::ecs2::AssetMutateTrackingSystem::update(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36, 3119, a1);
  if (a2)
  {
    isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v4);
    if (isStatisticCollectionEnabled)
    {
      uint64_t v6 = re::profilerThreadContext(isStatisticCollectionEnabled);
      if (*(void *)(v6 + 152)) {
        uint64_t v33 = mach_absolute_time();
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 24);
      if (v8)
      {
        uint64_t v9 = *(void *)(v7 + 40);
        for (uint64_t i = 8 * v8; i; i -= 8)
        {
          unint64_t v11 = *(void **)v9;
          uint64_t v12 = *(void *)(*(void *)v9 + 40);
          if (v12 && (unsigned int v13 = atomic_load((unsigned int *)(v12 + 704)), v13 == 2))
          {
            unint64_t v14 = v11[5];
            if (v14) {
              uint64_t v15 = *(void *)(v14 + 664);
            }
            else {
              uint64_t v15 = 0;
            }
            unint64_t v18 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27));
            unint64_t v16 = v15 ^ (v18 >> 31) ^ v18;
            uint64_t v17 = *(unsigned int *)(v14 + 260);
          }
          else
          {
            unint64_t v16 = 0;
            uint64_t v17 = 0;
          }
          unint64_t v35 = v11[2];
          uint64_t v19 = re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 168), v35);
          if (v19 == -1)
          {
            if (v17)
            {
              long long v34 = 0uLL;
              uint64_t v23 = re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::internalAdd((_anonymous_namespace_ *)(a1 + 168), &v35, &v34);
LABEL_23:
              void *v23 = v16;
              v23[1] = v17;
              re::ecs2::Component::markDirty(v11);
            }
          }
          else
          {
            uint64_t v20 = v19;
            uint64_t v21 = *(void *)(a1 + 176);
            uint64_t v22 = v21 + 24 * v19;
            uint64_t v24 = *(void *)(v22 + 8);
            uint64_t v23 = (void *)(v22 + 8);
            if (v16 != v24)
            {
              void *v23 = v16;
              *(void *)(v21 + 24 * v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v17;
              goto LABEL_25;
            }
            uint64_t v25 = v21 + 24 * v20;
            uint64_t v27 = *(void *)(v25 + 16);
            uint64_t v26 = (void *)(v25 + 16);
            if (v27 != v17)
            {
              if (v17) {
                goto LABEL_23;
              }
              *uint64_t v26 = 0;
            }
          }
LABEL_25:
          v9 += 8;
        }
      }
    }
    if (v6)
    {
      if (*(void *)(v6 + 152))
      {
        uint64_t v28 = mach_absolute_time();
        uint64_t v29 = *(int64x2_t **)(v6 + 152);
        if (v29)
        {
          uint64_t v30 = v29[480].u64[0];
          if (v30 >= v28 - v33) {
            uint64_t v30 = v28 - v33;
          }
          v29[480].i64[0] = v30;
          uint64_t v31 = v29[480].u64[1];
          if (v31 <= v28 - v33) {
            uint64_t v31 = v28 - v33;
          }
          v29[480].i64[1] = v31;
          int64x2_t v32 = vdupq_n_s64(1uLL);
          v32.i64[0] = v28 - v33;
          v29[481] = vaddq_s64(v29[481], v32);
          *(unsigned char *)(v6 + 184) = 0;
        }
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36);
}

void *re::ecs2::allocInfo_AssetMutateTrackingSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_337, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_337))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91348, "AssetMutateTrackingSystem");
    __cxa_guard_release(&_MergedGlobals_337);
  }
  return &unk_26AF91348;
}

void re::ecs2::initInfo_AssetMutateTrackingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xE35F5F30290B8F38;
  v5[1] = "AssetMutateTrackingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AssetMutateTrackingSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AssetMutateTrackingSystem>;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::ecs2::AssetMutateTrackingSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AssetMutateTrackingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AssetMutateTrackingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AssetMutateTrackingSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AssetMutateTrackingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::AssetMutateTrackingSystem *re::internal::defaultConstruct<re::ecs2::AssetMutateTrackingSystem>(int a1, int a2, re::ecs2::AssetMutateTrackingSystem *this)
{
  return re::ecs2::AssetMutateTrackingSystem::AssetMutateTrackingSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AssetMutateTrackingSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a3 + 21));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a3 + 13));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AssetMutateTrackingSystem>(void *a1)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 21));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 13));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AssetMutateTrackingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetMutateTrackingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AssetMutateTrackingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AssetMutateTrackingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AssetMutateTrackingSystem>, this);
}

void re::ecs2::AssetMutateTrackingSystem::~AssetMutateTrackingSystem(re::ecs2::AssetMutateTrackingSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 168);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 104);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AssetMutateTrackingSystem::typeInfo(re::ecs2::AssetMutateTrackingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetMutateTrackingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AssetMutateTrackingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AssetMutateTrackingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AssetMutateTrackingSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  long long v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70A848;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70A848;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AssetMutateTrackingSystem,REEventHandlerResult (re::ecs2::AssetMutateTrackingSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void *re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, long long *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + vre::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = v9 & 0x7F;
  long long v16 = *a3;
  uint64_t v17 = 3 * (v13 + 16 * v11);
  uint64_t v18 = *((void *)a1 + 1) + 8 * v17;
  *(void *)uint64_t v18 = *a2;
  *(_OWORD *)(v18 + 8) = v16;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  uint64_t v20 = (unint64_t *)(*((void *)a1 + 1) + 8 * v17);
  unint64_t v22 = *v20;
  uint64_t result = v20 + 1;
  unint64_t v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = a1[7];
  long long v30 = 0u;
  *(_OWORD *)uint64_t v31 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v31[16], 0, 32);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v30, v8, v9);
  unint64_t v10 = a1[2];
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    while (1)
    {
      unsigned __int16 v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    unint64_t v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<re::ecs2::Entity *,re::ecs2::AssetMutateTrackingSystem::EntityAssetMutationData,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,void,false>::internalAdd((_anonymous_namespace_ *)&v30, (void *)(a1[1] + 24 * v15), (long long *)(a1[1] + 24 * v15 + 8));
      unint64_t v25 = v15 >> 4;
      unint64_t v10 = a1[2];
      if (v15 >> 4 >= v10 >> 4) {
        break;
      }
      unint64_t v26 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v26 >= 0x40)
      {
        uint64_t v27 = 16 * v25;
        unint64_t v28 = ~v25 + (v10 >> 4);
        while (v28)
        {
          unint64_t v14 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v27 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v29 = __clz(__rbit64(v14));
          v27 += 16;
          --v28;
          if (v29 <= 0x3F)
          {
            unint64_t v15 = v29 + v27;
            goto LABEL_25;
          }
        }
        break;
      }
      unint64_t v15 = v26 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_25:
      ;
    }
  }
LABEL_12:
  uint64_t v17 = *(void *)&v31[40];
  *(void *)&v31[40] = a1[7];
  uint64_t result = *(void *)&v31[40];
  long long v18 = v30;
  long long v19 = *(_OWORD *)v31;
  *(void *)uint64_t v31 = v10;
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  *(void *)&long long v30 = *a1;
  *((void *)&v30 + 1) = v21;
  long long v22 = *(_OWORD *)&v31[16];
  long long v23 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v31[32];
  a1[7] = v17;
  *(_OWORD *)&v31[24] = v23;
  long long v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v22;
  *(_OWORD *)&v31[8] = v24;
  if (result)
  {
    if (v21) {
      *((void *)&v30 + 1) = 0;
    }
    if (v20) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::AssetMutateTrackingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AssetMutateTrackingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t *re::sortingLogObjects(re *this)
{
  {
    re::sortingLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Sorting");
  }
  return &re::sortingLogObjects(void)::logObjects;
}

UInt8 *re::NetworkSystem::LocalPeer::growFn(re::NetworkSystem::LocalPeer *this, void *a2, unsigned __int8 *a3)
{
  CFIndex Length = CFDataGetLength(this);
  uint64_t v6 = (3 * Length + 1) >> 1;
  if (v6 <= (uint64_t)a3) {
    uint64_t v6 = (uint64_t)a3;
  }
  CFDataIncreaseLength(this, v6 - Length);
  MutableBytePtr = CFDataGetMutableBytePtr(this);
  CFDataGetLength(this);
  return MutableBytePtr;
}

void re::NetworkSystem::LocalPeer::~LocalPeer(re::NetworkSystem::LocalPeer *this)
{
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 2) = 0;
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 25);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 13);
  re::DynamicString::deinit((re::NetworkSystem::LocalPeer *)((char *)this + 56));
}

void re::NetworkSystem::LocalPeer::enter(re::NetworkSystem::LocalPeer *this, re::ecs2::NetworkComponent *a2)
{
  unint64_t v5 = *(re::ecs2::NetworkComponent **)(*((void *)a2 + 2) + 296);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 152, (uint64_t *)&v5);
  unint64_t v5 = *(re::ecs2::NetworkComponent **)(*((void *)a2 + 2) + 296);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 200, (uint64_t *)&v5);
  unint64_t v5 = a2;
  uint64_t v4 = (char *)a2 + 8;
  re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add((uint64_t)this + 104, (uint64_t *)&v5);
  if (v5) {
}
  }

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsMove(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 24 * v9;
  return v11 + 16;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 24 * v9;
  return v11 + 16;
}

uint64_t re::NetworkSystem::LocalPeer::exit(re::NetworkSystem::LocalPeer *this, re::ecs2::NetworkComponent *a2)
{
  uint64_t v4 = (char *)this + 104;
  unint64_t v7 = a2;
  if (a2) {
    unint64_t v5 = (char *)a2 + 8;
  }
  re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove((uint64_t)v4, (uint64_t *)&v7);
  if (v7) {

  }
  unint64_t v7 = *(re::ecs2::NetworkComponent **)(*((void *)a2 + 2) + 296);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 200, (uint64_t *)&v7);
  unint64_t v7 = *(re::ecs2::NetworkComponent **)(*((void *)a2 + 2) + 296);
  return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 152, (uint64_t *)&v7);
}

re::NetworkSystem *re::NetworkSystem::NetworkSystem(re::NetworkSystem *this)
{
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)this = 0u;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *((void *)this + 11) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 5ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 6ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 72) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 42) = 0;
  *((_DWORD *)this + 86) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_DWORD *)this + 82) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 94) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_DWORD *)this + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 104) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0u;
  *((_DWORD *)this + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *((void *)this + 57) = 0;
  *(_OWORD *)((char *)this + 44ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((void *)this + 64) = 0;
  *((_DWORD *)this + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 30) = 0;
  *((_DWORD *)this + 126) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_DWORD *)this + 138) = 0;
  *((void *)this + 68) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((void *)this + 75) = 0;
  *((_DWORD *)this + 152) = 0;
  *((_DWORD *)this + 148) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((void *)this + 79) = 0;
  *(_OWORD *)((char *)this + 6re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *((void *)this + 86) = 0;
  *((_DWORD *)this + 174) = 0;
  *((_DWORD *)this + 17ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_DWORD *)this + 182) = 0;
  *((void *)this + 9ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_OWORD *)this + 44) = 0u;
  *((void *)this + 97) = 0;
  *((_DWORD *)this + 196) = 0;
  *((_DWORD *)this + 192) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_DWORD *)this + 204) = 0;
  *((void *)this + 101) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  *((void *)this + 108) = 0;
  *((_DWORD *)this + 218) = 0;
  *((_DWORD *)this + 214) = 0;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 84ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_DWORD *)this + 226) = 0;
  *((void *)this + 112) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((void *)this + 119) = 0;
  *((_DWORD *)this + 24ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_DWORD *)this + 236) = 0;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_DWORD *)this + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 248) = 0;
  *((void *)this + 123) = 0;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((void *)this + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 30) = 0;
  *((_DWORD *)this + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 62) = 0;
  *((_DWORD *)this + 258) = 0;
  *(_OWORD *)((char *)this + 100ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 10re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *((_DWORD *)this + 27ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((void *)this + 134) = 0;
  *((_OWORD *)this + 66) = 0u;
  *((void *)this + 141) = 0;
  *((_DWORD *)this + 284) = 0;
  *((_DWORD *)this + 28ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 292) = 0;
  *((void *)this + 145) = 0;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *((void *)this + 152) = 0;
  *((_DWORD *)this + 306) = 0;
  *((_DWORD *)this + 302) = 0;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *((_DWORD *)this + 314) = 0;
  *((void *)this + 1re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((void *)this + 163) = 0;
  *((_DWORD *)this + re::DynamicArray<re::AcousticSoundReductionMaterial>::clear((uint64_t)this + 328) = 0;
  *((_DWORD *)this + 324) = 0;
  *((_OWORD *)this + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_DWORD *)this + 336) = 0;
  *((void *)this + 167) = 0;
  *(_OWORD *)((char *)this + 132ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((void *)this + 174) = 0;
  *((_DWORD *)this + 35ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_DWORD *)this + 346) = 0;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1re::DynamicArray<re::AcousticSoundReductionMaterial>::clear((uint64_t)this + 368) = 0u;
  *((_DWORD *)this + 358) = 0;
  *((void *)this + 178) = 0;
  *((_OWORD *)this + 88) = 0u;
  *((void *)this + 185) = 0;
  *((_DWORD *)this + 372) = 0;
  *((_DWORD *)this + re::DynamicArray<re::AcousticSoundReductionMaterial>::clear((uint64_t)this + 368) = 0;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 9ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_DWORD *)this + 38ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((void *)this + 189) = 0;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((void *)this + 196) = 0;
  *((_DWORD *)this + 394) = 0;
  *((_DWORD *)this + 39ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_DWORD *)this + 402) = 0;
  *((void *)this + 20ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_OWORD *)this + 99) = 0u;
  *((void *)this + 207) = 0;
  *((_DWORD *)this + 4re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *((_DWORD *)this + 412) = 0;
  *((_OWORD *)this + 102) = 0u;
  *((_OWORD *)this + 101) = 0u;
  *((_DWORD *)this + 424) = 0;
  *((void *)this + 211) = 0;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *((void *)this + 218) = 0;
  *((_DWORD *)this + 438) = 0;
  *((_DWORD *)this + 434) = 0;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 172ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_DWORD *)this + 446) = 0;
  *((void *)this + 222) = 0;
  *((_OWORD *)this + 11ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((void *)this + 229) = 0;
  *((_DWORD *)this + 46ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_DWORD *)this + 4re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *((_OWORD *)this + 1re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_DWORD *)this + 468) = 0;
  *((void *)this + 233) = 0;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *((void *)this + 24ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_DWORD *)this + 482) = 0;
  *((_DWORD *)this + 478) = 0;
  *(_OWORD *)((char *)this + 188ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *((_DWORD *)this + 49ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((void *)this + 244) = 0;
  *((_OWORD *)this + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0u;
  *((void *)this + 251) = 0;
  *((_DWORD *)this + 504) = 0;
  *((_DWORD *)this + 50ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((_OWORD *)this + 124) = 0u;
  *((_OWORD *)this + 123) = 0u;
  *((_DWORD *)this + 512) = 0;
  *((void *)this + 255) = 0;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *((void *)this + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 62) = 0;
  *((_DWORD *)this + 526) = 0;
  *((_DWORD *)this + 522) = 0;
  *(_OWORD *)((char *)this + 20re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)((char *)this + 2072) = 0u;
  *((_DWORD *)this + 534) = 0;
  *((void *)this + 266) = 0;
  *((_OWORD *)this + 132) = 0u;
  *((void *)this + 273) = 0;
  *((_DWORD *)this + 548) = 0;
  *((_DWORD *)this + 544) = 0;
  *((_OWORD *)this + 135) = 0u;
  *((_OWORD *)this + 134) = 0u;
  *((_DWORD *)this + 558) = 0;
  *(_OWORD *)((char *)this + 220ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 22re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(void *)((char *)this + 2236) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 57ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(_OWORD *)((char *)this + 2re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 248) = 0u;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *(void *)((char *)this + 2284) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 582) = 0;
  *(_OWORD *)((char *)this + 2296) = 0u;
  *(_OWORD *)((char *)this + 2312) = 0u;
  *(void *)((char *)this + 2332) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 594) = 0;
  *(_OWORD *)((char *)this + 2344) = 0u;
  *(_OWORD *)((char *)this + 236ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(void *)((char *)this + 238ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0x7FFFFFFFLL;
  *((void *)this + 306) = 0;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 151) = 0u;
  *((_OWORD *)this + 15ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((void *)this + 307) = &unk_26E70A8A0;
  *((void *)this + 312) = 0;
  *((void *)this + 317) = 0;
  *((void *)this + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *((void *)this + 308) = this;
  *((void *)this + 317) = RESyncNetSessionObserverCreate();
  RESyncNetSessionObserverOnReceiveData();
  uint64_t v2 = (_anonymous_namespace_ *)RESyncNetSessionObserverOnParticipantLeave();
  *((_WORD *)this + 1272) = 256;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 260ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *((_DWORD *)this + 654) = 0;
  *(void *)((char *)this + 262ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *((_DWORD *)this + 666) = 0;
  *(void *)((char *)this + 2668) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 268ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 2696) = 0u;
  re::DynamicString::setCapacity((void *)this + 335, 0);
  *(_OWORD *)((char *)this + 2712) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *((void *)this + 343) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 688) = 0;
  *(_OWORD *)((char *)this + 276ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 2776) = 0u;
  *((_DWORD *)this + 698) = 0;
  *(void *)((char *)this + 2796) = 0x7FFFFFFFLL;
  *((void *)this + 351) = 0;
  *((void *)this + 353) = 0;
  *((void *)this + 352) = 0;
  *((_DWORD *)this + 708) = 0;
  *(_OWORD *)((char *)this + 284ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 28re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)((char *)this + 2868) = 0u;
  *(void *)((char *)this + 2884) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 732) = 0;
  *((_OWORD *)this + 182) = 0u;
  *((_OWORD *)this + 181) = 0u;
  *(void *)((char *)this + 2932) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 744) = 0;
  *((_OWORD *)this + 185) = 0u;
  *((_OWORD *)this + 184) = 0u;
  *(void *)((char *)this + 298ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0x7FFFFFFFLL;
  *((void *)this + 374) = 0;
  return this;
}

void re::NetworkSystem::~NetworkSystem(re::NetworkSystem *this)
{
  if (*((void *)this + 302))
  {
    re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear((uint64_t)this + 2712);
    re::Event<re::GeometricObjectBase>::raise((uint64_t)this + 1320, (uint64_t)this);
    if (*((void *)this + 303))
    {
      RESyncRelease();
      *((void *)this + 303) = 0;
    }
    if (*((void *)this + 304))
    {
      RESyncRelease();
      *((void *)this + 304) = 0;
    }
    if (*((void *)this + 305))
    {
      if (*((void *)this + 306)) {
        RESyncNetSessionRemoveObserver();
      }
      RESyncRelease();
      *((void *)this + 305) = 0;
    }
    RESyncRelease();
    *((void *)this + 306) = 0;
    uint64_t v2 = re::ServiceLocator::service<re::ServiceRegistry>(*((void *)this + 302));
    if (*((void *)this + 319))
    {
      RESyncMCServiceDestroy();
      *((void *)this + 319) = 0;
    }
    re::StringID::invalid((re::StringID *)&v11);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF913D0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF913D0))
    {
      qword_26AF913C8 = re::introspect_PeerVideoStreamingService(0);
      __cxa_guard_release(&qword_26AF913D0);
    }
    uint64_t v3 = qword_26AF913C8;
    re::StringID::StringID((re::StringID *)&v12, &v11);
    uint64_t v13 = v3;
    re::StringID::StringID((re::StringID *)v14, &v12);
    re::StringID::destroyString((re::StringID *)&v12);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v2 + 16, &v13);
    re::StringID::destroyString((re::StringID *)v14);
    re::StringID::destroyString((re::StringID *)&v11);
    unint64_t v5 = (re::PeerVideoStreamingManager *)*((void *)this + 321);
    if (v5)
    {
      uint64_t v6 = re::globalAllocators(v4)[2];
      re::PeerVideoStreamingManager::~PeerVideoStreamingManager(v5);
      (*(void (**)(uint64_t, re::PeerVideoStreamingManager *))(*(void *)v6 + 40))(v6, v5);
      *((void *)this + 3re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0;
    }
    re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear((uint64_t)this + 2584);
    re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear((uint64_t)this + 2632);
    re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear((uint64_t)this + 2296);
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 2344);
    re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 368);
    RESyncRelease();
    RESyncServiceRemoveObserver();
    RESyncRelease();
    *((void *)this + 32ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    RESyncRelease();
    if (*((void *)this + 176)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1408);
    }
    if (*((void *)this + 154)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1232);
    }
    if (*((void *)this + 231)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1848);
    }
    if (*(void *)this) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this);
    }
    if (*((void *)this + 11)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
    }
    if (*((void *)this + 22)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 176);
    }
    if (*((void *)this + 33)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 264);
    }
    if (*((void *)this + 44)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 352);
    }
    if (*((void *)this + 55)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 440);
    }
    if (*((void *)this + 66)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 528);
    }
    if (*((void *)this + 77)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 616);
    }
    if (*((void *)this + 88)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 704);
    }
    if (*((void *)this + 99)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 792);
    }
    if (*((void *)this + 110)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 880);
    }
    if (*((void *)this + 121)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 968);
    }
    if (*((void *)this + 132)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1056);
    }
    if (*((void *)this + 143)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1144);
    }
    if (*((void *)this + 220)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1760);
    }
    if (*((void *)this + 187)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1496);
    }
    if (*((void *)this + 198)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1584);
    }
    if (*((void *)this + 253)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 2024);
    }
    if (*((void *)this + 264)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 2112);
    }
    if (*((void *)this + 209)) {
      re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1672);
    }
  }
  re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 368);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 362);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 356);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 2808);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 345);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 339);
  re::DynamicString::deinit((re::NetworkSystem *)((char *)this + 2680));
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 329);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 323);
  re::internal::NetworkSystemAssetMessaging::~NetworkSystemAssetMessaging((re::NetworkSystem *)((char *)this + 2456));
  unint64_t v7 = *((void *)this + 301);
  if (v7) {
    dispatch_release(v7);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 293);
  re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)this + 287);
  re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::deinit((uint64_t *)this + 281);
  re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 275);
  re::Event<re::Engine>::~Event((uint64_t)this + 2112);
  re::Event<re::Engine>::~Event((uint64_t)this + 2024);
  if (*((void *)this + 242)) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1936);
  }
  uint64_t v8 = *((void *)this + 247);
  if (v8)
  {
    if (*((void *)this + 251)) {
      (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    }
    *((void *)this + 251) = 0;
    *((void *)this + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 248) = 0;
    *((void *)this + 249) = 0;
    *((void *)this + 247) = 0;
    ++*((_DWORD *)this + 500);
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1936);
  re::Event<re::Engine>::~Event((uint64_t)this + 1848);
  if (*((void *)this + 220)) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1760);
  }
  uint64_t v9 = *((void *)this + 225);
  if (v9)
  {
    if (*((void *)this + 229)) {
      (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
    }
    *((void *)this + 229) = 0;
    *((void *)this + 226) = 0;
    *((void *)this + 227) = 0;
    *((void *)this + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0;
    ++*((_DWORD *)this + 456);
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1760);
  re::Event<re::Engine>::~Event((uint64_t)this + 1672);
  re::Event<re::Engine>::~Event((uint64_t)this + 1584);
  re::Event<re::Engine>::~Event((uint64_t)this + 1496);
  if (*((void *)this + 176)) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1408);
  }
  uint64_t v10 = *((void *)this + 181);
  if (v10)
  {
    if (*((void *)this + 185)) {
      (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    }
    *((void *)this + 185) = 0;
    *((void *)this + 182) = 0;
    *((void *)this + 183) = 0;
    *((void *)this + 181) = 0;
    ++*((_DWORD *)this + 368);
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1408);
  re::Event<re::Engine>::~Event((uint64_t)this + 1320);
  re::Event<re::Engine>::~Event((uint64_t)this + 1232);
  re::Event<re::Engine>::~Event((uint64_t)this + 1144);
  re::Event<re::Engine>::~Event((uint64_t)this + 1056);
  re::Event<re::Engine>::~Event((uint64_t)this + 968);
  re::Event<re::Engine>::~Event((uint64_t)this + 880);
  re::Event<re::Engine>::~Event((uint64_t)this + 792);
  re::Event<re::Engine>::~Event((uint64_t)this + 704);
  re::Event<re::Engine>::~Event((uint64_t)this + 616);
  re::Event<re::Engine>::~Event((uint64_t)this + 528);
  re::Event<re::Engine>::~Event((uint64_t)this + 440);
  re::Event<re::Engine>::~Event((uint64_t)this + 352);
  re::Event<re::Engine>::~Event((uint64_t)this + 264);
  re::Event<re::Engine>::~Event((uint64_t)this + 176);
  re::Event<re::Engine>::~Event((uint64_t)this + 88);
  re::Event<re::Engine>::~Event((uint64_t)this);
}

void re::NetworkSystem::init(uint64_t a1, uint64_t a2)
{
  v94[18] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 2544) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    dispatch_retain(*(dispatch_object_t *)(a2 + 8));
  }
  unint64_t v5 = *(NSObject **)(a1 + 2408);
  *(void *)(a1 + 2408) = v4;
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 88), 0);
  ++*(_DWORD *)(a1 + 112);
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 176), 0);
  ++*(_DWORD *)(a1 + 200);
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 264), 0);
  ++*(_DWORD *)(a1 + 288);
  uint64_t v10 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 352), 0);
  ++*(_DWORD *)(a1 + 376);
  StringID v11 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 440), 0);
  ++*(_DWORD *)(a1 + 464);
  StringID v12 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 528), 0);
  ++*(_DWORD *)(a1 + 552);
  uint64_t v13 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 616), 0);
  ++*(_DWORD *)(a1 + 640);
  unint64_t v14 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 704), 0);
  ++*(_DWORD *)(a1 + 728);
  unint64_t v15 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 792), 0);
  ++*(_DWORD *)(a1 + 816);
  long long v16 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 880), 0);
  ++*(_DWORD *)(a1 + 904);
  uint64_t v17 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 968), 0);
  ++*(_DWORD *)(a1 + 992);
  long long v18 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1056), 0);
  ++*(_DWORD *)(a1 + 1080);
  long long v19 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1144), 0);
  ++*(_DWORD *)(a1 + 1168);
  uint64_t v20 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1320), 0);
  ++*(_DWORD *)(a1 + 1344);
  uint64_t v21 = (_anonymous_namespace_ *)re::DynamicArray<re::Event<re::NetworkSystem,unsigned long long,RESyncPendingCommitAction *>::Subscription>::setCapacity((void *)(a1 + 1760));
  ++*(_DWORD *)(a1 + 1784);
  long long v22 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1848), 0);
  ++*(_DWORD *)(a1 + 1872);
  long long v23 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1232), 0);
  ++*(_DWORD *)(a1 + 1256);
  long long v24 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1408), 0);
  ++*(_DWORD *)(a1 + 1432);
  unint64_t v25 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1496), 0);
  ++*(_DWORD *)(a1 + 1520);
  unint64_t v26 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1584), 0);
  ++*(_DWORD *)(a1 + 1608);
  uint64_t v27 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 2024), 0);
  ++*(_DWORD *)(a1 + 2048);
  unint64_t v28 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 2112), 0);
  ++*(_DWORD *)(a1 + 2136);
  unint64_t v29 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 1672), 0);
  ++*(_DWORD *)(a1 + 1696);
  *(void *)(a1 + 2448) = RESyncNetSessionObserverCreate();
  uint64_t v76 = MEMORY[0x263EF8330];
  uint64_t v77 = 0x40000000;
  uint64_t v78 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke;
  float32x4_t v79 = &__block_descriptor_tmp_20;
  uint64_t v80 = a1;
  RESyncNetSessionObserverOnPeerDidPause();
  uint64_t v71 = MEMORY[0x263EF8330];
  uint64_t v72 = 0x40000000;
  uint64_t v73 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_2;
  uint64_t v74 = &__block_descriptor_tmp_1;
  uint64_t v75 = a1;
  RESyncNetSessionObserverOnPeerDidResume();
  uint64_t v66 = MEMORY[0x263EF8330];
  uint64_t v67 = 0x40000000;
  uint64_t v68 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_3;
  uint64_t v69 = &__block_descriptor_tmp_3_0;
  uint64_t v70 = a1;
  RESyncNetSessionObserverOnParticipantJoin();
  uint64_t v61 = MEMORY[0x263EF8330];
  uint64_t v62 = 0x40000000;
  int64_t v63 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_4;
  int64_t v64 = &__block_descriptor_tmp_5;
  uint64_t v65 = a1;
  RESyncNetSessionObserverOnParticipantLeave();
  uint64_t v30 = re::ServiceLocator::service<re::ServiceRegistry>(*(void *)(a1 + 2416));
  size_t Size = RESyncServiceConfigGetSize();
  MEMORY[0x270FA5388](Size);
  bzero((char *)v54 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), Size);
  uint64_t DefaultNoAlloc = RESyncServiceConfigCreateDefaultNoAlloc();
  int v34 = *(unsigned __int8 *)(a1 + 2544);
  uint64_t v55 = v30;
  if (v34)
  {
    v54[1] = DefaultNoAlloc;
    v54[2] = a2;
    {
      if (DefaultNoAlloc)
      {
        re::introspect<re::PersistedSchema>(void)::info = re::introspect_PersistedSchema(0);
      }
    }
    uint64_t v35 = re::introspect<re::PersistedSchema>(void)::info;
    int v89 = 0;
    memset(v88, 0, sizeof(v88));
    uint64_t v90 = 0x7FFFFFFFLL;
    uint64_t v36 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)DefaultNoAlloc);
    if (*((void *)v36 + 3))
    {
      uint64_t v37 = (uint64_t)v36;
      unint64_t v38 = 0;
      do
      {
        uint64_t v39 = re::ecs2::ComponentTypeRegistry::operator[](v37, v38);
        uint64_t v40 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(void *)v39 + 48))(v39);
        uint64_t v36 = (char *)re::PersistedSchema::addIntrospectionGraph((re::PersistedSchema *)v88, v40);
        ++v38;
      }
      while (v38 < *(void *)(v37 + 24));
    }
    memset(v87, 0, sizeof(v87));
    re::DynamicString::setCapacity(v87, 0);
    uint64_t v41 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v87, 0x10000uLL);
    v86[0] = &unk_26E715070;
    v86[1] = v87;
    {
      memset(&v85, 0, sizeof(v85));
      if (v87[1]) {
        std::string::size_type v43 = v87[1] >> 1;
      }
      else {
        std::string::size_type v43 = LOBYTE(v87[1]) >> 1;
      }
      std::string::reserve(&v85, v43);
      std::regex_traits<char>::regex_traits(&v81);
      uint64_t v84 = 0;
      long long v83 = 0u;
      long long v82 = 0u;
      std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
    }
    re::internal::assertLog((re::internal *)4, v42, "assertion failure: '%s' (%s:line %i) Failed to get the schema hash for all the components.", "!\"Unreachable code\"", "calculateComponentsSchemaHash", 505);
    _os_crash();
    __break(1u);
    uint64_t v53 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke(v53);
  }
  else
  {
    RESyncServiceConfigSetSchemaHash();
    RESyncServiceConfigSetDispatchQueue();
    *(void *)(a1 + 256ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = RESyncCreateSyncService();
    *(void *)(a1 + 2576) = RESyncServiceObserverCreate();
    uint64_t v56 = MEMORY[0x263EF8330];
    uint64_t v57 = 0x40000000;
    uint64_t v58 = ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_5;
    int v59 = &__block_descriptor_tmp_7;
    uint64_t v60 = a1;
    RESyncServiceObserverOnDataArrive();
    RESyncServiceAddObserver();
    uint64_t v44 = (re::ecs2::NetworkEntityState *)RESyncServiceConfigDestruct();
    re::ecs2::NetworkEntityState::makeSyncInfo(v44);
    RESyncServiceRegisterTypeInfo();
    RESyncRelease();
    uint64_t v45 = (re *)RESyncCommitListCreate();
    *(void *)(a1 + 2392) = v45;
    uint64_t v46 = re::globalAllocators(v45);
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46[2] + 32))(v46[2], 312, 8);
    *(_OWORD *)(v47 + 24) = 0u;
    *(_OWORD *)(v47 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
    *(_OWORD *)(v47 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
    *(_OWORD *)(v47 + 72) = 0u;
    *(_OWORD *)(v47 + 88) = 0u;
    *(_OWORD *)(v47 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 104) = 0u;
    *(_OWORD *)(v47 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
    *(_OWORD *)(v47 + 136) = 0u;
    *(_OWORD *)(v47 + 152) = 0u;
    *(_OWORD *)(v47 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 168) = 0u;
    *(_OWORD *)(v47 + 184) = 0u;
    *(_OWORD *)(v47 + 20ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
    *(_OWORD *)(v47 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
    *(_OWORD *)(v47 + 232) = 0u;
    *(_OWORD *)(v47 + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 248) = 0u;
    *(_OWORD *)(v47 + 8) = 0u;
    *(_OWORD *)(v47 + 264) = 0u;
    *(_OWORD *)(v47 + 28ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
    *(_OWORD *)(v47 + 296) = 0u;
    *(void *)uint64_t v47 = &unk_26E6F8D00;
    uint64_t v48 = MEMORY[0x263EF83A0];
    dispatch_retain(MEMORY[0x263EF83A0]);
    *(void *)(v47 + 8) = v48;
    *(void *)(v47 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
    *(unsigned char *)(v47 + 32) = 0;
    *(void *)(v47 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    *(_WORD *)(v47 + 48) = 0;
    *(void *)(v47 + 112) = 0;
    *(_OWORD *)(v47 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
    *(_OWORD *)(v47 + 72) = 0u;
    *(_OWORD *)(v47 + 88) = 0u;
    *(_DWORD *)(v47 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 104) = 0;
    *(_DWORD *)(v47 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 1;
    *(_OWORD *)(v47 + 128) = 0u;
    *(_OWORD *)(v47 + 144) = 0u;
    *(_DWORD *)(v47 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    *(void *)(v47 + 164) = 0x7FFFFFFFLL;
    *(_OWORD *)(v47 + 176) = 0u;
    *(_OWORD *)(v47 + 192) = 0u;
    *(_DWORD *)(v47 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = 0;
    *(void *)(v47 + 212) = 0x7FFFFFFFLL;
    *(void *)(v47 + 224) = 0;
    *(void *)(v47 + 232) = 0;
    *(_DWORD *)(v47 + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 248) = 0;
    *(void *)(v47 + 24ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    *(void *)(v47 + 296) = 0;
    *(_DWORD *)(v47 + 304) = 0;
    *(_OWORD *)(v47 + 2re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
    *(_OWORD *)(v47 + 272) = 0u;
    *(_DWORD *)(v47 + re::DynamicArray<re::AcousticScatteringMaterial>::clear((uint64_t)this + 288) = 0;
    *(void *)(a1 + 2568) = v47;
    int v49 = *(NSObject **)(a2 + 8);
    if (v49)
    {
      dispatch_retain(*(dispatch_object_t *)(a2 + 8));
      uint64_t v47 = *(void *)(a1 + 2568);
    }
    uint64_t v50 = *(NSObject **)(a1 + 2416);
    v91[0] = v49;
    v91[1] = v50;
    v91[2] = *(dispatch_object_t *)(a1 + 2560);
    re::PeerVideoStreamingManager::init(v47, (uint64_t)v91);
    uint64_t v51 = *(void **)(a1 + 2568);
    re::StringID::invalid((re::StringID *)v92);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF913D0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF913D0))
    {
      qword_26AF913C8 = re::introspect_PeerVideoStreamingService(0);
      __cxa_guard_release(&qword_26AF913D0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&v93, (const re::IntrospectionBase *)qword_26AF913C8, v92, v51);
    uint64_t v52 = v55;
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v55 + 16, &v93);
    re::StringID::destroyString((re::StringID *)v94);
    re::StringID::destroyString((re::StringID *)v92);
    if (v91[0]) {
      dispatch_release(v91[0]);
    }
    *(void *)(a1 + 2992) = re::ServiceLocator::serviceOrNull<re::FrameManager>(v52);
  }
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke(uint64_t a1)
{
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_2(uint64_t a1)
{
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  IsLocal = (re::NetworkSystemFeatureFlags *)RESyncNetSessionGetIsLocal();
  if (!IsLocal || !re::NetworkSystemFeatureFlags::enableAltSharedApp(IsLocal)) {
    return;
  }
  unint64_t PeerID = RESyncParticipantGetPeerID();
  unint64_t v4 = PeerID;
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (PeerID ^ (PeerID >> 30))) ^ ((0xBF58476D1CE4E5B9 * (PeerID ^ (PeerID >> 30))) >> 27));
  unint64_t v6 = v5 ^ (v5 >> 31);
  if (*(void *)(v1 + 2944))
  {
    uint64_t v7 = *(unsigned int *)(*(void *)(v1 + 2952) + 4 * (v6 % *(unsigned int *)(v1 + 2968)));
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v12 = *(void *)(v1 + 2960);
      if (*(void *)(v12 + 272 * v7 + 16) == PeerID) {
        return;
      }
      while (1)
      {
        LODWORD(v7) = *(_DWORD *)(v12 + 272 * v7 + 8) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v12 + 272 * v7 + 16) == PeerID) {
          return;
        }
      }
    }
  }
  char HasForceAuthorityCapability = RESyncParticipantHasForceAuthorityCapability();
  if (!*(void *)(v1 + 2944))
  {
    LODWORD(v9) = 0;
    goto LABEL_16;
  }
  unint64_t v9 = v6 % *(unsigned int *)(v1 + 2968);
  uint64_t v10 = *(unsigned int *)(*(void *)(v1 + 2952) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_16:
    uint64_t v13 = *(unsigned int *)(v1 + 2980);
    if (v13 == 0x7FFFFFFF)
    {
      uint64_t v13 = *(unsigned int *)(v1 + 2976);
      int v14 = v13;
      if (v13 == *(_DWORD *)(v1 + 2968))
      {
        re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v1 + 2944, 2 * *(_DWORD *)(v1 + 2972));
        LODWORD(v9) = v6 % *(unsigned int *)(v1 + 2968);
        int v14 = *(_DWORD *)(v1 + 2976);
      }
      *(_DWORD *)(v1 + 2976) = v14 + 1;
      uint64_t v15 = *(void *)(v1 + 2960);
      int v16 = *(_DWORD *)(v15 + 272 * v13 + 8);
    }
    else
    {
      uint64_t v15 = *(void *)(v1 + 2960);
      int v16 = *(_DWORD *)(v15 + 272 * v13 + 8);
      *(_DWORD *)(v1 + 298ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v16 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v15 + 272 * v13 + 8) = v16 | 0x80000000;
    *(_DWORD *)(*(void *)(v1 + 2960) + 272 * v13 + 8) = *(_DWORD *)(*(void *)(v1 + 2960) + 272 * v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v1 + 2952) + 4 * v9);
    *(void *)(*(void *)(v1 + 2960) + 272 * vre::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = v6;
    *(void *)(*(void *)(v1 + 2960) + 272 * v13 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v4;
    uint64_t v17 = *(void *)(v1 + 2960) + 272 * v13;
    uint64_t v18 = v17;
    *(void *)(v17 + 24) = v4;
    *(unsigned char *)(v17 + 32) = HasForceAuthorityCapability;
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    *(void *)(v17 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = Mutable;
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    *(_OWORD *)(v17 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
    v17 += 80;
    *(void *)(v17 - 32) = MutableBytePtr;
    *(void *)(v17 - 24) = 0;
    *(void *)(v17 - re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = Mutable;
    *(void *)(v17 - 8) = re::NetworkSystem::LocalPeer::growFn;
    *(_OWORD *)(v17 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
    re::DynamicString::setCapacity((void *)v17, 0);
    *(_DWORD *)(v17 + 32) = 6;
    *(_OWORD *)(v17 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
    *(_OWORD *)(v17 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0u;
    *(_OWORD *)(v17 + 68) = 0u;
    *(void *)(v17 + 84) = 0x7FFFFFFFLL;
    *(_DWORD *)(v17 + 128) = 0;
    *(_OWORD *)(v17 + 96) = 0u;
    *(_OWORD *)(v17 + 112) = 0u;
    *(void *)(v17 + 132) = 0x7FFFFFFFLL;
    *(_OWORD *)(v17 + 144) = 0u;
    *(_OWORD *)(v17 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0u;
    *(_DWORD *)(v17 + 176) = 0;
    *(void *)(v18 + 26ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0x7FFFFFFFLL;
    *(_DWORD *)(*(void *)(v1 + 2952) + 4 * v9) = v13;
    ++*(_DWORD *)(v1 + 2972);
    ++*(_DWORD *)(v1 + 2984);
    goto LABEL_22;
  }
  uint64_t v11 = *(void *)(v1 + 2960);
  while (*(void *)(v11 + 272 * v10 + 16) != v4)
  {
    LODWORD(v1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(_DWORD *)(v11 + 272 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_16;
    }
  }
LABEL_22:
  uint64_t v21 = re::ServiceLocator::service<re::ecs2::ECSService>(*(void *)(v1 + 2416));
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 104))(v21);
  uint64_t v23 = *(void *)(v22 + 24);
  if (v23)
  {
    long long v24 = *(uint64_t **)(v22 + 40);
    unint64_t v25 = &v24[v23];
    uint64_t v26 = v1 + 2712;
    do
    {
      uint64_t v27 = *v24;
      if (*v24) {
        id v28 = (id)(v27 + 8);
      }
      unint64_t v29 = *(void **)(v27 + 104);
      uint64_t v30 = v29[25];
      if (v30)
      {
        uint64_t v39 = v29[25];
        id v31 = (id)(v30 + 8);
        re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v26, &v39);
        if (v39) {

        }
        unint64_t v29 = *(void **)(v27 + 104);
      }
      uint64_t v32 = v29[41];
      if (!v32) {
        goto LABEL_39;
      }
      uint64_t v33 = (uint64_t *)v29[43];
      uint64_t v34 = 8 * v32;
      do
      {
        uint64_t v35 = *v33;
        if (*v33) {
          id v36 = (id)(v35 + 8);
        }
        uint64_t v37 = *(void *)(v35 + 200);
        if (v37)
        {
          uint64_t v39 = *(void *)(v35 + 200);
          id v38 = (id)(v37 + 8);
          re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v26, &v39);
          if (v39) {
        }
          }
        ++v33;
        v34 -= 8;
      }
      while (v34);
      if (v27) {
LABEL_39:
      }

      ++v24;
    }
    while (v24 != v25);
  }
}

uint64_t re::ServiceLocator::service<re::ecs2::ECSService>(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(a1);
  if (!result)
  {
    uint64_t v2 = (re::internal *)re::introspect<re::ecs2::ECSService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t v3 = (re::internal *)re::introspect<re::ecs2::ECSService>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if (v7[8]) {
      unint64_t v5 = *(unsigned char **)&v8[7];
    }
    else {
      unint64_t v5 = v8;
    }
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  IsLocal = (re::NetworkSystemFeatureFlags *)RESyncNetSessionGetIsLocal();
  if (IsLocal && re::NetworkSystemFeatureFlags::enableAltSharedApp(IsLocal))
  {
    unint64_t PeerID = RESyncParticipantGetPeerID();
    if (*(void *)(v1 + 2944))
    {
      unint64_t v4 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (PeerID ^ (PeerID >> 30))) ^ ((0xBF58476D1CE4E5B9 * (PeerID ^ (PeerID >> 30))) >> 27));
      unint64_t v5 = (v4 ^ (v4 >> 31)) % *(unsigned int *)(v1 + 2968);
      uint64_t v6 = *(void *)(v1 + 2952);
      uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
      if (v7 != 0x7FFFFFFF)
      {
        uint64_t v8 = *(void *)(v1 + 2960);
        if (*(void *)(v8 + 272 * v7 + 16) == PeerID)
        {
          *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 272 * v7 + 8) & 0x7FFFFFFF;
LABEL_10:
          uint64_t v11 = *(void *)(v1 + 2960);
          uint64_t v12 = v11 + 272 * v7;
          int v15 = *(_DWORD *)(v12 + 8);
          int v14 = (int *)(v12 + 8);
          int v13 = v15;
          if (v15 < 0)
          {
            *int v14 = v13 & 0x7FFFFFFF;
            re::NetworkSystem::LocalPeer::~LocalPeer((re::NetworkSystem::LocalPeer *)(v11 + 272 * v7 + 24));
            uint64_t v11 = *(void *)(v1 + 2960);
            int v13 = *(_DWORD *)(v11 + 272 * v7 + 8);
          }
          *(_DWORD *)(v11 + 272 * v7 + 8) = *(_DWORD *)(v1 + 2980) | v13 & 0x80000000;
          *(_DWORD *)(v1 + 298ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v7;
          --*(_DWORD *)(v1 + 2972);
          ++*(_DWORD *)(v1 + 2984);
        }
        else
        {
          while (1)
          {
            unsigned int v9 = v7;
            int v10 = *(_DWORD *)(v8 + 272 * v7 + 8);
            uint64_t v7 = v10 & 0x7FFFFFFF;
            if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v8 + 272 * v7 + 16) == PeerID)
            {
              *(_DWORD *)(v8 + 272 * v9 + 8) = *(_DWORD *)(v8 + 272 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 272 * v7 + 8) & 0x7FFFFFFF;
              goto LABEL_10;
            }
          }
        }
      }
    }
    uint64_t v16 = re::ServiceLocator::service<re::ecs2::ECSService>(*(void *)(v1 + 2416));
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 104))(v16);
    uint64_t v18 = *(void *)(v17 + 24);
    if (v18)
    {
      long long v19 = *(uint64_t **)(v17 + 40);
      uint64_t v20 = &v19[v18];
      uint64_t v21 = v1 + 2712;
      do
      {
        uint64_t v22 = *v19;
        if (*v19) {
          id v23 = (id)(v22 + 8);
        }
        long long v24 = *(void **)(v22 + 104);
        uint64_t v25 = v24[25];
        if (v25)
        {
          uint64_t v34 = v24[25];
          id v26 = (id)(v25 + 8);
          re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v21, &v34);
          if (v34) {

          }
          long long v24 = *(void **)(v22 + 104);
        }
        uint64_t v27 = v24[41];
        if (!v27) {
          goto LABEL_30;
        }
        id v28 = (uint64_t *)v24[43];
        uint64_t v29 = 8 * v27;
        do
        {
          uint64_t v30 = *v28;
          if (*v28) {
            id v31 = (id)(v30 + 8);
          }
          uint64_t v32 = *(void *)(v30 + 200);
          if (v32)
          {
            uint64_t v34 = *(void *)(v30 + 200);
            id v33 = (id)(v32 + 8);
            re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v21, &v34);
            if (v34) {
          }
            }
          ++v28;
          v29 -= 8;
        }
        while (v29);
        if (v22) {
LABEL_30:
        }

        ++v19;
      }
      while (v19 != v20);
    }
  }
}

uint64_t re::ServiceLocator::service<re::ServiceRegistry>(uint64_t a1)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ServiceRegistry>(a1);
  if (!result)
  {
    uint64_t v2 = (re::internal *)re::introspect<re::ServiceRegistry>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v2, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t v3 = (re::internal *)re::introspect<re::ServiceRegistry>();
    re::StringID::invalid((re::StringID *)v6);
    re::internal::missingServiceErrorMessage(v3, (const re::IntrospectionBase *)v6, (re::DynamicString *)v7);
    if (v7[8]) {
      unint64_t v5 = *(unsigned char **)&v8[7];
    }
    else {
      unint64_t v5 = v8;
    }
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v5);
    re::DynamicString::~DynamicString((re::DynamicString *)v7);
    re::StringID::~StringID((re::StringID *)v6);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void ___ZN2re13NetworkSystem4initERKNS0_6ConfigE_block_invoke_5(uint64_t a1)
{
}

void re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_113, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          if (*(void *)(v6 + 16))
          {
            RESyncRelease();
            *(void *)(v6 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
            unint64_t v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v8;
  }
}

double re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::NetworkSystem::LocalPeer::~LocalPeer((re::NetworkSystem::LocalPeer *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 272;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::NetworkSystem::initMCService(re::NetworkSystem *this)
{
  v5[1] = *MEMORY[0x263EF8340];
  size_t Size = RESyncMCServiceConfigGetSize();
  MEMORY[0x270FA5388](Size);
  bzero((char *)v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), Size);
  RESyncMCServiceConfigCreateNoAlloc();
  RESyncMCServiceConfigSetDispatchQueue();
  RESyncMCServiceConfigSetSyncService();
  *((void *)this + 319) = RESyncMCServiceCreate();
  return RESyncMCServiceConfigDestroyNoDealloc();
}

void re::NetworkSystem::beforeFrameUpdate(re::NetworkSystem *this)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 6006, (uint64_t)this);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v2);
  re::NetworkSystem::prepareObjectStores(this);
  if (*((void *)this + 320))
  {
    RESyncServiceBeforeFrameUpdate();
    re::NetworkSystem::setAclCount = 0;
    re::NetworkSystem::resolveSelfViewCount = 0;
    re::NetworkSystem::viewFilterListCount = 0;
    re::NetworkSystem::resolveSelfViewTime = 0;
  }
  re::ProfilerTimeGuard<(re::ProfilerStatistic)16>::end((uint64_t)v2);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
}

uint64_t re::NetworkSystem::destroyObject(uint64_t a1)
{
  while (RESyncableGetChildCount())
  {
    uint64_t Child = RESyncableGetChild();
    if (Child)
    {
      uint64_t v4 = Child;
      RESyncRetain();
      re::NetworkSystem::destroyObject(a1, &v4);
      RESyncRelease();
    }
  }
  return RESyncServiceRemoveSyncable();
}

void re::NetworkSystem::afterFrameUpdate(re::NetworkSystem *this)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 6014, (uint64_t)this);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v2);
  if (*((void *)this + 320)) {
    RESyncServiceAfterFrameUpdate();
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  re::ProfilerTimeGuard<(re::ProfilerStatistic)17>::end((uint64_t)v2);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
}

void re::NetworkSystem::prepareObjectStores(re::NetworkSystem *this)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::ecs2::ComponentTypeRegistry::instance(this);
  unint64_t v3 = *((void *)v2 + 3);
  if (v3 > *((void *)this + 300))
  {
    uint64_t v4 = (uint64_t)v2;
    unint64_t v5 = (char *)this + 2808;
    uint64_t v6 = re::ecs2::ComponentTypeRegistry::operator[]((uint64_t)v2, v3 - 1);
    re::DynamicArray<double>::resize((uint64_t)this + 2808, *(unsigned __int16 *)(v6 + 16) + 1);
    unint64_t v7 = *((void *)this + 300);
    if (v7 < v3)
    {
      uint64_t v44 = (unint64_t *)((char *)this + 2896);
      uint64_t v45 = (unint64_t *)((char *)this + 2848);
      uint64_t v46 = (void *)((char *)this + 2760);
      do
      {
        int v8 = (unsigned __int16 *)re::ecs2::ComponentTypeRegistry::operator[](v4, v7);
        unint64_t v9 = *((void *)v8 + 3);
        unint64_t v10 = v9 >> 1;
        v50[0] = v9 >> 1;
        uint64_t v11 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)v8 + 48))(v8);
        re::ecs2::IntrospectedNetworkTypeHelper::makeTypeInfo((const re::IntrospectionBase *)v8, v12, v11, &v47);
        if (!v47) {
          goto LABEL_46;
        }
        int v13 = (re::NetworkSystemFeatureFlags *)RESyncServiceRegisterTypeInfo();
        unint64_t v14 = v10 ^ (v9 >> 31);
        if (re::NetworkSystemFeatureFlags::enableAltSharedApp(v13))
        {
          if (v48)
          {
            unint64_t v15 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
            unint64_t v16 = v15 ^ (v15 >> 31);
            unint64_t v17 = *v45;
            if (!*v45
              || (unint64_t v17 = v16 % *((unsigned int *)this + 718),
                  uint64_t v18 = *(unsigned int *)(*((void *)this + 357) + 4 * v17),
                  v18 == 0x7FFFFFFF))
            {
LABEL_12:
              uint64_t v20 = *((unsigned int *)this + 721);
              if (v20 == 0x7FFFFFFF)
              {
                uint64_t v20 = *((unsigned int *)this + 720);
                int v21 = v20;
                if (v20 == *((_DWORD *)this + 718))
                {
                  re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v45, 2 * *((_DWORD *)this + 719));
                  unint64_t v17 = v16 % *((unsigned int *)this + 718);
                  int v21 = *((_DWORD *)this + 720);
                }
                *((_DWORD *)this + 72ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v21 + 1;
                uint64_t v22 = *((void *)this + 358);
                int v23 = *(_DWORD *)(v22 + 32 * v20 + 8);
              }
              else
              {
                uint64_t v22 = *((void *)this + 358);
                int v23 = *(_DWORD *)(v22 + 32 * v20 + 8);
                *((_DWORD *)this + 7re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = v23 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v22 + 32 * v20 + 8) = v23 | 0x80000000;
              *(_DWORD *)(*((void *)this + 358) + 32 * v20 + 8) = *(_DWORD *)(*((void *)this + 358) + 32 * v20 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 357) + 4 * v17);
              *(void *)(*((void *)this + 358) + 32 * v2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v16;
              *(void *)(*((void *)this + 358) + 32 * v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
              *(void *)(*((void *)this + 358) + 32 * v20 + 24) = v48;
              *(_DWORD *)(*((void *)this + 357) + 4 * v17) = v20;
              ++*((_DWORD *)this + 719);
              ++*((_DWORD *)this + 722);
              unint64_t v5 = (char *)this + 2808;
            }
            else
            {
              uint64_t v19 = *((void *)this + 358);
              while (*(void *)(v19 + 32 * v18 + 16) != v10)
              {
                uint64_t v18 = *(_DWORD *)(v19 + 32 * v18 + 8) & 0x7FFFFFFF;
                if (v18 == 0x7FFFFFFF) {
                  goto LABEL_12;
                }
              }
            }
          }
          if (v49)
          {
            unint64_t v24 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
            unint64_t v25 = v24 ^ (v24 >> 31);
            unint64_t v26 = *v44;
            if (!*v44
              || (unint64_t v26 = v25 % *((unsigned int *)this + 730),
                  uint64_t v27 = *(unsigned int *)(*((void *)this + 363) + 4 * v26),
                  v27 == 0x7FFFFFFF))
            {
LABEL_24:
              uint64_t v29 = *((unsigned int *)this + 733);
              if (v29 == 0x7FFFFFFF)
              {
                uint64_t v29 = *((unsigned int *)this + 732);
                int v30 = v29;
                if (v29 == *((_DWORD *)this + 730))
                {
                  re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v44, 2 * *((_DWORD *)this + 731));
                  unint64_t v26 = v25 % *((unsigned int *)this + 730);
                  int v30 = *((_DWORD *)this + 732);
                }
                *((_DWORD *)this + 732) = v30 + 1;
                uint64_t v31 = *((void *)this + 364);
                int v32 = *(_DWORD *)(v31 + 32 * v29 + 8);
              }
              else
              {
                uint64_t v31 = *((void *)this + 364);
                int v32 = *(_DWORD *)(v31 + 32 * v29 + 8);
                *((_DWORD *)this + 733) = v32 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v31 + 32 * v29 + 8) = v32 | 0x80000000;
              *(_DWORD *)(*((void *)this + 364) + 32 * v29 + 8) = *(_DWORD *)(*((void *)this + 364) + 32 * v29 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 363) + 4 * v26);
              *(void *)(*((void *)this + 364) + 32 * v29) = v25;
              *(void *)(*((void *)this + 364) + 32 * v29 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
              *(void *)(*((void *)this + 364) + 32 * v29 + 24) = v49;
              *(_DWORD *)(*((void *)this + 363) + 4 * v26) = v29;
              ++*((_DWORD *)this + 731);
              ++*((_DWORD *)this + 734);
              unint64_t v5 = (char *)this + 2808;
            }
            else
            {
              uint64_t v28 = *((void *)this + 364);
              while (*(void *)(v28 + 32 * v27 + 16) != v10)
              {
                uint64_t v27 = *(_DWORD *)(v28 + 32 * v27 + 8) & 0x7FFFFFFF;
                if (v27 == 0x7FFFFFFF) {
                  goto LABEL_24;
                }
              }
            }
          }
        }
        *(void *)&v59[0] = v8;
        unint64_t v33 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
        unint64_t v34 = v33 ^ (v33 >> 31);
        if (*v46)
        {
          unint64_t v35 = v34 % *((unsigned int *)this + 696);
          uint64_t v36 = *(unsigned int *)(*((void *)this + 346) + 4 * v35);
          if (v36 != 0x7FFFFFFF)
          {
            uint64_t v37 = *((void *)this + 347);
            while (*(void *)(v37 + 32 * v36 + 16) != v10)
            {
              uint64_t v36 = *(_DWORD *)(v37 + 32 * v36 + 8) & 0x7FFFFFFF;
              if (v36 == 0x7FFFFFFF) {
                goto LABEL_37;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          LODWORD(v35) = 0;
        }
LABEL_37:
        re::HashTable<unsigned long long,re::ecs2::ComponentTypeBase const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v46, v35, v34, v50, v59);
        ++*((_DWORD *)this + 700);
LABEL_38:
        re::DynamicArray<double>::resize((uint64_t)v5, v8[8] + 1);
        unint64_t v39 = v8[8];
        unint64_t v40 = *((void *)this + 353);
        if (v40 <= v39)
        {
          v50[1] = 0;
          memset(v59, 0, sizeof(v59));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v51 = 136315906;
          uint64_t v52 = "operator[]";
          __int16 v53 = 1024;
          int v54 = 789;
          __int16 v55 = 2048;
          unint64_t v56 = v39;
          __int16 v57 = 2048;
          unint64_t v58 = v40;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_50:
          re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) ", "(m_componentTypeByLocalId[componentType.localComponentTypeShortID()] == nullptr) || (m_componentTypeByLocalId[componentType.localComponentTypeShortID()] == &componentType)", "prepareObjectStores", 457);
          _os_crash();
          __break(1u);
        }
        uint64_t v41 = *((void *)this + 355);
        uint64_t v42 = *(unsigned __int16 **)(v41 + 8 * v39);
        if (v42) {
          BOOL v43 = v42 == v8;
        }
        else {
          BOOL v43 = 1;
        }
        if (!v43) {
          goto LABEL_50;
        }
        *(void *)(v41 + 8 * v39) = v8;
        if (v47) {
          RESyncRelease();
        }
LABEL_46:
        ++v7;
      }
      while (v7 != v3);
    }
    *((void *)this + 30ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v3;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)locale);
  }
  std::locale::~locale(this);
}

uint64_t re::NetworkSystem::entityAddedToScene(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = (re::NetworkSystemFeatureFlags *)re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::remove(a1 + 2296, a3);
  uint64_t result = re::NetworkSystemFeatureFlags::enableAltSharedApp(v5);
  if (result)
  {
    uint64_t v7 = *(void *)(a2 + 296);
    return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 2344, &v7);
  }
  return result;
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31)) % v2;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(v7 + 4 * v6);
  if (v8 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (*(void *)(v10 + 24 * v8 + 16) != v4)
  {
    while (1)
    {
      unsigned int v11 = v8;
      int v12 = *(_DWORD *)(v10 + 24 * v8 + 8);
      uint64_t v8 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (*(void *)(v10 + 24 * v8 + 16) == v4)
      {
        *(_DWORD *)(v10 + 24 * v11 + 8) = *(_DWORD *)(v10 + 24 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 24 * v8 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v10 + 24 * v8 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = v13 + 24 * v8;
  int v17 = *(_DWORD *)(v14 + 8);
  unint64_t v15 = (int *)(v14 + 8);
  int v16 = v17;
  if (v17 < 0)
  {
    *unint64_t v15 = v16 & 0x7FFFFFFF;
    uint64_t v18 = v13 + 24 * v8;
    uint64_t v20 = *(void *)(v18 + 16);
    uint64_t v19 = (void *)(v18 + 16);
    if (v20)
    {
      RESyncRelease();
      *uint64_t v19 = 0;
    }
  }
  uint64_t v21 = *(void *)(a1 + 16) + 24 * v8;
  int v22 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v22 + 1;
  return 1;
}

uint64_t re::NetworkSystem::entityRemovedFromScene(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = (re::NetworkSystemFeatureFlags *)re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::add(a1 + 2296, a3);
  uint64_t result = re::NetworkSystemFeatureFlags::enableAltSharedApp(v5);
  if (result)
  {
    uint64_t v7 = *(void *)(a2 + 296);
    return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 2344, &v7);
  }
  return result;
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 24 * v9;
  return v11 + 16;
}

re::NetworkSystem::LocalPeer *re::NetworkSystem::exitingLocalPeerView(re::NetworkSystem::LocalPeer *this, re::ecs2::NetworkComponent *a2)
{
  if (*((unsigned char *)a2 + 80)) {
    unint64_t v2 = (uint64_t *)((char *)a2 + 88);
  }
  else {
    unint64_t v2 = (uint64_t *)*((void *)a2 + 12);
  }
  uint64_t v3 = *((void *)a2 + 9);
  if (v3)
  {
    uint64_t v5 = (uint64_t)this + 2944;
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *v2;
      this = (re::NetworkSystem::LocalPeer *)re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v5, &v7);
      if (this) {
        this = (re::NetworkSystem::LocalPeer *)re::NetworkSystem::LocalPeer::exit(this, a2);
      }
      ++v2;
      v6 -= 8;
    }
    while (v6);
  }
  return this;
}

uint64_t re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 272 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 272 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 272 * v4 + 16) == v2) {
        return v6 + 272 * v4 + 24;
      }
    }
    return 0;
  }
  return v6 + 272 * v4 + 24;
}

uint64_t re::NetworkSystem::clearRemoteDirty(re::NetworkSystem *this)
{
  if (*((_DWORD *)this + 581))
  {
    uint64_t v2 = *((unsigned int *)this + 582);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (int *)(*((void *)this + 289) + 8);
      while (1)
      {
        int v5 = *v4;
        v4 += 6;
        if (v5 < 0) {
          break;
        }
        if (v2 == ++v3)
        {
          LODWORD(v3) = *((_DWORD *)this + 582);
          break;
        }
      }
    }
    else
    {
      LODWORD(v3) = 0;
    }
    while (v2 != v3)
    {
      re::NetworkSystem::destroyObject((uint64_t)this);
      if (*((_DWORD *)this + 582) <= (v3 + 1)) {
        int v6 = v3 + 1;
      }
      else {
        int v6 = *((_DWORD *)this + 582);
      }
      int v7 = v3;
      while (1)
      {
        unsigned int v8 = v7 + 1;
        if (v6 - 1 == v7) {
          break;
        }
        ++v7;
        LODWORD(v3) = v8;
        if ((*(_DWORD *)(*((void *)this + 289) + 24 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v3) = v6;
LABEL_17:
      ;
    }
    re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear((uint64_t)this + 2296);
  }
  uint64_t v9 = *((void *)this + 299);
  return MEMORY[0x270F58EC0](v9);
}

re::DynamicString *re::NetworkSystem::peerIDStringForAssetSerialization@<X0>(re::NetworkSystem *this@<X0>, re::DynamicString *a2@<X8>)
{
  uint64_t v3 = (re::NetworkSystem *)((char *)this + 2680);
  unint64_t v4 = *((void *)this + 336);
  if (v4) {
    unint64_t v5 = v4 >> 1;
  }
  else {
    unint64_t v5 = v4 >> 1;
  }
  if (!v5)
  {
    uint64_t LocalPeerId = RESyncServiceGetLocalPeerId();
    if (LocalPeerId)
    {
      re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v8, LocalPeerId);
      re::DynamicString::operator=(v3, (re::DynamicString *)&v8);
      if (v8)
      {
        if (v9) {
          (*(void (**)(void))(*(void *)v8 + 40))();
        }
      }
    }
  }
  return re::DynamicString::DynamicString(a2, v3);
}

uint64_t re::NetworkSystem::queueWaitForParentEntity(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = a2;
  uint64_t v5 = *a3;
  uint64_t v12 = v5;
  if (v5) {
    id v6 = (id)(v5 + 8);
  }
  re::NetworkSystem::removeEntityFromParentWaitlist(a1, &v12);
  if (v12)
  {

    uint64_t v12 = 0;
  }
  uint64_t v11 = 0;
  memset(v9, 0, sizeof(v9));
  int v10 = 0;
  int v7 = (void *)re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1 + 2200, &v13, (uint64_t)v9);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v9);
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v7, a3);
  return re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::add<unsigned long long &>(a1 + 2248, a3, &v13);
}

uint64_t *re::NetworkSystem::removeEntityFromParentWaitlist(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 2248;
  uint64_t result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 2248, a2);
  if (result)
  {
    uint64_t v6 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 2200, result);
    re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>::remove(v6, a2);
    return (uint64_t *)re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v4, a2);
  }
  return result;
}

unint64_t re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v12 = *(void *)(a1 + 16) + ((unint64_t)v13 << 6);
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + (v10 << 6) + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  unint64_t v12 = v11 + (v10 << 6);
  return v12 + 24;
}

uint64_t re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::add<unsigned long long &>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addEmplace<unsigned long long &>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::NetworkSystem::clearWaitListForParent(re::NetworkSystem *this, uint64_t a2)
{
  uint64_t v12 = a2;
  uint64_t v3 = (char *)this + 2200;
  uint64_t result = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 2200, &v12);
  if (result)
  {
    uint64_t v5 = *(void *)(result + 16);
    if (v5)
    {
      uint64_t v6 = *(uint64_t **)(result + 32);
      unint64_t v7 = (char *)this + 2248;
      uint64_t v8 = 8 * v5;
      do
      {
        uint64_t v9 = *v6;
        uint64_t v11 = v9;
        if (v9) {
          id v10 = (id)(v9 + 8);
        }
        re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove((uint64_t)v7, &v11);
        if (v11) {

        }
        ++v6;
        v8 -= 8;
      }
      while (v8);
    }
    return re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, &v12);
  }
  return result;
}

uint64_t re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = v9 + 32 * v7;
  if (*(void *)(v10 + 16) != v3)
  {
    while (1)
    {
      unsigned int v11 = v7;
      int v12 = *(_DWORD *)(v9 + 32 * v7 + 8);
      uint64_t v7 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      uint64_t v13 = v9 + 32 * v7;
      if (*(void *)(v13 + 16) == v3)
      {
        *(_DWORD *)(v9 + 32 * v11 + 8) = *(_DWORD *)(v9 + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v10 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v14 = *(void *)(a1 + 16) + 32 * v7;
  int v15 = *(_DWORD *)(v14 + 8);
  if (v15 < 0)
  {
    *(_DWORD *)(v14 + 8) = v15 & 0x7FFFFFFF;
    uint64_t v18 = *(void *)(v14 + 16);
    int v17 = (void *)(v14 + 16);
    uint64_t v16 = v18;
    if (v18)
    {

      void *v17 = 0;
    }
  }
  int v19 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v7 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v19 + 1;
  return 1;
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = v9 + (v7 << 6);
  if (*(void *)(v10 + 16) != v3)
  {
    while (1)
    {
      unsigned int v11 = v7;
      int v12 = *(_DWORD *)(v9 + (v7 << 6) + 8);
      uint64_t v7 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      uint64_t v13 = v9 + (v7 << 6);
      if (*(void *)(v13 + 16) == v3)
      {
        *(_DWORD *)(v9 + ((unint64_t)v11 << 6) + 8) = *(_DWORD *)(v9 + ((unint64_t)v11 << 6) + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v10 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = v14 + (v7 << 6);
  int v18 = *(_DWORD *)(v15 + 8);
  int v17 = (int *)(v15 + 8);
  int v16 = v18;
  if (v18 < 0)
  {
    int *v17 = v16 & 0x7FFFFFFF;
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v14 + (v7 << 6) + 24);
    uint64_t v14 = *(void *)(a1 + 16);
    int v16 = *(_DWORD *)(v14 + (v7 << 6) + 8);
  }
  int v19 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v14 + (v7 << 6) + 8) = *(_DWORD *)(a1 + 36) | v16 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v19 + 1;
  return 1;
}

BOOL re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>::remove(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    unint64_t v5 = *(void **)(a1 + 32);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        unint64_t v5 = (void *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    unint64_t v5 = *(void **)(a1 + 32);
  }
  uint64_t v6 = (uint64_t)v5 - v2;
  uint64_t v7 = v6 >> 3;
  if (v6 >> 3 != v3) {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::removeAt(a1, v6 >> 3);
  }
  return v7 != v3;
}

uint64_t re::NetworkSystem::registerLocalSessionForAssetSync(uint64_t a1, uint64_t a2)
{
  RESyncRetain();
  *(void *)(a1 + 244ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = a2;
  RESyncNetSessionAddObserver();
  RESyncNetSessionSetIsLocal();
  return RESyncNetSessionAddObserver();
}

uint64_t re::NetworkSystem::unRegisterLocalSessionForAssetSync(re::NetworkSystem *this)
{
  RESyncNetSessionRemoveObserver();
  RESyncNetSessionRemoveObserver();
  uint64_t result = RESyncRelease();
  *((void *)this + 305) = 0;
  return result;
}

uint64_t re::NetworkSystem::useOPACK(re::NetworkSystem *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_26879F000;
  {
    uint64_t v1 = (unsigned char *)&unk_26879F000;
    if (v3)
    {
      re::NetworkSystem::useOPACK(void)::useOPACK = re::NetworkSystem::useOPACK(void)::$_0::operator()();
      uint64_t v1 = (unsigned char *)&unk_26879F000;
    }
  }
  return v1[2400];
}

re *re::NetworkSystem::useOPACK(void)::$_0::operator()()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v0 = (re *)_os_feature_enabled_impl();
  uint64_t v1 = *re::ecsNetworkLogObjects(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = "binary format";
    if (v0) {
      uint64_t v2 = "OPACK format";
    }
    int v4 = 136446210;
    unint64_t v5 = v2;
    _os_log_impl(&dword_233120000, v1, OS_LOG_TYPE_DEFAULT, "Using %{public}s for network serialization.", (uint8_t *)&v4, 0xCu);
  }
  return v0;
}

uint64_t re::NetworkSystem::encodeComponent(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v6 = (re *)(*(uint64_t (**)(void *))(*a3 + 40))(a3);
  if (!*(void *)(a1 + 2848)
    || (unint64_t v7 = *((void *)v6 + 3),
        unint64_t v8 = v7 >> 1,
        unint64_t v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * ((v7 >> 1) ^ (v7 >> 31))) ^ ((0xBF58476D1CE4E5B9 * ((v7 >> 1) ^ (v7 >> 31))) >> 27)),
        uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 2856) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(a1 + 2872))),
        v10 == 0x7FFFFFFF))
  {
LABEL_3:
    unsigned int v11 = *re::ecsNetworkLogObjects(v6);
    uint64_t v12 = 1;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)((*(uint64_t (**)(void *))(*a3 + 40))(a3) + 32);
      *(_DWORD *)uint64_t v29 = 136315138;
      *(void *)&v29[4] = v13;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_INFO, "No encoder for %s, skipping", v29, 0xCu);
    }
    return v12;
  }
  uint64_t v14 = *(void *)(a1 + 2864);
  while (*(void *)(v14 + 32 * v10 + 16) != v8)
  {
    uint64_t v10 = *(_DWORD *)(v14 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_3;
    }
  }
  uint64_t v15 = v14 + 32 * v10;
  unsigned int v16 = a2[2];
  *(void *)uint64_t v29 = 0;
  re::snapshot::Encoder::writeRaw<true>(a2, v29, 8uLL);
  uint64_t v17 = a2[2];
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(v15 + 24) + 16))();
  uint64_t v18 = a2[2];
  a2[2] = v16;
  *(void *)uint64_t v29 = v18 - v17;
  re::snapshot::Encoder::writeRaw<true>(a2, v29, 8uLL);
  a2[2] = v18;
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    uint64_t v19 = (*(uint64_t (**)(void *))(*a3 + 40))(a3);
    re::packCharArrayToUInt64ForAriadne(*(re **)(v19 + 32), 0);
    kdebug_trace();
  }
  if (re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    uint64_t v20 = a3[2];
    uint64_t v21 = *(void *)(v20 + 200);
    if (v21)
    {
      int v22 = re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v20 + 200));
      if (v22)
      {
        int v23 = v22;
        unint64_t v24 = *(unsigned char *)(v21 + 560) ? "Remote" : "Local";
        unint64_t v25 = (re *)(*(unsigned char *)(v21 + 560) == 1 ? "Shared" : v24);
        re::packCharArrayToUInt64ForAriadne(v25, 0);
        if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
        {
          uint64_t v26 = (*(uint64_t (**)(void *))(*a3 + 40))(a3);
          re::packCharArrayToUInt64ForAriadne(*(re **)(v26 + 32), 0);
          if (v23 == 1) {
            uint64_t v27 = "Local";
          }
          else {
            uint64_t v27 = "Remote";
          }
          re::packCharArrayToUInt64ForAriadne((re *)v27, 0);
          kdebug_trace();
        }
      }
    }
  }
  return v12;
}

uint64_t re::NetworkSystem::decodeComponent(uint64_t a1, re::snapshot::Decoder *this, void *a3)
{
  int v4 = (uint64_t *)*((void *)this + 2);
  unint64_t v5 = *((void *)this + 3) - (void)v4;
  if (v5 <= 7)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v5);
    return 1;
  }
  else
  {
    uint64_t v9 = *v4;
    unint64_t v7 = v4 + 1;
    uint64_t v8 = v9;
    *((void *)this + 2) = v7;
    if (!a3)
    {
      uint64_t v16 = 0;
      goto LABEL_8;
    }
    uint64_t v11 = (*(uint64_t (**)(void *))(*a3 + 40))(a3);
    if (!*(void *)(a1 + 2896)
      || (unint64_t v12 = *(void *)(v11 + 24),
          unint64_t v13 = v12 >> 1,
          unint64_t v14 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * ((v12 >> 1) ^ (v12 >> 31))) ^ ((0xBF58476D1CE4E5B9
                                                                       * ((v12 >> 1) ^ (v12 >> 31))) >> 27)),
          uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 2904) + 4 * ((v14 ^ (v14 >> 31)) % *(unsigned int *)(a1 + 2920))),
          v15 == 0x7FFFFFFF))
    {
LABEL_5:
      uint64_t v16 = 0;
      unint64_t v7 = (void *)*((void *)this + 2);
LABEL_8:
      *((void *)this + 2) = (char *)v7 + v8;
      return v16;
    }
    uint64_t v18 = *(void *)(a1 + 2912);
    while (*(void *)(v18 + 32 * v15 + 16) != v13)
    {
      uint64_t v15 = *(_DWORD *)(v18 + 32 * v15 + 8) & 0x7FFFFFFF;
      if (v15 == 0x7FFFFFFF) {
        goto LABEL_5;
      }
    }
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)(v18 + 32 * v15 + 24) + 16))();
    *((void *)this + 2) += v8;
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
    {
      uint64_t v19 = (*(uint64_t (**)(void *))(*a3 + 40))(a3);
      re::packCharArrayToUInt64ForAriadne(*(re **)(v19 + 32), 0);
      kdebug_trace();
    }
    if (re::internal::enableHighFrequencyNetworkTracing(0, 0))
    {
      uint64_t v20 = a3[2];
      uint64_t v21 = *(void *)(v20 + 200);
      if (v21)
      {
        int v22 = re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v20 + 200));
        if (v22)
        {
          int v23 = v22;
          unint64_t v24 = *(unsigned char *)(v21 + 560) ? "Remote" : "Local";
          unint64_t v25 = (re *)(*(unsigned char *)(v21 + 560) == 1 ? "Shared" : v24);
          re::packCharArrayToUInt64ForAriadne(v25, 0);
          if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
          {
            uint64_t v26 = (*(uint64_t (**)(void *))(*a3 + 40))(a3);
            re::packCharArrayToUInt64ForAriadne(*(re **)(v26 + 32), 0);
            if (v23 == 1) {
              uint64_t v27 = "Local";
            }
            else {
              uint64_t v27 = "Remote";
            }
            re::packCharArrayToUInt64ForAriadne((re *)v27, 0);
            kdebug_trace();
          }
        }
      }
    }
  }
  return v16;
}

void re::NetworkSystem::resolveDeferedViews(re::NetworkSystem *this)
{
  uint64_t v2 = (char *)this + 2712;
  while (*((_DWORD *)this + 685))
  {
    uint64_t v3 = *((unsigned int *)this + 686);
    uint64_t v4 = *((void *)this + 341);
    uint64_t v5 = 0;
    if (v3)
    {
      uint64_t v6 = (int *)(v4 + 8);
      while (1)
      {
        int v7 = *v6;
        v6 += 6;
        if (v7 < 0) {
          break;
        }
        if (v3 == ++v5)
        {
          LODWORD(v5) = *((_DWORD *)this + 686);
          break;
        }
      }
    }
    uint64_t v8 = v4 + 24 * v5;
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 16);
      do
      {
        uint64_t v11 = *(void *)(v9 + 16);
        if (!v11) {
          break;
        }
        uint64_t v12 = *(void *)(v11 + 24);
        if (!v12 || (*(unsigned char *)(v12 + 288) & 0x80) != 0) {
          break;
        }
        uint64_t v9 = *(void *)(v12 + 200);
        *(void *)&long long v42 = v9;
        if (v9) {
          id v13 = (id)(v9 + 8);
        }
        BOOL v14 = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)v2, (uint64_t *)&v42);
        if ((void)v42) {

        }
        if (v14) {
          uint64_t v10 = v9;
        }
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    re::ecs2::NetworkComponent::resolveViews(v10, (uint64_t)v2);
  }
  re::HashSetBase<re::SharedPtr<re::ecs2::Entity>,re::SharedPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::Entity>>,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::clear((uint64_t)v2);
  uint64_t v15 = *((unsigned int *)this + 744);
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (_DWORD *)(*((void *)this + 370) + 8);
    while ((*v17 & 0x80000000) == 0)
    {
      v17 += 68;
      if (v15 == ++v16)
      {
        LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *((_DWORD *)this + 744);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  }
  if (v15 != v16)
  {
    uint64_t v18 = v16;
    do
    {
      uint64_t v19 = *((void *)this + 370);
      unsigned int v44 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      uint64_t v45 = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)&v42);
      uint64_t v20 = *((unsigned int *)this + 594);
      if (v20)
      {
        uint64_t v21 = 0;
        int v22 = (int *)(*((void *)this + 295) + 8);
        while (1)
        {
          int v23 = *v22;
          v22 += 6;
          if (v23 < 0) {
            break;
          }
          if (v20 == ++v21)
          {
            LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = *((_DWORD *)this + 594);
            break;
          }
        }
      }
      else
      {
        LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0;
      }
      uint64_t v24 = v19 + 272 * v18 + 224;
      if (v20 != v21)
      {
        uint64_t v25 = v21;
        uint64_t v26 = *((void *)this + 295);
        do
        {
          if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v19 + 272 * v18 + 224, (uint64_t *)(v26 + 24 * v25 + 16)))
          {
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)&v42, (uint64_t *)(*((void *)this + 295) + 24 * v25 + 16));
          }
          unsigned int v27 = *((_DWORD *)this + 594);
          uint64_t v26 = *((void *)this + 295);
          if (v27 <= (int)v21 + 1) {
            int v28 = v21 + 1;
          }
          else {
            int v28 = *((_DWORD *)this + 594);
          }
          while (1)
          {
            uint64_t v25 = (v21 + 1);
            if (v28 - 1 == v21) {
              break;
            }
            LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = v21 + 1;
            int v29 = v25;
            if ((*(_DWORD *)(v26 + 24 * v25 + 8) & 0x80000000) != 0) {
              goto LABEL_47;
            }
          }
          int v29 = v28;
LABEL_47:
          LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = v29;
        }
        while (v27 != v29);
      }
      unsigned int v30 = v44;
      if (v44)
      {
        uint64_t v31 = 0;
        int v32 = (int *)(v43 + 8);
        while (1)
        {
          int v33 = *v32;
          v32 += 6;
          if (v33 < 0) {
            break;
          }
          if (v44 == ++v31)
          {
            LODWORD(v31) = v44;
            break;
          }
        }
      }
      else
      {
        LODWORD(v31) = 0;
      }
      if (v44 != v31)
      {
        uint64_t v34 = v31;
        uint64_t v35 = v19 + 272 * v18 + 176;
        uint64_t v36 = v43;
        do
        {
          uint64_t v41 = 0;
          uint64_t v41 = *(void *)(v36 + 24 * v34 + 16);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v35, &v41);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v24, &v41);
          uint64_t v36 = v43;
          if (v44 <= (int)v31 + 1) {
            unsigned int v37 = v31 + 1;
          }
          else {
            unsigned int v37 = v44;
          }
          int v38 = v31;
          while (1)
          {
            uint64_t v34 = (v38 + 1);
            if (v37 - 1 == v38) {
              break;
            }
            ++v38;
            LODWORD(v31) = v34;
            if ((*(_DWORD *)(v43 + 24 * v34 + 8) & 0x80000000) != 0) {
              goto LABEL_64;
            }
          }
          LODWORD(v31) = v37;
LABEL_64:
          ;
        }
        while (v30 != v31);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v42);
      unsigned int v39 = *((_DWORD *)this + 744);
      if (v39 <= (int)v16 + 1) {
        unsigned int v39 = v16 + 1;
      }
      while (1)
      {
        uint64_t v18 = (v16 + 1);
        if (v39 - 1 == v16) {
          break;
        }
        LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16 + 1;
        unsigned int v40 = v18;
        if ((*(_DWORD *)(*((void *)this + 370) + 272 * v18 + 8) & 0x80000000) != 0) {
          goto LABEL_71;
        }
      }
      unsigned int v40 = v39;
LABEL_71:
      LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v40;
    }
    while (v15 != v40);
  }
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 2344);
}

void ___ZN2re8internal27NetworkSystemAssetMessagingC2EPNS_13NetworkSystemE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 40);
  if (v5)
  {
    uint64_t v8 = a4;
    *(void *)buf = a3;
    int v7 = a5;
    (*(void (**)(uint64_t, uint8_t *, uint64_t *, int *))(*(void *)v5 + 48))(v5, buf, &v8, &v7);
  }
  else
  {
    uint64_t v6 = *re::ecsNetworkLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_233120000, v6, OS_LOG_TYPE_DEBUG, "Missing receive message handler.", buf, 2u);
    }
  }
}

void ___ZN2re8internal27NetworkSystemAssetMessagingC2EPNS_13NetworkSystemE_block_invoke_2(re *a1)
{
  uint64_t v1 = *((void *)a1 + 4);
  if (*(void *)(v1 + 72))
  {
    uint64_t v2 = v1 + 48;
    uint64_t PeerID = RESyncParticipantGetPeerID();
    std::function<void ()(unsigned long long)>::operator()(v2, PeerID);
  }
  else
  {
    uint64_t v4 = *re::ecsNetworkLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_debug_impl(&dword_233120000, v4, OS_LOG_TYPE_DEBUG, "Missing peer left handler.", v5, 2u);
    }
  }
}

void re::internal::NetworkSystemAssetMessaging::~NetworkSystemAssetMessaging(re::internal::NetworkSystemAssetMessaging *this)
{
}

{
  uint64_t vars8;

  re::internal::NetworkSystemAssetMessaging::~NetworkSystemAssetMessaging(this);
  JUMPOUT(0x237DBCBD0);
}

re::DynamicString *re::internal::NetworkSystemAssetMessaging::networkPeerString@<X0>(re::NetworkSystem **this@<X0>, re::DynamicString *a2@<X8>)
{
  return re::NetworkSystem::peerIDStringForAssetSerialization(this[1], a2);
}

uint64_t re::internal::NetworkSystemAssetMessaging::networkPeer(re::internal::NetworkSystemAssetMessaging *this)
{
  return RESyncServiceGetLocalPeerId();
}

BOOL re::internal::NetworkSystemAssetMessaging::sendMessage(re::internal::NetworkSystemAssetMessaging *this, unint64_t a2, const void *a3)
{
  uint64_t v3 = this;
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4[303])
  {
    this = (re::internal::NetworkSystemAssetMessaging *)RESyncNetSessionIsActive();
    if (this) {
      goto LABEL_9;
    }
    uint64_t v4 = (void *)*((void *)v3 + 1);
  }
  if (v4[304])
  {
    this = (re::internal::NetworkSystemAssetMessaging *)RESyncNetSessionIsActive();
    if ((this & 1) == 0)
    {
      uint64_t v4 = (void *)*((void *)v3 + 1);
      goto LABEL_7;
    }
LABEL_9:
    RESyncNetSessionSendData();
    return 1;
  }
LABEL_7:
  if (v4[305])
  {
    this = (re::internal::NetworkSystemAssetMessaging *)RESyncNetSessionIsActive();
    if (this) {
      goto LABEL_9;
    }
  }
  uint64_t v6 = *re::ecsNetworkLogObjects(this);
  BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_WORD *)int v7 = 0;
    _os_log_debug_impl(&dword_233120000, v6, OS_LOG_TYPE_DEBUG, "Failed to send message (no session available)", v7, 2u);
    return 0;
  }
  return result;
}

void *re::internal::NetworkSystemAssetMessaging::setReceiveMessageHandler(uint64_t a1, uint64_t a2)
{
  void v9[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)(a1 + 16);
  std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::__value_func[abi:nn180100]((uint64_t)v7, a2);
  if (v7 != v3)
  {
    uint64_t v4 = v8;
    uint64_t v5 = *(void **)(a1 + 40);
    if (v8 == v7)
    {
      if (v5 == v3)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), v7);
        (*(void (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
        *(void *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
        uint64_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, v3);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v3);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = *(void **)(a1 + 40);
      }
      *(void *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v3;
    }
    else if (v5 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 16) + 24))(v3, v7);
      (*(void (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
      *(void *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v8;
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = *(void **)(a1 + 40);
      *(void *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v4;
    }
  }
  return std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100](v7);
}

void *re::internal::NetworkSystemAssetMessaging::setPeerLeftHandler(uint64_t a1, uint64_t a2)
{
  void v9[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)(a1 + 48);
  std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:nn180100]((uint64_t)v7, a2);
  if (v7 != v3)
  {
    uint64_t v4 = v8;
    uint64_t v5 = *(void **)(a1 + 72);
    if (v8 == v7)
    {
      if (v5 == v3)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), v7);
        (*(void (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
        *(void *)(a1 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
        uint64_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, v3);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v3);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = *(void **)(a1 + 72);
      }
      *(void *)(a1 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v3;
    }
    else if (v5 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 48) + 24))(v3, v7);
      (*(void (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
      *(void *)(a1 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v8;
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = *(void **)(a1 + 72);
      *(void *)(a1 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v4;
    }
  }
  return std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100](v7);
}

void *re::allocInfo_NetworkSystem(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_338, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_338))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF913D8, "NetworkSystem");
    __cxa_guard_release(&_MergedGlobals_338);
  }
  return &unk_26AF913D8;
}

void re::initInfo_NetworkSystem(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xF3320DE1EEEA1BBALL;
  v5[1] = "NetworkSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v6;
  *((void *)this + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0xBB800000008;
  *((_DWORD *)this + std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_NetworkSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::NetworkSystem>;
  *((void *)this + 11) = 0;
  *((void *)this + 1std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = re::internal::defaultDestruct<re::NetworkSystem>;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = re::internal::defaultConstructV2<re::NetworkSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::NetworkSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::NetworkSystem *re::internal::defaultConstruct<re::NetworkSystem>(int a1, int a2, re::NetworkSystem *this)
{
  return re::NetworkSystem::NetworkSystem(this);
}

void re::internal::defaultDestruct<re::NetworkSystem>(int a1, int a2, re::NetworkSystem *this)
{
}

uint64_t re::introspect_NetworkSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkSystem", (uint64_t (*)(re::internal *))re::allocInfo_NetworkSystem, (re::IntrospectionBase *(*)(void))re::initInfo_NetworkSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::NetworkSystem>, this);
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  uint64_t v12 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a5;
  *a5 = 0;
  *(_DWORD *)(v12 + 4 * astd::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)id v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&uint8_t v13[16] = v7;
      *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      long long v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        uint64_t v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0) {
            re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsMove(a1, *(void *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v11 - 16), v11, v11);
          }
          v11 += 24;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_113, 4 * v10);
    }
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v6 + 24);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

void *re::DynamicArray<re::Event<re::NetworkSystem,unsigned long long,RESyncPendingCommitAction *>::Subscription>::setCapacity(void *result)
{
  if (result[1])
  {
    uint64_t v1 = result;
    if (!result[2])
    {
      uint64_t v2 = *result;
      if (*v1)
      {
        double result = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 40))(v2, v1[4]);
        v1[4] = 0;
        v1[1] = 0;
      }
      else
      {
        double result = (void *)re::DynamicArray<re::Event<re::NetworkSystem,unsigned long long,RESyncPendingCommitAction *>::Subscription>::setCapacity(v1);
        ++*((_DWORD *)v1 + 6);
      }
    }
  }
  return result;
}

void re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 272 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_113, 4 * v10);
    }
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v28, 0, 36);
      *(void *)&v28[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v28;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v28[8];
      *(_OWORD *)int v28 = v5;
      *(void *)&v28[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v28[24];
      *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v28[32];
      *(_OWORD *)(a1 + 24) = v9;
      if (v8)
      {
        uint64_t v10 = 0;
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = 272 * v8;
        do
        {
          BOOL v14 = (unint64_t *)(v6 + v10);
          if ((*(_DWORD *)(v6 + v10 + 8) & 0x80000000) != 0)
          {
            unint64_t v15 = *v14;
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = *v14 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 272 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 272 * v18 + 8);
              *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 272 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 272 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 272 * v18 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 272 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 272 * v18 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v14[2];
            uint64_t v22 = *(void *)(a1 + 16) + 272 * v18;
            uint64_t v23 = v22;
            *(void *)(v22 + 24) = v14[3];
            uint64_t v24 = v6 + v10;
            *(unsigned char *)(v22 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *(unsigned char *)(v6 + v10 + 32);
            *(void *)(v22 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(v6 + v10 + 40);
            re::snapshot::Encoder::Encoder(v22 + 48, v6 + v10 + 48);
            *(_DWORD *)(v22 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
            *(_OWORD *)(v22 + 128) = 0u;
            *(_OWORD *)(v22 + 144) = 0u;
            *(void *)(v22 + 164) = 0x7FFFFFFFLL;
            *(void *)(v22 + 128) = *(void *)(v6 + v10 + 128);
            *(void *)(v24 + 128) = 0;
            uint64_t v25 = *(void *)(v22 + 136);
            *(void *)(v22 + 13std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(void *)(v6 + v10 + 136);
            *(void *)(v24 + 13std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v25;
            uint64_t v26 = *(void *)(v22 + 144);
            *(void *)(v22 + 144) = *(void *)(v6 + v10 + 144);
            *(void *)(v24 + 144) = v26;
            LODWORD(v2std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(_DWORD *)(v22 + 152);
            *(_DWORD *)(v22 + 15std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *(_DWORD *)(v6 + v10 + 152);
            *(_DWORD *)(v24 + 15std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v26;
            LODWORD(v2std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(_DWORD *)(v22 + 156);
            *(_DWORD *)(v22 + 1re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(_DWORD *)(v6 + v10 + 156);
            *(_DWORD *)(v24 + 1re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v26;
            LODWORD(v2std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(_DWORD *)(v22 + 160);
            *(_DWORD *)(v22 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(_DWORD *)(v6 + v10 + 160);
            *(_DWORD *)(v24 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v26;
            LODWORD(v2std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(_DWORD *)(v22 + 164);
            *(_DWORD *)(v22 + 164) = *(_DWORD *)(v6 + v10 + 164);
            *(_DWORD *)(v24 + 164) = v26;
            *(_DWORD *)(v22 + re::DynamicArray<re::AcousticAbsorptionMaterial>::clear((uint64_t)this + 208) = 0;
            *(_OWORD *)(v22 + 19std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0u;
            *(_OWORD *)(v22 + 17std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = 0u;
            *(void *)(v22 + 21std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v22 + 176), (uint64_t *)(v6 + v10 + 176));
            *(_OWORD *)(v22 + 224) = 0u;
            v22 += 224;
            *(_DWORD *)(v22 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
            *(_OWORD *)(v22 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
            *(void *)(v23 + 26ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v22, (uint64_t *)(v6 + v10 + 224));
            *(void *)(v24 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v17) = v18;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v10 += 272;
        }
        while (v13 != v10);
      }
      re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
    }
  }
  else
  {
    if (a2) {
      signed int v27 = a2;
    }
    else {
      signed int v27 = 3;
    }
  }
}

uint64_t re::introspect<re::ecs2::ECSService>()
{
  uint64_t v0 = &qword_268772000;
  {
    uint64_t v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::ecs2::ECSService>(void)::info = re::ecs2::introspect_ECSService(0);
      uint64_t v0 = &qword_268772000;
    }
  }
  return v0[208];
}

uint64_t re::ServiceLocator::serviceOrNull<re::ServiceRegistry>(uint64_t a1)
{
  {
    re::introspect<re::ServiceRegistry>(void)::info = re::introspect_ServiceRegistry(0);
  }
  uint64_t v2 = re::introspect<re::ServiceRegistry>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::introspect<re::ServiceRegistry>()
{
  uint64_t v0 = &qword_268772000;
  {
    uint64_t v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::ServiceRegistry>(void)::info = re::introspect_ServiceRegistry(0);
      uint64_t v0 = &qword_268772000;
    }
  }
  return v0[418];
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)16>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    uint64_t v1 = (void *)result;
    double result = mach_absolute_time();
    uint64_t v2 = *v1;
    uint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[68].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[68].i64[0] = v5;
      unint64_t v6 = v3[68].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[68].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[69] = vaddq_s64(v3[69], v7);
      *(unsigned char *)(v2 + 184) = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)17>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    uint64_t v1 = (void *)result;
    double result = mach_absolute_time();
    uint64_t v2 = *v1;
    uint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[72].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[72].i64[0] = v5;
      unint64_t v6 = v3[72].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[72].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[73] = vaddq_s64(v3[73], v7);
      *(unsigned char *)(v2 + 184) = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

void re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *v13;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_113, 4 * v10);
    }
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::ecs2::ComponentTypeBase const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(void *)&v25[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v25, v13, v12);
          long long v15 = *(_OWORD *)v25;
          *(_OWORD *)uint64_t v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v25[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v25[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v25[24];
          *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::ecs2::ComponentTypeBase const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v25);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * astd::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x237DBCAA0]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x263F8C130]);
  return this;
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

uint64_t std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>()
{
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>();
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  end = a1->__end_;
  uint64_t v7 = (uint64_t)a2;
  do
  {
    unsigned int v8 = (unsigned char *)v7;
    uint64_t v7 = ((uint64_t (*)(std::basic_regex<char> *, uint64_t, unsigned char *))std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>)(a1, v7, a3);
  }
  while ((unsigned char *)v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != a3)
  {
    if (*v8 != 124) {
      return v8;
    }
    uint64_t v9 = a1->__end_;
    int v10 = v8 + 1;
    uint64_t v11 = (uint64_t)(v8 + 1);
    do
    {
      unsigned int v8 = (unsigned char *)v11;
      uint64_t v11 = ((uint64_t (*)(std::basic_regex<char> *, uint64_t, unsigned char *))std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>)(a1, v11, a3);
    }
    while ((unsigned char *)v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  unint64_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 == v4) {
    return v4;
  }
  do
  {
    unint64_t v6 = v3;
    uint64_t v3 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, v3, v4);
  }
  while (v3 != v6);
  if (v6 == v4) {
    return v4;
  }
  if (v6 + 1 == v4 && *v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return v4;
  }
  uint64_t v8 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(v8);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  end = a1->__end_;
  std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == a2)
  {
LABEL_9:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    JUMPOUT(0x233A1064CLL);
  }
  uint64_t v8 = v7;
  while (v8 != v3)
  {
    if (*v8 != 124) {
      return v8;
    }
    uint64_t v9 = a1->__end_;
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__end_state<char>::~__end_state()
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x237DBCBD0);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  JUMPOUT(0x237DBCBD0);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      uint64_t v22 = a2 + 1;
      if (v11) {
        BOOL v23 = 1;
      }
      else {
        BOOL v23 = v22 == a3;
      }
      if (!v23 && *v22 == 63)
      {
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v19 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v19 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return;
    }
    long long v15 = a2 + 1;
    uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 == a3)
      {
LABEL_57:
        int v29 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
        std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(v29);
        return;
      }
      int v17 = (char)*v16;
      if (v17 == 44)
      {
        uint64_t v26 = v16 + 1;
        if (v16 + 1 != a3)
        {
          if (*v26 == 125)
          {
            signed int v27 = v16 + 2;
            if (!v11 && v27 != a3 && *v27 == 63)
            {
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              goto LABEL_26;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
LABEL_36:
            size_t v19 = -1;
            goto LABEL_45;
          }
          int v30 = -1;
          int v28 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v30);
          if (v28 == v26 || v28 == a3 || *v28 != 125) {
            goto LABEL_57;
          }
          size_t v19 = v30;
          size_t v14 = (int)__max;
          if (v30 >= (int)__max)
          {
            BOOL v25 = 1;
            if (!v11 && v28 + 1 != a3) {
              BOOL v25 = v28[1] != 63;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            signed int v24 = __s;
            goto LABEL_46;
          }
        }
      }
      else if (v17 == 125)
      {
        unsigned int v18 = v16 + 1;
        if (!v11 && v18 != a3 && *v18 == 63)
        {
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
          size_t v19 = (int)__max;
LABEL_33:
          signed int v24 = __s;
          BOOL v25 = 0;
LABEL_46:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v19, v24, a5, a6, v25);
          return;
        }
        size_t v14 = (int)__max;
        a5 = v7;
        a6 = v6;
        a1 = v10;
        size_t v19 = (int)__max;
LABEL_45:
        signed int v24 = __s;
        BOOL v25 = 1;
        goto LABEL_46;
      }
    }
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    goto LABEL_57;
  }
  if (v12 == 42)
  {
    uint64_t v20 = a2 + 1;
    if (v11) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = v20 == a3;
    }
    if (!v21 && *v20 == 63)
    {
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    uint64_t v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v19 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70AB20;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70AB20;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v12;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E70AB68;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E70AB68;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  JUMPOUT(0x237DBCBD0);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  memset(&v20, 0, 17);
  char v21 = 0;
  uint64_t v22 = 0;
  memset(&__p, 0, sizeof(__p));
  uint64_t v4 = a1 + 16;
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  v16.first = *(const char **)(a2 + 24);
  v16.second = v16.first;
  v16.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, &v16);
  uint64_t v17 = v6;
  uint64_t v18 = v6;
  char v19 = 0;
  std::vector<std::csub_match>::value_type v20 = v16;
  uint64_t v22 = v6;
  char v21 = 1;
  if (*(unsigned __int8 *)(a1 + 84) == ((uint64_t (*)(uint64_t))std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>)(v4))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
    begiuint64_t n = __p.__begin_;
    goto LABEL_7;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(a1 + 8);
  begiuint64_t n = __p.__begin_;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v8 < 2)
  {
LABEL_7:
    if (!begin) {
      return;
    }
    goto LABEL_8;
  }
  int v9 = 0;
  int v10 = *(_DWORD *)(a1 + 80);
  uint64_t v11 = *(void *)(a2 + 32);
  unint64_t v12 = 1;
  do
  {
    int v13 = &begin[v12];
    uint64_t v14 = v11 + 24 * (v10 + v9);
    *(std::pair<const char *, const char *> *)uint64_t v14 = v13->std::pair<const char *, const char *>;
    *(unsigned char *)(v14 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v13->matched;
    unint64_t v12 = (v9 + 2);
    ++v9;
  }
  while (v8 > v12);
LABEL_8:
  operator delete(begin);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  begiuint64_t n = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      uint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      char v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:nn180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    unint64_t v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a1);
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  begiuint64_t n = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      BOOL v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v13);
      std::vector<std::csub_match>::size_type v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      std::vector<std::csub_match>::size_type v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      uint64_t v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *uint64_t v18 = v20;
        uint64_t v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      std::pair<const char *, const char *> v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      uint64_t v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        uint64_t v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  begiuint64_t n = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    uint64_t v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    uint64_t v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    abort();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  std::vector<std::csub_match>::size_type v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    std::vector<std::csub_match>::size_type v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::pair<unsigned long, const char *>>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
  *(void *)(a2 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v12;
  *(_OWORD *)(v9 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  uint64_t v13 = v9 + 96;
  std::pair<const char *, const char *> v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::pair<unsigned long, const char *>>::pointer v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    uint64_t v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:nn180100](v21);
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::allocator<std::__state<char>>::destroy[abi:nn180100](void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:nn180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:nn180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:nn180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:nn180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:nn180100](v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3 || *a2 != 91) {
    return;
  }
  if (a2 + 1 == a3) {
    goto LABEL_240;
  }
  uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
  unint64_t started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
  if ((char *)v5 == a3) {
    goto LABEL_240;
  }
  uint64_t v7 = (uint64_t)started;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100]((uint64_t)started, 93);
    ++v5;
  }
  if ((char *)v5 == a3)
  {
LABEL_240:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_241:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_242:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_243:
    abort();
  }
  uint64_t v92 = (void **)(v7 + 88);
  uint64_t v91 = v7 + 16;
  uint64_t v93 = a3 - 4;
  do
  {
    long long v8 = (char *)v5;
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = a3;
    if ((char *)v5 == a3) {
      goto LABEL_15;
    }
    int v10 = *(unsigned __int8 *)v5;
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = (char *)v5;
    if (v10 == 93) {
      goto LABEL_15;
    }
    memset(&v97, 0, sizeof(v97));
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      int v11 = *(unsigned __int8 *)(v5 + 1);
      switch(v11)
      {
        case '.':
          std::vector<std::pair<unsigned long, const char *>>::size_type v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)&v97);
          uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          std::string::size_type size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v97.__r_.__value_.__l.__size_;
          }
          if (size) {
            goto LABEL_65;
          }
          goto LABEL_30;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_240;
          }
          for (unint64_t i = 0; *(unsigned char *)(v5 + i + 2) != 58 || *(unsigned char *)(v5 + i + 3) != 93; ++i)
          {
            if (&v93[-v5] == (char *)i) {
              goto LABEL_240;
            }
          }
          uint64_t v22 = (char *)(v5 + i + 2);
          if (v22 == a3) {
            goto LABEL_240;
          }
          BOOL v23 = *(_DWORD *)(a1 + 24) & 1;
          std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v102, (char *)(v5 + 2), v22, i);
          std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v102.__end_);
          if (SHIBYTE(v102.__end_) >= 0) {
            first = &v102;
          }
          else {
            first = v102.__first_;
          }
          if (SHIBYTE(v102.__end_) < 0) {
            std::__split_buffer<std::string>::pointer end_high = v102.__begin_;
          }
          (*(void (**)(void, void *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), first, (char *)end_high + (void)first);
          if (SHIBYTE(v102.__end_) >= 0) {
            std::vector<std::csub_match>::size_type v26 = (const char *)&v102;
          }
          else {
            std::vector<std::csub_match>::size_type v26 = (const char *)v102.__first_;
          }
          classCFStringRef name = std::__get_classname(v26, v23);
          if (SHIBYTE(v102.__end_) < 0) {
            operator delete(v102.__first_);
          }
          if (!classname) {
            goto LABEL_242;
          }
          int v28 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          int v29 = (char *)(v5 + i);
          goto LABEL_148;
        case '=':
          uint64_t v12 = (char *)(v5 + 2);
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_240;
          }
          for (uint64_t j = 0; v8[j + 2] != 61 || v8[j + 3] != 93; ++j)
          {
            if (v93 - v8 == j) {
              goto LABEL_240;
            }
          }
          long long v19 = &v8[j + 2];
          if (v19 == a3) {
            goto LABEL_240;
          }
          std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v100, a1, v12, v19);
          if (SHIBYTE(v101) < 0)
          {
            unint64_t v20 = *((void *)&v100 + 1);
            if (!*((void *)&v100 + 1)) {
              goto LABEL_241;
            }
            std::pair<const char *, const char *> v21 = (char *)v100;
          }
          else
          {
            unint64_t v20 = HIBYTE(v101);
            if (!HIBYTE(v101)) {
              goto LABEL_241;
            }
            std::pair<const char *, const char *> v21 = (char *)&v100;
          }
          std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v102, v21, &v21[v20], v20);
          (*(void (**)(std::string::value_type **__return_ptr))(**(void **)(a1 + 16) + 32))(__s);
          uint64_t v36 = (std::string::value_type *)HIBYTE(v99);
          if (v99 < 0) {
            uint64_t v36 = __s[1];
          }
          if (v36 != (std::string::value_type *)1)
          {
            if (v36 == (std::string::value_type *)12)
            {
              unsigned int v37 = __s;
              if (v99 < 0) {
                unsigned int v37 = (std::string::value_type **)__s[0];
              }
              *((unsigned char *)v37 + 11) = *((unsigned char *)v37 + 3);
            }
            else if (SHIBYTE(v99) < 0)
            {
              *__s[0] = 0;
              __s[1] = 0;
            }
            else
            {
              LOBYTE(__s[0]) = 0;
              HIBYTE(v99) = 0;
            }
          }
          if (SHIBYTE(v102.__end_) < 0) {
            operator delete(v102.__first_);
          }
          int v38 = (std::string::value_type *)HIBYTE(v99);
          char v39 = HIBYTE(v99);
          if (v99 < 0) {
            int v38 = __s[1];
          }
          if (v38)
          {
            unint64_t v41 = *(void *)(v7 + 144);
            unint64_t v40 = *(void *)(v7 + 152);
            if (v41 >= v40)
            {
              uint64_t v45 = *(void *)(v7 + 136);
              unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v45) >> 3);
              unint64_t v47 = v46 + 1;
              if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_243;
              }
              unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v45) >> 3);
              if (2 * v48 > v47) {
                unint64_t v47 = 2 * v48;
              }
              if (v48 >= 0x555555555555555) {
                unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v49 = v47;
              }
              v102.__end_cap_.__value_ = (std::allocator<std::string> *)(v7 + 152);
              if (v49)
              {
                uint64_t v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v7 + 152, v49);
                uint64_t v52 = v51;
                char v39 = HIBYTE(v99);
              }
              else
              {
                uint64_t v50 = 0;
                uint64_t v52 = 0;
              }
              __int16 v55 = (std::string *)&v50[24 * v46];
              if (v39 < 0)
              {
                std::string::__init_copy_ctor_external(v55, __s[0], (std::string::size_type)__s[1]);
              }
              else
              {
                long long v56 = *(_OWORD *)__s;
                v55->__r_.__value_.__r.__words[2] = v99;
                *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
              }
              uint64_t v58 = *(void *)(v7 + 136);
              unint64_t v57 = *(void *)(v7 + 144);
              if (v57 == v58)
              {
                int64x2_t v61 = vdupq_n_s64(v57);
                int v59 = v55;
              }
              else
              {
                int v59 = v55;
                do
                {
                  long long v60 = *(_OWORD *)(v57 - 24);
                  v59[-1].__r_.__value_.__r.__words[2] = *(void *)(v57 - 8);
                  *(_OWORD *)&v59[-1].__r_.__value_.__l.__data_ = v60;
                  --v59;
                  *(void *)(v57 - re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
                  *(void *)(v57 - 8) = 0;
                  *(void *)(v57 - 24) = 0;
                  v57 -= 24;
                }
                while (v57 != v58);
                int64x2_t v61 = *(int64x2_t *)(v7 + 136);
              }
              int v54 = v55 + 1;
              *(void *)(v7 + 13std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v59;
              *(void *)(v7 + 144) = v54;
              *(int64x2_t *)&v102.__begin_ = v61;
              uint64_t v62 = *(std::string **)(v7 + 152);
              *(void *)(v7 + 15std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = &v50[24 * v52];
              v102.__end_cap_.__value_ = v62;
              v102.__first_ = (std::__split_buffer<std::string>::pointer)v61.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v102);
            }
            else
            {
              if (SHIBYTE(v99) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s[0], (std::string::size_type)__s[1]);
              }
              else
              {
                long long v42 = *(_OWORD *)__s;
                *(void *)(v41 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v99;
                *(_OWORD *)unint64_t v41 = v42;
              }
              int v54 = (std::string *)(v41 + 24);
            }
            *(void *)(v7 + 144) = v54;
          }
          else
          {
            uint64_t v43 = HIBYTE(v101);
            if (SHIBYTE(v101) < 0) {
              uint64_t v43 = *((void *)&v100 + 1);
            }
            if (v43 == 2)
            {
              __int16 v53 = (char *)&v100;
              if (SHIBYTE(v101) < 0) {
                __int16 v53 = (char *)v100;
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](v7, *v53, v53[1]);
            }
            else
            {
              if (v43 != 1) {
                goto LABEL_241;
              }
              unsigned int v44 = (char *)&v100;
              if (SHIBYTE(v101) < 0) {
                unsigned int v44 = (char *)v100;
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v7, *v44);
            }
          }
          if (SHIBYTE(v99) < 0) {
            operator delete(__s[0]);
          }
          if (SHIBYTE(v101) < 0) {
            operator delete((void *)v100);
          }
          int v28 = 0;
          int v29 = &v8[j];
LABEL_148:
          uint64_t v5 = (uint64_t)(v29 + 4);
          int v33 = v8;
          goto LABEL_149;
      }
    }
    uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8;
LABEL_30:
    if ((v5 | 0x40) != 0x40)
    {
      LOBYTE(v14) = *v9;
LABEL_35:
      std::string::operator=(&v97, v14);
      ++v9;
      goto LABEL_65;
    }
    int v14 = *v9;
    if (v14 != 92) {
      goto LABEL_35;
    }
    uint64_t v15 = v9 + 1;
    if (v5) {
      uint64_t v16 = (char *)((uint64_t (*)(uint64_t, unsigned char *, char *, std::string *))std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>)(a1, v15, a3, &v97);
    }
    else {
      uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(a1, v15, a3, &v97, v7);
    }
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v16;
LABEL_65:
    if (v9 == a3 || (v30 = *v9, v30 == 93) || (int v32 = v9 + 1, v9 + 1 == a3) || v30 != 45 || *v32 == 93)
    {
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v97.__r_.__value_.__l.__size_)
        {
          operator delete(v97.__r_.__value_.__l.__data_);
LABEL_15:
          uint64_t v5 = (uint64_t)v9;
          continue;
        }
        if (v97.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v31 = (std::string *)v97.__r_.__value_.__r.__words[0];
LABEL_84:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](v7, v31->__r_.__value_.__s.__data_[0], v31->__r_.__value_.__s.__data_[1]);
          goto LABEL_85;
        }
        uint64_t v31 = (std::string *)v97.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((unsigned char *)&v97.__r_.__value_.__s + 23)) {
          goto LABEL_15;
        }
        uint64_t v31 = &v97;
        if (HIBYTE(v97.__r_.__value_.__r.__words[2]) != 1) {
          goto LABEL_84;
        }
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v7, v31->__r_.__value_.__s.__data_[0]);
LABEL_85:
      int v28 = 1;
      int v33 = v9;
      goto LABEL_149;
    }
    memset(&v96, 0, sizeof(v96));
    int v33 = v9 + 2;
    if (v9 + 2 != a3 && *v32 == 91 && *v33 == 46)
    {
      uint64_t v34 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)&v96);
    }
    else
    {
      if ((v5 | 0x40) != 0x40)
      {
        LOBYTE(v3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *v32;
LABEL_102:
        std::string::operator=(&v96, (std::string::value_type)v32);
        goto LABEL_156;
      }
      LODWORD(v3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *v32;
      if (v32 != 92) {
        goto LABEL_102;
      }
      uint64_t v35 = v9 + 2;
      if (v5) {
        uint64_t v34 = ((uint64_t (*)(uint64_t, unsigned char *, char *, std::string *))std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>)(a1, v35, a3, &v96);
      }
      else {
        uint64_t v34 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(a1, v35, a3, &v96, v7);
      }
    }
    int v33 = (char *)v34;
LABEL_156:
    std::string v95 = v97;
    std::string __p = v96;
    memset(&v96, 0, sizeof(v96));
    memset(&v97, 0, sizeof(v97));
    if (*(unsigned char *)(v7 + 170))
    {
      if (*(unsigned char *)(v7 + 169))
      {
        BOOL v63 = (v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        std::string::size_type v64 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v64 = v95.__r_.__value_.__l.__size_;
        }
        if (v64)
        {
          std::string::size_type v65 = 0;
          do
          {
            if (v63) {
              uint64_t v66 = (std::string *)v95.__r_.__value_.__r.__words[0];
            }
            else {
              uint64_t v66 = &v95;
            }
            std::string::value_type v67 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), v66->__r_.__value_.__s.__data_[v65]);
            if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v68 = &v95;
            }
            else {
              uint64_t v68 = (std::string *)v95.__r_.__value_.__r.__words[0];
            }
            v68->__r_.__value_.__s.__data_[v65++] = v67;
            BOOL v63 = (v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            std::string::size_type v69 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
            if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v69 = v95.__r_.__value_.__l.__size_;
            }
          }
          while (v65 < v69);
        }
        BOOL v70 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        std::string::size_type v71 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v71 = __p.__r_.__value_.__l.__size_;
        }
        if (v71)
        {
          std::string::size_type v72 = 0;
          do
          {
            if (v70) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else {
              p_p = &__p;
            }
            std::string::value_type v74 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), p_p->__r_.__value_.__s.__data_[v72]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v75 = &__p;
            }
            else {
              uint64_t v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            v75->__r_.__value_.__s.__data_[v72++] = v74;
            BOOL v70 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            std::string::size_type v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v76 = __p.__r_.__value_.__l.__size_;
            }
          }
          while (v72 < v76);
        }
      }
      std::string::size_type v77 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v78 = &v95;
      }
      else {
        uint64_t v78 = (std::string *)v95.__r_.__value_.__r.__words[0];
      }
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v77 = v95.__r_.__value_.__l.__size_;
      }
      uint64_t v5 = v7 + 16;
      std::regex_traits<char>::transform<char *>((uint64_t)&v100, v91, (char *)v78, (char *)v78 + v77);
      std::string::size_type v79 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v80 = &__p;
      }
      else {
        uint64_t v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v79 = __p.__r_.__value_.__l.__size_;
      }
      std::regex_traits<char>::transform<char *>((uint64_t)__s, v91, (char *)v80, (char *)v80 + v79);
      *(_OWORD *)&v102.__first_ = v100;
      v102.__end_ = v101;
      unint64_t v101 = 0;
      long long v100 = 0uLL;
      v102.__end_cap_ = *(std::__compressed_pair<std::string *> *)__s;
      int64_t v103 = v99;
      __s[0] = 0;
      __s[1] = 0;
      int64_t v99 = 0;
      std::vector<std::pair<std::string,std::string>>::push_back[abi:nn180100](v92, (long long *)&v102);
      if (SHIBYTE(v103) < 0) {
        operator delete(v102.__end_cap_.__value_);
      }
      if (SHIBYTE(v102.__end_) < 0) {
        operator delete(v102.__first_);
      }
      if (SHIBYTE(v99) < 0) {
        operator delete(__s[0]);
      }
      if ((SHIBYTE(v101) & 0x80000000) == 0) {
        goto LABEL_227;
      }
      std::__split_buffer<std::string>::pointer v81 = (std::__split_buffer<std::string>::pointer)v100;
    }
    else
    {
      std::string::size_type v82 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v82 = v95.__r_.__value_.__l.__size_;
      }
      if (v82 != 1) {
        goto LABEL_244;
      }
      std::string::size_type v83 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v83 = __p.__r_.__value_.__l.__size_;
      }
      if (v83 != 1)
      {
LABEL_244:
        uint64_t v90 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(v90);
        return;
      }
      if (*(unsigned char *)(v7 + 169))
      {
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v84 = &v95;
        }
        else {
          uint64_t v84 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        std::string::value_type v85 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), v84->__r_.__value_.__s.__data_[0]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v86 = &v95;
        }
        else {
          uint64_t v86 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        v86->__r_.__value_.__s.__data_[0] = v85;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v87 = &__p;
        }
        else {
          uint64_t v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        std::string::value_type v88 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), v87->__r_.__value_.__s.__data_[0]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v89 = &__p;
        }
        else {
          int v89 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v89->__r_.__value_.__s.__data_[0] = v88;
      }
      *(_OWORD *)&v102.__first_ = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
      v102.__end_ = (std::__split_buffer<std::string>::pointer)v95.__r_.__value_.__r.__words[2];
      memset(&v95, 0, sizeof(v95));
      v102.__end_cap_ = *(std::__compressed_pair<std::string *> *)&__p.__r_.__value_.__l.__data_;
      int64_t v103 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      std::vector<std::pair<std::string,std::string>>::push_back[abi:nn180100](v92, (long long *)&v102);
      if (SHIBYTE(v103) < 0) {
        operator delete(v102.__end_cap_.__value_);
      }
      if ((SHIBYTE(v102.__end_) & 0x80000000) == 0) {
        goto LABEL_227;
      }
      std::__split_buffer<std::string>::pointer v81 = v102.__first_;
    }
    operator delete(v81);
LABEL_227:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    int v28 = 1;
LABEL_149:
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v97.__r_.__value_.__l.__data_);
      std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v33;
      if (v28) {
        goto LABEL_15;
      }
    }
    else
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v33;
      if (v28) {
        goto LABEL_15;
      }
    }
  }
  while ((char *)v5 != v8);
  if (v8 == a3) {
    goto LABEL_240;
  }
  if (*v8 == 45)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v7, 45);
    ++v8;
  }
  if (v8 == a3 || *v8 != 93) {
    goto LABEL_240;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x237DBCBD0);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70ABF8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70ABF8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70AC40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70AC40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70ACD0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70ACD0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70AD18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E70AD18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      int v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x237DBCBD0);
}

std::__bracket_expression<char, std::regex_traits<char>> *std::__back_ref<char>::__exec(std::__bracket_expression<char, std::regex_traits<char>> *result, uint64_t a2)
{
  unint64_t locale_low = LODWORD(result->__traits_.__loc_.__locale_);
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < locale_low)
  {
    int v11 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    return std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v11, v12);
  }
  else
  {
    unsigned int v5 = locale_low - 1;
    if (*(unsigned char *)(v3 + 24 * v5 + 16)
      && (uint64_t v6 = result,
          uint64_t v7 = v3 + 24 * v5,
          uint64_t result = *(std::__bracket_expression<char, std::regex_traits<char>> **)v7,
          int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
          uint64_t v9 = *(void *)(a2 + 16),
          *(void *)(a2 + 24) - v9 >= v8)
      && (uint64_t result = (std::__bracket_expression<char, std::regex_traits<char>> *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v9 + v8;
      first = v6->__first_;
    }
    else
    {
      first = 0;
      *(_DWORD *)a2 = -993;
    }
    *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = first;
  }
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = &v5[-v6];
      uint64_t v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        unint64_t v9 = v4 - v6;
        if (2 * v9 > v8) {
          uint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v10 = v8;
        }
        if (v10) {
          int v11 = operator new(v10);
        }
        else {
          int v11 = 0;
        }
        long long v19 = &v7[(void)v11];
        unint64_t v20 = (char *)v11 + v10;
        v7[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v7[(void)v11 + 1];
        if (v5 != (unsigned char *)v6)
        {
          std::pair<const char *, const char *> v21 = &v5[~v6];
          do
          {
            char v22 = *--v5;
            (v21--)[(void)v11] = v22;
          }
          while (v5 != (unsigned char *)v6);
LABEL_45:
          unsigned int v5 = *(unsigned char **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      abort();
    }
    goto LABEL_22;
  }
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      unint64_t v23 = *(void *)(a1 + 40);
      std::pair<const char *, const char *> v24 = &v5[-v23];
      uint64_t v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        unint64_t v26 = v12 - v23;
        if (2 * v26 > v25) {
          uint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v27 = v25;
        }
        if (v27) {
          int v11 = operator new(v27);
        }
        else {
          int v11 = 0;
        }
        long long v19 = &v24[(void)v11];
        unint64_t v20 = (char *)v11 + v27;
        v24[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v24[(void)v11 + 1];
        if (v5 != (unsigned char *)v23)
        {
          int v30 = &v5[~v23];
          do
          {
            char v31 = *--v5;
            (v30--)[(void)v11] = v31;
          }
          while (v5 != (unsigned char *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12) {
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  int v14 = &v5[-v13];
  uint64_t v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0) {
    goto LABEL_50;
  }
  unint64_t v16 = v12 - v13;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17) {
    int v11 = operator new(v17);
  }
  else {
    int v11 = 0;
  }
  long long v19 = &v14[(void)v11];
  unint64_t v20 = (char *)v11 + v17;
  v14[(void)v11] = v2;
  uint64_t v18 = (uint64_t)&v14[(void)v11 + 1];
  if (v5 != (unsigned char *)v13)
  {
    int v28 = &v5[~v13];
    do
    {
      char v29 = *--v5;
      (v28--)[(void)v11] = v29;
    }
    while (v5 != (unsigned char *)v13);
    goto LABEL_45;
  }
LABEL_46:
  int v11 = v19;
LABEL_47:
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v20;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v18;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v10 = 0;
    BOOL negate = this->__negate_;
LABEL_220:
    int v127 = negate;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_65;
  }
  char v6 = *current;
  LOBYTE(v129) = *current;
  char v7 = current[1];
  HIBYTE(v129) = v7;
  if (this->__icase_)
  {
    LOBYTE(v129) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v129) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v129;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v130, (const char *)&__s);
  std::string __p = v130;
  std::string::size_type size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(v130.__r_.__value_.__r.__words[2]);
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v130.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_14;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v130);
  if (v9 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v130;
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v130.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v130.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_173;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_173:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_14:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_16;
    }
LABEL_65:
    int v127 = 0;
    uint64_t v10 = 1;
    goto LABEL_66;
  }
  std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v41) {
    goto LABEL_65;
  }
LABEL_16:
  begiuint64_t n = this->__digraphs_.__begin_;
  uint64_t v13 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    p_second = &begin->second;
    do
    {
      if (v129 == *(p_second - 1) && HIBYTE(v129) == *p_second) {
        goto LABEL_248;
      }
      p_second += 2;
      --v14;
    }
    while (v14);
  }
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    int v127 = 0;
    goto LABEL_182;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, (char *)&v130);
  std::vector<std::pair<std::string, std::string>>::pointer v18 = this->__ranges_.__begin_;
  char v19 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v20 = (char *)this->__ranges_.__end_ - (char *)v18;
  if (v20)
  {
    uint64_t v21 = 0;
    unint64_t v22 = v20 / 48;
    char v120 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __s.__r_.__value_.__l.__size_;
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v22 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v20 / 48;
    }
    unint64_t v26 = (unsigned __int8 *)&v18->second.__r_.__value_.__r.__words[2] + 7;
    BOOL v27 = 1;
    while (1)
    {
      int v28 = (char)*(v26 - 24);
      if (v28 >= 0) {
        size_t v29 = *(v26 - 24);
      }
      else {
        size_t v29 = *(void *)(v26 - 39);
      }
      if (v28 >= 0) {
        int v30 = (char *)(v26 - 47);
      }
      else {
        int v30 = *(char **)(v26 - 47);
      }
      if (v29 >= v23) {
        size_t v31 = v23;
      }
      else {
        size_t v31 = v29;
      }
      int v32 = memcmp(p_s, v30, v31);
      BOOL v33 = v23 >= v29;
      if (v32) {
        BOOL v33 = v32 >= 0;
      }
      if (v33)
      {
        int v34 = (char)*v26;
        if (v34 >= 0) {
          size_t v35 = *v26;
        }
        else {
          size_t v35 = *(void *)(v26 - 15);
        }
        if (v34 >= 0) {
          uint64_t v36 = (char *)(v26 - 23);
        }
        else {
          uint64_t v36 = *(char **)(v26 - 23);
        }
        if (v23 >= v35) {
          size_t v37 = v35;
        }
        else {
          size_t v37 = v23;
        }
        int v38 = memcmp(v36, p_s, v37);
        BOOL v39 = v35 >= v23;
        if (v38) {
          BOOL v39 = v38 >= 0;
        }
        if (v39) {
          break;
        }
      }
      BOOL v27 = ++v21 < v22;
      v26 += 48;
      if (v25 == v21)
      {
        int v127 = 0;
        char v40 = 1;
        goto LABEL_176;
      }
    }
    char v40 = 0;
    int v127 = 1;
LABEL_176:
    p_traits = &this->__traits_;
    char v19 = v120;
  }
  else
  {
    BOOL v27 = 0;
    int v127 = 0;
    char v40 = 1;
  }
  if (v19 < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (!v27)
  {
LABEL_182:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_230;
    }
    std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v129, (char *)&v130);
    std::vector<std::string>::pointer v93 = this->__equivalences_.__begin_;
    uint64_t v94 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    int64_t v95 = (char *)this->__equivalences_.__end_ - (char *)v93;
    if (v95)
    {
      unint64_t v96 = 0;
      unint64_t v97 = v95 / 24;
      size_t v99 = __s.__r_.__value_.__l.__size_;
      uint64_t v98 = (const void *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v100 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v100 = __s.__r_.__value_.__l.__size_;
      }
      if (v97 <= 1) {
        uint64_t v101 = 1;
      }
      else {
        uint64_t v101 = v95 / 24;
      }
      for (BOOL i = 1; ; BOOL i = v96 < v97)
      {
        int64_t v103 = &v93[v96];
        std::string::size_type v104 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
        int v105 = (char)v104;
        if ((v104 & 0x80u) != 0) {
          std::string::size_type v104 = v103->__r_.__value_.__l.__size_;
        }
        if (v100 != v104) {
          goto LABEL_203;
        }
        uint64_t v106 = v105 >= 0 ? &v93[v96] : (std::string *)v103->__r_.__value_.__r.__words[0];
        if ((v94 & 0x80) == 0) {
          break;
        }
        int32x4_t v126 = v93;
        unint64_t v108 = v97;
        uint64_t v109 = v98;
        size_t v110 = v99;
        if (!memcmp(v98, v106, v99))
        {
          operator delete(__s.__r_.__value_.__l.__data_);
LABEL_228:
          if (!i)
          {
            int v127 = 1;
            goto LABEL_230;
          }
LABEL_248:
          int v119 = 1;
LABEL_249:
          int v127 = v119;
LABEL_250:
          uint64_t v10 = 2;
          goto LABEL_221;
        }
        ++v96;
        size_t v99 = v110;
        uint64_t v98 = v109;
        unint64_t v97 = v108;
        std::vector<std::string>::pointer v93 = v126;
        if (v96 == v101) {
          goto LABEL_209;
        }
LABEL_207:
        ;
      }
      if (!v94) {
        goto LABEL_228;
      }
      uint64_t v107 = 0;
      while (__s.__r_.__value_.__s.__data_[v107] == v106->__r_.__value_.__s.__data_[v107])
      {
        if (v94 == ++v107) {
          goto LABEL_228;
        }
      }
LABEL_203:
      if (++v96 == v101) {
        goto LABEL_208;
      }
      goto LABEL_207;
    }
LABEL_208:
    if ((v94 & 0x80) != 0) {
LABEL_209:
    }
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_230:
    if ((char)v129 < 0)
    {
      neg_masuint64_t k = this->__neg_mask_;
    }
    else
    {
      masuint64_t k = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v117 = tab[v129];
      if (((v117 & mask) != 0 || v129 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v129) & 0x80000000) == 0
        && ((tab[HIBYTE(v129)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v129) == 95))
      {
        goto LABEL_248;
      }
      neg_masuint64_t k = this->__neg_mask_;
      if ((neg_mask & v117) != 0 || v129 == 95 && (neg_mask & 0x80) != 0) {
        goto LABEL_247;
      }
    }
    if (SHIBYTE(v129) < 0) {
      goto LABEL_248;
    }
    if ((this->__traits_.__ct_->__tab_[HIBYTE(v129)] & neg_mask) == 0)
    {
      int v119 = 1;
      if (HIBYTE(v129) != 95 || (neg_mask & 0x80) == 0) {
        goto LABEL_249;
      }
    }
LABEL_247:
    int v119 = v127;
    goto LABEL_249;
  }
  if ((v40 & 1) == 0) {
    goto LABEL_250;
  }
  uint64_t v10 = 2;
LABEL_66:
  unsigned __int8 v42 = *v2->__current_;
  v130.__r_.__value_.__s.__data_[0] = v42;
  if (this->__icase_)
  {
    unsigned __int8 v42 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v42);
    v130.__r_.__value_.__s.__data_[0] = v42;
  }
  std::vector<char>::pointer v43 = this->__chars_.__begin_;
  unint64_t v44 = this->__chars_.__end_ - v43;
  if (v44)
  {
    if (v44 <= 1) {
      unint64_t v44 = 1;
    }
    do
    {
      int v45 = *v43++;
      if (v45 == v42) {
        goto LABEL_219;
      }
    }
    while (--v44);
  }
  std::regex_traits<char>::char_class_type v46 = this->__neg_mask_;
  if (v46 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v42 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v42] & v46) == 0)
    {
      int v48 = (v46 >> 7) & 1;
      char v47 = v42 == 95 ? v48 : 0;
    }
    else
    {
      char v47 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v50 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v42, end - this->__neg_chars_.__begin_);
    uint64_t v51 = v50 ? v50 : end;
    if ((v47 & 1) == 0 && v51 == end)
    {
LABEL_219:
      BOOL negate = 1;
      goto LABEL_220;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v53 = this->__ranges_.__end_;
  if (v52 != v53)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v130, &v130.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v53 = this->__ranges_.__end_;
      unsigned int v54 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      unsigned int v54 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v42;
    }
    int64_t v55 = (char *)v53 - (char *)v52;
    if (v55)
    {
      uint64_t v124 = v10;
      uint64_t v56 = 0;
      unint64_t v57 = v55 / 48;
      char v122 = v54;
      if ((v54 & 0x80u) == 0) {
        std::string::size_type v58 = v54;
      }
      else {
        std::string::size_type v58 = __s.__r_.__value_.__l.__size_;
      }
      if ((v54 & 0x80u) == 0) {
        int v59 = &__s;
      }
      else {
        int v59 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v57 <= 1) {
        uint64_t v60 = 1;
      }
      else {
        uint64_t v60 = v55 / 48;
      }
      int64x2_t v61 = (unsigned __int8 *)&v52->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v62 = 1;
      while (1)
      {
        int v63 = (char)*(v61 - 24);
        if (v63 >= 0) {
          size_t v64 = *(v61 - 24);
        }
        else {
          size_t v64 = *(void *)(v61 - 39);
        }
        if (v63 >= 0) {
          std::string::size_type v65 = (char *)(v61 - 47);
        }
        else {
          std::string::size_type v65 = *(char **)(v61 - 47);
        }
        if (v64 >= v58) {
          size_t v66 = v58;
        }
        else {
          size_t v66 = v64;
        }
        int v67 = memcmp(v59, v65, v66);
        BOOL v68 = v58 >= v64;
        if (v67) {
          BOOL v68 = v67 >= 0;
        }
        if (v68)
        {
          int v69 = (char)*v61;
          if (v69 >= 0) {
            size_t v70 = *v61;
          }
          else {
            size_t v70 = *(void *)(v61 - 15);
          }
          if (v69 >= 0) {
            std::string::size_type v71 = (char *)(v61 - 23);
          }
          else {
            std::string::size_type v71 = *(char **)(v61 - 23);
          }
          if (v58 >= v70) {
            size_t v72 = v70;
          }
          else {
            size_t v72 = v58;
          }
          int v73 = memcmp(v71, v59, v72);
          BOOL v74 = v70 >= v58;
          if (v73) {
            BOOL v74 = v73 >= 0;
          }
          if (v74) {
            break;
          }
        }
        BOOL v62 = ++v56 < v57;
        v61 += 48;
        if (v60 == v56) {
          goto LABEL_138;
        }
      }
      int v127 = 1;
LABEL_138:
      uint64_t v10 = v124;
      if ((v122 & 0x80) == 0) {
        goto LABEL_140;
      }
    }
    else
    {
      BOOL v62 = 0;
      if ((v54 & 0x80) == 0) {
        goto LABEL_140;
      }
    }
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_140:
    if (v62) {
      goto LABEL_221;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_214;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v130, &v130.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v75 = this->__equivalences_.__begin_;
  uint64_t v76 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v77 = (char *)this->__equivalences_.__end_ - (char *)v75;
  if (!v77)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
LABEL_214:
    if (v130.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_221;
    }
    std::regex_traits<char>::char_class_type v111 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v130.__r_.__value_.__s.__data_[0]] & v111) == 0)
    {
      int v112 = (v111 >> 7) & 1;
      if (v130.__r_.__value_.__s.__data_[0] != 95) {
        int v112 = 0;
      }
      if (v112 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_219;
  }
  uint64_t v125 = v10;
  unint64_t v78 = 0;
  unint64_t v79 = v77 / 24;
  size_t v81 = __s.__r_.__value_.__l.__size_;
  uint64_t v80 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v82 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v82 = __s.__r_.__value_.__l.__size_;
  }
  if (v79 <= 1) {
    uint64_t v83 = 1;
  }
  else {
    uint64_t v83 = v77 / 24;
  }
  for (BOOL j = 1; ; BOOL j = v78 < v79)
  {
    std::string::value_type v85 = &v75[v78];
    std::string::size_type v86 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
    int v87 = (char)v86;
    if ((v86 & 0x80u) != 0) {
      std::string::size_type v86 = v85->__r_.__value_.__l.__size_;
    }
    if (v82 == v86) {
      break;
    }
LABEL_162:
    if (++v78 == v83)
    {
      if ((v76 & 0x80) != 0) {
LABEL_212:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      uint64_t v10 = v125;
      goto LABEL_214;
    }
LABEL_166:
    ;
  }
  if (v87 >= 0) {
    std::string::value_type v88 = &v75[v78];
  }
  else {
    std::string::value_type v88 = (std::string *)v85->__r_.__value_.__r.__words[0];
  }
  if ((v76 & 0x80) == 0)
  {
    if (!v76)
    {
LABEL_167:
      int v127 = 1;
      uint64_t v10 = v125;
      if (!j) {
        goto LABEL_214;
      }
      goto LABEL_221;
    }
    uint64_t v89 = 0;
    while (__s.__r_.__value_.__s.__data_[v89] == v88->__r_.__value_.__s.__data_[v89])
    {
      if (v76 == ++v89) {
        goto LABEL_167;
      }
    }
    goto LABEL_162;
  }
  BOOL v121 = j;
  uint64_t v123 = v2;
  uint64_t v90 = v75;
  uint64_t v91 = v80;
  size_t v92 = v81;
  if (memcmp(v80, v88, v81))
  {
    ++v78;
    size_t v81 = v92;
    uint64_t v80 = v91;
    std::vector<std::string>::pointer v75 = v90;
    char v2 = v123;
    if (v78 == v83) {
      goto LABEL_212;
    }
    goto LABEL_166;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  int v127 = 1;
  char v2 = v123;
  uint64_t v10 = v125;
  if (!v121) {
    goto LABEL_214;
  }
LABEL_221:
  if (v127 == this->__negate_)
  {
    first = 0;
    int v114 = -993;
  }
  else
  {
    v2->__current_ += v10;
    first = this->__first_;
    int v114 = -995;
  }
  v2->__do_ = v114;
  v2->__node_ = first;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v10 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v10);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  uint64_t v3 = a1[11].__locale_;
  if (v3)
  {
    uint64_t v4 = (uint64_t)a1[12].__locale_;
    unsigned int v5 = a1[11].__locale_;
    if ((std::locale::__imp *)v4 != v3)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](v4);
      }
      while ((std::locale::__imp *)v4 != v3);
      unsigned int v5 = a1[11].__locale_;
    }
    a1[12].__locale_ = v3;
    operator delete(v5);
  }
  char v6 = a1[8].__locale_;
  if (v6)
  {
    a1[9].__locale_ = v6;
    operator delete(v6);
  }
  char v7 = a1[5].__locale_;
  if (v7)
  {
    a1[6].__locale_ = v7;
    operator delete(v7);
  }
  std::locale::~locale(a1 + 2);
  uint64_t v8 = a1[1].__locale_;
  if (v8) {
    (*(void (**)(std::locale::__imp *))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:nn180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:nn180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3)
  {
LABEL_15:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  }
  else
  {
    std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v14, a1, a2, &a2[i]);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v14;
    unint64_t v7 = v15;
    *(void *)(a4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v15;
    unint64_t v8 = HIBYTE(v7);
    if ((v8 & 0x80u) != 0) {
      unint64_t v8 = *(void *)(a4 + 8);
    }
    if (v8 - 1 < 2) {
      return (uint64_t)&a2[i + 2];
    }
  }
  int v10 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  return std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(v10, v11, v12, v13);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(int a1, unsigned char *a2, unsigned char *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3)
  {
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    goto LABEL_82;
  }
  int v7 = (char)*a2;
  if (v7 <= 97)
  {
    if (v7 <= 82)
    {
      if (*a2)
      {
        if (v7 == 68)
        {
          int v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_23:
          *(_DWORD *)(a5 + 164) = v8;
          return a2 + 1;
        }
        goto LABEL_26;
      }
      std::string::value_type v15 = 0;
      unint64_t v16 = this;
      goto LABEL_21;
    }
    if (v7 == 83)
    {
      int v8 = *(_DWORD *)(a5 + 164) | 0x4000;
      goto LABEL_23;
    }
    if (v7 != 87)
    {
LABEL_26:
      JUMPOUT(0x233A136FCLL);
    }
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(unsigned char *)(a5 + 169))
    {
      char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v11 = v10;
      uint64_t v13 = *(unsigned char **)(a5 + 72);
      unint64_t v12 = *(void *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *uint64_t v13 = v10;
        uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_57:
        *(void *)(a5 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v14;
        return a2 + 1;
      }
      unint64_t v25 = *(void *)(a5 + 64);
      unint64_t v26 = &v13[-v25];
      uint64_t v27 = (uint64_t)&v13[-v25 + 1];
      if (v27 >= 0)
      {
        unint64_t v28 = v12 - v25;
        if (2 * v28 > v27) {
          uint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v29 = v27;
        }
        if (v29) {
          int v30 = operator new(v29);
        }
        else {
          int v30 = 0;
        }
        int v32 = &v30[v29];
        v26[(void)v30] = v11;
        uint64_t v14 = (uint64_t)&v26[(void)v30 + 1];
        if (v13 == (unsigned char *)v25)
        {
          int v30 = &v26[(void)v30];
        }
        else
        {
          BOOL v33 = &v13[~v25];
          do
          {
            char v34 = *--v13;
            (v33--)[(void)v30] = v34;
          }
          while (v13 != (unsigned char *)v25);
          uint64_t v13 = *(unsigned char **)(a5 + 64);
        }
        *(void *)(a5 + 64) = v30;
        *(void *)(a5 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v14;
        *(void *)(a5 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v32;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_57;
      }
LABEL_82:
      abort();
    }
    std::vector<std::pair<std::string, std::string>>::pointer v18 = *(unsigned char **)(a5 + 72);
    unint64_t v17 = *(void *)(a5 + 80);
    if (*(unsigned char *)(a5 + 170))
    {
      if ((unint64_t)v18 >= v17)
      {
        unint64_t v19 = *(void *)(a5 + 64);
        int64_t v20 = &v18[-v19];
        uint64_t v21 = (uint64_t)&v18[-v19 + 1];
        if (v21 < 0) {
          goto LABEL_82;
        }
        unint64_t v22 = v17 - v19;
        if (2 * v22 > v21) {
          uint64_t v21 = 2 * v22;
        }
        if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v23 = v21;
        }
        if (v23) {
          std::pair<const char *, const char *> v24 = operator new(v23);
        }
        else {
          std::pair<const char *, const char *> v24 = 0;
        }
        char v40 = &v20[(void)v24];
        std::string::size_type v41 = (char *)v24 + v23;
        v20[(void)v24] = 95;
        uint64_t v31 = (uint64_t)&v20[(void)v24 + 1];
        if (v18 != (unsigned char *)v19)
        {
          unsigned __int8 v42 = &v18[~v19];
          do
          {
            char v43 = *--v18;
            (v42--)[(void)v24] = v43;
          }
          while (v18 != (unsigned char *)v19);
LABEL_75:
          std::vector<std::pair<std::string, std::string>>::pointer v18 = *(unsigned char **)(a5 + 64);
          goto LABEL_77;
        }
        goto LABEL_76;
      }
    }
    else if ((unint64_t)v18 >= v17)
    {
      unint64_t v35 = *(void *)(a5 + 64);
      uint64_t v36 = &v18[-v35];
      uint64_t v37 = (uint64_t)&v18[-v35 + 1];
      if (v37 < 0) {
        goto LABEL_82;
      }
      unint64_t v38 = v17 - v35;
      if (2 * v38 > v37) {
        uint64_t v37 = 2 * v38;
      }
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v39 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v39 = v37;
      }
      if (v39) {
        std::pair<const char *, const char *> v24 = operator new(v39);
      }
      else {
        std::pair<const char *, const char *> v24 = 0;
      }
      char v40 = &v36[(void)v24];
      std::string::size_type v41 = (char *)v24 + v39;
      v36[(void)v24] = 95;
      uint64_t v31 = (uint64_t)&v36[(void)v24 + 1];
      if (v18 != (unsigned char *)v35)
      {
        unint64_t v44 = &v18[~v35];
        do
        {
          char v45 = *--v18;
          (v44--)[(void)v24] = v45;
        }
        while (v18 != (unsigned char *)v35);
        goto LABEL_75;
      }
LABEL_76:
      std::pair<const char *, const char *> v24 = v40;
LABEL_77:
      *(void *)(a5 + 64) = v24;
      *(void *)(a5 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v31;
      *(void *)(a5 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v41;
      if (v18) {
        operator delete(v18);
      }
      goto LABEL_79;
    }
    *std::vector<std::pair<std::string, std::string>>::pointer v18 = 95;
    uint64_t v31 = (uint64_t)(v18 + 1);
LABEL_79:
    *(void *)(a5 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v31;
    return a2 + 1;
  }
  if (v7 <= 114)
  {
    if (v7 == 98)
    {
      unint64_t v16 = this;
      std::string::value_type v15 = 8;
LABEL_21:
      std::string::operator=(v16, v15);
      return a2 + 1;
    }
    if (v7 != 100) {
      goto LABEL_26;
    }
    int v9 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_25:
    *(_DWORD *)(a5 + 16ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v9;
    return a2 + 1;
  }
  if (v7 == 115)
  {
    int v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    goto LABEL_25;
  }
  if (v7 != 119) {
    goto LABEL_26;
  }
  *(_DWORD *)(a5 + 160) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](a5, 95);
  return a2 + 1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    int v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<char,char>>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        unint64_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *unint64_t v25 = v6;
        std::pair<const char *, const char *> v24 = v25 + 1;
        uint64_t v37 = *(char **)(a1 + 112);
        uint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--unint64_t v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<char,char>>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        unint64_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *unint64_t v25 = v6;
        std::pair<const char *, const char *> v24 = v25 + 1;
        size_t v39 = *(char **)(a1 + 112);
        uint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--unint64_t v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    abort();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  int v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    _WORD *v8 = v6;
    std::pair<const char *, const char *> v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<char,char>>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  unint64_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *unint64_t v25 = v6;
  std::pair<const char *, const char *> v24 = v25 + 1;
  unint64_t v28 = *(char **)(a1 + 112);
  uint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--unint64_t v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  uint64_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 11std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v25;
  *(void *)(a1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 12ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v24;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:nn180100](void **a1, long long *a2)
{
  uint64_t v4 = (char *)a1[1];
  unsigned __int8 v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v13 = (char *)operator new(48 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[48 * v9];
    *(_OWORD *)uint64_t v14 = *a2;
    *((void *)v14 + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    unint64_t v16 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      unint64_t v8 = v14 + 48;
      *a1 = v14;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
    }
    else
    {
      uint64_t v18 = &v13[48 * v9];
      do
      {
        long long v19 = *((_OWORD *)v17 - 3);
        *((void *)v18 - 4) = *((void *)v17 - 4);
        *((_OWORD *)v18 - 3) = v19;
        *((void *)v17 - 5) = 0;
        *((void *)v17 - 4) = 0;
        *((void *)v17 - std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = 0;
        long long v20 = *(_OWORD *)(v17 - 24);
        *((void *)v18 - 1) = *((void *)v17 - 1);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *((void *)v17 - std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
        *((void *)v17 - 1) = 0;
        *((void *)v17 - 3) = 0;
        v17 -= 48;
      }
      while (v17 != v16);
      uint64_t v17 = (char *)*a1;
      uint64_t v21 = (uint64_t)a1[1];
      unint64_t v8 = v14 + 48;
      *a1 = v18;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
      while ((char *)v21 != v17)
      {
        v21 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](v21);
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v4 + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *((void *)v4 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    unint64_t v8 = v4 + 48;
  }
  a1[1] = v8;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(2 * a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364)
          {
            uint64_t v6 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
            return (unsigned __int8 *)std::__loop<char>::~__loop(v6);
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x237DBCBD0);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:nn180100](result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:nn180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x237DBCBD0);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E70AEE0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:nn180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unint64_t v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v5;
      *((void *)v7 - 1) = v5;
      *unint64_t v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v3;
  }
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unint64_t v9 = (unsigned __int8 *)(a2 + 1);
  int v8 = *a2;
  if (a2 + 1 != a3 || v8 != 36)
  {
    if ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_32;
    }
    if (v9 == (unsigned __int8 *)a3 || v8 != 92)
    {
      if (v8 == 46) {
        operator new();
      }
    }
    else
    {
      int v17 = (char)*v9;
      if ((v17 - 36) <= 0x3A && ((1 << (v17 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        unint64_t v9 = (unsigned __int8 *)(v3 + 2);
        goto LABEL_32;
      }
    }
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, a2, a3);
  unint64_t v11 = v10;
  if (v10 == v3 && v10 != a3)
  {
    if (v9 == (unsigned __int8 *)a3 || *v3 != 92) {
      return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v3;
    }
    int v12 = *v9;
    if (v12 == 40)
    {
      uint64_t v13 = (uint64_t)(v3 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      unsigned int v14 = a1->__marked_count_;
      do
      {
        long long v15 = (char *)v13;
        uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
      }
      while ((char *)v13 != v15);
      if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41) {
        goto LABEL_59;
      }
      unint64_t v11 = v15 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
    }
    else
    {
      BOOL v18 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
      uint64_t v19 = 2;
      if (!v18) {
        uint64_t v19 = 0;
      }
      unint64_t v11 = &v3[v19];
    }
  }
  unint64_t v9 = (unsigned __int8 *)v11;
  if (v11 == v3) {
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v3;
  }
LABEL_32:
  if (v9 == (unsigned __int8 *)a3) {
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))a3;
  }
  size_t v20 = a1->__marked_count_ + 1;
  int v21 = *v9;
  if (v21 == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))(v9 + 1);
  }
  if (v9 + 1 == (unsigned __int8 *)a3 || v21 != 92 || v9[1] != 123) {
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v9;
  }
  int v32 = 0;
  uint64_t v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, (unsigned __int8 *)a3, &v32);
  if (v22 == v9 + 2)
  {
LABEL_48:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v9;
  }
  if (v22 != (unsigned __int8 *)a3)
  {
    uint64_t v23 = (char *)(v22 + 1);
    int v24 = *v22;
    if (v24 == 44)
    {
      int v31 = -1;
      unint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v22 + 1, (unsigned __int8 *)a3, &v31);
      if (v25 != (unsigned __int8 *)a3 && v25 + 1 != (unsigned __int8 *)a3 && *v25 == 92 && v25[1] == 125)
      {
        size_t v27 = v31;
        size_t v26 = v32;
        if (v31 == -1)
        {
          size_t v27 = -1;
        }
        else if (v31 < v32)
        {
          goto LABEL_48;
        }
        uint64_t v3 = (char *)&v25[2 * (v25[1] == 125)];
        unint64_t v28 = a1;
LABEL_56:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(v28, v26, v27, end, marked_count + 1, v20, 1);
        return (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))v3;
      }
    }
    else if (v23 != a3 && v24 == 92 && *v23 == 125)
    {
      uint64_t v3 = (char *)(v22 + 2);
      size_t v26 = v32;
      unint64_t v28 = a1;
      size_t v27 = v32;
      goto LABEL_56;
    }
  }
  std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_59:
  uint64_t v30 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
  return std::__match_any<char>::~__match_any(v30);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_)
  {
    uint64_t v3 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(v3);
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
    return 1;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == a2)
  {
    int v8 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(v8, v9, v10);
  }
  else
  {
    do
    {
      unint64_t v7 = v6;
      std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v6, a3);
    }
    while (v6 != v7);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::vector<char>::pointer end = this->__end_;
  unsigned int marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
LABEL_25:
    if ((char *)v15 != a2 || (char *)v15 == a3) {
      goto LABEL_36;
    }
    int v18 = *a2;
    if (v18 != 36)
    {
      if (v18 != 40)
      {
        if (v18 != 94) {
          return;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
        goto LABEL_32;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unsigned int v19 = this->__marked_count_;
      ++this->__open_count_;
      size_t v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this);
      if (v20 == a3 || (int v21 = v20, *v20 != 41))
      {
        uint64_t v23 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
        std::regex_iterator<char *,char,std::regex_traits<char>>::operator==(v23);
        return;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v19);
      --this->__open_count_;
      uint64_t v15 = (uint64_t)(v21 + 1);
LABEL_36:
      unsigned int v14 = (unsigned __int8 *)v15;
      if ((char *)v15 == a2) {
        return;
      }
      goto LABEL_37;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
LABEL_32:
    unsigned int v14 = (unsigned __int8 *)(a2 + 1);
    goto LABEL_37;
  }
  int v8 = *a2;
  int v9 = *a2;
  uint64_t v10 = (v8 - 36);
  if (v10 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (this->__open_count_) {
        goto LABEL_4;
      }
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      goto LABEL_32;
    }
LABEL_13:
    if ((v8 - 123) < 2) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
LABEL_4:
  unint64_t v11 = a2 + 1;
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v12 = *v11;
  char v13 = *v11;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((this->__flags_ & 0x1F0) == 0x40)
    {
      uint64_t v15 = ((uint64_t (*)(std::basic_regex<char> *, char *, char *, void))std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>)(this, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
      uint64_t v17 = 2;
      if (!v16) {
        uint64_t v17 = 0;
      }
      uint64_t v15 = (uint64_t)&a2[v17];
    }
    if ((char *)v15 != a2) {
      goto LABEL_25;
    }
    int v9 = *a2;
    goto LABEL_22;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
  unsigned int v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v22 = this->__marked_count_ + 1;
  std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v14, (unsigned __int8 *)a3, end, marked_count + 1, v22);
}

BOOL std::regex_iterator<char *,char,std::regex_traits<char>>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v6 + 8);
  uint64_t v9 = a2 + 32;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(v9 + 8);
  BOOL v10 = v8 == v7 && v5 == v4;
  if (v5 != v4 && v8 != v7) {
    return *(void *)a1 == *(void *)a2
  }
        && *(void *)(a1 + 8) == *(void *)(a2 + 8)
        && *(void *)(a1 + 16) == *(void *)(a2 + 16)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && std::sub_match<char *>::compare[abi:nn180100](v4, v7) == 0;
  return v10;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  unint64_t v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0) {
      goto LABEL_18;
    }
    int v18 = v9 | 0x80;
    unsigned int v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        int v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        begiuint64_t n = this->__begin_;
        std::vector<std::csub_match>::pointer end = this->__end_;
        if (v20) {
          goto LABEL_8;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      uint64_t result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  begiuint64_t n = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
LABEL_8:
  if (end == begin) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = begin;
  }
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<char *>::__assign[abi:nn180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  char v5 = a5;
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  char v13 = *(void **)a1;
  int v12 = *(void **)(a1 + 8);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *(void *)a1) >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    size_t v22 = *(char **)(a1 + 8);
    if (v11 >= v14) {
      goto LABEL_24;
    }
    size_t v22 = (char *)&v13[(a4[1] - *a4) >> 3];
    goto LABEL_20;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3) >= v15)
  {
    size_t v22 = (char *)&v12[3 * v15];
    uint64_t v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * (((uint64_t)v12 - *(void *)a1) >> 3);
    do
    {
      *int v12 = 0;
      v12[1] = 0;
      *((unsigned char *)v12 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
      v12 += 3;
      v27 -= 24;
    }
    while (v27);
LABEL_20:
    *(void *)(a1 + 8) = v22;
    goto LABEL_24;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3);
  unint64_t v18 = 0x5555555555555556 * ((v16 - (uint64_t)v13) >> 3);
  if (v18 <= v11) {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  }
  if (v17 >= 0x555555555555555) {
    unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v19 = v18;
  }
  if (v19 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  int v20 = (char *)operator new(24 * v19);
  int v21 = &v20[24 * v14];
  size_t v22 = &v20[24 * v11];
  uint64_t v23 = v21;
  uint64_t v24 = 24 * v11 - 24 * v14;
  do
  {
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24;
  }
  while (v24);
  unint64_t v25 = &v20[24 * v19];
  if (v12 == v13)
  {
    char v5 = a5;
  }
  else
  {
    char v5 = a5;
    do
    {
      long long v26 = *(_OWORD *)(v12 - 3);
      *((void *)v21 - 1) = *(v12 - 1);
      *(_OWORD *)(v21 - 24) = v26;
      v21 -= 24;
      v12 -= 3;
    }
    while (v12 != v13);
    int v12 = v13;
  }
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v22;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v25;
  if (v12)
  {
    operator delete(v12);
    size_t v22 = *(char **)(a1 + 8);
  }
LABEL_24:
  unint64_t v28 = &v22[-*(void *)a1];
  if (v22 != *(char **)a1)
  {
    unint64_t v29 = 0;
    unint64_t v30 = (uint64_t)v28 / 24;
    int v31 = (uint64_t *)*a4;
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    unint64_t v33 = (unsigned char *)(*(void *)a1 + 16);
    do
    {
      if (v32 <= v29) {
        unint64_t v34 = a4 + 3;
      }
      else {
        unint64_t v34 = v31;
      }
      uint64_t v35 = a2 + v34[1] - v10;
      *((void *)v33 - std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = a2 + *v34 - v10;
      *((void *)v33 - 1) = v35;
      unsigned char *v33 = *((unsigned char *)v34 + 16);
      v33 += 24;
      ++v29;
      v31 += 3;
    }
    while (v30 != v29);
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = a3;
  uint64_t v36 = a2 + a4[6] - v10;
  uint64_t v37 = a2 + a4[7] - v10;
  *(void *)(a1 + 48) = v36;
  *(void *)(a1 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = v37;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  uint64_t v38 = a4[9] - v10;
  uint64_t v39 = a4[10] - v10;
  *(unsigned char *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(a1 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = a2 + v38;
  *(void *)(a1 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = a2 + v39;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a4 + 88);
  if ((v5 & 1) == 0) {
    *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 104) = v36;
  }
  *(unsigned char *)(a1 + 9std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7 = a5;
  uint64_t v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    JUMPOUT(0x233A11D34);
  }
  float32x4_t v172 = (const char *)(a3 - a2);
  if (!*(_DWORD *)(a1 + 28))
  {
    long long v174 = 0u;
    int64x2_t v175 = 0u;
    *(_OWORD *)uint64_t v173 = 0u;
    uint64_t v79 = *(void *)(a1 + 40);
    if (v79)
    {
      *(_DWORD *)int v176 = 0;
      memset(&v176[8], 0, 48);
      *(_OWORD *)std::string __p = 0uLL;
      memset(v178, 0, 21);
      std::deque<std::__state<char>>::push_back(v173, (uint64_t)v176);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      float32x4_t v161 = a4;
      if (*(void *)&v176[32]) {
        operator delete(*(void **)&v176[32]);
      }
      uint64_t v80 = v173[1];
      unint64_t v81 = v175.i64[1] + v175.i64[0] - 1;
      unint64_t v82 = v81 / 0x2A;
      uint64_t v83 = *((void *)v173[1] + v81 / 0x2A);
      unint64_t v84 = 3 * (v81 % 0x2A);
      uint64_t v85 = v83 + 32 * v84;
      *(_DWORD *)uint64_t v85 = 0;
      *(void *)(v85 + 8) = v10;
      *(void *)(v80[v82] + 32 * v84 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
      int v168 = a3;
      *(void *)(v80[v82] + 32 * v84 + 24) = a3;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v80[v82] + 32 * v84 + 56), *(unsigned int *)(a1 + 32));
      char v163 = 0;
      unsigned int v86 = 0;
      float32x4_t v159 = 0;
      uint64_t v87 = v175.i64[1];
      std::string::value_type v88 = v173[1];
      unint64_t v89 = v175.i64[1] + v175.i64[0] - 1;
      unint64_t v90 = v89 / 0x2A;
      unint64_t v91 = 3 * (v89 % 0x2A);
      *(void *)(*((void *)v173[1] + v90) + 32 * v91 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v79;
      uint64_t v92 = v88[v90] + 32 * v91;
      *(_DWORD *)(v92 + 88) = v7;
      *(unsigned char *)(v92 + 9std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = a6;
      while (2)
      {
        if ((++v86 & 0xFFF) == 0 && (int)(v86 >> 12) >= (int)v172)
        {
LABEL_217:
          std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_218:
          std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)17>();
LABEL_219:
          abort();
        }
        unint64_t v94 = v87 + v175.i64[0] - 1;
        uint64_t v95 = *((void *)v173[1] + v94 / 0x2A);
        unint64_t v96 = v94 % 0x2A;
        uint64_t v97 = v95 + 96 * (v94 % 0x2A);
        size_t v99 = (void *)(v97 + 80);
        uint64_t v98 = *(void *)(v97 + 80);
        if (v98) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v98 + 16))(v98, v95 + 96 * v96);
        }
        switch(*(_DWORD *)v97)
        {
          case 0xFFFFFC18:
            std::string::size_type v100 = *(const char **)(v95 + 96 * v96 + 16);
            if ((v7 & 0x20) != 0 && v100 == v10 || (v7 & 0x1000) != 0 && v100 != v168) {
              goto LABEL_191;
            }
            uint64_t v101 = &v100[-*(void *)(v95 + 96 * v96 + 8)];
            std::__split_buffer<std::string> v102 = v159;
            if ((v163 & ((uint64_t)v159 >= (uint64_t)v101)) == 0) {
              std::__split_buffer<std::string> v102 = v101;
            }
            if (v102 != v172)
            {
              float32x4_t v159 = v102;
              std::deque<std::__state<char>>::pop_back(v173);
              char v163 = 1;
              goto LABEL_192;
            }
            int64_t v103 = (void **)v173[1];
            std::string::size_type v104 = (unsigned char *)v174;
            if ((void *)v174 == v173[1])
            {
              std::string::size_type v104 = v173[1];
            }
            else
            {
              int v105 = (char *)v173[1] + 8 * (v175.i64[0] / 0x2AuLL);
              uint64_t v106 = (void *)(*v105 + 96 * (v175.i64[0] % 0x2AuLL));
              unint64_t v107 = *((void *)v173[1] + (v175.i64[1] + v175.i64[0]) / 0x2AuLL)
                   + 96 * ((v175.i64[1] + v175.i64[0]) % 0x2AuLL);
              if (v106 != (void *)v107)
              {
                do
                {
                  std::allocator<std::__state<char>>::destroy[abi:nn180100](v106);
                  v106 += 12;
                  if ((void *)((char *)v106 - *v105) == (void *)4032)
                  {
                    unint64_t v108 = (void *)v105[1];
                    ++v105;
                    uint64_t v106 = v108;
                  }
                }
                while (v106 != (void *)v107);
                int64_t v103 = (void **)v173[1];
                std::string::size_type v104 = (unsigned char *)v174;
              }
              LOWORD(v7) = a5;
            }
            v175.i64[1] = 0;
            unint64_t v141 = v104 - (unsigned char *)v103;
            if (v141 >= 0x11)
            {
              do
              {
                operator delete(*v103);
                int64_t v103 = (void **)((char *)v173[1] + 8);
                v173[1] = v103;
                unint64_t v141 = v174 - (void)v103;
              }
              while ((void)v174 - (void)v103 > 0x10uLL);
            }
            if (v141 >> 3 == 1)
            {
              uint64_t v142 = 21;
            }
            else
            {
              if (v141 >> 3 != 2) {
                goto LABEL_179;
              }
              uint64_t v142 = 42;
            }
            v175.i64[0] = v142;
LABEL_179:
            char v163 = 1;
            float32x4_t v159 = v172;
LABEL_192:
            uint64_t v87 = v175.i64[1];
            if (v175.i64[1]) {
              continue;
            }
            if ((v163 & 1) == 0) {
              goto LABEL_195;
            }
            uint64_t v150 = *v161;
            *(void *)uint64_t v150 = v10;
            *(void *)(v150 + 8) = &v159[(void)v10];
            char v14 = 1;
            *(unsigned char *)(v150 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_192;
          case 0xFFFFFC1D:
            unint64_t v109 = v175.i64[0];
            size_t v110 = (char *)v173[1];
            std::regex_traits<char>::char_class_type v111 = (char *)v174;
            if (!v175.i64[0])
            {
              unint64_t v112 = (uint64_t)(v174 - (unint64_t)v173[1]) >> 3;
              uint64_t v113 = 42 * v112 - 1;
              if ((void *)v174 == v173[1]) {
                uint64_t v113 = 0;
              }
              if ((unint64_t)(v113 - v175.i64[1]) < 0x2A)
              {
                if (v112 >= (uint64_t)(*((void *)&v174 + 1) - (unint64_t)v173[0]) >> 3)
                {
                  uint64_t v170 = v10;
                  if (*((void **)&v174 + 1) == v173[0]) {
                    unint64_t v117 = 1;
                  }
                  else {
                    unint64_t v117 = (uint64_t)(*((void *)&v174 + 1) - (unint64_t)v173[0]) >> 2;
                  }
                  *(void *)&v176[32] = (char *)&v174 + 8;
                  *(void *)int v176 = std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v117);
                  *(void *)&v176[8] = *(void *)v176;
                  *(void *)&v176[16] = *(void *)v176;
                  *(void *)&unsigned char v176[24] = *(void *)v176 + 8 * v118;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<zip_entry_t *>::push_back(v176, &__x);
                  char v120 = (uint64_t *)v173[1];
                  int v119 = (uint64_t *)v174;
                  BOOL v121 = *(char **)&v176[16];
                  while (v120 != v119)
                  {
                    if (v121 == *(char **)&v176[24])
                    {
                      char v122 = *(char **)&v176[8];
                      uint64_t v123 = *(void **)v176;
                      if (*(void *)&v176[8] <= *(void *)v176)
                      {
                        if (v121 == *(char **)v176) {
                          unint64_t v130 = 1;
                        }
                        else {
                          unint64_t v130 = (uint64_t)&v121[-*(void *)v176] >> 2;
                        }
                        id v131 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v130);
                        uint64_t v134 = v121 - v122;
                        BOOL v133 = v121 == v122;
                        BOOL v121 = &v131[8 * (v130 >> 2)];
                        if (!v133)
                        {
                          BOOL v121 = &v131[8 * (v130 >> 2) + (v134 & 0xFFFFFFFFFFFFFFF8)];
                          uint64_t v135 = 8 * (v134 >> 3);
                          uint64_t v136 = &v131[8 * (v130 >> 2)];
                          do
                          {
                            uint64_t v137 = *(void *)v122;
                            v122 += 8;
                            *(void *)uint64_t v136 = v137;
                            v136 += 8;
                            v135 -= 8;
                          }
                          while (v135);
                        }
                        *(void *)int v176 = v131;
                        *(void *)&v176[8] = &v131[8 * (v130 >> 2)];
                        *(void *)&v176[16] = v121;
                        *(void *)&unsigned char v176[24] = &v131[8 * v132];
                        if (v123) {
                          operator delete(v123);
                        }
                      }
                      else
                      {
                        uint64_t v124 = (uint64_t)(*(void *)&v176[8] - *(void *)v176) >> 3;
                        if (v124 >= -1) {
                          uint64_t v125 = v124 + 1;
                        }
                        else {
                          uint64_t v125 = v124 + 2;
                        }
                        uint64_t v126 = *(void *)&v176[8] - 8 * (v125 >> 1);
                        size_t v127 = (size_t)&v121[-*(void *)&v176[8]];
                        if (v121 != *(char **)&v176[8])
                        {
                          float32x4_t v128 = (void *)(*(void *)&v176[8] - 8 * (v125 >> 1));
                          memmove(v128, *(const void **)&v176[8], v127);
                          uint64_t v126 = (uint64_t)v128;
                          BOOL v121 = v122;
                        }
                        __int16 v129 = &v121[-8 * (v125 >> 1)];
                        BOOL v121 = (char *)(v126 + v127);
                        *(void *)&v176[8] = v129;
                        *(void *)&v176[16] = v126 + v127;
                      }
                    }
                    uint64_t v138 = *v120++;
                    *(void *)BOOL v121 = v138;
                    BOOL v121 = (char *)(*(void *)&v176[16] + 8);
                    *(void *)&v176[16] += 8;
                    int v119 = (uint64_t *)v174;
                  }
                  int v139 = v173[0];
                  *(_OWORD *)uint64_t v173 = *(_OWORD *)v176;
                  *(void *)&long long v174 = v121;
                  *((void *)&v174 + 1) = *(void *)&v176[24];
                  uint64_t v140 = 21;
                  if (&v121[-*(void *)&v176[8]] != (char *)8) {
                    uint64_t v140 = v175.i64[0] + 42;
                  }
                  v175.i64[0] = v140;
                  if (v139) {
                    operator delete(v139);
                  }
                  uint64_t v10 = v170;
                  LOWORD(v7) = a5;
                }
                else
                {
                  if (v173[1] == v173[0])
                  {
                    *(void *)int v176 = operator new(0xFC0uLL);
                    std::__split_buffer<zip_entry_t *>::push_back(v173, v176);
                    *(void *)int v176 = *(void *)(v174 - 8);
                    *(void *)&long long v174 = v174 - 8;
                  }
                  else
                  {
                    *(void *)int v176 = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<zip_entry_t *>::push_front((uint64_t)v173, v176);
                  uint64_t v143 = 21;
                  if ((void)v174 - (unint64_t)v173[1] != 8) {
                    uint64_t v143 = v175.i64[0] + 42;
                  }
                  v175.i64[0] = v143;
                }
              }
              else
              {
                v175.i64[0] = 42;
                *(void *)int v176 = *(void *)(v174 - 8);
                *(void *)&long long v174 = v174 - 8;
                std::__split_buffer<zip_entry_t *>::push_front((uint64_t)v173, v176);
              }
              unint64_t v109 = v175.i64[0];
              size_t v110 = (char *)v173[1];
              std::regex_traits<char>::char_class_type v111 = (char *)v174;
            }
            unint64_t v144 = &v110[8 * (v109 / 0x2A)];
            unint64_t v145 = *(void *)v144 + 96 * (v109 % 0x2A);
            if (v111 == v110) {
              uint64_t v146 = 0;
            }
            else {
              uint64_t v146 = v145;
            }
            if (v146 == *(void *)v144) {
              uint64_t v146 = *((void *)v144 - 1) + 4032;
            }
            long long v147 = *(_OWORD *)(v97 + 16);
            *(_OWORD *)(v146 - 9std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(_OWORD *)v97;
            *(_OWORD *)(v146 - 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v147;
            uint64_t v148 = v95 + 96 * v96;
            *(void *)(v146 - re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
            *(void *)(v146 - 48) = 0;
            *(void *)(v146 - 64) = 0;
            *(_OWORD *)(v146 - 64) = *(_OWORD *)(v148 + 32);
            *(void *)(v146 - 48) = *(void *)(v148 + 48);
            *(void *)(v148 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
            *(void *)(v148 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
            *(void *)(v148 + 48) = 0;
            *(void *)(v146 - 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
            *(void *)(v146 - 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
            *(void *)(v146 - 24) = 0;
            *(_OWORD *)(v146 - 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(_OWORD *)(v148 + 56);
            *(void *)(v146 - 24) = *(void *)(v148 + 72);
            *(void *)(v148 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
            *(void *)(v148 + 64) = 0;
            *(void *)(v148 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
            uint64_t v149 = *v99;
            *(void *)(v146 - 11) = *(void *)(v97 + 85);
            *(void *)(v146 - re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v149;
            int64x2_t v175 = vaddq_s64(v175, (int64x2_t)xmmword_2343A9950);
            goto LABEL_191;
          case 0xFFFFFC1F:
LABEL_191:
            std::deque<std::__state<char>>::pop_back(v173);
            goto LABEL_192;
          case 0xFFFFFC20:
            long long v114 = *(_OWORD *)(v97 + 16);
            *(_OWORD *)int v176 = *(_OWORD *)v97;
            *(_OWORD *)&v176[16] = v114;
            uint64_t v115 = (long long **)(v95 + 96 * v96);
            memset(&v176[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:nn180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v176[32], v115[4], v115[5], 0xAAAAAAAAAAAAAAABLL * (((char *)v115[5] - (char *)v115[4]) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v178[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:nn180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, v115[7], v115[8], v115[8] - v115[7]);
            uint64_t v116 = *v99;
            *(void *)((char *)&v178[1] + 5) = *(void *)(v97 + 85);
            v178[1] = v116;
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v99 + 24))(*v99, 1, v97);
            (*(void (**)(void, void, unsigned char *))(*(void *)v178[1] + 24))(v178[1], 0, v176);
            std::deque<std::__state<char>>::push_back(v173, (uint64_t)v176);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(void *)&v176[32])
            {
              *(void *)&v176[40] = *(void *)&v176[32];
              operator delete(*(void **)&v176[32]);
            }
            goto LABEL_192;
          default:
            goto LABEL_218;
        }
        break;
      }
    }
    else
    {
LABEL_195:
      char v14 = 0;
    }
    unint64_t v151 = (void **)v173[1];
    unint64_t v152 = (void **)v174;
    v175.i64[1] = 0;
    unint64_t v153 = v174 - (unint64_t)v173[1];
    if ((unint64_t)v174 - (unint64_t)v173[1] >= 0x11)
    {
      do
      {
        operator delete(*v151);
        unint64_t v152 = (void **)v174;
        unint64_t v151 = (void **)((char *)v173[1] + 8);
        v173[1] = v151;
        unint64_t v153 = v174 - (void)v151;
      }
      while ((void)v174 - (void)v151 > 0x10uLL);
    }
    unint64_t v154 = v153 >> 3;
    if (v154 == 1)
    {
      uint64_t v155 = 21;
    }
    else
    {
      if (v154 != 2) {
        goto LABEL_210;
      }
      uint64_t v155 = 42;
    }
    v175.i64[0] = v155;
LABEL_210:
    if (v151 != v152)
    {
      do
      {
        unint64_t v156 = *v151++;
        operator delete(v156);
      }
      while (v151 != v152);
      if ((void *)v174 != v173[1]) {
        *(void *)&long long v174 = v174 + (((unint64_t)v173[1] - v174 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    if (v173[0]) {
      operator delete(v173[0]);
    }
    return v14 & 1;
  }
  v173[0] = 0;
  v173[1] = 0;
  *(void *)&long long v174 = 0;
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12)
  {
    char v14 = 0;
    goto LABEL_207;
  }
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)int v176 = 0;
  memset(&v176[8], 0, 48);
  *(_OWORD *)std::string __p = 0u;
  memset(v178, 0, 21);
  char v13 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v173, (uint64_t)v176);
  v173[1] = v13;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  float32x4_t v160 = a4;
  if (*(void *)&v176[32]) {
    operator delete(*(void **)&v176[32]);
  }
  *((_DWORD *)v13 - 24) = 0;
  *((void *)v13 - 11) = v10;
  *((void *)v13 - 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v10;
  float32x4_t v167 = a3;
  *((void *)v13 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), *(unsigned int *)(a1 + 32));
  int v165 = 0;
  uint64_t v166 = 0;
  float32x4_t v162 = 0;
  long long v164 = 0;
  uint64_t v169 = 0;
  float32x4_t v158 = 0;
  char v14 = 0;
  unsigned int v15 = 0;
  uint64_t v16 = 0;
  *((void *)v13 - std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v12;
  *((_DWORD *)v13 - std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = a5;
  *(v13 - 4) = a6;
  while (2)
  {
    BOOL v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v172;
    if (!v17) {
      goto LABEL_217;
    }
    uint64_t v18 = *((void *)v13 - 2);
    unint64_t v19 = v13 - 96;
    if (v18) {
      (*(void (**)(uint64_t, char *))(*(void *)v18 + 16))(v18, v13 - 96);
    }
    switch(*(_DWORD *)v19)
    {
      case 0xFFFFFC18:
        int v20 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v20 == v10 || (a5 & 0x1000) != 0 && v20 != v167) {
          goto LABEL_21;
        }
        uint64_t v27 = &v20[-*((void *)v13 - 11)];
        if ((v14 & ((uint64_t)v16 >= (uint64_t)v27)) != 0)
        {
          unint64_t v28 = v169;
          goto LABEL_89;
        }
        unint64_t v30 = (long long *)*((void *)v13 - 8);
        unint64_t v29 = (long long *)*((void *)v13 - 7);
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
        unint64_t v32 = v165;
        uint64_t v33 = (uint64_t)v164;
        if (0xAAAAAAAAAAAAAAABLL * ((v164 - v165) >> 3) >= v31)
        {
          unint64_t v28 = v169;
          uint64_t v34 = (uint64_t)v162;
          if (0xAAAAAAAAAAAAAAABLL * ((v166 - v165) >> 3) >= v31)
          {
            if (v30 == v29)
            {
              char v45 = v165;
              std::regex_traits<char>::char_class_type v46 = v165;
            }
            else
            {
              char v45 = v165;
              std::regex_traits<char>::char_class_type v46 = v165;
              char v47 = v165;
              do
              {
                *(_OWORD *)char v47 = *v30;
                v47[16] = *((unsigned char *)v30 + 16);
                v46 += 24;
                unint64_t v30 = (long long *)((char *)v30 + 24);
                v47 += 24;
              }
              while (v30 != v29);
            }
            uint64_t i = v46 - v45;
            uint64_t v166 = v45;
          }
          else
          {
            std::string::size_type v41 = (long long *)((char *)v30 + 8 * ((v166 - v165) >> 3));
            if (v166 != v165)
            {
              do
              {
                *(_OWORD *)unint64_t v32 = *v30;
                v32[16] = *((unsigned char *)v30 + 16);
                unint64_t v30 = (long long *)((char *)v30 + 24);
                v32 += 24;
              }
              while (v30 != v41);
            }
            if (v41 == v29)
            {
              char v43 = v166;
            }
            else
            {
              unsigned __int8 v42 = v166;
              char v43 = v166;
              do
              {
                long long v44 = *v41;
                *((void *)v42 + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *((void *)v41 + 2);
                *(_OWORD *)unsigned __int8 v42 = v44;
                v42 += 24;
                std::string::size_type v41 = (long long *)((char *)v41 + 24);
                v43 += 24;
              }
              while (v41 != v29);
            }
            uint64_t i = v43 - v166;
          }
        }
        else
        {
          uint64_t v34 = (uint64_t)v162;
          if (v165)
          {
            operator delete(v165);
            uint64_t v33 = 0;
          }
          if (v31 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_219;
          }
          unint64_t v35 = 0x5555555555555556 * (v33 >> 3);
          if (v35 <= v31) {
            unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
          }
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v35;
          if (v36 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_219;
          }
          uint64_t v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v36);
          uint64_t v39 = v38;
          if (v30 == v29)
          {
            unint64_t v28 = v169;
          }
          else
          {
            unint64_t v28 = v169;
            do
            {
              long long v40 = *v30;
              *((void *)v39 + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *((void *)v30 + 2);
              *(_OWORD *)uint64_t v39 = v40;
              v39 += 24;
              unint64_t v30 = (long long *)((char *)v30 + 24);
            }
            while (v30 != v29);
          }
          long long v164 = &v38[24 * v37];
          uint64_t i = v39 - v38;
          int v165 = v38;
          uint64_t v166 = v38;
        }
        unint64_t v49 = (long long *)*((void *)v13 - 5);
        std::vector<char>::pointer v50 = (char *)*((void *)v13 - 4);
        unint64_t v51 = (v50 - (char *)v49) >> 4;
        if (v51 > (v34 - (uint64_t)v28) >> 4)
        {
          if (v28)
          {
            uint64_t v52 = i;
            operator delete(v28);
            uint64_t i = v52;
            uint64_t v34 = 0;
          }
          if (v50 - (char *)v49 < 0) {
            goto LABEL_219;
          }
          uint64_t v53 = v34 >> 3;
          if (v34 >> 3 <= v51) {
            uint64_t v53 = (v50 - (char *)v49) >> 4;
          }
          unint64_t v54 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v53;
          if (v54 >> 60) {
            goto LABEL_219;
          }
          uint64_t v55 = i;
          unint64_t v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v54);
          unint64_t v57 = v166;
          std::string::size_type v58 = v28;
          for (uint64_t i = v55; v49 != (long long *)v50; v58 += 16)
          {
            long long v59 = *v49++;
            *(_OWORD *)std::string::size_type v58 = v59;
          }
          float32x4_t v162 = &v28[16 * v56];
          goto LABEL_87;
        }
        uint64_t v60 = v158;
        unint64_t v61 = (v158 - v28) >> 4;
        if (v61 >= v51)
        {
          unint64_t v57 = v166;
          std::string::size_type v58 = v28;
          if (v49 != (long long *)v50)
          {
            BOOL v68 = v28;
            do
            {
              *BOOL v68 = *(void *)v49;
              v68[1] = *((void *)v49 + 1);
              v58 += 16;
              ++v49;
              v68 += 2;
            }
            while (v49 != (long long *)v50);
          }
LABEL_87:
          int64_t v67 = v58 - v28;
          uint64_t v60 = v28;
          goto LABEL_88;
        }
        BOOL v62 = &v49[v61];
        unint64_t v57 = v166;
        if (v158 != v28)
        {
          int v63 = v28;
          do
          {
            *int v63 = *(void *)v49;
            v63[1] = *((void *)v49++ + 1);
            v63 += 2;
          }
          while (v49 != v62);
        }
        size_t v64 = v158;
        if (v62 != (long long *)v50)
        {
          std::string::size_type v65 = v158;
          do
          {
            long long v66 = *v62++;
            *(_OWORD *)std::string::size_type v65 = v66;
            v65 += 16;
            v64 += 16;
          }
          while (v62 != (long long *)v50);
        }
        int64_t v67 = v64 - v158;
LABEL_88:
        uint64_t v166 = &v57[i];
        float32x4_t v158 = &v60[v67];
        uint64_t v16 = v27;
LABEL_89:
        uint64_t v169 = v28;
        int v69 = v173[1];
        if (v16 == v172)
        {
          size_t v70 = v173[0];
          while (v69 != v70)
          {
            v69 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:nn180100](v69);
          }
          v173[1] = v70;
          char v14 = 1;
          uint64_t v16 = v172;
        }
        else
        {
          std::string::size_type v71 = (char *)v173[1] - 96;
          std::allocator<std::__state<char>>::destroy[abi:nn180100]((void *)v173[1] - 12);
          v173[1] = v71;
          char v14 = 1;
        }
LABEL_28:
        char v13 = (char *)v173[1];
        if (v173[0] != v173[1]) {
          continue;
        }
        if (v14)
        {
          uint64_t v72 = *v160;
          int v73 = v169;
          *(void *)uint64_t v72 = v10;
          *(void *)(v72 + 8) = &v16[(void)v10];
          *(unsigned char *)(v72 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
          BOOL v74 = v165;
          if (v166 != v165)
          {
            std::vector<std::string>::pointer v75 = v165 + 16;
            unsigned int v76 = 1;
            do
            {
              uint64_t v77 = v72 + 24 * v76;
              *(_OWORD *)uint64_t v77 = *((_OWORD *)v75 - 1);
              char v78 = *v75;
              v75 += 24;
              *(unsigned char *)(v77 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v78;
              BOOL v17 = 0xAAAAAAAAAAAAAAABLL * ((v166 - v165) >> 3) > v76++;
            }
            while (v17);
          }
        }
        else
        {
          int v73 = v169;
          BOOL v74 = v165;
        }
        if (v73) {
          operator delete(v73);
        }
        if (v74) {
          operator delete(v74);
        }
LABEL_207:
        *(void *)int v176 = v173;
        std::vector<std::__state<char>>::__destroy_vector::operator()[abi:nn180100]((void ***)v176);
        return v14 & 1;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_28;
      case 0xFFFFFC1F:
LABEL_21:
        int v21 = (char *)v173[1] - 96;
        std::allocator<std::__state<char>>::destroy[abi:nn180100]((void *)v173[1] - 12);
        v173[1] = v21;
        goto LABEL_28;
      case 0xFFFFFC20:
        long long v22 = *((_OWORD *)v13 - 5);
        *(_OWORD *)int v176 = *(_OWORD *)v19;
        *(_OWORD *)&v176[16] = v22;
        memset(&v176[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:nn180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v176[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v178[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:nn180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
        uint64_t v23 = *((void *)v13 - 2);
        *(void *)((char *)&v178[1] + 5) = *(void *)(v13 - 11);
        v178[1] = v23;
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(*(void *)v178[1] + 24))(v178[1], 0, v176);
        uint64_t v24 = (char *)v173[1];
        if (v173[1] >= (void *)v174)
        {
          v173[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v173, (uint64_t)v176);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v25 = *(_OWORD *)&v176[16];
          *(_OWORD *)v173[1] = *(_OWORD *)v176;
          *((_OWORD *)v24 + 1) = v25;
          *((void *)v24 + 4) = 0;
          *((void *)v24 + 5) = 0;
          *((void *)v24 + std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = 0;
          *((void *)v24 + 7) = 0;
          *((_OWORD *)v24 + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *(_OWORD *)&v176[32];
          *((void *)v24 + std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = *(void *)&v176[48];
          memset(&v176[32], 0, 24);
          *((void *)v24 + 8) = 0;
          *((void *)v24 + 9) = 0;
          *(_OWORD *)(v24 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(_OWORD *)__p;
          *((void *)v24 + 9) = v178[0];
          __p[0] = 0;
          __p[1] = 0;
          v178[0] = 0;
          uint64_t v26 = v178[1];
          *(void *)(v24 + 85) = *(void *)((char *)&v178[1] + 5);
          *((void *)v24 + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v26;
          v173[1] = v24 + 96;
        }
        if (*(void *)&v176[32])
        {
          *(void *)&v176[40] = *(void *)&v176[32];
          operator delete(*(void **)&v176[32]);
        }
        goto LABEL_28;
      default:
        goto LABEL_218;
    }
  }
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  char v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 42 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      uint64_t v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v6 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        uint64_t v85 = a1 + 3;
        unint64_t v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v25);
        unint64_t v82 = &v81[8 * v6];
        uint64_t v83 = v82;
        unint64_t v84 = &v81[8 * v26];
        uint64_t v80 = operator new(0xFC0uLL);
        std::__split_buffer<zip_entry_t *>::push_back(&v81, &v80);
        uint64_t v27 = a1[2];
        unint64_t v28 = v81;
        unint64_t v29 = v82;
        unint64_t v31 = v83;
        unint64_t v30 = v84;
        if (v27 == a1[1])
        {
          unint64_t v32 = v83;
        }
        else
        {
          do
          {
            if (v29 == v28)
            {
              if (v31 >= v30)
              {
                if (v30 == v28) {
                  unint64_t v35 = 1;
                }
                else {
                  unint64_t v35 = (v30 - v28) >> 2;
                }
                uint64_t v36 = 2 * v35;
                uint64_t v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v35);
                uint64_t v39 = v37;
                unint64_t v29 = &v37[(v36 + 6) & 0xFFFFFFFFFFFFFFF8];
                unint64_t v32 = v29;
                uint64_t v40 = v31 - v28;
                if (v31 != v28)
                {
                  unint64_t v32 = &v29[v40 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v41 = 8 * (v40 >> 3);
                  unsigned __int8 v42 = v29;
                  char v43 = v28;
                  do
                  {
                    uint64_t v44 = *(void *)v43;
                    v43 += 8;
                    *(void *)unsigned __int8 v42 = v44;
                    v42 += 8;
                    v41 -= 8;
                  }
                  while (v41);
                }
                unint64_t v30 = &v37[8 * v38];
                if (v28) {
                  operator delete(v28);
                }
                unint64_t v28 = v39;
              }
              else
              {
                uint64_t v33 = (v30 - v31) >> 3;
                if (v33 >= -1) {
                  unint64_t v34 = v33 + 1;
                }
                else {
                  unint64_t v34 = v33 + 2;
                }
                unint64_t v32 = &v31[8 * (v34 >> 1)];
                unint64_t v29 = &v28[8 * (v34 >> 1)];
                if (v31 == v28) {
                  unint64_t v28 = v31;
                }
                else {
                  memmove(&v28[8 * (v34 >> 1)], v28, v31 - v28);
                }
              }
            }
            else
            {
              unint64_t v32 = v31;
            }
            uint64_t v45 = *(void *)(v27 - 8);
            v27 -= 8;
            *((void *)v29 - 1) = v45;
            v29 -= 8;
            unint64_t v31 = v32;
          }
          while (v27 != a1[1]);
        }
        uint64_t v60 = (char *)*a1;
        *a1 = v28;
        a1[1] = v29;
        a1[2] = v32;
        a1[3] = v30;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_55;
      }
      if (v23 != v5)
      {
        unint64_t v81 = (char *)operator new(0xFC0uLL);
        std::__split_buffer<zip_entry_t *>::push_back(a1, &v81);
LABEL_55:
        uint64_t v4 = (char *)a1[1];
        unint64_t v9 = a1[5] + a1[4];
        goto LABEL_56;
      }
      unint64_t v81 = (char *)operator new(0xFC0uLL);
      std::__split_buffer<zip_entry_t *>::push_front((uint64_t)a1, &v81);
      unint64_t v57 = (void *)a1[1];
      char v5 = (char *)a1[2];
      uint64_t v59 = *v57;
      std::string::size_type v58 = (char *)(v57 + 1);
      uint64_t v11 = v59;
      a1[1] = v58;
      if (v5 == (char *)a1[3])
      {
        uint64_t v65 = (uint64_t)&v58[-*a1];
        if ((unint64_t)v58 > *a1)
        {
          uint64_t v66 = v65 >> 3;
          BOOL v15 = v65 >> 3 < -1;
          uint64_t v67 = (v65 >> 3) + 2;
          if (v15) {
            uint64_t v68 = v67;
          }
          else {
            uint64_t v68 = v66 + 1;
          }
          uint64_t v69 = -(v68 >> 1);
          uint64_t v70 = v68 >> 1;
          std::string::size_type v71 = &v58[-8 * v70];
          int64_t v72 = v5 - v58;
          if (v5 != v58)
          {
            memmove(&v58[-8 * v70], v58, v5 - v58);
            std::string::size_type v58 = (char *)a1[1];
          }
          char v5 = &v71[v72];
          long long v22 = &v58[8 * v69];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1) {
          unint64_t v73 = 1;
        }
        else {
          unint64_t v73 = (uint64_t)&v5[-*a1] >> 2;
        }
        char v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v73);
        int v48 = &v47[8 * (v73 >> 2)];
        std::vector<char>::pointer v50 = &v47[8 * v74];
        std::vector<std::string>::pointer v75 = (uint64_t *)a1[1];
        char v5 = v48;
        uint64_t v76 = a1[2] - (void)v75;
        if (v76)
        {
          char v5 = &v48[v76 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v77 = 8 * (v76 >> 3);
          char v78 = &v47[8 * (v73 >> 2)];
          do
          {
            uint64_t v79 = *v75++;
            *(void *)char v78 = v79;
            v78 += 8;
            v77 -= 8;
          }
          while (v77);
        }
LABEL_48:
        uint64_t v56 = (char *)*a1;
        *a1 = v47;
        a1[1] = v48;
        a1[2] = v5;
        a1[3] = v50;
        if (v56)
        {
          operator delete(v56);
          char v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 42;
      uint64_t v12 = *(void *)v4;
      uint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          int v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            char v5 = (char *)a1[1];
          }
          long long v22 = &v5[8 * v18];
          char v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_51;
        }
        if (v5 == (char *)*a1) {
          unint64_t v46 = 1;
        }
        else {
          unint64_t v46 = (uint64_t)&v5[-*a1] >> 2;
        }
        char v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v46);
        int v48 = &v47[8 * (v46 >> 2)];
        std::vector<char>::pointer v50 = &v47[8 * v49];
        unint64_t v51 = (uint64_t *)a1[1];
        char v5 = v48;
        uint64_t v52 = a1[2] - (void)v51;
        if (v52)
        {
          char v5 = &v48[v52 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v53 = 8 * (v52 >> 3);
          unint64_t v54 = &v47[8 * (v46 >> 2)];
          do
          {
            uint64_t v55 = *v51++;
            *(void *)unint64_t v54 = v55;
            v54 += 8;
            v53 -= 8;
          }
          while (v53);
        }
        goto LABEL_48;
      }
    }
LABEL_51:
    *(void *)char v5 = v11;
    a1[2] += 8;
    goto LABEL_55;
  }
LABEL_56:
  unint64_t v61 = *(void *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  long long v62 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v61 = *(_OWORD *)a2;
  *(_OWORD *)(v61 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v62;
  *(void *)(v61 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v61 + 48) = 0;
  *(void *)(v61 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
  *(_OWORD *)(v61 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *(_OWORD *)(a2 + 32);
  *(void *)(v61 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
  *(void *)(a2 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v61 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(v61 + 64) = 0;
  *(void *)(v61 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v61 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = result;
  *(void *)(v61 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *(void *)(a2 + 72);
  *(void *)(a2 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 7std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
  uint64_t v64 = *(void *)(a2 + 80);
  *(void *)(v61 + 85) = *(void *)(a2 + 85);
  *(void *)(v61 + 8ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = v64;
  ++a1[5];
  return result;
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:nn180100]((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  uint64_t v3 = a1[2];
  BOOL v4 = v3 == a1[1];
  uint64_t v5 = 42 * ((v3 - a1[1]) >> 3) - 1;
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  a1[5] = v6 - 1;
  if (v4) {
    uint64_t v5 = 0;
  }
  if ((unint64_t)(v5 - (v6 + v7) - 83) <= 0xFFFFFFFFFFFFFFABLL)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::sub_match<char *>::compare[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v19, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    uint64_t v19 = 0;
    size_t v20 = 0;
    uint64_t v21 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:nn180100]<char const*,char const*>(&v16, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v18);
    uint64_t v5 = v16;
    size_t v4 = v17;
  }
  else
  {
    size_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v3 = 0;
    uint64_t v16 = 0;
    size_t v17 = 0;
    uint64_t v18 = 0;
  }
  int v6 = SHIBYTE(v21);
  uint64_t v7 = v19;
  if (v21 >= 0) {
    size_t v8 = HIBYTE(v21);
  }
  else {
    size_t v8 = v20;
  }
  if (v21 >= 0) {
    unint64_t v9 = &v19;
  }
  else {
    unint64_t v9 = (void **)v19;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v10 = v3;
  }
  else {
    size_t v10 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    uint64_t v11 = (void **)&v16;
  }
  else {
    uint64_t v11 = v5;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  unsigned int v13 = memcmp(v9, v11, v12);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v7);
LABEL_24:
  unsigned int v14 = v10 < v8;
  if (v8 < v10) {
    unsigned int v14 = -1;
  }
  if (v13) {
    return v13;
  }
  else {
    return v14;
  }
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      int v10 = *(_DWORD *)(a1 + 28);
      signed int v11 = 2 * v10;
      uint64_t v12 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v11) {
          BOOL v13 = v8 == v11;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13 && (v10 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(void *)&v26[36] = 0x7FFFFFFFLL;
          re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::init((uint64_t)v26, v12, v11);
          long long v14 = *(_OWORD *)v26;
          *(_OWORD *)uint64_t v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v14;
          uint64_t v15 = *(void *)&v26[16];
          uint64_t v16 = *(void *)(a1 + 16);
          *(void *)&unsigned char v26[16] = v16;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v15;
          long long v18 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          unsigned int v17 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v18;
          uint64_t v19 = v17;
          if (v17)
          {
            uint64_t v20 = v16 + 16;
            do
            {
              if ((*(_DWORD *)(v20 - 8) & 0x80000000) != 0) {
                re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::NetworkSystem::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(a1, *(void *)(v20 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v20 - 16), v20, v20);
              }
              v20 += 24;
              --v19;
            }
            while (v19);
          }
          re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v11) {
          signed int v23 = v11;
        }
        else {
          signed int v23 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v9 + 1;
    uint64_t v21 = *(void *)(a1 + 16);
    int v22 = *(_DWORD *)(v21 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 16);
    int v22 = *(_DWORD *)(v21 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v22 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v21 + 24 * v8 + 8) = v22 | 0x80000000;
  uint64_t v24 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v24 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a5;
  *a5 = 0;
  *(_DWORD *)(v24 + 4 * astd::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)unint64_t v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&uint8_t v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v25 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(void *)(v25 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
  *(void *)(v25 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v25 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  uint64_t v26 = *(void *)(v25 + 40);
  *(void *)(v25 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = *(void *)(a5 + 16);
  *(void *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v26;
  uint64_t v27 = *(void *)(v25 + 56);
  *(void *)(v25 + re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * astd::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::SharedPtr<re::ecs2::Entity>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_113, 4 * v10);
    }
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addEmplace<unsigned long long &>(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = a2;
  uint64_t v14 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  uint64_t v15 = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  if (v15)
  {
    id v16 = (id)(v15 + 8);
    uint64_t v14 = *(void *)(a1 + 8);
  }
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v14 + 4 * vre::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,BOOL({block_pointer})(re::snapshot::Writer<re::snapshot::EncoderRaw> &,void const*),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)signed int v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::SharedPtr<re::ecs2::Entity>,unsigned long long,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            uint64_t v21 = *v13;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *v13;
            if (v21)
            {
              id v22 = (id)(v21 + 8);
              uint64_t v12 = *(void *)(a1 + 8);
            }
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            *(_DWORD *)(v12 + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  uint64_t v12 = a2;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8) = a3;
  uint64_t v14 = *a5;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a5;
  if (v14)
  {
    id v15 = (id)(v14 + 8);
    uint64_t v13 = *(void *)(a1 + 8);
  }
  *(_DWORD *)(v13 + 4 * v1std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::ecs2::TransformHelper::computeWorldMatrixForRendering(re::ecs2::TransformHelper *this@<X0>, re::ecs2::TransformComponent **a2@<X1>, _OWORD *a3@<X8>)
{
  if (!this) {
    goto LABEL_8;
  }
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  }
  if (re::ecs2::gIsBillboardEnabled)
  {
    long long v7 = *(void (**)(re::ecs2::TransformHelper *, re::ecs2::TransformComponent **))(*(void *)this + 56);
    v7(this, a2);
  }
  else
  {
LABEL_8:
    re::ecs2::TransformComponent::worldMatrix4x4F(a2, (const re::ecs2::Entity *)1, a3);
  }
}

void re::ecs2::TransformHelper::computeWorldMatrixForRendering(re::ecs2::TransformComponent **this@<X1>, uint64_t a2@<X0>, _OWORD *a3@<X8>)
{
  if (a2)
  {
    long long v5 = (re::ecs2::TransformHelper *)re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(a2);
    re::ecs2::TransformHelper::computeWorldMatrixForRendering(v5, this, a3);
  }
  else
  {
    re::ecs2::TransformComponent::worldMatrix4x4F(this, (const re::ecs2::Entity *)1, a3);
  }
}

re::ecs2::PhysicsConstraint *re::ecs2::PhysicsConstraint::PhysicsConstraint(re::ecs2::PhysicsConstraint *this)
{
  *(_DWORD *)this = 2;
  *((void *)this + 1) = 0;
  *((void *)this + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = "";
  *((unsigned char *)this + 24) = 0;
  unint64_t v2 = (re::ecs2::PhysicsConstraint *)((char *)this + 32);
  objc_initWeak((id *)this + 4, 0);
  *((void *)this + 5) = 0;
  *((void *)this + std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = 0;
  re::ecs2::EntityHandle::reset(v2);
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 1ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((void *)this + 11) = 0x3F80000000000000;
  *((void *)this + 1std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = 0;
  *((void *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = "";
  objc_initWeak((id *)this + 14, 0);
  *((void *)this + 15) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::PhysicsConstraint *)((char *)this + 112));
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 2ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 21) = 0x3F80000000000000;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 24) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25) = 0x3F80000000000000;
  *((_OWORD *)this + re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13) = 0u;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0x3F80000000000000;
  *((_OWORD *)this + 15) = xmmword_2343A9E50;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = xmmword_2343A9E60;
  *((_OWORD *)this + 17) = xmmword_2343A9E70;
  *((void *)this + 3std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100]((void *)this + 6) = 0;
  *((void *)this + 37) = "";
  v7[0] = 0;
  v7[1] = "";
  uint64_t v5 = *((void *)this + 2);
  v8[0] = *((void *)this + 1) & 1;
  v8[1] = v5;
  *((void *)this + 1) = 0;
  *((void *)this + std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 2) = "";
  re::StringID::destroyString((re::StringID *)v8);
  re::StringID::destroyString((re::StringID *)v7);
  return this;
}