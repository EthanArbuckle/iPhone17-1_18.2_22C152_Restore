void sub_1A6B623D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A6B631E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B632BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B633A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B638B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6B63D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6B63F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B643AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXCloudTabs()
{
  if (WBS_LOG_CHANNEL_PREFIXCloudTabs_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCloudTabs_onceToken, &__block_literal_global_28_1);
  }
  return WBS_LOG_CHANNEL_PREFIXCloudTabs_log;
}

void sub_1A6B647A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXSiriIntelligence()
{
  if (WBS_LOG_CHANNEL_PREFIXSiriIntelligence_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXSiriIntelligence_onceToken, &__block_literal_global_88_0);
  }
  return WBS_LOG_CHANNEL_PREFIXSiriIntelligence_log;
}

void sub_1A6B650C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  os_unfair_lock_unlock(v14);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

id *__Block_byref_object_dispose__2(uint64_t a1)
{
  return std::unique_ptr<SafariShared::SuddenTerminationDisabler>::reset[abi:sn180100]((id **)(a1 + 48), 0);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  v2 = *(void **)(a1 + 80);
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1AD0C4F80](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__11(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  unint64_t v3 = a2[4].n128_u64[1];
  a2[4].n128_u64[1] = 0;
  a1[4].n128_u64[1] = v3;
  unint64_t v4 = a2[5].n128_u64[0];
  a2[5].n128_u64[0] = 0;
  a1[5].n128_u64[0] = v4;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1AD0C4F80](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1AD0C4F80](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
}

double __Block_byref_object_copy__30(void *a1, void *a2)
{
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  double result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__38(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1AD0C4F80](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1A6B66920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B670C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6B67794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B67A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B67B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B67FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6B68190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,double &>(void *a1, void *a2, double *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindDouble:2 atParameterIndex:*a3];
}

void sub_1A6B68218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B68500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  v25 = v23;

  _Unwind_Resume(a1);
}

void sub_1A6B6860C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B68684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B68A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(a1);
}

id SafariShared::HistoryObjectStreamWriter::createPipeHandles(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (pipe(v9) == -1)
  {
    v7 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28798] code:*__error() userInfo:0];
  }
  else
  {
    id v4 = objc_alloc(MEMORY[0x1E4F28CB0]);
    *a1 = (id)[v4 initWithFileDescriptor:v9[0] closeOnDealloc:1];
    id v5 = objc_alloc(MEMORY[0x1E4F28CB0]);
    id v6 = (id)[v5 initWithFileDescriptor:v9[1] closeOnDealloc:1];
    v7 = 0;
    *a2 = v6;
  }
  return v7;
}

void sub_1A6B68D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B69BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v47 - 144);

  SafariShared::HistoryObjectStreamWriter::~HistoryObjectStreamWriter(&a30);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a45);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  id v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t SafariShared::LatestVisitInformationMap::size(SafariShared::LatestVisitInformationMap *this)
{
  return *((void *)this + 3);
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void SafariShared::HistoryObjectStreamWriter::~HistoryObjectStreamWriter(void **this)
{
}

{
  free(*this);
}

SafariShared::HistoryObjectStreamWriter *SafariShared::HistoryObjectStreamWriter::HistoryObjectStreamWriter(SafariShared::HistoryObjectStreamWriter *this, int a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = a2;
  fcntl(a2, 73, 1);
  return this;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = a2;
  fcntl(a2, 73, 1);
  return this;
}

void sub_1A6B6A094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6A1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1A6B6A54C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A6B6A728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6A938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,BOOL &,int const&>(void *a1, unsigned __int8 *a2, unsigned int *a3)
{
  id v5 = a1;
  [v5 bindInt:*a2 atParameterIndex:3];
  [v5 bindInt:*a3 atParameterIndex:4];
}

void sub_1A6B6A9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6AAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<int>(void *a1, void *a2, unsigned int *a3)
{
  id v5 = a1;
  id v6 = a2;
  unint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v5 query:v6];
  [v7 bindInt:*a3 atParameterIndex:1];
  uint8x8_t v8 = [v7 fetch];

  return v8;
}

void sub_1A6B6ABF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<>(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v3 query:v4];
  id v6 = [v5 fetch];

  return v6;
}

void sub_1A6B6AC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6ADA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6AEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6B07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,WBSUserDefinedContentBlockerType &,NSString * {__strong}&,BOOL &,int const&>(void *a1, void *a2, void *a3, unsigned __int8 *a4, unsigned int *a5)
{
  id v9 = a1;
  [v9 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,BOOL &,int const&>(v9, a3, a4, a5);
}

void sub_1A6B6B130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,BOOL &,int const&>(void *a1, void *a2, unsigned __int8 *a3, unsigned int *a4)
{
  id v7 = a1;
  [v7 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,BOOL &,int const&>(v7, a3, a4);
}

void sub_1A6B6B1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6B330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v13 = 0;
  id v7 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v5 query:v6 error:&v13];
  id v8 = v13;
  id v9 = v8;
  if (v7)
  {
    uint64_t v10 = [v7 execute];
    [v7 invalidate];
    if ((v10 - 100) >= 2 && v10 != 0) {
      objc_msgSend(v5, "reportErrorWithCode:statement:error:", v10, objc_msgSend(v7, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v8;
    }
    uint64_t v10 = [v9 code];
  }

  return v10;
}

void sub_1A6B6B55C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6B670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6B7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A6B6B8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6BA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6BCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6BF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6C044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6C0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6C1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6C414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6C6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6C9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6CDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6CF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v5 query:v6];
  [v7 bindString:*a3 atParameterIndex:1];
  id v8 = [v7 fetch];

  return v8;
}

void sub_1A6B6D008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * const {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v5 query:v6];
  [v7 bindString:*a3 atParameterIndex:1];
  id v8 = [v7 fetch];

  return v8;
}

void sub_1A6B6D0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WBSTabOrderManagerDefaultPreferenceValues()
{
  v3[2] = *MEMORY[0x1E4F143B8];
  v2[0] = @"WBSNewTabPositionPreferenceKey";
  v2[1] = @"WBSNewBlankTabPositionDelayPreferenceKey";
  v3[0] = &unk_1EFC22930;
  v3[1] = &unk_1EFC22948;
  v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:v2 count:2];
  return v0;
}

void __WBSCloudHistoryServiceInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EFC29488];
  v1 = (void *)WBSCloudHistoryServiceInterface_interface;
  WBSCloudHistoryServiceInterface_interface = v0;
}

void __WBSHistoryServiceDatabaseDelegateInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EFC40340];
  v1 = (void *)WBSHistoryServiceDatabaseDelegateInterface_interface;
  WBSHistoryServiceDatabaseDelegateInterface_interface = v0;
}

void sub_1A6B6D704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6DA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B6DBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6B6E634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void __WBSHistoryConnectionInterface_block_invoke()
{
  v45[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EFC3C5C8];
  v1 = (void *)WBSHistoryConnectionInterface_interface;
  WBSHistoryConnectionInterface_interface = v0;

  uint64_t v2 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EFC42CA0];
  id v3 = (void *)MEMORY[0x1E4F1CAD0];
  v45[0] = objc_opt_class();
  v45[1] = objc_opt_class();
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v45 count:2];
  id v5 = [v3 setWithArray:v4];
  v43 = v2;
  [v2 setClasses:v5 forSelector:sel_getBestMatchesForTypedString_filterResultsUsingProfileIdentifier_limit_forQueryID_withSearchParameters_completionHandler_ argumentIndex:0 ofReply:1];

  id v6 = (void *)MEMORY[0x1E4F1CAD0];
  v44[0] = objc_opt_class();
  v44[1] = objc_opt_class();
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v44 count:2];
  id v8 = [v6 setWithArray:v7];
  [v2 setClasses:v8 forSelector:sel_getBestMatchesForTypedString_filterResultsUsingProfileIdentifier_limit_forQueryID_withSearchParameters_completionHandler_ argumentIndex:1 ofReply:1];

  [(id)WBSHistoryConnectionInterface_interface setInterface:v2 forSelector:sel_beginURLCompletionSession_ argumentIndex:0 ofReply:1];
  id v9 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EFC3C308];
  uint64_t v10 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v11 = objc_opt_class();
  float v12 = objc_msgSend(v10, "setWithObjects:", v11, objc_opt_class(), 0);
  [v9 setClasses:v12 forSelector:sel_getHistoryItemsVisitedAfterDate_beforeDate_completionHandler_ argumentIndex:0 ofReply:1];

  id v13 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v14 = objc_opt_class();
  unint64_t v15 = objc_msgSend(v13, "setWithObjects:", v14, objc_opt_class(), 0);
  [v9 setClasses:v15 forSelector:sel_getHistoryVisitsAfterDate_beforeDate_completionHandler_ argumentIndex:0 ofReply:1];

  [(id)WBSHistoryConnectionInterface_interface setInterface:v9 forSelector:sel_beginHistoryAccessSession_ argumentIndex:0 ofReply:1];
  unint64_t v16 = (void *)WBSHistoryConnectionInterface_interface;
  size_t v17 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v18 = objc_opt_class();
  uint64_t v19 = objc_opt_class();
  uint64_t v20 = objc_opt_class();
  uint64_t v21 = objc_opt_class();
  uint64_t v22 = objc_opt_class();
  uint64_t v23 = objc_opt_class();
  v24 = objc_msgSend(v17, "setWithObjects:", v18, v19, v20, v21, v22, v23, objc_opt_class(), 0);
  [v16 setClasses:v24 forSelector:sel_connectWithOptions_delegate_completionHandler_ argumentIndex:0 ofReply:0];

  v25 = (void *)WBSHistoryConnectionInterface_interface;
  v26 = WBSHistoryServiceDatabaseDelegateInterface();
  [v25 setInterface:v26 forSelector:sel_connectWithOptions_delegate_completionHandler_ argumentIndex:1 ofReply:0];

  v27 = (void *)WBSHistoryConnectionInterface_interface;
  v28 = WBSHistoryServiceDatabaseInterface();
  [v27 setInterface:v28 forSelector:sel_connectWithOptions_delegate_completionHandler_ argumentIndex:0 ofReply:1];

  v29 = (void *)WBSHistoryConnectionInterface_interface;
  v30 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v31 = objc_opt_class();
  uint64_t v32 = objc_opt_class();
  uint64_t v33 = objc_opt_class();
  uint64_t v34 = objc_opt_class();
  v35 = objc_msgSend(v30, "setWithObjects:", v31, v32, v33, v34, objc_opt_class(), 0);
  [v29 setClasses:v35 forSelector:sel_connectWithOptions_delegate_completionHandler_ argumentIndex:3 ofReply:1];

  v36 = (void *)WBSHistoryConnectionInterface_interface;
  v37 = WBSCloudHistoryServiceInterface();
  [v36 setInterface:v37 forSelector:sel_initializeCloudHistoryWithConfiguration_completionHandler_ argumentIndex:0 ofReply:1];

  v38 = (void *)WBSHistoryConnectionInterface_interface;
  v39 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v40 = objc_opt_class();
  uint64_t v41 = objc_opt_class();
  v42 = objc_msgSend(v39, "setWithObjects:", v40, v41, objc_opt_class(), 0);
  [v38 setClasses:v42 forSelector:sel_listDatabaseURLsWithCompletionHandler_ argumentIndex:0 ofReply:1];
}

void __WBSHistoryServiceDatabaseInterface_block_invoke()
{
  v71[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EFC3F1F0];
  v1 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  WBSHistoryServiceDatabaseInterface_interface = v0;

  uint64_t v2 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  id v5 = objc_msgSend(v2, "setWithObjects:", v3, v4, objc_opt_class(), 0);
  v69 = [v5 setByAddingObject:objc_opt_class()];
  v68 = [v5 setByAddingObject:objc_opt_class()];
  id v6 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  v67 = objc_msgSend(v6, "setWithObjects:", v7, v8, v9, v10, objc_opt_class(), 0);
  [(id)WBSHistoryServiceDatabaseInterface_interface setClasses:v67 forSelector:sel_fetchWithOptions_predicate_completionHandler_ argumentIndex:1 ofReply:0];
  [(id)WBSHistoryServiceDatabaseInterface_interface setClasses:v69 forSelector:sel_fetchMetadataForKeys_completionHandler_ argumentIndex:0 ofReply:0];
  [(id)WBSHistoryServiceDatabaseInterface_interface setClasses:v68 forSelector:sel_fetchMetadataForKeys_completionHandler_ argumentIndex:0 ofReply:1];
  [(id)WBSHistoryServiceDatabaseInterface_interface setClasses:v5 forSelector:sel_setMetadataValue_forKey_completionHandler_ argumentIndex:0 ofReply:0];
  uint64_t v11 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  float v12 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = objc_msgSend(v12, "setWithObjects:", v13, objc_opt_class(), 0);
  [v11 setClasses:v14 forSelector:sel_fetchEventsForListener_completionHandler_ argumentIndex:0 ofReply:1];

  unint64_t v15 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  unint64_t v16 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v17 = objc_opt_class();
  uint64_t v18 = objc_msgSend(v16, "setWithObjects:", v17, objc_opt_class(), 0);
  [v15 setClasses:v18 forSelector:sel_dispatchEvent_listenersToIgnore_persistForDelayedDispatching_completionHandler_ argumentIndex:1 ofReply:0];

  uint64_t v19 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  uint64_t v20 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v21 = objc_opt_class();
  uint64_t v22 = objc_msgSend(v20, "setWithObjects:", v21, objc_opt_class(), 0);
  [v19 setClasses:v22 forSelector:sel_clearHistoryItems_afterDate_beforeDate_tombstoneMode_completionHandler_ argumentIndex:0 ofReply:0];

  uint64_t v23 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v24 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v25 = objc_opt_class();
  v26 = objc_msgSend(v24, "setWithObjects:", v25, objc_opt_class(), 0);
  [v23 setClasses:v26 forSelector:sel_replayAndAddTombstones_completionHandler_ argumentIndex:0 ofReply:0];

  v27 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v28 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v29 = objc_opt_class();
  v30 = objc_msgSend(v28, "setWithObjects:", v29, objc_opt_class(), 0);
  [v27 setClasses:v30 forSelector:sel_visitsAndTombstonesNeedingSyncWithVisitSyncWindow_completionHandler_ argumentIndex:0 ofReply:1];

  uint64_t v31 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  uint64_t v32 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v33 = objc_opt_class();
  uint64_t v34 = objc_msgSend(v32, "setWithObjects:", v33, objc_opt_class(), 0);
  [v31 setClasses:v34 forSelector:sel_visitsAndTombstonesNeedingSyncWithVisitSyncWindow_completionHandler_ argumentIndex:1 ofReply:1];

  v35 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v36 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v37 = objc_opt_class();
  v38 = objc_msgSend(v36, "setWithObjects:", v37, objc_opt_class(), 0);
  [v35 setClasses:v38 forSelector:sel_computeFrequentlyVisitedSites_minimalVisitCountScore_blockList_allowList_options_currentTime_completionHandler_ argumentIndex:2 ofReply:0];

  v39 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  uint64_t v40 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v41 = objc_opt_class();
  v42 = objc_msgSend(v40, "setWithObjects:", v41, objc_opt_class(), 0);
  [v39 setClasses:v42 forSelector:sel_computeFrequentlyVisitedSites_minimalVisitCountScore_blockList_allowList_options_currentTime_completionHandler_ argumentIndex:3 ofReply:0];

  v43 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v44 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v45 = objc_opt_class();
  v46 = objc_msgSend(v44, "setWithObjects:", v45, objc_opt_class(), 0);
  [v43 setClasses:v46 forSelector:sel_computeFrequentlyVisitedSites_minimalVisitCountScore_blockList_allowList_options_currentTime_completionHandler_ argumentIndex:0 ofReply:1];

  uint64_t v47 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v48 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v49 = objc_opt_class();
  v50 = objc_msgSend(v48, "setWithObjects:", v49, objc_opt_class(), 0);
  [v47 setClasses:v50 forSelector:sel_checkIfLocalVisitExistsForDatabaseIDs_withCompletion_ argumentIndex:0 ofReply:0];

  v51 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v52 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v53 = objc_opt_class();
  v54 = objc_msgSend(v52, "setWithObjects:", v53, objc_opt_class(), 0);
  [v51 setClasses:v54 forSelector:sel_getHighLevelHTTPFamilyDomainsVisitedAfterDate_beforeDate_onlyFromThisDevice_completionHandler_ argumentIndex:0 ofReply:1];

  v55 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v56 = (void *)MEMORY[0x1E4F1CAD0];
  v71[0] = objc_opt_class();
  v71[1] = objc_opt_class();
  v57 = [MEMORY[0x1E4F1C978] arrayWithObjects:v71 count:2];
  v58 = [v56 setWithArray:v57];
  [v55 setClasses:v58 forSelector:sel_getVisitedLinksWithCompletionHandler_ argumentIndex:0 ofReply:1];

  v59 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v60 = (void *)MEMORY[0x1E4F1CAD0];
  v70[0] = objc_opt_class();
  v70[1] = objc_opt_class();
  v61 = [MEMORY[0x1E4F1C978] arrayWithObjects:v70 count:2];
  v62 = [v60 setWithArray:v61];
  [v59 setClasses:v62 forSelector:sel_groupVisitsIntoSessionsBetweenStartDate_endDate_completionHandler_ argumentIndex:0 ofReply:1];

  v63 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v64 = [MEMORY[0x1E4F97EC0] xpcInterface];
  [v63 setInterface:v64 forSelector:sel_exportHistory_completionHandler_ argumentIndex:0 ofReply:0];

  v65 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  v66 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EFC3D460];
  [v65 setInterface:v66 forSelector:sel_startImportHistorySessionWithVisitTimePrecision_completionHandler_ argumentIndex:0 ofReply:1];
}

id WBSHistoryServiceDatabaseInterface()
{
  if (WBSHistoryServiceDatabaseInterface_once != -1) {
    dispatch_once(&WBSHistoryServiceDatabaseInterface_once, &__block_literal_global_67);
  }
  uint64_t v0 = (void *)WBSHistoryServiceDatabaseInterface_interface;
  return v0;
}

id WBSHistoryServiceDatabaseDelegateInterface()
{
  if (WBSHistoryServiceDatabaseDelegateInterface_once != -1) {
    dispatch_once(&WBSHistoryServiceDatabaseDelegateInterface_once, &__block_literal_global_66);
  }
  uint64_t v0 = (void *)WBSHistoryServiceDatabaseDelegateInterface_interface;
  return v0;
}

id WBSCloudHistoryServiceInterface()
{
  if (WBSCloudHistoryServiceInterface_once != -1) {
    dispatch_once(&WBSCloudHistoryServiceInterface_once, &__block_literal_global_17);
  }
  uint64_t v0 = (void *)WBSCloudHistoryServiceInterface_interface;
  return v0;
}

void sub_1A6B6FA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions()
{
  if (WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions_onceToken, &__block_literal_global_133);
  }
  return WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions_log;
}

void SafariShared::ReaderAvailabilityController::configureProcessPool(SafariShared::ReaderAvailabilityController *this, WKProcessPool *a2)
{
  uint64_t v4 = this;
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1CB18], "safari_browserDefaults");
  uint64_t v3 = objc_msgSend(v2, "safari_dateForKey:", @"ReaderOrTranslationLastActivated");

  if (v3) {
    [(SafariShared::ReaderAvailabilityController *)v4 _setObject:v3 forBundleParameter:@"ReaderOrTranslationLastActivated"];
  }
}

void sub_1A6B6FE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_0_1(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2114;
  *(void *)(a3 + 14) = a2;
  return result;
}

void OUTLINED_FUNCTION_0_3(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_0_7(uint64_t result, uint64_t a2, int a3, float a4)
{
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = result;
  *(_WORD *)(a2 + 12) = 1024;
  *(_DWORD *)(a2 + 14) = a3;
  return result;
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t OUTLINED_FUNCTION_0_8(uint64_t result, uint64_t a2, int a3)
{
  *(void *)(a2 + 4) = v3;
  *(_WORD *)(a2 + 12) = 2114;
  *(void *)(a2 + 14) = result;
  *(_WORD *)(a2 + 22) = 1024;
  *(_DWORD *)(a2 + 24) = a3;
  return result;
}

void OUTLINED_FUNCTION_17(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

uint64_t WBS_LOG_CHANNEL_PREFIXCloudBookmarks()
{
  if (WBS_LOG_CHANNEL_PREFIXCloudBookmarks_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCloudBookmarks_onceToken, &__block_literal_global_22_0);
  }
  return WBS_LOG_CHANNEL_PREFIXCloudBookmarks_log;
}

void sub_1A6B70DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXAppleAccount()
{
  if (WBS_LOG_CHANNEL_PREFIXAppleAccount_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAppleAccount_onceToken, &__block_literal_global_77);
  }
  return WBS_LOG_CHANNEL_PREFIXAppleAccount_log;
}

void sub_1A6B716DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B71984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B71B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B71EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B72084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B72238(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 72));

  _Unwind_Resume(a1);
}

void sub_1A6B7265C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXSafariSuggestions()
{
  if (WBS_LOG_CHANNEL_PREFIXSafariSuggestions_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXSafariSuggestions_onceToken, &__block_literal_global_79);
  }
  return WBS_LOG_CHANNEL_PREFIXSafariSuggestions_log;
}

uint64_t WBSParsecGlobalFeedbackIsEnabled()
{
  if (globalFeedbackDispatcherEnabledBlock) {
    return (*(uint64_t (**)(void))(globalFeedbackDispatcherEnabledBlock + 16))();
  }
  else {
    return 1;
  }
}

void sub_1A6B72DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v16);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6B72EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _urlForStorage(void)
{
  uint64_t v0 = (void *)_urlForStorage(void)::settingsFileURL;
  if (!_urlForStorage(void)::settingsFileURL)
  {
    v1 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v2 = objc_msgSend(v1, "safari_settingsDirectoryURL");
    uint64_t v3 = [v2 URLByAppendingPathComponent:@"BypassedInvalidCertificateWarning.plist" isDirectory:0];
    uint64_t v4 = (void *)_urlForStorage(void)::settingsFileURL;
    _urlForStorage(void)::settingsFileURL = v3;

    uint64_t v0 = (void *)_urlForStorage(void)::settingsFileURL;
  }
  return v0;
}

void sub_1A6B72F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B72FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B73124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B731B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B73270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B73300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B73458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7354C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B735D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7366C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B73700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B739E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B73B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B74458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6B74B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B74F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B75034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WBSHistoryInMemoryDatabaseURL()
{
  return [MEMORY[0x1E4F97F98] inMemoryDatabaseURL];
}

void sub_1A6B7518C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6B7541C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1A6B7556C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B75668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B756CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B75768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B75904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B75DFC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A6B761AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B76348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B76490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7668C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6B7672C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B768D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B76C8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6B776F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXHistory()
{
  if (WBS_LOG_CHANNEL_PREFIXHistory_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXHistory_onceToken, &__block_literal_global_40);
  }
  return WBS_LOG_CHANNEL_PREFIXHistory_log;
}

void sub_1A6B77924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B77B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B783EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,id location,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(v72);
  _Block_object_dispose(&a26, 8);

  _Block_object_dispose(&a32, 8);
  objc_destroyWeak(&location);

  _Block_object_dispose(&a66, 8);
  _Block_object_dispose(&STACK[0x240], 8);

  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);

  _Block_object_dispose(&STACK[0x2D0], 8);
  _Block_object_dispose((const void *)(v75 - 240), 8);

  _Unwind_Resume(a1);
}

uint64_t waitForGroupOrStopCondition(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  do
  {
    int v4 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    if (v4) {
      break;
    }
    dispatch_time_t v5 = dispatch_time(0, 55000000);
  }
  while (dispatch_group_wait(v3, v5));

  return v4 ^ 1u;
}

void sub_1A6B786C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B78A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(v30);

  _Unwind_Resume(a1);
}

void sub_1A6B78D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void SafariShared::ReadStreamedObjects(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a2;
  v24 = a3;
  uint64_t v10 = a4;
  uint64_t v11 = a5;
  float v12 = a6;
  uint64_t v13 = malloc_type_malloc(0xD8uLL, 0x502F8467uLL);
  if (v13)
  {
    unint64_t v14 = 216;
    do
    {
      if (WBSReadExactAmountOfBytesFromFileDescriptor() < 1) {
        break;
      }
      if (v14 < *(unsigned int *)&buf[4])
      {
        free(v13);
        uint64_t v13 = malloc_type_malloc(*(unsigned int *)&buf[4], 0x759749FFuLL);
        unint64_t v14 = *(unsigned int *)&buf[4];
      }
      *uint64_t v13 = *(void *)buf;
      if (WBSReadExactAmountOfBytesFromFileDescriptor() < 1) {
        break;
      }
      switch(*(_DWORD *)v13)
      {
        case 1:
          uint64_t v15 = v13[6];
          if (v15) {
            v13[6] = (char *)v13 + v15;
          }
          uint64_t v16 = v13[7];
          if (v16) {
            v13[7] = (char *)v13 + v16;
          }
          uint64_t v17 = v13 + 9;
          uint64_t v18 = v13[9];
          if (v18)
          {
            uint64_t v19 = v23;
            goto LABEL_21;
          }
          uint64_t v19 = v23;
          break;
        case 2:
          uint64_t v17 = v13 + 10;
          uint64_t v18 = v13[10];
          if (v18)
          {
            uint64_t v19 = v24;
            goto LABEL_21;
          }
          uint64_t v19 = v24;
          break;
        case 7:
          if (!v10) {
            continue;
          }
          uint64_t v20 = v13[4];
          if (v20) {
            v13[4] = (char *)v13 + v20;
          }
          uint64_t v17 = v13 + 5;
          uint64_t v18 = v13[5];
          if (v18)
          {
            uint64_t v19 = v10;
LABEL_21:
            void *v17 = (char *)v13 + v18;
          }
          else
          {
            uint64_t v19 = v10;
          }
          break;
        case 8:
          uint64_t v19 = v11;
          if (!v11) {
            continue;
          }
          break;
        default:
          continue;
      }
      v19[2](v19, v13);
    }
    while (!v12 || !v12[2](v12));
    free(v13);
  }
  else
  {
    uint64_t v21 = (id)WBS_LOG_CHANNEL_PREFIXHistory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = __error();
      SafariShared::ReadStreamedObjects(v22, buf, v21);
    }
  }
}

void sub_1A6B7908C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void SafariShared::ReadStreamedObjects(uint64_t a1, void *a2, void *a3, void *a4)
{
}

void sub_1A6B79538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B79BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B79D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7A058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WBSSQLiteComputeLatestVisitFinal(sqlite3_context *a1)
{
  sqlite3_int64 v2 = *((void *)sqlite3_user_data(a1) + 3);
  sqlite3_result_int64(a1, v2);
}

void __digitalHealthManagerGlobalQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.SafariShared.WBSDigitalHealthManager.globalQueue", 0);
  v1 = (void *)digitalHealthManagerGlobalQueue_queue;
  digitalHealthManagerGlobalQueue_queue = (uint64_t)v0;
}

id digitalHealthManagerGlobalQueue()
{
  if (digitalHealthManagerGlobalQueue_once != -1) {
    dispatch_once(&digitalHealthManagerGlobalQueue_once, &__block_literal_global_70);
  }
  dispatch_queue_t v0 = (void *)digitalHealthManagerGlobalQueue_queue;
  return v0;
}

void sub_1A6B7AA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7AC84(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Block_object_dispose((const void *)(v2 - 80), 8);
  _Unwind_Resume(a1);
}

id WBSHistoryConnectionInterface()
{
  if (WBSHistoryConnectionInterface_once != -1) {
    dispatch_once(&WBSHistoryConnectionInterface_once, &__block_literal_global_62);
  }
  dispatch_queue_t v0 = (void *)WBSHistoryConnectionInterface_interface;
  return v0;
}

void sub_1A6B7ADD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7B10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7C0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  _Block_object_dispose(&a28, 8);
  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a45);

  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXURLAutocomplete()
{
  if (WBS_LOG_CHANNEL_PREFIXURLAutocomplete_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXURLAutocomplete_onceToken, &__block_literal_global_100);
  }
  return WBS_LOG_CHANNEL_PREFIXURLAutocomplete_log;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_1A6B7C4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1A6B7C6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7C7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7C858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7CD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7D768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7D980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7DB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7DF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7E498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v36 - 160), 8);

  _Unwind_Resume(a1);
}

void sub_1A6B7E620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7EB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7ECE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7EED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7F128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7F23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1A6B7F368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7F4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7F66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x1A6B7F5E4);
  }
  _Unwind_Resume(exception_object);
}

void SafariShared::ReadStreamedDomainExpansions(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2;
  uint64_t v3 = malloc_type_malloc(0x58uLL, 0x893D304CuLL);
  if (v3)
  {
    unint64_t v4 = 88;
    while (WBSReadExactAmountOfBytesFromFileDescriptor() >= 1)
    {
      unint64_t v5 = v3[1];
      if (v4 < v5)
      {
        uint64_t v3 = malloc_type_realloc(v3, v3[1], 0xEEE87D7DuLL);
        unint64_t v4 = v5;
      }
      id v6 = v3 + 2;
      if (WBSReadExactAmountOfBytesFromFileDescriptor() < 1) {
        break;
      }
      if (*v3 == 3)
      {
        if (*v6) {
          *((void *)v3 + 1) = (char *)v3 + *v6;
        }
        v2[2](v2, v3);
      }
    }
    free(v3);
  }
  else
  {
    uint64_t v7 = (id)WBS_LOG_CHANNEL_PREFIXHistory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = __error();
      SafariShared::ReadStreamedObjects(v8, v9, v7);
    }
  }
}

void sub_1A6B7F854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7FA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1A6B7FC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B7FEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

SafariShared::BookmarkAndHistoryCompletionMatch *SafariShared::BookmarkAndHistoryCompletionMatch::BookmarkAndHistoryCompletionMatch(SafariShared::BookmarkAndHistoryCompletionMatch *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  *(_DWORD *)a1 = 1;
  *((void *)a1 + 1) = a4;
  *((void *)a1 + 2) = a5;
  *((void *)a1 + 3) = a6;
  *((void *)a1 + 4) = a3;
  *((void *)a1 + 5) = a2;
  *((void *)a1 + 9) = 0;
  SafariShared::BookmarkAndHistoryCompletionMatch::computeWeight(a1, a7);
  return a1;
}

void sub_1A6B7FFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float SafariShared::BookmarkAndHistoryCompletionMatch::computeWeight(SafariShared::BookmarkAndHistoryCompletionMatch *this, double a2)
{
  uint64_t v3 = *((void *)this + 1);
  if ((unint64_t)(v3 - 6) < 3 || v3 == 3)
  {
    unint64_t v5 = (void *)*((void *)this + 5);
  }
  else
  {
    if (v3 != 4)
    {
      [*((id *)this + 5) topSitesScoreForURLStringAtIndex:*((void *)this + 3) atTime:a2];
      *((_DWORD *)this + 16) = v12;
      uint64_t v10 = (void *)*((void *)this + 5);
      uint64_t v11 = *((void *)this + 3);
      goto LABEL_12;
    }
    uint64_t v8 = *((unsigned __int16 *)this + 12);
    unint64_t v5 = (void *)*((void *)this + 5);
    if (*((_WORD *)this + 12))
    {
      [v5 topSitesScoreForURLStringAtIndex:*((unsigned __int16 *)this + 12) atTime:a2];
      *((_DWORD *)this + 16) = v9;
      uint64_t v10 = (void *)*((void *)this + 5);
      uint64_t v11 = v8;
LABEL_12:
      uint64_t v7 = [v10 visitCountScoreForURLStringAtIndex:v11];
      goto LABEL_13;
    }
  }
  [v5 topSitesScoreForPageTitleAtTime:a2];
  *((_DWORD *)this + 16) = v6;
  uint64_t v7 = [*((id *)this + 5) visitCountScoreForPageTitleAtTime];
LABEL_13:
  *((void *)this + 7) = v7;
  float matched = SafariShared::weightForMatchLocation(*((void *)this + 1));
  *((float *)this + 17) = matched;
  float result = matched + *((float *)this + 16);
  *((float *)this + 12) = result;
  return result;
}

id SafariShared::BookmarkAndHistoryCompletionMatch::title(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  uint64_t v2 = *((void *)this + 1);
  if ((unint64_t)(v2 - 6) < 3 || v2 == 3)
  {
    unint64_t v4 = [*((id *)this + 5) pageTitleAtIndex:*((void *)this + 3)];
  }
  else
  {
    if (v2 == 4)
    {
      unint64_t v5 = [*((id *)this + 5) pageTitleAtIndex:*((void *)this + 3) >> 16];
      goto LABEL_11;
    }
    unint64_t v4 = [*((id *)this + 5) pageTitleForUserVisibleURLStringAtIndex:*((void *)this + 3)];
  }
  unint64_t v5 = v4;
  if (![v4 length])
  {
    int v6 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v7 = [*((id *)this + 5) originalURLString];
    uint64_t v8 = [v6 URLWithString:v7];
    int v9 = [v8 host];
    uint64_t v10 = objc_msgSend(v9, "safari_stringByRemovingWwwDotPrefix");

    unint64_t v5 = (void *)v10;
  }
LABEL_11:
  return v5;
}

void sub_1A6B80188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::titleIndexFromCurrentCombinedIndex(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  return *((void *)this + 3) >> 16;
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::originalURLString(id *this)
{
  return [this[5] originalURLString];
}

id SafariShared::BookmarkAndHistoryCompletionMatch::placeholderForEmptyTitle(id *this)
{
  if ([this[5] containsBookmark])
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = _WBSLocalizedString();
  }
  return v1;
}

id SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  uint64_t v1 = *((void *)this + 1);
  if ((unint64_t)(v1 - 6) < 3 || v1 == 3)
  {
    uint64_t v3 = [*((id *)this + 5) userVisibleURLStringForPageTitleAtIndex:*((void *)this + 3)];
  }
  else
  {
    if (v1 == 4)
    {
      unint64_t v4 = (void *)*((void *)this + 5);
      uint64_t v5 = *((unsigned __int16 *)this + 12);
    }
    else
    {
      unint64_t v4 = (void *)*((void *)this + 5);
      uint64_t v5 = *((void *)this + 3);
    }
    uint64_t v3 = [v4 userVisibleURLStringAtIndex:v5];
  }
  return v3;
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::urlIndexFromCurrentCombinedIndex(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  return *((unsigned __int16 *)this + 12);
}

id SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate(id *this)
{
  id v2 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  [this[5] lastVisitedTimeInterval];
  uint64_t v3 = objc_msgSend(v2, "initWithTimeIntervalSinceReferenceDate:");
  return v3;
}

id SafariShared::BookmarkAndHistoryCompletionMatch::data(id *this)
{
  return this[5];
}

id SafariShared::BookmarkAndHistoryCompletionMatch::uuidString(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  id v2 = (void *)*((void *)this + 9);
  if (!v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F29128] UUID];
    uint64_t v4 = [v3 UUIDString];
    uint64_t v5 = (void *)*((void *)this + 9);
    *((void *)this + 9) = v4;

    id v2 = (void *)*((void *)this + 9);
  }
  return v2;
}

void sub_1A6B80368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::compare(SafariShared::BookmarkAndHistoryCompletionMatch *this, SafariShared::BookmarkAndHistoryCompletionMatch *a2)
{
  BOOL v2 = *((void *)a2 + 1) < 5;
  if (*((void *)this + 1) > 4 != v2)
  {
    float v5 = *((float *)this + 12);
    float v6 = *((float *)a2 + 12);
    BOOL v7 = v5 <= v6;
    if (v5 == v6
      && ([*((id *)this + 5) lastVisitedTimeInterval],
          double v9 = v8,
          [*((id *)a2 + 5) lastVisitedTimeInterval],
          BOOL v7 = v9 <= v10,
          v9 == v10))
    {
      BOOL v2 = *((void *)this + 4) < *((void *)a2 + 4);
    }
    else
    {
      BOOL v2 = !v7;
    }
  }
  if (v2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation(void *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  *a4 = 0;
  if (!a1) {
    return 0;
  }
  uint64_t v29 = 0;
  double v8 = [a2 typedStringForURLMatching];
  uint64_t v9 = SafariShared::BookmarkAndHistoryCompletionMatch::computeURLMatchLocation(a1, (uint64_t)v8, &v29);

  *a4 = v9;
  if ((unint64_t)(v9 - 9) > 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = &v25;
    uint64_t v27 = 0x2020000000;
    uint64_t v28 = 0;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRmR29WBSURLCompletionMatchLocation_block_invoke;
    v24[3] = &unk_1E5C8C118;
    v24[4] = &v25;
    v24[5] = a1;
    double v10 = (void *)MEMORY[0x1AD0C4F80](v24);
    uint64_t matched = SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocationOfTitleUsingBlock(a2, v10);
    if (matched <= 5)
    {
      if (v9 < 5)
      {
        uint64_t v20 = 0;
        uint64_t v21 = &v20;
        uint64_t v22 = 0x2020000000;
        if (v9 <= matched) {
          uint64_t v12 = matched;
        }
        else {
          uint64_t v12 = v9;
        }
        uint64_t v23 = v12;
        uint64_t v13 = v26 + 3;
        if (v9 > matched) {
          uint64_t v13 = &v29;
        }
        *a3 = *v13;
        unint64_t v14 = [a2 components];
        if ((unint64_t)[v14 count] > 1)
        {
          v16[0] = MEMORY[0x1E4F143A8];
          v16[1] = 3221225472;
          v16[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRmR29WBSURLCompletionMatchLocation_block_invoke_2;
          v16[3] = &unk_1E5C8C140;
          id v17 = v14;
          uint64_t v18 = &v20;
          uint64_t v19 = a3;
          [a1 enumeratePageTitlesAndUserVisibleURLsUsingBlock:v16];
          uint64_t v9 = v21[3];
        }
        else
        {
          uint64_t v9 = v21[3];
        }

        _Block_object_dispose(&v20, 8);
      }
      else
      {
        *a3 = v29;
      }
    }
    else
    {
      *a3 = v26[3];
      uint64_t v9 = matched;
    }

    _Block_object_dispose(&v25, 8);
  }
  else
  {
    *a3 = v29;
  }
  return v9;
}

void sub_1A6B80654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeURLMatchLocation(void *a1, uint64_t a2, void *a3)
{
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  if (!a1) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch23computeURLMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRm_block_invoke;
  v7[3] = &unk_1E5C8C188;
  v7[5] = &v8;
  v7[6] = a2;
  v7[4] = &v12;
  [a1 enumerateUserVisibleURLsUsingBlock:v7];
  uint64_t v4 = v9[3];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v5 = 0;
  }
  else
  {
    *a3 = v4;
    uint64_t v5 = v13[3];
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1A6B807A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRmR29WBSURLCompletionMatchLocation_block_invoke(uint64_t a1, uint64_t a2)
{
  return SafariShared::BookmarkAndHistoryCompletionMatch::computeTitleMatchLocation(*(void **)(a1 + 40), a2, (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeTitleMatchLocation(void *a1, uint64_t a2, void *a3)
{
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  if (!a1) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch25computeTitleMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRm_block_invoke;
  v7[3] = &unk_1E5C8C188;
  v7[5] = &v8;
  v7[6] = a2;
  v7[4] = &v12;
  [a1 enumeratePageTitlesUsingBlock:v7];
  uint64_t v4 = v9[3];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v5 = 0;
  }
  else
  {
    *a3 = v4;
    uint64_t v5 = v13[3];
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1A6B808DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocationOfTitleUsingBlock(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = v3[2](v3, a1);
  if (v4 <= 2)
  {
    uint64_t v12 = [a1 normalizedString];
    if ((unint64_t)[v12 length] >= 2)
    {
      [a1 components];
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v14;
        while (2)
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v14 != v7) {
              objc_enumerationMutation(v5);
            }
            uint64_t v9 = [[WBSURLCompletionUserTypedString alloc] initWithString:*(void *)(*((void *)&v13 + 1) + 8 * i)];
            uint64_t v10 = v3[2](v3, v9);

            if (!v10)
            {
              uint64_t v4 = 0;
              goto LABEL_15;
            }
            if (v10 > v4) {
              uint64_t v4 = v10;
            }
          }
          uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
LABEL_15:
    }
  }

  return v4;
}

void sub_1A6B80A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRmR29WBSURLCompletionMatchLocation_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unsigned char *a6)
{
  uint64_t result = SafariShared::BookmarkAndHistoryCompletionMatch::typedStringComponentsMatchTitleAndURL(*(void **)(a1 + 32), a2, a4);
  if (result)
  {
    *a6 = 1;
    uint64_t v11 = *(void **)(a1 + 48);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 4;
    void *v11 = a5 + (a3 << 16);
  }
  return result;
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::typedStringComponentsMatchTitleAndURL(void *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = v5;
  uint64_t v8 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v8)
  {
    char v9 = 0;
    char v10 = 0;
    uint64_t v11 = *(void *)v24;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v24 != v11) {
          objc_enumerationMutation(obj);
        }
        long long v13 = [[WBSURLCompletionUserTypedString alloc] initWithString:*(void *)(*((void *)&v23 + 1) + 8 * i)];
        uint64_t matched = SafariShared::computeTitleMatchLocation(v6, (NSString *)&v13->super.isa, v14);
        uint64_t v17 = SafariShared::computeURLMatchLocation(v7, (NSString *)&v13->super.isa, v16);
        if (matched) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v17 <= 1;
        }
        if (v18)
        {

          goto LABEL_14;
        }
        BOOL v19 = v17 > 1;

        v10 |= matched > 0;
        v9 |= v19;
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      if (v8) {
        continue;
      }
      break;
    }
    char v20 = v10 & v9;
  }
  else
  {
LABEL_14:
    char v20 = 0;
  }

  return v20 & 1;
}

void sub_1A6B80CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::indexCombiningTitleAndURLIndex(SafariShared::BookmarkAndHistoryCompletionMatch *this, uint64_t a2)
{
  return a2 + ((void)this << 16);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation(__CFString *a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = [a3 typedStringForURLMatching];
  uint64_t v10 = SafariShared::computeURLMatchLocation(a1, v8, v9);

  *a4 = v10;
  if (a2 && (unint64_t)(v10 - 11) < 0xFFFFFFFFFFFFFFFELL)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEP8NSStringS2_P31WBSURLCompletionUserTypedStringR29WBSURLCompletionMatchLocation_block_invoke;
    v16[3] = &__block_descriptor_40_e41_q16__0__WBSURLCompletionUserTypedString_8lu32l8;
    void v16[4] = a2;
    uint64_t v11 = (void *)MEMORY[0x1AD0C4F80](v16);
    uint64_t matched = SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocationOfTitleUsingBlock(a3, v11);
    uint64_t v13 = matched;
    if (matched <= 5)
    {
      uint64_t v13 = v10;
      if (v10 <= 4)
      {
        if (v10 <= matched) {
          uint64_t v13 = matched;
        }
        else {
          uint64_t v13 = v10;
        }
        long long v14 = [a3 components];
        if ((unint64_t)[v14 count] >= 2
          && SafariShared::BookmarkAndHistoryCompletionMatch::typedStringComponentsMatchTitleAndURL(v14, a2, a1))
        {
          uint64_t v13 = 4;
        }
      }
    }

    return v13;
  }
  return v10;
}

void sub_1A6B80E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEP8NSStringS2_P31WBSURLCompletionUserTypedStringR29WBSURLCompletionMatchLocation_block_invoke(uint64_t a1, NSString *a2, WBSURLCompletionUserTypedString *a3)
{
  return SafariShared::computeTitleMatchLocation(*(CFStringRef *)(a1 + 32), a2, a3);
}

BOOL SafariShared::BookmarkAndHistoryCompletionMatch::hasMatchWithOptions(__CFString *this, NSString *a2, NSString *a3, WBSURLCompletionUserTypedString *a4)
{
  unsigned int v4 = a4;
  uint64_t matched = SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation(this, a2, a3, &v7);
  if (v4) {
    return matched > 3;
  }
  else {
    return (matched != 0) & (v4 >> 1);
  }
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch25computeTitleMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRm_block_invoke(uint64_t a1, CFStringRef theString, WBSURLCompletionUserTypedString *a3)
{
  uint64_t result = SafariShared::computeTitleMatchLocation(theString, *(NSString **)(a1 + 48), a3);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (result > *(void *)(v6 + 24))
  {
    *(void *)(v6 + 24) = result;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
  }
  return result;
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch23computeURLMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRm_block_invoke(uint64_t a1, CFStringRef theString, WBSURLCompletionUserTypedString *a3)
{
  uint64_t result = SafariShared::computeURLMatchLocation(theString, *(NSString **)(a1 + 48), a3);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (result > *(void *)(v6 + 24))
  {
    *(void *)(v6 + 24) = result;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
  }
  return result;
}

id _CHCSVParserParse(void *a1, unint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  uint64_t v8 = [[CHCSVParser alloc] initWithInputStream:v7 usedEncoding:0 delimiter:a3];

  char v9 = off_1E5C8BD28;
  if ((a2 & 0x10) != 0) {
    char v9 = off_1E5C8BD30;
  }
  id v10 = objc_alloc_init(*v9);
  [(CHCSVParser *)v8 setDelegate:v10];
  [(CHCSVParser *)v8 setRecognizesBackslashesAsEscapes:a2 & 1];
  [(CHCSVParser *)v8 setSanitizesFields:(a2 >> 1) & 1];
  [(CHCSVParser *)v8 setRecognizesComments:(a2 >> 2) & 1];
  [(CHCSVParser *)v8 setTrimsWhitespace:(a2 >> 3) & 1];
  [(CHCSVParser *)v8 setRecognizesLeadingEqualSign:(a2 >> 5) & 1];
  [(CHCSVParser *)v8 parse];
  uint64_t v11 = [v10 error];

  if (v11)
  {
    if (a4)
    {
      [v10 error];
      uint64_t v12 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = [v10 lines];
  }

  return v12;
}

uint64_t SafariShared::FieldLabelPatternMatcher::FieldLabelPatternMatcher(uint64_t a1, uint64_t a2, const UChar *a3, unint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a1 + 24;
  id v7 = (UChar **)(a1 + 8);
  *(void *)(a1 + 16) = 256;
  WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a1 + 8, a4);
  UErrorCode pErrorCode = U_ZERO_ERROR;
  int32_t v8 = u_strToLower(*v7, *(_DWORD *)(a1 + 20), a3, a4, "", &pErrorCode);
  int32_t v9 = v8;
  if (pErrorCode > U_ZERO_ERROR || v8 != a4)
  {
    if (*(unsigned int *)(a1 + 20) < (unint64_t)v8)
    {
      unint64_t v11 = *(unsigned int *)(a1 + 16);
      if (v11 < v8)
      {
        unint64_t v12 = v11 + (v11 >> 2);
        if (v12 >= 0x10) {
          unint64_t v13 = v12 + 1;
        }
        else {
          unint64_t v13 = 16;
        }
        if (v13 <= v8) {
          unint64_t v14 = v8;
        }
        else {
          unint64_t v14 = v13;
        }
        WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v7, v14);
      }
    }
    *(_DWORD *)(a1 + 20) = v9;
    u_strToLower(*(UChar **)(a1 + 8), v9, a3, a4, "", &pErrorCode);
  }
  return a1;
}

uint64_t SafariShared::FieldLabelPatternMatcher::longestMatch(SafariShared::FieldLabelPatternMatcher *this)
{
  BOOL v2 = (unsigned __int16 *)*((void *)this + 1);
  uint64_t v3 = *((unsigned int *)this + 5);
  unsigned int v4 = &v2[v3];
  if (v3)
  {
    uint64_t v5 = 2 * v3;
    while (1)
    {
      uint64_t v6 = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, v2, v4);
      if (v7 != v6) {
        break;
      }
      ++v2;
      v5 -= 2;
      if (!v5) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v6 = 0;
    id v7 = 0;
  }
  if (v7 == v6) {
    return -1;
  }
  int32_t v8 = 0;
  int32_t v9 = 0;
  do
  {
    if ((char *)v7 - (char *)v6 > (unint64_t)((char *)v8 - (char *)v9))
    {
      int32_t v9 = v6;
      int32_t v8 = v7;
    }
    for (uint64_t i = v6 + 1; i != v4; ++i)
    {
      uint64_t v6 = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, i, v4);
      if (v7 != v6) {
        goto LABEL_15;
      }
    }
    uint64_t v6 = 0;
    id v7 = 0;
LABEL_15:
    ;
  }
  while (v7 != v6);
  if (v8 == v9) {
    return -1;
  }
  else {
    return ((uint64_t)v9 - *((void *)this + 1)) >> 1;
  }
}

unsigned __int16 *SafariShared::FieldLabelPatternMatcher::search(SafariShared::FieldLabelPatternMatcher *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 == a3) {
    return 0;
  }
  unsigned int v4 = a2;
  while (1)
  {
    uint64_t result = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, v4, a3);
    if (v7 != result) {
      break;
    }
    if (++v4 == a3) {
      return 0;
    }
  }
  return result;
}

uint64_t SafariShared::FieldLabelPatternMatcher::toRange(uint64_t a1, void *a2)
{
  if (a2[1] == *a2) {
    return -1;
  }
  else {
    return (uint64_t)(*a2 - *(void *)(a1 + 8)) >> 1;
  }
}

uint64_t SafariShared::FieldLabelPatternMatcher::searchReverse(SafariShared::FieldLabelPatternMatcher *this)
{
  BOOL v2 = (unsigned __int16 *)*((void *)this + 1);
  uint64_t v3 = *((unsigned int *)this + 5);
  unsigned int v4 = &v2[v3];
  if (v3)
  {
    uint64_t v5 = 2 * v3;
    while (1)
    {
      uint64_t v6 = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, v2, v4);
      if (v7 != v6) {
        break;
      }
      ++v2;
      v5 -= 2;
      if (!v5) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v6 = 0;
    id v7 = 0;
  }
  if (v7 == v6) {
    return -1;
  }
  int32_t v8 = 0;
  int32_t v9 = 0;
  do
  {
    if (v8 == v9 || v8 < v7)
    {
      int32_t v9 = v6;
      int32_t v8 = v7;
    }
    for (uint64_t i = v6 + 1; i != v4; ++i)
    {
      uint64_t v6 = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, i, v4);
      if (v7 != v6) {
        goto LABEL_21;
      }
    }
    uint64_t v6 = 0;
    id v7 = 0;
LABEL_21:
    ;
  }
  while (v7 != v6);
  if (v8 == v9) {
    return -1;
  }
  else {
    return ((uint64_t)v9 - *((void *)this + 1)) >> 1;
  }
}

BOOL SafariShared::FieldLabelPatternMatcher::isWordCharacter(SafariShared::FieldLabelPatternMatcher *this)
{
  return (this - 48) < 0xA || (this & 0xFFFFFFDF) - 65 < 0x1A || this == 95;
}

unsigned __int16 *SafariShared::FieldLabelPatternMatcher::checkForMatch(SafariShared::FieldLabelPatternMatcher *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v6 = 0;
  NextStateAndAdvance = (unsigned __int16 *)(*(void *)(*(void *)this + 8) + 4 * **(unsigned __int16 **)this);
  id v10 = a2;
  do
  {
    if (v10 > a3) {
      break;
    }
    if (SafariShared::FieldLabelPatternMatcher::isEndState(this, NextStateAndAdvance, v10)) {
      uint64_t v6 = a2;
    }
    NextStateAndAdvance = (unsigned __int16 *)SafariShared::FieldLabelPatternMatcher::findNextStateAndAdvance(this, NextStateAndAdvance, (const unsigned __int16 **)&v10);
  }
  while (NextStateAndAdvance);
  return v6;
}

uint64_t SafariShared::FieldLabelPatternMatcher::isWordBoundary(SafariShared::FieldLabelPatternMatcher *this, const unsigned __int16 *a2)
{
  uint64_t v2 = *((unsigned int *)this + 5);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (const unsigned __int16 *)*((void *)this + 1);
  if (v3 == a2)
  {
    int v13 = *a2;
    return (v13 - 48) < 0xA || (v13 & 0xFFFFFFDF) - 65 < 0x1A || v13 == 95;
  }
  else
  {
    unsigned int v4 = &v3[v2];
    int v5 = *(a2 - 1);
    uint64_t result = (v5 - 48) < 0xA || (v5 & 0xFFFFFFDF) - 65 < 0x1A || v5 == 95;
    if (v4 != a2)
    {
      int v9 = *a2;
      BOOL v12 = (v9 - 48) < 0xA || (v9 & 0xFFFFFFDF) - 65 < 0x1A || v9 == 95;
      return result ^ v12;
    }
  }
  return result;
}

BOOL SafariShared::FieldLabelPatternMatcher::isEndState(SafariShared::FieldLabelPatternMatcher *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  BOOL result = 1;
  if (*(_WORD *)(v4 + 4 * v3) || *(__int16 *)(v4 + 4 * v3 + 2) != -1)
  {
    uint64_t v5 = v3 + *a2 - 1;
    if (*(__int16 *)(v4 + 4 * v5) != -1
      || *(__int16 *)(v4 + 4 * v5 + 2) != -1
      || (SafariShared::FieldLabelPatternMatcher::isWordBoundary(a1, a3) & 1) == 0)
    {
      return 0;
    }
  }
  return result;
}

uint64_t SafariShared::FieldLabelPatternMatcher::findNextStateAndAdvance(SafariShared::FieldLabelPatternMatcher *a1, unsigned __int16 *a2, const unsigned __int16 **a3)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 24);
  uint64_t v6 = *a2;
  uint64_t v7 = v6 + v3;
  int32_t v8 = *a3;
  if (*a3 == (const unsigned __int16 *)(*((void *)a1 + 1) + 2 * *((unsigned int *)a1 + 5)) || v6 == 0) {
    goto LABEL_21;
  }
  id v10 = (unsigned __int16 *)(v5 + 4 * v7);
  unint64_t v11 = (unsigned __int16 *)(v5 + 4 * v3);
  unint64_t v12 = ((char *)v10 - (char *)v11) >> 2;
  unsigned int v13 = *v8;
  do
  {
    unint64_t v14 = v12 >> 1;
    long long v15 = &v11[2 * (v12 >> 1)];
    unsigned int v17 = *v15;
    long long v16 = v15 + 2;
    v12 += ~(v12 >> 1);
    if (v17 < v13) {
      unint64_t v11 = v16;
    }
    else {
      unint64_t v12 = v14;
    }
  }
  while (v12);
  if (v11 == v10 || v13 != *v11)
  {
LABEL_21:
    if (!v6) {
      return 0;
    }
    uint64_t v19 = v7 - 1;
    if (*(__int16 *)(v5 + 4 * v19) != -1) {
      return 0;
    }
    unsigned int v18 = *(unsigned __int16 *)(v5 + 4 * v19 + 2);
    if (v18 == 0xFFFF || !SafariShared::FieldLabelPatternMatcher::isWordBoundary(a1, v8)) {
      return 0;
    }
  }
  else
  {
    *a3 = v8 + 1;
    uint64_t v4 = *(void *)a1;
    unsigned int v18 = v11[1];
  }
  return *(void *)(v4 + 8) + 4 * v18;
}

uint64_t WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 < a2)
  {
    unint64_t v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = 16;
    }
    if (v6 > a2) {
      a2 = v6;
    }
    WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  *(_DWORD *)(a1 + 12) = v2;
  return 1;
}

uint64_t WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = *(void **)result;
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (a2 < 0x101)
  {
    unint64_t v6 = (void *)(result + 16);
    *(void *)uint64_t v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 256;
LABEL_6:
    memcpy(v6, v4, 2 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 31))
  {
    unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(2 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

JSValueRef SafariShared::JSWrapper::wrap(JSContextRef ctx, void *a2)
{
  if (a2)
  {
    if (!SafariShared::retainedContextForIteratingThroughWrappers)
    {
      JSRemoteInspectorGetInspectionFollowsInternalPolicies();
      JSRemoteInspectorSetInspectionFollowsInternalPolicies();
      JSRemoteInspectorGetInspectionEnabledByDefault();
      JSRemoteInspectorSetInspectionEnabledByDefault();
      Group = JSContextGetGroup(ctx);
      uint64_t v5 = JSGlobalContextCreateInGroup(Group, 0);
      SafariShared::retainedContextForIteratingThroughWrappers = (uint64_t)JSGlobalContextRetain(v5);
      JSRemoteInspectorSetInspectionEnabledByDefault();
      JSRemoteInspectorSetInspectionFollowsInternalPolicies();
    }
    GlobalContext = JSContextGetGlobalContext(ctx);
    SafariShared::JSWrapper::knownWrappers(GlobalContext, v7);
    int32_t v8 = (const OpaqueJSValue *)JSWeakObjectMapGet();
    if (!v8 || (v9 = v8, id v10 = JSValueToObject(ctx, v8, 0), !JSObjectGetPrivate(v10)))
    {
      unint64_t v11 = (OpaqueJSClass *)(*(uint64_t (**)(void *))(*(void *)a2 + 16))(a2);
      JSObjectRef v9 = JSObjectMake(ctx, v11, a2);
      JSWeakObjectMapSet();
    }
    return v9;
  }
  else
  {
    return JSValueMakeNull(ctx);
  }
}

uint64_t SafariShared::JSWrapper::knownWrappers(SafariShared::JSWrapper *this, OpaqueJSContext *a2)
{
  unint64_t v6 = this;
  {
    SafariShared::JSWrapper::wrappers(void)::wrappers = 0;
  }
  uint64_t v3 = 0;
  WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::add<OpaqueJSWeakObjectMap *>(&SafariShared::JSWrapper::wrappers(void)::wrappers, (uint64_t *)&v6, &v3, (uint64_t)&v4);
  if (!v5) {
    return *(void *)(v4 + 8);
  }
  uint64_t result = JSWeakObjectMapCreate();
  *(void *)(v4 + 8) = result;
  return result;
}

void *SafariShared::JSWrapper::unwrap(SafariShared::JSWrapper *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  if (!this || !a2) {
    return 0;
  }
  uint64_t v3 = JSValueToObject(this, a2, 0);
  return JSObjectGetPrivate(v3);
}

void *SafariShared::JSWrapper::initialize(SafariShared::JSWrapper *this, JSObjectRef object, OpaqueJSValue *a3)
{
  uint64_t result = JSObjectGetPrivate(object);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 24);
    return (void *)v4();
  }
  return result;
}

void *SafariShared::JSWrapper::disconnectWrapper(SafariShared::JSWrapper *this, OpaqueJSValue *a2)
{
  uint64_t result = JSObjectGetPrivate(this);
  if (result)
  {
    (*(void (**)(void *))(*(void *)result + 32))(result);
    return (void *)JSObjectSetPrivate(this, 0);
  }
  return result;
}

OpaqueJSValue *SafariShared::JSWrapper::disconnectAllWrappers(OpaqueJSValue *a1)
{
  {
    SafariShared::JSWrapper::wrappers(void)::wrappers = 0;
  }
  uint64_t result = (OpaqueJSValue *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::begin((void **)&SafariShared::JSWrapper::wrappers(void)::wrappers);
  uint64_t v3 = result;
  char v5 = v4;
  if (SafariShared::JSWrapper::wrappers(void)::wrappers) {
    uint64_t v6 = SafariShared::JSWrapper::wrappers(void)::wrappers
  }
       + 16 * *(unsigned int *)(SafariShared::JSWrapper::wrappers(void)::wrappers - 4);
  else {
    uint64_t v6 = 0;
  }
  if ((OpaqueJSValue *)v6 != result)
  {
    do
    {
      uint64_t result = (OpaqueJSValue *)JSWeakObjectMapGet();
      if (result)
      {
        uint64_t v7 = result;
        uint64_t result = (OpaqueJSValue *)JSObjectGetPrivate(result);
        if (result == a1)
        {
          JSWeakObjectMapRemove();
          uint64_t result = (OpaqueJSValue *)SafariShared::JSWrapper::disconnectWrapper(v7, v8);
        }
      }
      while (1)
      {
        uint64_t v3 = (OpaqueJSValue *)((char *)v3 + 16);
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v3 + 1) > 1) {
          goto LABEL_14;
        }
      }
      uint64_t v3 = v5;
LABEL_14:
      ;
    }
    while (v3 != (OpaqueJSValue *)v6);
  }
  return result;
}

uint64_t *SafariShared::JSWrapper::wrappers(SafariShared::JSWrapper *this)
{
  {
    SafariShared::JSWrapper::wrappers(void)::wrappers = 0;
  }
  return &SafariShared::JSWrapper::wrappers(void)::wrappers;
}

uint64_t *WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::add<OpaqueJSWeakObjectMap *>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = (uint64_t *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = ~(*a2 << 32) + *a2;
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  long long v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    unsigned int v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v22;
        goto LABEL_31;
      }
      if (v17 == -1) {
        unsigned int v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      long long v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      long long v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  v16[1] = *a3;
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25) {
      goto LABEL_25;
    }
  }
  else if (3 * v26 > 4 * v25)
  {
    goto LABEL_25;
  }
  uint64_t result = (uint64_t *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(v6, v16);
  long long v16 = result;
  uint64_t v23 = *v6;
  if (!*v6)
  {
    uint64_t v27 = 0;
    goto LABEL_30;
  }
LABEL_25:
  uint64_t v27 = *(unsigned int *)(v23 - 4);
LABEL_30:
  uint64_t v29 = v23 + 16 * v27;
  char v28 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

uint64_t *SafariShared::JSWrapper::cacheMapDestroyed(uint64_t a1, uint64_t a2)
{
  {
    SafariShared::JSWrapper::wrappers(void)::wrappers = 0;
  }
  uint64_t v4 = a2;
  uint64_t result = (uint64_t *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<OpaqueJSContext *>>,OpaqueJSContext *>(&SafariShared::JSWrapper::wrappers(void)::wrappers, &v4);
  if (SafariShared::JSWrapper::wrappers(void)::wrappers)
  {
    uint64_t v3 = SafariShared::JSWrapper::wrappers(void)::wrappers
       + 16 * *(unsigned int *)(SafariShared::JSWrapper::wrappers(void)::wrappers - 4);
    if ((uint64_t *)v3 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 0;
  }
  if ((uint64_t *)v3 != result) {
    return WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::remove(&SafariShared::JSWrapper::wrappers(void)::wrappers, result);
  }
  return result;
}

_OWORD *WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    unint64_t v12 = (void *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        unint64_t v13 = (_OWORD *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::lookupForReinsert(a1, v12);
        *unint64_t v13 = *(_OWORD *)v12;
        if (v12 == a3) {
          uint64_t v11 = v13;
        }
      }
      v12 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 16 * v9;
}

uint64_t *WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<OpaqueJSContext *>>,OpaqueJSContext *>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 == *a2) {
    return v2 + 16 * v7;
  }
  int v9 = 1;
  while (v8)
  {
    uint64_t v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    ++v9;
    if (v8 == *a2) {
      return v2 + 16 * v7;
    }
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

void *WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  unsigned int v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t SafariShared::caseInsensitiveFindInUserTypedString(const __CFString *this, const __CFString *a2, uint64_t a3, WBSURLCompletionUserTypedString *a4)
{
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  size_t v8 = *(int *)(a3 + 32);
  CStringPtr = CFStringGetCStringPtr(this, SafariShared::systemEightBitStringEncoding);
  if (CStringPtr)
  {
    unsigned int v10 = a2 - a4 - v8;
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v11 = (char *)a4 + (void)CStringPtr;
      unint64_t v12 = *(const char **)(a3 + 24);
      uint64_t v13 = MEMORY[0x1E4F30990];
      if (v8)
      {
        int v14 = 0;
        int v15 = 0;
        long long v16 = (unsigned __int8 *)a4 + (void)CStringPtr;
        uint64_t v17 = v12;
        size_t v18 = v8;
        do
        {
          unsigned int v19 = *v16++;
          v15 += *(char *)(MEMORY[0x1E4F30990] + v19);
          unsigned int v20 = *(unsigned __int8 *)v17++;
          v14 += *(char *)(MEMORY[0x1E4F30990] + v20);
          --v18;
        }
        while (v18);
      }
      else
      {
        int v15 = 0;
        int v14 = 0;
      }
      uint64_t v33 = 0;
      uint64_t v34 = v10;
      v35 = (char *)a4 + (void)CStringPtr;
      int v42 = (int)a4;
      uint64_t v36 = (char *)a4 + v8 + (void)CStringPtr;
      while (v15 != v14 || strncasecmp(&v35[v33], v12, v8))
      {
        if (v34 == v33) {
          return 0xFFFFFFFFLL;
        }
        int v15 = v15 + *(char *)(v13 + v36[v33]) - *(char *)(v13 + v11[v33]);
        ++v33;
      }
      if ((int)v33 >= 0) {
        return (v42 + v33);
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    return 0xFFFFFFFFLL;
  }
  CharactersPtr = CFStringGetCharactersPtr(this);
  if (!CharactersPtr)
  {
    v44.location = 0;
    v44.length = (CFIndex)a2;
    if (CFStringFindWithOptions(this, *(CFStringRef *)(a3 + 8), v44, 1uLL, &result)) {
      return LODWORD(result.location);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  unsigned int v23 = a2 - a4 - v8;
  if ((v23 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  int v24 = &CharactersPtr[(void)a4];
  uint64_t v25 = *(const UChar **)(a3 + 16);
  if (v8)
  {
    int v26 = 0;
    int v27 = 0;
    char v28 = &CharactersPtr[(void)a4];
    uint64_t v29 = v25;
    size_t v30 = v8;
    do
    {
      unsigned int v31 = *v28++;
      v27 += (unsigned __int16)MEMORY[0x1AD0C5570](v31, 0);
      unsigned int v32 = *v29++;
      v26 += (unsigned __int16)MEMORY[0x1AD0C5570](v32, 0);
      --v30;
    }
    while (v30);
  }
  else
  {
    int v27 = 0;
    int v26 = 0;
  }
  uint64_t v37 = 0;
  uint64_t v38 = -(uint64_t)v23;
  int v39 = (int)a4;
  while (v27 != v26 || u_memcasecmp(v24, v25, v8, 0))
  {
    if (v38 == v37) {
      return 0xFFFFFFFFLL;
    }
    int v40 = v27 + (unsigned __int16)MEMORY[0x1AD0C5570](v24[v8], 0);
    unsigned int v41 = *v24++;
    int v27 = v40 - (unsigned __int16)MEMORY[0x1AD0C5570](v41, 0);
    --v37;
  }
  if ((int)v37 <= 0) {
    return (v39 - v37);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t SafariShared::initializeURLCompletionOnMainThread(SafariShared *this)
{
  if (!ignorablePrefixesByLength)
  {
    uint64_t v1 = _WBSLocalizedString();
    uint64_t v2 = [v1 componentsSeparatedByString:@","];
    unsigned int v3 = (void *)[v2 mutableCopy];

    uint64_t v4 = [v3 count];
    if (v4)
    {
      uint64_t v5 = v4 - 1;
      do
      {
        unint64_t v6 = [v3 objectAtIndex:v5];
        uint64_t v7 = [v6 length];

        if (!v7) {
          [v3 removeObjectAtIndex:v5];
        }
        --v5;
      }
      while (v5 != -1);
    }
    [v3 sortUsingComparator:&__block_literal_global_22];
    size_t v8 = (void *)ignorablePrefixesByLength;
    ignorablePrefixesByLength = (uint64_t)v3;
  }
  uint64_t result = CFStringGetFastestEncoding(@" ");
  SafariShared::systemEightBitStringEncoding = result;
  return result;
}

void sub_1A6B853D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SafariShared::offsetAppearsToBeAtStartOrEndOfWord(SafariShared *this, CFStringRef theString, const __CFString *a3)
{
  int v3 = (int)a3;
  int v5 = (int)this;
  if (!this && !a3 || CFStringGetLength(theString) == (int)this && (v3 & 1) != 0) {
    return 1;
  }
  int v7 = v3 ^ 1;
  if (SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::onceToken != -1)
  {
    dispatch_once(&SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::onceToken, &__block_literal_global);
    int v7 = v3 ^ 1;
  }
  CFCharacterSetRef v8 = (const __CFCharacterSet *)SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::delimiters;
  UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v5 - v7);
  return CFCharacterSetIsCharacterMember(v8, CharacterAtIndex) != 0;
}

void ___ZN12SafariShared35offsetAppearsToBeAtStartOrEndOfWordEiPK10__CFStringb_block_invoke()
{
  Mutable = CFCharacterSetCreateMutable(0);
  SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::delimiters = (uint64_t)Mutable;
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  CFCharacterSetUnion(Mutable, Predefined);
  uint64_t v2 = (__CFCharacterSet *)SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::delimiters;
  CFCharacterSetRef v3 = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  CFCharacterSetUnion(v2, v3);
}

const char *SafariShared::debugStringForMatchLocation(unint64_t a1)
{
  if (a1 > 0xA) {
    return "<invalid>";
  }
  else {
    return off_1E5C8C2A0[a1];
  }
}

uint64_t SafariShared::computeURLMatchLocation(CFStringRef theString, NSString *a2, WBSURLCompletionUserTypedString *a3)
{
  if (!*((_DWORD *)a2 + 8)) {
    return 9;
  }
  if (*((unsigned char *)a2 + 36)) {
    return 0;
  }
  if (!theString)
  {
    long long v16 = WBS_LOG_CHANNEL_PREFIXHistory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      SafariShared::computeURLMatchLocation(v16);
    }
    return 0;
  }
  CFStringRef Length = (const __CFString *)CFStringGetLength(theString);
  int v8 = SafariShared::caseInsensitiveFindInUserTypedString(theString, Length, (uint64_t)a2, 0);
  if (v8 == -1) {
    return 0;
  }
  int v9 = v8;
  unsigned int v10 = [MEMORY[0x1E4F29088] componentsWithString:theString];
  if ([v10 rangeOfScheme] || (int v12 = v11, !v11))
  {
    uint64_t v17 = WBS_LOG_CHANNEL_PREFIXHistory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      SafariShared::computeURLMatchLocation((uint64_t)theString, v17);
    }
    uint64_t matched = 0;
  }
  else
  {
    int v13 = *((_DWORD *)a2 + 8);
    uint64_t v14 = v13;
    if (v9 || v13 <= (int)v11)
    {
      if (v13 + v9 <= (int)v11
        && (int v9 = SafariShared::caseInsensitiveFindInUserTypedString(theString, Length, (uint64_t)a2, (WBSURLCompletionUserTypedString *)((int)v11 + 1)), v9 == -1))
      {
        uint64_t matched = 1;
      }
      else
      {
        CStringPtr = CFStringGetCStringPtr(theString, SafariShared::systemEightBitStringEncoding);
        if (CStringPtr)
        {
          uint64_t matched = SafariShared::matchLocationAfterURLScheme<char>((uint64_t)CStringPtr, (int)Length, v12, v9, v14);
        }
        else
        {
          buffer = (UniChar *)v24;
          uint64_t v23 = 1024;
          CharactersPtr = (void *)CFStringGetCharactersPtr(theString);
          if (!CharactersPtr)
          {
            WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)&buffer, (unint64_t)Length);
            CharactersPtr = buffer;
            v25.location = 0;
            v25.length = (CFIndex)Length;
            CFStringGetCharacters(theString, v25, buffer);
          }
          uint64_t matched = SafariShared::matchLocationAfterURLScheme<unsigned short>((uint64_t)CharactersPtr, (int)Length, v12, v9, v14);
          int v21 = buffer;
          if (v24 != (unsigned char *)buffer && buffer)
          {
            buffer = 0;
            LODWORD(v23) = 0;
            WTF::fastFree((WTF *)v21, v20);
          }
        }
      }
    }
    else
    {
      CFIndex v15 = CFStringGetLength(theString);
      if (v15 == v14 || v14 + 1 == v15 && CFStringGetCharacterAtIndex(theString, v15 - 1) == 47) {
        uint64_t matched = 10;
      }
      else {
        uint64_t matched = 9;
      }
    }
  }

  return matched;
}

void sub_1A6B857C8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (v11 != a9)
  {
    if (a9) {
      WTF::fastFree(a9, a2);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t SafariShared::matchLocationAfterURLScheme<char>(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5 = a3 + 2;
  if ((int)v5 < a2
    && *(unsigned char *)(a3 + a1 + 1) == 47
    && *(unsigned char *)(a1 + v5) == 47
    && (a3 + 3 == a4
     || a3 + 7 == a4
     && a3 + 7 < a2
     && *(unsigned char *)(a1 + a3 + 3) == 119
     && *(unsigned char *)(a3 + a1 + 4) == 119
     && *(unsigned char *)(a3 + a1 + 5) == 119
     && *(unsigned char *)(a3 + a1 + 6) == 46))
  {
    if (a5 + a4 == a2)
    {
      return 10;
    }
    else if (a5 + a4 + 1 == a2)
    {
      if (*(unsigned char *)(a1 + a2 - 1) == 47) {
        return 10;
      }
      else {
        return 9;
      }
    }
    else
    {
      return 9;
    }
  }
  else if (*(unsigned char *)(a1 + a4 - 1) == 47)
  {
    return 5;
  }
  else
  {
    return 2;
  }
}

uint64_t WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t result, unint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = result;
  if (*(unsigned int *)(result + 12) < a2)
  {
    unint64_t v4 = *(unsigned int *)(result + 8);
    if (v4 < a2)
    {
      unint64_t v5 = v4 + (v4 >> 2);
      if (v5 >= 0x10) {
        unint64_t v6 = v5 + 1;
      }
      else {
        unint64_t v6 = 16;
      }
      if (v6 > a2) {
        a2 = v6;
      }
      uint64_t result = WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, a2);
    }
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t SafariShared::matchLocationAfterURLScheme<unsigned short>(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5 = a3 + 2;
  if ((int)v5 < a2
    && *(_WORD *)(a1 + 2 * a3 + 2) == 47
    && *(_WORD *)(a1 + 2 * v5) == 47
    && (a3 + 3 == a4
     || a3 + 7 == a4
     && a3 + 7 < a2
     && *(_WORD *)(a1 + 2 * (a3 + 3)) == 119
     && (uint64_t v7 = a1 + 2 * a3, *(_WORD *)(v7 + 8) == 119)
     && *(_WORD *)(v7 + 10) == 119
     && *(_WORD *)(a1 + 2 * a3 + 12) == 46))
  {
    if (a5 + a4 == a2)
    {
      return 10;
    }
    else if (a5 + a4 + 1 == a2)
    {
      if (*(_WORD *)(a1 + 2 * (a2 - 1)) == 47) {
        return 10;
      }
      else {
        return 9;
      }
    }
    else
    {
      return 9;
    }
  }
  else if (*(_WORD *)(a1 + 2 * (a4 - 1)) == 47)
  {
    return 5;
  }
  else
  {
    return 2;
  }
}

uint64_t SafariShared::computeTitleMatchLocation(CFStringRef theString, NSString *a2, WBSURLCompletionUserTypedString *a3)
{
  uint64_t v3 = (uint64_t)theString;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (theString)
  {
    CFStringRef Length = (const __CFString *)CFStringGetLength(theString);
    uint64_t v6 = SafariShared::caseInsensitiveFindInUserTypedString((const __CFString *)v3, Length, (uint64_t)a2, 0);
    if (v6 == -1)
    {
      return 0;
    }
    else
    {
      uint64_t v7 = (SafariShared *)v6;
      if (v6)
      {
        if ([(id)ignorablePrefixesByLength count])
        {
          int v8 = [(id)ignorablePrefixesByLength lastObject];
          int v9 = [v8 length];

          if ((int)v7 <= v9)
          {
            long long v19 = 0u;
            long long v20 = 0u;
            long long v17 = 0u;
            long long v18 = 0u;
            id v10 = (id)ignorablePrefixesByLength;
            uint64_t v11 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
            if (v11)
            {
              uint64_t v12 = *(void *)v18;
              while (2)
              {
                for (uint64_t i = 0; i != v11; ++i)
                {
                  if (*(void *)v18 != v12) {
                    objc_enumerationMutation(v10);
                  }
                  uint64_t v14 = *(void **)(*((void *)&v17 + 1) + 8 * i);
                  int v15 = objc_msgSend(v14, "length", (void)v17);
                  if ((int)v7 <= v15)
                  {
                    if ((int)v7 < v15) {
                      goto LABEL_20;
                    }
                    if (objc_msgSend((id)v3, "safari_hasLocalizedCaseInsensitivePrefix:", v14))
                    {
                      if (Length == (const __CFString *)(*((int *)a2 + 8) + (uint64_t)(int)v7)) {
                        uint64_t v3 = 8;
                      }
                      else {
                        uint64_t v3 = 7;
                      }

                      return v3;
                    }
                  }
                }
                uint64_t v11 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
                if (v11) {
                  continue;
                }
                break;
              }
            }
LABEL_20:
          }
        }
        if (SafariShared::offsetAppearsToBeAtStartOrEndOfWord(v7, (CFStringRef)v3, 0)) {
          return 6;
        }
        else {
          return 3;
        }
      }
      else if (Length == (const __CFString *)*((int *)a2 + 8))
      {
        return 8;
      }
      else
      {
        return 7;
      }
    }
  }
  return v3;
}

void sub_1A6B85C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float SafariShared::weightForMatchLocation(uint64_t a1)
{
  float result = 0.0;
  if ((unint64_t)(a1 - 1) <= 9) {
    return flt_1A6D45F00[a1 - 1];
  }
  return result;
}

uint64_t ___ZN12SafariSharedL23createIgnorablePrefixesEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  unint64_t v6 = [v4 length];
  if (v6 < [v5 length]) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = 1;
  }

  return v7;
}

void sub_1A6B85CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  uint64_t v3 = result;
  id v4 = *(void **)result;
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (a2 < 0x401)
  {
    unint64_t v6 = (void *)(result + 16);
    *(void *)uint64_t v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1024;
LABEL_6:
    memcpy(v6, v4, 2 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 31))
  {
    unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(2 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

BOOL SafariShared::ArticleFinderJSController::readerIsAvailable(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (const OpaqueJSContext *)*((void *)this + 3);
  if (!v1) {
    return 0;
  }
  int v2 = (SafariShared::JSUtilities *)*((void *)this + 5);
  uint64_t v3 = SafariShared::JSUtilities::callJSMethodWithArguments(v2, v1, (OpaqueJSValue *)"isReaderModeAvailable", 0, 0);
  if (!v3) {
    return 0;
  }
  id v4 = v3;
  if (!JSValueIsBoolean(v2, v3)) {
    return 0;
  }
  return JSValueToBoolean(v2, v4);
}

__CFString *SafariShared::ArticleFinderJSController::readerTextIncludingArticleMetadata(SafariShared::ArticleFinderJSController *this, BOOL a2)
{
  if (*((void *)this + 3)
    && (uint64_t v3 = (const OpaqueJSContext *)*((void *)this + 5),
        *(void *)int v9 = JSValueMakeBoolean(v3, a2),
        (id v4 = SafariShared::JSUtilities::callJSMethodWithArguments(v3, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"unformattedArticleTextContentIncludingMetadata", v9, (const OpaqueJSValue *const *)1)) != 0)&& (v5 = v4, JSValueIsString(v3, v4)))
  {
    unint64_t v6 = JSValueToStringCopy(v3, v5, 0);
    uint64_t v7 = (__CFString *)JSStringCopyCFString(0, v6);
    if (v6) {
      JSStringRelease(v6);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7;
}

void sub_1A6B87C74(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

const OpaqueJSValue *SafariShared::ArticleFinderJSController::readerArticleTitle(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (const OpaqueJSContext *)*((void *)this + 3);
  if (!v1) {
    goto LABEL_6;
  }
  int v2 = (SafariShared::JSUtilities *)*((void *)this + 5);
  uint64_t v3 = SafariShared::JSUtilities::callJSMethodWithArguments(v2, v1, (OpaqueJSValue *)"articleTitle", 0, 0);
  if (!v3) {
    goto LABEL_7;
  }
  if (JSValueIsString(v2, v3))
  {
    id v4 = JSValueToStringCopy(v2, v3, 0);
    uint64_t v3 = (const OpaqueJSValue *)JSStringCopyCFString(0, v4);
    if (v4) {
      JSStringRelease(v4);
    }
  }
  else
  {
LABEL_6:
    uint64_t v3 = 0;
  }
LABEL_7:
  return v3;
}

void sub_1A6B87D30(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef SafariShared::ArticleFinderJSController::findTextSamplesByVisualExamination(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (SafariShared::JSUtilities *)*((void *)this + 5);
  int v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"findTextSamplesByVisualExamination", 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    if (JSValueIsObject(v1, v2)) {
      return v3;
    }
  }
  return JSValueMakeUndefined(v1);
}

BOOL SafariShared::ArticleFinderJSController::usesSearchEngineOptimizationMetadata(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (SafariShared::JSUtilities *)*((void *)this + 5);
  int v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"usesSearchEngineOptimizationMetadata", 0, 0);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  if (!JSValueIsBoolean(v1, v2)) {
    return 0;
  }
  return JSValueToBoolean(v1, v3);
}

JSValueRef SafariShared::ArticleFinderJSController::prepareToTransitionToReader(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"prepareToTransitionToReader", 0, 0);
}

JSValueRef SafariShared::ArticleFinderJSController::reloadArticleContent(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"reloadArticleContent", 0, 0);
}

JSValueRef SafariShared::ArticleFinderJSController::collectReadingListItemInformation(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (SafariShared::JSUtilities *)*((void *)this + 5);
  int v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"readingListItemInformation", 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    if (JSValueIsObject(v1, v2)) {
      return v3;
    }
  }
  return JSValueMakeUndefined(v1);
}

JSObjectRef SafariShared::ArticleFinderJSController::mainImageNode(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (SafariShared::JSUtilities *)*((void *)this + 5);
  int v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"mainImageNode", 0, 0);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  if (JSValueIsNull(v1, v2) || JSValueIsUndefined(v1, v3)) {
    return 0;
  }
  return JSValueToObject(v1, v3, 0);
}

JSValueRef SafariShared::ArticleFinderJSController::articleContent(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (SafariShared::JSUtilities *)*((void *)this + 5);
  int v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"extractedArticleContent", 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    if (JSValueIsObject(v1, v2)) {
      return v3;
    }
  }
  return JSValueMakeUndefined(v1);
}

id SafariShared::ArticleFinderJSController::canonicalURLForSystemNoteTaking(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (SafariShared::JSUtilities *)*((void *)this + 5);
  int v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"extractCanonicalLink", 0, 0);
  if (v2 && (uint64_t v3 = v2, JSValueIsString(v1, v2)))
  {
    id v4 = JSValueToStringCopy(v1, v3, 0);
    uint64_t v5 = (__CFString *)JSStringCopyCFString(0, v4);
    unint64_t v6 = [MEMORY[0x1E4F1CB10] URLWithString:v5];

    if (v4) {
      JSStringRelease(v4);
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  return v6;
}

void sub_1A6B880C0(_Unwind_Exception *a1)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(a1);
}

void SafariShared::ArticleFinderJSController::evaluateSupportJavaScriptForReaderTestsIfNecessary(SafariShared::ArticleFinderJSController *this)
{
  int v2 = (const OpaqueJSContext *)*((void *)this + 5);
  SafariShared::JSUtilities::jsString(@"if (typeof pathToElementForTesting === 'undefined') var pathToElementForTesting = function(element) {var path = \"\";for (; element; element = element.parentElement) {var index = 0;for (var sibling = element; sibling; sibling = sibling.previousElementSibling)index++;path = \"/\" + index + path;}return path;};",
    &script);
  JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script) {
    JSStringRelease(script);
  }
}

void sub_1A6B8814C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string) {
    JSStringRelease(string);
  }
  _Unwind_Resume(exception_object);
}

id SafariShared::ArticleFinderJSController::pathToArticleElement(SafariShared::ArticleFinderJSController *this)
{
  int v2 = (const OpaqueJSContext *)*((void *)this + 5);
  SafariShared::ArticleFinderJSController::evaluateSupportJavaScriptForReaderTestsIfNecessary(this);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"pathToElementForTesting(this.articleNode()); ",
    &script);
  uint64_t v3 = JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script) {
    JSStringRelease(script);
  }
  if (v3 && JSValueIsString(v2, v3))
  {
    id v4 = SafariShared::JSUtilities::toNSString(v2, v3, 0);
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

void sub_1A6B88210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string) {
    JSStringRelease(string);
  }
  _Unwind_Resume(exception_object);
}

const OpaqueJSValue *SafariShared::ArticleFinderJSController::articleTitleString(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (SafariShared::JSUtilities *)*((void *)this + 5);
  int v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"articleTitle", 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    if (JSValueIsString(v1, v2))
    {
      SafariShared::JSUtilities::toNSString(v1, v3, 0);
      int v2 = (const OpaqueJSValue *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2;
}

const OpaqueJSValue *SafariShared::ArticleFinderJSController::nextPageURLString(SafariShared::ArticleFinderJSController *this)
{
  uint64_t v1 = (SafariShared::JSUtilities *)*((void *)this + 5);
  int v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"nextPageURL", 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    if (JSValueIsString(v1, v2))
    {
      SafariShared::JSUtilities::toNSString(v1, v3, 0);
      int v2 = (const OpaqueJSValue *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2;
}

id SafariShared::ArticleFinderJSController::multiPageContentElementsPathString(SafariShared::ArticleFinderJSController *this)
{
  int v2 = (const OpaqueJSContext *)*((void *)this + 5);
  SafariShared::ArticleFinderJSController::evaluateSupportJavaScriptForReaderTestsIfNecessary(this);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"this.containerElementsForMultiPageContent().map(pathToElementForTesting).join(' | ');",
    &script);
  uint64_t v3 = JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script) {
    JSStringRelease(script);
  }
  if (v3 && JSValueIsString(v2, v3))
  {
    id v4 = SafariShared::JSUtilities::toNSString(v2, v3, 0);
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

void sub_1A6B883D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string) {
    JSStringRelease(string);
  }
  _Unwind_Resume(exception_object);
}

id SafariShared::ArticleFinderJSController::adoptableArticleHTML(SafariShared::ArticleFinderJSController *this)
{
  int v2 = (const OpaqueJSContext *)*((void *)this + 5);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"var adoptableArticle = this.adoptableArticle();var allElements = adoptableArticle.getEl"
                                 "ementsByTagName('*');var numberOfElements = allElements.length;for (var uint64_t i = 0; i < numb"
                                 "erOfElements; ++i) {var element = allElements[i];element.removeAttribute(this.elementRe"
                                 "aderUniqueIDAttributeKey());}adoptableArticle.removeAttribute(this.elementReaderUniqueI"
                                 "DAttributeKey());var articleHTML = adoptableArticle.outerHTML;var subhead = this.articl"
                                 "eSubhead();var subheadHTML = '';if (subhead) {var subheadNode = document.createElement("
                                 "'h2');subheadNode.className = 'subhead';subheadNode.textContent = this.articleSubhead()"
                                 ";subheadHTML = subheadNode.outerHTML}var metadataElement = this.adoptableMetadataBlock("
                                 ");if (metadataElement) {var allMetadataElements = metadataElement.getElementsByTagName("
                                 "'*');var numberOfMetadataElements = allMetadataElements.length;for (var uint64_t i = 0; i < numb"
                                 "erOfMetadataElements; ++i) {var element = allMetadataElements[i];element.removeAttribut"
                                 "e(this.elementReaderUniqueIDAttributeKey());}}var metadataHTML = '';if (metadataElement"
                                 " && metadataElement.innerText) {metadataElement.className = 'metadata';metadataHTML = m"
                                 "etadataElement.outerHTML;}articleHTML = subheadHTML + metadataHTML + articleHTML;articleHTML;",
    &script);
  uint64_t v3 = JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script) {
    JSStringRelease(script);
  }
  if (v3 && JSValueIsString(v2, v3))
  {
    id v4 = SafariShared::JSUtilities::toNSString(v2, v3, 0);
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

void sub_1A6B88494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string) {
    JSStringRelease(string);
  }
  _Unwind_Resume(exception_object);
}

const char *SafariShared::ArticleFinderJSController::scriptObjectName(SafariShared::ArticleFinderJSController *this)
{
  return "ReaderArticleFinderJS";
}

uint64_t SafariShared::ArticleFinderJSController::staticValues(SafariShared::ArticleFinderJSController *this)
{
  return 0;
}

char **SafariShared::ArticleFinderJSController::staticFunctions(SafariShared::ArticleFinderJSController *this)
{
  return &SafariShared::ArticleFinderJSController::staticFunctions(void)::staticFunctions;
}

JSValueRef SafariShared::jsSubstituteURLForNextPageURL(JSContextRef ctx, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_7;
  }
  if (!objc_msgSend(MEMORY[0x1E4F97EA0], "isInternalInstall", a3, 1, a5, a6, a7)) {
    return *(JSValueRef *)a5;
  }
  id v10 = SafariShared::JSController::jsController(a3);
  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)v10 + 56);
    return (JSValueRef)v11();
  }
  else
  {
LABEL_7:
    return JSValueMakeUndefined(ctx);
  }
}

JSValueRef SafariShared::jsNodeAtPoint(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)2 && (uint64_t v11 = v10) != 0)
  {
    double v12 = JSValueToNumber(this, *a5, 0);
    v13.n128_u64[0] = JSValueToNumber(this, a5[1], 0);
    uint64_t v14 = *(uint64_t (**)(void *, __n128, __n128))(*(void *)v11 + 48);
    v15.n128_f64[0] = v12;
    return (JSValueRef)v14(v11, v15, v13);
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

JSValueRef SafariShared::jsUserVisibleURLString(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)1 && v10)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F1CB10];
    double v12 = SafariShared::JSUtilities::toNSString(this, *a5, 0);
    __n128 v13 = objc_msgSend(v11, "safari_URLWithDataAsString:", v12);
    uint64_t v14 = objc_msgSend(v13, "safari_userVisibleString");
    JSValueRef v15 = SafariShared::JSUtilities::toJSValue(this, v14, 0);

    return v15;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6B88738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSClassRef SafariShared::ArticleFinderJSController::staticJSClass(SafariShared::ArticleFinderJSController *this)
{
    return (JSClassRef)SafariShared::ArticleFinderJSController::staticJSClass(void)::jsClass;
  JSClassRef result = SafariShared::JSController::createJSClass(this);
  SafariShared::ArticleFinderJSController::staticJSClass(void)::jsClass = (uint64_t)result;
  return result;
}

uint64_t WBSAutoFillGetSavedDataClasses()
{
  uint64_t v5 = 0;
  unint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  dispatch_queue_t v0 = [MEMORY[0x1E4F18D90] sharedCredentialStorage];
  uint64_t v1 = objc_msgSend(v0, "safari_allSafariCredentials");

  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __hasUsernamesAndPasswords_block_invoke;
  v4[3] = &unk_1E5C8C3C0;
  v4[4] = &v5;
  [v1 enumerateKeysAndObjectsUsingBlock:v4];
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);

  _Block_object_dispose(&v5, 8);
  if (+[WBSCreditCardDataController hasCreditCardData]) {
    return v2 | 2;
  }
  else {
    return v2;
  }
}

void sub_1A6B88898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __hasUsernamesAndPasswords_block_invoke(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  unint64_t v6 = objc_msgSend(a3, "allValues", 0);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = [*(id *)(*((void *)&v14 + 1) + 8 * i) user];
        double v12 = +[WBSFormDataController dontSaveMarker];
        char v13 = [v11 isEqualToString:v12];

        if ((v13 & 1) == 0)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
          *a4 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

__CFString *titleForFeedbackDetailType(void *a1, int a2)
{
  id v3 = a1;
  if ([v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillNotOfferedFormPurpose"])
  {
    if (!a2)
    {
      id v4 = @"What is the purpose of the form where AutoFill wasn’t offered?";
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if ([v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillNotOfferedExpectedAutoFillInformationTypes"])
  {
    if (!a2)
    {
      id v4 = @"What type(s) of information did you expect to be available for AutoFill in the form?";
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if ([v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillIncorrectlyOfferedFormPurpose"])
  {
    if (!a2)
    {
      id v4 = @"What is the purpose of the form where AutoFill was incorrectly offered?";
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if ([v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillIncorrectlyOfferedUnexpectedAutoFillInformationTypes"])
  {
    if (!a2)
    {
      id v4 = @"What type(s) of information were offered to be filled and why is this unexpected?";
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if ([v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillFillingFailedUnfilledFieldsExpectingFilling"])
  {
    if (!a2)
    {
      id v4 = @"Which fields did you expect to be filled that were not?";
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if ([v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillFilledIncorrectDataIncorrectFields"])
  {
    if (!a2)
    {
      id v4 = @"Which fields had incorrect information filled?";
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if ([v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillFilledIncorrectDataExpectedFilledData"])
  {
    if (!a2)
    {
      id v4 = @"What type of information was filled and what type of information did you expect to be filled?";
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if ([v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillFilledIncorrectFormatIncorrectFields"])
  {
    if (!a2)
    {
      id v4 = @"Which fields had data incorrectly formatted?";
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if ([v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillFilledIncorrectFormatExpectedFormat"])
  {
    if (!a2)
    {
      id v4 = @"What format was the form expecting, and what format was filled?";
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (![v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillOtherIssue"])
  {
    int v5 = [v3 isEqualToString:@"WBSAutoFillInternalFeedbackDetailTypeAutoFillMultipleIssues"];
    if (v5) {
      id v4 = @"Please describe each issue you had, including what AutoFill did and how that differed from the expected result.";
    }
    else {
      id v4 = @"unknown detail type title";
    }
    if (!v5 || !a2) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (a2)
  {
LABEL_45:
    _WBSLocalizedString();
    id v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_46;
  }
  id v4 = @"What happened and how did that differ from the expected result?";
LABEL_46:

  return v4;
}

uint64_t __isABCAvailable_block_invoke()
{
  uint64_t result = objc_opt_class();
  isABCAvailable_isABCAvailable = result != 0;
  return result;
}

void sub_1A6B8B2F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B8B4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B8B5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6B8B674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A6B8B760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6B8B8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B8B9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6B8BA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B8BADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *WBSAutomaticTabClosingIntervalAnalyticsTitle(unint64_t a1)
{
  if (a1 > 7) {
    return @"Other";
  }
  else {
    return off_1E5C8C6D0[a1];
  }
}

__CFString *WBSAutomaticTabClosingIntervalSettingsTitle(uint64_t a1)
{
  id v3 = &stru_1EFBE3CF8;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      _WBSLocalizedString();
      id v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      break;
  }
  return v3;
}

__CFString *WBSAutomaticTabClosingIntervalPromptTitle(unint64_t a1)
{
  uint64_t v2 = &stru_1EFBE3CF8;
  if (a1 <= 7)
  {
    if (((1 << a1) & 0xEE) != 0)
    {
      WBSAutomaticTabClosingIntervalSettingsTitle(a1);
      uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else if (!a1)
    {
      _WBSLocalizedString();
      uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v2;
}

void WBSAutomaticTabClosingIntervalTimeInterval(uint64_t a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      return;
    default:
      uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9C8], "distantFuture", 86400.0);
      [v1 timeIntervalSinceNow];

      break;
  }
}

__CFString *WBSAutoplayRegionKeyForCountryCode(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (countryCodesToRegionKeyTable_onceToken != -1) {
      dispatch_once(&countryCodesToRegionKeyTable_onceToken, &__block_literal_global_3);
    }
    id v2 = (id)countryCodesToRegionKeyTable_countryCodesToRegionKeys;
    id v3 = [v1 uppercaseString];
    id v4 = [v2 objectForKeyedSubscript:v3];

    if ([v4 length]) {
      int v5 = v4;
    }
    else {
      int v5 = @"OTH";
    }
  }
  else
  {
    int v5 = @"OTH";
  }

  return v5;
}

id WBSAutoplayDifferentialPrivacyKeyForSignal(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((unint64_t)(a1 - 1) > 2) {
    id v4 = 0;
  }
  else {
    id v4 = (void *)[(__CFString *)off_1E5C8C710[a1 - 1] mutableCopy];
  }
  [v4 appendString:@"."];
  int v5 = WBSAutoplayRegionKeyForCountryCode(v3);
  [v4 appendString:v5];

  return v4;
}

void __countryCodesToRegionKeyTable_block_invoke()
{
  dispatch_queue_t v0 = (void *)countryCodesToRegionKeyTable_countryCodesToRegionKeys;
  countryCodesToRegionKeyTable_countryCodesToRegionKeys = (uint64_t)&unk_1EFC22310;
}

void sub_1A6B8D2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t WBSSignalToSendForAutoplayEventWithFlags(uint64_t a1, char a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      int v5 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
        goto LABEL_11;
      }
      *(_WORD *)buf = 0;
      a3 = 2;
      _os_log_impl(&dword_1A6B5F000, v5, OS_LOG_TYPE_INFO, "Did prevent media from autoplaying", buf, 2u);
      break;
    case 1:
      if ((a2 & 2) != 0)
      {
        uint64_t v8 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl(&dword_1A6B5F000, v8, OS_LOG_TYPE_INFO, "Did play media prevented from autoplaying", v13, 2u);
        }
        goto LABEL_17;
      }
      if ((~a2 & 5) == 0) {
        goto LABEL_17;
      }
      break;
    case 2:
      unint64_t v6 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_1A6B5F000, v6, OS_LOG_TYPE_INFO, "Did autoplay media past threshold without user interference", v11, 2u);
      }
      if (a2) {
LABEL_17:
      }
        a3 = 3;
      break;
    case 3:
      uint64_t v7 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl(&dword_1A6B5F000, v7, OS_LOG_TYPE_INFO, "User did interfere with playback", v10, 2u);
      }
      if (a2) {
LABEL_11:
      }
        a3 = 2;
      break;
    default:
      return a3;
  }
  return a3;
}

void WBSReportAutoplaySignalIfNecessary(uint64_t a1, void *a2, char a3, double a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (a1 && v7)
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F1CB10], "safari_URLWithDataAsString:", v7);
    uint64_t v10 = [v9 host];

    if ([v10 length])
    {
      if (a4 == 0.0 || ([MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate], v11 - a4 >= 10.0))
      {
        id v14 = v10;
        if (sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::onceToken != -1) {
          dispatch_once(&sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::onceToken, &__block_literal_global_4);
        }
        long long v15 = [(id)sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::domainNormalizer transformedValue:v14];
        long long v16 = +[WBSFormAutoFillCorrectionsSQLiteStore standardStore];
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3221225472;
        v19[2] = ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2;
        v19[3] = &unk_1E5C8C838;
        uint64_t v22 = a1;
        id v17 = v14;
        id v20 = v17;
        id v18 = v15;
        id v21 = v18;
        char v23 = a3;
        [v16 getAllowListStatusForDomain:v17 completionHandler:v19];
      }
      else
      {
        uint64_t v12 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          LOWORD(v19[0]) = 0;
          _os_log_impl(&dword_1A6B5F000, v12, OS_LOG_TYPE_INFO, "Discarding auto-play signal for quick navigation", (uint8_t *)v19, 2u);
        }
        uint64_t v13 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
          WBSReportAutoplaySignalIfNecessary_cold_1((uint64_t)v10, v13);
        }
      }
    }
  }
}

void sub_1A6B8D898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke()
{
  dispatch_queue_t v0 = objc_alloc_init(WBSCrowdsourcedFeedbackDomainNormalizer);
  id v1 = (void *)sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::domainNormalizer;
  sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::domainNormalizer = (uint64_t)v0;
}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a2 || a2 == 2)
  {
    unint64_t v6 = (id *)(a1 + 32);
    id v7 = objc_msgSend(*(id *)(a1 + 32), "safari_highLevelDomainFromHost");
    if ([v7 length] && !objc_msgSend(*v6, "isEqualToString:", v7))
    {
      double v11 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 48);
        LODWORD(v24) = 134217984;
        *(void *)((char *)&v24 + 4) = v12;
        _os_log_impl(&dword_1A6B5F000, v11, OS_LOG_TYPE_INFO, "Checking if the high-level domain is on the feedback allowlist before recording auto-play signal %lu", (uint8_t *)&v24, 0xCu);
      }
      uint64_t v13 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_3((uint64_t)v7, a1, v13);
      }
      uint64_t v14 = *(void *)(a1 + 48);
      long long v15 = [(id)sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::domainNormalizer transformedValue:v7];
      char v16 = *(unsigned char *)(a1 + 56);
      id v17 = v15;
      id v18 = [MEMORY[0x1E4F1CA20] currentLocale];
      uint64_t v19 = [v18 countryCode];
      id v20 = WBSAutoplayDifferentialPrivacyKeyForSignal(v14, v19);

      id v21 = +[WBSFormAutoFillCorrectionsSQLiteStore standardStore];
      *(void *)&long long v24 = MEMORY[0x1E4F143A8];
      *((void *)&v24 + 1) = 3221225472;
      CFRange v25 = ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke;
      int v26 = &unk_1E5C8C838;
      id v22 = v20;
      id v27 = v22;
      id v23 = v17;
      id v28 = v23;
      uint64_t v29 = v14;
      char v30 = v16;
      [v21 getAllowListStatusForDomain:v23 completionHandler:&v24];
    }
    else
    {
      uint64_t v8 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 48);
        LODWORD(v24) = 134217984;
        *(void *)((char *)&v24 + 4) = v9;
        _os_log_impl(&dword_1A6B5F000, v8, OS_LOG_TYPE_INFO, "Discarding auto-play signal %lu after checking feedback allowlist", (uint8_t *)&v24, 0xCu);
      }
      uint64_t v10 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_2();
      }
    }
  }
  else if (a2 == 1)
  {
    id v3 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      LODWORD(v24) = 134217984;
      *(void *)((char *)&v24 + 4) = v4;
      _os_log_impl(&dword_1A6B5F000, v3, OS_LOG_TYPE_INFO, "Recording auto-play signal: %lu", (uint8_t *)&v24, 0xCu);
    }
    int v5 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_1();
    }
    if ([*(id *)(a1 + 40) length]) {
      donateEventToBiomeWithAutoPlaySignalForDomain(*(void *)(a1 + 48), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
    }
  }
}

void sub_1A6B8DC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void donateEventToBiomeWithAutoPlaySignalForDomain(uint64_t a1, void *a2, uint64_t a3)
{
  id v9 = a2;
  int v5 = +[WBSBiomeDonationManager sharedManager];
  unint64_t v6 = [MEMORY[0x1E4F1CA20] currentLocale];
  id v7 = [v6 countryCode];
  uint64_t v8 = WBSAutoplayRegionKeyForCountryCode(v7);
  [v5 donateAutoPlayEventWithSignal:a1 domain:v9 countryCode:v8 webPageLoadedOverPrivateRelay:a3];
}

void sub_1A6B8DD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a2 || a2 == 2)
  {
    unint64_t v6 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 138543362;
      uint64_t v10 = v7;
      _os_log_impl(&dword_1A6B5F000, v6, OS_LOG_TYPE_INFO, "Discarding auto-play signal %{public}@ after checking feedback allowlist", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v8 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke_cold_2();
    }
  }
  else if (a2 == 1)
  {
    id v3 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v9 = 138543362;
      uint64_t v10 = v4;
      _os_log_impl(&dword_1A6B5F000, v3, OS_LOG_TYPE_INFO, "Recording auto-play signal: %{public}@", (uint8_t *)&v9, 0xCu);
    }
    int v5 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke_cold_1();
    }
    if ([*(id *)(a1 + 40) length]) {
      donateEventToBiomeWithAutoPlaySignalForDomain(*(void *)(a1 + 48), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
    }
  }
}

void OUTLINED_FUNCTION_1_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

uint64_t WBSTimestampForBiomeEventDonation()
{
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  double v1 = ceil(v0 / 1800.0) * 30.0 * 60.0;
  id v2 = (void *)MEMORY[0x1E4F1C9C8];
  return [v2 dateWithTimeIntervalSinceReferenceDate:v1];
}

uint64_t BiomeErrorResponseForStatusCode(uint64_t a1)
{
  uint64_t v1 = a1 - 400;
  if (a1 < 400) {
    return 0;
  }
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = 3;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 4:
      uint64_t result = 5;
      break;
    case 5:
      uint64_t result = 6;
      break;
    case 6:
      uint64_t result = 7;
      break;
    case 7:
      uint64_t result = 8;
      break;
    case 8:
      uint64_t result = 9;
      break;
    case 9:
      uint64_t result = 10;
      break;
    case 10:
      uint64_t result = 11;
      break;
    case 11:
      uint64_t result = 12;
      break;
    case 12:
      uint64_t result = 13;
      break;
    case 13:
      uint64_t result = 14;
      break;
    case 14:
      uint64_t result = 15;
      break;
    case 15:
      uint64_t result = 16;
      break;
    case 16:
      uint64_t result = 17;
      break;
    case 17:
      uint64_t result = 18;
      break;
    case 18:
      uint64_t result = 19;
      break;
    case 22:
      uint64_t result = 20;
      break;
    case 25:
      uint64_t result = 21;
      break;
    case 26:
      uint64_t result = 22;
      break;
    case 28:
      uint64_t result = 23;
      break;
    case 29:
      uint64_t result = 24;
      break;
    case 31:
      uint64_t result = 25;
      break;
    case 51:
      uint64_t result = 26;
      break;
    default:
      return 0;
  }
  return result;
}

void sub_1A6B901E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void __isIPad_block_invoke()
{
  double v0 = (const void *)MGCopyAnswer();
  if (v0)
  {
    uint64_t v1 = v0;
    isIPad_uint64_t result = CFEqual(v0, @"iPad") != 0;
    CFRelease(v1);
  }
}

Class __getSADeviceInfoClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SearchAssetsLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    void v3[3] = __SearchAssetsLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E5C8C9D8;
    uint64_t v5 = 0;
    SearchAssetsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SearchAssetsLibraryCore_frameworkLibrary) {
    __getSADeviceInfoClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SADeviceInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSADeviceInfoClass_block_invoke_cold_2();
  }
  getSADeviceInfoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SearchAssetsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SearchAssetsLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1A6B921E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B922D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B924A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B92764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B92924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B92B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B92E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B930A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B931E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B933A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9361C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B936C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,double>(void *a1, void *a2, void *a3, void *a4, double *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  uint64_t v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,double>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6B93908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,double>(void *a1, void *a2, double *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindDouble:2 atParameterIndex:*a3];
}

void sub_1A6B93994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double,double>(void *a1, void *a2, void *a3, double *a4, double *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  uint64_t v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6B93ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double>(void *a1, double *a2, double *a3)
{
  id v5 = a1;
  [v5 bindDouble:1 atParameterIndex:*a2];
  [v5 bindDouble:2 atParameterIndex:*a3];
}

void sub_1A6B93B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v15 = 0;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:&v15];
  id v10 = v15;
  uint64_t v11 = v10;
  if (v9)
  {
    [v9 bindString:*a4 atParameterIndex:1];
    uint64_t v12 = [v9 execute];
    [v9 invalidate];
    if ((v12 - 100) >= 2 && v12 != 0) {
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v10;
    }
    uint64_t v12 = [v11 code];
  }

  return v12;
}

void sub_1A6B93C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B93D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B93E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B93EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B93F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B93F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B93FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9405C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(uint64_t result)
{
  uint64_t v1 = (id *)result;
  if (*(_DWORD *)result == 1)
  {

    return WTF::fastFree((WTF *)v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_1A6B9472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9495C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6B949D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B94A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B94C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, id location)
{
  id v23 = v20;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A6B94DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B94E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B95000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  id v21 = v19;

  objc_destroyWeak(v18);
  objc_destroyWeak((id *)(v20 - 56));

  _Unwind_Resume(a1);
}

void sub_1A6B951A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B95258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B95550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6B959A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6B95B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B95D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B95E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WBSBrowsingAssistantContentTypeAvailabilityLabel(uint64_t a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      id v2 = _WBSLocalizedString();
      break;
    default:
      id v2 = 0;
      break;
  }
  return v2;
}

void WBSBrowsingAssistantContentOptionsEnumerateCasesUsingBlock(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    for (uint64_t i = 0; i != 7; ++i)
    {
      unint64_t v4 = orderedContentOptions[i];
      if ((v4 & a1) != 0) {
        v5[2](v5, 64 - __clz(v4));
      }
    }
  }
}

void WBSBrowsingAssistantContentOptionsEnumerateOptionsUsingBlock(uint64_t a1, void *a2)
{
  unint64_t v4 = a2;
  if (a1)
  {
    for (uint64_t i = 0; i != 7; ++i)
    {
      if ((orderedContentOptions[i] & a1) != 0) {
        v4[2]();
      }
    }
  }
}

uint64_t WBSBrowsingAssistantContentOptionsMostProminentRemoteOption(char a1)
{
  uint64_t v1 = a1 & 0x1F;
  if ((a1 & 0x1F) == 0) {
    return 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = orderedContentOptions[v2];
    if ((result & v1) != 0) {
      break;
    }
    if (++v2 == 7) {
      return 0;
    }
  }
  return result;
}

id getSAAssetManagerFactoryClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  double v0 = (void *)getSAAssetManagerFactoryClass_softClass;
  uint64_t v7 = getSAAssetManagerFactoryClass_softClass;
  if (!getSAAssetManagerFactoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSAAssetManagerFactoryClass_block_invoke;
    void v3[3] = &unk_1E5C8C9B8;
    v3[4] = &v4;
    __getSAAssetManagerFactoryClass_block_invoke((uint64_t)v3);
    double v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A6B967F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSAAssetManagerFactoryClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SearchAssetsLibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    void v3[3] = __SearchAssetsLibraryCore_block_invoke_0;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5C8CBD0;
    uint64_t v5 = 0;
    SearchAssetsLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!SearchAssetsLibraryCore_frameworkLibrary_0) {
    __getSAAssetManagerFactoryClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SAAssetManagerFactory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSAAssetManagerFactoryClass_block_invoke_cold_2();
  }
  getSAAssetManagerFactoryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SearchAssetsLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  SearchAssetsLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

__CFString *WBSBrowsingAssistantConsentStateName(unint64_t a1)
{
  if (a1 > 2) {
    return @"N/A";
  }
  else {
    return off_1E5C8CCE0[a1];
  }
}

void sub_1A6B97F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6B987F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6B99884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __calculationResultNumberFormatter_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  id v1 = (void *)calculationResultNumberFormatter_formatter;
  calculationResultNumberFormatter_formatter = (uint64_t)v0;

  [(id)calculationResultNumberFormatter_formatter setMaximumFractionDigits:10];
  [(id)calculationResultNumberFormatter_formatter setMaximumIntegerDigits:20];
  [(id)calculationResultNumberFormatter_formatter setNumberStyle:1];
  uint64_t v2 = (void *)calculationResultNumberFormatter_formatter;
  return [v2 setUsesGroupingSeparator:1];
}

uint64_t __conversionResultNumberFormatter_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  id v1 = (void *)conversionResultNumberFormatter_formatter;
  conversionResultNumberFormatter_formatter = (uint64_t)v0;

  [(id)conversionResultNumberFormatter_formatter setMaximumFractionDigits:2];
  [(id)conversionResultNumberFormatter_formatter setNumberStyle:1];
  uint64_t v2 = (void *)conversionResultNumberFormatter_formatter;
  return [v2 setUsesGroupingSeparator:1];
}

void sub_1A6B9A5CC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void __evaluationOptions_block_invoke()
{
  v6[6] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F568B8];
  v5[0] = *MEMORY[0x1E4F568A8];
  v5[1] = v0;
  v6[0] = MEMORY[0x1E4F1CC38];
  v6[1] = MEMORY[0x1E4F1CC38];
  uint64_t v1 = *MEMORY[0x1E4F568C8];
  v5[2] = *MEMORY[0x1E4F568C0];
  v5[3] = v1;
  v6[2] = MEMORY[0x1E4F1CC38];
  v6[3] = MEMORY[0x1E4F1CC38];
  uint64_t v2 = *MEMORY[0x1E4F568F0];
  v5[4] = *MEMORY[0x1E4F568E0];
  v5[5] = v2;
  v6[4] = MEMORY[0x1E4F1CC38];
  v6[5] = &unk_1EFC22498;
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:v5 count:6];
  long long v4 = (void *)evaluationOptions_options;
  evaluationOptions_options = v3;
}

void sub_1A6B9AB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9AC7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9AE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9AFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9B0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9B1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9B284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9B4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9B688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9B788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9B82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9B924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9B9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9BB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *WBSHideMyEmailRecordStateStringForRecordState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"PrivateEmailExists";
  }
  else {
    return off_1E5C8CED0[a1 - 1];
  }
}

void sub_1A6B9DA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A6B9DF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9DFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9E0E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9E39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9E440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)WBSCloudHistory;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_1A6B9E5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9E938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9EAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9EC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9ED00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9EFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__128(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__129(uint64_t a1)
{
}

void sub_1A6B9F3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9F4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9F7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9FCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9FE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9FEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6B9FF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA0064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA017C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA0288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA0510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA0714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA088C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA09A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA0AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA0BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA0D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA0DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA11F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA140C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA1728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA1E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA1F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA2078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA216C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA2278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA2368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA254C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA2630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA281C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA2AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA2BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA2DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  objc_destroyWeak(v15);

  _Unwind_Resume(a1);
}

void sub_1A6BA3158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA3280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_destroyWeak(v14);
  _Unwind_Resume(a1);
}

void sub_1A6BA33C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  objc_destroyWeak(v14);
  _Unwind_Resume(a1);
}

void sub_1A6BA3514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA37A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA395C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA3A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA3F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA41E0(_Unwind_Exception *exception_object)
{
}

void sub_1A6BA4480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA4614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA4724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA47DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA49D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA4AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA4D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA4F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA50D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA529C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA5398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA555C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA56C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA5790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA58A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA5A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA5C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA5D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA5F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA5FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA6418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA6720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA68E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA6B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA6C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA6CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA6DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA6F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA7004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA70E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA7238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA742C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA75D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA78C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA7A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA7B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA7C7C(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6BA7D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA7FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA8078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA82B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA8348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA83F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA84B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA857C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA868C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA8988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA8AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id *std::unique_ptr<SafariShared::SuddenTerminationDisabler>::reset[abi:sn180100](id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    SafariShared::SuddenTerminationDisabler::~SuddenTerminationDisabler(result);
    JUMPOUT(0x1AD0C4750);
  }
  return result;
}

void SafariShared::SuddenTerminationDisabler::~SuddenTerminationDisabler(id *this)
{
}

void sub_1A6BA8D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_2(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void OUTLINED_FUNCTION_3(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

uint64_t OUTLINED_FUNCTION_4_0(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2114;
  *(void *)(a2 + 14) = result;
  return result;
}

void sub_1A6BA8E80(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6BA8F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA9108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA91C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA9250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA95C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA978C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA993C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA9A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA9B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA9C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA9D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BA9DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BAA140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_1_6()
{
  return v0;
}

void sub_1A6BAC964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BACA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BACC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BACCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BACDC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BACF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BAD1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BAD210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BAD264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BAD2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WBSCloudHistoryPushAgentMain(void)
{
  uint64_t v0 = (void *)MEMORY[0x1AD0C4CF0]();
  uint64_t v1 = objc_alloc_init(WBSCloudHistoryPushAgent);
  uint64_t v2 = (void *)cloudHistoryPushAgent;
  cloudHistoryPushAgent = (uint64_t)v1;

  WBSRunLoopRunUntilTerminationSignal();
  return 0;
}

void sub_1A6BAD450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BAD4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)WBSCloudHistoryPushAgentProxy;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A6BAD54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BAD738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1A6BAD8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  id v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1A6BAD964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BAD9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BAFA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6BAFD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint8_t buf)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(exception_object);
    id v18 = (id)WBS_LOG_CHANNEL_PREFIXCloudHistory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = [v17 name];
      __73__WBSCloudHistoryStore_fetchRecordsWithServerChangeTokenData_completion___block_invoke_cold_1(v19, &buf, v18);
    }

    objc_end_catch();
    JUMPOUT(0x1A6BAFC88);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A6BB0084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6BB0790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A6BB13C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1A6BB2758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __CloudSubscriptionFeaturesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CloudSubscriptionFeaturesLibraryCore_frameworkLibrary = result;
  return result;
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_1A6BB572C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB598C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB5C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB5E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB6158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A6BB628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB63EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB64C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB6798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A6BB6954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB6BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB6CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB6F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1A6BB71B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB7254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB7534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB7700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB7960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB7D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB7F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB8088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB80F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB81A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB8264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB83D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB8514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB85C8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6BB86F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  uint64_t v16 = v14;

  _Unwind_Resume(a1);
}

void sub_1A6BB87BC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_0(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2113;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_1A6BB9098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB9168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB9208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB92B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB93E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB9500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB9684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB98B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB9AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BB9EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBA0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBA2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBA588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBA6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBA83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id addressBookStringToBeDisplayed(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([a1 length] || !objc_msgSend(v8, "length")) {
    goto LABEL_2;
  }
  id v12 = v8;
  id v13 = v7;
  if ([v12 isEqualToString:@"_$!<Home>!$_"])
  {
    if ([v13 isEqualToString:*MEMORY[0x1E4F98020]]
      || [v13 isEqualToString:*MEMORY[0x1E4F98030]]
      || [v13 isEqualToString:*MEMORY[0x1E4F98048]])
    {
LABEL_25:
      uint64_t v10 = _WBSLocalizedString();
      goto LABEL_27;
    }
  }
  else if ([v12 isEqualToString:@"_$!<Work>!$_"])
  {
    if ([v13 isEqualToString:*MEMORY[0x1E4F98020]]
      || [v13 isEqualToString:*MEMORY[0x1E4F98030]]
      || [v13 isEqualToString:*MEMORY[0x1E4F98048]])
    {
      goto LABEL_25;
    }
  }
  else if ([v12 isEqualToString:@"_$!<Mobile>!$_"] {
         && [v13 isEqualToString:*MEMORY[0x1E4F98048]]
  }
         || [v12 isEqualToString:@"iPhone"]
         && [v13 isEqualToString:*MEMORY[0x1E4F98048]])
  {
    goto LABEL_25;
  }
  uint64_t v10 = 0;
LABEL_27:

  if (!v10)
  {
LABEL_2:
    uint64_t v10 = [(id)objc_opt_class() localizedLowercaseContactProperty:v7];
  }

  return v10;
}

id allStores()
{
  if (allStores_onceToken != -1) {
    dispatch_once(&allStores_onceToken, &__block_literal_global_92);
  }
  uint64_t v0 = (void *)allStores_allStores;
  return v0;
}

void __allStores_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28D30] weakObjectsHashTable];
  uint64_t v1 = (void *)allStores_allStores;
  allStores_allStores = v0;
}

void sub_1A6BBE5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBE76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id allProfileDatabaseIdentifiers(void)
{
  if (allProfileDatabaseIdentifiers(void)::onceToken != -1) {
    dispatch_once(&allProfileDatabaseIdentifiers(void)::onceToken, &__block_literal_global_186);
  }
  uint64_t v0 = (void *)allProfileDatabaseIdentifiers(void)::allProfileDatabaseIdentifiers;
  return v0;
}

void sub_1A6BBE910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id storesByProfileIdentifier(void)
{
  if (storesByProfileIdentifier(void)::onceToken != -1) {
    dispatch_once(&storesByProfileIdentifier(void)::onceToken, &__block_literal_global_189);
  }
  uint64_t v0 = (void *)storesByProfileIdentifier(void)::storesByProfileIdentifier;
  return v0;
}

void sub_1A6BBEA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBEAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBECF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBEF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBF07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBF374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<double const&,double const&,NSString * const {__strong}&>(void *a1, void *a2, double *a3, double *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&,NSString * const {__strong}&>(v11, a3, a4, a5);
  id v12 = [v11 fetch];

  return v12;
}

void sub_1A6BBF4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<double const&,double const&>(void *a1, void *a2, double *a3, double *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&>(v9, a3, a4);
  id v10 = [v9 fetch];

  return v10;
}

void sub_1A6BBF580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBF720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBFA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBFBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BBFC4C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6BBFE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC005C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v13 = v11;

  _Unwind_Resume(a1);
}

void sub_1A6BC0300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC065C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6BC0718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC08BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A6BC0A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A6BC0C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC0DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC0FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL29allProfileDatabaseIdentifiersv_block_invoke()
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F1CA80] set];
  uint64_t v1 = (void *)allProfileDatabaseIdentifiers(void)::allProfileDatabaseIdentifiers;
  allProfileDatabaseIdentifiers(void)::allProfileDatabaseIdentifiers = v0;

  uint64_t v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v3 = objc_msgSend(v2, "safari_profilesDirectoryURL");
  id v21 = 0;
  uint64_t v15 = [v2 contentsOfDirectoryAtURL:v3 includingPropertiesForKeys:0 options:0 error:&v21];
  id v16 = v21;

  if (!v16)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v4 = v15;
    uint64_t v6 = [v4 countByEnumeratingWithState:&v17 objects:v23 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v18 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          id v10 = objc_msgSend(v9, "URLByAppendingPathComponent:isDirectory:", @"ContentBlockerStatistics.db", 0, v15);
          uint64_t v11 = [v10 path];
          int v12 = [v2 fileExistsAtPath:v11];

          if (v12)
          {
            id v13 = (void *)allProfileDatabaseIdentifiers(void)::allProfileDatabaseIdentifiers;
            uint64_t v14 = [v9 lastPathComponent];
            [v13 addObject:v14];
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v17 objects:v23 count:16];
      }
      while (v6);
    }
    goto LABEL_14;
  }
  if ((objc_msgSend(v16, "safari_matchesErrorDomain:andCode:", *MEMORY[0x1E4F281F8], 260, v15) & 1) == 0)
  {
    uint64_t v4 = (id)WBS_LOG_CHANNEL_PREFIXContentBlockers();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = objc_msgSend(v16, "safari_privacyPreservingDescription");
      ___ZL29allProfileDatabaseIdentifiersv_block_invoke_cold_1(v5, buf, v4);
    }
LABEL_14:
  }
}

void sub_1A6BC12C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZL25storesByProfileIdentifierv_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28E10] strongToWeakObjectsMapTable];
  uint64_t v1 = (void *)storesByProfileIdentifier(void)::storesByProfileIdentifier;
  storesByProfileIdentifier(void)::storesByProfileIdentifier = v0;
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long &,long &,double &>(void *a1, void *a2, void *a3, void *a4, void *a5, double *a6)
{
  id v11 = a1;
  id v12 = a3;
  id v19 = 0;
  id v13 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v11 query:v12 error:&v19];
  id v14 = v19;
  uint64_t v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long &,long &,double &>(v13, a4, a5, a6);
    uint64_t v16 = [v13 execute];
    [v13 invalidate];
    if ((v16 - 100) >= 2 && v16 != 0) {
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v14;
    }
    uint64_t v16 = [v15 code];
  }

  return v16;
}

void sub_1A6BC14A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long &,long &,double &>(void *a1, void *a2, void *a3, double *a4)
{
  id v7 = a1;
  [v7 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,long &,double &>(v7, a3, a4);
}

void sub_1A6BC153C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,long &,double &>(void *a1, void *a2, double *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:2];
  [v5 bindDouble:3 atParameterIndex:*a3];
}

void sub_1A6BC15B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&,NSString * const {__strong}&>(void *a1, double *a2, double *a3, void *a4)
{
  id v7 = a1;
  [v7 bindDouble:1 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double const&,NSString * const {__strong}&>(v7, a3, a4);
}

void sub_1A6BC1638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double const&,NSString * const {__strong}&>(void *a1, double *a2, void *a3)
{
  id v5 = a1;
  [v5 bindDouble:2 atParameterIndex:*a2];
  [v5 bindString:*a3 atParameterIndex:3];
}

void sub_1A6BC16B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&>(void *a1, double *a2, double *a3)
{
  id v5 = a1;
  [v5 bindDouble:1 atParameterIndex:*a2];
  [v5 bindDouble:2 atParameterIndex:*a3];
}

void sub_1A6BC1728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v15 = 0;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:&v15];
  id v10 = v15;
  id v11 = v10;
  if (v9)
  {
    [v9 bindString:*a4 atParameterIndex:1];
    uint64_t v12 = [v9 execute];
    [v9 invalidate];
    if ((v12 - 100) >= 2 && v12 != 0) {
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v10;
    }
    uint64_t v12 = [v11 code];
  }

  return v12;
}

void sub_1A6BC1844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WBSContentBlockerStatisticsStoreEnumerateAllStores(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v2 = +[WBSContentBlockerStatisticsSQLiteStore allStores];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        v1[2](v1, *(void *)(*((void *)&v16 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = +[WBSContentBlockerStatisticsInMemoryStore allStores];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        v1[2](v1, *(void *)(*((void *)&v12 + 1) + 8 * v11++));
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v9);
  }
}

void WBSContentBlockerStatisticsStoreMergeStatistics(void *a1, void *a2)
{
  id v3 = a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __WBSContentBlockerStatisticsStoreMergeStatistics_block_invoke;
  v5[3] = &unk_1E5C9A1B8;
  id v6 = v3;
  id v4 = v3;
  [a2 enumerateKeysAndObjectsUsingBlock:v5];
}

void __WBSContentBlockerStatisticsStoreMergeStatistics_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v24 = a1;
    uint64_t v9 = objc_msgSend(v7, "safari_dictionaryByMappingObjectsToKeysUsingBlock:", &__block_literal_global_30);
    uint64_t v10 = (void *)[v9 mutableCopy];

    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v25 = v6;
    id v11 = v6;
    uint64_t v12 = [v11 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v27 != v14) {
            objc_enumerationMutation(v11);
          }
          long long v16 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          long long v17 = [v16 domain];
          long long v18 = [v10 objectForKeyedSubscript:v17];
          long long v19 = v18;
          if (!v18 || ([v18 lastSeen], double v21 = v20, objc_msgSend(v16, "lastSeen"), v21 < v22)) {
            [v10 setObject:v16 forKeyedSubscript:v17];
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v13);
    }

    id v23 = [v10 allValues];
    [*(id *)(v24 + 32) setObject:v23 forKeyedSubscript:v5];

    id v6 = v25;
  }
  else
  {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
  }
}

uint64_t __WBSContentBlockerStatisticsStoreMergeStatistics_block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 domain];
}

void WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v29 = a1;
  id v7 = a2;
  id v8 = a3;
  id v26 = a4;
  uint64_t v9 = WBS_LOG_CHANNEL_PREFIXContentBlockers();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543618;
    id v50 = v29;
    __int16 v51 = 2114;
    id v52 = v7;
    _os_log_impl(&dword_1A6B5F000, v9, OS_LOG_TYPE_INFO, "Loading content blocker statistics from %{public}@ to %{public}@", buf, 0x16u);
  }
  uint64_t v10 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id obj = +[WBSContentBlockerStatisticsInMemoryStore allStores];
  uint64_t v11 = [obj countByEnumeratingWithState:&v43 objects:v48 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v44 != v13) {
          objc_enumerationMutation(obj);
        }
        long long v15 = *(void **)(*((void *)&v43 + 1) + 8 * i);
        v41[0] = MEMORY[0x1E4F143A8];
        v41[1] = 3221225472;
        v41[2] = __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke;
        v41[3] = &unk_1E5C8C5A8;
        id v42 = v10;
        [v15 blockedThirdPartiesAfter:v29 before:v7 onFirstParty:v8 completionHandler:v41];
      }
      uint64_t v12 = [obj countByEnumeratingWithState:&v43 objects:v48 count:16];
    }
    while (v12);
  }

  long long v16 = dispatch_group_create();
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id obja = +[WBSContentBlockerStatisticsSQLiteStore allStores];
  uint64_t v17 = [obja countByEnumeratingWithState:&v37 objects:v47 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v38;
    do
    {
      for (uint64_t j = 0; j != v18; ++j)
      {
        if (*(void *)v38 != v19) {
          objc_enumerationMutation(obja);
        }
        double v21 = *(void **)(*((void *)&v37 + 1) + 8 * j);
        double v22 = WBS_LOG_CHANNEL_PREFIXContentBlockers();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138543362;
          id v50 = v21;
          _os_log_impl(&dword_1A6B5F000, v22, OS_LOG_TYPE_INFO, "Loading content blocker statistics from %{public}@", buf, 0xCu);
        }
        dispatch_group_enter(v16);
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3221225472;
        v33[2] = __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke_5;
        v33[3] = &unk_1E5C9A1E0;
        uint64_t v34 = v16;
        id v35 = v10;
        uint64_t v36 = v21;
        [v21 blockedThirdPartiesAfter:v29 before:v7 onFirstParty:v8 completionHandler:v33];
      }
      uint64_t v18 = [obja countByEnumeratingWithState:&v37 objects:v47 count:16];
    }
    while (v18);
  }

  id v23 = fetchingQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke_7;
  block[3] = &unk_1E5C8DDF0;
  id v31 = v10;
  id v32 = v26;
  id v24 = v10;
  id v25 = v26;
  dispatch_group_notify(v16, v23, block);
}

void __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke(uint64_t a1, void *a2)
{
}

void __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke_5(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(a1 + 32);
  id v5 = fetchingQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke_2;
  block[3] = &unk_1E5C8CD20;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = *(void *)(a1 + 48);
  id v6 = v3;
  dispatch_group_async(v4, v5, block);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id fetchingQueue()
{
  if (fetchingQueue_onceToken != -1) {
    dispatch_once(&fetchingQueue_onceToken, &__block_literal_global_9_0);
  }
  uint64_t v0 = (void *)fetchingQueue_fetchingQueue;
  return v0;
}

void __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke_2(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  WBSContentBlockerStatisticsStoreMergeStatistics(*(void **)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v2 = WBS_LOG_CHANNEL_PREFIXContentBlockers();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    int v4 = 138543362;
    uint64_t v5 = v3;
    _os_log_impl(&dword_1A6B5F000, v2, OS_LOG_TYPE_INFO, "Finished loading content blocker statistics from %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke_7(uint64_t a1)
{
  uint64_t v2 = WBS_LOG_CHANNEL_PREFIXContentBlockers();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl(&dword_1A6B5F000, v2, OS_LOG_TYPE_INFO, "Finished loading content blocker statistics", v4, 2u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void WBSContentBlockerStatisticsStoreClearStoresForProfilesWithIdentifiers(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v20 objects:v27 count:16];
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = *(void *)v21;
    *(void *)&long long v3 = 138543362;
    long long v15 = v3;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        if (+[WBSContentBlockerStatisticsSQLiteStore storeExistsForProfileWithIdentifier:](WBSContentBlockerStatisticsSQLiteStore, "storeExistsForProfileWithIdentifier:", v7, v15))
        {
          id v8 = WBS_LOG_CHANNEL_PREFIXContentBlockers();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v15;
            uint64_t v26 = v7;
            _os_log_impl(&dword_1A6B5F000, v8, OS_LOG_TYPE_INFO, "Clearing store for profile %{public}@", buf, 0xCu);
          }
          id v9 = +[WBSContentBlockerStatisticsSQLiteStore storeForProfileWithIdentifier:v7];
          [v9 clearAllStatisticsWithCompletionHandler:0];
        }
      }
      uint64_t v4 = [v1 countByEnumeratingWithState:&v20 objects:v27 count:16];
    }
    while (v4);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v10 = +[WBSContentBlockerStatisticsInMemoryStore allStores];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v17;
    do
    {
      for (uint64_t j = 0; j != v12; ++j)
      {
        if (*(void *)v17 != v13) {
          objc_enumerationMutation(v10);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * j) clearAllStatisticsWithCompletionHandler:0];
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }
    while (v12);
  }
}

void __fetchingQueue_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.SafariShared.WBSContentBlockerStatisticsStore", v2);
  id v1 = (void *)fetchingQueue_fetchingQueue;
  fetchingQueue_fetchingQueue = (uint64_t)v0;
}

void sub_1A6BC3B18(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1A6BC4470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1A6BC51C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6BC5690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC5814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC5900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC5BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC5D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC5DD0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6BC5E80(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6BC6234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t isNilOrKindOfClass(objc_object *a1, objc_class *a2)
{
  uint64_t v2 = a1;
  if (v2) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 1;
  }

  return isKindOfClass & 1;
}

void sub_1A6BC6330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC63A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC64C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC68E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC6C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gregorianYearFromDate(NSDate *a1)
{
  uint64_t v1 = a1;
  if (v1)
  {
    id v2 = objc_alloc(MEMORY[0x1E4F1C9A8]);
    long long v3 = (void *)[v2 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
    uint64_t v4 = [v3 components:4 fromDate:v1];
    uint64_t v5 = [v4 year];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1A6BC6D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC6DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC6E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC6F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC7028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC70A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC7254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC7390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC7474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC76D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class ___ZL21getPKVirtualCardClassv_block_invoke(uint64_t a1)
{
  if (!PassKitCoreLibraryCore(char **)::frameworkLibrary) {
    PassKitCoreLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  Class result = objc_getClass("PKVirtualCard");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKVirtualCardClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL22PassKitCoreLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PassKitCoreLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void sub_1A6BC7C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1A6BC7E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC8164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC8368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC84E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC8774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC897C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC8A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC8AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC8B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC8CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  objc_destroyWeak(v20);
  objc_destroyWeak((id *)(v21 - 56));

  _Unwind_Resume(a1);
}

void sub_1A6BC8E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC8FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC9044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC9194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC92E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC944C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC9658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  uint64_t v28 = v27;

  _Unwind_Resume(a1);
}

void sub_1A6BC98B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC99E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  objc_destroyWeak(v14);
  objc_destroyWeak((id *)(v15 - 40));

  _Unwind_Resume(a1);
}

void sub_1A6BC9C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC9D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BC9F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCA104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  uint64_t v26 = v25;

  _Unwind_Resume(a1);
}

void sub_1A6BCA238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCA344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCA4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCA550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCA76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCA8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCAFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCB298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCB4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCB5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCB674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCB8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCB9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCBBB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCBC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCBCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1A6BCBDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A6BCBE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCC01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCC094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCC100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCC368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCC5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCC758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCC860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCC92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCC9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCCA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCCAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCCB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCCBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCCF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCD0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCD268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCD4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BCD59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class ___ZL28getPKVirtualCardManagerClassv_block_invoke(uint64_t a1)
{
  PassKitCoreLibraryCore((char **)a1);
  Class result = objc_getClass("PKVirtualCardManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKVirtualCardManagerClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void PassKitCoreLibraryCore(char **a1)
{
  if (!PassKitCoreLibraryCore(char **)::frameworkLibrary) {
    PassKitCoreLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
}

uint64_t ___ZL22PassKitCoreLibraryCorePPc_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  PassKitCoreLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

Class ___ZL39getPKSafariCardNotificationManagerClassv_block_invoke(uint64_t a1)
{
  PassKitCoreLibraryCore((char **)a1);
  Class result = objc_getClass("PKSafariCardNotificationManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPKSafariCardNotificationManagerClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void OUTLINED_FUNCTION_1_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1A6BCE208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A6BD8FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A6BD93CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6BD9D9C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

Class __getOSLogStoreClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!OSLogLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    void v3[3] = __OSLogLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5C9A8C0;
    uint64_t v5 = 0;
    OSLogLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!OSLogLibraryCore_frameworkLibrary) {
    __getOSLogStoreClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("OSLogStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getOSLogStoreClass_block_invoke_cold_2();
  }
  getOSLogStoreClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __OSLogLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  OSLogLibraryCore_frameworkLibrary = result;
  return result;
}

void OUTLINED_FUNCTION_1_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_7()
{
  return [v0 nextBackoffTimeInterval];
}

id WBSLocalizedDeviceName()
{
  if (WBSLocalizedDeviceName_onceToken != -1) {
    dispatch_once(&WBSLocalizedDeviceName_onceToken, &__block_literal_global_44);
  }
  dispatch_queue_t v0 = (void *)WBSLocalizedDeviceName_localizedDeviceName;
  return v0;
}

void __WBSLocalizedDeviceName_block_invoke()
{
  uint64_t v0 = MGGetStringAnswer();
  uint64_t v1 = (void *)WBSLocalizedDeviceName_localizedDeviceName;
  WBSLocalizedDeviceName_localizedDeviceName = v0;
}

uint64_t WBSRingerIsSilent()
{
  return 0;
}

id WBSSystemSymbolNameForCurrentDevice()
{
  if (WBSSystemSymbolNameForCurrentDevice_onceToken != -1) {
    dispatch_once(&WBSSystemSymbolNameForCurrentDevice_onceToken, &__block_literal_global_3_1);
  }
  uint64_t v0 = (void *)WBSSystemSymbolNameForCurrentDevice_result;
  return v0;
}

void __WBSSystemSymbolNameForCurrentDevice_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F442D8] _typeOfCurrentDevice];
  uint64_t v1 = [v0 identifier];

  id v11 = 0;
  id v2 = [MEMORY[0x1E4F6F260] symbolForTypeIdentifier:v1 withResolutionStrategy:0 variantOptions:1 error:&v11];
  id v3 = v11;
  if (v3)
  {
    long long v4 = WBS_LOG_CHANNEL_PREFIXOther();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      __WBSSystemSymbolNameForCurrentDevice_block_invoke_cold_1((uint64_t)v1, v4, v3);
    }
  }
  uint64_t v5 = [v2 name];
  uint64_t v6 = [(__CFString *)v5 length];
  uint64_t v7 = v5;
  if (!v6)
  {
    int v8 = [MEMORY[0x1E4F97EA0] isInternalInstall];
    uint64_t v7 = @"display";
    if (v8) {
      uint64_t v7 = @"pc";
    }
  }
  uint64_t v9 = v7;

  uint64_t v10 = (void *)WBSSystemSymbolNameForCurrentDevice_result;
  WBSSystemSymbolNameForCurrentDevice_uint64_t result = (uint64_t)v9;
}

void sub_1A6BDE840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BDE9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BDEAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<long long,long long>,void *> *>>(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  int v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[2];
      v8[2] = v9;
      v8[3] = a2[3];
      uint64_t v10 = (void *)*v8;
      v8[1] = v9;
      inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (void *)*a2;
      int v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v12 = (void *)*v8;
      operator delete(v8);
      int v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<std::pair<long long const,long long> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (void *)*a2;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            void *v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::__throw_bad_array_new_length[abi:sn180100]()
{
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<std::pair<long long const,long long> const&>(void *a1, _OWORD *a2)
{
  int8x8_t v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  unint64_t v5 = v4[2];
  void *v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1A6BDF11C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        id v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::pair<long long,long long>>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1A6BDF444(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

id convertSafariProfileIdentifierToScreenTimeProfileIdentifier(void *a1)
{
  id v1 = a1;
  if ([v1 length] && (objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E4F980C8]) & 1) == 0) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1A6BE0A30(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t handleNotification(uint64_t a1, void *a2)
{
  return [a2 _didReceiveNotification:0];
}

void sub_1A6BE2378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,id a30)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE2FA8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

double SafariShared::ExtensionURLTranslator::ExtensionURLTranslator(SafariShared::ExtensionURLTranslator *this)
{
  *(void *)this = 850045863;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *(void *)this = 850045863;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

uint64_t SafariShared::ExtensionURLTranslator::shared(SafariShared::ExtensionURLTranslator *this)
{
  return SafariShared::ExtensionURLTranslator::shared(void)::shared;
}

void SafariShared::ExtensionURLTranslator::addExtension(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  std::mutex::lock((std::mutex *)a1);
  if (!*(void *)(a1 + 64))
  {
    id v13 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    BOOL v14 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v13;
  }
  unint64_t v15 = [v9 host];
  unint64_t v16 = objc_msgSend(v9, "safari_path");
  v24[0] = v16;
  v24[1] = v10;
  size_t v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:2];
  [*(id *)(a1 + 64) setObject:v17 forKeyedSubscript:v15];

  if ([v11 length])
  {
    if (!*(void *)(a1 + 80))
    {
      uint64_t v18 = [MEMORY[0x1E4F1CA60] dictionary];
      unint64_t v19 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v18;
    }
    unint64_t v20 = (void *)[v11 copy];
    [*(id *)(a1 + 80) setObject:v20 forKeyedSubscript:v15];
  }
  if (v12)
  {
    BOOL v21 = *(void **)(a1 + 72);
    if (!v21)
    {
      uint64_t v22 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:1];
      long long v23 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v22;

      BOOL v21 = *(void **)(a1 + 72);
    }
    [v21 setObject:v12 forKeyedSubscript:v15];
  }

  std::mutex::unlock((std::mutex *)a1);
}

void sub_1A6BE344C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v4);

  _Unwind_Resume(a1);
}

void SafariShared::ExtensionURLTranslator::removeExtension(SafariShared::ExtensionURLTranslator *this, NSURL *a2)
{
  uint64_t v4 = a2;
  std::mutex::lock((std::mutex *)this);
  unint64_t v3 = [(NSURL *)v4 host];
  [*((id *)this + 8) removeObjectForKey:v3];
  [*((id *)this + 9) removeObjectForKey:v3];
  [*((id *)this + 10) removeObjectForKey:v3];

  std::mutex::unlock((std::mutex *)this);
}

void sub_1A6BE354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

id SafariShared::ExtensionURLTranslator::fileURLForExtensionURL(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  unint64_t v6 = [v5 host];
  if (v6)
  {
    std::mutex::lock((std::mutex *)a1);
    unint64_t v7 = [*(id *)(a1 + 64) objectForKeyedSubscript:v6];
    std::mutex::unlock((std::mutex *)a1);
    if (v7)
    {
      uint8x8_t v8 = [v7 objectAtIndexedSubscript:0];
      id v24 = v8;
      id v9 = [v7 objectAtIndexedSubscript:1];
      id v10 = objc_msgSend(v5, "safari_path");
      if ([v10 hasPrefix:v8])
      {
        uint64_t v11 = objc_msgSend(v10, "substringFromIndex:", objc_msgSend(v8, "length"));

        uint64_t v22 = (void *)v11;
        long long v23 = v9;
        id v12 = objc_msgSend(MEMORY[0x1E4F1CB10], "safari_URLWithDataAsString:relativeToURL:", v11, v9);
        BOOL v21 = [v12 URLByStandardizingPath];
        id v13 = objc_msgSend(v21, "safari_path");
        BOOL v14 = [v9 URLByStandardizingPath];
        unint64_t v15 = objc_msgSend(v14, "safari_path");
        char v16 = [v13 hasPrefix:v15];

        if (v16)
        {
          id v9 = v23;
          if (a3)
          {
            std::mutex::lock((std::mutex *)a1);
            size_t v17 = [*(id *)(a1 + 72) objectForKeyedSubscript:v6];
            uint64_t v18 = v17;
            if (v17)
            {
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 3221225472;
              block[2] = ___ZNK12SafariShared22ExtensionURLTranslator22fileURLForExtensionURLEP5NSURLNS0_23VerifyExtensionResourceE_block_invoke;
              block[3] = &unk_1E5C8D840;
              id v26 = v17;
              id v27 = v5;
              id v28 = v12;
              dispatch_async(MEMORY[0x1E4F14428], block);
            }
            std::mutex::unlock((std::mutex *)a1);
          }
          unint64_t v19 = 0;
        }
        else
        {
          unint64_t v19 = v12;
          id v12 = 0;
          id v9 = v23;
        }

        id v10 = v22;
      }
      else
      {
        id v12 = 0;
      }
    }
    else
    {
      id v12 = 0;
    }
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

void sub_1A6BE3808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  std::mutex::unlock(v17);

  _Unwind_Resume(a1);
}

void sub_1A6BE38C8()
{
}

id SafariShared::ExtensionURLTranslator::decodeAndResolveFileURL(SafariShared::ExtensionURLTranslator *this, NSURL *a2)
{
  id v2 = [(NSURL *)a2 URLByStandardizingPath];
  return v2;
}

uint64_t ___ZNK12SafariShared22ExtensionURLTranslator22fileURLForExtensionURLEP5NSURLNS0_23VerifyExtensionResourceE_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) verifyExtensionResourceAtExtensionURL:*(void *)(a1 + 40) fileURL:*(void *)(a1 + 48)];
}

id SafariShared::ExtensionURLTranslator::displayNameForExtensionURL(SafariShared::ExtensionURLTranslator *this, NSURL *a2)
{
  unint64_t v3 = [(NSURL *)a2 host];
  if (v3)
  {
    std::mutex::lock((std::mutex *)this);
    uint64_t v4 = [*((id *)this + 10) objectForKeyedSubscript:v3];
    std::mutex::unlock((std::mutex *)this);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1A6BE3990(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

uint64_t WBSFieldLabelPatternMatcherArrayGetCount(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t WBSFieldLabelPatternMatcherArrayGetPatternMatcherAtIndex(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) + 40 * a2;
}

void WBSFieldLabelPatternMatcherArrayFree(WTF **a1, void *a2)
{
  WTF::fastFree(a1[1], a2);
  WTF::fastFree(a1[2], v3);
  WTF::fastFree(a1[3], v4);
  JUMPOUT(0x1AD0C4750);
}

uint64_t WBSFieldLabelPatternMatcherSearchReverse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SafariShared::FieldLabelPatternMatcher::FieldLabelPatternMatcher(v8, a1, a2, a3);
  uint64_t v4 = SafariShared::FieldLabelPatternMatcher::searchReverse((SafariShared::FieldLabelPatternMatcher *)v8);
  id v5 = v9;
  if (&v11 != (uint64_t *)v9 && v9 != 0)
  {
    id v9 = 0;
    int v10 = 0;
    WTF::fastFree(v5, v3);
  }
  return v4;
}

uint64_t WBSFieldLabelPatternMatcherFindLongestMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SafariShared::FieldLabelPatternMatcher::FieldLabelPatternMatcher(v8, a1, a2, a3);
  uint64_t v4 = SafariShared::FieldLabelPatternMatcher::longestMatch((SafariShared::FieldLabelPatternMatcher *)v8);
  id v5 = v9;
  if (&v11 != (uint64_t *)v9 && v9 != 0)
  {
    id v9 = 0;
    int v10 = 0;
    WTF::fastFree(v5, v3);
  }
  return v4;
}

void sub_1A6BE3B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE3DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE4168(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32,int a33,WTF *a34,int a35,WTF *a36,int a37)
{
  if (a32) {
    WTF::fastFree(a32, a2);
  }
  if (a34) {
    WTF::fastFree(a34, a2);
  }
  if (a36) {
    WTF::fastFree(a36, a2);
  }

  _Unwind_Resume(a1);
}

uint64_t addInitializersForTrie(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if ([v5 count])
  {
    int v6 = *(_DWORD *)(a2 + 12);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unint64_t v7 = [v5 count];
    if (v7)
    {
      if (v7 >> 31)
      {
        __break(0xC471u);
        goto LABEL_35;
      }
      LODWORD(v37) = v7;
      uint64_t v36 = (WTF *)WTF::fastMalloc((WTF *)(2 * v7));
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint8x8_t v8 = [v5 allKeys];
    id v9 = [v8 sortedArrayUsingSelector:sel_compare_];

    uint64_t v10 = [v9 countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v33 != v11) {
            objc_enumerationMutation(v9);
          }
          __int16 v13 = [*(id *)(*((void *)&v32 + 1) + 8 * i) unsignedShortValue];
          LOWORD(v31) = v13;
          int v14 = HIDWORD(v37);
          if (HIDWORD(v37) == v37)
          {
            unint64_t v15 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v31);
            int v14 = HIDWORD(v37);
            *((_WORD *)v36 + HIDWORD(v37)) = *v15;
          }
          else
          {
            *((_WORD *)v36 + HIDWORD(v37)) = v13;
          }
          HIDWORD(v37) = v14 + 1;
        }
        uint64_t v10 = [v9 countByEnumeratingWithState:&v32 objects:v38 count:16];
      }
      while (v10);
    }

    int v17 = *(_DWORD *)(a3 + 12);
    LOWORD(v31) = WORD2(v37);
    HIWORD(v31) = v17;
    uint64_t v18 = *(unsigned int *)(a2 + 12);
    if (v18 == *(_DWORD *)(a2 + 8))
    {
      unint64_t v19 = (int *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v18 + 1, (unint64_t)&v31);
      uint64_t v18 = *(unsigned int *)(a2 + 12);
      uint64_t v20 = *(void *)a2;
      int v21 = *v19;
    }
    else
    {
      uint64_t v20 = *(void *)a2;
      int v21 = v31;
    }
    *(_DWORD *)(v20 + 4 * v18) = v21;
    ++*(_DWORD *)(a2 + 12);
    uint64_t v22 = v36;
    if (HIDWORD(v37))
    {
      unsigned int v23 = *(_DWORD *)(a3 + 12);
      uint64_t v24 = 2 * HIDWORD(v37);
      do
      {
        LOWORD(v30) = *(_WORD *)v22;
        if (v23 == *(_DWORD *)(a3 + 8)) {
          *(_DWORD *)(*(void *)a3 + 4 * *(unsigned int *)(a3 + 12)) = *(_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v23 + 1, (unint64_t)&v30);
        }
        else {
          *(_DWORD *)(*(void *)a3 + 4 * v23) = v30;
        }
        unsigned int v23 = *(_DWORD *)(a3 + 12) + 1;
        *(_DWORD *)(a3 + 12) = v23;
        uint64_t v22 = (WTF *)((char *)v22 + 2);
        v24 -= 2;
      }
      while (v24);
      uint64_t v22 = v36;
      if (HIDWORD(v37))
      {
        uint64_t v25 = 2 * HIDWORD(v37);
        while (1)
        {
          id v26 = [NSNumber numberWithUnsignedShort:*(unsigned __int16 *)v22];
          id v27 = [v5 objectForKey:v26];

          __int16 v28 = addInitializersForTrie(v27, a2, a3);
          if (*(_DWORD *)(a3 + 12) <= (unsigned __int16)v17) {
            break;
          }
          *(_WORD *)(*(void *)a3 + 4 * (unsigned __int16)v17 + 2) = v28;

          LOWORD(v17) = v17 + 1;
          uint64_t v22 = (WTF *)((char *)v22 + 2);
          v25 -= 2;
          if (!v25)
          {
            uint64_t v22 = v36;
            goto LABEL_30;
          }
        }
        __break(0xC471u);
LABEL_35:
        JUMPOUT(0x1A6BE4524);
      }
    }
LABEL_30:
    if (v22)
    {
      uint64_t v36 = 0;
      LODWORD(v37) = 0;
      WTF::fastFree(v22, v16);
    }
  }
  else
  {
    LOWORD(v6) = -1;
  }

  return (unsigned __int16)v6;
}

void sub_1A6BE4530(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20)
{
  if (a19) {
    WTF::fastFree(a19, a2);
  }

  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 2 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 31))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(2 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    memcpy(v6, v4, 2 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 30))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    memcpy(v6, v4, 4 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x6666667)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(void **)result;
    uint64_t v4 = *(unsigned int *)(result + 12);
    int v5 = 40 * a2;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    memcpy(v6, v3, 40 * v4);
    if (v3)
    {
      if (*(void **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v2 = result;
    if (result[3] > a2) {
      result[3] = a2;
    }
    double result = *(unsigned int **)result;
    if (a2)
    {
      if (a2 >> 62)
      {
        __break(0xC471u);
      }
      else
      {
        void v2[2] = a2;
        double result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(4 * a2));
        *(void *)uint64_t v2 = result;
      }
    }
    else if (result)
    {
      *(void *)uint64_t v2 = 0;
      void v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

unsigned int *WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v2 = result;
    if (result[3] > a2) {
      result[3] = a2;
    }
    double result = *(unsigned int **)result;
    if (a2)
    {
      if (a2 >= 0x666666666666667)
      {
        __break(0xC471u);
      }
      else
      {
        void v2[2] = a2;
        double result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(40 * a2));
        *(void *)uint64_t v2 = result;
      }
    }
    else if (result)
    {
      *(void *)uint64_t v2 = 0;
      void v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

void OUTLINED_FUNCTION_1_9(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1A6BE5C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE5D70(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6BE5E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE5EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE600C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE60E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE6274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE6348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE681C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE694C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE6A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE6DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1A6BE6E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE6EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE7238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE7548(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v6, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6BE7714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE7834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE7AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE7C54(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6BE8080(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6BE84B0(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6BE8758(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v5, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6BE8918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE8A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE8BBC(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v8, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6BE8DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE8F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE9168(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v5, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6BE9328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE943C(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v2, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6BE967C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE978C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE9894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE9974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE9AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE9D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BE9F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEA0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEA2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEA6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEA7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEA820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SafariShared::SuddenTerminationDisabler::~SuddenTerminationDisabler((id *)va);
  _Unwind_Resume(a1);
}

void sub_1A6BEA9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEAC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEAD30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEAF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEB1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEB2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEB518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEB66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEB71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1A6BEB9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEBD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEC0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEC1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEC5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6BECADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  unint64_t v15 = v12;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<long long &,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  unint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&>(v9, a3, a4);
  uint64_t v10 = [v9 fetch];

  return v10;
}

void sub_1A6BECC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BECF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<long long &>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v5 query:v6];
  [v7 bindInt64:*a3 atParameterIndex:1];
  id v8 = [v7 fetch];

  return v8;
}

void sub_1A6BED08C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BED254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEMORY[0x1AD0C4750](v16, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6BED484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1A6BED598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  __int16 v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6BED738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindString:*a3 atParameterIndex:2];
}

void sub_1A6BED7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  __int16 v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6BED8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:1];
  [v5 bindString:*a3 atParameterIndex:2];
}

void sub_1A6BED978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,long long &,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a3;
  id v19 = 0;
  __int16 v13 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v11 query:v12 error:&v19];
  id v14 = v19;
  unint64_t v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long &,NSString * {__strong}&>(v13, a4, a5, a6);
    uint64_t v16 = [v13 execute];
    [v13 invalidate];
    if ((v16 - 100) >= 2 && v16 != 0) {
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v14;
    }
    uint64_t v16 = [v15 code];
  }

  return v16;
}

void sub_1A6BEDAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long &,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long &,NSString * {__strong}&>(v7, a3, a4);
}

void sub_1A6BEDB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long &,NSString * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:2];
  [v5 bindString:*a3 atParameterIndex:3];
}

void sub_1A6BEDBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,NSString * {__strong}&,NSString * {__strong}&,double &>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, double *a7)
{
  id v13 = a1;
  id v14 = a3;
  id v21 = 0;
  unint64_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v13 query:v14 error:&v21];
  id v16 = v21;
  id v17 = v16;
  if (v15)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&,NSString * {__strong}&,double &>(v15, a4, a5, a6, a7);
    uint64_t v18 = [v15 execute];
    [v15 invalidate];
    if ((v18 - 100) >= 2 && v18 != 0) {
      objc_msgSend(v13, "reportErrorWithCode:statement:error:", v18, objc_msgSend(v15, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v16;
    }
    uint64_t v18 = [v17 code];
  }

  return v18;
}

void sub_1A6BEDCF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&,NSString * {__strong}&,double &>(void *a1, void *a2, void *a3, void *a4, double *a5)
{
  id v9 = a1;
  [v9 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,double &>(v9, a3, a4, a5);
}

void sub_1A6BEDD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,double &>(void *a1, void *a2, void *a3, double *a4)
{
  id v7 = a1;
  [v7 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,double &>(v7, a3, a4);
}

void sub_1A6BEDE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,double &>(void *a1, void *a2, double *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:3];
  [v5 bindDouble:4 atParameterIndex:*a3];
}

void sub_1A6BEDE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a3;
  id v19 = 0;
  id v13 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v11 query:v12 error:&v19];
  id v14 = v19;
  unint64_t v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&,NSString * {__strong}&>(v13, a4, a5, a6);
    uint64_t v16 = [v13 execute];
    [v13 invalidate];
    if ((v16 - 100) >= 2 && v16 != 0) {
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v14;
    }
    uint64_t v16 = [v15 code];
  }

  return v16;
}

void sub_1A6BEDFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&>(v7, a3, a4);
}

void sub_1A6BEE05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:2];
  [v5 bindString:*a3 atParameterIndex:3];
}

void sub_1A6BEE0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,double>(void *a1, void *a2, void *a3, void *a4, double *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6BEE1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double>(void *a1, void *a2, double *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:1];
  [v5 bindDouble:2 atParameterIndex:*a3];
}

void sub_1A6BEE288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v15 = 0;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:&v15];
  id v10 = v15;
  id v11 = v10;
  if (v9)
  {
    [v9 bindInt64:*a4 atParameterIndex:1];
    uint64_t v12 = [v9 execute];
    [v9 invalidate];
    if ((v12 - 100) >= 2 && v12 != 0) {
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v10;
    }
    uint64_t v12 = [v11 code];
  }

  return v12;
}

void sub_1A6BEE3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_10(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x12u);
}

void OUTLINED_FUNCTION_8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1A6BEE4CC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6BEE5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEEA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,id location)
{
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a48, 8);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A6BEED20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEEDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEEF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEF038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BEF7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1A6BEFE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

void sub_1A6BF04F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF05BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF0700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF08A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF093C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF0AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF0D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF0EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sanitizedMetadata(void *a1)
{
  id v9 = (void *)MEMORY[0x1E4F1CAD0];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(v9, "setWithObjects:", @"ControlUniqueID", @"ControlRectHeight", @"ControlRectLeft", @"ControlRectTop", @"ControlRectWidth", @"ContainsActiveElement", @"ControlIsActiveElement", @"ControlIsAutoFilledTextField", @"FormAction", @"ControlNextFieldUniqueID", @"ControlAutoFillButtonType", @"ControlLastAutoFillButtonType", 0);
  uint64_t v3 = [MEMORY[0x1E4F1CA60] dictionary];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __sanitizedMetadata_block_invoke;
  v10[3] = &unk_1E5C9B418;
  id v11 = v2;
  id v4 = v3;
  id v12 = v4;
  id v5 = v2;
  [v1 enumerateKeysAndObjectsUsingBlock:v10];

  id v6 = v12;
  id v7 = v4;

  return v7;
}

id __sanitizedFormMetadata_block_invoke(uint64_t a1, void *a2)
{
  return sanitizedMetadata(a2);
}

void __sanitizedFormMetadata_block_invoke_2(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] objectForKeyedSubscript:v5];
  if (v7)
  {
    id v8 = a1[5];
    id v9 = a1[6];
    id v10 = v6;
    uint64_t v23 = 0;
    uint64_t v24 = &v23;
    uint64_t v25 = 0x3032000000;
    id v26 = __Block_byref_object_copy__12;
    id v27 = __Block_byref_object_dispose__12;
    id v28 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x2020000000;
    uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __controlDescription_block_invoke;
    v15[3] = &unk_1E5C9B440;
    id v11 = v10;
    id v16 = v11;
    id v17 = &v23;
    uint64_t v18 = &v19;
    [v9 enumerateObjectsUsingBlock:v15];
    id v12 = NSString;
    id v13 = objc_msgSend((id)v24[5], "safari_stringForKey:", @"ControlFieldName");
    uint64_t v14 = [v12 stringWithFormat:@"<ControlFieldName '%@', control index %lu>", v13, v20[3]];

    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v23, 8);

    [v8 setObject:v14 forKey:v7];
    [a1[5] removeObjectForKey:v5];
  }
}

void sub_1A6BF16C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __sanitizedMetadata_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (([*(id *)(a1 + 32) containsObject:v9] & 1) == 0)
  {
    id v6 = [MEMORY[0x1E4F1CA98] null];

    if (v6 != v5)
    {
      if ([v9 isEqualToString:@"AutoFillFormType"])
      {
        [(__CFString *)v5 doubleValue];
        if ((unint64_t)v7 >= 6)
        {
          objc_msgSend(NSString, "stringWithFormat:", @"<Invalid WBSAutoFillFormType %d>", (unint64_t)v7);
          id v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v8 = off_1E5C9B460[(unint64_t)v7];
        }

        id v5 = v8;
      }
      [*(id *)(a1 + 40) setObject:v5 forKey:v9];
    }
  }
}

void __controlDescription_block_invoke(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v10 = a2;
  id v8 = objc_msgSend(v10, "safari_stringForKey:", @"ControlUniqueID");
  int v9 = [v8 isEqualToString:a1[4]];

  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
    *(void *)(*(void *)(a1[6] + 8) + 24) = a3;
    *a4 = 1;
  }
}

void __setUpEncodingClasses_block_invoke()
{
  nsArrayClass = objc_opt_class();
  nsNumberClass = objc_opt_class();
  nsStringClass = objc_opt_class();
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", nsStringClass, objc_opt_class(), 0);
  id v1 = (void *)nsStringClassSet;
  nsStringClassSet = v0;

  uint64_t v2 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_msgSend(v2, "setWithObjects:", v3, v4, v5, objc_opt_class(), 0);
  double v7 = (void *)stringDictionaryClasses;
  stringDictionaryClasses = v6;

  id v8 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_msgSend(v8, "setWithObjects:", v9, v10, v11, objc_opt_class(), 0);
  id v13 = (void *)stringArrayClasses;
  stringArrayClasses = v12;

  uint64_t v14 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v15 = objc_opt_class();
  uint64_t v16 = objc_opt_class();
  uint64_t v17 = objc_opt_class();
  uint64_t v18 = objc_opt_class();
  uint64_t v19 = objc_opt_class();
  uint64_t v20 = objc_msgSend(v14, "setWithObjects:", v15, v16, v17, v18, v19, objc_opt_class(), 0);
  uint64_t v21 = (void *)stringArrayDictionaryClasses;
  stringArrayDictionaryClasses = v20;

  uint64_t v22 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v23 = objc_opt_class();
  uint64_t v24 = objc_opt_class();
  uint64_t v25 = objc_opt_class();
  uint64_t v26 = objc_opt_class();
  uint64_t v27 = objc_msgSend(v22, "setWithObjects:", v23, v24, v25, v26, objc_opt_class(), 0);
  id v28 = (void *)selectElementInfoClasses;
  selectElementInfoClasses = v27;

  id v29 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v30 = objc_opt_class();
  uint64_t v31 = objc_opt_class();
  uint64_t v32 = objc_opt_class();
  uint64_t v33 = objc_opt_class();
  uint64_t v34 = objc_msgSend(v29, "setWithObjects:", v30, v31, v32, v33, objc_opt_class(), 0);
  long long v35 = (void *)urlArrayDictionaryClasses;
  urlArrayDictionaryClasses = v34;
}

void __getPropertyMap_block_invoke()
{
  nsArrayClass = objc_opt_class();
  nsDictionaryClass = objc_opt_class();
  nsNumberClass = objc_opt_class();
  nsStringClass = objc_opt_class();
  nsURLClass = objc_opt_class();
  uint64_t v0 = (objc_class *)objc_opt_class();
  id v51 = [MEMORY[0x1E4F1CA60] dictionary];
  id v1 = objc_alloc_init(WBSFormControlMetadataProperty);
  v1->type = 0;
  *(_DWORD *)&v1->flagMask.flags |= 1u;
  [v51 setObject:v1 forKeyedSubscript:@"DisallowsAutocomplete"];

  uint64_t v2 = objc_alloc_init(WBSFormControlMetadataProperty);
  v2->type = 0;
  *(_DWORD *)&v2->flagMask.flags |= 2u;
  [v51 setObject:v2 forKeyedSubscript:@"ControlClaimsToBeCurrentPasswordViaAutocompleteAttribute"];

  uint64_t v3 = objc_alloc_init(WBSFormControlMetadataProperty);
  v3->type = 0;
  *(_DWORD *)&v3->flagMask.flags |= 4u;
  [v51 setObject:v3 forKeyedSubscript:@"ControlClaimsToBeNewPasswordViaAutocompleteAttribute"];

  uint64_t v4 = objc_alloc_init(WBSFormControlMetadataProperty);
  v4->type = 0;
  *(_DWORD *)&v4->flagMask.flags |= 8u;
  [v51 setObject:v4 forKeyedSubscript:@"ControlClaimsToBeUsernameViaAutocompleteAttribute"];

  uint64_t v5 = objc_alloc_init(WBSFormControlMetadataProperty);
  v5->type = 0;
  *(_DWORD *)&v5->flagMask.flags |= 0x10u;
  [v51 setObject:v5 forKeyedSubscript:@"ControlLooksLikeCreditCardCardholderField"];

  uint64_t v6 = objc_alloc_init(WBSFormControlMetadataProperty);
  v6->type = 0;
  *(_DWORD *)&v6->flagMask.flags |= 0x20u;
  [v51 setObject:v6 forKeyedSubscript:@"ControlLooksLikeCreditCardCompositeExpirationDateField"];

  double v7 = objc_alloc_init(WBSFormControlMetadataProperty);
  v7->type = 0;
  *(_DWORD *)&v7->flagMask.flags |= 0x40u;
  [v51 setObject:v7 forKeyedSubscript:@"ControlLooksLikeCreditCardNumberField"];

  id v8 = objc_alloc_init(WBSFormControlMetadataProperty);
  v8->type = 0;
  *(_DWORD *)&v8->flagMask.flags |= 0x80u;
  [v51 setObject:v8 forKeyedSubscript:@"ControlLooksLikeCreditCardSecurityCodeField"];

  uint64_t v9 = objc_alloc_init(WBSFormControlMetadataProperty);
  v9->type = 0;
  *(_DWORD *)&v9->flagMask.flags |= 0x100u;
  [v51 setObject:v9 forKeyedSubscript:@"ControlLooksLikeCreditCardTypeField"];

  uint64_t v10 = objc_alloc_init(WBSFormControlMetadataProperty);
  v10->type = 0;
  *(_DWORD *)&v10->flagMask.flags |= 0x200u;
  [v51 setObject:v10 forKeyedSubscript:@"ControlLooksLikeEIDField"];

  uint64_t v11 = objc_alloc_init(WBSFormControlMetadataProperty);
  v11->type = 0;
  *(_DWORD *)&v11->flagMask.flags |= 0x400u;
  [v51 setObject:v11 forKeyedSubscript:@"ControlLooksLikeIMEIField"];

  uint64_t v12 = objc_alloc_init(WBSFormControlMetadataProperty);
  v12->type = 0;
  *(_DWORD *)&v12->flagMask.flags |= 0x800u;
  [v51 setObject:v12 forKeyedSubscript:@"ControlLooksLikeDayField"];

  id v13 = objc_alloc_init(WBSFormControlMetadataProperty);
  v13->type = 0;
  *(_DWORD *)&v13->flagMask.flags |= 0x1000u;
  [v51 setObject:v13 forKeyedSubscript:@"ControlLooksLikeMonthField"];

  uint64_t v14 = objc_alloc_init(WBSFormControlMetadataProperty);
  v14->type = 0;
  *(_DWORD *)&v14->flagMask.flags |= 0x2000u;
  [v51 setObject:v14 forKeyedSubscript:@"ControlLooksLikeYearField"];

  uint64_t v15 = objc_alloc_init(WBSFormControlMetadataProperty);
  v15->type = 0;
  *(_DWORD *)&v15->flagMask.flags |= 0x4000u;
  [v51 setObject:v15 forKeyedSubscript:@"ControlLooksLikeIgnoredDataTypeField"];

  uint64_t v16 = objc_alloc_init(WBSFormControlMetadataProperty);
  v16->type = 0;
  *(_DWORD *)&v16->flagMask.flags |= 0x8000u;
  [v51 setObject:v16 forKeyedSubscript:@"ControlLooksLikePasswordCredentialField"];

  uint64_t v17 = objc_alloc_init(WBSFormControlMetadataProperty);
  v17->type = 0;
  *(_DWORD *)&v17->flagMask.flags |= 0x10000u;
  [v51 setObject:v17 forKeyedSubscript:@"ControlLooksLikeOneTimeCodeField"];

  uint64_t v18 = objc_alloc_init(WBSFormControlMetadataProperty);
  v18->type = 0;
  *(_DWORD *)&v18->flagMask.flags |= 0x20000u;
  [v51 setObject:v18 forKeyedSubscript:@"OneTimeCodeIsEligibleForAutomaticLogin"];

  uint64_t v19 = objc_alloc_init(WBSFormControlMetadataProperty);
  v19->type = 0;
  *(_DWORD *)&v19->flagMask.flags |= 0x40000u;
  [v51 setObject:v19 forKeyedSubscript:@"IsVisible"];

  uint64_t v20 = objc_alloc_init(WBSFormControlMetadataProperty);
  v20->type = 0;
  *(_DWORD *)&v20->flagMask.flags |= 0x80000u;
  [v51 setObject:v20 forKeyedSubscript:@"ControlIsActiveElement"];

  uint64_t v21 = objc_alloc_init(WBSFormControlMetadataProperty);
  v21->type = 0;
  *(_DWORD *)&v21->flagMask.flags |= 0x100000u;
  [v51 setObject:v21 forKeyedSubscript:@"ControlIsDisabled"];

  uint64_t v22 = objc_alloc_init(WBSFormControlMetadataProperty);
  v22->type = 0;
  *(_DWORD *)&v22->flagMask.flags |= 0x200000u;
  [v51 setObject:v22 forKeyedSubscript:@"ControlIsReadOnly"];

  uint64_t v23 = objc_alloc_init(WBSFormControlMetadataProperty);
  v23->type = 0;
  *(_DWORD *)&v23->flagMask.flags |= 0x400000u;
  [v51 setObject:v23 forKeyedSubscript:@"ControlIsTextField"];

  uint64_t v24 = objc_alloc_init(WBSFormControlMetadataProperty);
  v24->type = 0;
  *(_DWORD *)&v24->flagMask.flags |= 0x800000u;
  [v51 setObject:v24 forKeyedSubscript:@"ControlIsSecureTextField"];

  uint64_t v25 = objc_alloc_init(WBSFormControlMetadataProperty);
  v25->type = 0;
  *(_DWORD *)&v25->flagMask.flags |= 0x1000000u;
  [v51 setObject:v25 forKeyedSubscript:@"ControlIsAutoFilledTextField"];

  uint64_t v26 = objc_alloc_init(WBSFormControlMetadataProperty);
  v26->type = 0;
  *(_DWORD *)&v26->flagMask.flags |= 0x2000000u;
  [v51 setObject:v26 forKeyedSubscript:@"ControlIsUserEditedTextField"];

  uint64_t v27 = objc_alloc_init(WBSFormControlMetadataProperty);
  v27->type = 0;
  *(_DWORD *)&v27->flagMask.flags |= 0x4000000u;
  [v51 setObject:v27 forKeyedSubscript:@"ControlIsLabeledUsernameField"];

  id v28 = objc_alloc_init(WBSFormControlMetadataProperty);
  v28->type = 0;
  *(_DWORD *)&v28->flagMask.flags |= 0x8000000u;
  [v51 setObject:v28 forKeyedSubscript:@"ControlIsVerticalWritingMode"];

  id v29 = objc_alloc_init(WBSFormControlMetadataProperty);
  v29->type = 1;
  v29->ivar = class_getInstanceVariable(v0, "_addressBookLabel");
  [v51 setObject:v29 forKeyedSubscript:@"AddressBookLabel"];

  uint64_t v30 = objc_alloc_init(WBSFormControlMetadataProperty);
  v30->type = 1;
  v30->ivar = class_getInstanceVariable(v0, "_associatedUsername");
  [v51 setObject:v30 forKeyedSubscript:@"ControlAssociatedUsername"];

  uint64_t v31 = objc_alloc_init(WBSFormControlMetadataProperty);
  v31->type = 1;
  v31->ivar = class_getInstanceVariable(v0, "_fieldClass");
  [v51 setObject:v31 forKeyedSubscript:@"ControlFieldClass"];

  uint64_t v32 = objc_alloc_init(WBSFormControlMetadataProperty);
  v32->type = 1;
  v32->ivar = class_getInstanceVariable(v0, "_fieldID");
  [v51 setObject:v32 forKeyedSubscript:@"ControlFieldID"];

  uint64_t v33 = objc_alloc_init(WBSFormControlMetadataProperty);
  v33->type = 1;
  v33->ivar = class_getInstanceVariable(v0, "_fieldName");
  [v51 setObject:v33 forKeyedSubscript:@"ControlFieldName"];

  uint64_t v34 = objc_alloc_init(WBSFormControlMetadataProperty);
  v34->type = 1;
  v34->ivar = class_getInstanceVariable(v0, "_tagName");
  [v51 setObject:v34 forKeyedSubscript:@"ControlTagName"];

  long long v35 = objc_alloc_init(WBSFormControlMetadataProperty);
  v35->type = 1;
  v35->ivar = class_getInstanceVariable(v0, "_uniqueID");
  [v51 setObject:v35 forKeyedSubscript:@"ControlUniqueID"];

  uint64_t v36 = objc_alloc_init(WBSFormControlMetadataProperty);
  v36->type = 1;
  v36->ivar = class_getInstanceVariable(v0, "_nextControlUniqueID");
  [v51 setObject:v36 forKeyedSubscript:@"ControlNextFieldUniqueID"];

  uint64_t v37 = objc_alloc_init(WBSFormControlMetadataProperty);
  v37->type = 1;
  v37->ivar = class_getInstanceVariable(v0, "_placeholder");
  [v51 setObject:v37 forKeyedSubscript:@"ControlPlaceholder"];

  long long v38 = objc_alloc_init(WBSFormControlMetadataProperty);
  v38->type = 1;
  v38->ivar = class_getInstanceVariable(v0, "_value");
  [v51 setObject:v38 forKeyedSubscript:@"ControlValue"];

  uint64_t v39 = objc_alloc_init(WBSFormControlMetadataProperty);
  v39->type = 1;
  v39->ivar = class_getInstanceVariable(v0, "_passwordRules");
  [v51 setObject:v39 forKeyedSubscript:@"ControlPasswordRules"];

  long long v40 = objc_alloc_init(WBSFormControlMetadataProperty);
  v40->type = 1;
  v40->ivar = class_getInstanceVariable(v0, "_requiredFormatForDateTimeInput");
  [v51 setObject:v40 forKeyedSubscript:@"ControlRequiredFormatForDateTimeInput"];

  unsigned int v41 = objc_alloc_init(WBSFormControlMetadataProperty);
  v41->type = 1;
  v41->ivar = class_getInstanceVariable(v0, "_classification");
  [v51 setObject:v41 forKeyedSubscript:@"ControlClassification"];

  id v42 = objc_alloc_init(WBSFormControlMetadataProperty);
  v42->type = 2;
  v42->ivar = class_getInstanceVariable(v0, "_annotations");
  v42->processObject = processAnnotations;
  [v51 setObject:v42 forKeyedSubscript:@"Annotations"];

  long long v43 = objc_alloc_init(WBSFormControlMetadataProperty);
  v43->type = 2;
  v43->ivar = class_getInstanceVariable(v0, "_autocompleteTokens");
  v43->processObject = processArrayOfStrings;
  [v51 setObject:v43 forKeyedSubscript:@"AutocompleteTokens"];

  long long v44 = objc_alloc_init(WBSFormControlMetadataProperty);
  v44->type = 2;
  v44->ivar = class_getInstanceVariable(v0, "_radioButtonInfo");
  v44->processObject = processRadioButtonInfo;
  [v51 setObject:v44 forKeyedSubscript:@"RadioButtonInfo"];

  long long v45 = objc_alloc_init(WBSFormControlMetadataProperty);
  v45->type = 2;
  v45->ivar = class_getInstanceVariable(v0, "_selectElementInfo");
  v45->processObject = processSelectElementInfo;
  [v51 setObject:v45 forKeyedSubscript:@"SelectElementInfo"];

  long long v46 = objc_alloc_init(WBSFormControlMetadataProperty);
  v46->type = 2;
  v46->ivar = class_getInstanceVariable(v0, "_ancestorFrameURLs");
  v46->processObject = processArrayOfURLs;
  [v51 setObject:v46 forKeyedSubscript:@"AncestorFrameURLs"];

  uint64_t v47 = objc_alloc_init(WBSFormControlMetadataProperty);
  v47->type = 2;
  v47->ivar = class_getInstanceVariable(v0, "_orderedParts");
  v47->processObject = processArrayOfStrings;
  [v51 setObject:v47 forKeyedSubscript:@"ControlOrderedParts"];

  v48 = objc_alloc_init(WBSFormControlMetadataProperty);
  v48->type = 2;
  v48->ivar = class_getInstanceVariable(v0, "_classificationHints");
  v48->processObject = processArrayOfStrings;
  [v51 setObject:v48 forKeyedSubscript:@"ControlClassificationHints"];

  uint64_t v49 = [v51 copy];
  id v50 = (void *)getPropertyMap_map;
  getPropertyMap_map = v49;
}

id processAnnotations(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = objc_msgSend(v1, "safari_mapAndFilterKeysAndObjectsUsingBlock:", &__block_literal_global_489);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id processArrayOfStrings(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = objc_msgSend(v1, "safari_filterObjectsUsingBlock:", &__block_literal_global_492);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id processRadioButtonInfo(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = objc_msgSend(v1, "safari_mapAndFilterKeysAndObjectsUsingBlock:", &__block_literal_global_494);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id processSelectElementInfo(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = objc_msgSend(v1, "safari_filterObjectsUsingBlock:", &__block_literal_global_496);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id processArrayOfURLs(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = objc_msgSend(v1, "safari_filterObjectsUsingBlock:", &__block_literal_global_498);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id __processAnnotations_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }

  return v4;
}

uint64_t __processArrayOfStrings_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

id __processRadioButtonInfo_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (objc_opt_isKindOfClass())
  {
    id v4 = processArrayOfStrings(v3);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

uint64_t __processSelectElementInfo_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_opt_isKindOfClass())
  {
    id v3 = v2;
    if ([v3 count] == 2)
    {
      id v4 = [v3 objectAtIndexedSubscript:0];
      if (objc_opt_isKindOfClass())
      {
        uint64_t v5 = 1;
        uint64_t v6 = [v3 objectAtIndexedSubscript:1];
        char isKindOfClass = objc_opt_isKindOfClass();

        if (isKindOfClass) {
          goto LABEL_9;
        }
      }
      else
      {
      }
    }
    uint64_t v5 = 0;
LABEL_9:

    goto LABEL_10;
  }
  uint64_t v5 = 0;
LABEL_10:

  return v5;
}

uint64_t __processArrayOfURLs_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

void sub_1A6BF5B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF5C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF5E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF5F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF6010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF6088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF61C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF62E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF6590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF66A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF6708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF67B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)WBSFormDataController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A6BF6B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF70B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a40, v41);
  _Unwind_Resume(a1);
}

uint64_t timestampForCompletionValues(NSArray *a1)
{
  id v1 = [(NSArray *)a1 lastObject];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v2 = [v1 intValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1A6BF71BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF7430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF7ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF7FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF81B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF8368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF8478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF87CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF8A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF8B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF8C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF8E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF9584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF9980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t languageOfTextIsChinese(NSString *a1)
{
  id v1 = a1;
  if ([(__CFString *)v1 length])
  {
    uint64_t v2 = [(__CFString *)v1 safari_bestLanguageTag];
    if (![v2 length])
    {
      v6.length = [(__CFString *)v1 length];
      v6.location = 0;
      CFStringRef v3 = CFStringTokenizerCopyBestStringLanguage(v1, v6);

      uint64_t v2 = (void *)v3;
    }
    if ([v2 isEqualToString:@"zh-Hant"]) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = [v2 isEqualToString:@"zh-Hans"];
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1A6BF9A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BF9BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL identifyDateFields(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v7 = a1;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v16;
LABEL_3:
    uint64_t v10 = 0;
    while (1)
    {
      if (*(void *)v16 != v9) {
        objc_enumerationMutation(v7);
      }
      uint64_t v11 = *(void **)(*((void *)&v15 + 1) + 8 * v10);
      if (objc_msgSend(v11, "looksLikeDayField", (void)v15)) {
        break;
      }
      if ([v11 looksLikeMonthField])
      {
        uint64_t v12 = a3;
        if (*a3) {
          goto LABEL_20;
        }
        goto LABEL_14;
      }
      if ([v11 looksLikeYearField])
      {
        uint64_t v12 = a4;
        if (*a4)
        {
LABEL_20:

          BOOL v13 = 0;
          goto LABEL_21;
        }
        goto LABEL_14;
      }
LABEL_15:
      if (v8 == ++v10)
      {
        uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v8) {
          goto LABEL_3;
        }
        goto LABEL_17;
      }
    }
    uint64_t v12 = a2;
    if (*a2) {
      goto LABEL_20;
    }
LABEL_14:
    *uint64_t v12 = v11;
    goto LABEL_15;
  }
LABEL_17:

  BOOL v13 = *a2 || *a3 || *a4 != 0;
LABEL_21:

  return v13;
}

void sub_1A6BF9DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t stringContainsDateComponentValue(void *a1, int a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = [v5 integerValue];
  if (v7 == dateComponentValue(a2, v6))
  {
    uint64_t v8 = 1;
  }
  else
  {
    unint64_t v9 = 0x1E4F1C000uLL;
    uint64_t v10 = objc_msgSend(MEMORY[0x1E4F1CA20], "safari_localeIdentifiersForMostWidelyUsedLanguages");
    uint64_t v11 = [MEMORY[0x1E4F1CA20] currentLocale];
    uint64_t v12 = [v11 localeIdentifier];
    BOOL v13 = [v10 setByAddingObject:v12];

    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v14 = v13;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v31 objects:v36 count:16];
    if (v15)
    {
      uint64_t v26 = *(void *)v32;
      do
      {
        uint64_t v25 = v15;
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v32 != v26) {
            objc_enumerationMutation(v14);
          }
          long long v17 = objc_msgSend(*(id *)(v9 + 2592), "localeWithLocaleIdentifier:", *(void *)(*((void *)&v31 + 1) + 8 * i), v25);
          long long v18 = dateComponentSynonyms(a2, v6);

          unint64_t v19 = v9;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          id v20 = v18;
          uint64_t v21 = [v20 countByEnumeratingWithState:&v27 objects:v35 count:16];
          if (v21)
          {
            uint64_t v22 = *(void *)v28;
            while (2)
            {
              uint64_t v23 = 0;
              do
              {
                if (*(void *)v28 != v22) {
                  objc_enumerationMutation(v20);
                }
                if (![*(id *)(*((void *)&v27 + 1) + 8 * v23) caseInsensitiveCompare:v5])
                {

                  uint64_t v8 = 1;
                  goto LABEL_21;
                }
                ++v23;
              }
              while (v21 != v23);
              uint64_t v21 = [v20 countByEnumeratingWithState:&v27 objects:v35 count:16];
              if (v21) {
                continue;
              }
              break;
            }
          }

          unint64_t v9 = v19;
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v31 objects:v36 count:16];
        uint64_t v8 = 0;
      }
      while (v15);
    }
    else
    {
      uint64_t v8 = 0;
    }
LABEL_21:
  }
  return v8;
}

void sub_1A6BFA09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFA278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFA7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFAA40(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6BFAC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFAD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFAF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFB090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFB160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFB254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFB5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  long long v27 = v26;

  _Unwind_Resume(a1);
}

void sub_1A6BFB868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFBA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFBBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFBCB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFC3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFC5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFC7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFCB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFCD14(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

id phoneNumberWithoutFormatting(NSString *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  [v2 addCharactersInString:@"-.,() /"];
  objc_msgSend(v2, "addCharactersInRange:", 160, 1);
  CFStringRef v3 = [(NSString *)v1 componentsSeparatedByCharactersInSet:v2];
  uint64_t v4 = [v3 componentsJoinedByString:&stru_1EFBE3CF8];

  return v4;
}

void sub_1A6BFCDF4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

NSString *unprefixedPhoneNumber(NSString *a1)
{
  id v1 = a1;
  id v2 = (NSString *)PNCreateFormattedStringWithCountry();
  if ([(NSString *)v2 length])
  {
    uint64_t v3 = phoneNumberWithoutFormatting(v2);
  }
  else
  {
    if ([(NSString *)v1 hasPrefix:@"011"])
    {
      uint64_t v4 = [(NSString *)v1 substringFromIndex:3];
      uint64_t v5 = phoneNumberWithoutFormatting(v4);
    }
    else
    {
      if (![(NSString *)v1 hasPrefix:@"1"]) {
        goto LABEL_9;
      }
      uint64_t v4 = [(NSString *)v1 substringFromIndex:1];
      uint64_t v5 = phoneNumberWithoutFormatting(v4);
    }
    uint64_t v3 = v5;
  }
  id v1 = (NSString *)v3;
LABEL_9:

  return v1;
}

void sub_1A6BFCF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFD0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFD7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL fillSingleFieldValue(NSMutableDictionary *a1, NSString *a2, WBSFormControlMetadata *a3)
{
  uint64_t v5 = a1;
  id v6 = a2;
  uint64_t v7 = a3;
  unint64_t v8 = [(WBSFormControlMetadata *)v7 maxLength];
  unint64_t v9 = [(NSString *)v6 length];
  if (v8 >= v9) {
    recordValueForTextField(v5, v6, v7);
  }

  return v8 >= v9;
}

void sub_1A6BFDA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t valueFitsInFields(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  unint64_t v4 = [a1 length];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        unint64_t v9 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v8), "maxLength", (void)v13);
        BOOL v10 = v4 > v9;
        v4 -= v9;
        if (!v10)
        {
          uint64_t v11 = 1;
          goto LABEL_11;
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }
  uint64_t v11 = 0;
LABEL_11:

  return v11;
}

void sub_1A6BFDB3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void fillMultiFieldValue(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a1;
  id v7 = a2;
  id v8 = a3;
  id v20 = a4;
  unint64_t v9 = objc_msgSend(v7, "length", v8);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = v8;
  uint64_t v10 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v24 != v11) {
          objc_enumerationMutation(obj);
        }
        long long v13 = *(WBSFormControlMetadata **)(*((void *)&v23 + 1) + 8 * i);
        long long v14 = [(WBSFormControlMetadata *)v13 uniqueID];
        if (v9)
        {
          unint64_t v15 = [(WBSFormControlMetadata *)v13 maxLength];
          unint64_t v16 = v15;
          if (v15 >= v9) {
            unint64_t v17 = v9;
          }
          else {
            unint64_t v17 = v15;
          }
          uint64_t v18 = [v7 substringToIndex:v17];
          recordValueForTextField(v22, v18, v13);

          if (v9 <= v16)
          {
            v9 -= v17;
          }
          else
          {
            uint64_t v19 = [v7 substringFromIndex:v17];

            v9 -= v17;
            id v7 = (id)v19;
          }
        }
        else
        {
          [v20 addControlUniqueIDIgnoredByFollowUpAutoFill:v14];
          unint64_t v9 = 0;
        }
      }
      uint64_t v10 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v10);
  }
}

void sub_1A6BFDD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFDE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFE6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t fillDateUsingClassification(void *a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  allControlsContinuationStartingAtIndex(a2, a3);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = [v9 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v10)
  {
    uint64_t v12 = *(void *)v35;
    *(void *)&long long v11 = 138543618;
    long long v31 = v11;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v35 != v12) {
          objc_enumerationMutation(v9);
        }
        long long v14 = *(WBSFormControlMetadata **)(*((void *)&v34 + 1) + 8 * v13);
        unint64_t v15 = [(WBSFormControlMetadata *)v14 requiredFormatForDateTimeInput];
        BOOL v16 = v15 == 0;

        if (!v16)
        {
          id v17 = objc_alloc_init(MEMORY[0x1E4F28C10]);
          uint64_t v18 = [(WBSFormControlMetadata *)v14 requiredFormatForDateTimeInput];
          [v17 setDateFormat:v18];

          uint64_t v19 = [v17 stringFromDate:v8];
          recordValueForTextField(v7, v19, v14);

          goto LABEL_19;
        }
        id v20 = [(WBSFormControlMetadata *)v14 orderedParts];
        BOOL v21 = [v20 count] == 1;

        if (v21)
        {
          uint64_t v22 = [(WBSFormControlMetadata *)v14 orderedParts];
          long long v23 = [v22 firstObject];

          if ([v23 hasSuffix:@"month"])
          {
            int v24 = 1;
            goto LABEL_17;
          }
          if ([v23 hasSuffix:@"day"])
          {
            int v24 = 0;
            goto LABEL_17;
          }
          if ([v23 hasSuffix:@"year"])
          {
            int v24 = 2;
LABEL_17:
            recordValueForDateField(v7, v24, v8, v14);
          }
          else
          {
            long long v26 = (id)WBS_LOG_CHANNEL_PREFIXAutoFill();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              long long v27 = [(WBSFormControlMetadata *)v14 classification];
              *(_DWORD *)buf = v31;
              uint64_t v39 = v23;
              __int16 v40 = 2114;
              unsigned int v41 = v27;
              _os_log_error_impl(&dword_1A6B5F000, v26, OS_LOG_TYPE_ERROR, "Unrecognized part %{public}@ for classification %{public}@", buf, 0x16u);
            }
          }

          goto LABEL_19;
        }
        long long v25 = WBS_LOG_CHANNEL_PREFIXAutoFill();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          fillDateUsingClassification(&v32, v33, v25);
        }
LABEL_19:
        ++v13;
      }
      while (v10 != v13);
      uint64_t v28 = [v9 countByEnumeratingWithState:&v34 objects:v42 count:16];
      uint64_t v10 = v28;
    }
    while (v28);
  }

  uint64_t v29 = [v9 count];
  return v29;
}

void sub_1A6BFEBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void fillPostCode(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v33 = a4;
  unint64_t v10 = [v9 count];
  id v11 = v8;
  {
    long long v31 = [MEMORY[0x1E4F28B88] alphanumericCharacterSet];
    postCodeCandidates(NSString *,BOOL)::nonAlphanumericSet = [v31 invertedSet];
  }
  uint64_t v12 = [v11 componentsSeparatedByCharactersInSet:postCodeCandidates(NSString *,BOOL)::nonAlphanumericSet];
  uint64_t v13 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:4];
  long long v14 = v13;
  if (v10 <= 1)
  {
    [v13 addObject:v11];
    unint64_t v15 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithCapacity:", objc_msgSend(v11, "length"));
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = ___ZL18postCodeCandidatesP8NSStringb_block_invoke;
    v38[3] = &unk_1E5C9B120;
    id v16 = v15;
    id v39 = v16;
    [v12 enumerateObjectsUsingBlock:v38];
    [v14 addObject:v16];
  }
  id v17 = [v12 componentsJoinedByString:&stru_1EFBE3CF8];
  [v14 addObject:v17];

  id v18 = v11;
  if ((unint64_t)[v18 length] >= 9
    && ([MEMORY[0x1E4F28B88] letterCharacterSet],
        uint64_t v19 = objc_claimAutoreleasedReturnValue(),
        BOOL v20 = [v18 rangeOfCharacterFromSet:v19] == 0x7FFFFFFFFFFFFFFFLL,
        v19,
        v20))
  {
    {
      uint8_t v32 = [MEMORY[0x1E4F28B88] decimalDigitCharacterSet];
      shortZIPCodeForExtendedZIPCode(NSString *)::nonDigitSet = [v32 invertedSet];
    }
    BOOL v21 = [v18 componentsSeparatedByCharactersInSet:shortZIPCodeForExtendedZIPCode(NSString *)::nonDigitSet];
    uint64_t v22 = [v21 componentsJoinedByString:&stru_1EFBE3CF8];

    if ([v22 length] == 9)
    {
      long long v23 = [v22 substringToIndex:5];
    }
    else
    {
      long long v23 = 0;
    }

    if (v23) {
      [v14 addObject:v23];
    }
  }
  else
  {

    long long v23 = 0;
  }

  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v24 = v14;
  uint64_t v25 = [v24 countByEnumeratingWithState:&v34 objects:v40 count:16];
  if (v25)
  {
    uint64_t v26 = *(void *)v35;
LABEL_14:
    uint64_t v27 = 0;
    while (1)
    {
      if (*(void *)v35 != v26) {
        objc_enumerationMutation(v24);
      }
      uint64_t v28 = *(NSString **)(*((void *)&v34 + 1) + 8 * v27);
      if ([v9 count] == 1)
      {
        uint64_t v29 = [v9 objectAtIndexedSubscript:0];
        BOOL v30 = fillSingleFieldValue(v7, v28, v29);

        if (v30) {
          break;
        }
      }
      if ((unint64_t)[v9 count] >= 2 && valueFitsInFields(v28, v9))
      {
        fillMultiFieldValue(v7, v28, v9, v33);
        break;
      }
      if (v25 == ++v27)
      {
        uint64_t v25 = [v24 countByEnumeratingWithState:&v34 objects:v40 count:16];
        if (v25) {
          goto LABEL_14;
        }
        break;
      }
    }
  }
}

void sub_1A6BFF054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _Unwind_Resume(a1);
}

void fillInstantMessageUsername(void *a1, void *a2, void *a3)
{
  id v8 = a1;
  id v5 = a2;
  id v6 = a3;
  if ([v6 count] == 1)
  {
    id v7 = [v6 objectAtIndexedSubscript:0];
    fillSingleFieldValue(v8, v5, v7);
  }
}

void sub_1A6BFF1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void recordValueForTextField(NSMutableDictionary *a1, NSString *a2, WBSFormControlMetadata *a3)
{
  unint64_t v10 = a1;
  id v5 = a2;
  id v6 = a3;
  id v7 = [(WBSFormControlMetadata *)v6 value];
  BOOL v8 = [(NSString *)v5 isEqualToString:v7];

  if (!v8)
  {
    id v9 = [(WBSFormControlMetadata *)v6 uniqueID];
    [(NSMutableDictionary *)v10 setObject:v5 forKeyedSubscript:v9];
  }
}

void sub_1A6BFF2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void recordIndexForSelectElement(NSMutableDictionary *a1, unint64_t a2, WBSFormControlMetadata *a3)
{
  BOOL v8 = a1;
  id v5 = a3;
  id v6 = [NSNumber numberWithDouble:(double)a2];
  id v7 = [(WBSFormControlMetadata *)v5 uniqueID];
  [(NSMutableDictionary *)v8 setObject:v6 forKeyedSubscript:v7];
}

void sub_1A6BFF390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void recordValueForTextarea(NSMutableDictionary *a1, NSString *a2, WBSFormControlMetadata *a3)
{
  id v7 = a1;
  id v5 = a2;
  id v6 = [(WBSFormControlMetadata *)a3 uniqueID];
  [(NSMutableDictionary *)v7 setObject:v5 forKeyedSubscript:v6];
}

void sub_1A6BFF444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFF4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFF548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6BFFE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

id uniqueIDForAutoFillOfControl(WBSFormControlMetadata *a1, int a2)
{
  id v3 = a1;
  unint64_t v4 = v3;
  if (!v3
    || [(WBSFormControlMetadata *)v3 isDisabled]
    || [(WBSFormControlMetadata *)v4 isReadOnly]
    || [(WBSFormControlMetadata *)v4 looksLikeIgnoredDataTypeField]
    || (a2 & 1) == 0 && [(WBSFormControlMetadata *)v4 disallowsAutocomplete])
  {
    id v5 = 0;
    goto LABEL_6;
  }
  id v7 = [(WBSFormControlMetadata *)v4 tagName];
  BOOL v8 = [(WBSFormControlMetadata *)v4 isTextField];
  if ((objc_msgSend(v7, "safari_isCaseInsensitiveEqualToString:", @"input") & 1) != 0
    || objc_msgSend(v7, "safari_isCaseInsensitiveEqualToString:", @"textarea"))
  {
    if (!v8 && ![(WBSFormControlMetadata *)v4 looksLikeCreditCardTypeField]) {
      goto LABEL_22;
    }
    if ((a2 & 1) == 0 && [(WBSFormControlMetadata *)v4 isSecureTextField]) {
      goto LABEL_22;
    }
    int v9 = [(WBSFormControlMetadata *)v4 isActive] ? 2 : 4;
    if ((v9 & a2) == 0)
    {
      unint64_t v10 = [(WBSFormControlMetadata *)v4 value];
      uint64_t v11 = [v10 length];

      if (v11) {
        goto LABEL_22;
      }
    }
LABEL_24:
    uint64_t v12 = [(WBSFormControlMetadata *)v4 uniqueID];
    uint64_t v13 = [v12 length];
    if (v13) {
      id v5 = v12;
    }
    else {
      id v5 = 0;
    }
    if (v13) {
      long long v14 = 0;
    }
    else {
      long long v14 = v12;
    }

    goto LABEL_31;
  }
  if (objc_msgSend(v7, "safari_isCaseInsensitiveEqualToString:", @"select")) {
    goto LABEL_24;
  }
LABEL_22:
  id v5 = 0;
LABEL_31:

LABEL_6:
  return v5;
}

void sub_1A6C0023C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id allControlsContinuationStartingAtIndex(void *a1, unint64_t a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  unint64_t v4 = [v3 objectAtIndexedSubscript:a2];
  uint64_t v5 = [v4 continuationID];
  if (v5)
  {
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    while (a2 < [v3 count])
    {
      id v7 = [v3 objectAtIndexedSubscript:a2];
      if ([v7 continuationID] != v5)
      {

        break;
      }
      [v6 addObject:v7];

      ++a2;
    }
  }
  else
  {
    v9[0] = v4;
    id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:1];
  }

  return v6;
}

void sub_1A6C00398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void recordTypeForFieldIfFilled(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v11 = a1;
  id v7 = a2;
  id v8 = a3;
  int v9 = [v11 objectForKeyedSubscript:v8];

  if (v9)
  {
    unint64_t v10 = [NSNumber numberWithInteger:a4];
    [v7 setObject:v10 forKeyedSubscript:v8];
  }
}

void sub_1A6C00490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

BOOL fillCreditCardType(NSMutableDictionary *a1, WBSFormControlMetadata *a2, NSString *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  long long v44 = a1;
  uint64_t v5 = a2;
  id v42 = a3;
  uint64_t v43 = v5;
  if (WBSCreditCardTypeFromNumberAllowingPartialMatch())
  {
    WBSCreditCardTypeSynonyms();
    v48 = (NSArray *)objc_claimAutoreleasedReturnValue();
    if (!v48)
    {
      BOOL v9 = 0;
LABEL_53:

      goto LABEL_54;
    }
    id v6 = [(WBSFormControlMetadata *)v5 selectElementInfo];
    id v7 = v6;
    if (v6)
    {
      unint64_t v8 = indexOfItemInSelectElement(v6, v48);
      BOOL v9 = v8 != 0x7FFFFFFFFFFFFFFFLL;
      if (v8 != 0x7FFFFFFFFFFFFFFFLL) {
        recordIndexForSelectElement(v44, v8, v5);
      }

      goto LABEL_53;
    }
    unint64_t v10 = [(WBSFormControlMetadata *)v5 radioButtonInfo];
    id v11 = v10;
    if (!v10)
    {
      WBSCreditCardTypeLocalizedName();
      long long v35 = (NSString *)objc_claimAutoreleasedReturnValue();
      recordValueForTextField(v44, v35, v5);

      BOOL v9 = 1;
LABEL_52:

      goto LABEL_53;
    }
    long long v37 = v10;
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4F28BD0], "setWithCapacity:", objc_msgSend(v10, "count"));
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id obj = v11;
    uint64_t v38 = [obj countByEnumeratingWithState:&v61 objects:v68 count:16];
    if (v38)
    {
      uint64_t v39 = *(void *)v62;
      do
      {
        for (uint64_t i = 0; i != v38; ++i)
        {
          if (*(void *)v62 != v39) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void *)(*((void *)&v61 + 1) + 8 * i);
          long long v14 = objc_msgSend(obj, "safari_arrayForKey:", v13);
          unint64_t v15 = v14;
          if (v14)
          {
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            id v45 = v14;
            uint64_t v16 = [v45 countByEnumeratingWithState:&v57 objects:v67 count:16];
            if (v16)
            {
              uint64_t v46 = *(void *)v58;
              do
              {
                uint64_t v17 = 0;
                uint64_t v47 = v16;
                do
                {
                  if (*(void *)v58 != v46) {
                    objc_enumerationMutation(v45);
                  }
                  id v18 = *(void **)(*((void *)&v57 + 1) + 8 * v17);
                  long long v53 = 0u;
                  long long v54 = 0u;
                  long long v55 = 0u;
                  long long v56 = 0u;
                  uint64_t v19 = v48;
                  uint64_t v20 = [(NSArray *)v19 countByEnumeratingWithState:&v53 objects:v66 count:16];
                  if (v20)
                  {
                    uint64_t v21 = *(void *)v54;
                    do
                    {
                      for (uint64_t j = 0; j != v20; ++j)
                      {
                        if (*(void *)v54 != v21) {
                          objc_enumerationMutation(v19);
                        }
                        if ([v18 rangeOfString:*(void *)(*((void *)&v53 + 1) + 8 * j) options:1] != 0x7FFFFFFFFFFFFFFFLL)objc_msgSend(v12, "addObject:", v13); {
                      }
                        }
                      uint64_t v20 = [(NSArray *)v19 countByEnumeratingWithState:&v53 objects:v66 count:16];
                    }
                    while (v20);
                  }

                  ++v17;
                }
                while (v17 != v47);
                uint64_t v16 = [v45 countByEnumeratingWithState:&v57 objects:v67 count:16];
              }
              while (v16);
            }
          }
        }
        uint64_t v38 = [obj countByEnumeratingWithState:&v61 objects:v68 count:16];
      }
      while (v38);
    }

    if ([v12 count])
    {
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      id v23 = v12;
      uint64_t v24 = [v23 countByEnumeratingWithState:&v49 objects:v65 count:16];
      BOOL v9 = v24 != 0;
      if (!v24)
      {
        id v33 = v23;
        goto LABEL_50;
      }
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)v50;
      do
      {
        for (uint64_t k = 0; k != v24; ++k)
        {
          if (*(void *)v50 != v27) {
            objc_enumerationMutation(v23);
          }
          uint64_t v29 = *(void **)(*((void *)&v49 + 1) + 8 * k);
          unint64_t v30 = [v23 countForObject:v29];
          if (v30 > v25)
          {
            id v31 = v29;

            unint64_t v25 = v30;
            uint64_t v26 = v31;
          }
        }
        uint64_t v24 = [v23 countByEnumeratingWithState:&v49 objects:v65 count:16];
      }
      while (v24);

      if (v26)
      {
        uint8_t v32 = v44;
        id v33 = v26;
        long long v34 = [(WBSFormControlMetadata *)v43 uniqueID];
        [(NSMutableDictionary *)v32 setObject:v33 forKeyedSubscript:v34];

LABEL_50:
        goto LABEL_51;
      }
    }
    BOOL v9 = 0;
LABEL_51:

    id v11 = v37;
    goto LABEL_52;
  }
  BOOL v9 = 0;
LABEL_54:

  return v9;
}

void sub_1A6C0097C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6C00B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C00C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C01414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1A6C01608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C016D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C01924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C01B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C01CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C01DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C0207C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C02488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1A6C02824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C0307C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_1A6C0345C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C03D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,void *a30,_Unwind_Exception *exception_objecta,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose((const void *)(v73 - 224), 8);
  _Block_object_dispose(&STACK[0x210], 8);

  _Unwind_Resume(a1);
}

void sub_1A6C040D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C04354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C047CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C04928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C04B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C04E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A6C04F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C0501C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C05114(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A6C05508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

void sub_1A6C05670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C05810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C058E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C05AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C05C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C05DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C05FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C06170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C063C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C0651C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v20 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A6C06600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C06738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v20 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A6C067EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C068D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C06F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6C073C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A6C07558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C07778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C078B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C079BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C07A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C07BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C07C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C07D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C07FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C08094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*,false>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  BOOL v9 = a2;
  unint64_t v10 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v9 - v10);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v26 = *a3;
          uint64_t v28 = v9 - 3;
          if ((*(unsigned int (**)(void))(v26 + 16))()) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v29, (uint64_t *)&v28);
          }
          break;
        case 3uLL:
          uint64_t v28 = v9 - 3;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v10, v10 + 3, (uint64_t)(v9 - 3), (uint64_t)a3);
          break;
        case 4uLL:
          uint64_t v28 = v9 - 3;
          std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v10, v10 + 3, v10 + 6, (uint64_t)(v9 - 3), a3);
          break;
        case 5uLL:
          uint64_t v28 = v9 - 3;
          std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v10, v10 + 3, v10 + 6, v10 + 9, (uint64_t)(v9 - 3), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 575)
    {
      if (a5) {
        std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v10, v9, (uint64_t)a3);
      }
      else {
        std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v10, (uint64_t)v9, (uint64_t)a3);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = (uint64_t)(v9 - 3);
    if ((unint64_t)v12 >= 0xC01)
    {
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v10, &v10[3 * (v13 >> 1)], v15, (uint64_t)a3);
      uint64_t v16 = v28;
      uint64_t v17 = 3 * v14;
      uint64_t v18 = 3 * v14;
      uint64_t v19 = 24 * v14 - 24;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v29 + 3, (uint64_t *)((char *)v29 + v19), (uint64_t)(v28 - 6), (uint64_t)a3);
      v18 += 3;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v29 + 6, &v29[v18], (uint64_t)(v16 - 9), (uint64_t)a3);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t *)((char *)v29 + v19), &v29[v17], (uint64_t)&v29[v18], (uint64_t)a3);
      uint64_t v27 = &v29[v17];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v29, (uint64_t *)&v27);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(&v10[3 * (v13 >> 1)], v10, v15, (uint64_t)a3);
      if (a5)
      {
LABEL_13:
        BOOL v9 = v28;
        goto LABEL_14;
      }
    }
    char v20 = (*(uint64_t (**)(void))(*a3 + 16))();
    BOOL v9 = v28;
    if ((v20 & 1) == 0)
    {
      std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,SortEntry *,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&)>(v29, v28, (uint64_t)a3);
      unint64_t v10 = v25;
LABEL_22:
      a5 = 0;
      uint64_t v29 = v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,SortEntry *,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&)>((long long *)v29, v9, a3);
    uint64_t v22 = (uint64_t *)v21;
    if ((v23 & 1) == 0) {
      goto LABEL_21;
    }
    int v24 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v29, v21, a3);
    unint64_t v10 = v22 + 3;
    if (std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v22 + 3, (uint64_t)v9, a3))
    {
      if (v24) {
        return;
      }
      uint64_t v28 = v22;
      unint64_t v10 = v29;
      BOOL v9 = v22;
    }
    else
    {
      if (!v24)
      {
LABEL_21:
        std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*,false>(v29, v22, a3, -i, a5 & 1);
        unint64_t v10 = v22 + 3;
        goto LABEL_22;
      }
      uint64_t v29 = v22 + 3;
    }
  }
  if (v10 != v9) {
    std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*,SortEntry*>((long long *)v10, v9, v9, (uint64_t)a3);
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(uint64_t **a1, uint64_t *a2)
{
  id v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = **a1;
  uint64_t v5 = (*a1)[1];
  uint64_t *v2 = 0;
  v2[1] = 0;
  int v6 = *((_DWORD *)v2 + 4);
  id v7 = *(void **)v3;
  *(void *)uint64_t v3 = 0;
  unint64_t v8 = (void *)*v2;
  uint64_t *v2 = (uint64_t)v7;

  uint64_t v9 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  unint64_t v10 = (void *)v2[1];
  v2[1] = v9;

  *((_DWORD *)v2 + 4) = *(_DWORD *)(v3 + 16);
  id v11 = *(void **)v3;
  *(void *)uint64_t v3 = v4;

  uint64_t v12 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = v5;

  *(_DWORD *)(v3 + 16) = v6;
}

void std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v5 = (_OWORD *)(a1 + 24);
    if ((_OWORD *)(a1 + 24) != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (_OWORD *)a1;
      do
      {
        uint64_t v9 = v5;
        if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
        {
          long long v10 = *v9;
          *(void *)uint64_t v9 = 0;
          *((void *)v8 + 4) = 0;
          long long v22 = v10;
          int v23 = *((_DWORD *)v8 + 10);
          uint64_t v11 = v7;
          while (1)
          {
            uint64_t v12 = a1 + v11;
            uint64_t v13 = *(void *)(a1 + v11);
            *(void *)uint64_t v12 = 0;
            unint64_t v14 = *(void **)(a1 + v11 + 24);
            *(void *)(v12 + 24) = v13;

            uint64_t v15 = *(void *)(a1 + v11 + 8);
            *(void *)(v12 + 8) = 0;
            uint64_t v16 = *(void **)(a1 + v11 + 32);
            *(void *)(v12 + 32) = v15;

            *(_DWORD *)(v12 + 40) = *(_DWORD *)(v12 + 16);
            if (!v11) {
              break;
            }
            v11 -= 24;
            if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
            {
              uint64_t v17 = a1 + v11 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v17 = a1;
LABEL_10:
          uint64_t v18 = v22;
          *(void *)&long long v22 = 0;
          uint64_t v19 = *(void **)v17;
          *(void *)uint64_t v17 = v18;

          uint64_t v20 = *((void *)&v22 + 1);
          *((void *)&v22 + 1) = 0;
          uint64_t v21 = *(void **)(v17 + 8);
          *(void *)(v17 + 8) = v20;

          *(_DWORD *)(v17 + 16) = v23;
        }
        uint64_t v5 = (_OWORD *)((char *)v9 + 24);
        v7 += 24;
        unint64_t v8 = v9;
      }
      while ((_OWORD *)((char *)v9 + 24) != a2);
    }
  }
}

void sub_1A6C086A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = (long long *)(a1 + 24);
    if (a1 + 24 != a2)
    {
      uint64_t v7 = a1 - 24;
      uint64_t v8 = -2;
      uint64_t v9 = 1;
      uint64_t v10 = a1;
      while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
LABEL_9:
        uint64_t v10 = a1 + 24 * v9++;
        uint64_t v5 = (long long *)(v10 + 24);
        v7 += 24;
        --v8;
        if (v10 + 24 == a2) {
          return;
        }
      }
      long long v11 = *v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(v10 + 32) = 0;
      long long v23 = v11;
      int v24 = *(_DWORD *)(v10 + 40);
      uint64_t v12 = v8;
      uint64_t v13 = v7;
      while (1)
      {
        uint64_t v14 = *(void *)(v13 + 24);
        *(void *)(v13 + 24) = 0;
        uint64_t v15 = *(void **)(v13 + 48);
        *(void *)(v13 + 48) = v14;

        uint64_t v16 = *(void *)(v13 + 32);
        *(void *)(v13 + 32) = 0;
        uint64_t v17 = *(void **)(v13 + 56);
        *(void *)(v13 + 56) = v16;

        *(_DWORD *)(v13 + 64) = *(_DWORD *)(v13 + 40);
        if (__CFADD__(v12++, 1)) {
          break;
        }
        v13 -= 24;
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
        {
          uint64_t v19 = v23;
          *(void *)&long long v23 = 0;
          uint64_t v20 = *(void **)(v13 + 48);
          *(void *)(v13 + 48) = v19;

          uint64_t v21 = *((void *)&v23 + 1);
          *((void *)&v23 + 1) = 0;
          long long v22 = *(void **)(v13 + 56);
          *(void *)(v13 + 56) = v21;

          *(_DWORD *)(v13 + 64) = v24;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
}

void sub_1A6C08828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a2;
  long long v11 = a1;
  uint64_t v9 = a3;
  char v5 = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  if ((v5 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v10, &v9);
    if (!(*(unsigned int (**)(void))(*(void *)a4 + 16))()) {
      return 1;
    }
    uint64_t v7 = &v11;
    uint64_t v8 = (uint64_t *)&v10;
    goto LABEL_9;
  }
  if (!result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v11, (uint64_t *)&v10);
    if (!(*(unsigned int (**)(void))(*(void *)a4 + 16))()) {
      return 1;
    }
    uint64_t v7 = &v10;
    uint64_t v8 = &v9;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(v7, v8);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v11, &v9);
  return 1;
}

void std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,SortEntry *,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&)>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v19 = (unint64_t)a2;
  uint64_t v20 = a1;
  long long v6 = *(_OWORD *)a1;
  *a1 = 0;
  a1[1] = 0;
  long long v17 = v6;
  int v18 = *((_DWORD *)a1 + 4);
  if ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
  {
    uint64_t v7 = a1;
    while (1)
    {
      v7 += 3;
      uint64_t v20 = v7;
      if (v7 == a2) {
        goto LABEL_23;
      }
      if ((*(uint64_t (**)(void))(*(void *)a3 + 16))()) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v8 = a1 + 3;
  do
  {
    uint64_t v7 = v8;
    uint64_t v20 = v8;
    if ((unint64_t)v8 >= v19) {
      break;
    }
    int v9 = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    uint64_t v8 = v7 + 3;
  }
  while (!v9);
LABEL_9:
  unint64_t v10 = v19;
  if ((unint64_t)v7 < v19)
  {
    while ((uint64_t *)v10 != a1)
    {
      v10 -= 24;
      unint64_t v19 = v10;
      if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
      {
        uint64_t v7 = v20;
        goto LABEL_13;
      }
    }
    goto LABEL_23;
  }
LABEL_13:
  if ((unint64_t)v7 < v10)
  {
LABEL_14:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v20, (uint64_t *)&v19);
    while (1)
    {
      v20 += 3;
      if (v20 == a2) {
        break;
      }
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
        while ((uint64_t *)v19 != a1)
        {
          v19 -= 24;
          if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
          {
            uint64_t v7 = v20;
            if ((unint64_t)v20 < v19) {
              goto LABEL_14;
            }
            goto LABEL_20;
          }
        }
        break;
      }
    }
LABEL_23:
    __break(1u);
    return;
  }
LABEL_20:
  if (v7 - 3 != a1)
  {
    uint64_t v11 = *(v7 - 3);
    *(v7 - 3) = 0;
    uint64_t v12 = (void *)*a1;
    *a1 = v11;

    uint64_t v13 = *(v7 - 2);
    *(v7 - 2) = 0;
    uint64_t v14 = (void *)a1[1];
    a1[1] = v13;

    *((_DWORD *)a1 + 4) = *((_DWORD *)v7 - 2);
  }
  uint64_t v15 = (void *)*(v7 - 3);
  *(v7 - 3) = v17;

  uint64_t v16 = (void *)*(v7 - 2);
  *(v7 - 2) = *((void *)&v17 + 1);

  *((_DWORD *)v7 - 2) = v18;
}

void sub_1A6C08B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,SortEntry *,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&)>(long long *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  unint64_t v20 = (unint64_t)a2;
  long long v7 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  long long v18 = v7;
  int v19 = *((_DWORD *)a1 + 4);
  do
  {
    uint64_t v21 = (uint64_t *)((char *)a1 + v6 + 24);
    if (v21 == a2) {
      goto LABEL_21;
    }
    v6 += 24;
  }
  while (((*(uint64_t (**)(void))(*a3 + 16))() & 1) != 0);
  unint64_t v8 = v20;
  if (v6 != 24)
  {
    while ((long long *)v8 != a1)
    {
      v8 -= 24;
      unint64_t v20 = v8;
      if ((*(unsigned int (**)(void))(*a3 + 16))())
      {
        int v9 = v21;
        goto LABEL_11;
      }
    }
    goto LABEL_21;
  }
  int v9 = (uint64_t *)a1 + 3;
  do
  {
    if ((unint64_t)v9 >= v8) {
      break;
    }
    uint64_t v10 = *a3;
    v8 -= 24;
    unint64_t v20 = v8;
  }
  while (((*(uint64_t (**)(void))(v10 + 16))() & 1) == 0);
LABEL_11:
  uint64_t v11 = v9;
  if ((unint64_t)v9 < v20)
  {
LABEL_12:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v21, (uint64_t *)&v20);
    while (1)
    {
      v21 += 3;
      if (v21 == a2) {
        break;
      }
      if (((*(uint64_t (**)(void))(*a3 + 16))() & 1) == 0)
      {
        while ((long long *)v20 != a1)
        {
          v20 -= 24;
          if ((*(unsigned int (**)(void))(*a3 + 16))())
          {
            uint64_t v11 = v21;
            if ((unint64_t)v21 < v20) {
              goto LABEL_12;
            }
            goto LABEL_18;
          }
        }
        break;
      }
    }
LABEL_21:
    __break(1u);
    return;
  }
LABEL_18:
  if (v11 - 3 != (uint64_t *)a1)
  {
    uint64_t v12 = *(v11 - 3);
    *(v11 - 3) = 0;
    uint64_t v13 = *(void **)a1;
    *(void *)a1 = v12;

    uint64_t v14 = *(v11 - 2);
    *(v11 - 2) = 0;
    uint64_t v15 = (void *)*((void *)a1 + 1);
    *((void *)a1 + 1) = v14;

    *((_DWORD *)a1 + 4) = *((_DWORD *)v11 - 2);
  }
  uint64_t v16 = (void *)*(v11 - 3);
  *(v11 - 3) = v18;

  long long v17 = (void *)*(v11 - 2);
  *(v11 - 2) = *((void *)&v18 + 1);

  *((_DWORD *)v11 - 2) = v19;
}

void sub_1A6C08D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v24 = (uint64_t *)a2;
  unint64_t v25 = a1;
  BOOL v6 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      uint64_t v7 = *a3;
      int v24 = (uint64_t *)(a2 - 24);
      if ((*(unsigned int (**)(void))(v7 + 16))()) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v25, (uint64_t *)&v24);
      }
      return v6;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a1 + 3, a2 - 24, (uint64_t)a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a1 + 3, a1 + 6, a2 - 24, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 24, a3);
      return v6;
    default:
      unint64_t v8 = a1 + 6;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a1 + 3, (uint64_t)(a1 + 6), (uint64_t)a3);
      int v9 = a1 + 9;
      if (v9 == (uint64_t *)a2) {
        return 1;
      }
      int v10 = 0;
      break;
  }
  while (!(*(unsigned int (**)(void))(*a3 + 16))())
  {
LABEL_12:
    unint64_t v8 = v9;
    v9 += 3;
    if (v9 == v24) {
      return 1;
    }
  }
  long long v11 = *(_OWORD *)v9;
  *int v9 = 0;
  v9[1] = 0;
  long long v22 = v11;
  int v23 = *((_DWORD *)v9 + 4);
  do
  {
    uint64_t v12 = v8;
    uint64_t v13 = *v8;
    *unint64_t v8 = 0;
    uint64_t v14 = (void *)v8[3];
    v8[3] = v13;

    uint64_t v15 = v8[1];
    v8[1] = 0;
    uint64_t v16 = (void *)v8[4];
    v8[4] = v15;

    *((_DWORD *)v8 + 10) = *((_DWORD *)v8 + 4);
    if (v8 == v25) {
      break;
    }
    v8 -= 3;
  }
  while (((*(uint64_t (**)(void))(*a3 + 16))() & 1) != 0);
  uint64_t v17 = v22;
  *(void *)&long long v22 = 0;
  long long v18 = (void *)*v12;
  *uint64_t v12 = v17;

  uint64_t v19 = *((void *)&v22 + 1);
  *((void *)&v22 + 1) = 0;
  unint64_t v20 = (void *)v12[1];
  v12[1] = v19;

  *((_DWORD *)v12 + 4) = v23;
  if (++v10 != 8)
  {

    goto LABEL_12;
  }
  BOOL v6 = v9 + 3 == v24;

  return v6;
}

void sub_1A6C09010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, void *a5)
{
  unint64_t v8 = a2;
  int v9 = a1;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a2, (uint64_t)a3, (uint64_t)a5);
  if ((*(unsigned int (**)(void))(*a5 + 16))(*a5))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v7, &v6);
    if ((*(unsigned int (**)(void))(*a5 + 16))(*a5))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v8, (uint64_t *)&v7);
      if ((*(unsigned int (**)(void))(*a5 + 16))(*a5)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v9, (uint64_t *)&v8);
      }
    }
  }
}

void std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6)
{
  int v10 = a2;
  long long v11 = a1;
  unint64_t v8 = a4;
  int v9 = a3;
  uint64_t v7 = a5;
  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*(unsigned int (**)(void))(*a6 + 16))())
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v8, &v7);
    if ((*(unsigned int (**)(void))(*a6 + 16))())
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v9, (uint64_t *)&v8);
      if ((*(unsigned int (**)(void))(*a6 + 16))())
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v10, (uint64_t *)&v9);
        if ((*(unsigned int (**)(void))(*a6 + 16))()) {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v11, (uint64_t *)&v10);
        }
      }
    }
  }
}

uint64_t *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*,SortEntry*>(long long *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v17 = a1;
  if (a1 != (long long *)a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)((char *)a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v7, a4, v9, v12);
        uint64_t v12 = (long long *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v16 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      do
      {
        if ((*(unsigned int (**)(void))(*(void *)a4 + 16))())
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v16, (uint64_t *)&v17);
          std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v17, a4, v9, v17);
        }
        v16 += 3;
      }
      while (v16 != a3);
      uint64_t v7 = v17;
      uint64_t v8 = (char *)v6 - (char *)v17;
    }
    if (v8 >= 25)
    {
      unint64_t v13 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong})(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v7, (uint64_t)v6, a4, v13);
        v6 -= 3;
      }
      while (v13-- > 2);
      return v16;
    }
  }
  return a3;
}

void std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v10 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v11 = (long long *)(a1 + 24 * v10);
      uint64_t v12 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*(unsigned int (**)(void))(*(void *)a2 + 16))())
      {
        unint64_t v11 = (long long *)((char *)v11 + 24);
        uint64_t v10 = v12;
      }
      if (((*(uint64_t (**)(void))(*(void *)a2 + 16))() & 1) == 0)
      {
        long long v13 = *v5;
        *(void *)char v5 = 0;
        *((void *)v5 + 1) = 0;
        long long v22 = v13;
        int v23 = *((_DWORD *)v5 + 4);
        do
        {
          uint64_t v14 = v11;
          uint64_t v15 = *(void *)v11;
          *(void *)unint64_t v11 = 0;
          uint64_t v16 = *(void **)v5;
          *(void *)char v5 = v15;

          uint64_t v17 = *((void *)v11 + 1);
          *((void *)v11 + 1) = 0;
          long long v18 = (void *)*((void *)v5 + 1);
          *((void *)v5 + 1) = v17;

          *((_DWORD *)v5 + 4) = *((_DWORD *)v11 + 4);
          if (v7 < v10) {
            break;
          }
          uint64_t v19 = (2 * v10) | 1;
          unint64_t v11 = (long long *)(a1 + 24 * v19);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v19;
          }
          else if ((*(unsigned int (**)(void))(*(void *)a2 + 16))())
          {
            unint64_t v11 = (long long *)((char *)v11 + 24);
          }
          else
          {
            uint64_t v10 = v19;
          }
          char v5 = v14;
        }
        while (!(*(unsigned int (**)(void))(*(void *)a2 + 16))());
        unint64_t v20 = *(void **)v14;
        *(void *)uint64_t v14 = v22;

        uint64_t v21 = (void *)*((void *)v14 + 1);
        *((void *)v14 + 1) = *((void *)&v22 + 1);

        *((_DWORD *)v14 + 4) = v23;
      }
    }
  }
}

void sub_1A6C09558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong})(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 <= 0)
  {
    __break(1u);
  }
  else if (a4 != 1)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v7 = *(void **)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int v9 = *(_DWORD *)(a1 + 16);
    uint64_t v10 = (void **)std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a3, a4);
    unint64_t v11 = v10;
    if (v10 == (void **)(a2 - 24))
    {
      long long v18 = *v10;
      uint64_t *v10 = v8;

      uint64_t v19 = v11[1];
      v11[1] = v7;

      *((_DWORD *)v11 + 4) = v9;
    }
    else
    {
      uint64_t v12 = *(void **)(a2 - 24);
      *(void *)(a2 - 24) = 0;
      long long v13 = *v10;
      uint64_t *v10 = v12;

      uint64_t v14 = *(void **)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      uint64_t v15 = v11[1];
      v11[1] = v14;

      *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 - 8);
      uint64_t v16 = *(void **)(a2 - 24);
      *(void *)(a2 - 24) = v8;

      uint64_t v17 = *(void **)(a2 - 16);
      *(void *)(a2 - 16) = v7;

      *(_DWORD *)(a2 - 8) = v9;
      std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, (uint64_t)(v11 + 3), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - a1 + 24) >> 3));
    }
  }
}

void sub_1A6C0968C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*(unsigned int (**)(void))(*(void *)a2 + 16))())
    {
      v9 += 24;
      uint64_t v10 = v11;
    }
    uint64_t v12 = *(void *)v9;
    *(void *)uint64_t v9 = 0;
    long long v13 = *(void **)a1;
    *(void *)a1 = v12;

    uint64_t v14 = *(void *)(v9 + 8);
    *(void *)(v9 + 8) = 0;
    uint64_t v15 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v14;

    *(_DWORD *)(a1 + 16) = *(_DWORD *)(v9 + 16);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (uint64_t *)(a1 + 24 * (v4 >> 1));
    uint64_t v10 = (uint64_t *)(a2 - 24);
    if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
    {
      long long v11 = *(_OWORD *)(a2 - 24);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      long long v21 = v11;
      int v22 = *(_DWORD *)(a2 - 8);
      do
      {
        uint64_t v12 = v9;
        uint64_t v13 = *v9;
        *uint64_t v9 = 0;
        uint64_t v14 = (void *)*v10;
        uint64_t *v10 = v13;

        uint64_t v15 = v9[1];
        v9[1] = 0;
        uint64_t v16 = (void *)v10[1];
        v10[1] = v15;

        *((_DWORD *)v10 + 4) = *((_DWORD *)v9 + 4);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (uint64_t *)(a1 + 24 * v8);
        uint64_t v10 = v12;
      }
      while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      uint64_t v17 = v21;
      *(void *)&long long v21 = 0;
      long long v18 = (void *)*v12;
      *uint64_t v12 = v17;

      uint64_t v19 = *((void *)&v21 + 1);
      *((void *)&v21 + 1) = 0;
      unint64_t v20 = (void *)v12[1];
      v12[1] = v19;

      *((_DWORD *)v12 + 4) = v22;
    }
  }
}

void sub_1A6C098C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL17findLiteralStringP7NSArrayP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v4 = [v3 userTypedString];
    uint64_t v5 = [v4 isEqualToString:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1A6C0995C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double elementBounds(WBSFormControlMetadata *a1)
{
  id v1 = a1;
  [(WBSFormControlMetadata *)v1 rectLeft];
  double v3 = v2;
  [(WBSFormControlMetadata *)v1 rectTop];
  [(WBSFormControlMetadata *)v1 rectWidth];
  [(WBSFormControlMetadata *)v1 rectHeight];

  return v3;
}

void sub_1A6C099EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fieldLooksLikeDateField(WBSFormControlMetadata *a1)
{
  id v1 = a1;
  uint64_t v2 = [(WBSFormControlMetadata *)v1 looksLikeDayField]
    || [(WBSFormControlMetadata *)v1 looksLikeMonthField]
    || [(WBSFormControlMetadata *)v1 looksLikeYearField];

  return v2;
}

void sub_1A6C09A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL fieldLooksLikeItExpectsDataOfSize(WBSFormControlMetadata *a1, uint64_t a2)
{
  double v3 = a1;
  uint64_t v4 = [(WBSFormControlMetadata *)v3 size];
  uint64_t v5 = [(WBSFormControlMetadata *)v3 maxLength];
  BOOL v7 = v4 <= a2 || v5 <= a2;

  return v7;
}

void sub_1A6C09AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t dateComponentValue(int a1, void *a2)
{
  id v4 = a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9A8]);
  uint64_t v6 = (void *)[v5 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
  BOOL v7 = [v6 components:28 fromDate:v4];
  unint64_t v8 = v7;
  switch(a1)
  {
    case 0:
      uint64_t v9 = [v7 day];
      goto LABEL_7;
    case 1:
      uint64_t v9 = [v7 month];
      goto LABEL_7;
    case 2:
      uint64_t v9 = [v7 year];
LABEL_7:
      uint64_t v2 = v9;
      break;
  }

  return v2;
}

void sub_1A6C09B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id dateComponentSynonyms(int a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1CA70]);
  if (a1 == 1) {
    uint64_t v5 = 6;
  }
  else {
    uint64_t v5 = 2;
  }
  uint64_t v6 = (void *)[v4 initWithCapacity:v5];
  unint64_t v7 = dateComponentValue(a1, v3);
  unint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%lu", v7);
  [v6 addObject:v8];

  if (a1 == 2 || v7 <= 9)
  {
    uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"%02lu", v7 % 0x64);
    [v6 addObject:v9];
  }
  if (a1 == 1)
  {
    id v10 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    [v10 setDateFormat:@"MMMM"];
    long long v11 = [v10 stringFromDate:v3];
    [v6 addObject:v11];

    [v10 setDateFormat:@"MMM"];
    uint64_t v12 = [v10 stringFromDate:v3];
    [v6 addObject:v12];

    [v10 setDateFormat:@"LLLL"];
    uint64_t v13 = [v10 stringFromDate:v3];
    [v6 addObject:v13];

    [v10 setDateFormat:@"LLL"];
    uint64_t v14 = [v10 stringFromDate:v3];
    [v6 addObject:v14];

    id v15 = objc_alloc(MEMORY[0x1E4F1CA20]);
    uint64_t v16 = (void *)[v15 initWithLocaleIdentifier:*MEMORY[0x1E4F98018]];
    [v10 setLocale:v16];
    [v10 setDateFormat:@"MMMM"];
    uint64_t v17 = [v10 stringFromDate:v3];
    [v6 addObject:v17];

    [v10 setDateFormat:@"MMM"];
    long long v18 = [v10 stringFromDate:v3];
    [v6 addObject:v18];
  }
  return v6;
}

void sub_1A6C09E40(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void recordValueForDateField(void *a1, int a2, void *a3, void *a4)
{
  uint64_t v19 = a1;
  id v7 = a3;
  unint64_t v8 = a4;
  uint64_t v9 = [(WBSFormControlMetadata *)v8 tagName];
  BOOL v10 = [(WBSFormControlMetadata *)v8 isTextField];
  if ((objc_msgSend(v9, "safari_isCaseInsensitiveEqualToString:", @"input") & v10) == 1)
  {
    unint64_t v11 = dateComponentValue(a2, v7);
    if (a2 == 2)
    {
      if ([(WBSFormControlMetadata *)v8 maxLength] == 2
        || ([(WBSFormControlMetadata *)v8 placeholder],
            uint64_t v12 = (NSString *)objc_claimAutoreleasedReturnValue(),
            canonicalizedDateTemplate(v12),
            uint64_t v13 = objc_claimAutoreleasedReturnValue(),
            int v14 = [v13 isEqualToString:@"yy"],
            v13,
            v12,
            v14))
      {
        v11 %= 0x64uLL;
      }
    }
    objc_msgSend(NSString, "stringWithFormat:", @"%02lu", v11);
    id v15 = (NSArray *)objc_claimAutoreleasedReturnValue();
    recordValueForTextField(v19, (NSString *)&v15->super.isa, v8);
  }
  else
  {
    id v15 = [(WBSFormControlMetadata *)v8 selectElementInfo];
    if (v15)
    {
      uint64_t v16 = dateComponentSynonyms(a2, v7);
      uint64_t v17 = [v16 array];
      unint64_t v18 = indexOfItemInSelectElement(v15, v17);

      if (v18 != 0x7FFFFFFFFFFFFFFFLL) {
        recordIndexForSelectElement(v19, v18, v8);
      }
    }
  }
}

void sub_1A6C0A088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v15 = v13;

  _Unwind_Resume(a1);
}

id canonicalizedDateTemplate(NSString *a1)
{
  id v1 = a1;
  if ([(NSString *)v1 length])
  {
    uint64_t v2 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
    id v3 = [(NSString *)v1 safari_stringByRemovingCharactersInSet:v2];

    {
      unint64_t v8 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@"dmyDMY/.-"];
      canonicalizedDateTemplate(NSString *)::invalidCharacterSet = [v8 invertedSet];
    }
    if ([v3 rangeOfCharacterFromSet:canonicalizedDateTemplate(NSString *)::invalidCharacterSet] == 0x7FFFFFFFFFFFFFFFLL)
    {
      id v4 = [v3 stringByReplacingOccurrencesOfString:@"D" withString:@"d"];

      uint64_t v5 = [v4 stringByReplacingOccurrencesOfString:@"m" withString:@"M"];

      uint64_t v6 = [v5 stringByReplacingOccurrencesOfString:@"Y" withString:@"y"];

      id v1 = 0;
    }
    else
    {
      uint64_t v6 = 0;
      id v1 = (NSString *)v3;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_1A6C0A26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t indexOfItemInSelectElement(NSArray *a1, NSArray *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [(NSArray *)v3 count];
  uint64_t v6 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v5];
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unint64_t v8 = [(NSArray *)v3 safari_arrayAtIndex:i];
      uint64_t v9 = objc_msgSend(v8, "safari_stringAtIndex:", 1);
      [v6 addObject:v9];
    }
  }
  uint64_t v10 = [(NSArray *)v4 count];
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  if (v10 - 1 >= 0)
  {
    long long v21 = v3;
    unint64_t v12 = -1;
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      --v10;
      unint64_t v22 = -1;
      int v14 = -[NSArray safari_stringAtIndex:](v4, "safari_stringAtIndex:", v10, v21);
      unint64_t v15 = +[WBSFormToABBinder indexOfBestMatchForString:v14 inArray:v6 startingPosition:&v22];

      unint64_t v16 = v22;
      if (v22 >= v12) {
        uint64_t v17 = v13;
      }
      else {
        uint64_t v17 = v15;
      }
      if (v22 >= v12) {
        unint64_t v16 = v12;
      }
      if (v15 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v13 = v17;
        unint64_t v12 = v16;
      }
    }
    while (v10 > 0);
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    id v3 = v21;
    if (v13 != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v18 = [(NSArray *)v21 safari_arrayAtIndex:v13];
      uint64_t v19 = objc_msgSend(v18, "safari_numberAtIndex:", 0);
      uint64_t v11 = [v19 unsignedIntValue];
    }
  }

  return v11;
}

void sub_1A6C0A44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void ___ZL18postCodeCandidatesP8NSStringb_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 length])
  {
    if ([*(id *)(a1 + 32) length]) {
      [*(id *)(a1 + 32) appendString:@"-"];
    }
    [*(id *)(a1 + 32) appendString:v3];
  }
}

void sub_1A6C0A538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void recordStreetAddressValueForFieldOrMarkAsIgnored(void *a1, void *a2, int a3, void *a4, void *a5)
{
  LODWORD(v7) = a3;
  uint64_t v9 = a1;
  id v10 = a2;
  uint64_t v11 = a4;
  id v12 = a5;
  uint64_t v13 = [(WBSFormControlMetadata *)v11 uniqueID];
  id v14 = v10;
  unint64_t v15 = [MEMORY[0x1E4F1CA48] array];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = ___ZL22decomposeStreetAddressP8NSString20StreetDecomposeStyle_block_invoke;
  v19[3] = &unk_1E5C9B7E0;
  id v16 = v15;
  id v20 = v16;
  [v14 enumerateLinesUsingBlock:v19];
  if ([v16 count])
  {
    unint64_t v7 = v7;
    switch((int)v7)
    {
      case 0:
        goto LABEL_5;
      case 1:
        unint64_t v7 = 1;
        goto LABEL_5;
      case 2:
        unint64_t v7 = 2;
LABEL_5:
        if (v7 >= [v16 count]) {
          goto LABEL_8;
        }
        uint64_t v17 = [v16 objectAtIndex:v7];
        break;
      case 3:
        if ([v16 count] == 1) {
          goto LABEL_8;
        }
        [v16 removeObjectAtIndex:0];
        goto LABEL_10;
      default:
LABEL_10:
        uint64_t v17 = [v16 componentsJoinedByString:@", "];
        break;
    }
    unint64_t v18 = (__CFString *)v17;
  }
  else
  {
LABEL_8:
    unint64_t v18 = &stru_1EFBE3CF8;
  }

  if ([(__CFString *)v18 length]) {
    recordValueForTextField(v9, &v18->isa, v11);
  }
  else {
    [v12 addControlUniqueIDIgnoredByFollowUpAutoFill:v13];
  }
}

void sub_1A6C0A744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL22decomposeStreetAddressP8NSString20StreetDecomposeStyle_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = objc_msgSend(v5, "safari_stringByTrimmingWhitespace");
  uint64_t v4 = [v3 length];

  if (v4) {
    [*(id *)(a1 + 32) addObject:v5];
  }
}

void sub_1A6C0A81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL43controlsContainTextFieldWithControlUniqueIDP7NSArrayIP22WBSFormControlMetadataEP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 uniqueID];
  if ([v4 isEqualToString:*(void *)(a1 + 32)]) {
    uint64_t v5 = [v3 isTextField];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1A6C0A8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,SortEntry>::destruct(*(void ***)a1, (void **)(*(void *)a1 + 24 * v3));
  }
  uint64_t v4 = *(void ***)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,SortEntry>::destruct(void **a1, void **a2)
{
  if (a1 != a2)
  {
    unsigned int v3 = a1;
    do
    {

      uint64_t v4 = *v3;
      v3 += 3;
    }
    while (v3 != a2);
  }
}

uint64_t WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,SortEntry&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = *(id *)v3;
  *(void *)(v4 + 8) = *(id *)(v3 + 8);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(v3 + 16);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1A6C0AB2CLL);
    }
    unint64_t v3 = *(long long **)a1;
    uint64_t v4 = (long long *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 12));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,SortEntry>::move(v3, v4, v6);
    if (v3)
    {
      if (*(long long **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,SortEntry>::move(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)int v5 = 0;
      *((void *)v5 + 1) = 0;
      *(_OWORD *)a3 = v6;
      *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);

      unint64_t v7 = *(void **)v5;
      int v5 = (long long *)((char *)v5 + 24);

      a3 += 24;
    }
    while (v5 != a2);
  }
}

void sub_1A6C0ACBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C0AF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C0B2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C0B438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C0B5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id stringForKey(void *a1, uint64_t a2)
{
  uint64_t v2 = [a1 objectForKeyedSubscript:a2];
  if ([v2 isString])
  {
    unint64_t v3 = [v2 toString];
  }
  else
  {
    unint64_t v3 = 0;
  }

  return v3;
}

uint64_t SafariShared::FrameMetadata::FrameMetadata(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1EFBE1AB8;
  id v7 = v5;
  *(void *)(a1 + 48) = v7;
  id v8 = v6;
  *(void *)(a1 + 56) = v8;
  unint64_t v9 = (const OpaqueJSContext *)[*(id *)(a1 + 48) jsContextForMetadataControllerScriptWorld];
  if (!v9) {
    goto LABEL_16;
  }
  {
    SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[0] = (uint64_t)"FormMetadata.js";
    *(void *)algn_1E96E3FF8 = "FormMetadataJS";
    qword_1E96E4000 = (uint64_t)formMetadataSource;
    unk_1E96E4008 = formMetadataSourceLength;
    qword_1E96E4010 = 0;
    unk_1E96E4018 = "FormMetadataClassification.js";
    qword_1E96E4020 = (uint64_t)"FormMetadataClassificationJS";
    unk_1E96E4028 = formMetadataClassificationSource;
    qword_1E96E4030 = formMetadataClassificationSourceLength;
    unk_1E96E4038 = 0;
    qword_1E96E4040 = (uint64_t)"AutomaticPassword.js";
    unk_1E96E4048 = "AutomaticPasswordsJS";
    qword_1E96E4050 = (uint64_t)"//# sourceURL=__InjectedScript_AutomaticPasswords.js\n"
                               "/* Copyright (c) 2024 Apple Inc. All rights reserved. */\n"
                               "FormMetadata.prototype._collectExtraControlMetadata=function(t,o){let e=t.getAttribute(\""
                               "passwordrules\");o.ControlPasswordRules=e||void 0},FormMetadata.prototype.removeAutomatic"
                               "StrongPasswordFromPasswordElement=function(t){let o=this.formControlWithUniqueID(t);o&&th"
                               "is._isTextField(o)&&(this.clearField(t),this._updateAnnotationsForField(o),FormMetadataJS"
                               "Controller.setInputElementAutofilled(o,!1))};let AutomaticPasswords=function(){};Automati"
                               "cPasswords.prototype={removeAutomaticPasswordElements:function(t,o,e){for (let o of t)Form"
                               "MetadataJS.removeAutomaticStrongPasswordFromPasswordElement(o);if (!e)return;let r=documen"
                               "t.activeElement,a=o?FormMetadataJS.formControlWithUniqueID(o):null;a&&a.blur(),a&&a===r&&"
                               "a.focus()},blurControlWithID:function(t){let o=t?FormMetadataJS.formControlWithUniqueID(t"
                               "):null;o&&o.blur()},setStrongPasswordElementViewableIfAppropriate:function(t,o){for (let e"
                               " of t){let t=FormMetadataJS.formControlWithUniqueID(e);if (!t)return;if (\"text\"===t.type)"
                               "return FormMetadataJSController.setInputElementAutoFilledAndViewable(t,!1),void FormMetad"
                               "ataJSController.setInputElementAutofilled(t,!1);FormMetadataJSController.setInputElementA"
                               "utoFilledAndViewable(t,o)}}};var AutomaticPasswordsJS=new AutomaticPasswords;";
    unk_1E96E4058 = automaticPasswordsSourceLength;
    qword_1E96E4060 = 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    GlobalObject = JSContextGetGlobalObject(v9);
    SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[v10 + 1], (JSStringRef *)propertyName);
    BOOL HasProperty = JSObjectHasProperty(v9, GlobalObject, *(JSStringRef *)propertyName);
    if (*(void *)propertyName) {
      JSStringRelease(*(JSStringRef *)propertyName);
    }
    if (HasProperty) {
      goto LABEL_14;
    }
    if (!SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[v10 + 4]) {
      break;
    }
LABEL_11:
    *(void *)propertyName = 0;
    if (!JSScriptEvaluate() && *(void *)propertyName)
    {
      id v14 = (void *)WBS_LOG_CHANNEL_PREFIXAutoFill();
      SafariShared::JSUtilities::logExceptionInChannel(v14, v9, *(const OpaqueJSValue **)propertyName);
    }
LABEL_14:
    v10 += 5;
    if (v10 == 15)
    {
      SafariShared::JSController::addScriptObjectToGlobalObject((SafariShared::JSController *)a1, v9);
      SafariShared::JSController::scriptObjectReady((SafariShared::JSController *)a1, v9);
      goto LABEL_16;
    }
  }
  JSContextGetGroup(v9);
  uint64_t ReferencingImmortalASCIIText = JSScriptCreateReferencingImmortalASCIIText();
  if (ReferencingImmortalASCIIText)
  {
    SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[v10 + 4] = ReferencingImmortalASCIIText;

    goto LABEL_11;
  }
  id v16 = WBS_LOG_CHANNEL_PREFIXAutoFill();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[v10];
    *(_DWORD *)propertyName = 136446722;
    *(void *)&propertyName[4] = v17;
    __int16 v19 = 1024;
    int v20 = 0;
    __int16 v21 = 2114;
    uint64_t v22 = 0;
    _os_log_error_impl(&dword_1A6B5F000, v16, OS_LOG_TYPE_ERROR, "Failed to create script %{public}s: line %i: %{public}@", propertyName, 0x1Cu);
  }

LABEL_16:
  return a1;
}

void sub_1A6C0D74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, JSStringRef string)
{
  SafariShared::JSController::~JSController((WTF **)v11);
  _Unwind_Resume(a1);
}

JSClassRef SafariShared::FrameMetadata::staticJSClass(SafariShared::FrameMetadata *this)
{
    return (JSClassRef)SafariShared::FrameMetadata::staticJSClass(void)::jsClass;
  JSClassRef result = SafariShared::JSController::createJSClass(this);
  SafariShared::FrameMetadata::staticJSClass(void)::jsClass = (uint64_t)result;
  return result;
}

char **SafariShared::FrameMetadata::staticFunctions(SafariShared::FrameMetadata *this)
{
  return &SafariShared::FrameMetadata::staticFunctions(void)::staticFunctions;
}

JSValueRef SafariShared::jsSetInputElementAutofilled(JSContextRef ctx, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  if (a4 == (OpaqueJSValue *)2 && (unint64_t v9 = (id *)SafariShared::JSController::jsController(object)) != 0)
  {
    uint64_t v10 = v9;
    uint64_t v11 = objc_msgSend(v9[7], "formAutoFillNodeForJSWrapper:inContext:", JSValueToObject(ctx, *a5, 0), ctx);
    if (v11)
    {
      BOOL v12 = JSValueToBoolean(ctx, a5[1]);
      [v11 setHTMLInputElementAutofilled:v12];
      if (v12)
      {
        id v13 = v10[6];
        id v14 = v10[7];
        [v14 autoFilledField:v11 inFrame:v13];
      }
    }
    JSValueRef Undefined = JSValueMakeUndefined(ctx);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(ctx);
  }
}

void sub_1A6C0D908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSetInputElementAutoFilledAndViewable(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  unint64_t v9 = (id *)SafariShared::JSController::jsController(object);
  if (v9)
  {
    uint64_t v10 = objc_msgSend(v9[7], "formAutoFillNodeForJSWrapper:inContext:", JSValueToObject(this, *a5, 0), this);
    if (v10) {
      objc_msgSend(v10, "setHTMLInputElementAutoFilledAndViewable:", JSValueToBoolean(this, a5[1]));
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6C0D9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsFinishedAutoFillingControlsInForm(JSContextRef ctx, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, uint64_t *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  if (a4 == (OpaqueJSValue *)2 && (unint64_t v9 = (id *)SafariShared::JSController::jsController(object)) != 0)
  {
    uint64_t v10 = v9;
    uint64_t v11 = [WBSFormMetadata alloc];
    BOOL v12 = (void *)MEMORY[0x1E4F30938];
    uint64_t v13 = *a5;
    id v14 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(ctx)];
    unint64_t v15 = [v12 valueWithJSValueRef:v13 inContext:v14];
    id v16 = [(WBSFormMetadata *)v11 initWithJSValue:v15];

    id v17 = v10[7];
    id v18 = v10[6];
    objc_msgSend(v17, "finishedAutoFillingForm:inFrame:shouldSubmit:", v16, v18, JSValueToBoolean(ctx, (JSValueRef)a5[1]));

    JSValueRef Undefined = JSValueMakeUndefined(ctx);
    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(ctx);
  }
}

void sub_1A6C0DB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsFinishedAutoFillingOneTimeCode(JSContextRef ctx, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  if (a4 == (OpaqueJSValue *)2 && (unint64_t v9 = (id *)SafariShared::JSController::jsController(object)) != 0)
  {
    uint64_t v10 = v9;
    uint64_t v11 = JSValueToStringCopy(ctx, *a5, 0);
    BOOL v12 = (__CFString *)JSStringCopyCFString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v11);
    id v13 = v10[7];
    id v14 = v10[6];
    objc_msgSend(v13, "finishedAutoFillingOneTimeCode:inFrame:shouldSubmit:", v12, v14, JSValueToBoolean(ctx, a5[1]));

    JSValueRef Undefined = JSValueMakeUndefined(ctx);
    if (v11) {
      JSStringRelease(v11);
    }
    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(ctx);
  }
}

void sub_1A6C0DC6C(_Unwind_Exception *a1)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSetInputElementSpellCheckEnabled(JSContextRef ctx, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  if (a4 == (OpaqueJSValue *)2 && (unint64_t v9 = (id *)SafariShared::JSController::jsController(object)) != 0)
  {
    uint64_t v10 = objc_msgSend(v9[7], "formAutoFillNodeForJSWrapper:inContext:", JSValueToObject(ctx, *a5, 0), ctx);
    if (v10)
    {
      if (objc_opt_respondsToSelector()) {
        objc_msgSend(v10, "setHTMLInputElementSpellCheckEnabled:", JSValueToBoolean(ctx, a5[1]));
      }
    }
    JSValueRef Undefined = JSValueMakeUndefined(ctx);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(ctx);
  }
}

void sub_1A6C0DD74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSpecifierForAutocompleteTokensAndAddressBookLabel(SafariShared *this, const OpaqueJSContext *a2, NSString *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a4 != (OpaqueJSValue *)2)
  {
    if (!a6)
    {
LABEL_10:
      return JSValueMakeUndefined(this);
    }
    BOOL v12 = @"Expected two arguments, autocompleteTokens and addressBookLabel.";
LABEL_9:
    *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)v12, a3);
    goto LABEL_10;
  }
  if (JSValueIsUndefined(this, *a5)) {
    goto LABEL_3;
  }
  if (!JSValueIsArray(this, *a5))
  {
    if (!a6) {
      goto LABEL_10;
    }
    BOOL v12 = @"Expected an array of autocomplete tokens.";
    goto LABEL_9;
  }
  SafariShared::JSUtilities::translateJSValueToNS(this, *a5, (const OpaqueJSValue *)a3);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = [v14 countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (!v15) {
    goto LABEL_23;
  }
  uint64_t v16 = *(void *)v31;
  while (2)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      if (*(void *)v31 != v16) {
        objc_enumerationMutation(v14);
      }
      uint64_t v18 = *(void *)(*((void *)&v30 + 1) + 8 * i);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (a6) {
          *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)@"Expected autocomplete token to be a string.", v19);
        }
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_33;
      }
      int v20 = +[WBSFormToABBinder specifierForAutocompleteToken:](WBSFormToABBinder, "specifierForAutocompleteToken:", v18, (void)v30);
      __int16 v21 = v20;
      if (v20)
      {
        uint64_t v28 = [v20 dictionaryRepresentation];
        JSValueRef Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v28, v29);

LABEL_33:
        return Undefined;
      }
    }
    uint64_t v15 = [v14 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v15) {
      continue;
    }
    break;
  }
LABEL_23:

LABEL_3:
  if (JSValueIsUndefined(this, a5[1]) || JSValueIsNull(this, a5[1])) {
    return JSValueMakeNull(this);
  }
  if (JSValueIsString(this, a5[1]))
  {
    uint64_t v23 = SafariShared::JSUtilities::translateJSValueToNS(this, a5[1], v22);
    int v24 = +[WBSFormToABBinder specifierForLabel:v23];
    unint64_t v25 = v24;
    if (!v24)
    {

      return JSValueMakeNull(this);
    }
    uint64_t v26 = [v24 dictionaryRepresentation];
    JSValueRef Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v26, v27);
  }
  else
  {
    if (a6) {
      *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)@"Expected a string for addressBookLabel.", (NSString *)v22);
    }
    return JSValueMakeUndefined(this);
  }
  return Undefined;
}

void sub_1A6C0E098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSetInputElementAutoFilledAndObscured(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  unint64_t v9 = (id *)SafariShared::JSController::jsController(object);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = objc_msgSend(v9[7], "formAutoFillNodeForJSWrapper:inContext:", JSValueToObject(this, *a5, 0), this);
    if (v11)
    {
      BOOL v12 = JSValueToBoolean(this, a5[1]);
      [v11 setHTMLInputElementAutoFilledAndObscured:v12];
      if (v12)
      {
        id v13 = v10[6];
        id v14 = v10[7];
        [v14 autoFilledField:v11 inFrame:v13];
      }
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6C0E1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsDateFormatFromTemplate(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsString(this, *a5))
    {
      uint64_t v10 = SafariShared::JSUtilities::translateJSValueToNS(this, *a5, a3);
      if (JSValueIsUndefined(this, a5[1]))
      {
        uint64_t v11 = [MEMORY[0x1E4F1CA20] currentLocale];
      }
      else
      {
        if (!JSValueIsString(this, a5[1]))
        {
          if (a6) {
            *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)@"Expected locale to be a string or undefined.", v14);
          }
          JSValueRef Undefined = JSValueMakeUndefined(this);
          goto LABEL_19;
        }
        uint64_t v15 = (void *)MEMORY[0x1E4F1CA20];
        uint64_t v16 = SafariShared::JSUtilities::translateJSValueToNS(this, a5[1], (const OpaqueJSValue *)v14);
        uint64_t v11 = [v15 localeWithLocaleIdentifier:v16];
      }
      id v17 = [MEMORY[0x1E4F28C10] dateFormatFromTemplate:v10 options:0 locale:v11];
      JSValueRef Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v17, v18);

LABEL_19:
      return Undefined;
    }
    if (a6)
    {
      BOOL v12 = @"Expected template to be a string.";
      goto LABEL_9;
    }
  }
  else if (a6)
  {
    BOOL v12 = @"Expected two arguments, template and locale.";
LABEL_9:
    *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)v12, (NSString *)a3);
  }
  return JSValueMakeUndefined(this);
}

void sub_1A6C0E3A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsStringFromDateFormat(SafariShared *this, const OpaqueJSContext *a2, NSString *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  if (a4 != (OpaqueJSValue *)2)
  {
    if (!a6) {
      goto LABEL_12;
    }
    uint64_t v18 = @"Expected two arguments, format and date.";
LABEL_11:
    *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)v18, a3);
    goto LABEL_12;
  }
  if (!JSValueIsString(this, *a5))
  {
    if (!a6) {
      goto LABEL_12;
    }
    uint64_t v18 = @"Expected format to be a string.";
    goto LABEL_11;
  }
  if (JSValueIsDate(this, a5[1]))
  {
    uint64_t v10 = SafariShared::JSUtilities::translateJSValueToNS(this, *a5, (const OpaqueJSValue *)a3);
    BOOL v12 = SafariShared::JSUtilities::translateJSValueToNS(this, a5[1], v11);
    id v13 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    [v13 setDateFormat:v10];
    id v14 = [v13 stringFromDate:v12];
    uint64_t v16 = SafariShared::JSUtilities::translateNSToJSValue(this, v14, v15);

    return (JSValueRef)v16;
  }
  if (a6)
  {
    uint64_t v18 = @"Expected date to be a Date object instance.";
    goto LABEL_11;
  }
LABEL_12:
  return JSValueMakeUndefined(this);
}

void sub_1A6C0E504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char **SafariShared::FrameMetadata::staticValues(SafariShared::FrameMetadata *this)
{
  return &SafariShared::FrameMetadata::staticValues(void)::staticValues;
}

JSValueRef SafariShared::jsIsDebugConsoleLoggingEnabled(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  int v7 = objc_msgSend(MEMORY[0x1E4F97EA0], "isInternalInstall", a3, a4, a5);
  if (v7)
  {
    id v5 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    char v8 = [v5 BOOLForKey:@"WBSDebugAutoFillConsoleLoggingEnabled"];
  }
  else
  {
    char v8 = 0;
  }
  JSValueRef Boolean = JSValueMakeBoolean(this, v8);
  if (v7) {

  }
  return Boolean;
}

void sub_1A6C0E5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsAddressBookFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  id v6 = +[WBSFormToABBinder addressBookFieldLabelPatternMatchers];
  return makeJSFieldPatternMatcherArray(this, v6);
}

JSObjectRef SafariShared::jsEmailFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  id v6 = +[WBSFormToABBinder emailFieldLabelPatternMatchers];
  return makeJSFieldPatternMatcherArray(this, v6);
}

JSObjectRef SafariShared::jsCreditCardNumberFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardNumberFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = WBSCreditCardNumberFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsCreditCardNumberFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0E754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsCreditCardSecurityCodeFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardSecurityCodeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = WBSCreditCardSecurityCodeFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsCreditCardSecurityCodeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0E860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsCreditCardCardholderFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardCardholderFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = WBSCreditCardCardholderFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsCreditCardCardholderFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0E96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsCreditCardTypeFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardTypeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = WBSCreditCardTypeFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsCreditCardTypeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0EA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNonCreditCardCardNumberFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsNonCreditCardCardNumberFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = WBSNonCreditCardCardNumberFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsNonCreditCardCardNumberFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0EB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsDayFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsDayFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = SafariShared::dayFieldLabels(this);
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:1];

    id v5 = v9;
    SafariShared::jsDayFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0EC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsMonthFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsMonthFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = SafariShared::monthFieldLabels(this);
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:1];

    id v5 = v9;
    SafariShared::jsMonthFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0ED9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsYearFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsYearFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = SafariShared::yearFieldLabels(this);
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:1];

    id v5 = v9;
    SafariShared::jsYearFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0EEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsCreditCardCompositeExpirationDateFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardCompositeExpirationDateFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = WBSCreditCardCompositeExpirationDateFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsCreditCardCompositeExpirationDateFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0EFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsIgnoredDataTypeFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsIgnoredDataTypeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = ignoredDataTypeFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:1];

    id v5 = v9;
    SafariShared::jsIgnoredDataTypeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0F0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = oneTimeCodeFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:1];

    id v5 = v9;
    SafariShared::jsOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0F1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsWeakOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsWeakOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = WeakOneTimeCodeFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:1];

    id v5 = v9;
    SafariShared::jsWeakOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0F2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsUsernameFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsUsernameFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = usernameFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsUsernameFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0F3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNonAccountPasswordSecureTextEntryFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsNonAccountPasswordSecureTextEntryFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = nonAccountPasswordSecureTextEntryFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsNonAccountPasswordSecureTextEntryFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0F4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNonUsernameFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsNonUsernameFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = nonUsernameFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsNonUsernameFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0F5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNonEmailFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsNonEmailFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = nonEmailFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsNonEmailFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0F708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsOldPasswordFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsOldPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = oldPasswordFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsOldPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0F814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsPasswordFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = passwordFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0F920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsConfirmPasswordFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsConfirmPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = confirmPasswordFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsConfirmPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0FA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsConfirmEmailFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsConfirmEmailFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = confirmEmailFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsConfirmEmailFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0FB38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsShowHideButtonLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsShowHideButtonLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = showHideButtonLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsShowHideButtonLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0FC44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsSearchFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsSearchFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = searchFieldLabels();
    v11[0] = v7;
    char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    unint64_t v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v8 allowingEndOfWordMatches:0];

    id v5 = v9;
    SafariShared::jsSearchFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0FD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsLoginFormTypePatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (__WBSFieldLabelPatternMatcherArray *)SafariShared::jsLoginFormTypePatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = mapOfKeywordsIndicatingLoginFormTypeToScoreForMatching();
    char v8 = [v7 allKeys];
    v11[0] = v8;
    unint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    id v5 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v9 allowingEndOfWordMatches:0];

    SafariShared::jsLoginFormTypePatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v5;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0FE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNewAccountFormTypePatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  {
    id v5 = (__WBSFieldLabelPatternMatcherArray *)SafariShared::jsNewAccountFormTypePatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    uint64_t v10 = this;
    int v7 = mapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching();
    char v8 = [v7 allKeys];
    v11[0] = v8;
    unint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
    id v5 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:v9 allowingEndOfWordMatches:0];

    SafariShared::jsNewAccountFormTypePatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v5;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A6C0FF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::jsMapOfKeywordsIndicatingLoginFormTypeToScoreForMatching(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  mapOfKeywordsIndicatingLoginFormTypeToScoreForMatching();
  id v6 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = SafariShared::JSUtilities::translateNSToJSValue(this, v6, v7);

  return v8;
}

void sub_1A6C10008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::jsMapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  mapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching();
  id v6 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = SafariShared::JSUtilities::translateNSToJSValue(this, v6, v7);

  return v8;
}

void sub_1A6C1005C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::jsMapOfKeywordsIndicatingChangePasswordFormTypeToScoreForMatching(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  updateCachedArraysIfNeeded();
  int v7 = (const OpaqueJSContext *)cachedMapOfKeywordsIndicatingChangePasswordFormTypeToScoreForMatching;
  return SafariShared::JSUtilities::translateNSToJSValue(this, v7, v6);
}

uint64_t SafariShared::jsKeywordsIndicatingNonAutoFillableFormType(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  updateCachedArraysIfNeeded();
  int v7 = (const OpaqueJSContext *)cachedKeywordsIndicatingNonAutoFillableFormType;
  return SafariShared::JSUtilities::translateNSToJSValue(this, v7, v6);
}

uint64_t SafariShared::jsRegularExpressionsForForgotPasswordAffordance(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  updateCachedArraysIfNeeded();
  int v7 = (const OpaqueJSContext *)cachedRegularExpressionsForForgotPasswordAffordance;
  return SafariShared::JSUtilities::translateNSToJSValue(this, v7, v6);
}

uint64_t SafariShared::jsRegularExpressionsForForgotUserNameAffordance(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  updateCachedArraysIfNeeded();
  int v7 = (const OpaqueJSContext *)cachedRegularExpressionsForForgotUserNameAffordance;
  return SafariShared::JSUtilities::translateNSToJSValue(this, v7, v6);
}

uint64_t SafariShared::jsRegularExpressionsForForgotEmailAffordance(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  updateCachedArraysIfNeeded();
  int v7 = (const OpaqueJSContext *)cachedRegularExpressionsForForgotEmailAffordance;
  return SafariShared::JSUtilities::translateNSToJSValue(this, v7, v6);
}

JSValueRef SafariShared::jsNextControlUniqueID(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  return JSValueMakeNumber(this, (double)++SafariShared::jsNextControlUniqueID(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::lastUsedControlUniqueID);
}

JSValueRef SafariShared::jsNextFormUniqueID(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  return JSValueMakeNumber(this, (double)++SafariShared::jsNextFormUniqueID(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::lastUsedFormUniqueID);
}

JSValueRef SafariShared::jsShouldIncludeNonEmptyFields(SafariShared *this, JSObjectRef object, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  id v6 = (id *)SafariShared::JSController::jsController(object);
  if (v6)
  {
    id v7 = v6[7];
    JSValueRef Boolean = JSValueMakeBoolean(this, [v7 shouldIncludeNonEmptyFields]);

    return Boolean;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6C10250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::FrameMetadata::getFormsAndMetadata(uint64_t a1, unint64_t a2, JSObjectRef *a3, JSValueRef *a4)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  *a4 = 0;
  id v7 = (SafariShared::JSUtilities *)[*(id *)(a1 + 48) jsContextForMetadataControllerScriptWorld];
  if (!v7) {
    return 0;
  }
  unint64_t v9 = v7;
  JSObjectRef v10 = SafariShared::JSUtilities::globalJSObjectByName(v7, (const OpaqueJSContext *)"FormMetadataJS", v8);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v10;
  v18[0] = JSValueMakeNumber(v9, (double)a2);
  BOOL v12 = SafariShared::JSUtilities::callJSMethodWithArguments(v9, v11, (OpaqueJSValue *)"formsAndMetadata", (const char *)v18, (const OpaqueJSValue *const *)1);
  if (!v12) {
    return 0;
  }
  id v13 = JSValueToObject(v9, v12, 0);
  if (!v13) {
    return 0;
  }
  id v14 = v13;
  PropertyAtIndex = JSObjectGetPropertyAtIndex(v9, v13, 0, 0);
  *a3 = JSValueToObject(v9, PropertyAtIndex, 0);
  uint64_t v16 = 1;
  *a4 = JSObjectGetPropertyAtIndex(v9, v14, 1u, 0);
  return v16;
}

uint64_t SafariShared::FrameMetadata::getFormsAndMetadata(uint64_t a1, unint64_t a2, JSObjectRef *a3, void **a4)
{
  JSValueRef v18 = 0;
  uint64_t result = SafariShared::FrameMetadata::getFormsAndMetadata(a1, a2, a3, &v18);
  if (result)
  {
    uint64_t result = [*(id *)(a1 + 48) jsContextForMetadataControllerScriptWorld];
    if (result)
    {
      id v7 = (void *)MEMORY[0x1E4F30938];
      JSValueRef v8 = v18;
      unint64_t v9 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext((JSContextRef)result)];
      JSObjectRef v10 = [v7 valueWithJSValueRef:v8 inContext:v9];

      [MEMORY[0x1E4F1CA48] array];
      unint64_t v11 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      while (1)
      {
        BOOL v12 = [v10 objectForKeyedSubscript:@"length"];
        unsigned int v13 = [v12 toUInt32];

        if (v11 >= v13) {
          break;
        }
        id v14 = *a4;
        uint64_t v15 = [WBSFormMetadata alloc];
        uint64_t v16 = [v10 objectAtIndexedSubscript:v11];
        id v17 = [(WBSFormMetadata *)v15 initWithJSValue:v16];
        [v14 addObject:v17];

        ++v11;
      }

      return 1;
    }
  }
  return result;
}

void sub_1A6C104E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::FrameMetadata::metadataForAllForms(uint64_t a1, unint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  long long v33 = 0;
  if (SafariShared::FrameMetadata::getFormsAndMetadata(a1, a2, &v34, &v33)
    && (uint64_t v3 = [*(id *)(a1 + 48) jsContextForMetadataControllerScriptWorld]) != 0)
  {
    uint64_t v4 = v3;
    id v20 = [MEMORY[0x1E4F1CA48] array];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id obj = v33;
    uint64_t v19 = [obj countByEnumeratingWithState:&v29 objects:v36 count:16];
    if (v19)
    {
      uint64_t v18 = *(void *)v30;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v30 != v18) {
            objc_enumerationMutation(obj);
          }
          __int16 v21 = *(SafariShared **)(*((void *)&v29 + 1) + 8 * i);
          uint64_t v22 = [(SafariShared *)v21 controls];
          id v5 = [MEMORY[0x1E4F1CA48] array];
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          id v24 = v22;
          uint64_t v6 = [v24 countByEnumeratingWithState:&v25 objects:v35 count:16];
          if (v6)
          {
            uint64_t v7 = *(void *)v26;
            do
            {
              for (uint64_t j = 0; j != v6; ++j)
              {
                if (*(void *)v26 != v7) {
                  objc_enumerationMutation(v24);
                }
                unint64_t v9 = *(void **)(*((void *)&v25 + 1) + 8 * j);
                JSObjectRef v10 = [v9 uniqueID];
                [v5 addObject:v9];
                unint64_t v11 = objc_msgSend(*(id *)(a1 + 56), "formAutoFillNodeForJSWrapper:inContext:", controlObject(*(void **)(a1 + 48), v10), v4);
                if (v11)
                {
                  BOOL v12 = (void *)[v9 mutableCopy];
                  SafariShared::addAdditionalControlMetadata(v12, v11);
                  unsigned int v13 = (void *)[v12 copy];
                  objc_msgSend(v5, "setObject:atIndexedSubscript:", v13, objc_msgSend(v5, "count") - 1);
                }
              }
              uint64_t v6 = [v24 countByEnumeratingWithState:&v25 objects:v35 count:16];
            }
            while (v6);
          }

          SafariShared::addPasswordRequirementsToFormMetadata(v21, v14);
          uint64_t v15 = [(SafariShared *)v21 formMetadataByReplacingControlsWith:v5];
          [v20 addObject:v15];
        }
        uint64_t v19 = [obj countByEnumeratingWithState:&v29 objects:v36 count:16];
      }
      while (v19);
    }
  }
  else
  {
    id v20 = 0;
  }
  return v20;
}

void sub_1A6C10800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

const OpaqueJSContext *controlObject(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  id v5 = v4;
  uint64_t v6 = 0;
  if (v3)
  {
    if (v4)
    {
      uint64_t v7 = (SafariShared::JSUtilities *)[v3 jsContextForMetadataControllerScriptWorld];
      uint64_t v6 = v7;
      if (v7)
      {
        unint64_t v9 = SafariShared::JSUtilities::globalJSObjectByName(v7, (const OpaqueJSContext *)"FormMetadataJS", v8);
        if (v9)
        {
          JSObjectRef v10 = JSStringCreateWithCFString(v5);
          *(void *)unsigned int v13 = JSValueMakeString(v6, v10);
          unint64_t v11 = SafariShared::JSUtilities::callJSMethodWithArguments(v6, v9, (OpaqueJSValue *)"formControlWithUniqueID", v13, (const OpaqueJSValue *const *)1);
          if (v11)
          {
            uint64_t v6 = JSValueToObject(v6, v11, 0);
            if (!v10) {
              goto LABEL_11;
            }
            goto LABEL_10;
          }
          uint64_t v6 = 0;
          if (v10) {
LABEL_10:
          }
            JSStringRelease(v10);
        }
        else
        {
          uint64_t v6 = 0;
        }
      }
    }
  }
LABEL_11:

  return v6;
}

void sub_1A6C109A4(_Unwind_Exception *a1)
{
  if (v3) {
    JSStringRelease(v3);
  }

  _Unwind_Resume(a1);
}

void SafariShared::addAdditionalControlMetadata(void *a1, void *a2)
{
  id v10 = a1;
  id v3 = a2;
  [v3 elementBounds];
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  objc_msgSend(v10, "setRectLeft:");
  [v10 setRectTop:v5];
  [v10 setRectWidth:v7];
  [v10 setRectHeight:v9];
  objc_msgSend(v10, "setAutoFillButtonType:", objc_msgSend(v3, "htmlInputElementAutoFillButtonType"));
  objc_msgSend(v10, "setLastAutoFillButtonType:", objc_msgSend(v3, "htmlInputElementLastAutoFillButtonType"));
}

void sub_1A6C10A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::addPasswordRequirementsToFormMetadata(SafariShared *this, WBSFormMetadata *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this;
  if ((unint64_t)([(SafariShared *)v2 type] - 6) > 0xFFFFFFFFFFFFFFFDLL)
  {
    id v3 = [(SafariShared *)v2 passwordElementUniqueID];
    long long v33 = v3;
    long long v36 = [(SafariShared *)v2 confirmPasswordElementUniqueID];
    uint64_t v4 = [v3 length];
    BOOL v5 = v4 != 0;
    uint64_t v6 = [v36 length];
    BOOL v7 = v6 != 0;
    if (!(v4 | v6))
    {
      [(SafariShared *)v2 setPasswordRequirements:0];
LABEL_52:

      goto LABEL_53;
    }
    [(SafariShared *)v2 controls];
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = [v8 countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v9)
    {
      JSObjectRef v34 = 0;
      uint64_t v35 = 0;
      uint64_t v10 = *(void *)v38;
LABEL_6:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v38 != v10) {
          objc_enumerationMutation(v8);
        }
        if (!v5 && !v7) {
          goto LABEL_25;
        }
        BOOL v12 = *(void **)(*((void *)&v37 + 1) + 8 * v11);
        unsigned int v13 = [v12 uniqueID];
        id v14 = v13;
        if (v13)
        {
          if (v5 && ([v13 isEqualToString:v3] & 1) != 0)
          {
            BOOL v5 = 0;
            uint64_t v15 = v35;
            uint64_t v35 = v12;
          }
          else
          {
            if (!v7)
            {
              BOOL v7 = 0;
              goto LABEL_20;
            }
            if (![v14 isEqualToString:v36])
            {
              BOOL v7 = 1;
              goto LABEL_20;
            }
            BOOL v7 = 0;
            uint64_t v15 = v34;
            JSObjectRef v34 = v12;
          }
          id v16 = v12;

          id v3 = v33;
        }
LABEL_20:

        if (v9 == ++v11)
        {
          uint64_t v9 = [v8 countByEnumeratingWithState:&v37 objects:v41 count:16];
          if (v9) {
            goto LABEL_6;
          }
          goto LABEL_25;
        }
      }
    }
    JSObjectRef v34 = 0;
    uint64_t v35 = 0;
LABEL_25:

    id v17 = [v35 passwordRules];
    if ([v17 length])
    {
      uint64_t v18 = [MEMORY[0x1E4F97F70] parsePasswordRules:v17 error:0];
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = [v34 passwordRules];

    if ([v19 length])
    {
      long long v32 = [MEMORY[0x1E4F97F70] parsePasswordRules:v19 error:0];
      if (v18 && v32)
      {
        uint64_t v30 = [MEMORY[0x1E4F97F70] mergePasswordRuleSet:v18 withPasswordRuleSet:v32];
        goto LABEL_37;
      }
    }
    else
    {
      long long v32 = 0;
    }
    if (v18)
    {
      id v20 = v18;
    }
    else
    {
      id v20 = v32;
      long long v32 = v20;
    }
    uint64_t v30 = (uint64_t)v20;
LABEL_37:
    uint64_t v21 = objc_msgSend(v35, "maxLength", v30);
    uint64_t v22 = [v35 minLength];
    uint64_t v23 = [v34 maxLength];
    uint64_t v24 = [v34 minLength];
    if (v21 < v23) {
      uint64_t v23 = v21;
    }
    if (v22 <= v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = v22;
    }
    long long v26 = (void *)MEMORY[0x1E4F97F60];
    if (v25)
    {
      long long v27 = [NSNumber numberWithInteger:v25];
      if (v23)
      {
LABEL_44:
        long long v28 = [NSNumber numberWithInteger:v23];
LABEL_47:
        long long v29 = [v26 requirementsForPasswordRuleSet:v31 respectingMinLength:v27 maxLength:v28];
        [(SafariShared *)v2 setPasswordRequirements:v29];

        if (v23) {
        if (v25)
        }

        goto LABEL_52;
      }
    }
    else
    {
      long long v27 = 0;
      if (v23) {
        goto LABEL_44;
      }
    }
    long long v28 = 0;
    goto LABEL_47;
  }
  [(SafariShared *)v2 setPasswordRequirements:0];
LABEL_53:
}

void sub_1A6C10EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::FrameMetadata::currentMetadataForForm(uint64_t a1, OpaqueJSValue *a2, unint64_t a3)
{
  v58[16] = *(JSStringRef *)MEMORY[0x1E4F143B8];
  JSValueRef value = 0;
  JSObjectRef object = 0;
  if (!SafariShared::FrameMetadata::getFormsAndMetadata(a1, a3, &object, &value)) {
    return 0;
  }
  BOOL v5 = (const OpaqueJSContext *)[*(id *)(a1 + 48) jsContextForMetadataControllerScriptWorld];
  if (!v5) {
    return 0;
  }
  ctx = v5;
  long long v40 = JSValueToObject(v5, value, 0);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"length", v58);
  Property = JSObjectGetProperty(ctx, v40, v58[0], 0);
  double v7 = JSValueToNumber(ctx, Property, 0);
  if (v58[0]) {
    JSStringRelease(v58[0]);
  }
  id v34 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if ((unint64_t)v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = object;
    do
    {
      PropertyAtIndex = JSObjectGetPropertyAtIndex(ctx, v9, v8, 0);
      if (JSValueToObject(ctx, PropertyAtIndex, 0) == a2)
      {
        uint64_t v11 = [NSNumber numberWithUnsignedInteger:v8];
        [v34 addObject:v11];
      }
      ++v8;
    }
    while ((unint64_t)v7 != v8);
  }
  uint64_t v12 = [v34 count];
  if (v12)
  {
    if (v12 == 1)
    {
      long long v38 = [v34 objectAtIndexedSubscript:0];
      JSValueRef v13 = JSObjectGetPropertyAtIndex(ctx, v40, [v38 unsignedIntegerValue], 0);
    }
    else
    {
      long long v38 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(ctx)];
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id obj = v34;
      uint64_t v39 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
      if (v39)
      {
        unsigned int propertyIndex = 0;
        uint64_t v37 = *(void *)v48;
        uint64_t v43 = -1;
        do
        {
          for (uint64_t i = 0; i != v39; ++i)
          {
            if (*(void *)v48 != v37) {
              objc_enumerationMutation(obj);
            }
            uint64_t v42 = *(void **)(*((void *)&v47 + 1) + 8 * i);
            JSValueRef v15 = JSObjectGetPropertyAtIndex(ctx, v40, [v42 unsignedIntegerValue], 0);
            id v16 = [WBSFormMetadata alloc];
            id v17 = [MEMORY[0x1E4F30938] valueWithJSValueRef:v15 inContext:v38];
            uint64_t v18 = [(WBSFormMetadata *)v16 initWithJSValue:v17];

            id v45 = v18;
            uint64_t v19 = [(WBSFormMetadata *)v45 firstCreditCardCardholderFieldOrCreditCardNumberFieldUniqueID];
            id v20 = [(WBSFormMetadata *)v45 userNameElementUniqueID];
            uint64_t v21 = [(WBSFormMetadata *)v45 passwordElementUniqueID];
            uint64_t v22 = [(WBSFormMetadata *)v45 confirmPasswordElementUniqueID];
            uint64_t v23 = v19 != 0;
            uint64_t v24 = 1;
            if (v19) {
              uint64_t v24 = 2;
            }
            if (v20) {
              uint64_t v23 = v24;
            }
            if (v21) {
              ++v23;
            }
            uint64_t v46 = (void *)v22;
            if (v22) {
              uint64_t v25 = v23 + 1;
            }
            else {
              uint64_t v25 = v23;
            }
            if (v25)
            {
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              long long v26 = [(WBSFormMetadata *)v45 controls];
              uint64_t v27 = [v26 countByEnumeratingWithState:&v53 objects:v58 count:16];
              if (v27)
              {
                uint64_t v28 = *(void *)v54;
                do
                {
                  for (uint64_t j = 0; j != v27; ++j)
                  {
                    if (*(void *)v54 != v28) {
                      objc_enumerationMutation(v26);
                    }
                    uint64_t v30 = *(void **)(*((void *)&v53 + 1) + 8 * j);
                    long long v31 = [v30 uniqueID];
                    if (([v31 isEqualToString:v19] & 1) != 0
                      || ([v31 isEqualToString:v20] & 1) != 0
                      || ([v31 isEqualToString:v21] & 1) != 0
                      || [v31 isEqualToString:v46])
                    {
                      long long v32 = [v30 value];
                      if ([v32 length]) {
                        v25 += 10;
                      }
                    }
                  }
                  uint64_t v27 = [v26 countByEnumeratingWithState:&v53 objects:v58 count:16];
                }
                while (v27);
              }
            }
            if (v25 > v43)
            {
              unsigned int propertyIndex = [v42 unsignedIntegerValue];
              uint64_t v43 = v25;
            }
          }
          uint64_t v39 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
        }
        while (v39);
      }
      else
      {
        unsigned int propertyIndex = 0;
      }

      JSValueRef v13 = JSObjectGetPropertyAtIndex(ctx, v40, propertyIndex, 0);
    }
    JSValueRef v14 = v13;
  }
  else
  {
    JSValueRef v14 = 0;
  }

  return v14;
}

void sub_1A6C11490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::FrameMetadata::lockedMetadataForForm(id *this, OpaqueJSValue *a2)
{
  uint64_t v3 = [this[6] jsContextForMetadataControllerScriptWorld];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (const OpaqueJSContext *)v3;
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"_safariLockedFormMetadata", &propertyName);
  if (JSObjectHasProperty(v4, a2, propertyName)) {
    JSValueRef Property = JSObjectGetProperty(v4, a2, propertyName, 0);
  }
  else {
    JSValueRef Property = 0;
  }
  if (propertyName) {
    JSStringRelease(propertyName);
  }
  return Property;
}

void sub_1A6C11640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string) {
    JSStringRelease(string);
  }
  _Unwind_Resume(exception_object);
}

WBSFormMetadata *SafariShared::FrameMetadata::metadataForForm(id *a1, OpaqueJSValue *a2, unint64_t a3)
{
  uint64_t v6 = [a1[6] jsContextForMetadataControllerScriptWorld];
  if (v6
    && (double v7 = (const OpaqueJSContext *)v6, (v8 = SafariShared::FrameMetadata::jsMetadataForForm(a1, a2, a3)) != 0))
  {
    JSValueRef v9 = v8;
    uint64_t v10 = [WBSFormMetadata alloc];
    uint64_t v11 = (void *)MEMORY[0x1E4F30938];
    uint64_t v12 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(v7)];
    JSValueRef v13 = [v11 valueWithJSValueRef:v9 inContext:v12];
    JSValueRef v14 = [(WBSFormMetadata *)v10 initWithJSValue:v13];
  }
  else
  {
    JSValueRef v14 = 0;
  }
  return v14;
}

void sub_1A6C11740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::FrameMetadata::jsMetadataForForm(id *this, OpaqueJSValue *a2, unint64_t a3)
{
  if (a3 || (JSValueRef result = SafariShared::FrameMetadata::lockedMetadataForForm(this, a2)) == 0)
  {
    return SafariShared::FrameMetadata::currentMetadataForForm((uint64_t)this, a2, a3);
  }
  return result;
}

void sub_1A6C11830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1191C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::JSUtilities::translateNSToJSValue(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, objc_object *a3)
{
  uint64_t v4 = a2;
  BOOL v5 = (void *)MEMORY[0x1E4F30938];
  uint64_t v6 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
  double v7 = [v5 valueWithObject:v4 inContext:v6];
  uint64_t v8 = [v7 JSValueRef];

  return v8;
}

void sub_1A6C119C8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C11C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C11D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C11E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1200C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1218C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C122BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, JSStringRef string)
{
  _Unwind_Resume(a1);
}

void sub_1A6C12450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C12560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1261C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C126F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C12910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C12AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C12BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C12D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1A6C12DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C12EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C12F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1307C(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v2, 0x10A1C406DF74740);

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (JSValueRef result = WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = ~(*a2 << 32) + *a2;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  JSValueRef v14 = (uint64_t *)(v6 + 16 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    id v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(unsigned int *)(v6 - 4);
        }
        char v26 = 0;
        uint64_t v27 = v6 + 16 * v20;
        goto LABEL_33;
      }
      if (v15 == -1) {
        id v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      JSValueRef v14 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      uint64_t *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v9 = *a2;
      JSValueRef v14 = v16;
    }
  }
  JSValueRef result = (uint64_t *)v14[1];
  uint64_t *v14 = v9;
  v14[1] = 0;
  if (result) {
    JSValueRef result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v21 = *v4;
  if (*v4) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23) {
      goto LABEL_27;
    }
  }
  else if (3 * v24 > 4 * v23)
  {
    goto LABEL_27;
  }
  JSValueRef result = WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::expand(v4, v14);
  JSValueRef v14 = result;
  uint64_t v21 = *v4;
  if (!*v4)
  {
    uint64_t v25 = 0;
    goto LABEL_32;
  }
LABEL_27:
  uint64_t v25 = *(unsigned int *)(v21 - 4);
LABEL_32:
  uint64_t v27 = v21 + 16 * v25;
  char v26 = 1;
LABEL_33:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v27;
  *(unsigned char *)(a3 + 16) = v26;
  return result;
}

void sub_1A6C134A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C13660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, void *a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C13714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C137EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C13870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C13978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C13C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6C13D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C13E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string) {
    JSStringRelease(string);
  }

  _Unwind_Resume(a1);
}

void sub_1A6C13F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string) {
    JSStringRelease(string);
  }

  _Unwind_Resume(a1);
}

void sub_1A6C143CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, const OpaqueJSContext *a16, SafariShared::JSUtilities *a17, void *a18)
{
  SafariShared::JSUtilities::callJSMethodWithArguments(a17, a16, (OpaqueJSValue *)"clearTextFieldOrSelectElementMetadataCache", 0, 0);
  uint64_t v23 = *(void **)(v19 + 16);
  *(void *)(v19 + 16) = 0;

  _Unwind_Resume(a1);
}

void sub_1A6C1467C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C147AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C148E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C14A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C14B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1A6C14CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  _Unwind_Resume(a1);
}

BOOL SafariShared::jsObjectHasOnBeforeUnloadProperty(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3)
{
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"onbeforeunload", &propertyName);
  JSValueRef Property = JSObjectGetProperty(this, a2, propertyName, 0);
  if (propertyName) {
    JSStringRelease(propertyName);
  }
  uint64_t v6 = objc_msgSend(NSString, "safari_stringWithJSValue:context:nullStringPolicy:", Property, this, 2);
  BOOL v7 = [v6 length] != 0;

  return v7;
}

void sub_1A6C14D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  unint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1A6C15100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id getField(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  BOOL v7 = [a2 uniqueID];
  int v8 = [v5 formAutoFillNodeForField:v7 inFrame:v6];

  return v8;
}

void sub_1A6C15208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isUsernameFieldInLoginForm(WBSFormControlMetadata *a1, WBSFormMetadata *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  if ([(WBSFormMetadata *)v4 type] == 3)
  {
    id v5 = [(WBSFormMetadata *)v4 userNameElementUniqueID];
    if (v5)
    {
      id v6 = [(WBSFormControlMetadata *)v3 uniqueID];
      uint64_t v7 = [v5 isEqualToString:v6];
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1A6C152CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C15504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1568C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C15758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C158DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C15B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C15BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C15E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1603C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C161E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C162E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C163D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C16514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1A6C165B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C16694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C16C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C16D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  _Unwind_Resume(a1);
}

void sub_1A6C16E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C16FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::FrameMetadata::~FrameMetadata(id *this)
{
  SafariShared::JSController::~JSController((WTF **)this);
}

{
  uint64_t vars8;

  SafariShared::JSController::~JSController((WTF **)this);
  JUMPOUT(0x1AD0C4750);
}

const char *SafariShared::FrameMetadata::scriptObjectName(SafariShared::FrameMetadata *this)
{
  return "FormMetadataJS";
}

JSObjectRef makeJSFieldPatternMatcherArray(const OpaqueJSContext *a1, const __WBSFieldLabelPatternMatcherArray *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int64_t Count = WBSFieldLabelPatternMatcherArrayGetCount((uint64_t)a2);
  MEMORY[0x1F4188790]();
  id v6 = (const JSValueRef *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v5 >= 0x200) {
    size_t v7 = 512;
  }
  else {
    size_t v7 = v5;
  }
  bzero((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  if (Count >= 1)
  {
    for (uint64_t i = 0; i != Count; ++i)
    {
      PatternMatcherAtIndex = (void *)WBSFieldLabelPatternMatcherArrayGetPatternMatcherAtIndex((uint64_t)a2, i);
      {
        uint64_t v10 = (OpaqueJSClass *)makeJSFieldPatternMatcher(OpaqueJSContext const*,__WBSFieldLabelPatternMatcher const*)::jsClass;
      }
      else
      {
        v16[2] = xmmword_1EFBE20F8;
        v16[3] = unk_1EFBE2108;
        uint64_t v17 = qword_1EFBE2118;
        v16[0] = xmmword_1EFBE20D8;
        v16[1] = unk_1EFBE20E8;
        memset(&definition.staticFunctions, 0, 96);
        *(void *)&definition.version = 0;
        *(_OWORD *)&definition.parentClass = 0u;
        definition.className = "FieldPatternMatcher";
        definition.staticFunctions = (const JSStaticFunction *)v16;
        JSValueRef v14 = PatternMatcherAtIndex;
        JSClassRef v11 = JSClassCreate(&definition);
        PatternMatcherAtIndex = v14;
        uint64_t v10 = v11;
        makeJSFieldPatternMatcher(OpaqueJSContext const*,__WBSFieldLabelPatternMatcher const*)::jsClass = (uint64_t)v11;
      }
      v6[i] = JSObjectMake(a1, v10, PatternMatcherAtIndex);
    }
  }
  *(void *)&definition.version = 0;
  return JSObjectMakeArray(a1, Count, v6, (JSValueRef *)&definition);
}

uint64_t jsFieldPatternMatcherSearchReverse(const OpaqueJSContext *a1, OpaqueJSValue *a2, OpaqueJSValue *a3, uint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6)
{
  return callPatternMatcherFunction<CFRange (*)(__WBSFieldLabelPatternMatcher const*,unsigned short const*,long)>(a1, a3, a4, a5, (uint64_t (*)(void *, const JSChar *, size_t))WBSFieldLabelPatternMatcherSearchReverse);
}

uint64_t jsFieldPatternMatcherLongestMatch(const OpaqueJSContext *a1, OpaqueJSValue *a2, OpaqueJSValue *a3, uint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6)
{
  return callPatternMatcherFunction<CFRange (*)(__WBSFieldLabelPatternMatcher const*,unsigned short const*,long)>(a1, a3, a4, a5, (uint64_t (*)(void *, const JSChar *, size_t))WBSFieldLabelPatternMatcherFindLongestMatch);
}

uint64_t callPatternMatcherFunction<CFRange (*)(__WBSFieldLabelPatternMatcher const*,unsigned short const*,long)>(const OpaqueJSContext *a1, OpaqueJSValue *a2, uint64_t a3, JSValueRef *a4, uint64_t (*a5)(void *, const JSChar *, size_t))
{
  if (!a3) {
    return 0;
  }
  JSStringRef v8 = JSValueToStringCopy(a1, *a4, 0);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  Private = JSObjectGetPrivate(a2);
  CharactersPtr = JSStringGetCharactersPtr(v9);
  size_t Length = JSStringGetLength(v9);
  uint64_t v13 = a5(Private, CharactersPtr, Length);
  if (v13 == -1)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v15 = JSStringCreateWithCharacters(&CharactersPtr[v13], v14);
    uint64_t v17 = SafariShared::JSUtilities::nsString(v15, v16);
    uint64_t v18 = [v17 lowercaseString];
    uint64_t v19 = +[WBSFormToABBinder specifierForLabel:v18];

    id v20 = objc_alloc(MEMORY[0x1E4F1C978]);
    uint64_t v21 = [v19 property];
    int v22 = [v19 category];
    uint64_t v23 = [v19 parentProperty];
    unint64_t v24 = (const OpaqueJSContext *)objc_msgSend(v20, "initWithObjects:", v17, v21, v22, v23, 0);

    uint64_t v26 = SafariShared::JSUtilities::translateNSToJSValue(a1, v24, v25);
    if (v15) {
      JSStringRelease(v15);
    }
  }
  JSStringRelease(v9);
  return v26;
}

void sub_1A6C17438(_Unwind_Exception *a1)
{
  if (v2) {
    JSStringRelease(v2);
  }
  JSStringRelease(v1);
  _Unwind_Resume(a1);
}

id SafariShared::dayFieldLabels(SafariShared *this)
{
  updateCachedArraysIfNeeded();
  id v1 = (void *)cachedDayFieldLabels;
  return v1;
}

void updateCachedArraysIfNeeded(void)
{
  if ((updateCachedArraysIfNeeded(void)::haveLoadedData & 1) == 0)
  {
    uint64_t v0 = objc_msgSend(MEMORY[0x1E4F28B50], "safari_safariSharedBundle");
    id v1 = [v0 URLForResource:@"WBSFormAutoFillKeywords" withExtension:@"json"];

    id v30 = 0;
    uint64_t v2 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v1 options:0 error:&v30];
    id v3 = v30;
    id v29 = v3;
    uint64_t v4 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v2 options:0 error:&v29];
    id v5 = v29;

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v6 = objc_msgSend(v4, "safari_arrayForKey:", @"UsernameFieldLabels");
      if (v6) {
        objc_storeStrong((id *)&cachedUsernameFieldLabels, v6);
      }

      size_t v7 = objc_msgSend(v4, "safari_arrayForKey:", @"NonAccountPasswordSecureTextEntryFieldLabels");
      if (v7) {
        objc_storeStrong((id *)&cachedNonAccountPasswordSecureTextEntryFieldLabels, v7);
      }

      JSStringRef v8 = objc_msgSend(v4, "safari_arrayForKey:", @"NonUsernameFieldLabels");
      if (v8) {
        objc_storeStrong((id *)&cachedNonUsernameFieldLabels, v8);
      }

      uint64_t v9 = objc_msgSend(v4, "safari_arrayForKey:", @"NonEmailFieldLabels");
      if (v9) {
        objc_storeStrong((id *)&cachedNonEmailFieldLabels, v9);
      }

      uint64_t v10 = objc_msgSend(v4, "safari_arrayForKey:", @"OldPasswordFieldLabels");
      if (v10) {
        objc_storeStrong((id *)&cachedOldPasswordFieldLabels, v10);
      }

      JSClassRef v11 = objc_msgSend(v4, "safari_arrayForKey:", @"PasswordFieldLabels");
      if (v11) {
        objc_storeStrong((id *)&cachedPasswordFieldLabels, v11);
      }

      unint64_t v12 = objc_msgSend(v4, "safari_arrayForKey:", @"ConfirmPasswordFieldLabels");
      if (v12) {
        objc_storeStrong((id *)&cachedConfirmPasswordFieldLabels, v12);
      }

      uint64_t v13 = objc_msgSend(v4, "safari_arrayForKey:", @"ConfirmEmailFieldLabels");
      if (v13) {
        objc_storeStrong((id *)&cachedConfirmEmailFieldLabels, v13);
      }

      size_t v14 = objc_msgSend(v4, "safari_arrayForKey:", @"ShowHideButtonLabels");
      if (v14) {
        objc_storeStrong((id *)&cachedShowHideButtonLabels, v14);
      }

      uint64_t v15 = objc_msgSend(v4, "safari_arrayForKey:", @"SearchFieldLabels");
      if (v15) {
        objc_storeStrong((id *)&cachedSearchFieldLabels, v15);
      }

      id v16 = objc_msgSend(v4, "safari_dictionaryForKey:", @"LoginFormTypeKeywords");
      if (v16) {
        objc_storeStrong((id *)&cachedMapOfKeywordsIndicatingLoginFormTypeToScoreForMatching, v16);
      }

      uint64_t v17 = objc_msgSend(v4, "safari_dictionaryForKey:", @"NewAccountFormTypeKeywords");
      if (v17) {
        objc_storeStrong((id *)&cachedMapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching, v17);
      }

      uint64_t v18 = objc_msgSend(v4, "safari_dictionaryForKey:", @"ChangePasswordFormTypeKeywords");
      if (v18) {
        objc_storeStrong((id *)&cachedMapOfKeywordsIndicatingChangePasswordFormTypeToScoreForMatching, v18);
      }

      uint64_t v19 = objc_msgSend(v4, "safari_arrayForKey:", @"NonAutoFillableFormTypeKeywords");
      if (v19) {
        objc_storeStrong((id *)&cachedKeywordsIndicatingNonAutoFillableFormType, v19);
      }

      id v20 = objc_msgSend(v4, "safari_arrayForKey:", @"IgnoredDataTypeFieldLabels");
      if (v20) {
        objc_storeStrong((id *)&cachedIgnoredDataTypeFieldLabels, v20);
      }

      uint64_t v21 = objc_msgSend(v4, "safari_arrayForKey:", @"ForgotPasswordAffordanceRegularExpressions");
      if (v21) {
        objc_storeStrong((id *)&cachedRegularExpressionsForForgotPasswordAffordance, v21);
      }

      int v22 = objc_msgSend(v4, "safari_arrayForKey:", @"ForgotUserNameAffordanceRegularExpressions");
      if (v22) {
        objc_storeStrong((id *)&cachedRegularExpressionsForForgotUserNameAffordance, v22);
      }

      uint64_t v23 = objc_msgSend(v4, "safari_arrayForKey:", @"ForgotEmailAffordanceRegularExpressions");
      if (v23) {
        objc_storeStrong((id *)&cachedRegularExpressionsForForgotEmailAffordance, v23);
      }

      unint64_t v24 = objc_msgSend(v4, "safari_arrayForKey:", @"OneTimeCodeFieldLabels");
      if (v24) {
        objc_storeStrong((id *)&cachedOneTimeCodeFieldLabels, v24);
      }

      uint64_t v25 = objc_msgSend(v4, "safari_arrayForKey:", @"WeakOneTimeCodeFieldLabels");
      if (v25) {
        objc_storeStrong((id *)&cachedWeakOneTimeCodeFieldLabels, v25);
      }

      uint64_t v26 = objc_msgSend(v4, "safari_arrayForKey:", @"DayFieldLabels");
      if (v26) {
        objc_storeStrong((id *)&cachedDayFieldLabels, v26);
      }

      uint64_t v27 = objc_msgSend(v4, "safari_arrayForKey:", @"MonthFieldLabels");
      if (v27) {
        objc_storeStrong((id *)&cachedMonthFieldLabels, v27);
      }

      uint64_t v28 = objc_msgSend(v4, "safari_arrayForKey:", @"YearFieldLabels");
      if (v28) {
        objc_storeStrong((id *)&cachedYearFieldLabels, v28);
      }

      updateCachedArraysIfNeeded(void)::haveLoadedData = 1;
    }
  }
}

void sub_1A6C17A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::monthFieldLabels(SafariShared *this)
{
  updateCachedArraysIfNeeded();
  id v1 = (void *)cachedMonthFieldLabels;
  return v1;
}

id SafariShared::yearFieldLabels(SafariShared *this)
{
  updateCachedArraysIfNeeded();
  id v1 = (void *)cachedYearFieldLabels;
  return v1;
}

id ignoredDataTypeFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedIgnoredDataTypeFieldLabels;
  return v0;
}

id oneTimeCodeFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedOneTimeCodeFieldLabels;
  return v0;
}

id WeakOneTimeCodeFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedWeakOneTimeCodeFieldLabels;
  return v0;
}

id usernameFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedUsernameFieldLabels;
  return v0;
}

id nonAccountPasswordSecureTextEntryFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedNonAccountPasswordSecureTextEntryFieldLabels;
  return v0;
}

id nonUsernameFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedNonUsernameFieldLabels;
  return v0;
}

id nonEmailFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedNonEmailFieldLabels;
  return v0;
}

id oldPasswordFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedOldPasswordFieldLabels;
  return v0;
}

id passwordFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedPasswordFieldLabels;
  return v0;
}

id confirmPasswordFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedConfirmPasswordFieldLabels;
  return v0;
}

id confirmEmailFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedConfirmEmailFieldLabels;
  return v0;
}

id showHideButtonLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedShowHideButtonLabels;
  return v0;
}

id searchFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedSearchFieldLabels;
  return v0;
}

id mapOfKeywordsIndicatingLoginFormTypeToScoreForMatching(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedMapOfKeywordsIndicatingLoginFormTypeToScoreForMatching;
  return v0;
}

id mapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching(void)
{
  updateCachedArraysIfNeeded();
  uint64_t v0 = (void *)cachedMapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching;
  return v0;
}

uint64_t WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::remove(uint64_t *a1, void *a2)
{
  JSValueRef result = (void *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    JSValueRef result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  JSClassRef v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = (void *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          uint64_t v15 = (void *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::lookupForReinsert(a1, v13);
          uint64_t v16 = v15[1];
          v15[1] = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
          void *v15 = *v13;
          uint64_t v17 = v13[1];
          v13[1] = 0;
          v15[1] = v17;
          uint64_t v18 = v13[1];
          v13[1] = 0;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
          if (v13 == a3) {
            JSClassRef v11 = v15;
          }
        }
        else
        {
          uint64_t v14 = v13[1];
          v13[1] = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
        }
      }
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    JSValueRef result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void *WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::rehash(a1, v5, a2);
}

BOOL WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<OpaqueFormAutoFillFrame *>>,OpaqueFormAutoFillFrame *>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 == *a2) {
    return 1;
  }
  int v9 = 1;
  do
  {
    BOOL result = v8 != 0;
    if (!v8) {
      break;
    }
    unsigned int v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    ++v9;
  }
  while (v8 != *a2);
  return result;
}

__CFString *WBSStringFromAutoFillFormType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"WBSAutoFillFormTypeUndetermined";
  }
  else {
    return off_1E5C9BC88[a1 - 1];
  }
}

void sub_1A6C19264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_1A6C19B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose((const void *)(v65 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_1A6C1A630(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

id lookupSynonyms(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = (void ***)findEntry<SafariShared::AddressBookAutoCompleteMappingData::SynonymCollection>(a1, v5);
  uint64_t v8 = v7;
  uint64_t v23 = v5;
  if (v7 && v7[1])
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    JSClassRef v11 = v7[2];
    unint64_t v12 = -1;
    do
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      while (1)
      {
        uint64_t v13 = *v11++;
        id v14 = v13;
        unint64_t v24 = (unint64_t)v14;
        if (!v14) {
          break;
        }
        uint64_t v15 = HIDWORD(v26);
        if (HIDWORD(v26) == v26)
        {
          WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString const* {__strong}&>((uint64_t)&v25, (unint64_t)&v24);
        }
        else
        {
          uint64_t v16 = v25;
          *(void *)(v16 + 8 * v15) = v14;
          ++HIDWORD(v26);
        }
      }
      id v17 = objc_alloc(MEMORY[0x1E4F1C978]);
      uint64_t v18 = objc_msgSend(v17, "initWithObjects:count:", v25, HIDWORD(v26), v23, v24);
      unint64_t v24 = -1;
      if (+[WBSFormToABBinder indexOfBestMatchForString:v6 inArray:v18 startingPosition:&v24] != 0x7FFFFFFFFFFFFFFFLL)
      {
        unint64_t v19 = v24;
        if (v24 < v12)
        {
          id v20 = v18;

          uint64_t v10 = v20;
          unint64_t v12 = v19;
        }
      }

      WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v21);
      ++v9;
    }
    while (v9 < (unint64_t)v8[1]);
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_1A6C1A830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t lookupSpecifier(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t result = [v3 length];
  unint64_t v5 = result;
  __key[0] = result;
  JSClassRef v11 = (WTF *)v12;
  id v6 = (WTF *)v12;
  if (result >= 0x81)
  {
    if (result >> 31)
    {
      __break(0xC471u);
      return result;
    }
    id v6 = (WTF *)WTF::fastMalloc((WTF *)(2 * result));
    JSClassRef v11 = v6;
  }
  objc_msgSend(v3, "getCharacters:range:", v6, 0, v5);
  __key[1] = v11;
  unsigned int v7 = bsearch_b(__key, *(const void **)(a1 + 8), *(void *)a1, 0x18uLL, &__block_literal_global_18_0);
  if (v7)
  {
    unint64_t v9 = (void *)v7[2];
    uint64_t v10 = (void *)[objc_alloc(MEMORY[0x1E4F97E40]) initWithProperty:*v9 component:v9[1] label:v9[2] category:v9[3] parentProperty:v9[4] classification:v9[5] classificationHint:v9[6]];
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (v12 != (unsigned char *)v11 && v11) {
    WTF::fastFree(v11, v8);
  }

  return (unint64_t)v10;
}

void sub_1A6C1A9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1ADF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *findEntry<SafariShared::AddressBookAutoCompleteMappingData::SynonymCollectionMap>(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = v3;
  unint64_t v5 = 0;
  if (a1 && v3)
  {
    v7[0] = v3;
    unint64_t v5 = bsearch_b(v7, *(const void **)(a1 + 8), *(void *)a1, 0x10uLL, &__block_literal_global_54);
  }

  return v5;
}

void sub_1A6C1AE98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z9findEntryIN12SafariShared34AddressBookAutoCompleteMappingData20SynonymCollectionMapEEPKNT_5EntryEPKS3_P8NSString_block_invoke(uint64_t a1, id *a2, void *a3)
{
  return [*a2 compare:*a3];
}

void *findEntry<SafariShared::AddressBookAutoCompleteMappingData::SynonymCollection>(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = v3;
  unint64_t v5 = 0;
  if (a1 && v3)
  {
    __key[0] = v3;
    unint64_t v5 = bsearch_b(__key, *(const void **)(a1 + 8), *(void *)a1, 0x18uLL, &__block_literal_global_16_0);
  }

  return v5;
}

void sub_1A6C1AF34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z9findEntryIN12SafariShared34AddressBookAutoCompleteMappingData17SynonymCollectionEEPKNT_5EntryEPKS3_P8NSString_block_invoke(uint64_t a1, id *a2, void *a3)
{
  return [*a2 compare:*a3];
}

uint64_t WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString const* {__strong}&>(uint64_t a1, unint64_t a2)
{
  id v3 = (id *)WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  *(void *)(v5 + 8 * v4) = *v3;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      unint64_t v8 = (void *)v6;
      uint64_t v9 = 8 * v5;
      unint64_t v10 = (void **)v4;
      do
      {
        JSClassRef v11 = *v10;
        void *v10 = 0;
        *v8++ = v11;
        unint64_t v12 = *v10++;

        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(void ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4++;

      v5 -= 8;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t ___ZL15lookupSpecifierRKN12SafariShared34AddressBookAutoCompleteMappingData3MapEP8NSString_block_invoke(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a2;
  if (*a3 >= *a2) {
    unint64_t v5 = *a2;
  }
  else {
    unint64_t v5 = *a3;
  }
  if (v5)
  {
    uint64_t v6 = (unsigned __int16 *)a3[1];
    unint64_t v7 = (unsigned __int16 *)a2[1];
    while (1)
    {
      unsigned int v8 = *v7;
      unsigned int v9 = *v6;
      if (v8 < v9) {
        return 0xFFFFFFFFLL;
      }
      if (v9 < v8) {
        return 1;
      }
      ++v7;
      ++v6;
      if (!--v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (v4 < v3) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v3 < v4;
    }
  }
}

void sub_1A6C1B334(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

__CFString *mobileGestaltStringForQuery(const __CFString *a1)
{
  id v1 = (__CFString *)MGCopyAnswer();
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v2 = v1;
  }
  else {
    int v2 = &stru_1EFBE3CF8;
  }
  unint64_t v3 = v2;

  return v3;
}

void sub_1A6C1B3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1B5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1B770(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6C1B84C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1B8C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1BD04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1BEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1C29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  unint64_t v10 = v9;

  a9.super_class = (Class)WBSFrequentlyVisitedSitesBannedURLStore;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A6C1C3BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1C43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1C508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1C608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1C6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1C81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1C924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1CA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1CABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1CB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1CEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1CFC8(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v1, 0x1080C40D2F62047);
  _Unwind_Resume(a1);
}

void sub_1A6C1D0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9)
{
  std::unique_ptr<SafariShared::SuddenTerminationDisabler>::reset[abi:sn180100](&a9, 0);
  _Unwind_Resume(a1);
}

void sub_1A6C1D21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1D334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C1D4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1D5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1D680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1D750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1D7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1D8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1D97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1DA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1DAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1DB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1DE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1E07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1E198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1E3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1E504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1E7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1EA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6C1EB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1F534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1F5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1F654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1F6F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1FB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C1FD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A6C1FECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C20134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2020C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C202AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C20368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C204D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C20688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C20764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C207D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C20840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C20C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C20D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C20E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2133C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6C21908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C21B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C21C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6C21E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C21F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C22064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C220F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C222E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6C22504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C22660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1A6C22A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C22C30(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1A6C22DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C22E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C22F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C232CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C233C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C234CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2359C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C236A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C237B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C23A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C23BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C23D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C23EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C23F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C23FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C242F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C243A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2485C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C24988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C24AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C24C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<double,double>(void *a1, void *a2, double *a3, double *a4)
{
  id v7 = a1;
  id v8 = a2;
  unsigned int v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double>(v9, a3, a4);
  unint64_t v10 = [v9 fetch];

  return v10;
}

void sub_1A6C24D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C24F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C250A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2525C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<double &,double &>(void *a1, void *a2, double *a3, double *a4)
{
  id v7 = a1;
  id v8 = a2;
  unsigned int v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,double &>(v9, a3, a4);
  unint64_t v10 = [v9 fetch];

  return v10;
}

void sub_1A6C2534C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C254FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,double &>(void *a1, double *a2, double *a3)
{
  id v5 = a1;
  [v5 bindDouble:1 atParameterIndex:*a2];
  [v5 bindDouble:2 atParameterIndex:*a3];
}

void sub_1A6C255F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C25BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C25E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1A6C26028(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A6C261CC(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A6C262A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2639C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C26444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2654C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2672C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C268A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C269DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C26B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C26C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_64n17_8_8_t0w24_s24_s32(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 88) = *(id *)(a2 + 88);
  id result = *(id *)(a2 + 96);
  *(void *)(a1 + 96) = result;
  return result;
}

void __destroy_helper_block_e8_64n9_8_s24_s32(uint64_t a1)
{
  int v2 = *(void **)(a1 + 96);
}

void sub_1A6C2E574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C2EDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2EEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2EF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2F034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2F3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2F5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2F728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2F764()
{
}

void sub_1A6C2F914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2FA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2FBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2FD58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2FDC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C2FE9C(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C3006C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WBSHistoryTruncatePageTitle(void *a1, unint64_t a2)
{
  id v3 = a1;
  if ([v3 length] > a2)
  {
    uint64_t v4 = objc_msgSend(v3, "rangeOfComposedCharacterSequencesForRange:", 0, a2 - 1);
    uint64_t v6 = objc_msgSend(v3, "substringWithRange:", v4, v5);
    uint64_t v7 = [v6 stringByAppendingString:@"…"];

    id v3 = (id)v7;
  }
  return v3;
}

void sub_1A6C30218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WBSHistoryDecodeAutocompleteTriggers(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F28F98] propertyListWithData:a1 options:1 format:0 error:0];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
    if ([v2 count])
    {
      uint64_t v3 = [v2 count];
      if (v3 - 1 >= 0)
      {
        do
        {
          uint64_t v4 = [v2 objectAtIndexedSubscript:--v3];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) == 0) {
            [v2 removeObjectAtIndex:v3];
          }
        }
        while (v3 > 0);
      }
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_1A6C30334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WBSHistoryAddAutocompleteTriggerToArray(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (![v4 length])
  {
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v5 = [v3 count];
  if (v5)
  {
    uint64_t v6 = v5 - 1;
    while (1)
    {
      uint64_t v7 = [v3 objectAtIndexedSubscript:v6];
      if (objc_msgSend(v7, "safari_hasPrefix:", v4)) {
        break;
      }
      if (objc_msgSend(v4, "safari_hasPrefix:", v7)) {
        [v3 removeObjectAtIndex:v6];
      }

      if (--v6 == -1) {
        goto LABEL_8;
      }
    }

    goto LABEL_10;
  }
LABEL_8:
  [v3 addObject:v4];
  uint64_t v8 = 1;
LABEL_11:

  return v8;
}

void sub_1A6C30428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned int *WBSHistoryCollapseDailyVisitsToWeekly(unsigned int *result, _DWORD *a2)
{
  unint64_t v3 = result[3];
  if (v3 <= 0xD)
  {
    unsigned int v12 = a2[3];
  }
  else
  {
    id v4 = result;
    do
    {
      int v13 = 0;
      int v5 = 0;
      uint64_t v6 = *(void *)v4 + 4 * v3;
      uint64_t v7 = -7;
      do
      {
        if (!__CFADD__(v3, v7))
        {
          __break(0xC471u);
          return result;
        }
        v5 += *(_DWORD *)(v6 + 4 * v7);
        int v13 = v5;
      }
      while (!__CFADD__(v7++, 1));
      v4[3] = v3 - 7;
      uint64_t v9 = a2[3];
      if (v9 == a2[2])
      {
        unint64_t v10 = (int *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v9 + 1, (unint64_t)&v13);
        uint64_t v9 = a2[3];
      }
      else
      {
        unint64_t v10 = &v13;
      }
      JSClassRef v11 = *(int **)a2;
      id result = (unsigned int *)memmove((void *)(*(void *)a2 + 4), *(const void **)a2, 4 * v9);
      int *v11 = *v10;
      unsigned int v12 = a2[3] + 1;
      a2[3] = v12;
      unint64_t v3 = v4[3];
    }
    while (v3 > 0xD);
  }
  if (v12 > 5uLL) {
    a2[3] = 5;
  }
  return result;
}

uint64_t WBSHistoryPadDailyCountsForNewVisitAtTime(unsigned int *a1, unsigned int *a2, double a3, double a4)
{
  int v8 = a1[3];
  if (!v8)
  {
    LODWORD(v17) = 0;
    if (a1[2]) {
      **(_DWORD **)a1 = 0;
    }
    else {
      *(_DWORD *)(*(void *)a1 + 4 * a1[3]) = *(_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, 1uLL, (unint64_t)&v17);
    }
    int v8 = a1[3] + 1;
    a1[3] = v8;
  }
  if (a3 == 0.0) {
    return 0;
  }
  unsigned int v9 = vcvtpd_s64_f64(a4 / 86400.0);
  unsigned int v10 = vcvtpd_s64_f64(a3 / 86400.0);
  unint64_t v11 = v9 - v10;
  if (v9 == v10) {
    return 0;
  }
  if ((int)v11 > 49)
  {
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
    LODWORD(v17) = 0;
    uint64_t v12 = a1[3];
    if (v12 == a1[2]) {
      *(_DWORD *)(*(void *)a1 + 4 * a1[3]) = *(_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, v12 + 1, (unint64_t)&v17);
    }
    else {
      *(_DWORD *)(*(void *)a1 + 4 * v12) = 0;
    }
    ++a1[3];
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a2, 0);
    return 0;
  }
  uint64_t v13 = v10 - v9;
  if ((int)v13 > 49) {
    return 0xFFFFFFFFLL;
  }
  id v17 = (WTF *)v19;
  uint64_t v18 = 32;
  if ((int)v11 < 1)
  {
    if (v8 <= (int)v13)
    {
      int v16 = 0;
      WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((unsigned int *)&v17, &v16, 1 - v8 - (int)v11);
      WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)a1, (uint64_t)&v17);
    }
  }
  else
  {
    int v16 = 0;
    WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((unsigned int *)&v17, &v16, v11);
    WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<int>((uint64_t)a1, 0, v17, HIDWORD(v18));
    uint64_t v13 = 0;
  }
  uint64_t v15 = v17;
  if (v19 != (unsigned char *)v17 && v17)
  {
    id v17 = 0;
    LODWORD(v18) = 0;
    WTF::fastFree(v15, a2);
  }
  return v13;
}

void sub_1A6C3076C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (v12 != a11)
  {
    if (a11) {
      WTF::fastFree(a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill(unsigned int *result, _DWORD *a2, unint64_t a3)
{
  uint64_t v5 = (uint64_t)result;
  unint64_t v6 = result[3];
  if (v6 <= a3)
  {
    if (result[2] < a3)
    {
      WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)result, 0);
      id result = (unsigned int *)WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5, a3);
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
    }
  }
  else
  {
    result[3] = a3;
    LODWORD(v6) = a3;
  }
  uint64_t v7 = *(_DWORD **)v5;
  if (v6)
  {
    unint64_t v8 = v6 + 1;
    unsigned int v9 = *(_DWORD **)v5;
    do
    {
      *v9++ = *a2;
      --v8;
    }
    while (v8 > 1);
    uint64_t v10 = *(unsigned int *)(v5 + 12);
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (v10 != a3)
  {
    unint64_t v11 = &v7[v10];
    uint64_t v12 = 4 * a3 - 4 * v10;
    do
    {
      *v11++ = *a2;
      v12 -= 4;
    }
    while (v12);
  }
  *(_DWORD *)(v5 + 12) = a3;
  return result;
}

uint64_t WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = result;
    id v4 = *(const void **)a2;
    unint64_t v6 = *(unsigned int *)(result + 8);
    unint64_t v5 = *(unsigned int *)(result + 12);
    unint64_t v7 = v5 + v2;
    if (v5 + v2 > v6
      && ((unint64_t v8 = v6 + (v6 >> 2), v8 >= 0x10) ? (v9 = v8 + 1) : (v9 = 16),
          v9 <= v7 ? (unint64_t v10 = v7) : (unint64_t v10 = v9),
          id result = WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, v10), v5 = *(unsigned int *)(v3 + 12), v7 < v5))
    {
      __break(0xC471u);
    }
    else
    {
      id result = (uint64_t)memcpy((void *)(*(void *)v3 + 4 * v5), v4, 4 * v2);
      *(_DWORD *)(v3 + 12) = v7;
    }
  }
  return result;
}

uint64_t WBSHistoryAddVisitToScore(int a1, unsigned int *a2, unsigned int *a3, double a4, double a5)
{
  uint64_t result = WBSHistoryPadDailyCountsForNewVisitAtTime(a2, a3, a4, a5);
  if ((result & 0x80000000) == 0)
  {
    if (a2[3] <= result)
    {
      __break(0xC471u);
    }
    else
    {
      *(_DWORD *)(*(void *)a2 + 4 * result) += a1;
      return (uint64_t)WBSHistoryCollapseDailyVisitsToWeekly(a2, a3);
    }
  }
  return result;
}

uint64_t WBSHistoryUpdateScoreOfVisit(uint64_t result, int a2, uint64_t a3, double a4, double a5, uint64_t a6, char *a7)
{
  signed int v7 = vcvtpd_s64_f64(a4 / 86400.0) - vcvtpd_s64_f64(a5 / 86400.0);
  if (*(unsigned int *)(a3 + 12) <= (unint64_t)v7)
  {
    if (!a7) {
      return result;
    }
    char v8 = 1;
  }
  else
  {
    *(_DWORD *)(*(void *)a3 + 4 * v7) += a2 - result;
    if (!a7) {
      return result;
    }
    char v8 = 0;
  }
  *a7 = v8;
  return result;
}

unsigned int *WBSHistoryTimesOfVisitsToSynthesizeFromDailyCounts@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  unint64_t v5 = result;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v8 = result[3];
  if (v8)
  {
    int v9 = 0;
    unint64_t v10 = *(int **)result;
    uint64_t v11 = 4 * v8;
    do
    {
      int v12 = *v10++;
      v9 += v12;
      v11 -= 4;
    }
    while (v11);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v13 = *(unsigned int *)(a2 + 12);
  if (v13)
  {
    int v14 = 0;
    uint64_t v15 = *(int **)a2;
    uint64_t v16 = 4 * v13;
    do
    {
      int v17 = *v15++;
      v14 += v17;
      v16 -= 4;
    }
    while (v16);
  }
  else
  {
    int v14 = 0;
  }
  unsigned int v18 = v14 + v9;
  if (v14 + v9)
  {
    if (v18 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * (int)v18));
    *(_DWORD *)(a3 + 8) = v18;
    *(void *)a3 = result;
    unint64_t v8 = v5[3];
  }
  int v19 = vcvtpd_s64_f64(a4 / 86400.0);
  if (v8)
  {
    for (unint64_t i = 0; i < v8; ++i)
    {
      int v21 = v19 - 1;
      int v22 = *(_DWORD *)(*(void *)v5 + 4 * i);
      if (v22)
      {
        double v23 = 86400.0 * (double)v19;
        if (!i) {
          double v23 = a4;
        }
        timesForVisits(86400.0 * (double)v21, v23, v22 - (i == 0), (uint64_t)&v49);
        uint64_t v25 = v50;
        unint64_t v26 = *(unsigned int *)(a3 + 8);
        unint64_t v27 = v50 + (unint64_t)*(unsigned int *)(a3 + 12);
        if (v27 > v26)
        {
          unint64_t v28 = v26 + (v26 >> 2);
          if (v28 >= 0x10) {
            unint64_t v29 = v28 + 1;
          }
          else {
            unint64_t v29 = 16;
          }
          if (v29 <= v27) {
            unint64_t v30 = v50 + (unint64_t)*(unsigned int *)(a3 + 12);
          }
          else {
            unint64_t v30 = v29;
          }
          WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v30);
        }
        uint64_t result = (unsigned int *)v49;
        if (v25)
        {
          uint64_t v31 = *(void *)a3;
          unsigned int v32 = *(_DWORD *)(a3 + 12);
          uint64_t v33 = 8 * v25;
          id v34 = v49;
          do
          {
            uint64_t v35 = *(void *)v34;
            id v34 = (WTF *)((char *)v34 + 8);
            *(void *)(v31 + 8 * v32++) = v35;
            v33 -= 8;
          }
          while (v33);
          *(_DWORD *)(a3 + 12) = v32;
        }
        if (result) {
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v24);
        }
        unint64_t v8 = v5[3];
      }
      int v19 = v21;
    }
  }
  else
  {
    int v21 = v19;
  }
  if (*(_DWORD *)(a2 + 12))
  {
    unint64_t v36 = 0;
    do
    {
      timesForVisits(86400.0 * (double)(unint64_t)(v21 - 7), 86400.0 * (double)v21, *(int *)(*(void *)a2 + 4 * v36), (uint64_t)&v49);
      uint64_t v38 = v50;
      unint64_t v39 = *(unsigned int *)(a3 + 8);
      unint64_t v40 = v50 + (unint64_t)*(unsigned int *)(a3 + 12);
      if (v40 > v39)
      {
        unint64_t v41 = v39 + (v39 >> 2);
        if (v41 >= 0x10) {
          unint64_t v42 = v41 + 1;
        }
        else {
          unint64_t v42 = 16;
        }
        if (v42 <= v40) {
          unint64_t v43 = v50 + (unint64_t)*(unsigned int *)(a3 + 12);
        }
        else {
          unint64_t v43 = v42;
        }
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v43);
      }
      uint64_t result = (unsigned int *)v49;
      if (v38)
      {
        uint64_t v44 = *(void *)a3;
        unsigned int v45 = *(_DWORD *)(a3 + 12);
        uint64_t v46 = 8 * v38;
        long long v47 = v49;
        do
        {
          uint64_t v48 = *(void *)v47;
          long long v47 = (WTF *)((char *)v47 + 8);
          *(void *)(v44 + 8 * v45++) = v48;
          v46 -= 8;
        }
        while (v46);
        *(_DWORD *)(a3 + 12) = v45;
      }
      if (result) {
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v37);
      }
      ++v36;
      v21 -= 7;
    }
    while (v36 < *(unsigned int *)(a2 + 12));
  }
  return result;
}

void sub_1A6C30C68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  uint64_t v11 = *(WTF **)v9;
  if (*(void *)v9)
  {
    *(void *)uint64_t v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    WTF::fastFree(v11, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t timesForVisits@<X0>(double a1@<D0>, double a2@<D1>, unint64_t result@<X0>, uint64_t a4@<X8>)
{
  unint64_t v4 = result;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 12) = result;
  if (result)
  {
    if (!(result >> 29))
    {
      uint64_t result = WTF::fastMalloc((WTF *)(8 * result));
      *(_DWORD *)(a4 + 8) = v4;
      *(void *)a4 = result;
      double v8 = (a2 - a1) / (double)(v4 + 1);
      while (v4)
      {
        a1 = v8 + a1;
        *(double *)uint64_t result = a1;
        result += 8;
        if (!--v4) {
          return result;
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1A6C30D28);
  }
  return result;
}

unint64_t WBSHistoryTimesForSynthesizedVisitsPreceedingDailyAndWeeklyRange@<X0>(double a1@<D0>, unint64_t a2@<X0>, uint64_t a3@<X8>)
{
  return timesForVisits(a1 - (double)0x30uLL * 86400.0 - (double)0x1CuLL * 86400.0, a1 - (double)0x30uLL * 86400.0, a2, a3);
}

WTF *WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, unint64_t a2)
{
  unint64_t v2 = *((unsigned int *)result + 2);
  if (v2 > a2)
  {
    int v3 = a2;
    unint64_t v4 = result;
    unint64_t v5 = *((unsigned int *)result + 3);
    if (v5 > a2)
    {
      *((_DWORD *)result + 3) = a2;
      LODWORD(v5) = a2;
    }
    unint64_t v6 = *(WTF **)result;
    signed int v7 = *(WTF **)result;
    if (a2)
    {
      if (v2 >= a2) {
        unint64_t v2 = a2;
      }
      if (v2 >= 0x21)
      {
        if (!(a2 >> 62))
        {
          *((_DWORD *)result + 2) = a2;
          uint64_t result = (WTF *)WTF::fastRealloc(v6, (void *)(4 * a2));
          *(void *)unint64_t v4 = result;
          return result;
        }
LABEL_26:
        __break(0xC471u);
        JUMPOUT(0x1A6C30E9CLL);
      }
      if (a2 < 0x21)
      {
        uint64_t result = (WTF *)((char *)result + 16);
        *(void *)unint64_t v4 = (char *)v4 + 16;
        *((_DWORD *)v4 + 2) = 32;
      }
      else
      {
        if (a2 >> 30) {
          goto LABEL_26;
        }
        uint64_t result = (WTF *)WTF::fastMalloc((WTF *)(4 * a2));
        *((_DWORD *)v4 + 2) = v3;
        *(void *)unint64_t v4 = result;
      }
      signed int v7 = v6;
      if (result != v6)
      {
        uint64_t result = (WTF *)memcpy(result, v6, 4 * v5);
        signed int v7 = *(WTF **)v4;
      }
    }
    if ((WTF *)((char *)v4 + 16) != v6 && v6 != 0)
    {
      if (v7 == v6)
      {
        *(void *)unint64_t v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
      }
      uint64_t result = (WTF *)WTF::fastFree(v6, (void *)a2);
      signed int v7 = *(WTF **)v4;
    }
    if (!v7)
    {
      *(void *)unint64_t v4 = (char *)v4 + 16;
      *((_DWORD *)v4 + 2) = 32;
    }
  }
  return result;
}

uint64_t WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = *(void **)result;
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (a2 < 0x21)
  {
    unint64_t v6 = (void *)(result + 16);
    *(void *)uint64_t v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 32;
LABEL_6:
    memcpy(v6, v4, 4 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 30))
  {
    unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<int>(uint64_t result, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v9 = *(unsigned int *)(result + 8);
  unint64_t v8 = *(unsigned int *)(result + 12);
  unint64_t v10 = v8 + a4;
  if (v8 + a4 > v9)
  {
    unint64_t v11 = v9 + (v9 >> 2);
    if (v11 >= 0x10) {
      unint64_t v12 = v11 + 1;
    }
    else {
      unint64_t v12 = 16;
    }
    if (v12 <= v10) {
      unint64_t v13 = v10;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t result = WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, v13);
    unint64_t v8 = *(unsigned int *)(v7 + 12);
  }
  if (v10 < v8)
  {
    __break(0xC471u);
  }
  else
  {
    int v14 = (char *)(*(void *)v7 + 4 * a2);
    memmove(&v14[4 * a4], v14, *(void *)v7 + 4 * v8 - (void)v14);
    uint64_t result = (uint64_t)memcpy(v14, a3, 4 * a4);
    *(_DWORD *)(v7 + 12) = v10;
  }
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    unint64_t v4 = *(void **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void sub_1A6C31170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C312D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3163C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C316C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C31938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C31CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C31E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C32024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C32290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C323DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C327C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C329BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C32A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C32B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C32B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C32C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C32CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C32E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C33568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C33634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C33738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C33824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3396C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *unint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1A6C33CFC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,void *>>>::operator()[abi:sn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,void *>>>::operator()[abi:sn180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__erase_unique<long long>(void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::erase(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove(result, a2, (uint64_t)&__p);
    unint64_t v3 = (id *)__p;
    __p = 0;
    if (v3)
    {
      if (v5) {

      }
      operator delete(v3);
    }
    return (void *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__emplace_unique_key_args<long long,std::pair<long long,WBSHistoryItem * {__strong}>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  a3[1] = 0;
  void *i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  void *i = *v12;
  *unint64_t v12 = i;
  *(void *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7) {
        v23 %= v7;
      }
    }
    else
    {
      v23 &= v7 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1A6C3416C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,void *>>>::operator()[abi:sn180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  void *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)v24, 0);
  return v11;
}

void sub_1A6C343CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(id **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      objc_destroyWeak(v2 + 3);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::erase(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove(result, a2, (uint64_t)v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)v3, 0);
    return (void *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__emplace_unique_key_args<long long,std::pair<long long,WBSHistoryVisit * {__strong}>>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  uint64_t v13 = operator new(0x20uLL);
  v24[0] = v13;
  v24[1] = a1 + 16;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v6;
  uint64_t v14 = (void *)a3[1];
  *((void *)v13 + 2) = *a3;
  objc_initWeak((id *)v13 + 3, v14);
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v22 >= v7) {
          v22 %= v7;
        }
      }
      else
      {
        v22 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t v10 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)v24, 0);
  return v10;
}

void sub_1A6C346CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (id *)*v2;
      objc_destroyWeak(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1A6C34954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C34C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C34FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C35290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3537C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WBSHistoryServiceMain(WTF *a1)
{
  uint64_t v1 = WTF::initializeMainThread(a1);
  uint64_t v2 = (void *)MEMORY[0x1AD0C4CF0](v1);
  unint64_t v3 = [MEMORY[0x1E4F223B8] applicationProxyForIdentifier:*MEMORY[0x1E4F981F8] placeholder:0];
  unint64_t v4 = [v3 dataContainerURL];
  uint8x8_t v5 = v4;
  if (v4)
  {
    id v6 = [v4 path];
    setenv("HOME", (const char *)[v6 fileSystemRepresentation], 1);

    id v7 = [v5 path];
    setenv("CFFIXED_USER_HOME", (const char *)[v7 fileSystemRepresentation], 1);

    uint8x8_t v8 = [v5 URLByAppendingPathComponent:@"tmp"];
    id v9 = [v8 path];
    setenv("TMPDIR", (const char *)[v9 fileSystemRepresentation], 1);
  }
  uint64_t v10 = WBS_LOG_CHANNEL_PREFIXHistory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LOWORD(v19[0]) = 0;
    _os_log_impl(&dword_1A6B5F000, v10, OS_LOG_TYPE_INFO, "History service launched", (uint8_t *)v19, 2u);
  }
  +[WBSURLCompletionDatabase initializeURLCompletionOnMainThread];
  unint64_t v11 = objc_alloc_init(WBSHistoryService);
  uint64_t v12 = objc_alloc_init(WBSCloudHistoryPushAgent);
  uint64_t v13 = v11;
  qos_class_t v14 = qos_class_self();
  float v15 = dispatch_get_global_queue(v14, 0);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = ___ZL19setUpSignalHandlersP17WBSHistoryService_block_invoke;
  v19[3] = &unk_1E5C8CA70;
  float v16 = v13;
  size_t v20 = v16;
  WBSSetSignalHandler();

  [(WBSHistoryService *)v16 resume];
  BOOL v17 = [MEMORY[0x1E4F1CAC0] currentRunLoop];
  [v17 run];

  return 0;
}

void sub_1A6C356A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL19setUpSignalHandlersP17WBSHistoryService_block_invoke(uint64_t a1)
{
  uint64_t v2 = WBS_LOG_CHANNEL_PREFIXHistory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl(&dword_1A6B5F000, v2, OS_LOG_TYPE_INFO, "Received termination signal. Closing databases and terminating", v3, 2u);
  }
  [*(id *)(a1 + 32) shutdown];
  exit(0);
}

double SafariShared::DeletionPlan::DeletionPlan(SafariShared::DeletionPlan *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  return result;
}

uint64_t *SafariShared::DeletionPlan::sanitizeItemTouched(uint64_t *this)
{
  uint64_t v1 = (void *)this[7];
  if (v1)
  {
    uint64_t v2 = this + 10;
    do
    {
      unint64_t v3 = v1[2];
      this = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(v2, &v3);
      uint64_t v1 = (void *)*v1;
    }
    while (v1);
  }
  return this;
}

void *SafariShared::DeletionPlan::sanitizeVisitsToDelete(void *this)
{
  uint64_t v1 = (uint64_t *)this[22];
  if (v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = this + 20;
    unint64_t v4 = this + 5;
    do
    {
      while (1)
      {
        unint64_t v5 = v1[2];
        unint64_t v6 = 0;
        unint64_t v7 = v5;
        this = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v2, &v7);
        if (!this) {
          break;
        }
        unint64_t v6 = this[3];
        if (!v6) {
          break;
        }
        this = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v4, &v6);
        if (!this) {
          break;
        }
        this = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::erase(v3, v1);
        uint64_t v1 = this;
        if (!this) {
          return this;
        }
      }
      uint64_t v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  return this;
}

void *SafariShared::DeletionPlan::findItemIDForVisitID(SafariShared::DeletionPlan *this, unint64_t a2)
{
  unint64_t v3 = a2;
  double result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(this, &v3);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

void WBSHistoryTagComputeFrecencyScore(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  sqlite3_int64 v5 = sqlite3_value_int64(*a3);
  double v6 = sqlite3_value_double(a3[1]);
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  double v8 = WBSHistoryTopicScore(v5, v6, v7);
  sqlite3_result_double(a1, v8);
}

void sub_1A6C3615C(_Unwind_Exception *a1)
{
  sqlite3_int64 v5 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6C362B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C36398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C36658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

id createQueryWithList(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  double v7 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithCapacity:", objc_msgSend(v6, "length") + objc_msgSend(v5, "length") + 2 * *(void *)(a2 + 24));
  [v7 appendString:v5];
  double v8 = *(void **)(a2 + 16);
  if (v8)
  {
    char v9 = 1;
    do
    {
      uint64_t v10 = v8[2];
      if ((v9 & 1) == 0) {
        [v7 appendString:@","];
      }
      unint64_t v11 = [NSNumber numberWithLongLong:v10];
      uint64_t v12 = [v11 stringValue];
      [v7 appendString:v12];

      char v9 = 0;
      double v8 = (void *)*v8;
    }
    while (v8);
  }
  [v7 appendString:v6];

  return v7;
}

void sub_1A6C367EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

sqlite3_int64 initializeStreamedHistoryVisitFromSQLiteRow(sqlite3_stmt *a1, _HistoryStreamedVisit *a2, int a3)
{
  a2->var2 = sqlite3_column_int64(a1, a3 + 1);
  a2->var1 = sqlite3_column_int64(a1, a3);
  a2->var3 = sqlite3_column_double(a1, a3 + 2);
  a2->var13 = (char *)sqlite3_column_text(a1, a3 + 3);
  a2->var4 = sqlite3_column_int64(a1, a3 + 4);
  a2->var5 = sqlite3_column_int64(a1, a3 + 5);
  a2->var6 = sqlite3_column_int64(a1, a3 + 6);
  a2->var8 = sqlite3_column_int64(a1, a3 + 7);
  a2->var9 = sqlite3_column_int64(a1, a3 + 8);
  a2->var10 = sqlite3_column_int64(a1, a3 + 9);
  a2->var11 = sqlite3_column_int64(a1, a3 + 10);
  a2->var12 = sqlite3_column_int64(a1, a3 + 11);
  sqlite3_int64 result = sqlite3_column_int64(a1, a3 + 12);
  a2->var7 = result;
  return result;
}

void sub_1A6C36A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C36BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C36E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C373A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__101(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__102(uint64_t a1)
{
}

void sub_1A6C37584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A6C37760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(int,NSDate *)>(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  char v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:a2];
  uint64_t v10 = v9;
  if (v9)
  {
    unint64_t v11 = (sqlite3_stmt *)[v9 handle];
    qos_class_t v14 = (void *)MEMORY[0x1AD0C4F80](*a4);
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(int,NSDate *)>>(v7, v11, a2, &v14);

    [v10 invalidate];
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1A6C3785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C37904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C379D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<unsigned long &>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v5 query:v6];
  [v7 bindInt64:*a3 atParameterIndex:1];
  id v8 = [v7 fetch];

  return v8;
}

void sub_1A6C37A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C37BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C37CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C37F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A6C37FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C38488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3864C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C386D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C388D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C38A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C38AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C38EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<long long &,long long &>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  char v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long &>(v9, a3, a4);
  uint64_t v10 = [v9 fetch];

  return v10;
}

void sub_1A6C39068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C391F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C39340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C39754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C39938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C39B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C39E40(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C39EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3A10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong},std::tuple<long long &>>(void *a1, uint64_t a2, id *a3, void **a4)
{
  id v7 = a1;
  id v8 = [v7 database];
  char v9 = (sqlite3_stmt *)[v7 handle];
  id v10 = *a3;
  unint64_t v11 = *a4;
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong},std::tuple<long long &>>>(v8, v9, a2, v14);

  [v7 reset];
  return v12;
}

void sub_1A6C3A218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3AB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3BD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22)
{
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v26 - 144);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<double,std::tuple<long long &>>(void *a1, uint64_t a2, double *a3, double *a4)
{
  id v7 = a1;
  id v8 = [v7 database];
  char v9 = (sqlite3_stmt *)[v7 handle];
  v12[0] = *a3;
  v12[1] = *a4;
  uint64_t v10 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<double,std::tuple<long long &>>>(v8, v9, a2, v12);

  [v7 reset];
  return v10;
}

void sub_1A6C3C1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<std::tuple<long long &>>(void *a1, uint64_t a2, sqlite3_int64 **a3)
{
  id v5 = a1;
  id v6 = [v5 database];
  id v7 = (sqlite3_stmt *)[v5 handle];
  uint64_t v10 = *a3;
  uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<std::tuple<long long &>>>(v6, v7, a2, &v10);

  [v5 reset];
  return v8;
}

void sub_1A6C3C258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3C314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3C754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9 = a1;
  id v10 = a3;
  unint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:a2];
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = (sqlite3_stmt *)[v11 handle];
    qos_class_t v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    uint64_t v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>>(v9, v13, a2, v17);
    [v12 invalidate];
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1A6C3C840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3C99C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A6C3CA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3CBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9 = a1;
  id v10 = a3;
  unint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:a2];
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = (sqlite3_stmt *)[v11 handle];
    qos_class_t v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    uint64_t v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>>(v9, v13, a2, v17);
    [v12 invalidate];
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1A6C3CCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3CE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3D090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3D184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3D2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3D5F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong},double,std::tuple<int &,int &>>(void *a1, uint64_t a2, void *a3, id *a4, id *a5, long long *a6)
{
  id v11 = a1;
  id v12 = a3;
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v11 query:v12 error:a2];
  qos_class_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = (sqlite3_stmt *)[v13 handle];
    v18[0] = *a4;
    v18[1] = *a5;
    long long v19 = *a6;
    uint64_t v16 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(v11, v15, a2, v18);

    [v14 invalidate];
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_1A6C3D75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3D8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3DA8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3DBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3DD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3DEE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3DF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3E114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C3E854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__209(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__210(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(a1 + 48);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>(void *a1, uint64_t a2, void *a3, id *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:a2];
  id v12 = v11;
  if (v11)
  {
    uint64_t v13 = (sqlite3_stmt *)[v11 handle];
    uint64_t v16 = a4;
    id v17 = (id)MEMORY[0x1AD0C4F80](*a5);
    uint64_t v14 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v9, v13, a2, &v16);

    [v12 invalidate];
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1A6C3EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(long long)>(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:a2];
  id v10 = v9;
  if (v9)
  {
    id v11 = (sqlite3_stmt *)[v9 handle];
    uint64_t v14 = (void *)MEMORY[0x1AD0C4F80](*a4);
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long)>>(v7, v11, a2, &v14);

    [v10 invalidate];
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1A6C3EBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(long long,NSString *)>(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:a2];
  id v10 = v9;
  if (v9)
  {
    id v11 = (sqlite3_stmt *)[v9 handle];
    uint64_t v14 = (void *)MEMORY[0x1AD0C4F80](*a4);
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long,NSString *)>>(v7, v11, a2, &v14);

    [v10 invalidate];
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1A6C3ECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3ED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3EEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3EF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3EFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3F0C8(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C3F2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3F65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _Unwind_Resume(a1);
}

void sub_1A6C3FAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  _Block_object_dispose(va, 8);
  SafariShared::DeletionPlan::~DeletionPlan(v16);
  _Block_object_dispose((const void *)(v18 - 168), 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__249(uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 88, (uint64_t *)(a2 + 88));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 128, (uint64_t *)(a2 + 128));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 168, (uint64_t *)(a2 + 168));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 208, (uint64_t *)(a2 + 208));
  __n128 result = *(__n128 *)(a2 + 248);
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(__n128 *)(a1 + 248) = result;
  uint64_t v5 = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = 0;
  *(void *)(a1 + 264) = v5;
  return result;
}

uint64_t __Block_byref_object_dispose__250(id *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 6);

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(a1 + 26));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(a1 + 21));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(a1 + 16));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(a1 + 11));
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v2);
}

void SafariShared::DeletionPlan::~DeletionPlan(id *this)
{
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(this + 20));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(this + 15));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(this + 10));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(this + 5));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)this);
}

void sub_1A6C3FFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v17);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>(void *a1, uint64_t a2, void *a3, id *a4, id *a5, void *a6)
{
  id v11 = a1;
  id v12 = a3;
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v11 query:v12 error:a2];
  uint64_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = (sqlite3_stmt *)[v13 handle];
    v18[0] = a4;
    v18[1] = a5;
    id v19 = (id)MEMORY[0x1AD0C4F80](*a6);
    uint64_t v16 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v11, v15, a2, v18);

    [v14 invalidate];
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_1A6C4011C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C40474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4067C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4071C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C40BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A6C41578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  SafariShared::DeletionPlan::~DeletionPlan((id *)&STACK[0x200]);
  _Block_object_dispose(&a54, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(a11);

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>(void *a1, uint64_t a2, id *a3, id *a4, uint64_t *a5)
{
  id v9 = a1;
  id v10 = [v9 database];
  id v11 = (sqlite3_stmt *)[v9 handle];
  id v16 = *a3;
  id v12 = *a4;
  uint64_t v13 = *a5;
  id v17 = v12;
  uint64_t v18 = v13;
  uint64_t v14 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(v10, v11, a2, &v16);

  [v9 reset];
  return v14;
}

void sub_1A6C41810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>(void *a1, uint64_t a2, sqlite3_int64 *a3, sqlite3_int64 *a4, sqlite3_int64 *a5, sqlite3_int64 *a6)
{
  id v11 = a1;
  id v12 = [v11 database];
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(v12, (sqlite3_stmt *)[v11 handle], a2, v15);

  [v11 reset];
  return v13;
}

void sub_1A6C418E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C41A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C41C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C41D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C41F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C41FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4212C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C42258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C42510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C428F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C42A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C42B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A6C42FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(long long,long long,long long,long long)>(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:a2];
  id v10 = v9;
  if (v9)
  {
    id v11 = (sqlite3_stmt *)[v9 handle];
    uint64_t v14 = (void *)MEMORY[0x1AD0C4F80](*a4);
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long,long long,long long,long long)>>(v7, v11, a2, &v14);

    [v10 invalidate];
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1A6C43184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C43510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v8);

  _Unwind_Resume(a1);
}

void sub_1A6C436D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4394C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<std::tuple<long long &>>(void *a1, uint64_t a2, void *a3, sqlite3_int64 **a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:a2];
  id v10 = v9;
  if (v9)
  {
    id v11 = (sqlite3_stmt *)[v9 handle];
    uint64_t v14 = *a4;
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<std::tuple<long long &>>>(v7, v11, a2, &v14);
    [v10 invalidate];
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1A6C43A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C43C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v11);

  _Unwind_Resume(a1);
}

void sub_1A6C44008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v9);

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<double &,void({block_pointer} {__strong})(long long)>(void *a1, uint64_t a2, void *a3, double *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:a2];
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = (sqlite3_stmt *)[v11 handle];
    id v16 = a4;
    id v17 = (id)MEMORY[0x1AD0C4F80](*a5);
    uint64_t v14 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<double &,void({block_pointer} {__strong})(long long)>>(v9, v13, a2, &v16);

    [v12 invalidate];
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1A6C44148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C44448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  SafariShared::DeletionPlan::~DeletionPlan(&a9);
  _Unwind_Resume(a1);
}

void sub_1A6C446DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  SafariShared::DeletionPlan::~DeletionPlan(&a9);
  _Unwind_Resume(a1);
}

void sub_1A6C44848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C448E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C44A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(NSString *)>(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:a2];
  id v10 = v9;
  if (v9)
  {
    uint64_t v11 = (sqlite3_stmt *)[v9 handle];
    uint64_t v14 = (void *)MEMORY[0x1AD0C4F80](*a4);
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(NSString *)>>(v7, v11, a2, &v14);

    [v10 invalidate];
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1A6C44B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C44F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_1A6C450F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C451DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C45310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C45748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C459C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C45B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C46320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v10 - 192);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v10 - 144);
  SafariShared::DeletionPlan::~DeletionPlan((id *)va);

  _Unwind_Resume(a1);
}

void sub_1A6C465BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4663C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C467DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<WBSHistoryVisitOrigin>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v5 query:v6];
  [v7 bindInt64:*a3 atParameterIndex:1];
  id v8 = [v7 fetch];

  return v8;
}

void sub_1A6C468A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C46BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>(void *a1, uint64_t a2, void *a3, id *a4, id *a5, int *a6, void *a7)
{
  id v13 = a1;
  id v14 = a3;
  uint64_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v13 query:v14 error:a2];
  id v16 = v15;
  if (v15)
  {
    id v17 = (sqlite3_stmt *)[v15 handle];
    v20[0] = a4;
    v20[1] = a5;
    int v21 = *a6;
    id v22 = (id)MEMORY[0x1AD0C4F80](*a7);
    uint64_t v18 = SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(v13, v17, a2, v20);

    [v16 invalidate];
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

void sub_1A6C46D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>(void *a1, uint64_t a2, void *a3, id *a4, id *a5, void *a6)
{
  id v11 = a1;
  id v12 = a3;
  id v13 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v11 query:v12 error:a2];
  id v14 = v13;
  if (v13)
  {
    uint64_t v15 = (sqlite3_stmt *)[v13 handle];
    v18[0] = a4;
    v18[1] = a5;
    id v19 = (id)MEMORY[0x1AD0C4F80](*a6);
    uint64_t v16 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(v11, v15, a2, v18);

    [v14 invalidate];
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_1A6C46E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C46FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * const {__strong}&,std::tuple<long long &>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9 = a1;
  id v10 = a3;
  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:a2];
  id v12 = v11;
  if (v11)
  {
    id v13 = (sqlite3_stmt *)[v11 handle];
    id v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    uint64_t v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSDate * const {__strong}&,std::tuple<long long &>>>(v9, v13, a2, v17);
    [v12 invalidate];
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1A6C47084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4730C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__370(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u32[0] = a2[4].n128_u32[0];
  a1[3] = result;
  return result;
}

void __Block_byref_object_dispose__371(uint64_t a1)
{
}

void sub_1A6C47558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C477F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1A6C47E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v43 - 144);

  _Unwind_Resume(a1);
}

id eventListenerSetToString(void *a1)
{
  uint64_t v1 = NSString;
  uint64_t v2 = [a1 allObjects];
  unint64_t v3 = [v2 componentsJoinedByString:@":"];
  unint64_t v4 = [v1 stringWithFormat:@":%@:", v3];

  return v4;
}

void sub_1A6C48038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C48188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4820C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C48450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C488CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6C48CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C48E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C48FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C49218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C49364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C494A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C49604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C498B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong},double,std::tuple<long long &>>(void *a1, uint64_t a2, id *a3, id *a4, id *a5)
{
  id v9 = a1;
  id v10 = [v9 database];
  id v11 = (sqlite3_stmt *)[v9 handle];
  v14[0] = *a3;
  v14[1] = *a4;
  id v14[2] = *a5;
  uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(v10, v11, a2, v14);

  [v9 reset];
  return v12;
}

void sub_1A6C499E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C49AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C49CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C49D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C49E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4A208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4A39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4A5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double,long long)>(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:a2];
  id v10 = v9;
  if (v9)
  {
    id v11 = (sqlite3_stmt *)[v9 handle];
    id v14 = (void *)MEMORY[0x1AD0C4F80](*a4);
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double,long long)>>(v7, v11, a2, &v14);

    [v10 invalidate];
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1A6C4A6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4A808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4AC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>(void *a1, uint64_t a2, sqlite3_int64 *a3, int *a4, uint64_t a5, void *a6)
{
  id v11 = a1;
  uint64_t v12 = [v11 database];
  id v13 = (sqlite3_stmt *)[v11 handle];
  uint64_t v16 = a3;
  int v17 = *a4;
  uint64_t v18 = a5;
  id v19 = (id)MEMORY[0x1AD0C4F80](*a6);
  uint64_t v14 = SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(v12, v13, a2, &v16);

  [v11 reset];
  return v14;
}

void sub_1A6C4AE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4AFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4B0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4B1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4B37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4B4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C4B63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)__n128 result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  unint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(void *a1, unint64_t *a2)
{
  __n128 result = std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(a1, a2);
  if (result)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::erase(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove(result, a2, (uint64_t)&__p);
    unint64_t v3 = __p;
    __p = 0;
    if (v3) {
      operator delete(v3);
    }
    return (void *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(int,NSDate *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    SafariShared::WBSSQLiteEnumerationBlock<void,int,NSDate * {__strong}>::_callBlockWithAllColumns<0,1>((uint64_t)&v11, a2, *a4);
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C4BA04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,int,NSDate * {__strong}>::_callBlockWithAllColumns<0,1>(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  uint64_t v6 = a3;
  uint64_t v4 = sqlite3_column_int(a2, 0);
  if (sqlite3_column_type(a2, 1) == 5)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", sqlite3_column_double(a2, 1));
  }
  v6[2](v6, v4, v5);
}

void sub_1A6C4BAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long const&,double>(void *a1, void *a2, double *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:1];
  [v5 bindDouble:2 atParameterIndex:*a3];
}

void sub_1A6C4BB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,NSData * {__strong}>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  char v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSData * {__strong}>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C4BC7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSData * {__strong}>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindData:*a3 atParameterIndex:2];
}

void sub_1A6C4BD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,NSString * {__strong}>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  char v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C4BE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindString:*a3 atParameterIndex:2];
}

void sub_1A6C4BEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,double>(void *a1, void *a2, void *a3, void *a4, double *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  char v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,double>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C4BFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,double>(void *a1, void *a2, double *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindDouble:2 atParameterIndex:*a3];
}

void sub_1A6C4C070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,BOOL>(void *a1, void *a2, void *a3, void *a4, unsigned __int8 *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  char v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,BOOL>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C4C198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,BOOL>(void *a1, void *a2, unsigned __int8 *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindInt:*a3 atParameterIndex:2];
}

void sub_1A6C4C224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,long long>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  char v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C4C34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C4C3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSData * {__strong},long>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  char v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong},long>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C4C500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong},long>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindData:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C4C58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id *a4)
{
  id v7 = a1;
  id v8 = *a4;
  id v9 = v8;
  if (v8) {
    int v10 = sqlite3_bind_text(a2, 1, (const char *)[v8 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    int v10 = sqlite3_bind_null(a2, 1);
  }
  int v11 = v10;

  if (v11)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong},std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A6C4C66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100
    && (**(void **)(a4 + 8) = sqlite3_column_int64(a2, 0), uint64_t v8 = sqlite3_step(a2), v8 == 101))
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C4C724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,unsigned long,long long &,NSData * {__strong}&,NSData * {__strong},long>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  [v13 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,unsigned long,long long &,NSData * {__strong}&,NSData * {__strong}&,long>(v13, a3, a4, a5, a6, a7);
}

void sub_1A6C4C7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,unsigned long,long long &,NSData * {__strong}&,NSData * {__strong}&,long>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  [v11 bindInt64:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,long long &,NSData * {__strong}&,NSData * {__strong}&,long>(v11, a3, a4, a5, a6);
}

void sub_1A6C4C860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,long long &,NSData * {__strong}&,NSData * {__strong}&,long>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindInt64:*a2 atParameterIndex:3];
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,NSData * {__strong}&,long>(v9, a3, a4, a5);
}

void sub_1A6C4C8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,NSData * {__strong}&,long>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindData:*a2 atParameterIndex:4];
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,NSData * {__strong}&,long>(v7, a3, a4);
}

void sub_1A6C4C970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,NSData * {__strong}&,long>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindData:*a2 atParameterIndex:5];
  [v5 bindInt64:*a3 atParameterIndex:6];
}

void sub_1A6C4C9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long,long long &,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  [v13 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long &,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(v13, a3, a4, a5, a6, a7);
}

void sub_1A6C4CA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long &,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  [v11 bindInt64:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(v11, a3, a4, a5, a6);
}

void sub_1A6C4CB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindData:*a2 atParameterIndex:3];
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,long,long long &>(v9, a3, a4, a5);
}

void sub_1A6C4CBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,long,long long &>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindData:*a2 atParameterIndex:4];
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,long,long long &>(v7, a3, a4);
}

void sub_1A6C4CC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,long,long long &>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:5];
  [v5 bindInt64:*a3 atParameterIndex:6];
}

void sub_1A6C4CCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double,NSString * {__strong},int,int,int,long &,int,unsigned long>(void *a1, void *a2, double *a3, void *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, void *a8, unsigned int *a9, void *a10)
{
  id v17 = a1;
  [v17 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,NSString * {__strong},int,int,int,long &,int,unsigned long>(v17, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1A6C4CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,NSString * {__strong},int,int,int,long &,int,unsigned long>(void *a1, double *a2, void *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, void *a7, unsigned int *a8, void *a9)
{
  id v16 = a1;
  [v16 bindDouble:2 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},int,int,int,long &,int,unsigned long>(v16, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1A6C4CE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},int,int,int,long &,int,unsigned long>(void *a1, void *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, void *a6, unsigned int *a7, void *a8)
{
  id v15 = a1;
  [v15 bindString:*a2 atParameterIndex:3];
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,int,int,int,long &,int,unsigned long>(v15, a3, a4, a5, a6, a7, a8);
}

void sub_1A6C4CEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,int,int,int,long &,int,unsigned long>(void *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, void *a5, unsigned int *a6, void *a7)
{
  id v13 = a1;
  [v13 bindInt:*a2 atParameterIndex:4];
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,int,int,long &,int,unsigned long>(v13, a3, a4, a5, a6, a7);
}

void sub_1A6C4CF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,int,int,long &,int,unsigned long>(void *a1, unsigned int *a2, unsigned int *a3, void *a4, unsigned int *a5, void *a6)
{
  id v11 = a1;
  [v11 bindInt:*a2 atParameterIndex:5];
  SafariShared::_WBSSQLiteStatementBindAllParameters<6,int,long &,int,unsigned long>(v11, a3, a4, a5, a6);
}

void sub_1A6C4D028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<6,int,long &,int,unsigned long>(void *a1, unsigned int *a2, void *a3, unsigned int *a4, void *a5)
{
  id v9 = a1;
  [v9 bindInt:*a2 atParameterIndex:6];
  SafariShared::_WBSSQLiteStatementBindAllParameters<7,long &,int,unsigned long>(v9, a3, a4, a5);
}

void sub_1A6C4D0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<7,long &,int,unsigned long>(void *a1, void *a2, unsigned int *a3, void *a4)
{
  id v7 = a1;
  [v7 bindInt64:*a2 atParameterIndex:7];
  SafariShared::_WBSSQLiteStatementBindAllParameters<8,int,unsigned long>(v7, a3, a4);
}

void sub_1A6C4D138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<8,int,unsigned long>(void *a1, unsigned int *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt:*a2 atParameterIndex:8];
  [v5 bindInt64:*a3 atParameterIndex:9];
}

void sub_1A6C4D1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    void *v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1A6C4D3D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, double *a4)
{
  id v7 = a1;
  if (sqlite3_bind_double(a2, 1, *a4))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<double,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A6C4D46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100
    && (**(void **)(a4 + 8) = sqlite3_column_int64(a2, 0), uint64_t v8 = sqlite3_step(a2), v8 == 101))
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C4D518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},long long &>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C4D58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long,unsigned long,long long &>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,unsigned long,long long &>(v7, a3, a4);
}

void sub_1A6C4D610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,unsigned long,long long &>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:2];
  [v5 bindInt64:*a3 atParameterIndex:3];
}

void sub_1A6C4D688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, sqlite3_int64 **a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100 && (**a4 = sqlite3_column_int64(a2, 0), uint64_t v8 = sqlite3_step(a2), v8 == 101))
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C4D734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long &>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C4D7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7 = a1;
  id v8 = **a4;
  uint64_t v9 = v8;
  if (v8) {
    int v10 = sqlite3_bind_text(a2, 1, (const char *)[v8 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    int v10 = sqlite3_bind_null(a2, 1);
  }
  int v11 = v10;

  if (v11)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A6C4D88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 != 100) {
    goto LABEL_5;
  }
  if (!SafariShared::_WBSStatementFetchColumnsInTuple<std::tuple<NSData * {__strong}&>,0>(a2, (void ***)(a4 + 8)))
  {
LABEL_6:
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = sqlite3_step(a2);
  if (v8 != 101)
  {
LABEL_5:
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    goto LABEL_6;
  }
  uint64_t v9 = 1;
LABEL_7:

  return v9;
}

void sub_1A6C4D940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSStatementFetchColumnsInTuple<std::tuple<NSData * {__strong}&>,0>(sqlite3_stmt *a1, void ***a2)
{
  uint64_t v3 = SafariShared::WBSSQLiteDatatypeTraits<NSData * {__strong}>::fetch(a1, 0);
  unint64_t v4 = **a2;
  **a2 = (void *)v3;

  return 1;
}

CFDataRef SafariShared::WBSSQLiteDatatypeTraits<NSData * {__strong}>::fetch(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) == 5)
  {
    CFDataRef v4 = 0;
  }
  else
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v6 = (const UInt8 *)sqlite3_column_blob(a1, a2);
    int v7 = sqlite3_column_bytes(a1, a2);
    CFDataRef v4 = CFDataCreate(v5, v6, v7);
  }
  return v4;
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSData * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  int v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  float v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,NSString * {__strong}&>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C4DB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindData:*a2 atParameterIndex:1];
  [v5 bindString:*a3 atParameterIndex:2];
}

void sub_1A6C4DBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7 = a1;
  id v8 = **a4;
  id v9 = v8;
  if (v8) {
    int v10 = sqlite3_bind_text(a2, 1, (const char *)[v8 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    int v10 = sqlite3_bind_null(a2, 1);
  }
  int v11 = v10;

  if (v11)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A6C4DC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 != 100) {
    goto LABEL_5;
  }
  if (!SafariShared::_WBSStatementFetchColumnsInTuple<std::tuple<NSData * {__strong}&>,0>(a2, (void ***)(a4 + 8)))
  {
LABEL_6:
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = sqlite3_step(a2);
  if (v8 != 101)
  {
LABEL_5:
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    goto LABEL_6;
  }
  uint64_t v9 = 1;
LABEL_7:

  return v9;
}

void sub_1A6C4DD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id *a4)
{
  id v7 = a1;
  id v8 = *a4;
  uint64_t v9 = v8;
  if (v8) {
    int v10 = sqlite3_bind_text(a2, 1, (const char *)[v8 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    int v10 = sqlite3_bind_null(a2, 1);
  }
  int v11 = v10;

  if (v11)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A6C4DE2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  if (sqlite3_bind_double(a2, 2, *(double *)(a4 + 8)))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A6C4DED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100
    && (int v9 = sqlite3_column_int(a2, 0),
        int v10 = sqlite3_column_int(a2, 1),
        int v11 = *(int **)(a4 + 24),
        **(_DWORD **)(a4 + 16) = v9,
        int *v11 = v10,
        uint64_t v8 = sqlite3_step(a2),
        v8 == 101))
  {
    uint64_t v12 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1A6C4DF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long const&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v15 = 0;
  int v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:&v15];
  id v10 = v15;
  int v11 = v10;
  if (v9)
  {
    [v9 bindInt64:*a4 atParameterIndex:1];
    uint64_t v12 = [v9 execute];
    [v9 invalidate];
    if ((v12 - 100) >= 2 && v12 != 0) {
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v10;
    }
    uint64_t v12 = [v11 code];
  }

  return v12;
}

void sub_1A6C4E0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long const&,NSData * const {__strong}&,NSData * const {__strong},long long const&>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a3;
  id v21 = 0;
  id v15 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v13 query:v14 error:&v21];
  id v16 = v21;
  id v17 = v16;
  if (v15)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long const&,NSData * const {__strong}&,NSData * const {__strong},long long const&>(v15, a4, a5, a6, a7);
    uint64_t v18 = [v15 execute];
    [v15 invalidate];
    if ((v18 - 100) >= 2 && v18 != 0) {
      objc_msgSend(v13, "reportErrorWithCode:statement:error:", v18, objc_msgSend(v15, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v16;
    }
    uint64_t v18 = [v17 code];
  }

  return v18;
}

void sub_1A6C4E208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long const&,NSData * const {__strong}&,NSData * const {__strong},long long const&>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSData * const {__strong}&,NSData * const {__strong},long long const&>(v9, a3, a4, a5);
}

void sub_1A6C4E2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSData * const {__strong}&,NSData * const {__strong},long long const&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindData:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * const {__strong}&,long long const&>(v7, a3, a4);
}

void sub_1A6C4E32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * const {__strong}&,long long const&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindData:*a2 atParameterIndex:3];
  [v5 bindInt64:*a3 atParameterIndex:4];
}

void sub_1A6C4E3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7 = a1;
  id v8 = **a4;
  id v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 1);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A6C4E478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, *(void **)(a4 + 8)) & 1) == 0) {
      goto LABEL_8;
    }
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
    goto LABEL_9;
  }
  [v7 reportErrorWithCode:v8 statement:a2 error:a3];
LABEL_8:
  uint64_t v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A6C4E524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(sqlite3_stmt *a1, void *a2)
{
  uint64_t v3 = a2;
  sqlite3_int64 v4 = sqlite3_column_int64(a1, 0);
  v3[2](v3, v4);

  return 1;
}

void sub_1A6C4E598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, *a4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
    goto LABEL_9;
  }
  [v7 reportErrorWithCode:v8 statement:a2 error:a3];
LABEL_8:
  uint64_t v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A6C4E63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long,NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    SafariShared::WBSSQLiteEnumerationBlock<void,long long,NSString * {__strong}>::callBlockWithAllColumns((uint64_t)&v11, a2, *a4);
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C4E6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,long long,NSString * {__strong}>::callBlockWithAllColumns(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  uint64_t v6 = a3;
  sqlite3_int64 v4 = sqlite3_column_int64(a2, 0);
  id v5 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 1);
  v6[2](v6, v4, v5);
}

void sub_1A6C4E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) == 5)
  {
    sqlite3_int64 v4 = 0;
  }
  else
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v6 = sqlite3_column_text(a1, a2);
    int v7 = sqlite3_column_bytes(a1, a2);
    sqlite3_int64 v4 = (__CFString *)CFStringCreateWithBytes(v5, v6, v7, 0x8000100u, 0);
  }
  return v4;
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double,double,long &>(void *a1, void *a2, void *a3, double *a4, double *a5, void *a6)
{
  id v11 = a1;
  id v12 = a3;
  id v19 = 0;
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v11 query:v12 error:&v19];
  id v14 = v19;
  id v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double,long &>(v13, a4, a5, a6);
    uint64_t v16 = [v13 execute];
    [v13 invalidate];
    if ((v16 - 100) >= 2 && v16 != 0) {
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v14;
    }
    uint64_t v16 = [v15 code];
  }

  return v16;
}

void sub_1A6C4E960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double,long &>(void *a1, double *a2, double *a3, void *a4)
{
  id v7 = a1;
  [v7 bindDouble:1 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,long &>(v7, a3, a4);
}

void sub_1A6C4E9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,long &>(void *a1, double *a2, void *a3)
{
  id v5 = a1;
  [v5 bindDouble:2 atParameterIndex:*a2];
  [v5 bindInt64:*a3 atParameterIndex:3];
}

void sub_1A6C4EA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double,double,long long const&>(void *a1, void *a2, void *a3, double *a4, double *a5, void *a6)
{
  id v11 = a1;
  id v12 = a3;
  id v19 = 0;
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v11 query:v12 error:&v19];
  id v14 = v19;
  id v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double,long long const&>(v13, a4, a5, a6);
    uint64_t v16 = [v13 execute];
    [v13 invalidate];
    if ((v16 - 100) >= 2 && v16 != 0) {
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v14;
    }
    uint64_t v16 = [v15 code];
  }

  return v16;
}

void sub_1A6C4EBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double,long long const&>(void *a1, double *a2, double *a3, void *a4)
{
  id v7 = a1;
  [v7 bindDouble:1 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,long long const&>(v7, a3, a4);
}

void sub_1A6C4EC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,long long const&>(void *a1, double *a2, void *a3)
{
  id v5 = a1;
  [v5 bindDouble:2 atParameterIndex:*a2];
  [v5 bindInt64:*a3 atParameterIndex:3];
}

void sub_1A6C4ECB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7 = a1;
  id v8 = **a4;
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 1);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A6C4ED84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = **(id **)(a4 + 8);
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 2, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 2);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A6C4EE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, *(void **)(a4 + 16)) & 1) == 0) {
      goto LABEL_8;
    }
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
    goto LABEL_9;
  }
  [v7 reportErrorWithCode:v8 statement:a2 error:a3];
LABEL_8:
  uint64_t v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A6C4EF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,double const&,double const&,long const&>(void *a1, void *a2, double *a3, double *a4, void *a5)
{
  id v9 = a1;
  [v9 bindData:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double const&,double const&,long const&>(v9, a3, a4, a5);
}

void sub_1A6C4EF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double const&,double const&,long const&>(void *a1, double *a2, double *a3, void *a4)
{
  id v7 = a1;
  [v7 bindDouble:2 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,double const&,long const&>(v7, a3, a4);
}

void sub_1A6C4F020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,double const&,long const&>(void *a1, double *a2, void *a3)
{
  id v5 = a1;
  [v5 bindDouble:3 atParameterIndex:*a2];
  [v5 bindInt64:*a3 atParameterIndex:4];
}

void sub_1A6C4F098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id *a4)
{
  id v7 = a1;
  id v8 = *a4;
  id v9 = v8;
  if (v8)
  {
    id v10 = v8;
    int v11 = sqlite3_bind_blob64(a2, 1, (const void *)[v10 bytes], objc_msgSend(v10, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 1);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A6C4F190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = *(id *)(a4 + 8);
  id v9 = v8;
  if (v8)
  {
    id v10 = v8;
    int v11 = sqlite3_bind_blob64(a2, 2, (const void *)[v10 bytes], objc_msgSend(v10, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 2);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A6C4F294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100
    && (**(void **)(a4 + 16) = sqlite3_column_int64(a2, 0), uint64_t v8 = sqlite3_step(a2), v8 == 101))
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C4F34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, sqlite3_int64 **a4)
{
  id v7 = a1;
  if (sqlite3_bind_int64(a2, 1, **a4))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A6C4F3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = **(id **)(a4 + 8);
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 2, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 2);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A6C4F4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = **(id **)(a4 + 16);
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 3, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 3);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A6C4F59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, **(void ***)(a4 + 24)) & 1) == 0) {
      goto LABEL_8;
    }
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
    goto LABEL_9;
  }
  [v7 reportErrorWithCode:v8 statement:a2 error:a3];
LABEL_8:
  uint64_t v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A6C4F64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double &>(void *a1, void *a2, void *a3, double *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v15 = 0;
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:&v15];
  id v10 = v15;
  int v11 = v10;
  if (v9)
  {
    [v9 bindDouble:1 atParameterIndex:*a4];
    uint64_t v12 = [v9 execute];
    [v9 invalidate];
    if ((v12 - 100) >= 2 && v12 != 0) {
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v10;
    }
    uint64_t v12 = [v11 code];
  }

  return v12;
}

void sub_1A6C4F768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double const&>(void *a1, void *a2, void *a3, double *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v15 = 0;
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:&v15];
  id v10 = v15;
  int v11 = v10;
  if (v9)
  {
    [v9 bindDouble:1 atParameterIndex:*a4];
    uint64_t v12 = [v9 execute];
    [v9 invalidate];
    if ((v12 - 100) >= 2 && v12 != 0) {
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v10;
    }
    uint64_t v12 = [v11 code];
  }

  return v12;
}

void sub_1A6C4F898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1A6C4F920(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::pair<long long,int>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  uint64_t v12 = *(int *)(a3 + 8);
  i[2] = *(void *)a3;
  i[3] = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    void *v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1A6C4FB44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long,long long,long long,long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    SafariShared::WBSSQLiteEnumerationBlock<void,long long,long long,long long,long long>::callBlockWithAllColumns((uint64_t)&v11, a2, *a4);
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C4FBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,long long,long long,long long,long long>::callBlockWithAllColumns(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  uint64_t v8 = a3;
  sqlite3_int64 v4 = sqlite3_column_int64(a2, 0);
  sqlite3_int64 v5 = sqlite3_column_int64(a2, 1);
  sqlite3_int64 v6 = sqlite3_column_int64(a2, 2);
  sqlite3_int64 v7 = sqlite3_column_int64(a2, 3);
  v8[2](v8, v4, v5, v6, v7);
}

void sub_1A6C4FCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<double &,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, double **a4)
{
  id v7 = a1;
  if (sqlite3_bind_double(a2, 1, **a4))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<double &,void({block_pointer} {__strong})(long long)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A6C4FD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<double &,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, *(void **)(a4 + 8)) & 1) == 0) {
      goto LABEL_8;
    }
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
    goto LABEL_9;
  }
  [v7 reportErrorWithCode:v8 statement:a2 error:a3];
LABEL_8:
  uint64_t v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A6C4FDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong}>::callBlockWithAllColumns((uint64_t)&v11, a2, *a4);
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C4FEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong}>::callBlockWithAllColumns(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  sqlite3_int64 v5 = a3;
  sqlite3_int64 v4 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 0);
  v5[2](v5, v4);
}

void sub_1A6C4FF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7 = a1;
  id v8 = **a4;
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 1);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A6C5001C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = **(id **)(a4 + 8);
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 2, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 2);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A6C500FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  if (sqlite3_bind_int(a2, 3, *(_DWORD *)(a4 + 16)))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A6C501A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong}>::callBlockWithAllColumns((uint64_t)&v11, a2, *(void **)(a4 + 24));
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C5024C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7 = a1;
  id v8 = **a4;
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 1);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A6C50320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = **(id **)(a4 + 8);
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 2, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 2);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A6C50400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong}>::callBlockWithAllColumns((uint64_t)&v11, a2, *(void **)(a4 + 16));
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C504B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSDate * const {__strong}&,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7 = a1;
  id v8 = **a4;
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    int v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    int v11 = sqlite3_bind_null(a2, 1);
  }
  int v12 = v11;

  if (v12)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSDate * const {__strong}&,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A6C50588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSDate * const {__strong}&,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100
    && (**(void **)(a4 + 8) = sqlite3_column_int64(a2, 0), uint64_t v8 = sqlite3_step(a2), v8 == 101))
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C50640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,long long const&>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  int v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  uint64_t v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long const&>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C50764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long const&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C507F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},double,NSString * {__strong},NSData * {__strong}&>(void *a1, void *a2, double *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,NSString * {__strong},NSData * {__strong}&>(v9, a3, a4, a5);
}

void sub_1A6C5087C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,NSString * {__strong},NSData * {__strong}&>(void *a1, double *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindDouble:2 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},NSData * {__strong}&>(v7, a3, a4);
}

void sub_1A6C50900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},NSData * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:3];
  [v5 bindData:*a3 atParameterIndex:4];
}

void sub_1A6C50978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id *a4)
{
  id v7 = a1;
  id v8 = *a4;
  id v9 = v8;
  if (v8) {
    int v10 = sqlite3_bind_text(a2, 1, (const char *)[v8 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    int v10 = sqlite3_bind_null(a2, 1);
  }
  int v11 = v10;

  if (v11)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A6C50A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  if (sqlite3_bind_double(a2, 2, *(double *)(a4 + 8)))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A6C50B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100
    && (**(void **)(a4 + 16) = sqlite3_column_int64(a2, 0), uint64_t v8 = sqlite3_step(a2), v8 == 101))
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C50BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double,long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong},double,NSString * {__strong},int,int,NSString * {__strong},double,NSString * {__strong},double,long long>::_callBlockWithAllColumns<0,1,2,3,4,5,6,7,8,9>((uint64_t)&v11, a2, *a4);
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C50C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong},double,NSString * {__strong},int,int,NSString * {__strong},double,NSString * {__strong},double,long long>::_callBlockWithAllColumns<0,1,2,3,4,5,6,7,8,9>(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  uint64_t v14 = a3;
  sqlite3_int64 v4 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 0);
  double v5 = sqlite3_column_double(a2, 1);
  sqlite3_int64 v6 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 2);
  uint64_t v7 = sqlite3_column_int(a2, 3);
  uint64_t v8 = sqlite3_column_int(a2, 4);
  uint64_t v9 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 5);
  double v10 = sqlite3_column_double(a2, 6);
  char v11 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 7);
  double v12 = sqlite3_column_double(a2, 8);
  sqlite3_int64 v13 = sqlite3_column_int64(a2, 9);
  v14[2](v14, v4, v6, v7, v8, v9, v11, v13, v5, v10, v12);
}

void sub_1A6C50DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, sqlite3_int64 **a4)
{
  id v7 = a1;
  if (sqlite3_bind_int64(a2, 1, **a4))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A6C50E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  if (sqlite3_bind_int(a2, 2, *(_DWORD *)(a4 + 8)))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A6C50F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  if (sqlite3_bind_double(a2, 3, **(double **)(a4 + 16)))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A6C50FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  while (1)
  {
    uint64_t v8 = sqlite3_step(a2);
    if (v8 != 100) {
      break;
    }
    SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong},double,NSString * {__strong},int,int,NSString * {__strong},double,NSString * {__strong},double>::_callBlockWithAllColumns<0,1,2,3,4,5,6,7,8>((uint64_t)&v11, a2, *(void **)(a4 + 24));
  }
  if (v8 == 101)
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C51078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong},double,NSString * {__strong},int,int,NSString * {__strong},double,NSString * {__strong},double>::_callBlockWithAllColumns<0,1,2,3,4,5,6,7,8>(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  sqlite3_int64 v13 = a3;
  sqlite3_int64 v4 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 0);
  double v5 = sqlite3_column_double(a2, 1);
  sqlite3_int64 v6 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 2);
  uint64_t v7 = sqlite3_column_int(a2, 3);
  uint64_t v8 = sqlite3_column_int(a2, 4);
  uint64_t v9 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 5);
  double v10 = sqlite3_column_double(a2, 6);
  char v11 = SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 7);
  double v12 = sqlite3_column_double(a2, 8);
  v13[2](v13, v4, v6, v7, v8, v9, v11, v5, v10, v12);
}

void sub_1A6C511D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_4_1(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x1Cu);
}

uint64_t OUTLINED_FUNCTION_7_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 2048;
  *(double *)(result + 14) = a3;
  return result;
}

void OUTLINED_FUNCTION_8_0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

double OUTLINED_FUNCTION_13(double a1)
{
  return -a1;
}

void sub_1A6C538D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C539D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C53AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C53B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *SafariShared::HistoryObjectStreamWriter::ensureCapacity(void *this, size_t a2)
{
  if (this[1] < a2)
  {
    unint64_t v3 = this;
    free((void *)*this);
    this = malloc_type_malloc(a2, 0x1EE899C4uLL);
    void *v3 = this;
    v3[1] = a2;
  }
  return this;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(SafariShared::HistoryObjectStreamWriter *this, const _HistoryStreamedItem *a2)
{
  unint64_t v4 = a2->var8 + 88;
  var6 = a2->var6;
  var7 = a2->var7;
  if (!var7) {
    unint64_t v4 = 88;
  }
  unint64_t var10 = a2->var10;
  if (!a2->var9) {
    unint64_t var10 = 0;
  }
  unint64_t v8 = var10 + v4;
  if (a2->var9) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = 0;
  }
  if (var6)
  {
    size_t v10 = strlen(var6) + 1;
    unint64_t v11 = v10 + v8;
  }
  else
  {
    size_t v10 = 0;
    unint64_t v11 = var10 + v4;
    unint64_t v8 = 0;
  }
  unint64_t v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v11 > 0x10000) {
    size_t v13 = 88;
  }
  else {
    size_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(this, v13);
  if (var7) {
    uint64_t v14 = 88;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)this;
  long long v16 = *(_OWORD *)&a2->var2;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)&a2->var0.var0;
  unint64_t v17 = a2->var10;
  long long v18 = *(_OWORD *)&a2->var8;
  long long v19 = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v15 + 48) = *(_OWORD *)&a2->var6;
  *(_OWORD *)(v15 + 64) = v18;
  *(_OWORD *)(v15 + 16) = v16;
  *(_OWORD *)(v15 + 32) = v19;
  *(_DWORD *)(v15 + 4) = v12;
  *(void *)(v15 + 48) = v8;
  *(void *)(v15 + 56) = v14;
  *(void *)(v15 + 72) = v9;
  *(void *)(v15 + 80) = v17;
  if (v11 <= 0x10000)
  {
    if (v8) {
      memcpy((void *)(*(void *)this + v8), a2->var6, v10);
    }
    if (var7) {
      memcpy((void *)(*(void *)this + 88), a2->var7, a2->var8);
    }
    if (v9) {
      memcpy((void *)(*(void *)this + v9), a2->var9, a2->var10);
    }
    return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
  }
  if (WBSWriteExactAmountOfBytesToFileDescriptor() < 0
    || WBSWriteExactAmountOfBytesToFileDescriptor() < 0
    || WBSWriteExactAmountOfBytesToFileDescriptor() < 0
    || WBSWriteExactAmountOfBytesToFileDescriptor() < 0)
  {
    return 0;
  }
  if (v12 != v11) {
    return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
  }
  return 1;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(SafariShared::HistoryObjectStreamWriter *this, const _HistoryStreamedVisit *a2)
{
  var13 = a2->var13;
  if (var13)
  {
    size_t v5 = strlen(a2->var13);
    size_t v6 = v5 + 1;
    size_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 96;
    uint64_t v8 = 88;
  }
  else
  {
    uint64_t v8 = 0;
    size_t v6 = 0;
    size_t v7 = 88;
  }
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(this, v7);
  uint64_t v9 = *(void *)this;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&a2->var0.var0;
  long long v10 = *(_OWORD *)&a2->var2;
  long long v11 = *(_OWORD *)&a2->var4;
  long long v12 = *(_OWORD *)&a2->var11;
  *(_OWORD *)(v9 + 48) = *(_OWORD *)&a2->var9;
  *(_OWORD *)(v9 + 64) = v12;
  *(_OWORD *)(v9 + 16) = v10;
  *(_OWORD *)(v9 + 32) = v11;
  *(_DWORD *)(v9 + 4) = v7;
  *(void *)(v9 + 80) = v8;
  if (var13) {
    memcpy((void *)(*(void *)this + v8), a2->var13, v6);
  }
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  if (v4)
  {
    size_t v5 = strlen(*((const char **)a2 + 4));
    size_t v6 = v5 + 1;
    uint64_t v7 = v5 + 57;
    uint64_t v8 = 56;
  }
  else
  {
    uint64_t v8 = 0;
    size_t v6 = 0;
    uint64_t v7 = 56;
  }
  uint64_t v9 = (const char *)*((void *)a2 + 5);
  if (v9)
  {
    size_t v10 = strlen(v9) + 1;
    uint64_t v11 = v7;
    v7 += v10;
  }
  else
  {
    uint64_t v11 = 0;
    size_t v10 = 0;
  }
  size_t v12 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(a1, v12);
  uint64_t v13 = *a1;
  uint64_t v14 = *((void *)a2 + 6);
  long long v15 = a2[2];
  long long v16 = *a2;
  *(_OWORD *)(v13 + 16) = a2[1];
  *(_OWORD *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v11;
  *(void *)(v13 + 48) = v14;
  *(_OWORD *)uint64_t v13 = v16;
  *(_DWORD *)(v13 + 4) = v12;
  *(void *)(v13 + 32) = v8;
  if (v4) {
    memcpy((void *)(*a1 + v8), *((const void **)a2 + 4), v6);
  }
  if (v11) {
    memcpy((void *)(*a1 + v11), *((const void **)a2 + 5), v10);
  }
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(uint64_t *a1, _OWORD *a2)
{
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(a1, 0x20uLL);
  uint64_t v4 = *a1;
  long long v5 = a2[1];
  *(_OWORD *)uint64_t v4 = *a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 4) = 32;
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    size_t v5 = strlen(*(const char **)(a2 + 8));
    size_t v6 = v5 + 1;
    size_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 32;
    uint64_t v8 = 24;
  }
  else
  {
    uint64_t v8 = 0;
    size_t v6 = 0;
    size_t v7 = 24;
  }
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(a1, v7);
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(_DWORD *)(v9 + 4) = v7;
  *(void *)(v9 + 8) = v8;
  *(void *)(v9 + 16) = v10;
  if (v4) {
    memcpy((void *)(*a1 + v8), *(const void **)(a2 + 8), v6);
  }
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(SafariShared::HistoryObjectStreamWriter *this, const _HistoryStreamedMatchEntry *a2)
{
  var1 = a2->var1;
  if (var1)
  {
    size_t v5 = strlen(a2->var1);
    size_t v6 = v5 + 1;
    uint64_t v7 = v5 + 41;
    uint64_t v8 = 40;
  }
  else
  {
    uint64_t v8 = 0;
    size_t v6 = 0;
    uint64_t v7 = 40;
  }
  var2 = a2->var2;
  if (var2)
  {
    size_t v10 = strlen(var2) + 1;
    uint64_t v11 = v7;
    v7 += v10;
  }
  else
  {
    uint64_t v11 = 0;
    size_t v10 = 0;
  }
  size_t v12 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(this, v12);
  uint64_t v13 = *(void *)this;
  int64_t var4 = a2->var4;
  long long v15 = *(_OWORD *)&a2->var2;
  *(_OWORD *)uint64_t v13 = *(_OWORD *)&a2->var0.var0;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = var4;
  *(_DWORD *)(v13 + 4) = v12;
  *(void *)(v13 + 8) = v8;
  *(void *)(v13 + 16) = v11;
  if (var1) {
    memcpy((void *)(*(void *)this + v8), a2->var1, v6);
  }
  if (v11) {
    memcpy((void *)(*(void *)this + v11), a2->var2, v10);
  }
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(SafariShared::HistoryObjectStreamWriter *this, const _HistoryStreamedMatchData *a2)
{
  var2 = a2->var2;
  size_t var3 = a2->var3;
  if (var2) {
    size_t v6 = (var3 + 63) & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    size_t v6 = 56;
  }
  if (var2) {
    uint64_t v7 = 56;
  }
  else {
    uint64_t v7 = 0;
  }
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(this, v6);
  uint64_t v8 = *(void *)this;
  uint64_t v9 = *(void *)&a2->var6;
  long long v11 = *(_OWORD *)&a2->var2;
  long long v10 = *(_OWORD *)&a2->var4;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)&a2->var0.var0;
  *(_OWORD *)(v8 + 16) = v11;
  *(_OWORD *)(v8 + 32) = v10;
  *(void *)(v8 + 48) = v9;
  *(_DWORD *)(v8 + 4) = v6;
  *(void *)(v8 + 16) = v7;
  if (var2) {
    memcpy((void *)(*(void *)this + 56), a2->var2, var3);
  }
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

void SafariShared::ReadStreamedMatches(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  size_t v5 = a3;
  while (WBSReadExactAmountOfBytesFromFileDescriptor() >= 1)
  {
    size_t v6 = operator new(HIDWORD(__sz));
    *size_t v6 = __sz;
    uint64_t v7 = v6 + 1;
    if (WBSReadExactAmountOfBytesFromFileDescriptor() <= 0)
    {
      operator delete(v6);
      break;
    }
    int v8 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 <= 8u)
    {
      if (((1 << v8) & 0x18E) != 0)
      {
        operator delete(v6);
      }
      else if (v8 == 5)
      {
        uint64_t v11 = v6[2];
        if (v11) {
          v6[2] = (char *)v6 + v11;
        }
        if (*v7) {
          v6[1] = (char *)v6 + *v7;
        }
        uint64_t v13 = v6;
        ((void (**)(id, void **))v5)[2](v5, &v13);
        size_t v12 = v13;
        uint64_t v13 = 0;
        if (v12) {
          MEMORY[0x1AD0C4750](v12, 0x1050C40224969E2);
        }
      }
      else if (v8 == 6)
      {
        uint64_t v9 = v6[2];
        if (v9) {
          v6[2] = (char *)v6 + v9;
        }
        uint64_t v13 = v6;
        ((void (**)(id, void **))v4)[2](v4, &v13);
        long long v10 = v13;
        uint64_t v13 = 0;
        if (v10) {
          MEMORY[0x1AD0C4750](v10, 0x10C0C40CCADEA1DLL);
        }
      }
    }
  }
}

void sub_1A6C547CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1AD0C4750]();
  }

  _Unwind_Resume(a1);
}

void sub_1A6C54984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__22(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(a1 + 48);
}

void sub_1A6C54AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C54C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C54D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C54E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__51(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1AD0C4F80](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
}

void sub_1A6C54FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5517C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5535C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

void sub_1A6C55530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C55620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C55738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C557A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5580C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C55914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6C55A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C55B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C55E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C55FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C560B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C56210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C565AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C56808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C568C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C569F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C56AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C56BD8(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v2, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6C56CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<SafariShared::SuddenTerminationDisabler>::reset[abi:sn180100]((id **)va, 0);
  _Unwind_Resume(a1);
}

void sub_1A6C56DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C56F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C56FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C572EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  unint64_t v24 = v22;

  _Unwind_Resume(a1);
}

void sub_1A6C5746C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C57588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C576C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C57794(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v2, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6C5792C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C579E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C57A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C57B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C57C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C57CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C57DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C58098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C581A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C58320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C58458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C585AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C58670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C58858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C589CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C58AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C58C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C58E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C58FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5925C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C59400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C595D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5971C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C599DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(v29);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__101_0(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__102_0(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(a1 + 48);
}

void sub_1A6C59ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C59C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1A6C59D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C59DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C59EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5A040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5A17C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5A230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5A2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5A558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5AABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5AD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5AE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A6C5AF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5AF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5B71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5B9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5BAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5BE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C5C018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5C0E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5C164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5C2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5C380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5C44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5C548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5C638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5C700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

SafariShared::URLCompletionEntryKey *SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(SafariShared::URLCompletionEntryKey *this, NSString *a2)
{
  unint64_t v3 = a2;
  *(void *)this = v3;
  *((void *)this + 1) = CFHash(v3);

  return this;
}

void sub_1A6C5C884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef *SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(CFTypeRef *this, const UInt8 *a2, CFIndex a3)
{
  *this = 0;
  if (a2)
  {
    CFStringRef v4 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, a3, 0x8000100u, 0);
    size_t v5 = (void *)*this;
    *this = v4;

    CFHashCode v6 = CFHash(*this);
  }
  else
  {
    CFHashCode v6 = 0;
  }
  this[1] = (CFTypeRef)v6;
  return this;
}

void sub_1A6C5C908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double SafariShared::URLCompletionEntry::URLCompletionEntry(SafariShared::URLCompletionEntry *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

SafariShared::URLCompletionEntry *SafariShared::URLCompletionEntry::URLCompletionEntry(SafariShared::URLCompletionEntry *this, NSString *a2, NSString *a3, double a4, uint64_t a5)
{
  uint64_t v9 = a2;
  long long v10 = a3;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(this, v9);
  *((void *)this + 2) = 0;
  size_t v12 = v10;
  *((void *)this + 3) = v12;
  *((void *)this + 4) = 0;
  *((double *)this + 5) = a4;
  *((void *)this + 6) = a5;
  if (v9)
  {
    if (WTF::isUserVisibleURL((WTF *)v9, v11))
    {
      uint64_t v13 = v9;
      uint64_t v14 = (void *)*((void *)this + 2);
      *((void *)this + 2) = v13;
    }
    else
    {
      uint64_t v14 = [(NSString *)v9 safari_userVisibleURL];
      uint64_t v15 = objc_msgSend(v14, "safari_stringByFoldingWideCharactersAndNormalizing");
      long long v16 = (void *)*((void *)this + 2);
      *((void *)this + 2) = v15;
    }
  }

  return this;
}

void sub_1A6C5CA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef *SafariShared::URLCompletionEntry::URLCompletionEntry(CFTypeRef *this, const UInt8 *a2, CFIndex a3, const UInt8 *a4, CFIndex a5, double a6, const void *a7)
{
  size_t v12 = SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(this, a2, a3);
  double v12[2] = 0;
  uint64_t v14 = (void **)(v12 + 2);
  v12[3] = 0;
  v12[4] = 0;
  *((double *)v12 + 5) = a6;
  v12[6] = a7;
  uint64_t v15 = (WTF *)*v12;
  if (v15)
  {
    char isUserVisibleURL = WTF::isUserVisibleURL(v15, v13);
    unint64_t v17 = (void *)*this;
    if (isUserVisibleURL)
    {
      id v18 = v17;
      long long v19 = *v14;
      void *v14 = v18;
    }
    else
    {
      long long v19 = objc_msgSend(v17, "safari_userVisibleURL");
      uint64_t v20 = objc_msgSend(v19, "safari_stringByFoldingWideCharactersAndNormalizing");
      unint64_t v21 = *v14;
      void *v14 = (void *)v20;
    }
  }
  if (a4)
  {
    CFStringRef v22 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, a5, 0x8000100u, 0);
    unint64_t v23 = (void *)this[3];
    this[3] = v22;
  }
  return this;
}

void sub_1A6C5CB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::URLCompletionEntry::setHasAutocompleteTriggers(uint64_t this, int a2)
{
  uint64_t v2 = 0x1000000000000000;
  if (!a2) {
    uint64_t v2 = 0;
  }
  *(void *)(this + 48) = *(void *)(this + 48) & 0xEFFFFFFFFFFFFFFFLL | v2;
  return this;
}

uint64_t SafariShared::URLCompletionEntry::setVisitCountScore(uint64_t this, int a2)
{
  *(void *)(this + 48) = a2 | ((unint64_t)*(unsigned int *)(this + 52) << 32);
  return this;
}

void SafariShared::URLCompletionEntry::update(SafariShared::URLCompletionEntry *this, NSString *a2, double a3, int a4, int a5, int a6)
{
  unint64_t v17 = a2;
  uint64_t v11 = [(NSString *)v17 copy];
  size_t v12 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v11;

  *((double *)this + 5) = a3;
  unint64_t v13 = 0x8000000000000000;
  if (!a4) {
    unint64_t v13 = 0;
  }
  uint64_t v14 = 0x800000000000000;
  if (!a5) {
    uint64_t v14 = 0;
  }
  unint64_t v15 = v13 | v14;
  uint64_t v16 = 0x400000000000000;
  if (!a6) {
    uint64_t v16 = 0;
  }
  *((void *)this + 6) = *((void *)this + 6) & 0x73FFFFFFFFFFFFFFLL | v15 | v16;
}

void sub_1A6C5CC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntry::markAsDeleted(SafariShared::URLCompletionEntry *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(void *)this = &stru_1EFBE3CF8;
}

void *SafariShared::URLCompletionEntryExtras::URLCompletionEntryExtras(void *this, int *a2, int *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

char *SafariShared::URLCompletionEntryExtras::create(SafariShared::URLCompletionEntryExtras *this, const int *a2, const void *a3, const int *a4, const void *a5, const unsigned __int8 *a6)
{
  if ((a2 & 3) != 0)
  {
    unint64_t v15 = objc_msgSend(NSString, "stringWithFormat:", &stru_1EFBE3CF8, a4, a5, a6);
    uint64_t v16 = NSString;
    unint64_t v17 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm"];
    id v18 = [v17 lastPathComponent];
    uint64_t v19 = [v15 length];
    if (v19)
    {
      uint64_t v20 = [NSString stringWithFormat:@", %@", v15];
    }
    else
    {
      uint64_t v20 = &stru_1EFBE3CF8;
    }
    uint64_t v27 = [v16 stringWithFormat:@"ASSERTION FAILURE: \"%s\" in %s, %@:%d%@", "dailyVisitCountsLength % sizeof(WBSVisitCountScore) == 0", "create", v18, 470, v20];
    if (v19) {

    }
    unint64_t v28 = [MEMORY[0x1E4F29060] callStackSymbols];
    NSLog(&stru_1EFBF1D18.isa, v27, v28);

    abort();
  }
  if ((a4 & 3) != 0)
  {
    unint64_t v21 = [NSString stringWithFormat:&stru_1EFBE3CF8];
    CFStringRef v22 = NSString;
    unint64_t v23 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm"];
    unint64_t v24 = [v23 lastPathComponent];
    uint64_t v25 = [v21 length];
    if (v25)
    {
      uint64_t v26 = [NSString stringWithFormat:@", %@", v21];
    }
    else
    {
      uint64_t v26 = &stru_1EFBE3CF8;
    }
    uint64_t v29 = [v22 stringWithFormat:@"ASSERTION FAILURE: \"%s\" in %s, %@:%d%@", "weeklyVisitCountsLength % sizeof(WBSVisitCountScore) == 0", "create", v24, 471, v26];
    if (v25) {

    }
    unint64_t v30 = [MEMORY[0x1E4F29060] callStackSymbols];
    NSLog(&stru_1EFBF1D18.isa, v29, v30);

    abort();
  }
  size_t v12 = (char *)operator new((size_t)a4 + (void)a2 + (unint64_t)a6 + 32);
  unint64_t v13 = (char *)a2 + (void)(v12 + 32) + (unint64_t)a4;
  *(void *)size_t v12 = v12 + 32;
  *((void *)v12 + 1) = (char *)a2 + (void)(v12 + 32);
  *((void *)v12 + 2) = v13;
  *((void *)v12 + 3) = &a6[(void)v13];
  memcpy(v12 + 32, this, (size_t)a2);
  memcpy((char *)a2 + (void)(v12 + 32), a3, (size_t)a4);
  memcpy(*((void **)v12 + 2), a5, (size_t)a6);
  return v12;
}

void sub_1A6C5CF64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::insert(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  id v6 = *(id *)a2;
  CFTypeRef v22 = v6;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v20, (NSString *)v6);
  uint64_t v7 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup(a1, (uint64_t)v20);

  if (!v7 || *(double *)(v7 + 40) <= *(double *)(a2 + 40))
  {
    WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(a1, a2, (uint64_t)v20);
    if (!v21)
    {
      int v8 = (char *)v20[0];
      id v9 = *(id *)a2;
      *(void *)a2 = 0;
      long long v10 = *(void **)v8;
      *(void *)int v8 = v9;

      *((void *)v8 + 1) = *(void *)(a2 + 8);
      uint64_t v11 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      size_t v12 = (void *)*((void *)v8 + 2);
      *((void *)v8 + 2) = v11;

      uint64_t v13 = *(void *)(a2 + 24);
      *(void *)(a2 + 24) = 0;
      uint64_t v14 = (void *)*((void *)v8 + 3);
      *((void *)v8 + 3) = v13;

      uint64_t v15 = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = 0;
      uint64_t v16 = (void *)*((void *)v8 + 4);
      *((void *)v8 + 4) = v15;

      *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
    }
    if (*a3)
    {
      unint64_t v23 = &v22;
      unint64_t v17 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)(a1 + 1), &v22, (uint64_t)&std::piecewise_construct, (id **)&v23);
      id v18 = *a3;
      *a3 = 0;
      uint64_t v19 = v17[3];
      v17[3] = v18;
      if (v19) {
        MEMORY[0x1AD0C4750](v19, 0x10C402CAF9ECALL);
      }
    }
    id v6 = (id)v22;
  }
}

void sub_1A6C5D130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v5 = v4 & *(_DWORD *)(a2 + 8);
  uint64_t v6 = v2 + 56 * v5;
  uint64_t v7 = *(__CFString **)v6;
  if (!*(void *)v6) {
    return 0;
  }
  int v8 = 1;
  while (v7 == &stru_1EFBE3CF8 || *(void *)(v6 + 8) != *(void *)(a2 + 8) || !CFEqual(v7, *(CFTypeRef *)a2))
  {
    unsigned int v5 = (v5 + v8) & v4;
    uint64_t v6 = v2 + 56 * v5;
    uint64_t v7 = *(__CFString **)v6;
    ++v8;
    if (!*(void *)v6) {
      return 0;
    }
  }
  return v6;
}

void WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v24 = (uint64_t *)a2;
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = v7 & *(_DWORD *)(a2 + 8);
  id v9 = (__CFString **)(v6 + 56 * v8);
  long long v10 = *v9;
  if (*v9)
  {
    uint64_t v11 = 0;
    int v12 = 1;
    do
    {
      if (v10 == &stru_1EFBE3CF8)
      {
        uint64_t v11 = v9;
      }
      else if (v9[1] == *(__CFString **)(a2 + 8) && CFEqual(v10, *(CFTypeRef *)a2))
      {
        uint64_t v22 = *a1;
        if (*a1) {
          unsigned int v23 = *(_DWORD *)(v22 - 4);
        }
        else {
          unsigned int v23 = 0;
        }
        char v21 = 0;
        uint64_t v20 = v22 + 56 * v23;
        goto LABEL_27;
      }
      unsigned int v8 = (v8 + v12) & v7;
      id v9 = (__CFString **)(v6 + 56 * v8);
      long long v10 = *v9;
      ++v12;
    }
    while (*v9);
    if (v11)
    {
      v11[6] = 0;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *(_OWORD *)uint64_t v11 = 0u;
      --*(_DWORD *)(*a1 - 16);
      id v9 = v11;
    }
  }
  WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>::translate<SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKey,WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(SafariShared::URLCompletionEntry&&)::{lambda(void)#1}>((uint64_t)v9, a2, &v24);
  uint64_t v13 = *a1;
  if (*a1) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - 12) = v14;
  uint64_t v15 = *a1;
  if (*a1) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17) {
      goto LABEL_25;
    }
  }
  else if (3 * v18 > 4 * v17)
  {
    goto LABEL_25;
  }
  id v9 = (__CFString **)WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::expand(a1, (uint64_t)v9);
  uint64_t v15 = *a1;
  if (!*a1)
  {
    unsigned int v19 = 0;
    goto LABEL_26;
  }
LABEL_25:
  unsigned int v19 = *(_DWORD *)(v15 - 4);
LABEL_26:
  uint64_t v20 = v15 + 56 * v19;
  char v21 = 1;
LABEL_27:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v20;
  *(unsigned char *)(a3 + 16) = v21;
}

id SafariShared::URLCompletionEntryMap::insert(SafariShared::URLCompletionEntryMap *this, SafariShared::URLCompletionEntryBuilder *a2, char a3)
{
  SafariShared::URLCompletionEntryBuilder::buildEntryInMap((uint64_t)a2, (uint64_t *)this, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v9 = v5;
  SafariShared::URLCompletionEntryBuilder::buildExtras(a2, &v8);
  if (v8)
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}&,std::unique_ptr<SafariShared::URLCompletionEntryExtras>>((uint64_t)this + 8, (CFTypeRef *)&v9, &v9, (uint64_t *)&v8);
    uint64_t v6 = v8;
    id v5 = v9;
    unsigned int v8 = 0;
    id v9 = 0;
    if (v6)
    {
      MEMORY[0x1AD0C4750](v6, 0x10C402CAF9ECALL);
    }
  }
  else
  {
    id v9 = 0;
  }
  return v5;
}

void sub_1A6C5D4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a9) {
    MEMORY[0x1AD0C4750](a9, 0x10C402CAF9ECALL);
  }

  _Unwind_Resume(a1);
}

__CFString *SafariShared::URLCompletionEntryBuilder::buildEntryInMap(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (*(void *)a1)
  {
    int v7 = (__CFString *)CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const UInt8 **)a1, *(void *)(a1 + 8), 0x8000100u, 0);
    if (a3) {
      goto LABEL_9;
    }
  }
  else
  {
    int v7 = 0;
    if (a3) {
      goto LABEL_9;
    }
  }
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v28, &v7->isa);
  uint64_t v8 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>(a2, (uint64_t)v28);

  uint64_t v9 = *a2;
  if (*a2) {
    v9 += 56 * *(unsigned int *)(v9 - 4);
  }
  if (v9 == v8 || *(double *)(v8 + 40) <= *(double *)(a1 + 96))
  {
LABEL_9:
    long long v10 = *(const UInt8 **)(a1 + 80);
    if (v10)
    {
      uint64_t v11 = (__CFString *)CFStringCreateWithBytes(*v6, v10, *(void *)(a1 + 88), 0x8000100u, 0);
      if (a3)
      {
LABEL_11:
        double v12 = *(double *)(a1 + 96);
        uint64_t v13 = SafariShared::URLCompletionEntryBuilder::buildCachedInfo((SafariShared::URLCompletionEntryBuilder *)a1);
        SafariShared::URLCompletionEntry::URLCompletionEntry((SafariShared::URLCompletionEntry *)v28, &v7->isa, &v11->isa, v12, v13);
        WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(a2, (uint64_t)v28, (uint64_t)v26);
LABEL_15:

        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (a3) {
        goto LABEL_11;
      }
    }
    double v14 = *(double *)(a1 + 96);
    uint64_t v15 = SafariShared::URLCompletionEntryBuilder::buildCachedInfo((SafariShared::URLCompletionEntryBuilder *)a1);
    SafariShared::URLCompletionEntry::URLCompletionEntry((SafariShared::URLCompletionEntry *)v28, &v7->isa, &v11->isa, v14, v15);
    WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(a2, (uint64_t)v28, (uint64_t)v26);
    if (!v27)
    {
      uint64_t v16 = v26[0];
      id v17 = v28[0];
      v28[0] = 0;
      unint64_t v18 = *(void **)v26[0];
      *(void *)v26[0] = v17;

      *(id *)(v16 + 8) = v28[1];
      id v19 = v29;
      id v29 = 0;
      uint64_t v20 = *(void **)(v16 + 16);
      *(void *)(v16 + 16) = v19;

      id v21 = v30;
      id v30 = 0;
      uint64_t v22 = *(void **)(v16 + 24);
      *(void *)(v16 + 24) = v21;

      id v23 = v31;
      id v31 = 0;
      unint64_t v24 = *(void **)(v16 + 32);
      *(void *)(v16 + 32) = v23;

      *(_OWORD *)(v16 + 40) = v32;
    }
    goto LABEL_15;
  }
LABEL_16:
  return v7;
}

void sub_1A6C5D6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  SafariShared::URLCompletionEntry::~URLCompletionEntry((id *)va);

  _Unwind_Resume(a1);
}

char *SafariShared::URLCompletionEntryBuilder::buildExtras@<X0>(SafariShared::URLCompletionEntryBuilder *this@<X0>, char **a2@<X8>)
{
  if ((SafariShared::URLCompletionEntryBuilder::buildCachedInfo(this) & 0x7000000000000000) != 0) {
    double result = SafariShared::URLCompletionEntryExtras::create(*((SafariShared::URLCompletionEntryExtras **)this + 3), *((const int **)this + 4), *((const void **)this + 5), *((const int **)this + 6), *((const void **)this + 7), *((const unsigned __int8 **)this + 8));
  }
  else {
    double result = 0;
  }
  *a2 = result;
  return result;
}

void SafariShared::URLCompletionEntryMap::updateAutocompleteTriggers(SafariShared::URLCompletionEntryMap *this, NSString *a2, NSData *a3)
{
  uint64_t v22 = a2;
  id v5 = a3;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v21, v22);
  uint64_t v6 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup((uint64_t *)this, (uint64_t)v21);

  if (v6) {
    *(void *)(v6 + 48) = *(void *)(v6 + 48) & 0xEFFFFFFFFFFFFFFFLL | ((unint64_t)(v5 != 0) << 60);
  }
  int v7 = (void *)((char *)this + 8);
  uint64_t v8 = (uint64_t *)std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(v7, (CFTypeRef *)&v22);
  if (v8)
  {
    uint64_t v9 = v8[3];
    long long v10 = *(SafariShared::URLCompletionEntryExtras **)v9;
    uint64_t v11 = *(SafariShared::URLCompletionEntryExtras **)(v9 + 8);
    if (!v5 && v11 == v10)
    {
      uint64_t v11 = *(SafariShared::URLCompletionEntryExtras **)v9;
      if (*(SafariShared::URLCompletionEntryExtras **)(v9 + 16) == v10)
      {
        std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::erase(v7, v8);
        goto LABEL_13;
      }
    }
    uint64_t v12 = *(void *)(v9 + 16);
    uint64_t v13 = v5;
    double v14 = SafariShared::URLCompletionEntryExtras::create(v10, (const int *)(v11 - v10), v11, (const int *)(v12 - (void)v11), [(NSData *)v13 bytes], (const unsigned __int8 *)[(NSData *)v13 length]);
    v21[0] = (id *)&v22;
    uint64_t v15 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, (CFTypeRef *)&v22, (uint64_t)&std::piecewise_construct, v21);
    uint64_t v16 = (id *)v15[3];
    v15[3] = (uint64_t *)v14;
    if (!v16) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (v5)
  {
    id v17 = v5;
    unint64_t v18 = [(NSData *)v17 bytes];
    size_t v19 = [(NSData *)v17 length];
    uint64_t v20 = (id *)operator new(v19 + 32);
    id *v20 = v20 + 4;
    v20[1] = v20 + 4;
    id v20[2] = v20 + 4;
    v20[3] = (char *)v20 + v19 + 32;
    memcpy(v20 + 4, v18, v19);
    v21[0] = v20;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}&,std::unique_ptr<SafariShared::URLCompletionEntryExtras>>((uint64_t)v7, (CFTypeRef *)&v22, (id *)&v22, (uint64_t *)v21);
    uint64_t v16 = v21[0];
    v21[0] = 0;
    if (v16) {
LABEL_11:
    }
      MEMORY[0x1AD0C4750](v16, 0x10C402CAF9ECALL);
  }
LABEL_13:
}

void sub_1A6C5D96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL SafariShared::URLCompletionEntryMap::queryVisitCounts(uint64_t *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  CFTypeRef v16 = v9;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v15, (NSString *)v9);
  uint64_t v10 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup(a1, (uint64_t)v15);

  if (v10)
  {
    LODWORD(v15[0]) = *(void *)(v10 + 48);
    *a3 = SLODWORD(v15[0]);
    uint64_t v11 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(a1 + 1, &v16);
    if (v11)
    {
      *a4 = [MEMORY[0x1E4F1C9B8] dataWithBytes:*v11[3] length:v11[3][1] - *v11[3]];
      if (v11[3][2] == v11[3][1])
      {
        id v12 = 0;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:");
        id v12 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      id v13 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v15 length:4];
      id v12 = 0;
      *a4 = v13;
    }
    *a5 = v12;
    id v9 = (id)v16;
  }

  return v10 != 0;
}

void sub_1A6C5DB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::updateVisitCounts(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v77 = a3;
  int v7 = a4;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v8 = (void *)(a1 + 8);
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  id v9 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(v8, (CFTypeRef *)&v77);
  if (!v9)
  {
    LODWORD(v66[0]) = *(void *)(a2 + 48);
    uint64_t v22 = (_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, 1uLL, (unint64_t)v66);
    uint64_t v23 = 0;
    uint64_t v11 = 0;
    *((_DWORD *)v75 + HIDWORD(v76)) = *v22;
    ++HIDWORD(v76);
    goto LABEL_27;
  }
  uint64_t v10 = v9[3];
  uint64_t v11 = *v10;
  if (!*v10)
  {
    unint64_t v41 = [NSString stringWithFormat:&stru_1EFBE3CF8];
    unint64_t v42 = NSString;
    uint64_t v43 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm"];
    uint64_t v44 = [v43 lastPathComponent];
    uint64_t v45 = [v41 length];
    if (v45)
    {
      uint64_t v46 = [NSString stringWithFormat:@", %@", v41];
    }
    else
    {
      uint64_t v46 = &stru_1EFBE3CF8;
    }
    uint64_t v59 = [v42 stringWithFormat:@"ASSERTION FAILURE: \"%s\" in %s, %@:%d%@", "extras->dailyVisitCounts()", "updateVisitCounts", v44, 591, v46];
    if (v45) {

    }
    long long v60 = [MEMORY[0x1E4F29060] callStackSymbols];
    NSLog(&stru_1EFBF1D18.isa, v59, v60);

    abort();
  }
  uint64_t v12 = v10[1];
  if (!v12)
  {
    long long v47 = [NSString stringWithFormat:&stru_1EFBE3CF8];
    uint64_t v48 = NSString;
    long long v49 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm"];
    unsigned int v50 = [v49 lastPathComponent];
    uint64_t v51 = [v47 length];
    if (v51)
    {
      long long v52 = [NSString stringWithFormat:@", %@", v47];
    }
    else
    {
      long long v52 = &stru_1EFBE3CF8;
    }
    uint64_t v61 = [v48 stringWithFormat:@"ASSERTION FAILURE: \"%s\" in %s, %@:%d%@", "extras->weeklyVisitCounts()", "updateVisitCounts", v50, 592, v52];
    if (v51) {

    }
    long long v62 = [MEMORY[0x1E4F29060] callStackSymbols];
    NSLog(&stru_1EFBF1D18.isa, v61, v62);

    abort();
  }
  if (!v10[2])
  {
    long long v53 = [NSString stringWithFormat:&stru_1EFBE3CF8];
    long long v54 = NSString;
    long long v55 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm"];
    long long v56 = [v55 lastPathComponent];
    uint64_t v57 = [v53 length];
    if (v57)
    {
      long long v58 = [NSString stringWithFormat:@", %@", v53];
    }
    else
    {
      long long v58 = &stru_1EFBE3CF8;
    }
    uint64_t v63 = [v54 stringWithFormat:@"ASSERTION FAILURE: \"%s\" in %s, %@:%d%@", "extras->autocompleteTriggers()", "updateVisitCounts", v56, 593, v58];
    if (v57) {

    }
    long long v64 = [MEMORY[0x1E4F29060] callStackSymbols];
    NSLog(&stru_1EFBF1D18.isa, v63, v64);

    abort();
  }
  unint64_t v13 = v12 - v11;
  if (v12 == v11)
  {
    uint64_t v15 = *v10;
  }
  else
  {
    if (HIDWORD(v13))
    {
      __break(0xC471u);
      goto LABEL_56;
    }
    uint64_t v14 = WTF::fastMalloc((WTF *)v13);
    LODWORD(v76) = v13 >> 2;
    uint64_t v75 = (WTF *)v14;
    uint64_t v11 = *v10;
    uint64_t v15 = v10[1];
    if (v15 != *v10)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      unsigned int v18 = HIDWORD(v76);
      do
      {
        size_t v19 = (_DWORD *)(v11 + v16);
        if (v18 == v76)
        {
          uint64_t v20 = (_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, v18 + 1, (unint64_t)v19);
          uint64_t v14 = (uint64_t)v75;
          *((_DWORD *)v75 + HIDWORD(v76)) = *v20;
          int v21 = HIDWORD(v76);
          uint64_t v11 = *v10;
          uint64_t v15 = v10[1];
        }
        else
        {
          *(_DWORD *)(v14 + 4 * v18) = *v19;
          int v21 = HIDWORD(v76);
        }
        unsigned int v18 = v21 + 1;
        HIDWORD(v76) = v18;
        ++v17;
        v16 += 4;
      }
      while (v17 < (v15 - v11) >> 2);
      uint64_t v11 = v15;
    }
  }
  uint64_t v24 = v10[2];
  if (v24 != v11)
  {
    unint64_t v25 = v24 - v15;
    if (!((unint64_t)(v24 - v15) >> 32))
    {
      LODWORD(v74) = v25 >> 2;
      uint64_t v73 = WTF::fastMalloc((WTF *)v25);
      uint64_t v11 = v10[1];
      uint64_t v26 = v10[2];
      if (v26 != v11)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        unsigned int v29 = HIDWORD(v74);
        do
        {
          id v30 = (_DWORD *)(v11 + v27);
          if (v29 == v74)
          {
            id v31 = (_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v73, v29 + 1, (unint64_t)v30);
            *(_DWORD *)(v73 + 4 * HIDWORD(v74)) = *v31;
            int v32 = HIDWORD(v74);
            uint64_t v11 = v10[1];
            uint64_t v26 = v10[2];
          }
          else
          {
            *(_DWORD *)(v73 + 4 * v29) = *v30;
            int v32 = HIDWORD(v74);
          }
          unsigned int v29 = v32 + 1;
          HIDWORD(v74) = v29;
          ++v28;
          v27 += 4;
        }
        while (v28 < (v26 - v11) >> 2);
        uint64_t v11 = v26;
      }
      goto LABEL_26;
    }
    __break(0xC471u);
LABEL_56:
    JUMPOUT(0x1A6C5E180);
  }
  uint64_t v26 = v11;
LABEL_26:
  uint64_t v23 = v10[3] - v26;
LABEL_27:
  ((void (**)(id, WTF **, uint64_t *))v7)[2](v7, &v75, &v73);
  uint64_t v33 = *(void *)(a2 + 48);
  v66[0] = 0;
  v66[1] = 0;
  v66[2] = (int)v33;
  v66[3] = v75;
  v66[4] = 4 * HIDWORD(v76);
  v66[5] = v73;
  v66[6] = 4 * HIDWORD(v74);
  v66[7] = v11;
  v66[8] = v23;
  char v67 = 0;
  BOOL v68 = (v33 & 0x800000000000000) != 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v69 = 0;
  BOOL v72 = (v33 & 0x400000000000000) != 0;
  SafariShared::URLCompletionEntryBuilder::buildExtras((SafariShared::URLCompletionEntryBuilder *)v66, &v65);
  id v34 = v65;
  if (v65)
  {
    v78 = &v77;
    uint64_t v35 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v8, (CFTypeRef *)&v77, (uint64_t)&std::piecewise_construct, &v78);
    unint64_t v36 = v35[3];
    v35[3] = (uint64_t *)v34;
    if (v36) {
      MEMORY[0x1AD0C4750](v36, 0x10C402CAF9ECALL);
    }
  }
  else
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__erase_unique<NSString * {__strong}>(v8, (CFTypeRef *)&v77);
  }
  uint64_t v37 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v37 & 0x8FFFFFFFFFFFFFFFLL | ((((unint64_t)SafariShared::URLCompletionEntryBuilder::buildCachedInfo((SafariShared::URLCompletionEntryBuilder *)v66) >> 60) & 7) << 60);
  unint64_t v39 = (WTF *)v73;
  if (v73)
  {
    uint64_t v73 = 0;
    LODWORD(v74) = 0;
    WTF::fastFree(v39, v38);
  }
  unint64_t v40 = v75;
  if (v75)
  {
    uint64_t v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree(v40, v38);
  }
}

void sub_1A6C5E18C(_Unwind_Exception *a1)
{
  uint64_t v8 = *(WTF **)(v5 - 136);
  if (v8)
  {
    *(void *)(v5 - 136) = 0;
    *(_DWORD *)(v5 - 128) = 0;
    WTF::fastFree(v8, v7);
  }
  id v9 = *(WTF **)(v5 - 120);
  if (v9)
  {
    *(void *)(v5 - 120) = 0;
    *(_DWORD *)(v5 - 112) = 0;
    WTF::fastFree(v9, v7);
  }

  _Unwind_Resume(a1);
}

__n128 SafariShared::URLCompletionEntryBuilder::URLCompletionEntryBuilder(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

{
  long long v2;
  long long v3;
  __n128 result;
  long long v5;
  long long v6;

  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t SafariShared::URLCompletionEntryBuilder::buildCachedInfo(SafariShared::URLCompletionEntryBuilder *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if (*((void *)this + 4) >= 4uLL && **((_DWORD **)this + 3) != v1) {
    v1 |= 0x4000000000000000uLL;
  }
  if (*((void *)this + 6)) {
    v1 |= 0x2000000000000000uLL;
  }
  if (*((void *)this + 8)) {
    v1 |= 0x1000000000000000uLL;
  }
  if (*((unsigned char *)this + 72)) {
    v1 |= 0x8000000000000000;
  }
  if (*((unsigned char *)this + 73)) {
    v1 |= 0x800000000000000uLL;
  }
  if (*((unsigned char *)this + 104)) {
    return v1 | 0x400000000000000;
  }
  else {
    return v1;
  }
}

void SafariShared::URLCompletionEntryMap::recordVisit(uint64_t *a1, void *a2, void *a3, int a4, uint64_t a5, int a6, int a7, int a8, double a9)
{
  LODWORD(v10) = a7;
  unint64_t v17 = a2;
  unsigned int v18 = a3;
  int v45 = (int)v10;
  BOOL v19 = a5 == 0;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v36, v17);
  uint64_t v20 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup(a1, (uint64_t)v36);

  if (v20)
  {
    double v21 = *(double *)(v20 + 40);
    if (a6)
    {
      int v22 = *(_DWORD *)(v20 + 48) + v10;
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 3221225472;
      v33[2] = ___ZN12SafariShared21URLCompletionEntryMap11recordVisitEP8NSStringS2_db21WBSHistoryVisitOriginbib_block_invoke;
      v33[3] = &__block_descriptor_64_e13_v24__0_v8_v16l;
      void v33[4] = v20;
      int v34 = v22;
      int v35 = (int)v10;
      *(double *)&v33[5] = v21;
      *(double *)&v33[6] = a9;
      SafariShared::URLCompletionEntryMap::updateVisitCounts((uint64_t)a1, v20, v17, v33);
    }
    if (v21 < a9) {
      SafariShared::URLCompletionEntry::update((SafariShared::URLCompletionEntry *)v20, v18, a9, a4, a5 == 0, a8);
    }
  }
  else
  {
    uint64_t v23 = [(NSString *)v17 UTF8String];
    char v31 = a4;
    char v32 = a8;
    uint64_t v24 = [(NSString *)v18 UTF8String];
    unint64_t v25 = (void *)strlen(v23);
    BOOL v26 = a6 == 0;
    if (a6) {
      uint64_t v10 = (void *)(int)v10;
    }
    else {
      uint64_t v10 = 0;
    }
    if (a6) {
      uint64_t v27 = &v45;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v26) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = 4;
    }
    if (v24) {
      size_t v29 = strlen(v24);
    }
    else {
      size_t v29 = 0;
    }
    v36[0] = (id)v23;
    v36[1] = v25;
    v36[2] = v10;
    v36[3] = v27;
    v36[4] = (id)v28;
    long long v37 = 0u;
    long long v38 = 0u;
    char v39 = v31;
    BOOL v40 = v19;
    unint64_t v41 = v24;
    size_t v42 = v29;
    double v43 = a9;
    char v44 = v32;
    id v30 = SafariShared::URLCompletionEntryMap::insert((SafariShared::URLCompletionEntryMap *)a1, (SafariShared::URLCompletionEntryBuilder *)v36, 0);
  }
}

void sub_1A6C5E52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared21URLCompletionEntryMap11recordVisitEP8NSStringS2_db21WBSHistoryVisitOriginbib_block_invoke(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  int v3 = *(_DWORD *)(a1 + 60);
  *(void *)(*(void *)(a1 + 32) + 48) = *(int *)(a1 + 56) | ((unint64_t)*(unsigned int *)(*(void *)(a1 + 32) + 52) << 32);
  return WBSHistoryAddVisitToScore(v3, a2, a3, *(double *)(a1 + 40), *(double *)(a1 + 48));
}

void SafariShared::URLCompletionEntryMap::updateItemTitle(SafariShared::URLCompletionEntryMap *this, NSString *a2, double a3, NSString *a4, NSString *a5)
{
  uint64_t v8 = a4;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v11, a2);
  uint64_t v9 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup((uint64_t *)this, (uint64_t)v11);

  if (v9)
  {
    double v10 = *(double *)(v9 + 40);
    if (v10 == a3) {
      SafariShared::URLCompletionEntry::update((SafariShared::URLCompletionEntry *)v9, v8, v10, *(void *)(v9 + 48) >> 63, (*(void *)(v9 + 48) & 0x800000000000000) != 0, (*(void *)(v9 + 48) & 0x400000000000000) != 0);
    }
  }
}

void sub_1A6C5E620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::updateItemScore(SafariShared::URLCompletionEntryMap *this, NSString *a2, double a3, int a4, int a5, BOOL *a6)
{
  uint64_t v11 = a2;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v16, v11);
  uint64_t v12 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup((uint64_t *)this, (uint64_t)v16);

  if (v12)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___ZN12SafariShared21URLCompletionEntryMap15updateItemScoreEP8NSStringdiiPb_block_invoke;
    v13[3] = &__block_descriptor_64_e13_v24__0_v8_v16l;
    v13[4] = v12;
    int v14 = a5;
    int v15 = a4;
    *(double *)&v13[5] = a3;
    v13[6] = a6;
    SafariShared::URLCompletionEntryMap::updateVisitCounts((uint64_t)this, v12, v11, v13);
  }
  else if (a6)
  {
    *a6 = 0;
  }
}

void sub_1A6C5E73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared21URLCompletionEntryMap15updateItemScoreEP8NSStringdiiPb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(_DWORD *)(a1 + 56);
  uint64_t v7 = *(unsigned int *)(a1 + 60);
  *(_DWORD *)(v5 + 48) = (v6 + *(_DWORD *)(v5 + 48) - v7) & ~((v6 + *(_DWORD *)(v5 + 48) - (int)v7) >> 31);
  return WBSHistoryUpdateScoreOfVisit(v7, v6, a2, *(double *)(v5 + 40), *(double *)(a1 + 40), a3, *(char **)(a1 + 48));
}

void SafariShared::URLCompletionEntryMap::remove(uint64_t *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        int v14 = *(NSString **)(*((void *)&v10 + 1) + 8 * i);
        SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v9, v14);
        uint64_t v7 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>(a1, (uint64_t)v9);
        uint64_t v8 = *a1;
        if (*a1) {
          v8 += 56 * *(unsigned int *)(v8 - 4);
        }
        if (v8 != v7) {
          WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::remove(a1, v7);
        }

        std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__erase_unique<NSString * {__strong}>(a1 + 1, (CFTypeRef *)&v14);
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v15 count:16];
    }
    while (v4);
  }
}

void sub_1A6C5E8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSString *SafariShared::URLCompletionEntryMap::nextItemInRedirectChainOfItem(SafariShared::URLCompletionEntryMap *this, NSString *a2)
{
  id v3 = a2;
  if (*(void *)this) {
    uint64_t v4 = *(void *)this + 56 * *(unsigned int *)(*(void *)this - 4);
  }
  else {
    uint64_t v4 = 0;
  }
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v13, v3);
  uint64_t v5 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>((uint64_t *)this, (uint64_t)v13);

  if (v4 == v5 || (int v6 = (NSString *)*(id *)(v5 + 32)) == 0)
  {
    long long v10 = 0;
  }
  else
  {
    uint64_t v7 = v6;
    SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v13, v6);
    BOOL v8 = v4 == WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>((uint64_t *)this, (uint64_t)v13);

    BOOL v9 = !v8;
    if (v8) {
      long long v10 = 0;
    }
    else {
      long long v10 = v7;
    }
    if (v9) {
      long long v11 = 0;
    }
    else {
      long long v11 = v7;
    }
  }
  return v10;
}

void sub_1A6C5EA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::setNextItemInRedirectChainOfItem(SafariShared::URLCompletionEntryMap *this, NSString *a2, NSString *a3)
{
  uint64_t v5 = a2;
  int v6 = a3;
  if (v5)
  {
    SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v8, v5);
    uint64_t v7 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup((uint64_t *)this, (uint64_t)v8);

    if (v7) {
      objc_storeStrong((id *)(v7 + 32), a3);
    }
  }
}

void sub_1A6C5EAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::enumerate(uint64_t *a1, int a2, int a3, void *a4)
{
  uint64_t v16 = a4;
  uint64_t v7 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::begin(a1);
  BOOL v9 = v7;
  long long v10 = v8;
  if (*a1) {
    uint64_t v11 = *a1 + 56 * *(unsigned int *)(*a1 - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  if (a2 >= 1 && (void *)v11 != v7)
  {
    int v12 = 0;
    while (1)
    {
      v9 += 7;
      if (v9 == v8)
      {
        BOOL v9 = v8;
LABEL_14:
        if (++v12 >= a2 || v9 == (void *)v11) {
          break;
        }
      }
      else
      {
        if (*v9) {
          BOOL v13 = *v9 == (void)&stru_1EFBE3CF8;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13) {
          goto LABEL_14;
        }
      }
    }
  }
  if (v9 != (void *)v11)
  {
    while (1)
    {
      v16[2](v16, v9);
      if (a3 >= 1 && v9 != (void *)v11) {
        break;
      }
LABEL_29:
      if (v9 == (void *)v11) {
        goto LABEL_30;
      }
    }
    int v14 = 0;
    while (1)
    {
      v9 += 7;
      if (v9 == v10)
      {
        BOOL v9 = v10;
LABEL_27:
        if (++v14 >= a3 || v9 == (void *)v11) {
          goto LABEL_29;
        }
      }
      else
      {
        if (*v9) {
          BOOL v15 = *v9 == (void)&stru_1EFBE3CF8;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15) {
          goto LABEL_27;
        }
      }
    }
  }
LABEL_30:
}

void sub_1A6C5EC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::begin(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  if (!*a1) {
    return 0;
  }
  if (*((_DWORD *)v1 - 3)) {
    return WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::makeConstIterator(a1, v1);
  }
  return &v1[7 * *((unsigned int *)v1 - 1)];
}

void SafariShared::URLCompletionEntryMap::enumerateConcurrently(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  BOOL v9 = a2;
  long long v10 = a3;
  id v11 = a5;
  int v12 = v11;
  if (a4 == 1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZNK12SafariShared21URLCompletionEntryMap21enumerateConcurrentlyEPU28objcproto17OS_dispatch_group8NSObjectPU28objcproto17OS_dispatch_queueS1_iU13block_pointerFvRKNS_18URLCompletionEntryEE_block_invoke;
    block[3] = &unk_1E5C9AF68;
    uint64_t v22 = a1;
    id v21 = v11;
    dispatch_group_async(v9, v10, block);
  }
  else if (a4 >= 1)
  {
    int v13 = 0;
    uint64_t v14 = MEMORY[0x1E4F143A8];
    do
    {
      v15[0] = v14;
      v15[1] = 3221225472;
      id v15[2] = ___ZNK12SafariShared21URLCompletionEntryMap21enumerateConcurrentlyEPU28objcproto17OS_dispatch_group8NSObjectPU28objcproto17OS_dispatch_queueS1_iU13block_pointerFvRKNS_18URLCompletionEntryEE_block_invoke_2;
      v15[3] = &unk_1E5C9D5E8;
      uint64_t v17 = a1;
      int v18 = v13;
      int v19 = a4;
      id v16 = v12;
      dispatch_group_async(v9, v10, v15);

      ++v13;
    }
    while (a4 != v13);
  }
}

void *___ZNK12SafariShared21URLCompletionEntryMap21enumerateConcurrentlyEPU28objcproto17OS_dispatch_group8NSObjectPU28objcproto17OS_dispatch_queueS1_iU13block_pointerFvRKNS_18URLCompletionEntryEE_block_invoke(uint64_t a1)
{
  long long v2 = *(uint64_t **)(a1 + 40);
  __n128 result = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::begin(v2);
  uint64_t v4 = result;
  int v6 = v5;
  if (*v2) {
    uint64_t v7 = *v2 + 56 * *(unsigned int *)(*v2 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 != result)
  {
    do
    {
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
      while (1)
      {
        v4 += 7;
        if (v4 == v6) {
          break;
        }
        if (*v4) {
          BOOL v8 = *v4 == (void)&stru_1EFBE3CF8;
        }
        else {
          BOOL v8 = 1;
        }
        if (!v8) {
          goto LABEL_13;
        }
      }
      uint64_t v4 = v6;
LABEL_13:
      ;
    }
    while (v4 != (void *)v7);
  }
  return result;
}

void ___ZNK12SafariShared21URLCompletionEntryMap21enumerateConcurrentlyEPU28objcproto17OS_dispatch_group8NSObjectPU28objcproto17OS_dispatch_queueS1_iU13block_pointerFvRKNS_18URLCompletionEntryEE_block_invoke_2(uint64_t a1)
{
}

uint64_t *SafariShared::URLCompletionEntryMap::visitedMoreThanOnceStatistics(SafariShared::URLCompletionEntryMap *this, NSString *a2)
{
  int v6 = a2;
  id v3 = std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>((void *)this + 1, (CFTypeRef *)&v6);
  if (v3) {
    uint64_t v4 = v3[3];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1A6C5EF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL SafariShared::URLCompletionEntryMap::addURLCompletionMatchEntryToArray(uint64_t *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  CFTypeRef v24 = v9;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v23, (NSString *)v9);
  uint64_t v10 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>(a1, (uint64_t)v23);

  if (*a1) {
    uint64_t v11 = *a1 + 56 * *(unsigned int *)(*a1 - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 != v10)
  {
    uint64_t v12 = [v8 count];
    double v13 = *(double *)(v10 + 40);
    uint64_t v14 = *(void *)(v10 + 48);
    if (!v12)
    {
      +[WBSHistoryVisit weightedVisitCountFromScore:*(void *)(v10 + 48)];
      [v7 setVisitCount:vcvtps_s32_f32(v15)];
      [v7 setLastVisitedTimeInterval:v13];
      uint64_t v14 = *(void *)(v10 + 48);
    }
    if ((v14 & 0x7000000000000000) != 0)
    {
      id v16 = std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>(a1 + 1, &v24)[3];
      if (!v12 && v16[3] != v16[2]) {
        objc_msgSend(v7, "setAutocompleteTriggers:length:");
      }
    }
    float v17 = WBSTopSitesScore();
    int v18 = [WBSHistoryServiceURLCompletionMatchEntry alloc];
    id v19 = *(id *)v10;
    *(float *)&double v20 = v17;
    id v21 = [(WBSHistoryServiceURLCompletionMatchEntry *)v18 initWithURLString:v19 title:*(void *)(v10 + 24) topSitesScore:*(int *)(v10 + 48) visitCountScore:v20];
    [v8 addObject:v21];

    id v9 = (id)v24;
  }

  return v11 != v10;
}

void sub_1A6C5F124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

double SafariShared::URLCompletionEntryMap::lastVisitTime(SafariShared::URLCompletionEntryMap *this, NSString *a2)
{
  id v3 = a2;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v8, v3);
  uint64_t v4 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>((uint64_t *)this, (uint64_t)v8);

  uint64_t v5 = *(void *)this;
  if (*(void *)this) {
    v5 += 56 * *(unsigned int *)(v5 - 4);
  }
  if (v5 == v4) {
    double v6 = 0.0;
  }
  else {
    double v6 = *(double *)(v4 + 40);
  }

  return v6;
}

void sub_1A6C5F214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryBuilder::buildEntry(SafariShared::URLCompletionEntryBuilder *this)
{
}

void sub_1A6C5F2C0(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v1, 0x1080C405A21ED23);
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntry::~URLCompletionEntry(id *this)
{
}

void SafariShared::URLCompletionEntryBuilder::validateVisitedCountsIfNeeded(SafariShared::URLCompletionEntryBuilder *this)
{
  if ((WBSValidateVisitCountScores(*((void *)this + 3), *((void *)this + 4) >> 2, 300) & 1) == 0)
  {
    long long v2 = WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      SafariShared::URLCompletionEntryBuilder::validateVisitedCountsIfNeeded(v2);
    }
  }
  if ((WBSValidateVisitCountScores(*((void *)this + 5), *((void *)this + 6) >> 2, 2100) & 1) == 0)
  {
    id v3 = WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      SafariShared::URLCompletionEntryBuilder::validateVisitedCountsIfNeeded(v3);
    }
  }
}

uint64_t __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__28(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(a1 + 48);
}

void (**std::for_each[abi:sn180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<long long,long long>,void *> *>>,void({block_pointer} {__strong})(std::pair<long long,long long> const&)>(uint64_t *a1, uint64_t *a2, void *a3))(id, _OWORD *)
{
  for (uint64_t i = a3; a1 != a2; a1 = (uint64_t *)*a1)
  {
    long long v7 = *((_OWORD *)a1 + 1);
    i[2](i, &v7);
  }
  return i;
}

void sub_1A6C5F458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5F4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C5F988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
  id v3 = *(id **)(a1 + 48);
  uint64_t v1 = (void *)(a1 + 48);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<SafariShared::URLCompletionEntry>::operator()[abi:sn180100]((uint64_t)v1, v2);
  }
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__43(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result) {
    JUMPOUT(0x1AD0C4750);
  }
  return result;
}

void sub_1A6C60138(_Unwind_Exception *a1)
{
  id v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1A6C602BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C60480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C606D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 48) = v2;
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 56, (uint64_t *)(a2 + 56));
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
  std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::~__hash_table(a1 + 56);
  uint64_t v2 = *(void **)(a1 + 48);
}

void sub_1A6C60B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A6C60E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__destroy_vector::operator()[abi:sn180100](&a33);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__50(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__51(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__destroy_vector::operator()[abi:sn180100](&v1);
}

void sub_1A6C613D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6164C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id *std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::insert(void *a1, uint64_t *a2, id *a3)
{
  uint64_t v4 = (id *)a2;
  long long v7 = (char *)*a1;
  double v6 = (uint64_t *)a1[1];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v8 = a1[2];
  if ((unint64_t)v6 >= v8)
  {
    unint64_t v10 = (((char *)v6 - v7) >> 3) + 1;
    if (v10 >> 61) {
      goto LABEL_37;
    }
    uint64_t v11 = (char *)a2 - v7;
    uint64_t v12 = ((char *)a2 - v7) >> 3;
    uint64_t v13 = v8 - (void)v7;
    if (v13 >> 2 > v10) {
      unint64_t v10 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v10;
    }
    uint64_t v35 = a1 + 2;
    if (v14) {
      float v15 = (void **)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100]((uint64_t)(a1 + 2), v14);
    }
    else {
      float v15 = 0;
    }
    id v16 = &v15[v12];
    char v32 = v15;
    *(void *)&long long v33 = v16;
    *((void *)&v33 + 1) = v16;
    int v34 = (char *)&v15[v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v7 == (char *)v4) {
          unint64_t v20 = 1;
        }
        else {
          unint64_t v20 = v11 >> 2;
        }
        uint64_t v39 = v9;
        id v21 = (void **)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100](v9, v20);
        uint64_t v23 = (uint64_t *)v33;
        uint64_t v24 = *((void *)&v33 + 1) - v33;
        if (*((void *)&v33 + 1) == (void)v33)
        {
          int64x2_t v30 = vdupq_n_s64(v33);
          unint64_t v26 = (unint64_t)&v21[v20 >> 2];
        }
        else
        {
          uint64_t v25 = v24 >> 3;
          unint64_t v26 = (unint64_t)&v21[v20 >> 2] + (v24 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v27 = 8 * v25;
          uint64_t v28 = (char *)&v21[v20 >> 2];
          do
          {
            if (!v28) {
              goto LABEL_36;
            }
            uint64_t v29 = *v23;
            *v23++ = 0;
            *(void *)uint64_t v28 = v29;
            v28 += 8;
            v27 -= 8;
          }
          while (v27);
          int64x2_t v30 = (int64x2_t)v33;
        }
        char v31 = v34;
        unint64_t v36 = v32;
        char v32 = v21;
        *(void *)&long long v33 = &v21[v20 >> 2];
        int64x2_t v37 = v30;
        *((void *)&v33 + 1) = v26;
        int v34 = (char *)&v21[v22];
        long long v38 = v31;
        std::__split_buffer<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::~__split_buffer((uint64_t)&v36);
        id v16 = (void **)*((void *)&v33 + 1);
        if (*((void *)&v33 + 1)) {
          goto LABEL_24;
        }
        goto LABEL_36;
      }
      if (v12 >= -1) {
        uint64_t v17 = v12 + 1;
      }
      else {
        uint64_t v17 = v12 + 2;
      }
      std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,0>(&v15[v12], v16, &v16[-(v17 >> 1)]);
      id v16 = v18;
      *(void *)&long long v33 = v33 - 8 * (v17 >> 1);
      *((void *)&v33 + 1) = v18;
    }
    if (v16)
    {
LABEL_24:
      uint64_t *v16 = *a3;
      *((void *)&v33 + 1) += 8;
      uint64_t v4 = (id *)std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__swap_out_circular_buffer(a1, &v32, v4);
      std::__split_buffer<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::~__split_buffer((uint64_t)&v32);
      return v4;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    abort();
  }
  if (a2 == v6)
  {
    if (v7)
    {
      *a2 = (uint64_t)*a3;
      a1[1] = v4 + 1;
      return v4;
    }
    goto LABEL_36;
  }
  std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__move_range(a1, a2, v6, (uint64_t)(a2 + 1));
  if (v4 <= a3) {
    a3 += a1[1] > (unint64_t)a3;
  }
  objc_storeStrong(v4, *a3);
  return v4;
}

void sub_1A6C618A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL WBSHistoryServiceURLCompletionMatchEntrySorter(WBSHistoryServiceURLCompletionMatchEntry *a1, WBSHistoryServiceURLCompletionMatchEntry *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  [(WBSHistoryServiceURLCompletionMatchEntry *)v3 topSitesScore];
  float v6 = v5;
  [(WBSHistoryServiceURLCompletionMatchEntry *)v4 topSitesScore];
  BOOL v8 = v6 > v7;

  return v8;
}

void sub_1A6C61920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C619B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:sn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  float v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  BOOL v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1A6C61CC8(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1AD0C4710](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AD0C4710](a1 + 128);
  return a1;
}

void *std::__put_character_sequence[abi:sn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1AD0C4650](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:sn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1AD0C4660](v13);
  return a1;
}

void sub_1A6C61F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

uint64_t std::__pad_and_output[abi:sn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:sn180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1A6C620F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:sn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:sn180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:sn180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_15:
  }
    abort();
  float v5 = (void *)result;
  size_t v6 = v4;
  if (v4 > 0x16)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t result = (uint64_t)operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = result;
    a2 = (void *)result;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
  }
  int v9 = (char *)a2 + v6;
  if (a2 <= v5 && v9 > (unsigned char *)v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v6) {
    uint64_t result = (uint64_t)memmove(a2, v5, v6);
  }
  *int v9 = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:sn180100](uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 96);
  if ((v2 & 0x10) != 0)
  {
    unint64_t v4 = *(void *)(a1 + 88);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v4 < v5)
    {
      *(void *)(a1 + 88) = v5;
      unint64_t v4 = v5;
    }
    uint64_t result = *(void *)(a1 + 40);
    if ((uint64_t)(v4 - result) < 0) {
LABEL_9:
    }
      __break(1u);
  }
  else
  {
    if ((v2 & 8) == 0) {
      return 0;
    }
    uint64_t result = *(void *)(a1 + 16);
    if (*(void *)(a1 + 32) - result < 0) {
      goto LABEL_9;
    }
  }
  return result;
}

void std::default_delete<SafariShared::URLCompletionEntry>::operator()[abi:sn180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x1AD0C4750);
  }
}

uint64_t std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::__deallocate_node(a1, *(id **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void ___ZL34threadCountToEnumerateConcurrentlyv_block_invoke()
{
  id v2 = [MEMORY[0x1E4F28F80] processInfo];
  int v0 = [v2 activeProcessorCount];
  if (v0 >= 4) {
    int v1 = 4;
  }
  else {
    int v1 = v0;
  }
  if (v1 <= 1) {
    int v1 = 1;
  }
  threadCountToEnumerateConcurrently(void)::threadint64_t Count = v1;
}

void sub_1A6C6241C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t **___ZN12SafariShared32URLCompletionRedundancyPreventer22shouldProcessURLStringEP8NSString_block_invoke(uint64_t a1)
{
  id v2 = (void *)(*(void *)(a1 + 40) + 8);
  uint64_t v3 = (CFTypeRef *)(a1 + 48);
  uint64_t result = std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>(v2, (CFTypeRef *)(a1 + 48));
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    return (uint64_t **)std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::__emplace_unique_key_args<NSString * {__strong},NSString * const {__strong}&>((uint64_t)v2, v3, (id *)v3);
  }
  return result;
}

uint64_t **std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>(void *a1, CFTypeRef *a2)
{
  CFHashCode v4 = CFHash(*a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  CFHashCode v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    CFHashCode v9 = v4;
    if (v4 >= *(void *)&v5) {
      CFHashCode v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v6 == v12)
    {
      if (CFEqual(i[2], *a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::__emplace_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(uint64_t a1, CFTypeRef *a2, id *a3)
{
  CFHashCode v7 = CFHash(*a2);
  CFHashCode v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      CFHashCode v3 = v7;
      if (v7 >= v9) {
        CFHashCode v3 = v7 % v9;
      }
    }
    else
    {
      CFHashCode v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (CFEqual(*((CFTypeRef *)i + 2), *a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x18uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  *((void *)i + 2) = *a3;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        CFHashCode v3 = v8 % v9;
      }
      else {
        CFHashCode v3 = v8;
      }
    }
    else
    {
      CFHashCode v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)uint64_t i = *v23;
LABEL_38:
    void *v23 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v15;
  void *v15 = i;
  *(void *)(v22 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v24 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1A6C627F0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<NSString * {__strong},void *>>>::operator()[abi:sn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<NSString * {__strong},void *>>>::operator()[abi:sn180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__destroy_vector::operator()[abi:sn180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    CFHashCode v4 = (char *)v1[1];
    int8x8_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        CFHashCode v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,0>(void **a1, void **a2, void **a3)
{
  CFHashCode v4 = a1;
  if (a1 != a2)
  {
    do
    {
      CFHashCode v6 = *v4;
      *v4++ = 0;
      CFHashCode v7 = *a3;
      *a3++ = v6;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__move_range(void *result, void *a2, uint64_t *a3, uint64_t a4)
{
  int8x8_t v5 = (void *)result[1];
  CFHashCode v6 = v5;
  if ((void *)((char *)v5 + (void)a2 - a4) >= a3)
  {
LABEL_5:
    result[1] = v6;
    return std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,0>(a2, (void *)((char *)v5 + (void)a2 - a4), v5);
  }
  else
  {
    CFHashCode v7 = (void *)((char *)v5 + (void)a2 - a4);
    CFHashCode v6 = (void *)result[1];
    while (v6)
    {
      uint64_t v8 = *v7;
      *v7++ = 0;
      *v6++ = v8;
      if (v7 >= a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__swap_out_circular_buffer(void *a1, void *a2, void *a3)
{
  uint64_t result = a2[1];
  int8x8_t v5 = (void *)*a1;
  uint64_t v6 = result;
  if ((void *)*a1 != a3)
  {
    CFHashCode v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      uint64_t v8 = *--v7;
      void *v7 = 0;
      *(void *)(v6 - 8) = v8;
      v6 -= 8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  unint64_t v9 = (void *)a1[1];
  uint8x8_t v10 = (void *)a2[2];
  if (v9 == a3)
  {
LABEL_8:
    a2[2] = v10;
    unint64_t v12 = (void *)*a1;
    *a1 = v6;
    a2[1] = v12;
    uint64_t v13 = a1[1];
    a1[1] = a2[2];
    a2[2] = v13;
    uint64_t v14 = a1[2];
    a1[2] = a2[3];
    a2[3] = v14;
    *a2 = a2[1];
  }
  else
  {
    while (v10)
    {
      uint64_t v11 = *a3;
      *a3++ = 0;
      *v10++ = v11;
      if (a3 == v9)
      {
        uint64_t v6 = a2[1];
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  return result;
}

void *std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,0>(void *a1, void *a2, void *a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v8 = *--v6;
      uint64_t v7 = v8;
      *uint64_t v6 = 0;
      unint64_t v9 = (void *)*--a3;
      *a3 = v7;
    }
    while (v6 != a1);
  }
  return a2;
}

void *std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,0>(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v2) {
      MEMORY[0x1AD0C4750](v2, 0x10C402CAF9ECALL);
    }
    uint64_t v3 = *(void **)a1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::deallocateTable(id *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    CFHashCode v4 = a1;
    do
    {
      if (*v4 != &stru_1EFBE3CF8)
      {
      }
      v4 += 7;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 256;
  }
  return WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::rehash(a1, v5, a2);
}

__n128 WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>::translate<SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKey,WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(SafariShared::URLCompletionEntry&&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *a3;
  uint64_t v5 = **a3;
  uint64_t v6 = (*a3)[1];
  uint64_t *v4 = 0;
  uint64_t v7 = v4[2];
  uint64_t v8 = v4[3];
  v4[2] = 0;
  v4[3] = 0;
  uint64_t v9 = v4[4];
  v4[4] = 0;
  __n128 v15 = *(__n128 *)(v4 + 5);
  uint8x8_t v10 = *(void **)a1;
  *(void *)a1 = v5;

  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;

  unint64_t v12 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v8;

  uint64_t v13 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v9;

  __n128 result = v15;
  *(__n128 *)(a1 + 40) = v15;
  return result;
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(56 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v4 + 56 * v9;
      if (*(__CFString **)v11 != &stru_1EFBE3CF8)
      {
        if (*(void *)v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unsigned int v15 = v13 & *(_DWORD *)(v11 + 8);
          int v16 = 1;
          do
          {
            unsigned int v17 = v15;
            uint64_t v18 = v12 + 56 * v15;
            unsigned int v15 = (v15 + v16++) & v13;
          }
          while (*(void *)v18);
          uint64_t v19 = v12 + 56 * v17;

          id v20 = *(id *)v11;
          uint64_t v21 = *(void *)(v11 + 8);
          *(void *)uint64_t v11 = 0;
          *(void *)uint64_t v18 = v20;
          *(void *)(v18 + 8) = v21;
          uint64_t v22 = v4 + 56 * v9;
          long long v23 = *(_OWORD *)(v22 + 16);
          *(void *)(v22 + 16) = 0;
          *(void *)(v22 + 24) = 0;
          *(_OWORD *)(v19 + 16) = v23;
          uint64_t v24 = *(void *)(v22 + 32);
          *(void *)(v22 + 32) = 0;
          *(void *)(v19 + 32) = v24;
          *(_OWORD *)(v19 + 40) = *(_OWORD *)(v22 + 40);

          if (v11 == a3) {
            uint64_t v10 = v18;
          }
        }
        else
        {
          uint64_t v14 = (id *)(v4 + 56 * v9);
        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t a1, CFTypeRef *a2, uint64_t a3, id **a4)
{
  CFHashCode v8 = CFHash(*a2);
  CFHashCode v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      CFHashCode v4 = v8;
      if (v8 >= v10) {
        CFHashCode v4 = v8 % v10;
      }
    }
    else
    {
      CFHashCode v4 = (v10 - 1) & v8;
    }
    int v13 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v15 = (unint64_t)i[1];
        if (v15 == v9)
        {
          if (CFEqual(i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  int v16 = operator new(0x20uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v9;
  id v16[2] = **a4;
  v16[3] = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        CFHashCode v4 = v9 % v10;
      }
      else {
        CFHashCode v4 = v9;
      }
    }
    else
    {
      CFHashCode v4 = (v10 - 1) & v9;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (uint64_t **)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A6C631A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}&,std::unique_ptr<SafariShared::URLCompletionEntryExtras>>(uint64_t a1, CFTypeRef *a2, id *a3, uint64_t *a4)
{
  CFHashCode v9 = CFHash(*a2);
  CFHashCode v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      CFHashCode v4 = v9;
      if (v9 >= v11) {
        CFHashCode v4 = v9 % v11;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v16 = (unint64_t)i[1];
        if (v16 == v10)
        {
          if (CFEqual(i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = operator new(0x20uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  void *v17 = 0;
  v17[1] = v10;
  id v18 = *a3;
  uint64_t v19 = *a4;
  *a4 = 0;
  v17[2] = v18;
  v17[3] = v19;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        CFHashCode v4 = v10 % v11;
      }
      else {
        CFHashCode v4 = v10;
      }
    }
    else
    {
      CFHashCode v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (uint64_t **)v29[0];
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)v29, 0);
  return i;
}

void sub_1A6C63488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(void *a1, CFTypeRef *a2)
{
  CFHashCode v4 = CFHash(*a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  CFHashCode v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    CFHashCode v9 = v4;
    if (v4 >= *(void *)&v5) {
      CFHashCode v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v9 = (*(void *)&v5 - 1) & v4;
  }
  CFHashCode v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if (CFEqual(i[2], *a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::erase(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove(result, a2, (uint64_t)v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)v3, 0);
    return (void *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__erase_unique<NSString * {__strong}>(void *a1, CFTypeRef *a2)
{
  uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v6 = v5 & *(_DWORD *)(a2 + 8);
  uint64_t v7 = v2 + 56 * v6;
  unint64_t v8 = *(__CFString **)v7;
  if (!*(void *)v7) {
    return v2 + 56 * *(unsigned int *)(v2 - 4);
  }
  int v9 = 1;
  while (v8 == &stru_1EFBE3CF8 || *(void *)(v7 + 8) != *(void *)(a2 + 8) || !CFEqual(v8, *(CFTypeRef *)a2))
  {
    unsigned int v6 = (v6 + v9) & v5;
    uint64_t v7 = v2 + 56 * v6;
    unint64_t v8 = *(__CFString **)v7;
    ++v9;
    if (!*(void *)v7)
    {
      uint64_t v2 = *a1;
      if (*a1) {
        return v2 + 56 * *(unsigned int *)(v2 - 4);
      }
      return 0;
    }
  }
  return v7;
}

void WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::hashTraitsDeleteBucket<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntry>(a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v3 = *a1;
  if (*a1) {
    int v4 = *(_DWORD *)(v3 - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(v3 - 12) = v4;
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = 6 * *(_DWORD *)(v5 - 12);
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 0x101)
    {
      WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::rehash(a1, v7 >> 1, 0);
    }
  }
}

double WTF::hashTraitsDeleteBucket<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntry>(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &stru_1EFBE3CF8;
  return result;
}

void *WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::makeConstIterator(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1) {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
  }
  else {
    unsigned int v4 = 0;
  }
  uint64_t v5 = (void *)(v3 + 56 * v4);
  if (v5 != a2)
  {
    while (!*a2 || *a2 == (void)&stru_1EFBE3CF8)
    {
      a2 += 7;
      if (a2 == v5) {
        return (void *)(v3 + 56 * v4);
      }
    }
  }
  return a2;
}

void *std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,long long &,NSString * {__strong}&>(uint64_t a1, unint64_t *a2, void *a3, id *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  void *i = *v14;
  void *v14 = i;
  *(void *)(v21 + 8 * v4) = v14;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1A6C63AB8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,void *>>>::operator()[abi:sn180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<long long &,long long &>(void *a1, unint64_t *a2, void *a3)
{
  unsigned int v6 = operator new(0x20uLL);
  unint64_t v7 = *a2;
  v6[2] = *a2;
  v6[3] = *a3;
  *unsigned int v6 = 0;
  v6[1] = v7;
  inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v7, v6 + 2);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v6, inserted);
  return v6;
}

void sub_1A6C63B44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__equal_range_multi<long long>(void *a1, unint64_t *a2)
{
  double result = std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(a1, a2);
  if (result)
  {
    unint64_t v4 = result;
    do
      unint64_t v4 = (void *)*v4;
    while (v4 && v4[2] == *a2);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__emplace_multi<NSString * const {__strong}&,NSString * {__strong}&>(void *a1, id *a2, id *a3)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__construct_node<NSString * const {__strong}&,NSString * {__strong}&>((uint64_t)a1, a2, a3, (uint64_t)v6);
  uint64_t inserted = std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi(a1, v6[0]);
  v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_1A6C63BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

CFHashCode std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__construct_node<NSString * const {__strong}&,NSString * {__strong}&>@<X0>(uint64_t a1@<X0>, id *a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x20uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *unint64_t v8 = 0;
  v8[1] = 0;
  std::construct_at[abi:sn180100]<std::pair<NSString * const {__strong},NSString * {__strong}>,NSString * const&,NSString * const {__strong}&,NSString * {__strong}*>(v8 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  CFHashCode result = CFHash((CFTypeRef)v8[2]);
  v8[1] = result;
  return result;
}

void sub_1A6C63C84(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  unint64_t v4 = (CFTypeRef *)(a2 + 16);
  CFHashCode v5 = CFHash(*(CFTypeRef *)(a2 + 16));
  *(void *)(a2 + 8) = v5;
  uint64_t inserted = std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, (void *)a2, inserted);
  return a2;
}

void *std::construct_at[abi:sn180100]<std::pair<NSString * const {__strong},NSString * {__strong}>,NSString * const&,NSString * const {__strong}&,NSString * {__strong}*>(void *result, id *a2, id *a3)
{
  if (result)
  {
    unint64_t v4 = result;
    *CFHashCode result = *a2;
    v4[1] = *a3;
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__rehash<false>(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  float v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (v16)
  {
    BOOL v17 = (void *)*v16;
    if (*v16)
    {
      int v18 = 0;
      do
      {
        unint64_t v19 = v17[1];
        if (v14 > 1)
        {
          unint64_t v20 = v17[1];
          if (v19 >= v6) {
            unint64_t v20 = v19 % v6;
          }
        }
        else
        {
          unint64_t v20 = v19 & (v6 - 1);
        }
        if (v20 != v15) {
          break;
        }
        BOOL v21 = v19 == a2 && CFEqual((CFTypeRef)v17[2], *a3) != 0;
        if (v18 & !v21) {
          break;
        }
        v18 |= v21;
        float v16 = (void *)*v16;
        BOOL v17 = (void *)*v16;
      }
      while (*v16);
    }
  }
  return v16;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = *(void *)(i + 8);
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          uint64_t v7 = (uint64_t *)i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          unint64_t v14 = *(void **)i;
          unint64_t v15 = (void *)i;
          if (*(void *)i)
          {
            while (1)
            {
              int v16 = CFEqual(*(CFTypeRef *)(i + 16), (CFTypeRef)v14[2]);
              BOOL v17 = (void *)*v15;
              if (!v16) {
                break;
              }
              unint64_t v14 = (void *)*v17;
              unint64_t v15 = (void *)*v15;
              if (!*v17) {
                goto LABEL_30;
              }
            }
            unint64_t v14 = (void *)*v15;
            BOOL v17 = v15;
          }
          else
          {
            BOOL v17 = (void *)i;
          }
LABEL_30:
          uint64_t *v7 = (uint64_t)v14;
          void *v17 = **(void **)(*(void *)a1 + 8 * v13);
          **(void **)(*(void *)a1 + 8 * v13) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = (uint64_t *)i;
          unint64_t v8 = v13;
        }
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(id **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},NSString * {__strong}>,0>(void **a1)
{
  if (a1)
  {

    uint64_t v2 = *a1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__emplace_multi<NSString * {__strong},NSString * {__strong}>(void *a1, const void **a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__construct_node<NSString * {__strong},NSString * {__strong}>((uint64_t)a1, a2, a3, (uint64_t)v6);
  uint64_t inserted = std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi(a1, v6[0]);
  v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_1A6C6424C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

CFHashCode std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__construct_node<NSString * {__strong},NSString * {__strong}>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x20uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *unint64_t v8 = 0;
  v8[1] = 0;
  uint8x8_t v9 = *a2;
  *a2 = 0;
  uint64_t v10 = *a3;
  *a3 = 0;
  id v8[2] = v9;
  v8[3] = v10;
  *(unsigned char *)(a4 + 16) = 1;
  CFHashCode result = CFHash(v9);
  v8[1] = result;
  return result;
}

void sub_1A6C642D8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__equal_range_multi<NSString * {__strong}>(void *a1, CFTypeRef *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(a1, a2);
  int8x8_t v4 = v3;
  if (v3)
  {
    unint64_t v5 = v3;
    do
      unint64_t v5 = (uint64_t **)*v5;
    while (v5 && CFEqual(v5[2], *a2));
  }
  return v4;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},NSString * {__strong}>,0>(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void WBSSetParsecGlobalFeedbackDispatcherEnabledBlock()
{
  uint64_t v0 = MEMORY[0x1AD0C4F80]();
  uint64_t v1 = (void *)globalFeedbackDispatcherEnabledBlock;
  globalFeedbackDispatcherEnabledBlocuint64_t k = v0;
}

id WBSSharedParsecGlobalFeedbackDispatcher()
{
  if (globalFeedbackDispatcherEnabledBlock
    && !(*(unsigned int (**)(void))(globalFeedbackDispatcherEnabledBlock + 16))())
  {
    uint64_t v0 = 0;
  }
  else
  {
    if (WBSSharedParsecGlobalFeedbackDispatcher::onceToken != -1) {
      dispatch_once(&WBSSharedParsecGlobalFeedbackDispatcher::onceToken, &__block_literal_global_70);
    }
    uint64_t v0 = [(id)WBSSharedParsecGlobalFeedbackDispatcher::feedbackParsecDSession feedbackDispatcher];
  }
  return v0;
}

void __WBSSharedParsecGlobalFeedbackDispatcher_block_invoke()
{
  uint64_t v0 = [WBSParsecDSession alloc];
  id v3 = +[WBSParsecDSession sharedPARSession];
  uint64_t v1 = -[WBSParsecDSession initWithParsecdSession:skipAutoFillDataUpdates:](v0, "initWithParsecdSession:skipAutoFillDataUpdates:");
  uint64_t v2 = (void *)WBSSharedParsecGlobalFeedbackDispatcher::feedbackParsecDSession;
  WBSSharedParsecGlobalFeedbackDispatcher::feedbackParsecDSession = v1;
}

void sub_1A6C644FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C646BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6484C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6494C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1A6C64BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C64C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C64E78(_Unwind_Exception *a1)
{
  int8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C64F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C64FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C65054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C651F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C652C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6534C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C65468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C654F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C65564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C655C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C65638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C65DBC(_Unwind_Exception *a1)
{
  int8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C65FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C66154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C663D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6656C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id currentSessionStartDate()
{
  uint64_t v0 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v1 = objc_msgSend(v0, "safari_startOfDay");

  return v1;
}

void sub_1A6C669A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C66D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C67014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6711C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C67378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C675C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C67838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C67A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C67B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6C67C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C67D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C67E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C67FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C68088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C68260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C683CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6879C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL shouldDisplayItem(WBSHistoryItem *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = [(WBSHistoryItem *)v1 lastVisit];
  char v3 = [v2 hasAttributes:16];

  if (v3)
  {
    BOOL v4 = 1;
  }
  else
  {
    unint64_t v5 = [(WBSHistoryItem *)v1 lastVisitRedirectDestinationItem];
    BOOL v4 = v5 == 0;
  }
  return v4;
}

void sub_1A6C6888C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C68968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C68E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A6C68F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6905C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C69198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C692A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C69384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C69630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C696E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C699E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double *std::__equal_range[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,double *,double *,double,std::__identity>(double *result, double *a2, double *a3)
{
  if (a2 == result) {
    return a2;
  }
  unint64_t v3 = a2 - result;
  double v4 = *a3;
  while (1)
  {
    unint64_t v5 = v3 >> 1;
    uint64_t v6 = &result[v3 >> 1];
    if (*v6 >= v4) {
      break;
    }
    CFHashCode result = v6 + 1;
    unint64_t v5 = v3 + ~v5;
LABEL_7:
    unint64_t v3 = v5;
    if (!v5) {
      return result;
    }
  }
  if (v4 < *v6)
  {
    a2 = &result[v3 >> 1];
    goto LABEL_7;
  }
  uint64_t v7 = &result[v3 >> 1];
  if (v3 >= 2)
  {
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = v5 >> 1;
      uint8x8_t v9 = &v7[v5 >> 1];
      double v11 = *v9;
      uint64_t v10 = v9 + 1;
      v5 += ~(v5 >> 1);
      if (v11 < v4) {
        uint64_t v7 = v10;
      }
      else {
        unint64_t v5 = v8;
      }
    }
    while (v5);
  }
  size_t v12 = v6 + 1;
  if (a2 == v12) {
    return v7;
  }
  unint64_t v13 = a2 - v12;
  do
  {
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = &v12[v13 >> 1];
    double v17 = *v15;
    int v16 = v15 + 1;
    v13 += ~(v13 >> 1);
    if (v4 < v17) {
      unint64_t v13 = v14;
    }
    else {
      size_t v12 = v16;
    }
  }
  while (v13);
  return v7;
}

unint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

id WBSHistorySHA512(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v4 length])
  {
    uint64_t v5 = (const char *)[v4 UTF8String];
    CC_SHA512_Init(&c);
    id v6 = v3;
    CC_SHA512_Update(&c, (const void *)[v6 bytes], objc_msgSend(v6, "length"));
    CC_LONG v7 = strlen(v5);
    CC_SHA512_Update(&c, v5, v7);
    CC_SHA512_Final(md, &c);
    unint64_t v8 = [MEMORY[0x1E4F1C9B8] dataWithBytes:md length:64];
  }
  else
  {
    unint64_t v8 = 0;
  }

  return v8;
}

void sub_1A6C69DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WBSSQLiteSHA512(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (sqlite3_value_type(*a3) == 5)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    uint64_t v5 = sqlite3_value_text(*a3);
    CC_SHA512_Init(&c);
    id v6 = sqlite3_value_blob(a3[1]);
    CC_LONG v7 = sqlite3_value_bytes(a3[1]);
    CC_SHA512_Update(&c, v6, v7);
    CC_LONG v8 = strlen((const char *)v5);
    CC_SHA512_Update(&c, v5, v8);
    CC_SHA512_Final(md, &c);
    sqlite3_result_blob(a1, md, 64, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void WBSSQLiteExtractDomainExpansion(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  if (sqlite3_value_type(*a3) != 5)
  {
    uint64_t v5 = sqlite3_value_text(*a3);
    if (v5)
    {
      id v6 = v5;
      CC_LONG v7 = (void *)MEMORY[0x1AD0C4CF0]();
      CC_LONG v8 = (void *)MEMORY[0x1E4F1CB10];
      unint64_t v9 = [NSString stringWithUTF8String:v6];
      unint64_t v10 = [v8 URLWithString:v9];
      uint64_t v11 = [v10 host];

      if ([v11 length]
        && [v11 rangeOfString:@".com" options:13] != 0x7FFFFFFFFFFFFFFFLL)
      {
        if ([v11 rangeOfString:@"www." options:9] == 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(v11, "substringWithRange:", 0, objc_msgSend(v11, "length") - 4);
          id v12 = objc_claimAutoreleasedReturnValue();
          sqlite3_result_text(a1, (const char *)[v12 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        }
        else
        {
          if (![v11 caseInsensitiveCompare:@"www.com"])
          {
            sqlite3_result_text(a1, "www", 3, 0);
            goto LABEL_15;
          }
          objc_msgSend(v11, "substringWithRange:", 4, objc_msgSend(v11, "length") - 8);
          id v12 = objc_claimAutoreleasedReturnValue();
          sqlite3_result_text(a1, (const char *)[v12 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        }
      }
      else
      {
        sqlite3_result_null(a1);
      }
LABEL_15:

      return;
    }
  }
  sqlite3_result_null(a1);
}

void sub_1A6C6A12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WBSSQLiteExtractHostname(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  if (sqlite3_value_type(*a3) == 5 || (uint64_t v5 = sqlite3_value_text(*a3)) == 0)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    id v6 = v5;
    CFIndex v7 = sqlite3_value_bytes(*a3);
    CC_LONG v8 = (void *)MEMORY[0x1AD0C4CF0]();
    CFURLRef v9 = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, v7, 0x8000100u, 0);
    unint64_t v10 = [(__CFURL *)v9 safari_userVisibleHostWithoutWWWSubdomain];
    uint64_t v11 = v10;
    if (v10) {
      sqlite3_result_text(a1, (const char *)[v10 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else {
      sqlite3_result_null(a1);
    }
  }
}

void sub_1A6C6A274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WBSSQLiteExtractHighLevelDomain(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  if (sqlite3_value_type(*a3) == 5 || (uint64_t v5 = sqlite3_value_text(*a3)) == 0)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    id v6 = v5;
    CFIndex v7 = sqlite3_value_bytes(*a3);
    CC_LONG v8 = (void *)MEMORY[0x1AD0C4CF0]();
    CFURLRef v9 = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, v7, 0x8000100u, 0);
    unint64_t v10 = [(__CFURL *)v9 host];
    uint64_t v11 = objc_msgSend(v10, "safari_highLevelDomainFromHost");

    if (v11) {
      sqlite3_result_text(a1, (const char *)[v11 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else {
      sqlite3_result_null(a1);
    }
  }
}

void sub_1A6C6A3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SafariShared::LatestVisitInformationMap::find(SafariShared::LatestVisitInformationMap *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = a2;
  id v4 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(this, &v6);
  if (v4) {
    *a3 = v4[3];
  }
  return v4 != 0;
}

uint64_t SafariShared::LatestVisitInformationMap::update(SafariShared::LatestVisitInformationMap *this, unint64_t a2, int64_t a3, double a4, int a5)
{
  unint64_t v16 = a2;
  CFURLRef v9 = (double *)std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(this, &v16);
  if (v9)
  {
    double v10 = v9[4];
    if (v10 < a4 || v10 == a4 && ((int v11 = *((_DWORD *)v9 + 10), v11 > a5) || v11 == a5 && *((void *)v9 + 3) < a3))
    {
      *((void *)v9 + 3) = a3;
      v9[4] = a4;
      uint64_t v12 = 1;
      *((_DWORD *)v9 + 10) = a5;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v14[0] = v16;
    v14[1] = a3;
    *(double *)&id v14[2] = a4;
    int v15 = a5;
    std::__hash_table<std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,SafariShared::LatestVisitInformation>>>::__emplace_unique_key_args<long long,std::pair<long long,SafariShared::LatestVisitInformation>>((uint64_t)this, v14, (uint64_t)v14);
    return 1;
  }
  return v12;
}

void *SafariShared::LatestVisitInformationMap::lastVisitsForItems(void *result, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a2 + 16);
  if (v3)
  {
    uint64_t v5 = result;
    do
    {
      unint64_t v8 = v3[2];
      CFHashCode result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v5, &v8);
      if (result)
      {
        unint64_t v6 = result + 3;
        CFHashCode result = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,long long const&,long long const&>(a3, &v8, &v8, result + 3);
        if (!v7) {
          result[3] = *v6;
        }
      }
      id v3 = (void *)*v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *SafariShared::LatestVisitInformationMap::removeItems(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 16);
  if (v2)
  {
    id v3 = result;
    do
    {
      unint64_t v4 = v2[2];
      CFHashCode result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(v3, &v4);
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return result;
}

double SafariShared::LatestVisitInformationMap::lastVisitTime(SafariShared::LatestVisitInformationMap *this, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v2 = (double *)std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(this, &v4);
  if (v2) {
    return v2[4];
  }
  else {
    return 0.0;
  }
}

void *SafariShared::LatestVisitInformationMap::lastVisitID(SafariShared::LatestVisitInformationMap *this, unint64_t a2)
{
  unint64_t v3 = a2;
  CFHashCode result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(this, &v3);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

uint64_t WBSSQLiteComputeLatestVisitStep(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  unint64_t v4 = (SafariShared::LatestVisitInformationMap *)sqlite3_user_data(a1);
  sqlite3_int64 v5 = sqlite3_value_int64(*a3);
  sqlite3_int64 v6 = sqlite3_value_int64(a3[1]);
  double v7 = sqlite3_value_double(a3[2]);
  int v8 = sqlite3_value_int(a3[3]);
  return SafariShared::LatestVisitInformationMap::update(v4, v5, v6, v7, v8);
}

void WBSSQLiteLatestVisitFor(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  sqlite3_int64 v5 = sqlite3_user_data(a1);
  sqlite3_int64 v7 = sqlite3_value_int64(*a3);
  sqlite3_int64 v6 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v5, (unint64_t *)&v7);
  if (v6) {
    sqlite3_result_int64(a1, v6[3]);
  }
  else {
    sqlite3_result_null(a1);
  }
}

void WBSSQLiteVisitScore(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  char v5 = sqlite3_value_int(*a3);
  int v6 = sqlite3_value_int(a3[1]);
  float v7 = WBHistoryVisitWeightForAttributesAndOrigin(v5, v6);
  sqlite3_int64 v8 = (int)WBSHistoryVisitScoreForWeightedVisitCount(v7);
  sqlite3_result_int64(a1, v8);
}

unsigned char *WBSSQLiteDailyVisitCountsStep(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  CFHashCode result = sqliteScoreAggregationContext(a1, *a3, a3[1], 13);
  if (result)
  {
    char v5 = result;
    CFHashCode result = (unsigned char *)sqlite3_value_int(a3[2]);
    unint64_t v6 = *((void *)v5 + 1) - vcvtpd_u64_f64((double)(int)result / 86400.0);
    if (v6 < *((void *)v5 + 3))
    {
      CFHashCode result = (unsigned char *)sqlite3_value_int(a3[3]);
      *(_DWORD *)&v5[4 * v6 + 32] += result;
    }
  }
  return result;
}

unsigned char *sqliteScoreAggregationContext(sqlite3_context *a1, sqlite3_value *a2, sqlite3_value *a3, int a4)
{
  float v7 = sqlite3_aggregate_context(a1, 4 * a4 + 32);
  sqlite3_int64 v8 = v7;
  if (v7)
  {
    if (!*v7)
    {
      double v9 = sqlite3_value_double(a2);
      unint64_t v10 = vcvtpd_u64_f64(sqlite3_value_double(a3) / 86400.0);
      unint64_t v11 = v10 - vcvtpd_u64_f64(v9 / 86400.0);
      if (v11 >= 0x2F) {
        unint64_t v11 = 47;
      }
      *((void *)v8 + 1) = v10;
      *((void *)v8 + 2) = v11;
      if (v11 > 0xD) {
        v11 -= 7 * vcvtpd_u64_f64((double)(v11 - 14) / (double)7uLL);
      }
      *((void *)v8 + 3) = v11 + 1;
      *sqlite3_int64 v8 = 1;
    }
  }
  else
  {
    sqlite3_result_error_nomem(a1);
  }
  return v8;
}

void WBSSQLiteDailyVisitCountsFinal(sqlite3_context *a1)
{
  uint64_t v2 = sqliteScoreAggregationContext(a1, 0, 0, 13);
  if (v2)
  {
    int v3 = 4 * *((_DWORD *)v2 + 6);
    sqlite3_result_blob(a1, v2 + 32, v3, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

unsigned char *WBSSQLiteWeeklyVisitCountsStep(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  CFHashCode result = sqliteScoreAggregationContext(a1, *a3, a3[1], 5);
  if (result)
  {
    char v5 = result;
    CFHashCode result = (unsigned char *)sqlite3_value_int(a3[2]);
    unint64_t v6 = *((void *)v5 + 1) - vcvtpd_u64_f64((double)(int)result / 86400.0);
    unint64_t v7 = *((void *)v5 + 3);
    BOOL v8 = v6 >= v7;
    unint64_t v9 = v6 - v7;
    if (v8)
    {
      unint64_t v10 = v9 / 7;
      if (v9 / 7 < 5)
      {
        CFHashCode result = (unsigned char *)sqlite3_value_int(a3[3]);
        *(_DWORD *)&v5[4 * v10 + 32] += result;
      }
    }
  }
  return result;
}

void WBSSQLiteWeeklyVisitCountsFinal(sqlite3_context *a1)
{
  uint64_t v2 = sqliteScoreAggregationContext(a1, 0, 0, 5);
  if (v2)
  {
    unint64_t v3 = v2[2] - v2[3] + 1;
    if (v3 >= 7)
    {
      sqlite3_result_blob(a1, v2 + 4, 4 * (v3 / 7), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      sqlite3_result_null(a1);
    }
  }
}

char *std::__hash_table<std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,SafariShared::LatestVisitInformation>>>::__emplace_unique_key_args<long long,std::pair<long long,SafariShared::LatestVisitInformation>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((void *)v10 + 2) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = v6;
  *((void *)v10 + 2) = *(void *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((void *)v10 + 5) = *(void *)(a3 + 24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)unint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *(void *)unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A6C6ACF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,long long const&,long long const&>(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1A6C6AF1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A6C6B074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6B2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6B420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6B5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6B6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6B7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6B8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6BA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6BD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6C10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sqliteVisitCountScore(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (sqlite3_value_type(*a3) == 5)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    *(float *)&double v5 = (float)sqlite3_value_int64(*a3);
    sqlite3_int64 v6 = +[WBSHistoryVisit scoreForWeightedVisitCount:v5];
    sqlite3_result_int64(a1, v6);
  }
}

void sqliteVisitBlobScore(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (sqlite3_value_type(*a3) == 5)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    double v5 = (int *)sqlite3_value_blob(*a3);
    int v6 = sqlite3_value_bytes(*a3);
    unsigned int v7 = MEMORY[0x1F4188790]();
    unint64_t v11 = (char *)v15 - v9;
    if (v7 >= 4)
    {
      if (v8 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v8;
      }
      unint64_t v13 = (_DWORD *)((char *)v15 - v9);
      do
      {
        int v14 = *v5++;
        *(float *)&double v10 = (float)v14;
        *v13++ = +[WBSHistoryVisit scoreForWeightedVisitCount:v10];
        --v12;
      }
      while (v12);
    }
    sqlite3_result_blob(a1, v11, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1A6C6C3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6C50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6C798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6C928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t indexExists(WBSSQLiteDatabase *a1, NSString *a2)
{
  unint64_t v8 = a2;
  int v7 = 0;
  int v6 = (id *)&v7;
  unsigned int v3 = SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong}&,std::tuple<int &>>(a1, 0, @"SELECT COUNT(*) FROM sqlite_master WHERE type = 'index' AND name = ?", (id *)&v8, &v6);
  if (v7 == 1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1A6C6C9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6CD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6CEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6CF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6CFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6D5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32,int a33,void *a34,void *a35,void *a36,uint64_t a37,void *a38,WTF *a39,int a40)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6D810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  float v16 = v15;

  _Unwind_Resume(a1);
}

void sub_1A6C6DCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, WTF *a19, int a20,WTF *a21,int a22,WTF *a23,int a24)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6E624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<long long &,std::tuple<long long &>>(void *a1, uint64_t a2, void *a3, sqlite3_int64 *a4, sqlite3_int64 **a5)
{
  id v9 = a1;
  id v10 = a3;
  unint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:a2];
  uint64_t v12 = v11;
  if (v11)
  {
    unint64_t v13 = (sqlite3_stmt *)[v11 handle];
    int v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    uint64_t v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<long long &,std::tuple<long long &>>>(v9, v13, a2, v17);
    [v12 invalidate];
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1A6C6E858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6EB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6EBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6EC54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C6ED5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong}&,std::tuple<int &>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9 = a1;
  id v10 = a3;
  unint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:a2];
  uint64_t v12 = v11;
  if (v11)
  {
    unint64_t v13 = (sqlite3_stmt *)[v11 handle];
    int v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    uint64_t v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong}&,std::tuple<int &>>>(v9, v13, a2, v17);
    [v12 invalidate];
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1A6C6EE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong}&,std::tuple<int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7 = a1;
  id v8 = **a4;
  id v9 = v8;
  if (v8) {
    int v10 = sqlite3_bind_text(a2, 1, (const char *)[v8 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    int v10 = sqlite3_bind_null(a2, 1);
  }
  int v11 = v10;

  if (v11)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong}&,std::tuple<int &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A6C6EF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong}&,std::tuple<int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100
    && (**(_DWORD **)(a4 + 8) = sqlite3_column_int(a2, 0), uint64_t v8 = sqlite3_step(a2), v8 == 101))
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C6F008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSData * {__strong}&,long>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  int v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  unint64_t v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,long>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C6F12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,long>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindData:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C6F1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,NSString * const {__strong}&>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  int v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  unint64_t v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * const {__strong}&>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C6F2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * const {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:1];
  [v5 bindString:*a3 atParameterIndex:2];
}

void sub_1A6C6F36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,long long &>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  int v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  unint64_t v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long long &>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C6F494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long long &>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C6F520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, void *a2, void *a3, void *a4, unsigned int *a5, unsigned int *a6, void *a7, void *a8, void *a9)
{
  id v16 = a1;
  id v17 = a3;
  id v24 = 0;
  unint64_t v18 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v16 query:v17 error:&v24];
  id v19 = v24;
  size_t v20 = v19;
  if (v18)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(v18, a4, a5, a6, a7, a8, a9);
    uint64_t v21 = [v18 execute];
    [v18 invalidate];
    if ((v21 - 100) >= 2 && v21 != 0) {
      objc_msgSend(v16, "reportErrorWithCode:statement:error:", v21, objc_msgSend(v18, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v19;
    }
    uint64_t v21 = [v20 code];
  }

  return v21;
}

void sub_1A6C6F66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, void *a2, unsigned int *a3, unsigned int *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  [v13 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(v13, a3, a4, a5, a6, a7);
}

void sub_1A6C6F724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, unsigned int *a2, unsigned int *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  [v11 bindInt:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(v11, a3, a4, a5, a6);
}

void sub_1A6C6F7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, unsigned int *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindInt:*a2 atParameterIndex:3];
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(v9, a3, a4, a5);
}

void sub_1A6C6F84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindData:*a2 atParameterIndex:4];
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,NSData * {__strong}&,NSData * {__strong}&>(v7, a3, a4);
}

void sub_1A6C6F8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,NSData * {__strong}&,NSData * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindData:*a2 atParameterIndex:5];
  [v5 bindData:*a3 atParameterIndex:6];
}

void sub_1A6C6F948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, void *a2, void *a3, void *a4, double *a5, void *a6, void *a7, unsigned __int8 *a8, unsigned __int8 *a9, unsigned __int8 *a10)
{
  id v17 = a1;
  id v18 = a3;
  id v25 = 0;
  id v19 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v17 query:v18 error:&v25];
  id v20 = v25;
  uint64_t v21 = v20;
  if (v19)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(v19, a4, a5, a6, a7, a8, a9, a10);
    uint64_t v22 = [v19 execute];
    [v19 invalidate];
    if ((v22 - 100) >= 2 && v22 != 0) {
      objc_msgSend(v17, "reportErrorWithCode:statement:error:", v22, objc_msgSend(v19, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v20;
    }
    uint64_t v22 = [v21 code];
  }

  return v22;
}

void sub_1A6C6FA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, void *a2, double *a3, void *a4, void *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  id v15 = a1;
  [v15 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(v15, a3, a4, a5, a6, a7, a8);
}

void sub_1A6C6FB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, double *a2, void *a3, void *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  id v13 = a1;
  [v13 bindDouble:2 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(v13, a3, a4, a5, a6, a7);
}

void sub_1A6C6FC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, void *a2, void *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  id v11 = a1;
  [v11 bindString:*a2 atParameterIndex:3];
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,unsigned long &,BOOL &,BOOL &,BOOL &>(v11, a3, a4, a5, a6);
}

void sub_1A6C6FC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  id v9 = a1;
  [v9 bindInt64:*a2 atParameterIndex:4];
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,BOOL &,BOOL &,BOOL &>(v9, a3, a4, a5);
}

void sub_1A6C6FD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,BOOL &,BOOL &,BOOL &>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  id v7 = a1;
  [v7 bindInt:*a2 atParameterIndex:5];
  SafariShared::_WBSSQLiteStatementBindAllParameters<6,BOOL &,BOOL &>(v7, a3, a4);
}

void sub_1A6C6FDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<6,BOOL &,BOOL &>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  id v5 = a1;
  [v5 bindInt:*a2 atParameterIndex:6];
  [v5 bindInt:*a3 atParameterIndex:7];
}

void sub_1A6C6FE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<unsigned long const&,long long &>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long const&,long long &>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C6FF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long const&,long long &>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C6FFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<long long &,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, sqlite3_int64 **a4)
{
  id v7 = a1;
  if (sqlite3_bind_int64(a2, 1, **a4))
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<long long &,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A6C70078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<long long &,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100
    && (**(void **)(a4 + 8) = sqlite3_column_int64(a2, 0), uint64_t v8 = sqlite3_step(a2), v8 == 101))
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C70124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,long long &>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long &>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C70248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_1(uint64_t result, uint64_t a2, int a3, float a4)
{
  *(float *)a2 = a4;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2114;
  *(void *)(a2 + 10) = result;
  *(_WORD *)(a2 + 18) = 1024;
  *(_DWORD *)(a2 + 20) = a3;
  return result;
}

void OUTLINED_FUNCTION_4_2(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x18u);
}

void sub_1A6C703A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C70450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WBSSetInt64 *WBSSetOfIdentifiersFromTags(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = [*(id *)(*((void *)&v8 + 1) + 8 * i) databaseID];
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>((uint64_t)v12, (unint64_t *)&v7, &v7);
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v14 count:16];
    }
    while (v2);
  }

  id v5 = [[WBSSetInt64 alloc] initWithMovableSet:v12];
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)v12);

  return v5;
}

void sub_1A6C70620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A6C70798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6C70924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C70A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * const {__strong}&,std::tuple<long long &>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9 = a1;
  id v10 = a3;
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:a2];
  id v12 = v11;
  if (v11)
  {
    int v13 = (sqlite3_stmt *)[v11 handle];
    uint64_t v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    uint64_t v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * const {__strong}&,std::tuple<long long &>>>(v9, v13, a2, v17);
    [v12 invalidate];
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_1A6C70C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C70CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C70EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,NSString * {__strong}&,unsigned long const&,long long const&,double>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, double *a8)
{
  id v15 = a1;
  id v16 = a3;
  id v23 = 0;
  id v17 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v15 query:v16 error:&v23];
  id v18 = v23;
  id v19 = v18;
  if (v17)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&,unsigned long const&,long long const&,double>(v17, a4, a5, a6, a7, a8);
    uint64_t v20 = [v17 execute];
    [v17 invalidate];
    if ((v20 - 100) >= 2 && v20 != 0) {
      objc_msgSend(v15, "reportErrorWithCode:statement:error:", v20, objc_msgSend(v17, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v18;
    }
    uint64_t v20 = [v19 code];
  }

  return v20;
}

void sub_1A6C710DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&,unsigned long const&,long long const&,double>(void *a1, void *a2, void *a3, void *a4, void *a5, double *a6)
{
  id v11 = a1;
  [v11 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,unsigned long const&,long long const&,double>(v11, a3, a4, a5, a6);
}

void sub_1A6C7118C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,unsigned long const&,long long const&,double>(void *a1, void *a2, void *a3, void *a4, double *a5)
{
  id v9 = a1;
  [v9 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,unsigned long const&,long long const&,double>(v9, a3, a4, a5);
}

void sub_1A6C71218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,unsigned long const&,long long const&,double>(void *a1, void *a2, void *a3, double *a4)
{
  id v7 = a1;
  [v7 bindInt64:*a2 atParameterIndex:3];
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,long long const&,double>(v7, a3, a4);
}

void sub_1A6C7129C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,long long const&,double>(void *a1, void *a2, double *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:4];
  [v5 bindDouble:5 atParameterIndex:*a3];
}

void sub_1A6C71314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * const {__strong}&,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7 = a1;
  id v8 = **a4;
  id v9 = v8;
  if (v8) {
    int v10 = sqlite3_bind_text(a2, 1, (const char *)[v8 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    int v10 = sqlite3_bind_null(a2, 1);
  }
  int v11 = v10;

  if (v11)
  {
    [v7 reportErrorWithCode:1 statement:a2 error:a3];
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * const {__strong}&,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A6C713F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * const {__strong}&,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = sqlite3_step(a2);
  if (v8 == 100
    && (**(void **)(a4 + 8) = sqlite3_column_int64(a2, 0), uint64_t v8 = sqlite3_step(a2), v8 == 101))
  {
    uint64_t v9 = 1;
  }
  else
  {
    [v7 reportErrorWithCode:v8 statement:a2 error:a3];
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1A6C714B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,long long const&,double &>(void *a1, void *a2, void *a3, void *a4, void *a5, double *a6)
{
  id v11 = a1;
  id v12 = a3;
  id v19 = 0;
  int v13 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v11 query:v12 error:&v19];
  id v14 = v19;
  id v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long const&,double &>(v13, a4, a5, a6);
    uint64_t v16 = [v13 execute];
    [v13 invalidate];
    if ((v16 - 100) >= 2 && v16 != 0) {
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v14;
    }
    uint64_t v16 = [v15 code];
  }

  return v16;
}

void sub_1A6C715DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long const&,double &>(void *a1, void *a2, void *a3, double *a4)
{
  id v7 = a1;
  [v7 bindInt64:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long const&,double &>(v7, a3, a4);
}

void sub_1A6C71674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long const&,double &>(void *a1, void *a2, double *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:2];
  [v5 bindDouble:3 atParameterIndex:*a3];
}

void sub_1A6C716EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double &,long long const&>(void *a1, void *a2, void *a3, double *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  int v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,long long const&>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C71814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,long long const&>(void *a1, double *a2, void *a3)
{
  id v5 = a1;
  [v5 bindDouble:1 atParameterIndex:*a2];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C718A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,long long const&>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  int v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long long const&>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C719C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long long const&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6C71A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double const&,double const&>(void *a1, void *a2, void *a3, double *a4, double *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  int v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6C71B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C72304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C72494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C725F4(_Unwind_Exception *a1)
{
  id v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1A6C72750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C72828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C728D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C729D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C72B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C72C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C73AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C73B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C73BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C73CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::ThreadSafeRefCounted<SafariShared::HistoryURLCompletionItem,(WTF::DestructionThread)0>::deref(uint64_t result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, (unsigned int *)result);

    uint64_t v2 = *(void **)(v1 + 120);
    if (v2)
    {
      *(void *)(v1 + 128) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(v1 + 96);
    if (v3)
    {
      *(void *)(v1 + 104) = v3;
      operator delete(v3);
    }

    id v5 = (void **)(v1 + 32);
    std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>::__destroy_vector::operator()[abi:sn180100](&v5);
    return WTF::fastFree((WTF *)v1, v4);
  }
  return result;
}

void std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>::__destroy_vector::operator()[abi:sn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = *--v4;
        void *v4 = 0;
        if (v6) {
          WTF::ThreadSafeRefCounted<SafariShared::HistoryURLCompletionItem,(WTF::DestructionThread)0>::deref();
        }
      }
      while (v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1A6C73F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C74108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C742E0(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1A6C74438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C74678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28)
{
  _Block_object_dispose((const void *)(v34 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1A6C747F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6C74920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C74AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C74CFC(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1A6C75050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C751BC(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A6C75258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C752DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C753CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C75688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WBSHistoryVisitScoreForWeightedVisitCount(float a1)
{
  return (int)(float)(a1 * 100.0);
}

float WBSHistoryVisitWeightedVisitCountFromScore(int a1)
{
  return (float)a1 / 100.0;
}

double WBHistoryVisitWeightForAttributesAndOrigin(char a1, uint64_t a2)
{
  double result = 0.0;
  if ((a1 & 3) == 0)
  {
    double v3 = 0.25;
    double v4 = 1.0;
    if ((a1 & 4) == 0) {
      double v3 = 1.0;
    }
    double v5 = 0.6;
    if ((a1 & 8) == 0) {
      double v5 = 1.0;
    }
    double v6 = v3 * v5;
    if (a2 == 1) {
      double v4 = 0.2;
    }
    return v6 * v4;
  }
  return result;
}

uint64_t WBSValidateVisitCountScores(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    uint64_t v5 = a1 + 4 * a2;
    if ((float)((float)*(int *)(v5 - 4) / 100.0) > (float)a3)
    {
      uint64_t result = 0;
      *(_DWORD *)(v5 - 4) = 0;
    }
  }
  return result;
}

void sub_1A6C75CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C75E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C75EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C75FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C76108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,double &,NSString * {__strong}&>(void *a1, double *a2, double *a3, void *a4)
{
  id v7 = a1;
  [v7 bindDouble:1 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSString * {__strong}&>(v7, a3, a4);
}

void sub_1A6C762D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSString * {__strong}&>(void *a1, double *a2, void *a3)
{
  id v5 = a1;
  [v5 bindDouble:2 atParameterIndex:*a2];
  [v5 bindString:*a3 atParameterIndex:3];
}

void sub_1A6C7634C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,double &,NSData * {__strong}&,NSData * {__strong}&>(void *a1, double *a2, double *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindDouble:1 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSData * {__strong}&,NSData * {__strong}&>(v9, a3, a4, a5);
}

void sub_1A6C763D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSData * {__strong}&,NSData * {__strong}&>(void *a1, double *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindDouble:2 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,NSData * {__strong}&>(v7, a3, a4);
}

void sub_1A6C7645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,NSData * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindData:*a2 atParameterIndex:3];
  [v5 bindData:*a3 atParameterIndex:4];
}

void sub_1A6C764D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a33);

  _Unwind_Resume(a1);
}

void sub_1A6C768C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7693C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C76AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C76B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C76C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7715C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C77368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C774A0(_Unwind_Exception *exception_object)
{
}

void sub_1A6C77508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WBSIgnoredSiriSuggestedSitesController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A6C77610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A6C776D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A6C77768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C77804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C778A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C77960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A6C77A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C77ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A6C77BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C77CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C77DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C77E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C77F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C78044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C780DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C787AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C788D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6C78FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C79144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C79298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C79404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C79520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C79690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, double *a8, void *a9, unsigned int *a10, double *a11, void *a12)
{
  id v19 = a1;
  id v20 = a3;
  id v27 = 0;
  uint64_t v21 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v19 query:v20 error:&v27];
  id v22 = v27;
  id v23 = v22;
  if (v21)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v21, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    uint64_t v24 = [v21 execute];
    [v21 invalidate];
    if ((v24 - 100) >= 2 && v24 != 0) {
      objc_msgSend(v19, "reportErrorWithCode:statement:error:", v24, objc_msgSend(v21, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v22;
    }
    uint64_t v24 = [v23 code];
  }

  return v24;
}

void sub_1A6C79B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4, void *a5, double *a6, void *a7, unsigned int *a8, double *a9, void *a10)
{
  id v17 = a1;
  [v17 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v17, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1A6C79C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4, double *a5, void *a6, unsigned int *a7, double *a8, void *a9)
{
  id v16 = a1;
  [v16 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v16, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1A6C79CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, void *a2, void *a3, double *a4, void *a5, unsigned int *a6, double *a7, void *a8)
{
  id v15 = a1;
  [v15 bindString:*a2 atParameterIndex:3];
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v15, a3, a4, a5, a6, a7, a8);
}

void sub_1A6C79DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, void *a2, double *a3, void *a4, unsigned int *a5, double *a6, void *a7)
{
  id v13 = a1;
  [v13 bindString:*a2 atParameterIndex:4];
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v13, a3, a4, a5, a6, a7);
}

void sub_1A6C79E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, double *a2, void *a3, unsigned int *a4, double *a5, void *a6)
{
  id v11 = a1;
  [v11 bindDouble:5 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<6,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v11, a3, a4, a5, a6);
}

void sub_1A6C79EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<6,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, void *a2, unsigned int *a3, double *a4, void *a5)
{
  id v9 = a1;
  [v9 bindString:*a2 atParameterIndex:6];
  SafariShared::_WBSSQLiteStatementBindAllParameters<7,int,double &,NSString * {__strong}&>(v9, a3, a4, a5);
}

void sub_1A6C79F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<7,int,double &,NSString * {__strong}&>(void *a1, unsigned int *a2, double *a3, void *a4)
{
  id v7 = a1;
  [v7 bindInt:*a2 atParameterIndex:7];
  SafariShared::_WBSSQLiteStatementBindAllParameters<8,double &,NSString * {__strong}&>(v7, a3, a4);
}

void sub_1A6C7A000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<8,double &,NSString * {__strong}&>(void *a1, double *a2, void *a3)
{
  id v5 = a1;
  [v5 bindDouble:8 atParameterIndex:*a2];
  [v5 bindString:*a3 atParameterIndex:9];
}

void sub_1A6C7A078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, double *a8, unsigned int *a9, double *a10)
{
  id v17 = a1;
  id v18 = a3;
  id v25 = 0;
  id v19 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v17 query:v18 error:&v25];
  id v20 = v25;
  uint64_t v21 = v20;
  if (v19)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(v19, a4, a5, a6, a7, a8, a9, a10);
    uint64_t v22 = [v19 execute];
    [v19 invalidate];
    if ((v22 - 100) >= 2 && v22 != 0) {
      objc_msgSend(v17, "reportErrorWithCode:statement:error:", v22, objc_msgSend(v19, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v20;
    }
    uint64_t v22 = [v21 code];
  }

  return v22;
}

void sub_1A6C7A1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(void *a1, void *a2, void *a3, void *a4, void *a5, double *a6, unsigned int *a7, double *a8)
{
  id v15 = a1;
  [v15 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(v15, a3, a4, a5, a6, a7, a8);
}

void sub_1A6C7A28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(void *a1, void *a2, void *a3, void *a4, double *a5, unsigned int *a6, double *a7)
{
  id v13 = a1;
  [v13 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(v13, a3, a4, a5, a6, a7);
}

void sub_1A6C7A330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(void *a1, void *a2, void *a3, double *a4, unsigned int *a5, double *a6)
{
  id v11 = a1;
  [v11 bindString:*a2 atParameterIndex:3];
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSString * {__strong}&,double &,int,double &>(v11, a3, a4, a5, a6);
}

void sub_1A6C7A3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSString * {__strong}&,double &,int,double &>(void *a1, void *a2, double *a3, unsigned int *a4, double *a5)
{
  id v9 = a1;
  [v9 bindString:*a2 atParameterIndex:4];
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,double &,int,double &>(v9, a3, a4, a5);
}

void sub_1A6C7A458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,double &,int,double &>(void *a1, double *a2, unsigned int *a3, double *a4)
{
  id v7 = a1;
  [v7 bindDouble:5 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<6,int,double &>(v7, a3, a4);
}

void sub_1A6C7A4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<6,int,double &>(void *a1, unsigned int *a2, double *a3)
{
  id v5 = a1;
  [v5 bindInt:*a2 atParameterIndex:6];
  [v5 bindDouble:7 atParameterIndex:*a3];
}

void sub_1A6C7A554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3, double *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a3;
  id v21 = 0;
  id v15 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v13 query:v14 error:&v21];
  id v16 = v21;
  id v17 = v16;
  if (v15)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(v15, a4, a5, a6, a7);
    uint64_t v18 = [v15 execute];
    [v15 invalidate];
    if ((v18 - 100) >= 2 && v18 != 0) {
      objc_msgSend(v13, "reportErrorWithCode:statement:error:", v18, objc_msgSend(v15, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v16;
    }
    uint64_t v18 = [v17 code];
  }

  return v18;
}

void sub_1A6C7A694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(void *a1, double *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindDouble:1 atParameterIndex:*a2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(v9, a3, a4, a5);
}

void sub_1A6C7A734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&>(v7, a3, a4);
}

void sub_1A6C7A7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:3];
  [v5 bindString:*a3 atParameterIndex:4];
}

void sub_1A6C7A830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double>(void *a1, void *a2, void *a3, double *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v15 = 0;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:&v15];
  id v10 = v15;
  id v11 = v10;
  if (v9)
  {
    [v9 bindDouble:1 atParameterIndex:*a4];
    uint64_t v12 = [v9 execute];
    [v9 invalidate];
    if ((v12 - 100) >= 2 && v12 != 0) {
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v10;
    }
    uint64_t v12 = [v11 code];
  }

  return v12;
}

void sub_1A6C7A94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void appendToQueryItems(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v5 = (void *)MEMORY[0x1E4F290C8];
    id v6 = a1;
    id v7 = [v5 queryItemWithName:a2 value:a3];
    [v6 addObject:v7];
  }
}

void SafariShared::JSController::~JSController(WTF **this)
{
  *this = (WTF *)&unk_1EFBE2828;
  SafariShared::JSController::setContext((SafariShared::JSController *)this, 0);
  double v3 = this[1];
  if (v3)
  {
    this[1] = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, v2);
  }
}

void sub_1A6C7B288(_Unwind_Exception *exception_object, void *a2)
{
  double v4 = *(WTF **)(v2 + 8);
  if (v4)
  {
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void SafariShared::JSController::setContext(SafariShared::JSController *this, JSGlobalContextRef ctx)
{
  uint64_t v2 = (OpaqueJSContext *)*((void *)this + 5);
  if (v2 != ctx)
  {
    if (v2)
    {
      id v5 = (OpaqueJSValue *)*((void *)this + 4);
      if (v5)
      {
        JSObjectSetPrivate(v5, 0);
        *((void *)this + 4) = 0;
      }
      SafariShared::JSController::unprotectObjects((JSContextRef *)this);
      *((void *)this + 3) = 0;
      JSGlobalContextRelease(*((JSGlobalContextRef *)this + 5));
    }
    *((void *)this + 5) = ctx;
    if (ctx)
    {
      JSGlobalContextRetain(ctx);
      id v6 = (SafariShared::JSUtilities *)*((void *)this + 5);
      id v7 = (const OpaqueJSContext *)(*(uint64_t (**)(SafariShared::JSController *))(*(void *)this + 16))(this);
      id v9 = SafariShared::JSUtilities::globalJSObjectByName(v6, v7, v8);
      *((void *)this + 3) = v9;
      if (v9) {
        SafariShared::JSController::protectObject(this, v9);
      }
      id v10 = (SafariShared::JSUtilities *)*((void *)this + 5);
      objc_msgSend(NSString, "stringWithFormat:", @"%sController", (*(uint64_t (**)(SafariShared::JSController *))(*(void *)this + 16))(this));
      id v11 = objc_claimAutoreleasedReturnValue();
      uint64_t v12 = (const OpaqueJSContext *)[v11 UTF8String];
      *((void *)this + 4) = SafariShared::JSUtilities::globalJSObjectByName(v10, v12, v13);

      id v14 = (OpaqueJSValue *)*((void *)this + 4);
      if (v14)
      {
        SafariShared::JSController::protectObject(this, v14);
      }
    }
  }
}

void sub_1A6C7B40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::JSController::addScriptObjectToGlobalObject(SafariShared::JSController *this, const OpaqueJSContext *a2)
{
  double v4 = (const OpaqueJSContext *)(*(uint64_t (**)(SafariShared::JSController *))(*(void *)this + 40))(this);
  objc_msgSend(NSString, "stringWithFormat:", @"%sController", (*(uint64_t (**)(SafariShared::JSController *))(*(void *)this + 16))(this));
  id v7 = objc_claimAutoreleasedReturnValue();
  id v5 = (OpaqueJSClass *)[v7 UTF8String];
  SafariShared::JSUtilities::registerJSObjectInGlobalSpace(a2, v4, v5, (char *)this, v6);
}

void sub_1A6C7B4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::JSController::controllerName(SafariShared::JSController *this)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%sController", (*(uint64_t (**)(SafariShared::JSController *))(*(void *)this + 16))(this));
}

JSClassRef SafariShared::JSController::createJSClass(SafariShared::JSController *this)
{
  uint64_t v2 = (const JSStaticFunction *)(*(uint64_t (**)(SafariShared::JSController *))(*(void *)this + 32))(this);
  double v3 = (const JSStaticValue *)(*(uint64_t (**)(SafariShared::JSController *))(*(void *)this + 24))(this);
  objc_msgSend(NSString, "stringWithFormat:", @"%sController", (*(uint64_t (**)(SafariShared::JSController *))(*(void *)this + 16))(this));
  memset(&definition.staticFunctions, 0, 96);
  *(void *)&definition.version = 0;
  definition.parentClass = 0;
  id v4 = objc_claimAutoreleasedReturnValue();
  definition.className = (const char *)[v4 UTF8String];
  definition.staticValues = v3;
  definition.staticFunctions = v2;
  JSClassRef v5 = JSClassCreate(&definition);

  return v5;
}

void sub_1A6C7B67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::JSController::scriptObjectReady(SafariShared::JSController *this, JSContextRef ctx)
{
  GlobalContext = JSContextGetGlobalContext(ctx);
  SafariShared::JSController::setContext(this, GlobalContext);
}

void SafariShared::JSController::protectObject(SafariShared::JSController *this, OpaqueJSValue *a2)
{
  JSValueRef value = a2;
  double v3 = (void *)((char *)this + 8);
  uint64_t v4 = *((unsigned int *)this + 5);
  if (v4 == *((_DWORD *)this + 4))
  {
    JSClassRef v5 = (void *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&value);
    uint64_t v4 = *((unsigned int *)this + 5);
    *(void *)(*((void *)this + 1) + 8 * v4) = *v5;
    a2 = value;
  }
  else
  {
    *(void *)(*v3 + 8 * v4) = a2;
  }
  *((_DWORD *)this + 5) = v4 + 1;
  JSValueProtect(*((JSContextRef *)this + 5), a2);
}

unsigned int *SafariShared::JSController::unprotectObjects(JSContextRef *this)
{
  uint64_t v1 = (unsigned int *)(this + 1);
  if (*((_DWORD *)this + 5))
  {
    unint64_t v3 = 0;
    do
      JSValueUnprotect(this[5], *((JSValueRef *)this[1] + v3++));
    while (v3 < *((unsigned int *)this + 5));
  }
  return WTF::Vector<OpaqueJSValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v1, 0);
}

uint64_t SafariShared::JSController::staticValues(SafariShared::JSController *this)
{
  return 0;
}

uint64_t SafariShared::JSController::staticFunctions(SafariShared::JSController *this)
{
  return 0;
}

unsigned int *WTF::Vector<OpaqueJSValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v2 = result;
    if (result[3] > a2) {
      result[3] = a2;
    }
    uint64_t result = *(unsigned int **)result;
    if (a2)
    {
      if (a2 >> 61)
      {
        __break(0xC471u);
      }
      else
      {
        void v2[2] = a2;
        uint64_t result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(8 * a2));
        *(void *)uint64_t v2 = result;
      }
    }
    else if (result)
    {
      *(void *)uint64_t v2 = 0;
      void v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

void sub_1A6C7C200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7C2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7C394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7C408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WBSJSCallbackHandler;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A6C7C4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7C5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSGlobalContextRef ctx)
{
  _Unwind_Resume(a1);
}

id callWithArguments<1ul>(JSObjectRef object, JSContextRef *a2, const OpaqueJSValue *a3)
{
  JSValueRef v8 = 0;
  JSValueRef arguments = a3;
  uint64_t v4 = JSObjectCallAsFunction(*a2, object, 0, 1uLL, &arguments, &v8);
  id v6 = SafariShared::JSUtilities::translateJSValueToNS(*a2, v4, v5);
  return v6;
}

uint64_t SafariShared::JSUtilities::translateNSToJSValueForJSCallbackHandler(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, objc_object *a3)
{
  uint64_t v4 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    JSClassRef v5 = v4;
  }
  else {
    JSClassRef v5 = 0;
  }
  id v6 = v5;

  if (!v6)
  {
    if ([(OpaqueJSContext *)v4 conformsToProtocol:&unk_1EFC6D088])
    {
      JSValueRef Undefined = (JSValueRef)[(OpaqueJSContext *)v4 translateToJSValueWithJSContext:this];
    }
    else
    {
      id v9 = v4;
      if (!v9) {
        goto LABEL_17;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
LABEL_17:
      }
      else
      {
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) == 0)
        {
          JSValueRef Undefined = JSValueMakeUndefined(this);
          goto LABEL_19;
        }
      }
      JSValueRef Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v9, v10);
    }
LABEL_19:
    uint64_t v7 = (uint64_t)Undefined;
    goto LABEL_20;
  }
  uint64_t v7 = [(OpaqueJSContext *)v6 JSValueRef];

LABEL_20:
  return v7;
}

void sub_1A6C7C82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7C8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSGlobalContextRef ctx)
{
  if (ctx) {
    JSGlobalContextRelease(ctx);
  }
  _Unwind_Resume(exception_object);
}

id callWithArguments<0ul>(JSObjectRef object, JSContextRef *a2)
{
  JSValueRef exception = 0;
  unint64_t v3 = JSObjectCallAsFunction(*a2, object, 0, 0, 0, &exception);
  JSClassRef v5 = SafariShared::JSUtilities::translateJSValueToNS(*a2, v3, v4);
  return v5;
}

void sub_1A6C7C9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSGlobalContextRef ctx)
{
  _Unwind_Resume(a1);
}

void sub_1A6C7CAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSGlobalContextRef ctx)
{
  _Unwind_Resume(a1);
}

id callWithArguments<2ul>(JSObjectRef object, JSContextRef *a2, const OpaqueJSValue *a3, const OpaqueJSValue *a4)
{
  arguments[0] = a3;
  arguments[1] = a4;
  JSValueRef exception = 0;
  JSClassRef v5 = JSObjectCallAsFunction(*a2, object, 0, 2uLL, arguments, &exception);
  uint64_t v7 = SafariShared::JSUtilities::translateJSValueToNS(*a2, v5, v6);
  return v7;
}

void sub_1A6C7CC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, JSGlobalContextRef ctx)
{
  _Unwind_Resume(a1);
}

id callWithArguments<3ul>(JSObjectRef object, JSContextRef *a2, JSValueRef *arguments)
{
  JSValueRef exception = 0;
  uint64_t v4 = JSObjectCallAsFunction(*a2, object, 0, 3uLL, arguments, &exception);
  id v6 = SafariShared::JSUtilities::translateJSValueToNS(*a2, v4, v5);
  return v6;
}

void sub_1A6C7CDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

OpaqueJSValue *SafariShared::JSUtilities::functionObjectByName(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, OpaqueJSValue *string, const char *a4)
{
  JSValueRef exception = 0;
  id v6 = JSStringCreateWithUTF8CString((const char *)string);
  JSValueRef Property = JSObjectGetProperty(this, a2, v6, &exception);
  if (v6) {
    JSStringRelease(v6);
  }
  if (!Property || !JSValueIsObject(this, Property)) {
    return 0;
  }
  uint64_t result = JSValueToObject(this, Property, &exception);
  if (result)
  {
    id v9 = result;
    if (JSObjectIsFunction(this, result)) {
      return v9;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_1A6C7CE6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A6C7D028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

JSStringRef SafariShared::JSUtilities::jsString@<X0>(SafariShared::JSUtilities *this@<X0>, JSStringRef *a2@<X8>)
{
  JSStringRef result = JSStringCreateWithUTF8CString((const char *)this);
  *a2 = result;
  return result;
}

JSValueRef SafariShared::JSUtilities::callJSMethodWithArguments(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, const char *a4, const OpaqueJSValue *const *a5)
{
  id v9 = SafariShared::JSUtilities::functionObjectByName(this, a2, a3, a4);
  if (v9)
  {
    JSValueRef exception = 0;
    return JSObjectCallAsFunction(this, v9, a2, (size_t)a5, (const JSValueRef *)a4, &exception);
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

JSObjectRef SafariShared::JSUtilities::globalJSObjectByName(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, const char *a3)
{
  GlobalObject = JSContextGetGlobalObject(this);
  JSValueRef exception = 0;
  id v6 = JSStringCreateWithUTF8CString((const char *)a2);
  JSValueRef Property = JSObjectGetProperty(this, GlobalObject, v6, &exception);
  if (v6) {
    JSStringRelease(v6);
  }
  if (JSValueIsUndefined(this, Property)) {
    return 0;
  }
  else {
    return JSValueToObject(this, Property, &exception);
  }
}

void sub_1A6C7D1E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void SafariShared::JSUtilities::logExceptionInChannel(void *a1, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  JSClassRef v5 = a1;
  id v6 = JSValueToObject(a2, a3, 0);
  if (v6)
  {
    uint64_t v7 = SafariShared::JSUtilities::toNSString(a2, v6, 0);
    JSValueRef v8 = JSStringCreateWithUTF8CString("line");
    JSValueRef Property = JSObjectGetProperty(a2, v6, v8, 0);
    if (v8) {
      JSStringRelease(v8);
    }
    if (Property) {
      int v10 = (int)JSValueToNumber(a2, Property, 0);
    }
    else {
      int v10 = -1;
    }
    id v11 = JSStringCreateWithUTF8CString("sourceURL");
    uint64_t v12 = JSObjectGetProperty(a2, v6, v11, 0);
    if (v11) {
      JSStringRelease(v11);
    }
    if (v12)
    {
      id v13 = SafariShared::JSUtilities::toNSString(a2, v12, 0);
    }
    else
    {
      id v13 = 0;
    }
    id v14 = JSStringCreateWithUTF8CString("stack");
    id v15 = JSObjectGetProperty(a2, v6, v14, 0);
    if (v14) {
      JSStringRelease(v14);
    }
    if (v15)
    {
      id v16 = SafariShared::JSUtilities::toNSString(a2, v15, 0);
    }
    else
    {
      id v16 = 0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v17 = 138413058;
      uint64_t v18 = v7;
      __int16 v19 = 2112;
      id v20 = v13;
      __int16 v21 = 1024;
      int v22 = v10;
      __int16 v23 = 2112;
      uint64_t v24 = v16;
      _os_log_error_impl(&dword_1A6B5F000, v5, OS_LOG_TYPE_ERROR, "JavaScript Exception: %@\n(%@:%d)\n%@", (uint8_t *)&v17, 0x26u);
    }
  }
}

void sub_1A6C7D420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *SafariShared::JSUtilities::toNSString(JSContextRef ctx, JSValueRef value, uint64_t a3)
{
  if (a3 != 1)
  {
    if (a3 != 2) {
      goto LABEL_6;
    }
    if (JSValueIsUndefined(ctx, value))
    {
LABEL_5:
      JSClassRef v5 = 0;
      goto LABEL_8;
    }
  }
  if (JSValueIsNull(ctx, value)) {
    goto LABEL_5;
  }
LABEL_6:
  id v6 = JSValueToStringCopy(ctx, value, 0);
  JSClassRef v5 = (__CFString *)JSStringCopyCFString(0, v6);
  if (v6) {
    JSStringRelease(v6);
  }
LABEL_8:
  return v5;
}

void sub_1A6C7D530(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void SafariShared::JSUtilities::registerJSObjectInGlobalSpace(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, OpaqueJSClass *a3, char *a4, void *a5)
{
  GlobalObject = JSContextGetGlobalObject(this);
  int v10 = JSObjectMake(this, a2, a4);
  JSValueRef exception = 0;
  id v11 = JSStringCreateWithUTF8CString((const char *)a3);
  JSObjectSetProperty(this, GlobalObject, v11, v10, 0, &exception);
  if (v11) {
    JSStringRelease(v11);
  }
}

void sub_1A6C7D5E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef SafariShared::JSUtilities::toJSValue(const OpaqueJSContext *a1, void *a2, uint64_t a3)
{
  CFStringRef v5 = a2;
  id v6 = (__CFString *)v5;
  if (v5 || a3)
  {
    if (!v5) {
      CFStringRef v5 = &stru_1EFBE3CF8;
    }
    JSValueRef v8 = JSStringCreateWithCFString(v5);
    JSValueRef String = JSValueMakeString(a1, v8);
    if (v8) {
      JSStringRelease(v8);
    }
  }
  else
  {
    JSValueRef String = JSValueMakeNull(a1);
  }

  return String;
}

{
  void *v5;
  void *v6;
  JSValueRef v7;

  CFStringRef v5 = [a2 absoluteURL];
  id v6 = objc_msgSend(v5, "safari_originalDataAsString");
  uint64_t v7 = SafariShared::JSUtilities::toJSValue(a1, v6, a3);

  return v7;
}

void sub_1A6C7D684(_Unwind_Exception *a1)
{
  if (v2) {
    JSStringRelease(v2);
  }

  _Unwind_Resume(a1);
}

JSStringRef SafariShared::JSUtilities::jsString@<X0>(const __CFString *this@<X0>, JSStringRef *a2@<X8>)
{
  if (!this) {
    this = &stru_1EFBE3CF8;
  }
  JSStringRef result = JSStringCreateWithCFString(this);
  *a2 = result;
  return result;
}

void sub_1A6C7D74C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::JSUtilities::toJSError(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, NSString *a3)
{
  uint64_t v4 = a2;
  JSValueRef arguments = SafariShared::JSUtilities::toJSValue(this, v4, 1);
  JSObjectRef Error = JSObjectMakeError(this, 1uLL, &arguments, 0);

  return Error;
}

void sub_1A6C7D7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t SafariShared::JSUtilities::arrayLength(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, JSValueRef *a3, const OpaqueJSValue **a4)
{
  *a3 = 0;
  uint64_t v7 = JSStringCreateWithUTF8CString("length");
  JSValueRef Property = JSObjectGetProperty(this, a2, v7, a3);
  if (v7) {
    JSStringRelease(v7);
  }
  if (*a3) {
    return 0;
  }
  else {
    return (unint64_t)JSValueToNumber(this, Property, a3);
  }
}

void sub_1A6C7D870(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

JSStringRef SafariShared::JSUtilities::nsString(JSStringRef string, OpaqueJSString *a2)
{
  if (string)
  {
    string = (JSStringRef)JSStringCopyCFString(0, string);
    uint64_t v2 = vars8;
  }
  return string;
}

id SafariShared::JSUtilities::translateJSValueToNS(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  if (a2)
  {
    CFStringRef v5 = (void *)MEMORY[0x1E4F30938];
    id v6 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v7 = [v5 valueWithJSValueRef:a2 inContext:v6];

    if (!JSValueIsObject(this, a2)
      || (JSValueRef v8 = JSValueToObject(this, a2, 0), !JSObjectIsFunction(this, v8))
      && (objc_msgSend(v7, "safari_isThenable") & 1) == 0)
    {
      uint64_t v9 = [v7 toObject];

      uint64_t v7 = (void *)v9;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7;
}

void sub_1A6C7D9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WBSJSCallbackHandler *SafariShared::JSUtilities::toJSCallbackHandler(const OpaqueJSContext *a1, const OpaqueJSValue *a2, void *a3)
{
  id v5 = a3;
  if (a2 && (id v6 = JSValueToObject(a1, a2, 0)) != 0 && JSObjectIsFunction(a1, v6)) {
    uint64_t v7 = [[WBSJSCallbackHandler alloc] initWithCallbackFunction:v6 errorReporter:v5 context:a1];
  }
  else {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1A6C7DA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WBSJSCallbackHandler *SafariShared::JSUtilities::toJSErrorCallbackHandler(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [[WBSJSCallbackHandler alloc] initWithErrorReporter:v3 context:a1];

  return v4;
}

void sub_1A6C7DACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WBSJSCallbackHandler *SafariShared::JSUtilities::toJSPromiseCallbackHandler(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4)
{
  if (a2)
  {
    id v5 = [[WBSJSCallbackHandler alloc] initWithPromiseResolveFunction:a2 rejectFunction:a3 context:this];
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

JSValueRef SafariShared::JSUtilities::deserializeJSObject(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, NSString *a3)
{
  uint64_t v4 = a2;
  if (!v4) {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_6;
  }
  id v5 = JSStringCreateWithCFString((CFStringRef)v4);
  JSValueRef Null = JSValueMakeFromJSONString(this, v5);
  if (v5) {
    JSStringRelease(v5);
  }
  if (!Null) {
LABEL_6:
  }
    JSValueRef Null = JSValueMakeNull(this);

  return Null;
}

void sub_1A6C7DBE0(_Unwind_Exception *a1)
{
  if (v2) {
    JSStringRelease(v2);
  }

  _Unwind_Resume(a1);
}

id SafariShared::JSUtilities::serializeJSObject(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, JSValueRef *exception, const OpaqueJSValue **a4)
{
  if (a2)
  {
    JSONJSValueRef String = JSValueCreateJSONString(this, a2, 0, exception);
    id v6 = SafariShared::JSUtilities::nsString(JSONString, v5);
    if (JSONString) {
      JSStringRelease(JSONString);
    }
  }
  else
  {
    id v6 = 0;
  }
  return v6;
}

void sub_1A6C7DC6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

id SafariShared::JSUtilities::nsArrayWithJSValue(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3, objc_class *a4)
{
  id v5 = JSValueToObject(this, a2, 0);
  if (v5)
  {
    uint64_t v7 = v5;
    JSValueRef v16 = 0;
    unint64_t v8 = SafariShared::JSUtilities::arrayLength(this, v5, &v16, v6);
    uint64_t v9 = 0;
    if (!v16)
    {
      unint64_t v10 = v8;
      uint64_t v9 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v8];
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          PropertyAtIndex = JSObjectGetPropertyAtIndex(this, v7, i, 0);
          id v14 = SafariShared::JSUtilities::translateJSValueToNS(this, PropertyAtIndex, v13);
          if (objc_opt_isKindOfClass()) {
            [v9 addObject:v14];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  return v9;
}

void sub_1A6C7DD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::JSUtilities::nsDictionaryExcludingNullValuesWithJSValue(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  if (JSValueIsObject(this, a2) && (id v5 = JSValueToObject(this, a2, 0)) != 0)
  {
    id v6 = v5;
    uint64_t v7 = JSObjectCopyPropertyNames(this, v5);
    size_t Count = JSPropertyNameArrayGetCount(v7);
    uint64_t v9 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:Count];
    if (Count)
    {
      for (size_t i = 0; i != Count; ++i)
      {
        NameAtIndex = JSPropertyNameArrayGetNameAtIndex(v7, i);
        uint64_t v12 = NameAtIndex;
        if (NameAtIndex) {
          JSStringRetain(NameAtIndex);
        }
        JSValueRef Property = JSObjectGetProperty(this, v6, v12, 0);
        if (!JSValueIsNull(this, Property))
        {
          JSValueRef v16 = SafariShared::JSUtilities::translateJSValueToNS(this, Property, v14);
          if (v16)
          {
            int v17 = SafariShared::JSUtilities::nsString(v12, v15);
            [v9 setObject:v16 forKey:v17];
          }
        }
        if (v12) {
          JSStringRelease(v12);
        }
      }
    }
    JSPropertyNameArrayRelease(v7);
  }
  else
  {
    uint64_t v9 = 0;
  }
  return v9;
}

void sub_1A6C7DF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXAutoBugCapture()
{
  if (WBS_LOG_CHANNEL_PREFIXAutoBugCapture_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAutoBugCapture_onceToken, &__block_literal_global_4);
  }
  return WBS_LOG_CHANNEL_PREFIXAutoBugCapture_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXAutoFill()
{
  if (WBS_LOG_CHANNEL_PREFIXAutoFill_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAutoFill_onceToken, &__block_literal_global_7);
  }
  return WBS_LOG_CHANNEL_PREFIXAutoFill_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXAutoPlay()
{
  if (WBS_LOG_CHANNEL_PREFIXAutoPlay_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAutoPlay_onceToken, &__block_literal_global_10);
  }
  return WBS_LOG_CHANNEL_PREFIXAutoPlay_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXBanners()
{
  if (WBS_LOG_CHANNEL_PREFIXBanners_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXBanners_onceToken, &__block_literal_global_13_0);
  }
  return WBS_LOG_CHANNEL_PREFIXBanners_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCertificates()
{
  if (WBS_LOG_CHANNEL_PREFIXCertificates_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCertificates_onceToken, &__block_literal_global_19);
  }
  return WBS_LOG_CHANNEL_PREFIXCertificates_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCloudHistory()
{
  if (WBS_LOG_CHANNEL_PREFIXCloudHistory_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCloudHistory_onceToken, &__block_literal_global_25_1);
  }
  return WBS_LOG_CHANNEL_PREFIXCloudHistory_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXContentBlockers()
{
  if (WBS_LOG_CHANNEL_PREFIXContentBlockers_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXContentBlockers_onceToken, &__block_literal_global_31);
  }
  return WBS_LOG_CHANNEL_PREFIXContentBlockers_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCrowdsourcedAutoFill()
{
  if (WBS_LOG_CHANNEL_PREFIXCrowdsourcedAutoFill_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCrowdsourcedAutoFill_onceToken, &__block_literal_global_34);
  }
  return WBS_LOG_CHANNEL_PREFIXCrowdsourcedAutoFill_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCycler()
{
  if (WBS_LOG_CHANNEL_PREFIXCycler_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCycler_onceToken, &__block_literal_global_37_0);
  }
  return WBS_LOG_CHANNEL_PREFIXCycler_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXKeychain()
{
  if (WBS_LOG_CHANNEL_PREFIXKeychain_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXKeychain_onceToken, &__block_literal_global_43_0);
  }
  return WBS_LOG_CHANNEL_PREFIXKeychain_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXKeyedArchiver()
{
  if (WBS_LOG_CHANNEL_PREFIXKeyedArchiver_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXKeyedArchiver_onceToken, &__block_literal_global_46);
  }
  return WBS_LOG_CHANNEL_PREFIXKeyedArchiver_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXMemory()
{
  if (WBS_LOG_CHANNEL_PREFIXMemory_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXMemory_onceToken, &__block_literal_global_49);
  }
  return WBS_LOG_CHANNEL_PREFIXMemory_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXOther()
{
  if (WBS_LOG_CHANNEL_PREFIXOther_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXOther_onceToken, &__block_literal_global_58_0);
  }
  return WBS_LOG_CHANNEL_PREFIXOther_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXParsec()
{
  if (WBS_LOG_CHANNEL_PREFIXParsec_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXParsec_onceToken, &__block_literal_global_61);
  }
  return WBS_LOG_CHANNEL_PREFIXParsec_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXPasswords()
{
  if (WBS_LOG_CHANNEL_PREFIXPasswords_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXPasswords_onceToken, &__block_literal_global_64);
  }
  return WBS_LOG_CHANNEL_PREFIXPasswords_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXPerSitePreferences()
{
  if (WBS_LOG_CHANNEL_PREFIXPerSitePreferences_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXPerSitePreferences_onceToken, &__block_literal_global_67_0);
  }
  return WBS_LOG_CHANNEL_PREFIXPerSitePreferences_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXProfiles()
{
  if (WBS_LOG_CHANNEL_PREFIXProfiles_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXProfiles_onceToken, &__block_literal_global_73);
  }
  return WBS_LOG_CHANNEL_PREFIXProfiles_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXReader()
{
  if (WBS_LOG_CHANNEL_PREFIXReader_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXReader_onceToken, &__block_literal_global_76);
  }
  return WBS_LOG_CHANNEL_PREFIXReader_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXStartPage()
{
  if (WBS_LOG_CHANNEL_PREFIXStartPage_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXStartPage_onceToken, &__block_literal_global_91_0);
  }
  return WBS_LOG_CHANNEL_PREFIXStartPage_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXTabDialogs()
{
  if (WBS_LOG_CHANNEL_PREFIXTabDialogs_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXTabDialogs_onceToken, &__block_literal_global_94_2);
  }
  return WBS_LOG_CHANNEL_PREFIXTabDialogs_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXTest()
{
  if (WBS_LOG_CHANNEL_PREFIXTest_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXTest_onceToken, &__block_literal_global_97);
  }
  return WBS_LOG_CHANNEL_PREFIXTest_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXUserMediaCapture()
{
  if (WBS_LOG_CHANNEL_PREFIXUserMediaCapture_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXUserMediaCapture_onceToken, &__block_literal_global_103);
  }
  return WBS_LOG_CHANNEL_PREFIXUserMediaCapture_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXWebDriver()
{
  if (WBS_LOG_CHANNEL_PREFIXWebDriver_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXWebDriver_onceToken, &__block_literal_global_109);
  }
  return WBS_LOG_CHANNEL_PREFIXWebDriver_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXDigitalHealth()
{
  if (WBS_LOG_CHANNEL_PREFIXDigitalHealth_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXDigitalHealth_onceToken, &__block_literal_global_112);
  }
  return WBS_LOG_CHANNEL_PREFIXDigitalHealth_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXPasswordBreachAwareness()
{
  if (WBS_LOG_CHANNEL_PREFIXPasswordBreachAwareness_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXPasswordBreachAwareness_onceToken, &__block_literal_global_115);
  }
  return WBS_LOG_CHANNEL_PREFIXPasswordBreachAwareness_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXTranslation()
{
  if (WBS_LOG_CHANNEL_PREFIXTranslation_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXTranslation_onceToken, &__block_literal_global_118);
  }
  return WBS_LOG_CHANNEL_PREFIXTranslation_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXExtensions()
{
  if (WBS_LOG_CHANNEL_PREFIXExtensions_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXExtensions_onceToken, &__block_literal_global_121);
  }
  return WBS_LOG_CHANNEL_PREFIXExtensions_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCloudSettings()
{
  if (WBS_LOG_CHANNEL_PREFIXCloudSettings_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCloudSettings_onceToken, &__block_literal_global_124);
  }
  return WBS_LOG_CHANNEL_PREFIXCloudSettings_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXInterstellar()
{
  if (WBS_LOG_CHANNEL_PREFIXInterstellar_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXInterstellar_onceToken, &__block_literal_global_130);
  }
  return WBS_LOG_CHANNEL_PREFIXInterstellar_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXWidgets()
{
  if (WBS_LOG_CHANNEL_PREFIXWidgets_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXWidgets_onceToken, &__block_literal_global_136);
  }
  return WBS_LOG_CHANNEL_PREFIXWidgets_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXBiomeDonation()
{
  if (WBS_LOG_CHANNEL_PREFIXBiomeDonation_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXBiomeDonation_onceToken, &__block_literal_global_139);
  }
  return WBS_LOG_CHANNEL_PREFIXBiomeDonation_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXBrowsingAssistant()
{
  if (WBS_LOG_CHANNEL_PREFIXBrowsingAssistant_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXBrowsingAssistant_onceToken, &__block_literal_global_142);
  }
  return WBS_LOG_CHANNEL_PREFIXBrowsingAssistant_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXSiriSuggestedSites()
{
  if (WBS_LOG_CHANNEL_PREFIXSiriSuggestedSites_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXSiriSuggestedSites_onceToken, &__block_literal_global_145);
  }
  return WBS_LOG_CHANNEL_PREFIXSiriSuggestedSites_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXUserDefinedContentBlocker()
{
  if (WBS_LOG_CHANNEL_PREFIXUserDefinedContentBlocker_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXUserDefinedContentBlocker_onceToken, &__block_literal_global_148);
  }
  return WBS_LOG_CHANNEL_PREFIXUserDefinedContentBlocker_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXExport()
{
  if (WBS_LOG_CHANNEL_PREFIXExport_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXExport_onceToken, &__block_literal_global_154);
  }
  return WBS_LOG_CHANNEL_PREFIXExport_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXImport()
{
  if (WBS_LOG_CHANNEL_PREFIXImport_onceToken != -1) {
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXImport_onceToken, &__block_literal_global_157);
  }
  return WBS_LOG_CHANNEL_PREFIXImport_log;
}

void sub_1A6C81E38(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A6C81F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8222C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);

  _Unwind_Resume(a1);
}

void sub_1A6C82350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C823F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8246C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C824D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C82564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C825B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C82614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C82760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C82808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C828A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C82920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C829E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C82B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C82C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C82CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C82DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id canonicalize(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (([(NSString *)v1 safari_hasCaseInsensitivePrefix:@"http://www."] & 1) == 0)
  {
    if ([(NSString *)v1 safari_hasCaseInsensitivePrefix:@"https://www."])
    {
      id v3 = -[NSString substringFromIndex:](v1, "substringFromIndex:", [@"https://www." length]);
      uint64_t v4 = [@"http://www." stringByAppendingString:v3];
    }
    else if ([(NSString *)v1 safari_hasCaseInsensitivePrefix:@"http://"])
    {
      id v3 = -[NSString substringFromIndex:](v1, "substringFromIndex:", [@"http://" length]);
      uint64_t v4 = [@"http://www." stringByAppendingString:v3];
    }
    else if ([(NSString *)v1 safari_hasCaseInsensitivePrefix:@"https://wwws."])
    {
      id v3 = -[NSString substringFromIndex:](v1, "substringFromIndex:", [@"https://wwws." length]);
      uint64_t v4 = [@"http://www." stringByAppendingString:v3];
    }
    else
    {
      if (![(NSString *)v1 safari_hasCaseInsensitivePrefix:@"https://"])
      {
        id v27 = [MEMORY[0x1E4F1CB10] URLWithString:v1];
        uint64_t v28 = [v27 scheme];
        uint64_t v29 = [v28 length];

        uint64_t v2 = v1;
        if (v29) {
          goto LABEL_12;
        }
        if ([(NSString *)v1 safari_hasCaseInsensitivePrefix:@"www."])char v30 = @"http://"; {
        else
        }
          char v30 = @"http://www.";
        uint64_t v2 = [(__CFString *)v30 stringByAppendingString:v1];
        goto LABEL_11;
      }
      id v3 = -[NSString substringFromIndex:](v1, "substringFromIndex:", [@"https://" length]);
      uint64_t v4 = [@"http://www." stringByAppendingString:v3];
    }
    uint64_t v2 = (void *)v4;

LABEL_11:
  }
LABEL_12:
  id v5 = v2;
  uint64_t v6 = [v5 rangeOfString:@"/" options:4];
  uint64_t v7 = v5;
  if (v8)
  {
    uint64_t v9 = v6;
    uint64_t v10 = [v5 length];
    uint64_t v11 = v10 - v9;
    objc_msgSend(v5, "rangeOfString:options:range:", @"index.", 1, v9, v10 - v9);
    if (v12 || (objc_msgSend(v5, "rangeOfString:options:range:", @"home.", 1, v9, v11), uint64_t v7 = v5, v13))
    {
      uint64_t v7 = [v5 substringToIndex:v9 + 1];
    }
  }
  id v14 = v7;
  uint64_t v15 = [v14 rangeOfString:@"?"];
  JSValueRef v16 = v14;
  if (v17)
  {
    JSValueRef v16 = [v14 substringToIndex:v15];
  }
  id v18 = v16;
  uint64_t v19 = [v18 rangeOfString:@"#" options:1];
  id v20 = v18;
  if (v21)
  {
    id v20 = [v18 substringToIndex:v19];
  }
  id v22 = v20;
  uint64_t v23 = [v22 length];
  uint64_t v24 = v22;
  if (([v22 isEqualToString:&stru_1EFBE3CF8] & 1) == 0)
  {
    uint64_t v25 = v23 - 1;
    uint64_t v24 = v22;
    if ([v22 characterAtIndex:v25] == 47)
    {
      uint64_t v24 = [v22 substringToIndex:v25];
    }
  }

  return v24;
}

void sub_1A6C8316C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C83268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8331C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C834EC(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C835E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8368C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C837D0(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C838C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C83964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C839EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C83B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C83C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C83D00(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C83E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C83EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C83F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C841CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C843B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C844AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84598(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C846C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C847C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C84F58(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C85098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C857A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C858A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C859A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C85FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8628C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86BB8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C86CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C86E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WBSObjCWrappedAllocateObject(objc_class *a1, NSUInteger a2)
{
  return NSAllocateObject(a1, a2, 0);
}

BOOL WBSObjCWrappedReplaceDealloc(objc_class *a1, void (*a2)(void))
{
  InstanceMethod = class_getInstanceMethod(a1, sel_dealloc);
  TypeEncoding = method_getTypeEncoding(InstanceMethod);
  MethodImplementation = class_replaceMethod(a1, sel_dealloc, a2, TypeEncoding);
  if (!MethodImplementation)
  {
    Superclass = class_getSuperclass(a1);
    MethodImplementation = class_getMethodImplementation(Superclass, sel_dealloc);
  }
  return class_addMethod(a1, sel_safari_oldDealloc, MethodImplementation, TypeEncoding);
}

uint64_t WBSObjCWrappedCallOldDealloc(void *a1)
{
  Class = object_getClass(a1);
  IMP MethodImplementation = class_getMethodImplementation(Class, sel_safari_oldDealloc);
  return ((uint64_t (*)(void *, char *))MethodImplementation)(a1, sel_safari_oldDealloc);
}

void sub_1A6C8832C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C884FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, id a15)
{
  std::vector<_WBSSearchSuggestionCandidate>::__destroy_vector::operator()[abi:sn180100](&a13);
  _Unwind_Resume(a1);
}

void sub_1A6C88800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *byteArrayToInteger(unsigned __int8 *result, unsigned int a2)
{
  if (a2 > 4)
  {
    uint64_t v2 = WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions();
    JSStringRef result = (unsigned __int8 *)os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    byteArrayToInteger(v2, v3, v4, v5, v6, v7, v8, v9);
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = result;
  uint64_t v11 = 0;
  LODWORD(result) = 0;
  do
  {
    int v12 = *v10++;
    JSStringRef result = (unsigned __int8 *)((v12 << v11) | result);
    v11 += 8;
  }
  while (8 * a2 != v11);
  return result;
}

void sub_1A6C88AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C88CC4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A6C88EE4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

unint64_t std::vector<_WBSSearchSuggestionCandidate>::__push_back_slow_path<_WBSSearchSuggestionCandidate const&>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v27 = v7;
  if (!v10)
  {
    int v12 = 0;
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  uint64_t v11 = (char *)std::allocator<_WBSSearchSuggestionCandidate>::allocate_at_least[abi:sn180100](v7, v10);
  int v12 = v11;
  uint64_t v14 = v13;
  if (!v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v3 = (unint64_t)&v11[24 * v3];
  uint64_t v15 = *a2;
  *(unsigned char *)(v3 + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t v3 = v15;
  *(void *)(v3 + 16) = (id)a2[2];
  unint64_t v16 = *a1;
  unint64_t v9 = a1[1];
  if (v9 == *a1)
  {
LABEL_15:
    int64x2_t v21 = vdupq_n_s64(v9);
    unint64_t v17 = v3;
    goto LABEL_16;
  }
  unint64_t v17 = v3;
  do
  {
    uint64_t v18 = *(void *)(v9 - 24);
    v9 -= 24;
    char v19 = *(unsigned char *)(v9 + 8);
    *(void *)(v17 - 24) = v18;
    v17 -= 24;
    *(unsigned char *)(v17 + 8) = v19;
    uint64_t v20 = *(void *)(v9 + 16);
    *(void *)(v9 + 16) = 0;
    *(void *)(v17 + 16) = v20;
  }
  while (v9 != v16);
  int64x2_t v21 = *(int64x2_t *)a1;
LABEL_16:
  *a1 = v17;
  a1[1] = v3 + 24;
  int64x2_t v25 = v21;
  unint64_t v22 = a1[2];
  a1[2] = (unint64_t)&v12[24 * v14];
  unint64_t v26 = v22;
  uint64_t v24 = v21.i64[0];
  std::__split_buffer<_WBSSearchSuggestionCandidate>::~__split_buffer((uint64_t)&v24);
  return v3 + 24;
}

void *std::allocator<_WBSSearchSuggestionCandidate>::allocate_at_least[abi:sn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__split_buffer<_WBSSearchSuggestionCandidate>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<_WBSSearchSuggestionCandidate>::__destroy_vector::operator()[abi:sn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (id *)**a1;
  if (v2)
  {
    unint64_t v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 3;

        unint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1A6C89494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6C8988C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  objc_destroyWeak(v19);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_11(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x20u);
}

void sub_1A6C89EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id urlForOfflineSearchDirectory()
{
  uint64_t v0 = (void *)MEMORY[0x1E4F1CB10];
  uint64_t v1 = NSHomeDirectory();
  unint64_t v2 = [v0 fileURLWithPath:v1 isDirectory:1];
  uint64_t v3 = [v2 URLByAppendingPathComponent:@"Library/Safari/OfflineSearchModels" isDirectory:1];

  return v3;
}

id urlForOfflineSearchModelPlist()
{
  uint64_t v0 = urlForOfflineSearchDirectory();
  uint64_t v1 = [v0 URLByAppendingPathComponent:@"OfflineSearch.plist"];

  return v1;
}

void sub_1A6C8AF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8B004(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6C8B16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8B308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8B384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8B3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8B560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8BADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  std::deque<_WBSSearchSuggestionCandidate>::~deque[abi:sn180100](a9);
  _Block_object_dispose((const void *)(v62 - 208), 8);
  std::deque<_WBSSearchSuggestionCandidate>::~deque[abi:sn180100](a11);

  _Unwind_Resume(a1);
}

void sub_1A6C8BCCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::deque<_WBSSearchSuggestionCandidate>::push_back(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == *(void *)(a1 + 40) + *(void *)(a1 + 32))
  {
    std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity((const void **)a1);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
  }
  if (v5 == v4 || (unint64_t v7 = *(void *)(a1 + 40) + *(void *)(a1 + 32), (v8 = *(void *)(v4 + 8 * (v7 / 0xAA))) == 0))
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v8 + 24 * (v7 % 0xAA);
    uint64_t v10 = *a2;
    *(unsigned char *)(v9 + 8) = *((unsigned char *)a2 + 8);
    *(void *)uint64_t v9 = v10;
    *(void *)(v9 + 16) = (id)a2[2];
    ++*(void *)(a1 + 40);
  }
}

void std::deque<_WBSSearchSuggestionCandidate>::insert(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (void *)(v7 + 8 * (v6 / 0xAA));
  if (v8 == v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *v9 + 24 * (v6 % 0xAA);
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 170 * (a2 - v9)
  }
        - 0x5555555555555555 * ((a3 - *a2) >> 3)
        + 0x5555555555555555 * ((uint64_t)(v10 - *v9) >> 3);
  uint64_t v12 = *(void *)(a1 + 40);
  unint64_t v13 = v12 - v11;
  if (v11 < v12 - v11)
  {
    if (v6)
    {
      if (v11) {
        goto LABEL_10;
      }
    }
    else
    {
      std::deque<_WBSSearchSuggestionCandidate>::__add_front_capacity(a1);
      if (v11)
      {
LABEL_10:
        unint64_t v65 = a4;
        unint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(a1 + 8);
        unint64_t v16 = (void *)(v15 + 8 * (v14 / 0xAA));
        uint64_t v17 = *v16;
        unint64_t v18 = *v16 + 24 * (v14 % 0xAA);
        if (*(void *)(a1 + 16) == v15) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = v18;
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v17) >> 3);
        if (v19 - v17 < 25) {
          unint64_t v21 = v16[-((170 - v20) / 0xAA)] + 24 * (170 * ((170 - v20) / 0xAA) - (170 - v20)) + 4056;
        }
        else {
          unint64_t v21 = v16[(v20 - 1) / 0xAA] + 24 * ((v20 - 1) % 0xAA);
        }
        if (v19 == a4)
        {
          unint64_t v65 = v21;
          a4 = v21;
        }
        if (v21)
        {
          uint64_t v44 = *(void *)v19;
          *(unsigned char *)(v21 + 8) = *(unsigned char *)(v19 + 8);
          *(void *)unint64_t v21 = v44;
          uint64_t v45 = *(void *)(v19 + 16);
          *(void *)(v19 + 16) = 0;
          *(void *)(v21 + 16) = v45;
          *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1A6D5F070);
          if (v11 >= 2)
          {
            uint64_t v46 = v19 - *v16;
            unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * (v46 >> 3);
            if (v46 < -23)
            {
              unint64_t v58 = 168 - v47;
              long long v49 = &v16[-(v58 / 0xAA)];
              unsigned int v50 = (uint64_t *)(*v49 + 24 * (170 * (v58 / 0xAA) - v58) + 4056);
            }
            else
            {
              unint64_t v48 = v47 + 1;
              long long v49 = &v16[v48 / 0xAA];
              unsigned int v50 = (uint64_t *)(*v49 + 24 * (v48 % 0xAA));
            }
            v66 = v16;
            char v67 = (uint64_t *)v19;
            std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v66, v11);
            std::deque<_WBSSearchSuggestionCandidate>::__move_and_check(a1, v49, v50, v66, v67, v16, v19, &v65);
            uint64_t v19 = v59;
            a4 = v65;
          }
          uint64_t v60 = *(void *)a4;
          *(unsigned char *)(v19 + 8) = *(unsigned char *)(a4 + 8);
          *(void *)uint64_t v19 = v60;
          long long v56 = *(void **)(a4 + 16);
          uint64_t v57 = (id *)(v19 + 16);
LABEL_55:
          objc_storeStrong(v57, v56);
          goto LABEL_56;
        }
        goto LABEL_60;
      }
    }
    unint64_t v38 = *(void *)(a1 + 32);
    uint64_t v39 = *(void *)(a1 + 8);
    BOOL v40 = (void *)(v39 + 8 * (v38 / 0xAA));
    unint64_t v41 = *v40 + 24 * (v38 % 0xAA);
    if (*(void *)(a1 + 16) == v39) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = v41;
    }
    if (v42 == *v40) {
      uint64_t v42 = *(v40 - 1) + 4080;
    }
    uint64_t v43 = *(void *)a4;
    *(unsigned char *)(v42 - 16) = *(unsigned char *)(a4 + 8);
    *(void *)(v42 - 24) = v43;
    *(void *)(v42 - 8) = *(id *)(a4 + 16);
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1A6D5F070);
    goto LABEL_56;
  }
  if (v8 == v7) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = 170 * ((v8 - v7) >> 3) - 1;
  }
  if (v22 == v12 + v6)
  {
    std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity((const void **)a1);
    uint64_t v12 = *(void *)(a1 + 40);
    unint64_t v13 = v12 - v11;
  }
  if (v12 != v11)
  {
    unint64_t v65 = a4;
    unint64_t v28 = *(void *)(a1 + 32) + v12;
    uint64_t v29 = *(void *)(a1 + 8);
    char v30 = (void *)(v29 + 8 * (v28 / 0xAA));
    uint64_t v31 = *v30;
    unint64_t v32 = *v30 + 24 * (v28 % 0xAA);
    if (*(void *)(a1 + 16) == v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v32;
    }
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v31) >> 3);
    if (v33 - v31 < 25)
    {
      unint64_t v51 = 170 - v34;
      unint64_t v36 = &v30[-(v51 / 0xAA)];
      unint64_t v37 = *v36 + 24 * (170 * (v51 / 0xAA) - v51) + 4056;
    }
    else
    {
      unint64_t v35 = v34 - 1;
      unint64_t v36 = &v30[v35 / 0xAA];
      unint64_t v37 = *v36 + 24 * (v35 % 0xAA);
    }
    if (v37 == a4)
    {
      unint64_t v65 = v33;
      a4 = v33;
    }
    if (v33)
    {
      uint64_t v52 = *(void *)v37;
      *(unsigned char *)(v33 + 8) = *(unsigned char *)(v37 + 8);
      *(void *)uint64_t v33 = v52;
      uint64_t v53 = *(void *)(v37 + 16);
      *(void *)(v37 + 16) = 0;
      *(void *)(v33 + 16) = v53;
      ++*(void *)(a1 + 40);
      if (v13 >= 2)
      {
        v66 = v30;
        char v67 = (uint64_t *)v33;
        std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v66, -(uint64_t)v13);
        char v30 = std::deque<_WBSSearchSuggestionCandidate>::__move_backward_and_check(a1, v66, (uint64_t)v67, v36, v37, v30, v33, &v65);
        uint64_t v33 = v54;
        a4 = v65;
      }
      if (v33 == *v30) {
        uint64_t v33 = *(v30 - 1) + 4080;
      }
      uint64_t v55 = *(void *)a4;
      *(unsigned char *)(v33 - 16) = *(unsigned char *)(a4 + 8);
      *(void *)(v33 - 24) = v55;
      long long v56 = *(void **)(a4 + 16);
      uint64_t v57 = (id *)(v33 - 8);
      goto LABEL_55;
    }
LABEL_60:
    __break(1u);
    return;
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v23) {
    goto LABEL_60;
  }
  unint64_t v24 = *(void *)(a1 + 32) + v11;
  uint64_t v25 = *(void *)(v23 + 8 * (v24 / 0xAA));
  if (!v25) {
    goto LABEL_60;
  }
  uint64_t v26 = v25 + 24 * (v24 % 0xAA);
  uint64_t v27 = *(void *)a4;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(a4 + 8);
  *(void *)uint64_t v26 = v27;
  *(void *)(v26 + 16) = *(id *)(a4 + 16);
  ++*(void *)(a1 + 40);
LABEL_56:
  unint64_t v61 = *(void *)(a1 + 32);
  uint64_t v62 = *(void *)(a1 + 8);
  uint64_t v63 = (void *)(v62 + 8 * (v61 / 0xAA));
  if (*(void *)(a1 + 16) == v62) {
    long long v64 = 0;
  }
  else {
    long long v64 = (uint64_t *)(*v63 + 24 * (v61 % 0xAA));
  }
  v66 = v63;
  char v67 = v64;
  std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v66, v11);
}

void *std::deque<_WBSSearchSuggestionCandidate>::pop_back(void *result)
{
  uint64_t v1 = result[5];
  if (v1 && (unint64_t v2 = result, v3 = v1 + result[4] - 1, (v4 = *(void *)(result[1] + 8 * (v3 / 0xAA))) != 0))
  {

    --v2[5];
    return (void *)std::deque<_WBSSearchSuggestionCandidate>::__maybe_remove_back_spare[abi:sn180100](v2, 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::deque<_WBSSearchSuggestionCandidate>::pop_front(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8 * (v1 / 0xAA));
  if (v2)
  {
    unint64_t v3 = (int64x2_t *)result;

    v3[2] = vaddq_s64(v3[2], (int64x2_t)xmmword_1A6D5F080);
    return std::deque<_WBSSearchSuggestionCandidate>::__maybe_remove_front_spare[abi:sn180100]((uint64_t)v3, 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A6C8C4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<_WBSSearchSuggestionCandidate *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::deque<_WBSSearchSuggestionCandidate>::~deque[abi:sn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
LABEL_9:
    void *v4 = 0;
    unint64_t v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v3 = (void **)a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
    unint64_t v11 = v10 >> 3;
    if (v11 == 1)
    {
      uint64_t v12 = 85;
    }
    else
    {
      if (v11 != 2)
      {
LABEL_17:
        while (v2 != v3)
        {
          unint64_t v13 = *v2++;
          operator delete(v13);
        }
        std::__split_buffer<_WBSSearchSuggestionCandidate *>::~__split_buffer((uint64_t)a1);
        return;
      }
      uint64_t v12 = 170;
    }
    a1[4] = v12;
    goto LABEL_17;
  }
  uint64_t v4 = a1 + 5;
  unint64_t v5 = a1[4];
  unint64_t v6 = &v2[v5 / 0xAA];
  unint64_t v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
  unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
  if (v7 == v8) {
    goto LABEL_9;
  }
  while (v7)
  {

    v7 += 24;
    if (v7 - (void)*v6 == 4080)
    {
      unint64_t v9 = (unint64_t)v6[1];
      ++v6;
      unint64_t v7 = v9;
    }
    if (v7 == v8)
    {
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
      goto LABEL_9;
    }
  }
  __break(1u);
}

void std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity(const void **a1)
{
  unint64_t v2 = (unint64_t)a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = (const void *)v4;
    unint64_t v7 = a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 == v6)
    {
      uint64_t v24 = v9 - (unsigned char *)*a1;
      if (v9 > *a1)
      {
LABEL_20:
        uint64_t v25 = v24 >> 3;
        BOOL v26 = v24 >> 3 < -1;
        uint64_t v27 = (v24 >> 3) + 2;
        if (v26) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = v25 + 1;
        }
        uint64_t v29 = -(v28 >> 1);
        uint64_t v30 = v28 >> 1;
        uint64_t v31 = &v9[-8 * v30];
        int64_t v32 = v8 - v9;
        if (v8 != v9)
        {
          memmove(&v9[-8 * v30], v9, v8 - v9);
          unint64_t v9 = (char *)a1[1];
        }
        unint64_t v8 = &v31[v32];
        a1[1] = &v9[8 * v29];
        a1[2] = &v31[v32];
LABEL_28:
        *(void *)unint64_t v8 = v10;
        a1[2] = (char *)a1[2] + 8;
        return;
      }
      if (v8 == *a1) {
        unint64_t v35 = 1;
      }
      else {
        unint64_t v35 = (v8 - (unsigned char *)*a1) >> 2;
      }
      unint64_t v36 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100](v5, v35);
      unint64_t v38 = &v36[8 * (v35 >> 2)];
      uint64_t v39 = (uint64_t *)a1[1];
      unint64_t v8 = v38;
      uint64_t v40 = (unsigned char *)a1[2] - (unsigned char *)v39;
      if (v40)
      {
        unint64_t v8 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v41 = 8 * (v40 >> 3);
        uint64_t v42 = &v36[8 * (v35 >> 2)];
        do
        {
          if (!v42) {
            goto LABEL_5;
          }
          uint64_t v43 = *v39++;
          *(void *)uint64_t v42 = v43;
          v42 += 8;
          v41 -= 8;
        }
        while (v41);
      }
      uint64_t v44 = *a1;
      *a1 = v36;
      a1[1] = v38;
      a1[2] = v8;
      a1[3] = &v36[8 * v37];
      if (v44)
      {
        operator delete(v44);
        unint64_t v8 = (char *)a1[2];
      }
    }
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v12 = a1[2];
    unint64_t v13 = (v12 - (unsigned char *)a1[1]) >> 3;
    unint64_t v14 = a1[3];
    uint64_t v15 = v14 - (unsigned char *)*a1;
    if (v13 >= v15 >> 3) {
      break;
    }
    if (v14 != v12)
    {
      *(void *)&long long v56 = operator new(0xFF0uLL);
      std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(a1, &v56);
      return;
    }
    *(void *)&long long v56 = operator new(0xFF0uLL);
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front(a1, &v56);
    uint64_t v33 = a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v34 = *v33;
    unint64_t v9 = (char *)(v33 + 1);
    uint64_t v10 = v34;
    a1[1] = v9;
    if (v8 == a1[3])
    {
      uint64_t v24 = v9 - (unsigned char *)*a1;
      if (v9 > *a1) {
        goto LABEL_20;
      }
      if (v8 == *a1) {
        unint64_t v45 = 1;
      }
      else {
        unint64_t v45 = (v8 - (unsigned char *)*a1) >> 2;
      }
      uint64_t v46 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100]((uint64_t)(a1 + 3), v45);
      unint64_t v48 = &v46[8 * (v45 >> 2)];
      long long v49 = (uint64_t *)a1[1];
      unint64_t v8 = v48;
      uint64_t v50 = (unsigned char *)a1[2] - (unsigned char *)v49;
      if (v50)
      {
        unint64_t v8 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v51 = 8 * (v50 >> 3);
        uint64_t v52 = &v46[8 * (v45 >> 2)];
        while (v52)
        {
          uint64_t v53 = *v49++;
          *(void *)uint64_t v52 = v53;
          v52 += 8;
          v51 -= 8;
          if (!v51) {
            goto LABEL_47;
          }
        }
        goto LABEL_5;
      }
LABEL_47:
      uint64_t v54 = (void *)*a1;
      *a1 = v46;
      a1[1] = v48;
      a1[2] = v8;
      a1[3] = &v46[8 * v47];
      if (v54)
      {
        operator delete(v54);
        unint64_t v8 = (char *)a1[2];
      }
    }
    if (v8) {
      goto LABEL_28;
    }
LABEL_5:
    __break(1u);
  }
  if (v14 == *a1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = v15 >> 2;
  }
  unint64_t v58 = a1 + 3;
  *(void *)&long long v56 = std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100]((uint64_t)(a1 + 3), v16);
  *((void *)&v56 + 1) = v56 + 8 * v13;
  *(void *)&long long v57 = *((void *)&v56 + 1);
  *((void *)&v57 + 1) = v56 + 8 * v17;
  uint64_t v55 = operator new(0xFF0uLL);
  std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(&v56, &v55);
  unint64_t v18 = a1[2];
  uint64_t v19 = -7 - (void)v18;
  while (v18 != a1[1])
  {
    --v18;
    v19 += 8;
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front((const void **)&v56, v18);
  }
  unint64_t v20 = (void *)*a1;
  long long v21 = v56;
  long long v22 = v57;
  *(void *)&long long v56 = *a1;
  *((void *)&v56 + 1) = v18;
  long long v23 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v21;
  *((_OWORD *)a1 + 1) = v22;
  long long v57 = v23;
  if (v18 != (void *)v23) {
    *(void *)&long long v57 = v23 + (-(v23 + v19) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v20) {
    operator delete(v20);
  }
}

void sub_1A6C8CA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100](v4, v18);
      long long v21 = &v19[8 * (v18 >> 2)];
      long long v22 = (uint64_t *)a1[1];
      unint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        unint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        uint64_t v25 = &v19[8 * (v18 >> 2)];
        while (v25)
        {
          uint64_t v26 = *v22++;
          *(void *)uint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
          if (!v24) {
            goto LABEL_16;
          }
        }
        goto LABEL_20;
      }
LABEL_16:
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        unint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        unint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      unint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  if (v6)
  {
    *(void *)unint64_t v6 = *a2;
    a1[2] += 8;
    return;
  }
LABEL_20:
  __break(1u);
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100](a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      long long v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        long long v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        while (v23)
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
          if (!v22) {
            goto LABEL_16;
          }
        }
        goto LABEL_20;
      }
LABEL_16:
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  if (v4)
  {
    *(void *)uint64_t v4 = *a2;
    a1[2] += 8;
    return;
  }
LABEL_20:
  __break(1u);
}

void std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front(const void **a1, void *a2)
{
  uint64_t v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    uint64_t v5 = (char *)a1[1];
LABEL_19:
    *((void *)v5 - 1) = *a2;
    a1[1] = (char *)a1[1] - 8;
    return;
  }
  uint64_t v6 = (uint64_t)(a1 + 3);
  unint64_t v7 = a1[3];
  uint64_t v8 = a1[2];
  if (v8 < v7)
  {
    uint64_t v9 = (v7 - v8) >> 3;
    if (v9 >= -1) {
      uint64_t v10 = v9 + 1;
    }
    else {
      uint64_t v10 = v9 + 2;
    }
    uint64_t v11 = v10 >> 1;
    uint64_t v5 = &v4[8 * (v10 >> 1)];
    if (v8 != v4)
    {
      memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
      uint64_t v4 = (char *)a1[2];
    }
    a1[1] = v5;
    a1[2] = &v4[8 * v11];
    goto LABEL_19;
  }
  if (v7 == v4) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = (v7 - v4) >> 2;
  }
  uint64_t v13 = 2 * v12;
  uint64_t v14 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100](v6, v12);
  uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
  int64_t v16 = (uint64_t *)a1[1];
  uint64_t v17 = v5;
  uint64_t v18 = (unsigned char *)a1[2] - (unsigned char *)v16;
  if (!v18)
  {
LABEL_17:
    long long v22 = (void *)*a1;
    *a1 = v14;
    a1[1] = v5;
    a1[2] = v17;
    a1[3] = &v14[8 * v15];
    if (v22)
    {
      operator delete(v22);
      uint64_t v5 = (char *)a1[1];
    }
    goto LABEL_19;
  }
  uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
  uint64_t v19 = 8 * (v18 >> 3);
  uint64_t v20 = v5;
  while (v20)
  {
    uint64_t v21 = *v16++;
    *(void *)uint64_t v20 = v21;
    v20 += 8;
    v19 -= 8;
    if (!v19) {
      goto LABEL_17;
    }
  }
  __break(1u);
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;

  uint64_t v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    uint64_t v5 = (char *)a1[1];
LABEL_19:
    *((void *)v5 - 1) = *a2;
    a1[1] = (char *)a1[1] - 8;
    return;
  }
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  if (v6 < v7)
  {
    uint64_t v8 = (v7 - v6) >> 3;
    if (v8 >= -1) {
      uint64_t v9 = v8 + 1;
    }
    else {
      uint64_t v9 = v8 + 2;
    }
    uint64_t v10 = v9 >> 1;
    uint64_t v5 = &v4[8 * (v9 >> 1)];
    if (v6 != v4)
    {
      memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
      uint64_t v4 = (char *)a1[2];
    }
    a1[1] = v5;
    a1[2] = &v4[8 * v10];
    goto LABEL_19;
  }
  if (v7 == v4) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = (v7 - v4) >> 2;
  }
  unint64_t v12 = 2 * v11;
  uint64_t v13 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100]((uint64_t)a1[4], v11);
  uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v15 = (uint64_t *)a1[1];
  int64_t v16 = v5;
  uint64_t v17 = (unsigned char *)a1[2] - (unsigned char *)v15;
  if (!v17)
  {
LABEL_17:
    uint64_t v21 = (void *)*a1;
    *a1 = v13;
    a1[1] = v5;
    a1[2] = v16;
    a1[3] = &v13[8 * v14];
    if (v21)
    {
      operator delete(v21);
      uint64_t v5 = (char *)a1[1];
    }
    goto LABEL_19;
  }
  int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
  uint64_t v18 = 8 * (v17 >> 3);
  uint64_t v19 = v5;
  while (v19)
  {
    uint64_t v20 = *v15++;
    *(void *)uint64_t v19 = v20;
    v19 += 8;
    v18 -= 8;
    if (!v18) {
      goto LABEL_17;
    }
  }
  __break(1u);
}

void std::deque<_WBSSearchSuggestionCandidate>::__add_front_capacity(uint64_t a1)
{
  unint64_t v2 = *(unsigned char **)(a1 + 8);
  BOOL v3 = *(unsigned char **)(a1 + 16);
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0xAA)
  {
    *(void *)(a1 + 32) = v6 + 170;
    __p = (void *)*((void *)v3 - 1);
    *(void *)(a1 + 16) = v3 - 8;
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front((const void **)a1, &__p);
    return;
  }
  uint64_t v7 = a1 + 24;
  uint64_t v8 = *(unsigned char **)(a1 + 24);
  uint64_t v9 = *(unsigned char **)a1;
  uint64_t v10 = (uint64_t)&v8[-*(void *)a1];
  if (v4 < v10 >> 3)
  {
    if (v2 == v9)
    {
      __p = operator new(0xFF0uLL);
      std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back((void *)a1, &__p);
      uint64_t v34 = *(void *)(a1 + 16);
      __p = *(void **)(v34 - 8);
      *(void *)(a1 + 16) = v34 - 8;
    }
    else
    {
      __p = operator new(0xFF0uLL);
    }
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front((const void **)a1, &__p);
    if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
      uint64_t v35 = 85;
    }
    else {
      uint64_t v35 = *(void *)(a1 + 32) + 170;
    }
    *(void *)(a1 + 32) = v35;
    return;
  }
  if (v8 == v9) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v10 >> 2;
  }
  uint64_t v46 = a1 + 24;
  __p = std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100](v7, v11);
  uint64_t v43 = (char *)__p;
  uint64_t v44 = (char *)__p;
  unint64_t v45 = (char *)__p + 8 * v12;
  uint64_t v41 = operator new(0xFF0uLL);
  std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(&__p, &v41);
  uint64_t v13 = *(char **)(a1 + 8);
  uint64_t v14 = v44;
  if (v13 == *(char **)(a1 + 16))
  {
    uint64_t v33 = *(char **)(a1 + 8);
LABEL_39:
    unint64_t v36 = *(void **)a1;
    uint64_t v37 = v43;
    *(void *)a1 = __p;
    *(void *)(a1 + 8) = v37;
    __p = v36;
    uint64_t v43 = v33;
    unint64_t v38 = *(char **)(a1 + 24);
    uint64_t v39 = v45;
    *(void *)(a1 + 16) = v14;
    *(void *)(a1 + 24) = v39;
    uint64_t v44 = v13;
    unint64_t v45 = v38;
    if (v14 - v37 == 8) {
      uint64_t v40 = 85;
    }
    else {
      uint64_t v40 = *(void *)(a1 + 32) + 170;
    }
    *(void *)(a1 + 32) = v40;
    if (v13 != v33) {
      uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    if (v36) {
      operator delete(v36);
    }
    return;
  }
  while (1)
  {
    if (v14 != v45) {
      goto LABEL_30;
    }
    int64_t v15 = v43 - (unsigned char *)__p;
    if (v43 > __p)
    {
      uint64_t v16 = v15 >> 3;
      BOOL v17 = v15 >> 3 < -1;
      uint64_t v18 = (v15 >> 3) + 2;
      if (v17) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = v16 + 1;
      }
      uint64_t v20 = &v43[-8 * (v19 >> 1)];
      int64_t v21 = v14 - v43;
      if (v14 != v43)
      {
        memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
        uint64_t v14 = v43;
      }
      long long v22 = &v14[-8 * (v19 >> 1)];
      uint64_t v14 = &v20[v21];
      uint64_t v43 = v22;
      uint64_t v44 = &v20[v21];
      goto LABEL_30;
    }
    unint64_t v23 = v14 == __p ? 1 : (v14 - (unsigned char *)__p) >> 2;
    uint64_t v24 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100](v46, v23);
    uint64_t v26 = v43;
    uint64_t v14 = &v24[8 * (v23 >> 2)];
    uint64_t v27 = v44 - v43;
    if (v44 != v43) {
      break;
    }
LABEL_28:
    uint64_t v31 = __p;
    __p = v24;
    uint64_t v43 = &v24[8 * (v23 >> 2)];
    uint64_t v44 = v14;
    unint64_t v45 = &v24[8 * v25];
    if (v31)
    {
      operator delete(v31);
      uint64_t v14 = v44;
    }
LABEL_30:
    if (!v14) {
      goto LABEL_47;
    }
    uint64_t v32 = *(void *)v13;
    v13 += 8;
    *(void *)uint64_t v14 = v32;
    uint64_t v14 = v44 + 8;
    v44 += 8;
    if (v13 == *(char **)(a1 + 16))
    {
      uint64_t v33 = *(char **)(a1 + 8);
      goto LABEL_39;
    }
  }
  uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
  uint64_t v28 = 8 * (v27 >> 3);
  uint64_t v29 = &v24[8 * (v23 >> 2)];
  while (v29)
  {
    uint64_t v30 = *(void *)v26;
    v26 += 8;
    *(void *)uint64_t v29 = v30;
    v29 += 8;
    v28 -= 8;
    if (!v28) {
      goto LABEL_28;
    }
  }
LABEL_47:
  __break(1u);
}

void sub_1A6C8D1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::deque<_WBSSearchSuggestionCandidate>::__move_and_check(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, unint64_t *a8)
{
  uint64_t v20 = a2;
  int64_t v21 = a3;
  if (a3 != a5)
  {
    int64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5 - *a4) >> 3)
        + 170 * (a4 - a2)
        + 0x5555555555555555 * (((uint64_t)a3 - *a2) >> 3);
    if (v10 >= 1)
    {
      do
      {
        uint64_t v12 = v21;
        uint64_t v13 = *v20 + 4080;
        int64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v21) >> 3);
        if (v14 >= v10) {
          uint64_t v15 = v10;
        }
        else {
          uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v21) >> 3);
        }
        if (v14 <= v10) {
          uint64_t v16 = (uint64_t *)(*v20 + 4080);
        }
        else {
          uint64_t v16 = &v21[3 * v10];
        }
        unint64_t v17 = *a8;
        if ((unint64_t)v21 <= *a8 && v17 < (unint64_t)v16)
        {
          if (v21 == (uint64_t *)a7) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = 0x5555555555555555 * (((uint64_t)v21 - *v20) >> 3)
          }
                - 170 * (v20 - a6)
                - 0x5555555555555555 * ((a7 - *a6) >> 3);
          long long v22 = v20;
          unint64_t v23 = (uint64_t *)v17;
          *a8 = std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v22, v18)[1];
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<_WBSSearchSuggestionCandidate *,std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate **,long,170l>,0>(v12, v16, a6, a7, &v22);
        a6 = v23;
        a7 = v24;
        v10 -= v15;
        std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v20, v15);
      }
      while (v10 > 0);
    }
  }
  return a6;
}

void *std::deque<_WBSSearchSuggestionCandidate>::__move_backward_and_check(uint64_t a1, void *a2, uint64_t a3, unint64_t *a4, unint64_t a5, void *a6, uint64_t a7, unint64_t *a8)
{
  int64_t v21 = a4;
  unint64_t v22 = a5;
  if (a5 != a3)
  {
    int64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a5 - *a4) >> 3) + 170 * (a4 - a2) + 0x5555555555555555 * ((a3 - *a2) >> 3);
    if (v10 >= 1)
    {
      do
      {
        uint64_t v12 = v21;
        unint64_t v13 = v22;
        if (v22 == *v21)
        {
          --v21;
          unint64_t v13 = *--v12 + 4080;
        }
        unint64_t v14 = v13 - 24;
        unint64_t v22 = v13 - 24;
        int64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v12) >> 3);
        if (v15 >= v10) {
          unint64_t v16 = v10;
        }
        else {
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v12) >> 3);
        }
        if (v15 <= v10) {
          unint64_t v17 = *v12;
        }
        else {
          unint64_t v17 = v13 - 24 * v10;
        }
        unint64_t v18 = *a8;
        if (*a8 < v13 && v17 <= v18)
        {
          if (v14 == a7) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = 170 * (a6 - v12)
          }
                + 0x5555555555555555 * ((uint64_t)(v14 - *v12) >> 3)
                - 0x5555555555555555 * ((a7 - *a6) >> 3);
          unint64_t v23 = v12;
          uint64_t v24 = (void *)v18;
          *a8 = std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v23, v19 - 1)[1];
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<_WBSSearchSuggestionCandidate *,std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate **,long,170l>,0>(v17, v13, a6, a7, (uint64_t *)&v23);
        a6 = v24;
        a7 = v25;
        v10 -= v16;
        std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v21, 1 - v16);
      }
      while (v10 > 0);
    }
  }
  return a6;
}

void *std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 169 - v3;
      uint64_t v6 = &v2[-(v5 / 0xAA)];
      *JSStringRef result = v6;
      unint64_t v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *JSStringRef result = &v2[v3 / 0xAA];
      unint64_t v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<_WBSSearchSuggestionCandidate *,std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate **,long,170l>,0>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t **a5@<X8>)
{
  unint64_t v5 = a3;
  JSStringRef result = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    unint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      int64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - a4 + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (v8 - result)) < v10) {
        int64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 - result);
      }
      JSStringRef result = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,0>(result, &result[3 * v10], a4);
      if (result == v8) {
        break;
      }
      uint64_t v12 = *v5++;
      uint64_t v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4080 == v11) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }
  *a5 = v8;
  a5[1] = v5;
  a5[2] = (uint64_t *)a4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v5 = a2;
  do
  {
    uint64_t v6 = *v4;
    *(unsigned char *)(a3 + 8) = *((unsigned char *)v4 + 8);
    *(void *)a3 = v6;
    uint64_t v7 = v4[2];
    v4[2] = 0;
    uint64_t v8 = *(void **)(a3 + 16);
    *(void *)(a3 + 16) = v7;

    a3 += 24;
    v4 += 3;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<_WBSSearchSuggestionCandidate *,std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate **,long,170l>,0>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t v5 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *a3;
    for (uint64_t i = a2; ; uint64_t i = v12)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4 - v9) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((i - a1) >> 3)) < v11) {
        int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((i - a1) >> 3);
      }
      uint64_t v12 = i - 24 * v11;
      uint64_t result = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,0>(v12, i, a4);
      if (v12 == a1) {
        break;
      }
      uint64_t v15 = *--v5;
      uint64_t v9 = v15;
      a4 = v15 + 4080;
    }
    a4 = v14;
    if (*v5 + 4080 == v14)
    {
      uint64_t v16 = v5[1];
      ++v5;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = *(void *)(v6 - 24);
      v6 -= 24;
      char v8 = *(unsigned char *)(v6 + 8);
      *(void *)(a3 - 24) = v7;
      a3 -= 24;
      *(unsigned char *)(a3 + 8) = v8;
      uint64_t v9 = *(void *)(v6 + 16);
      *(void *)(v6 + 16) = 0;
      int64_t v10 = *(void **)(a3 + 16);
      *(void *)(a3 + 16) = v9;
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::deque<_WBSSearchSuggestionCandidate>::__maybe_remove_back_spare[abi:sn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_OWORD *std::deque<_WBSSearchSuggestionCandidate>::deque(_OWORD *a1, void *a2)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  unint64_t v3 = a2[4];
  uint64_t v4 = a2[1];
  if (a2[2] == v4)
  {
    unint64_t v5 = 0;
    char v8 = 0;
    int v7 = (void *)(v4 + 8 * ((a2[5] + v3) / 0xAA));
  }
  else
  {
    unint64_t v5 = (uint64_t *)(*(void *)(v4 + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA));
    unint64_t v6 = a2[5] + v3;
    int v7 = (void *)(v4 + 8 * (v6 / 0xAA));
    char v8 = (uint64_t *)(*v7 + 24 * (v6 % 0xAA));
  }
  std::deque<_WBSSearchSuggestionCandidate>::__append<std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate const*,_WBSSearchSuggestionCandidate const&,_WBSSearchSuggestionCandidate const* const*,long,170l>,0>((uint64_t)a1, (void *)(v4 + 8 * (v3 / 0xAA)), v5, v7, v8);
  return a1;
}

void sub_1A6C8D984(_Unwind_Exception *a1)
{
  std::__split_buffer<_WBSSearchSuggestionCandidate *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void *std::deque<_WBSSearchSuggestionCandidate>::__append<std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate const*,_WBSSearchSuggestionCandidate const&,_WBSSearchSuggestionCandidate const* const*,long,170l>,0>(uint64_t a1, void *a2, uint64_t *a3, void *a4, uint64_t *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 170 * (a4 - a2)
  }
       - 0x5555555555555555 * (((uint64_t)a5 - *a4) >> 3)
       + 0x5555555555555555 * (((uint64_t)a3 - *a2) >> 3);
  return std::deque<_WBSSearchSuggestionCandidate>::__append_with_size[abi:sn180100]<std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate const*,_WBSSearchSuggestionCandidate const&,_WBSSearchSuggestionCandidate const* const*,long,170l>>(a1, a2, a3, v5);
}

void *std::deque<_WBSSearchSuggestionCandidate>::__append_with_size[abi:sn180100]<std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate const*,_WBSSearchSuggestionCandidate const&,_WBSSearchSuggestionCandidate const* const*,long,170l>>(uint64_t a1, void *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 170 * ((v9 - v8) >> 3) - 1;
  }
  unint64_t v11 = *(void *)(a1 + 40) + *(void *)(a1 + 32);
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity((const void **)a1, a4 - v12);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(a1 + 16);
    unint64_t v11 = *(void *)(a1 + 32) + *(void *)(a1 + 40);
  }
  unint64_t v13 = (void *)(v8 + 8 * (v11 / 0xAA));
  if (v9 == v8) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *v13 + 24 * (v11 % 0xAA);
  }
  unint64_t v23 = (void *)(v8 + 8 * (v11 / 0xAA));
  unint64_t v24 = v14;
  uint64_t result = std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v23, a4);
  uint64_t v16 = v24;
  if (v14 != v24)
  {
    unint64_t v17 = v23;
    while (1)
    {
      unint64_t v18 = v13 == v17 ? v16 : *v13 + 4080;
      if (v14 != v18) {
        break;
      }
      unint64_t v18 = v14;
LABEL_22:
      *(void *)(a1 + 40) -= 0x5555555555555555 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 != v17)
      {
        unint64_t v22 = v13[1];
        ++v13;
        unint64_t v14 = v22;
        if (v22 != v16) {
          continue;
        }
      }
      return result;
    }
    unint64_t v19 = v14;
    while (v19)
    {
      uint64_t v20 = *a3;
      *(unsigned char *)(v19 + 8) = *((unsigned char *)a3 + 8);
      *(void *)unint64_t v19 = v20;
      uint64_t result = (id)a3[2];
      *(void *)(v19 + 16) = result;
      a3 += 3;
      if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4080)
      {
        int64_t v21 = (uint64_t *)a2[1];
        ++a2;
        a3 = v21;
      }
      v19 += 24;
      if (v19 == v18) {
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  return result;
}

void std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity(const void **a1, unint64_t a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = v3 - (unsigned char *)a1[1];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0xAA) {
    unint64_t v6 = v5 / 0xAA + 1;
  }
  else {
    unint64_t v6 = v5 / 0xAA;
  }
  unint64_t v7 = (unint64_t)a1[4];
  if (v6 >= v7 / 0xAA) {
    unint64_t v8 = v7 / 0xAA;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0xAA)
  {
    a1[4] = (const void *)(v7 - 170 * v8);
    if (!v8) {
      return;
    }
    while (1)
    {
      uint64_t v16 = a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 != a1[3]) {
        goto LABEL_19;
      }
      uint64_t v20 = v17 - (unsigned char *)*a1;
      if (v17 <= *a1) {
        break;
      }
      uint64_t v21 = v20 >> 3;
      BOOL v22 = v20 >> 3 < -1;
      uint64_t v23 = (v20 >> 3) + 2;
      if (v22) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = v21 + 1;
      }
      uint64_t v25 = &v17[-8 * (v24 >> 1)];
      int64_t v26 = v3 - v17;
      if (v3 != v17)
      {
        memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
        unint64_t v3 = (char *)a1[1];
      }
      uint64_t v27 = &v3[-8 * (v24 >> 1)];
      unint64_t v3 = &v25[v26];
      a1[1] = v27;
      a1[2] = &v25[v26];
LABEL_20:
      *(void *)unint64_t v3 = v18;
      unint64_t v3 = (char *)a1[2] + 8;
      a1[2] = v3;
      if (!--v8) {
        return;
      }
    }
    if (v3 == *a1) {
      unint64_t v28 = 1;
    }
    else {
      unint64_t v28 = (v3 - (unsigned char *)*a1) >> 2;
    }
    uint64_t v29 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100]((uint64_t)(a1 + 3), v28);
    uint64_t v31 = &v29[8 * (v28 >> 2)];
    uint64_t v32 = (uint64_t *)a1[1];
    unint64_t v3 = v31;
    uint64_t v33 = (unsigned char *)a1[2] - (unsigned char *)v32;
    if (v33)
    {
      unint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v34 = 8 * (v33 >> 3);
      uint64_t v35 = &v29[8 * (v28 >> 2)];
      do
      {
        if (!v35) {
          goto LABEL_103;
        }
        uint64_t v36 = *v32++;
        *(void *)uint64_t v35 = v36;
        v35 += 8;
        v34 -= 8;
      }
      while (v34);
    }
    uint64_t v37 = *a1;
    *a1 = v29;
    a1[1] = v31;
    a1[2] = v3;
    a1[3] = &v29[8 * v30];
    if (v37)
    {
      operator delete(v37);
      unint64_t v3 = (char *)a1[2];
    }
LABEL_19:
    if (!v3) {
      goto LABEL_103;
    }
    goto LABEL_20;
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = (unsigned char *)a1[3] - (unsigned char *)*a1;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (a1[3] != a1[2])
      {
        __p[0] = operator new(0xFF0uLL);
        std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(a1, __p);
        --v6;
        if (!--v9) {
          goto LABEL_79;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        __p[0] = operator new(0xFF0uLL);
        std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front(a1, __p);
        if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
          uint64_t v64 = 169;
        }
        else {
          uint64_t v64 = 170;
        }
        uint64_t v65 = (uint64_t)a1[4] + v64;
        a1[4] = (const void *)v65;
      }
      unint64_t v8 = v6;
    }
    else
    {
LABEL_79:
      uint64_t v65 = (uint64_t)a1[4];
    }
    a1[4] = (const void *)(v65 - 170 * v8);
    if (!v8) {
      return;
    }
    v66 = (char *)a1[2];
    while (1)
    {
      char v67 = a1[1];
      uint64_t v70 = *v67;
      BOOL v68 = (char *)(v67 + 1);
      uint64_t v69 = v70;
      a1[1] = v68;
      if (v66 != a1[3]) {
        goto LABEL_83;
      }
      uint64_t v71 = v68 - (unsigned char *)*a1;
      if (v68 <= *a1) {
        break;
      }
      uint64_t v72 = v71 >> 3;
      BOOL v22 = v71 >> 3 < -1;
      uint64_t v73 = (v71 >> 3) + 2;
      if (v22) {
        uint64_t v74 = v73;
      }
      else {
        uint64_t v74 = v72 + 1;
      }
      uint64_t v75 = &v68[-8 * (v74 >> 1)];
      int64_t v76 = v66 - v68;
      if (v66 != v68)
      {
        memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
        v66 = (char *)a1[1];
      }
      id v77 = &v66[-8 * (v74 >> 1)];
      v66 = &v75[v76];
      a1[1] = v77;
      a1[2] = &v75[v76];
LABEL_84:
      *(void *)v66 = v69;
      v66 = (char *)a1[2] + 8;
      a1[2] = v66;
      if (!--v8) {
        return;
      }
    }
    if (v66 == *a1) {
      unint64_t v78 = 1;
    }
    else {
      unint64_t v78 = (v66 - (unsigned char *)*a1) >> 2;
    }
    v79 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100]((uint64_t)(a1 + 3), v78);
    v81 = &v79[8 * (v78 >> 2)];
    v82 = (uint64_t *)a1[1];
    v66 = v81;
    uint64_t v83 = (unsigned char *)a1[2] - (unsigned char *)v82;
    if (v83)
    {
      v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v84 = 8 * (v83 >> 3);
      v85 = &v79[8 * (v78 >> 2)];
      do
      {
        if (!v85) {
          goto LABEL_103;
        }
        uint64_t v86 = *v82++;
        *(void *)v85 = v86;
        v85 += 8;
        v84 -= 8;
      }
      while (v84);
    }
    v87 = (void *)*a1;
    *a1 = v79;
    a1[1] = v81;
    a1[2] = v66;
    a1[3] = &v79[8 * v80];
    if (v87)
    {
      operator delete(v87);
      v66 = (char *)a1[2];
    }
LABEL_83:
    if (!v66) {
      goto LABEL_103;
    }
    goto LABEL_84;
  }
  uint64_t v11 = v4 >> 3;
  unint64_t v12 = v10 >> 2;
  if (v12 <= v9 + v11) {
    unint64_t v13 = v9 + v11;
  }
  else {
    unint64_t v13 = v12;
  }
  unint64_t v14 = v11 - v8;
  v91 = a1 + 3;
  if (v13) {
    uint64_t v15 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100]((uint64_t)(a1 + 3), v13);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v38 = -170 * v8;
  __p[0] = v15;
  __p[1] = &v15[8 * v14];
  *(void **)&long long v90 = __p[1];
  *((void *)&v90 + 1) = &v15[8 * v13];
  do
  {
    v88 = operator new(0xFF0uLL);
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(__p, &v88);
    --v9;
  }
  while (v9);
  if (!v8)
  {
LABEL_66:
    long long v57 = a1[2];
    uint64_t v58 = -7 - (void)v57;
    while (v57 != a1[1])
    {
      --v57;
      v58 += 8;
      std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front((const void **)__p, v57);
    }
    uint64_t v59 = (void *)*a1;
    long long v60 = *(_OWORD *)__p;
    long long v61 = v90;
    __p[0] = (void *)*a1;
    __p[1] = v57;
    long long v62 = *((_OWORD *)a1 + 1);
    *(_OWORD *)a1 = v60;
    *((_OWORD *)a1 + 1) = v61;
    long long v90 = v62;
    a1[4] = (char *)a1[4] + v38;
    if (v57 != (void *)v62) {
      *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
    }
    if (v59) {
      operator delete(v59);
    }
    return;
  }
  uint64_t v39 = a1[1];
  uint64_t v40 = (char *)v90;
  while (v40 != *((char **)&v90 + 1))
  {
LABEL_64:
    if (!v40) {
      goto LABEL_103;
    }
    *(void *)uint64_t v40 = *v39;
    uint64_t v40 = (char *)(v90 + 8);
    *(void *)&long long v90 = v90 + 8;
    uint64_t v39 = (char *)a1[1] + 8;
    a1[1] = v39;
    if (!--v8) {
      goto LABEL_66;
    }
  }
  int64_t v41 = (char *)__p[1] - (char *)__p[0];
  if (__p[1] > __p[0])
  {
    uint64_t v42 = v41 >> 3;
    BOOL v22 = v41 >> 3 < -1;
    uint64_t v43 = (v41 >> 3) + 2;
    if (v22) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = v42 + 1;
    }
    unint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
    int64_t v46 = v40 - (char *)__p[1];
    if (v40 != __p[1])
    {
      memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
      uint64_t v40 = (char *)__p[1];
    }
    uint64_t v47 = &v40[-8 * (v44 >> 1)];
    uint64_t v40 = &v45[v46];
    __p[1] = v47;
    *(void *)&long long v90 = &v45[v46];
    goto LABEL_64;
  }
  if (v40 == __p[0]) {
    unint64_t v48 = 1;
  }
  else {
    unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
  }
  long long v49 = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100]((uint64_t)v91, v48);
  uint64_t v51 = (uint64_t *)__p[1];
  uint64_t v40 = &v49[8 * (v48 >> 2)];
  uint64_t v52 = v90 - (unint64_t)__p[1];
  if ((void *)v90 == __p[1])
  {
LABEL_62:
    long long v56 = __p[0];
    __p[0] = v49;
    __p[1] = &v49[8 * (v48 >> 2)];
    *(void *)&long long v90 = v40;
    *((void *)&v90 + 1) = &v49[8 * v50];
    if (v56)
    {
      operator delete(v56);
      uint64_t v40 = (char *)v90;
    }
    goto LABEL_64;
  }
  uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
  uint64_t v53 = 8 * (v52 >> 3);
  uint64_t v54 = &v49[8 * (v48 >> 2)];
  while (v54)
  {
    uint64_t v55 = *v51++;
    *(void *)uint64_t v54 = v55;
    v54 += 8;
    v53 -= 8;
    if (!v53) {
      goto LABEL_62;
    }
  }
LABEL_103:
  __break(1u);
}

void sub_1A6C8E0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<_WBSSearchSuggestionCandidate>::__maybe_remove_front_spare[abi:sn180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0xAA) {
    a2 = 1;
  }
  if (v2 < 0x154) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

void sub_1A6C8E3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_1A6C8EC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8F068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8F14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C8FEF8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1A6C90960(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1A6C90CA0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1A6C91A24(_Unwind_Exception *a1)
{
}

void sub_1A6C91D10(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6C92244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6C9233C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A6C92BB8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6C92EA0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t WBSParsecDomainSafariLastSearchFormatWithQuery(uint64_t a1)
{
  return [NSString stringWithFormat:@"ls:%@", a1];
}

void sub_1A6C936A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C9432C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C95D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6C99980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Block_object_dispose((const void *)(v27 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t WBSUserMediaPermissionToWKPermissionDecision(unint64_t a1)
{
  if (a1 > 4) {
    return 2;
  }
  else {
    return qword_1A6D5F0C0[a1];
  }
}

uint64_t WBSUserMediaPermissionToWKPermissionDecisionCamera(unint64_t a1)
{
  if ((a1 & 0x20) != 0) {
    return 1;
  }
  else {
    return (a1 >> 3) & 2;
  }
}

uint64_t WBSUserMediaPermissionToWKPermissionDecisionMicrophone(char a1)
{
  if ((a1 & 4) != 0) {
    return 1;
  }
  else {
    return a1 & 2;
  }
}

void WBSRespondWithRandomDelay(void *a1)
{
  id v1 = a1;
  uint32_t v2 = arc4random();
  dispatch_time_t v3 = dispatch_time(0, (uint64_t)(float)((float)((float)((float)v2 * 2.3283e-10) + 0.25) * 1000000000.0));
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __WBSRespondWithRandomDelay_block_invoke;
  block[3] = &unk_1E5C8CDC8;
  id v6 = v1;
  id v4 = v1;
  dispatch_after(v3, MEMORY[0x1E4F14428], block);
}

uint64_t __WBSRespondWithRandomDelay_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1A6C9BCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6C9C784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9C7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9C9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9CF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9D1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9D26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9D5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9D894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9DCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__42_0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__43_0(uint64_t a1)
{
}

void sub_1A6C9DDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9DEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9E2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9E63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9E798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9E820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9EBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9ED64(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6C9EE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9F280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * const {__strong}&,NSString * const {__strong}>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  unint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong}>(v9, a3, a4);
  uint64_t v10 = [v9 fetch];

  return v10;
}

void sub_1A6C9F3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9F5C0(_Unwind_Exception *a1)
{
  MEMORY[0x1AD0C4750](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A6C9F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9F934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9FB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6C9FEE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA01C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA0460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA0710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA0914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA0D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA1048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA1080()
{
}

void sub_1A6CA12D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA1310()
{
}

void sub_1A6CA1520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA1558()
{
}

void sub_1A6CA1B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA1E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA20D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA2304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA237C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA248C(_Unwind_Exception *exception_object)
{
}

void sub_1A6CA2558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA26A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA2824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA28FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA2A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA2AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA2BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA2DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA2F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong},long,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,long,NSString * {__strong}&>(v9, a3, a4, a5);
}

void sub_1A6CA3048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,long,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,long,NSString * {__strong}&>(v7, a3, a4);
}

void sub_1A6CA30CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,long,NSString * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt64:*a2 atParameterIndex:3];
  [v5 bindString:*a3 atParameterIndex:4];
}

void sub_1A6CA3144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong},NSString * {__strong},NSString * const {__strong}&&>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,NSString * {__strong},NSString * const {__strong}&&>(v9, a3, a4, a5);
}

void sub_1A6CA31D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,NSString * {__strong},NSString * const {__strong}&&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},NSString * {__strong}&>(v7, a3, a4);
}

void sub_1A6CA3254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},NSString * {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:3];
  [v5 bindString:*a3 atParameterIndex:4];
}

void sub_1A6CA32CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong}>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindString:*a3 atParameterIndex:2];
}

void sub_1A6CA3344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,NSString * const {__strong}>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  unint64_t v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong}>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6CA346C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v15 = 0;
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8 error:&v15];
  id v10 = v15;
  uint64_t v11 = v10;
  if (v9)
  {
    [v9 bindString:*a4 atParameterIndex:1];
    uint64_t v12 = [v9 execute];
    [v9 invalidate];
    if ((v12 - 100) >= 2 && v12 != 0) {
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v10;
    }
    uint64_t v12 = [v11 code];
  }

  return v12;
}

void sub_1A6CA359C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,long>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  unint64_t v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6CA36D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindInt64:*a3 atParameterIndex:2];
}

void sub_1A6CA3764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,NSString * {__strong}>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  uint64_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  unint64_t v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * {__strong}>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6CA388C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * {__strong}>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindString:*a3 atParameterIndex:2];
}

void sub_1A6CA3918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSData * const {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindString:*a2 atParameterIndex:1];
  [v5 bindData:*a3 atParameterIndex:2];
}

void sub_1A6CA3990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong},NSData * const {__strong}&,NSString * const {__strong}>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  [v9 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,NSData * const {__strong}&,NSString * const {__strong}>(v9, a3, a4, a5);
}

void sub_1A6CA3A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,NSData * const {__strong}&,NSString * const {__strong}>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  [v7 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * const {__strong}&,NSString * const {__strong}&>(v7, a3, a4);
}

void sub_1A6CA3AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * const {__strong}&,NSString * const {__strong}&>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  [v5 bindData:*a2 atParameterIndex:3];
  [v5 bindString:*a3 atParameterIndex:4];
}

void sub_1A6CA3B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_5_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_8_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x2Au);
}

void OUTLINED_FUNCTION_10(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1A6CA3CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA3D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA3DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA4F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CA52A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA545C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA55C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA5890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA597C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA5A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA5C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA5DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA5EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA5FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA61B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA62E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA6458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA65D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA6748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA6924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA6B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA6CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA6E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA6EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA7034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA7394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA74D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA75D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA76A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA7768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA7814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA78E0(_Unwind_Exception *a1)
{
  dispatch_time_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6CA7994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA7AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CA7BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA7D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA7EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA7F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA800C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA8410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA85B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA869C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA889C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA89F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA8DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA8F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA9018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA908C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA9110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA916C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA9254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA933C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA93E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA95D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA9658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA96F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA97B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CA997C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::ReaderAvailabilityController(SafariShared::ReaderAvailabilityController *this)
{
  *(void *)this = &unk_1EFBE3148;
  *((_WORD *)this + 4) = 0;
  *((void *)this + 4) = 0;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v1 = operator new(0x18uLL);
  v1[2] = 0x3FF0000000000000;
  *(_OWORD *)uint64_t v1 = xmmword_1A6D5F120;
  operator new();
}

void sub_1A6CA9BF8(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  MEMORY[0x1AD0C4750](v4, 0x10A0C409BFBB458);
  operator delete(v3);
  uint64_t v6 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v6) {
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100](v1 + 64, v6);
  }

  uint64_t v7 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t SafariShared::ReaderAvailabilityController::checkAvailabilityIfNeeded(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t SafariShared::ReaderAvailabilityController::checkTextSampleAvailabilityIfNeeded(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

void SafariShared::ReaderAvailabilityController::~ReaderAvailabilityController(SafariShared::ReaderAvailabilityController *this)
{
  *(void *)this = &unk_1EFBE3148;
  uint64_t v2 = (uint64_t *)((char *)this + 64);
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(*((id **)this + 8));
  SafariShared::ReaderAvailabilityController::invalidateArticleReloadTimer((id *)this);
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(*((id **)this + 10));
  SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction((id *)this);
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100]((uint64_t)this + 80, v3);
  }
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100]((uint64_t)v2, v4);
  }

  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

void sub_1A6CA9DE8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 80);
  *(void *)(v1 + 80) = 0;
  if (v4) {
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100](v1 + 80, v4);
  }
  SafariShared::ReaderAvailabilityController::~ReaderAvailabilityController(v2, v1);
  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(id *this)
{
  if ([this[7] isValid])
  {
    [this[7] invalidate];
    id v2 = this[7];
    this[7] = 0;
  }
}

void SafariShared::ReaderAvailabilityController::invalidateArticleReloadTimer(id *this)
{
  if ([this[4] isValid])
  {
    [this[4] invalidate];
    id v2 = this[4];
    this[4] = 0;
  }
}

void SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction(id *this)
{
  if ([this[6] isValid])
  {
    [this[6] invalidate];
    id v2 = this[6];
    this[6] = 0;
  }
}

uint64_t SafariShared::ReaderAvailabilityController::originalArticleFinderJSController(SafariShared::ReaderAvailabilityController *this)
{
  return *((void *)this + 2);
}

uint64_t SafariShared::ReaderAvailabilityController::prepareArticleFinder(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t result = (*(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(void *)this + 80))(this);
  if (result)
  {
    if (!*((void *)this + 2))
    {
      uint64_t result = (*(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(void *)this + 96))(this);
      if (!result) {
        return result;
      }
      uint64_t v3 = (const OpaqueJSContext *)result;
      +[WBSReaderResources articleFinderScriptForContext:result];
      JSScriptEvaluate();
      (*(void (**)(uint64_t *__return_ptr, SafariShared::ReaderAvailabilityController *))(*(void *)this
                                                                                                  + 72))(&v7, this);
      uint64_t v4 = v7;
      uint64_t v7 = 0;
      uint64_t v5 = *((void *)this + 2);
      *((void *)this + 2) = v4;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        uint64_t v6 = v7;
        uint64_t v7 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      SafariShared::JSController::addScriptObjectToGlobalObject(*((SafariShared::JSController **)this + 2), v3);
      SafariShared::JSController::scriptObjectReady(*((SafariShared::JSController **)this + 2), v3);
    }
    return 1;
  }
  return result;
}

id SafariShared::ReaderAvailabilityController::extractTextSamplesForTranslation(SafariShared::ArticleFinderJSController **this)
{
  if (SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this))
  {
    id v2 = (SafariShared::JSUtilities *)(*((uint64_t (**)(SafariShared::ArticleFinderJSController **))*this + 12))(this);
    TextSamplesByVisualExamination = SafariShared::ArticleFinderJSController::findTextSamplesByVisualExamination(this[2]);
    uint64_t v5 = SafariShared::JSUtilities::translateJSValueToNS(v2, TextSamplesByVisualExamination, v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  return v5;
}

BOOL SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata(SafariShared::ReaderAvailabilityController *this)
{
  if (SafariShared::ReaderAvailabilityController::prepareArticleFinder(this))
  {
    id v2 = (SafariShared::ArticleFinderJSController *)*((void *)this + 2);
    return SafariShared::ArticleFinderJSController::usesSearchEngineOptimizationMetadata(v2);
  }
  else
  {
    uint64_t v4 = WBS_LOG_CHANNEL_PREFIXReader();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata();
    }
    return 0;
  }
}

void SafariShared::ReaderAvailabilityController::checkTextSampleAvailabilityIfNeeded(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (((*((uint64_t (**)(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **))*this
         + 10))(this) & 1) != 0)
  {
    if (SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this))
    {
      id v2 = objc_alloc_init(WBSReaderAvailabilityCheckResult);
      uint64_t v3 = (*((void (**)(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **))*this + 6))(this);
      [(WBSReaderAvailabilityCheckResult *)v2 setTextSamples:v3];

      uint64_t v4 = [(WBSReaderAvailabilityCheckResult *)v2 textSamples];
      uint64_t v5 = [v4 count];

      if (v5)
      {
        uint64_t v6 = (id)WBS_LOG_CHANNEL_PREFIXTranslation();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          id v10 = [(WBSReaderAvailabilityCheckResult *)v2 textSamples];
          int v11 = 134217984;
          uint64_t v12 = [v10 count];
          _os_log_debug_impl(&dword_1A6B5F000, v6, OS_LOG_TYPE_DEBUG, "Translation found %lu text samples", (uint8_t *)&v11, 0xCu);
        }
        (*((void (**)(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **, WBSReaderAvailabilityCheckResult *))*this
         + 7))(this, v2);
      }
      else
      {
        id v9 = WBS_LOG_CHANNEL_PREFIXTranslation();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
          SafariShared::ReaderAvailabilityController::checkTextSampleAvailabilityIfNeeded();
        }
        SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDelayedDetection(this[10]);
      }
    }
    else
    {
      id v8 = WBS_LOG_CHANNEL_PREFIXTranslation();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata();
      }
    }
  }
  else
  {
    uint64_t v7 = WBS_LOG_CHANNEL_PREFIXTranslation();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      SafariShared::ReaderAvailabilityController::checkTextSampleAvailabilityIfNeeded();
    }
  }
}

void sub_1A6CAA37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDelayedDetection(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *this)
{
  unint64_t v1 = *((void *)this + 6);
  uint64_t v2 = *((void *)this + 1);
  if (v1 >= (*((void *)this + 2) - v2) >> 3)
  {
    *((void *)this + 6) = 0;
  }
  else
  {
    double v3 = *(double *)(v2 + 8 * v1);
    *((void *)this + 6) = v1 + 1;
    SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectAvailabilityAfterDelay((uint64_t)this, *((_DWORD *)this + 11), v3);
  }
}

id SafariShared::ReaderAvailabilityController::extractCanonicalURLForSystemNoteTaking(SafariShared::ArticleFinderJSController **this)
{
  if (SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this))
  {
    uint64_t v2 = SafariShared::ArticleFinderJSController::canonicalURLForSystemNoteTaking(this[2]);
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

id SafariShared::ReaderAvailabilityController::extractReaderArticleTitleIfAvailable(SafariShared::ArticleFinderJSController **this)
{
  if (SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this)
    && *((unsigned char *)this + 25))
  {
    uint64_t v2 = SafariShared::ArticleFinderJSController::readerArticleTitle(this[2]);
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

void SafariShared::ReaderAvailabilityController::checkAvailabilityIfNeeded(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 25))
  {
    SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextSoonIfNeeded((uint64_t)this, 0);
  }
  else
  {
    uint64_t v2 = (char *)*((void *)this + 8);
    if ((*((_DWORD *)v2 + 10) - 1) > 1 || !*((unsigned char *)this + 24))
    {
      char v3 = *v2;
      char *v2 = 1;
      *((unsigned char *)this + 25) = (*(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(void *)this + 32))(this);
      char *v2 = v3;
      uint64_t v4 = objc_alloc_init(WBSReaderAvailabilityCheckResult);
      if (*((unsigned char *)this + 9))
      {
        int doesPageUseSearchEngineOptimizationMetadata = *((unsigned __int8 *)this + 8);
      }
      else
      {
        int doesPageUseSearchEngineOptimizationMetadata = SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata(this);
        if (*((unsigned char *)this + 9)) {
          *((unsigned char *)this + 9) = 0;
        }
        *((unsigned char *)this + 8) = doesPageUseSearchEngineOptimizationMetadata;
        *((unsigned char *)this + 9) = 1;
      }
      [(WBSReaderAvailabilityCheckResult *)v4 setDoesPageUseSearchEngineOptimizationMetadata:doesPageUseSearchEngineOptimizationMetadata != 0];
      if (!*((unsigned char *)this + 72))
      {
        uint64_t v6 = (*(void (**)(SafariShared::ReaderAvailabilityController *))(*(void *)this + 48))(this);
        [(WBSReaderAvailabilityCheckResult *)v4 setTextSamples:v6];
        *((unsigned char *)this + 72) = 1;
        uint64_t v7 = (id)WBS_LOG_CHANNEL_PREFIXTranslation();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          SafariShared::ReaderAvailabilityController::checkAvailabilityIfNeeded(v11, [v6 count], v7);
        }

        if (![v6 count]) {
          SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDelayedDetection(*((SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **)this + 10));
        }
      }
      SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextSoonIfNeeded((uint64_t)this, 1);
      id v8 = (*(void (**)(SafariShared::ReaderAvailabilityController *))(*(void *)this + 64))(this);
      [(WBSReaderAvailabilityCheckResult *)v4 setCanonicalURL:v8];

      int v9 = *(_DWORD *)(*((void *)this + 8) + 40);
      if (*((unsigned char *)this + 25) || (v9 - 1) <= 2)
      {
        *((unsigned char *)this + 24) = 1;
        SafariShared::ReaderAvailabilityController::clearArticleFinderIfPossible((uint64_t)this);
        int v10 = *((unsigned __int8 *)this + 25);
        if (!*((unsigned char *)this + 25) && v9 == 3)
        {
          SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDelayedDetection(*((SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **)this + 8));
          int v10 = *((unsigned __int8 *)this + 25);
        }
      }
      else
      {
        int v10 = 0;
      }
      [(WBSReaderAvailabilityCheckResult *)v4 setReaderAvailable:v10 != 0];
      [(WBSReaderAvailabilityCheckResult *)v4 setIsSameDocumentNavigation:v9 == 3];
      (*(void (**)(SafariShared::ReaderAvailabilityController *, WBSReaderAvailabilityCheckResult *))(*(void *)this + 104))(this, v4);
    }
  }
}

void sub_1A6CAA760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextSoonIfNeeded(uint64_t a1, uint64_t a2)
{
  SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction((id *)a1);
  if (*(unsigned char *)(a1 + 41)
    || !*(unsigned char *)(a1 + 24)
    || (SafariShared::ReaderAvailabilityController::canExtractPageMetadataAndText((SafariShared::ReaderAvailabilityController *)a1) & 1) != 0
    || (*(_DWORD *)(*(void *)(a1 + 64) + 40) & 0xFFFFFFFE) != 2)
  {
    if (SafariShared::ReaderAvailabilityController::canExtractPageMetadataAndText((SafariShared::ReaderAvailabilityController *)a1))
    {
      v10.version = 0;
      memset(&v10.retain, 0, 24);
      v10.info = (void *)a1;
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerRef v6 = CFRunLoopTimerCreate(v4, Current + 5.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextTimerFired, &v10);
      uint64_t v7 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v6;

      id v8 = CFRunLoopGetCurrent();
      CFRunLoopAddTimer(v8, *(CFRunLoopTimerRef *)(a1 + 48), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
    }
    else
    {
      int v9 = *(void (**)(uint64_t, void, void, uint64_t))(*(void *)a1 + 120);
      v9(a1, 0, 0, a2);
    }
  }
  else
  {
    (*(void (**)(uint64_t, void, void, void))(*(void *)a1 + 120))(a1, 0, 0, 0);
    *(unsigned char *)(a1 + 41) = 1;
  }
}

BOOL SafariShared::ReaderAvailabilityController::isPageLoadedEnoughForAvailabilityCheck(SafariShared::ReaderAvailabilityController *this)
{
  return (*(_DWORD *)(*((void *)this + 8) + 40) - 1) < 2;
}

uint64_t SafariShared::ReaderAvailabilityController::clearArticleFinderIfPossible(uint64_t this)
{
  if (!*(unsigned char *)(this + 56))
  {
    unint64_t v1 = (void *)this;
    if ((*(_DWORD *)(*(void *)(this + 64) + 40) - 1) <= 2
      && (*(unsigned char *)(this + 41) || *(unsigned char *)(this + 40) || !*(unsigned char *)(this + 24) || !*(unsigned char *)(this + 25)))
    {
      uint64_t v2 = *(void *)(this + 16);
      v1[2] = 0;
      if (v2) {
        (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      }
      char v3 = *(uint64_t (**)(void *))(*v1 + 88);
      return v3(v1);
    }
  }
  return this;
}

uint64_t SafariShared::ReaderAvailabilityController::determineAvailability(SafariShared::ArticleFinderJSController **this)
{
  uint64_t result = SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this);
  if (result)
  {
    char v3 = this[2];
    return SafariShared::ArticleFinderJSController::readerIsAvailable(v3);
  }
  return result;
}

void SafariShared::ReaderAvailabilityController::clearAvailability(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((_WORD *)this + 12) = 0;
  *((unsigned char *)this + 72) = 0;
  *(_DWORD *)(*((void *)this + 8) + 40) = 0;
  *((unsigned char *)this + 27) = 0;
  *((unsigned char *)this + 41) = 0;
  SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction((id *)this);
  *((unsigned char *)this + 56) = 0;
  if (*((unsigned char *)this + 9)) {
    *((unsigned char *)this + 9) = 0;
  }
}

uint64_t SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::setLoadEvent(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

JSValueRef SafariShared::ReaderAvailabilityController::prepareToTransitionToReader(SafariShared::JSUtilities ***this)
{
  JSValueRef result = (JSValueRef)SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this);
  if (result)
  {
    JSValueRef result = SafariShared::ArticleFinderJSController::prepareToTransitionToReader(this[2]);
    *((unsigned char *)this + 56) = 1;
  }
  return result;
}

uint64_t SafariShared::ReaderAvailabilityController::originalArticleFinder(SafariShared::ReaderAvailabilityController *this)
{
  if (SafariShared::ReaderAvailabilityController::prepareArticleFinder(this)) {
    return *(void *)(*((void *)this + 2) + 24);
  }
  else {
    return 0;
  }
}

uint64_t SafariShared::ReaderAvailabilityController::doneWithArticleFinder(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v3 = *(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(void *)this + 88);
  return v3(this);
}

void SafariShared::ReaderAvailabilityController::scheduleArticleReloadTimer(SafariShared::ReaderAvailabilityController *this, double a2)
{
  SafariShared::ReaderAvailabilityController::invalidateArticleReloadTimer((id *)this);
  v9.version = 0;
  memset(&v9.retain, 0, 24);
  v9.info = this;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFRunLoopTimerRef v6 = CFRunLoopTimerCreate(v4, Current + a2, 0.0, 0, 0, (CFRunLoopTimerCallBack)SafariShared::ReaderAvailabilityController::articleReloadTimerFired, &v9);
  uint64_t v7 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v6;

  id v8 = CFRunLoopGetCurrent();
  CFRunLoopAddTimer(v8, *((CFRunLoopTimerRef *)this + 4), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
}

SafariShared::JSUtilities **SafariShared::ReaderAvailabilityController::articleReloadTimerFired(SafariShared::ReaderAvailabilityController *this, __CFRunLoopTimer *a2, void *a3)
{
  *((unsigned char *)a2 + 27) = 0;
  JSValueRef result = (SafariShared::JSUtilities **)*((void *)a2 + 2);
  if (result)
  {
    SafariShared::ArticleFinderJSController::reloadArticleContent(result);
    uint64_t v5 = *(uint64_t (**)(__CFRunLoopTimer *))(*(void *)a2 + 112);
    return (SafariShared::JSUtilities **)v5(a2);
  }
  return result;
}

void SafariShared::ReaderAvailabilityController::detectAvailabilityAfterDelay(uint64_t a1, int a2, double a3)
{
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectAvailabilityAfterDelay(uint64_t a1, int a2, double a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (!*(unsigned char *)a1)
  {
    double v7 = Current + a3;
    if ([*(id *)(a1 + 56) isValid])
    {
      if (v7 > *(double *)(a1 + 64)) {
        return;
      }
      SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer((id *)a1);
    }
    SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDetectionTimer((SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *)a1, a3);
    *(double *)(a1 + 64) = v7;
    *(_DWORD *)(a1 + 40) = a2;
  }
}

void SafariShared::ReaderAvailabilityController::setCanRunAvailabilityDetection(SafariShared::ReaderAvailabilityController *this, int a2)
{
  if (*((unsigned __int8 *)this + 26) != a2)
  {
    *((unsigned char *)this + 26) = a2;
    if ((a2 & 1) == 0) {
      SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(*((id **)this + 8));
    }
  }
}

void SafariShared::ReaderAvailabilityController::didFinishDocumentLoad(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t v2 = (SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *)*((void *)this + 8);
  *((_DWORD *)v2 + 10) = 1;
  if (*((unsigned char *)this + 27)) {
    SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDetectionTimer(v2, 3.0);
  }
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDetectionTimer(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *this, double a2)
{
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer((id *)this);
  v9.version = 0;
  memset(&v9.retain, 0, 24);
  v9.info = this;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFRunLoopTimerRef v6 = CFRunLoopTimerCreate(v4, Current + a2, 0.0, 0, 0, (CFRunLoopTimerCallBack)SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectionTimerFired, &v9);
  double v7 = (void *)*((void *)this + 7);
  *((void *)this + 7) = v6;

  id v8 = CFRunLoopGetCurrent();
  CFRunLoopAddTimer(v8, *((CFRunLoopTimerRef *)this + 7), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
}

void SafariShared::ReaderAvailabilityController::didFinishLoad(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t v2 = (SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *)*((void *)this + 8);
  *((_DWORD *)v2 + 10) = 2;
  if (*((unsigned char *)this + 27)) {
    SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDetectionTimer(v2, 0.0);
  }
  SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextSoonIfNeeded((uint64_t)this, 0);
}

uint64_t SafariShared::ReaderAvailabilityController::detectAvailabilityForUIProcessDrivenCheck(SafariShared::ArticleFinderJSController **this)
{
  uint64_t result = SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this);
  if (result)
  {
    char v3 = this[2];
    return SafariShared::ArticleFinderJSController::detectAvailabilityForUIProcessDrivenCheck(v3);
  }
  return result;
}

void SafariShared::ReaderAvailabilityController::detectAvailabilityAfterSameDocumentNavigation(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **this)
{
}

uint64_t SafariShared::ReaderAvailabilityController::canExtractPageMetadataAndText(SafariShared::ReaderAvailabilityController *this)
{
  if (*((unsigned char *)this + 41) || *((unsigned char *)this + 40)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(void *)this + 80))(this);
  if (result) {
    return (*(_DWORD *)(*((void *)this + 8) + 40) & 0xFFFFFFFE) == 2;
  }
  return result;
}

BOOL SafariShared::ReaderAvailabilityController::isPageLoadedEnoughForPageMetadataAndTextExtraction(SafariShared::ReaderAvailabilityController *this)
{
  return (*(_DWORD *)(*((void *)this + 8) + 40) & 0xFFFFFFFE) == 2;
}

void SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextTimerFired(SafariShared::ReaderAvailabilityController *this, __CFRunLoopTimer *a2, void *a3)
{
}

void SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextNow(SafariShared::ReaderAvailabilityController *this)
{
  SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction((id *)this);
  if ((SafariShared::ReaderAvailabilityController::canExtractPageMetadataAndText(this) & 1) != 0
    && (SafariShared::ReaderAvailabilityController::prepareArticleFinder(this) & 1) != 0)
  {
    *((unsigned char *)this + 41) = 1;
    id v4 = objc_alloc_init(MEMORY[0x1E4F28E78]);
    if (*((unsigned char *)this + 25))
    {
      uint64_t v2 = SafariShared::ArticleFinderJSController::readerTextIncludingArticleMetadata(*((SafariShared::ArticleFinderJSController **)this + 2), 1);
      if (v2) {
        [v4 appendString:v2];
      }
    }
    (*(void (**)(SafariShared::ReaderAvailabilityController *, id, void, void))(*(void *)this + 120))(this, v4, 0, 0);
    SafariShared::ReaderAvailabilityController::clearArticleFinderIfPossible((uint64_t)this);
  }
  else
  {
    char v3 = *(void (**)(SafariShared::ReaderAvailabilityController *, void, void, void))(*(void *)this + 120);
    v3(this, 0, 0, 0);
  }
}

void sub_1A6CAB0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::ReaderAvailabilityController::pageMetadataAndTextExtractionIsPending(id *this)
{
  return [this[6] isValid];
}

uint64_t SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::AvailabilityDetectionScheduler(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(unsigned char *)a1 = 0;
  std::vector<double>::vector((void *)(a1 + 8), a6);
  *(void *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a4;
  *(void *)(a1 + 80) = a5;
  return a1;
}

{
  *(unsigned char *)a1 = 0;
  std::vector<double>::vector((void *)(a1 + 8), a6);
  *(void *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a4;
  *(void *)(a1 + 80) = a5;
  return a1;
}

uint64_t SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::loadEvent(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *this)
{
  return *((unsigned int *)this + 10);
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectionTimerFired(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *this, id *a2, void *a3)
{
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectAvailabilityNow(id *this)
{
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(this);
  uint64_t v2 = this[4];
  if (v2[26])
  {
    char v3 = (void (*)(void *))this[9];
    uint64_t v4 = (uint64_t)this[10];
    uint64_t v5 = &v2[v4 >> 1];
    if (v4) {
      char v3 = *(void (**)(void *))(*v5 + v3);
    }
    v3(v5);
  }
}

BOOL SafariShared::ReaderAvailabilityController::readerHasBeenActivatedRecently(SafariShared::ReaderAvailabilityController *this, NSDate *a2)
{
  uint64_t v2 = this;
  char v3 = v2;
  if (v2)
  {
    [(SafariShared::ReaderAvailabilityController *)v2 timeIntervalSinceNow];
    BOOL v5 = v4 <= 604800.0;
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

void sub_1A6CAB29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::updateReaderOrTranslationLastActivated(SafariShared::ReaderAvailabilityController *this, WKProcessPool *a2)
{
  double v4 = this;
  uint64_t v2 = [MEMORY[0x1E4F1C9C8] date];
  char v3 = objc_msgSend(MEMORY[0x1E4F1CB18], "safari_browserDefaults");
  objc_msgSend(v3, "safari_setDate:forKey:", v2, @"ReaderOrTranslationLastActivated");

  [(SafariShared::ReaderAvailabilityController *)v4 _setObject:v2 forBundleParameter:@"ReaderOrTranslationLastActivated"];
}

void sub_1A6CAB34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

char *std::vector<double>::__vallocate[abi:sn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  uint64_t result = (char *)std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::allocate_at_least[abi:sn180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    char v3 = *(void **)(a2 + 8);
    if (v3)
    {
      *(void *)(a2 + 16) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1AD0C4750);
  }
}

void *std::vector<double>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<double>::__vallocate[abi:sn180100](a1, v5 >> 3);
    CFRunLoopTimerRef v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t WBSThemeForNSString(NSString *a1)
{
  unint64_t v1 = a1;
  if ([(NSString *)v1 length])
  {
    if ([(NSString *)v1 isEqualToString:@"White"])
    {
      uint64_t v2 = 0;
    }
    else if ([(NSString *)v1 isEqualToString:@"Sepia"])
    {
      uint64_t v2 = 1;
    }
    else if ([(NSString *)v1 isEqualToString:@"Gray"])
    {
      uint64_t v2 = 2;
    }
    else if ([(NSString *)v1 isEqualToString:@"Night"])
    {
      uint64_t v2 = 3;
    }
    else
    {
      uint64_t v2 = -1;
    }
  }
  else
  {
    uint64_t v2 = -1;
  }

  return v2;
}

void sub_1A6CAB538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAB6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAB940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CABA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CABB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CABBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CABC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CABCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CABDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CABF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CABFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAC0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAC2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAC420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAC4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAC63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAC6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAC86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6CACB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CACCA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CACDFC(_Unwind_Exception *a1)
{
  uint64_t v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1A6CACF24(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6CAD03C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6CAD108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAD194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAD2F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CAD3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::ReaderJSController::evaluateLocalizedStringsScript(SafariShared::ReaderJSController *this, const OpaqueJSContext *a2)
{
  script[3] = *(JSStringRef *)MEMORY[0x1E4F143B8];
  uint64_t v3 = +[WBSReaderResources localizedStringsScriptURL];
  id v8 = 0;
  uint64_t v4 = [NSString stringWithContentsOfURL:v3 usedEncoding:0 error:&v8];
  id v5 = v8;
  if (v4)
  {
    SafariShared::JSUtilities::jsString(v4, script);
    JSEvaluateScript(a2, script[0], 0, 0, 0, 0);
    if (script[0]) {
      JSStringRelease(script[0]);
    }
  }
  else
  {
    CFRunLoopTimerRef v6 = (id)WBS_LOG_CHANNEL_PREFIXReader();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      double v7 = objc_msgSend(v5, "safari_privacyPreservingDescription");
      SafariShared::ReaderJSController::evaluateLocalizedStringsScript(v7, (uint8_t *)script, v6);
    }
  }
}

void sub_1A6CAD530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, JSStringRef string)
{
  id v15 = v14;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::ReaderJSController::evaluateSharedUINormalWorldScript(SafariShared::ReaderJSController *this, const OpaqueJSContext *a2)
{
  +[WBSReaderResources sharedUINormalWorldScriptForContext:a2];
  return JSScriptEvaluate();
}

JSValueRef SafariShared::ReaderJSController::activateWithAnimation(SafariShared::ReaderJSController *this, BOOL a2)
{
  uint64_t v2 = (const OpaqueJSContext *)*((void *)this + 5);
  *(void *)id v5 = JSValueMakeBoolean(v2, a2);
  GlobalObject = JSContextGetGlobalObject(v2);
  return SafariShared::JSUtilities::callJSMethodWithArguments(v2, GlobalObject, (OpaqueJSValue *)"activateWithAnimation", v5, (const OpaqueJSValue *const *)1);
}

JSValueRef SafariShared::ReaderJSController::readerWillEnterBackground(SafariShared::ReaderJSController *this)
{
  unint64_t v1 = (const OpaqueJSContext *)*((void *)this + 5);
  GlobalObject = JSContextGetGlobalObject(v1);
  return SafariShared::JSUtilities::callJSMethodWithArguments(v1, GlobalObject, (OpaqueJSValue *)"readerWillEnterBackground", 0, 0);
}

JSValueRef SafariShared::ReaderJSController::loadArticle(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"loadArticle", 0, 0);
}

JSValueRef SafariShared::ReaderJSController::loadNewArticle(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"loadNewArticle", 0, 0);
}

JSValueRef SafariShared::ReaderJSController::reloadArticle(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"reloadArticlePreservingScrollPosition", 0, 0);
}

void SafariShared::ReaderJSController::setConfiguration(SafariShared::ReaderJSController *this, NSDictionary *a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = (SafariShared::JSUtilities *)*((void *)this + 5);
  v7[0] = SafariShared::JSUtilities::translateNSToJSValue(v4, (const OpaqueJSContext *)v3, v5);
  GlobalObject = JSContextGetGlobalObject(v4);
  SafariShared::JSUtilities::callJSMethodWithArguments(v4, GlobalObject, (OpaqueJSValue *)"setConfiguration", (const char *)v7, (const OpaqueJSValue *const *)1);
}

void sub_1A6CAD770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::ReaderJSController::setReaderIsActive(SafariShared::ReaderJSController *this, BOOL a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const OpaqueJSContext *)*((void *)this + 5);
  v5[0] = JSValueMakeBoolean(v2, a2);
  GlobalObject = JSContextGetGlobalObject(v2);
  return SafariShared::JSUtilities::callJSMethodWithArguments(v2, GlobalObject, (OpaqueJSValue *)"setReaderIsActive", (const char *)v5, (const OpaqueJSValue *const *)1);
}

void SafariShared::ReaderJSController::setArticleLocale(SafariShared::ReaderJSController *this, NSString *a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = (SafariShared::JSUtilities *)*((void *)this + 5);
  v7[0] = SafariShared::JSUtilities::translateNSToJSValue(v4, (const OpaqueJSContext *)v3, v5);
  GlobalObject = JSContextGetGlobalObject(v4);
  SafariShared::JSUtilities::callJSMethodWithArguments(v4, GlobalObject, (OpaqueJSValue *)"setArticleLocale", (const char *)v7, (const OpaqueJSValue *const *)1);
}

void sub_1A6CAD8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::ReaderJSController::setArticleSummary(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  v31[7] = *MEMORY[0x1E4F143B8];
  id v15 = a2;
  uint64_t v16 = a3;
  id v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a8;
  BOOL v22 = *(SafariShared::JSUtilities **)(a1 + 40);
  v31[0] = SafariShared::JSUtilities::translateNSToJSValue(v22, v15, v23);
  v31[1] = SafariShared::JSUtilities::translateNSToJSValue(v22, v16, v24);
  v31[2] = SafariShared::JSUtilities::translateNSToJSValue(v22, v17, v25);
  v31[3] = SafariShared::JSUtilities::translateNSToJSValue(v22, v18, v26);
  v31[4] = SafariShared::JSUtilities::translateNSToJSValue(v22, v19, v27);
  v31[5] = SafariShared::JSUtilities::translateNSToJSValue(v22, v20, v28);
  v31[6] = SafariShared::JSUtilities::translateNSToJSValue(v22, v21, v29);
  GlobalObject = JSContextGetGlobalObject(v22);
  SafariShared::JSUtilities::callJSMethodWithArguments(v22, GlobalObject, (OpaqueJSValue *)"setArticleSummary", (const char *)v31, (const OpaqueJSValue *const *)7);
}

void sub_1A6CADA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::ReaderJSController::setOnDeviceSummaryButtonWithTitle(SafariShared::ReaderJSController *this, NSString *a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = (SafariShared::JSUtilities *)*((void *)this + 5);
  v7[0] = SafariShared::JSUtilities::translateNSToJSValue(v4, (const OpaqueJSContext *)v3, v5);
  GlobalObject = JSContextGetGlobalObject(v4);
  SafariShared::JSUtilities::callJSMethodWithArguments(v4, GlobalObject, (OpaqueJSValue *)"setOnDeviceSummaryButtonWithTitle", (const char *)v7, (const OpaqueJSValue *const *)1);
}

void sub_1A6CADAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::ReaderJSController::nextPageArticleFinder(SafariShared::ReaderJSController *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return *(JSValueRef *)(v1 + 24);
  }
  else {
    return JSValueMakeUndefined(*((JSContextRef *)this + 5));
  }
}

uint64_t SafariShared::ReaderJSController::clearNextPageArticleFinder(SafariShared::ReaderJSController *this)
{
  uint64_t result = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

JSValueRef SafariShared::ReaderJSController::stopLoadingNextPage(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"stopLoadingNextPage", 0, 0);
}

const OpaqueJSValue *SafariShared::ReaderJSController::getArticleScrollPositionAsDictionary(SafariShared::ReaderJSController *this)
{
  uint64_t v1 = (const OpaqueJSContext *)*((void *)this + 5);
  GlobalObject = JSContextGetGlobalObject(v1);
  uint64_t v3 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, GlobalObject, (OpaqueJSValue *)"getArticleScrollPosition", 0, 0);
  if (v3)
  {
    uint64_t v3 = JSValueToObject(v1, v3, 0);
    if (v3)
    {
      SafariShared::JSUtilities::translateJSValueToNS(v1, v3, v4);
      uint64_t v3 = (const OpaqueJSValue *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v3;
}

uint64_t SafariShared::ReaderJSController::cachedTopScrollOffset(SafariShared::ReaderJSController *this)
{
  return 0;
}

uint64_t SafariShared::ReaderJSController::maxDistanceForLoadingNextPage(SafariShared::ReaderJSController *this)
{
  return 0x7FFFFFFFLL;
}

__CFString *SafariShared::ReaderJSController::printingMailingFrameElementId(SafariShared::ReaderJSController *this)
{
  uint64_t v1 = (SafariShared::JSUtilities *)*((void *)this + 5);
  uint64_t v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"printingMailingFrameElementId", 0, 0);
  return SafariShared::JSUtilities::toNSString(v1, v2, 0);
}

JSValueRef SafariShared::ReaderJSController::preparePrintingMailingFrame(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"preparePrintingMailingFrame", 0, 0);
}

const char *SafariShared::ReaderJSController::scriptObjectName(SafariShared::ReaderJSController *this)
{
  return "ReaderJS";
}

char **SafariShared::ReaderJSController::staticFunctions(SafariShared::ReaderJSController *this)
{
  return &SafariShared::ReaderJSController::staticFunctions(void)::staticFunctions;
}

JSValueRef SafariShared::jsArticleScrolled(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id v8 = SafariShared::JSController::jsController(object);
  if (v8) {
    (*(void (**)(void *))(*(void *)v8 + 160))(v8);
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsClearNextPageArticleFinder(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (!a4)
  {
    CFRunLoopTimerContext v10 = v9;
    if (v9)
    {
      uint64_t v11 = v9[6];
      v10[6] = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsRequestDeactivationFromUserAction(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9) {
    (*(void (**)(void *))(*(void *)v9 + 48))(v9);
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsDidChangeNextPageLoadingState(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v11 = v10;
    if (v10)
    {
      BOOL v12 = JSValueToBoolean(this, *a5);
      (*(void (**)(void *, BOOL))(*(void *)v11 + 56))(v11, v12);
    }
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsContentIsReadyForDisplay(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)1 && (uint64_t v11 = v10) != 0)
  {
    (*(void (**)(void *, void))(*(void *)v10 + 184))(v10, 0);
    BOOL v12 = SafariShared::JSUtilities::toNSString(this, *a5, 0);
    (*(void (**)(void *, void *))(*(void *)v11 + 152))(v11, v12);
    JSValueRef Undefined = JSValueMakeUndefined(this);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6CADF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsDoneLoadingReaderPage(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id v8 = SafariShared::JSController::jsController(object);
  if (v8)
  {
    CFRunLoopTimerContext v9 = v8;
    (*(void (**)(void *, uint64_t))(*(void *)v8 + 184))(v8, 1);
    (*(void (**)(void *))(*(void *)v9 + 64))(v9);
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsGoBack(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9) {
    (*(void (**)(void *))(*(void *)v9 + 72))(v9);
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsGoForward(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9) {
    (*(void (**)(void *))(*(void *)v9 + 80))(v9);
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsInitialArticleScrollPosition(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
  {
    return JSValueMakeUndefined(this);
  }
  else
  {
    (*(void (**)(void *))(*(void *)v9 + 168))(v9);
    CFRunLoopTimerContext v10 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
    if ([(OpaqueJSContext *)v10 count]) {
      JSValueRef Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v10, v11);
    }
    else {
      JSValueRef Undefined = JSValueMakeUndefined(this);
    }
    JSValueRef v14 = Undefined;

    return v14;
  }
}

void sub_1A6CAE190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsInitialConfiguration(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
  {
    return JSValueMakeUndefined(this);
  }
  else
  {
    (*(void (**)(void *))(*(void *)v9 + 88))(v9);
    CFRunLoopTimerContext v10 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = SafariShared::JSUtilities::translateNSToJSValue(this, v10, v11);

    return (JSValueRef)v12;
  }
}

void sub_1A6CAE238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsMakeFontAvailableIfNecessary(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)1 && (uint64_t v12 = v10) != 0)
  {
    uint64_t v13 = SafariShared::JSUtilities::translateJSValueToNS(this, *a5, v11);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      (*(void (**)(void *, void *))(*(void *)v12 + 96))(v12, v13);
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6CAE324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsIsInStickyMode(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
  {
    return JSValueMakeUndefined(this);
  }
  else
  {
    char v10 = (*(uint64_t (**)(void *))(*(void *)v9 + 104))(v9);
    return JSValueMakeBoolean(this, v10);
  }
}

JSValueRef SafariShared::jsNextPageArticleFinder(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
  {
    uint64_t v12 = this;
  }
  else
  {
    uint64_t v10 = *((void *)v9 + 6);
    if (v10) {
      return *(JSValueRef *)(v10 + 24);
    }
    uint64_t v12 = (const OpaqueJSContext *)*((void *)v9 + 5);
  }
  return JSValueMakeUndefined(v12);
}

JSValueRef SafariShared::jsNextPageLoadComplete(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)3 && (uint64_t v11 = v10) != 0)
  {
    double v12 = JSValueToNumber(this, *a5, 0);
    uint64_t v13 = (void *)MEMORY[0x1E4F1CB10];
    JSValueRef v14 = SafariShared::JSUtilities::toNSString(this, a5[1], 0);
    id v15 = objc_msgSend(v13, "_web_URLWithDataAsString:", v14);

    uint64_t v16 = SafariShared::JSUtilities::toNSString(this, a5[2], 0);
    (*(void (**)(void *, unint64_t, void *, void *))(*(void *)v11 + 112))(v11, (unint64_t)v12, v15, v16);
    JSValueRef Undefined = JSValueMakeUndefined(this);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6CAE560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsOriginalArticleFinder(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9 || (JSValueRef result = (JSValueRef)(*(uint64_t (**)(void *))(*(void *)v9 + 120))(v9)) == 0)
  {
    return JSValueMakeUndefined(this);
  }
  return result;
}

JSValueRef SafariShared::jsPrepareNextPageFrame(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)1 && (uint64_t v11 = v10) != 0)
  {
    double v12 = SafariShared::JSUtilities::toNSString(this, *a5, 0);
    (*(void (**)(void *, void *))(*(void *)v11 + 128))(v11, v12);
    JSValueRef Undefined = JSValueMakeUndefined(this);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6CAE6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsReaderOperationMode(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
  {
    return JSValueMakeUndefined(this);
  }
  else
  {
    double v10 = (double)(*(int (**)(void *))(*(void *)v9 + 136))(v9);
    return JSValueMakeNumber(this, v10);
  }
}

JSValueRef SafariShared::jsCachedTopScrollOffset(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
  {
    return JSValueMakeUndefined(this);
  }
  else
  {
    double v10 = (double)(*(int (**)(void *))(*(void *)v9 + 192))(v9);
    return JSValueMakeNumber(this, v10);
  }
}

JSValueRef SafariShared::jsMaxDistanceForLoadingNextPage(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
  {
    return JSValueMakeUndefined(this);
  }
  else
  {
    double v10 = (double)(*(int (**)(void *))(*(void *)v9 + 200))(v9);
    return JSValueMakeNumber(this, v10);
  }
}

JSValueRef SafariShared::jsReplaceSimpleTweetsWithRichTweets(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  double v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)1 && (double v12 = v10) != 0)
  {
    uint64_t v13 = SafariShared::JSUtilities::translateJSValueToNS(this, *a5, v11);
    (*(void (**)(void *, void *))(*(void *)v12 + 176))(v12, v13);
    JSValueRef Undefined = JSValueMakeUndefined(this);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6CAE948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsRequestOnDeviceSummary(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9) {
    (*(void (**)(void *))(*(void *)v9 + 216))(v9);
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsDidSetSummary(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  CFRunLoopTimerContext v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9) {
    (*(void (**)(void *))(*(void *)v9 + 224))(v9);
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsReportReaderEvent(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  double v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)2 && (double v12 = v10) != 0)
  {
    uint64_t v13 = SafariShared::JSUtilities::translateJSValueToNS(this, *a5, v11);
    id v15 = SafariShared::JSUtilities::translateJSValueToNS(this, a5[1], v14);
    (*(void (**)(void *, uint64_t, void *))(*(void *)v12 + 232))(v12, [v13 integerValue], v15);
    JSValueRef Undefined = JSValueMakeUndefined(this);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6CAEB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsLog(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFRunLoopTimerContext v9 = (id)WBS_LOG_CHANNEL_PREFIXReader();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = SafariShared::JSUtilities::translateJSValueToNS(this, *a5, v10);
    SafariShared::jsLog(v11, v13, v9);
  }

  return JSValueMakeUndefined(this);
}

void sub_1A6CAEBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSetArticleBaseURLString(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  double v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)1 && (double v12 = v10) != 0)
  {
    uint64_t v13 = SafariShared::JSUtilities::translateJSValueToNS(this, *a5, v11);
    uint64_t v14 = [MEMORY[0x1E4F1CB10] URLWithString:v13];
    (*(void (**)(void *, void *))(*(void *)v12 + 208))(v12, v14);
    JSValueRef Undefined = JSValueMakeUndefined(this);

    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1A6CAECC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

JSClassRef SafariShared::ReaderJSController::staticJSClass(SafariShared::ReaderJSController *this)
{
    return (JSClassRef)SafariShared::ReaderJSController::staticJSClass(void)::jsClass;
  JSClassRef result = SafariShared::JSController::createJSClass(this);
  SafariShared::ReaderJSController::staticJSClass(void)::jsClass = (uint64_t)result;
  return result;
}

id SafariShared::ReaderJSController::fullArticleHTML(SafariShared::ReaderJSController *this)
{
  uint64_t v2 = (const OpaqueJSContext *)*((void *)this + 5);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"ReaderJS.sanitizedFullArticle().outerHTML", &script);
  uint64_t v3 = JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script) {
    JSStringRelease(script);
  }
  if (v3 && JSValueIsString(v2, v3))
  {
    uint64_t v4 = SafariShared::JSUtilities::toNSString(v2, v3, 0);
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

void sub_1A6CAEDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string) {
    JSStringRelease(string);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A6CAF45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id cherokeeFonts(void)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Plantagenet Cherokee" displayName:@"Plantagenet ᏣᎳᎩ"];
  v3[0] = v0;
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1];

  return v1;
}

void sub_1A6CAF5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id gujaratiFonts(void)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Kohinoor Gujarati" displayName:@"કોહિનૂર ગુજરાતી"];
  v6[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Mukta Vaani" displayName:@"મુક્ત વાણી"];
  v6[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Gujarati Sangam MN" displayName:@"ગુજરાતી સંગમ MN"];
  v6[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Gujarati MT" displayName:@"ગુજરાતી MT"];
  uint64_t v6[3] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:4];

  return v4;
}

void sub_1A6CAF6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id punjabiFonts(void)
{
  v8[6] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Mukta Mahee" displayName:@"ਮੁਕਤਾ ਮਾਹੀ"];
  v8[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Lahore Gurmukhi" displayName:@"ਲਾਹੌਰ ਗੁਰਮੁਖੀ"];
  v8[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Tiro Gurmukhi" displayName:@"Tiro ਗੁਰਮੁਖੀ"];
  id v8[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Gurmukhi MN" displayName:@"ਗੁਰਮੁਖੀ MN"];
  v8[3] = v3;
  uint64_t v4 = +[WBSReaderFont fontWithFamilyName:@"Gurmukhi Sangam MN" displayName:@"ਗੁਰਮੁਖੀ ਸੰਗਮ MN"];
  v8[4] = v4;
  id v5 = +[WBSReaderFont fontWithFamilyName:@"Gurmukhi MT" displayName:@"ਗੁਰਮੁਖੀ MT"];
  v8[5] = v5;
  CFRunLoopTimerRef v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:6];

  return v6;
}

void sub_1A6CAF8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id hebrewFonts(void)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Arial Hebrew" displayName:@"Arial עברית"];
  v6[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Raanana" displayName:@"רעננה"];
  v6[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Times New Roman" displayName:0];
  v6[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Tahoma" displayName:0];
  uint64_t v6[3] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:4];

  return v4;
}

void sub_1A6CAFA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id hindiFonts(void)
{
  v9[7] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Kohinoor Devanagari" displayName:@"कोहिनूर देवनागरी"];
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"ITF Devanagari", @"आई॰टी॰एफ़॰ देवनागरी", v0 displayName];
  v9[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Tiro Devanagari Hindi" displayName:@"टीरो देवनागरी हिन्दी"];
  id v9[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Mukta" displayName:@"मुक्त"];
  v9[3] = v3;
  uint64_t v4 = +[WBSReaderFont fontWithFamilyName:@"Shobhika" displayName:@"शोभिका"];
  v9[4] = v4;
  id v5 = +[WBSReaderFont fontWithFamilyName:@"Cambay Devanagari" displayName:@"खंभात"];
  v9[5] = v5;
  CFRunLoopTimerRef v6 = +[WBSReaderFont fontWithFamilyName:@"Devanagari MT" displayName:@"देवनागरी MT"];
  v9[6] = v6;
  double v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:7];

  return v7;
}

void sub_1A6CAFC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id japaneseFonts(void)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Hiragino Kaku Gothic ProN" displayName:@"ヒラギノ角ゴ"];
  v6[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Hiragino Sans W3" displayName:@"ヒラギノ角ゴシック"];
  v6[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Hiragino Maru Gothic ProN" displayName:@"ヒラギノ丸ゴ"];
  v6[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Hiragino Mincho ProN" displayName:@"ヒラギノ明朝"];
  uint64_t v6[3] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:4];

  return v4;
}

void sub_1A6CAFDC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id kannadaFonts(void)
{
  v7[5] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Noto Sans Kannada" displayName:@"Noto Sans ಕನ್ನಡ"];
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Noto Serif Kannada", @"Noto Serif ಕನ್ನಡ", v0 displayName];
  v7[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Tiro Kannada" displayName:@"Tiro ಕನ್ನಡ"];
  void v7[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Kannada MN" displayName:@"ಕನ್ನಡ MN"];
  v7[3] = v3;
  uint64_t v4 = +[WBSReaderFont fontWithFamilyName:@"Kannada Sangam MN" displayName:@"ಕನ್ನಡ ಸಂಗಮ್ MN"];
  v7[4] = v4;
  id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:5];

  return v5;
}

void sub_1A6CAFF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id khmerFonts(void)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Khmer Sangam MN" displayName:@"ខ្មែរ Sangam MN"];
  v3[0] = v0;
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1];

  return v1;
}

void sub_1A6CB0054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id koreanFonts(void)
{
  v5[3] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Apple SD Gothic Neo" displayName:@"산돌고딕 Neo"];
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Nanum Gothic", @"나눔고딕", v0 displayName];
  v5[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Nanum Myeongjo" displayName:@"나눔명조"];
  void v5[2] = v2;
  uint64_t v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:3];

  return v3;
}

void sub_1A6CB0170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id laoFonts(void)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Lao Sangam MN" displayName:@"ລາວ Sangam MN"];
  v3[0] = v0;
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1];

  return v1;
}

void sub_1A6CB024C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id malayalamFonts(void)
{
  v4[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Malayalam Sangam MN" displayName:@"മലയാളം സംഗമ MN"];
  v4[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Malayalam MN" displayName:@"മലയാളം MN"];
  v4[1] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:2];

  return v2;
}

void sub_1A6CB0340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id oriyaFonts(void)
{
  v5[3] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Noto Sans Oriya" displayName:@"Noto Sans ଓଡ଼ିଆ"];
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Oriya Sangam MN", @"ଓଡ଼ିଆ ସଙ୍ଗମ MN", v0 displayName];
  v5[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Oriya MN" displayName:@"ଓଡ଼ିଆ MN"];
  void v5[2] = v2;
  uint64_t v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:3];

  return v3;
}

void sub_1A6CB0468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sinhalaFonts(void)
{
  v4[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Sinhala Sangam MN" displayName:@"සිංහල සංගම MN"];
  v4[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Sinhala MN" displayName:@"සිංහල MN"];
  v4[1] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:2];

  return v2;
}

void sub_1A6CB0574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id tamilFonts(void)
{
  v7[5] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Tamil Sangam MN" displayName:@"தமிழ் சங்கம் MN"];
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Tamil MN", @"தமிழ் MN", v0 displayName];
  v7[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Tiro Tamil" displayName:@"Tiro தமிழ்"];
  void v7[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Mukta Malar" displayName:@"முக்த மலர்"];
  v7[3] = v3;
  uint64_t v4 = +[WBSReaderFont fontWithFamilyName:@"InaiMathi" displayName:@"இணைமதி"];
  v7[4] = v4;
  id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:5];

  return v5;
}

void sub_1A6CB06F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id teluguFonts(void)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Kohinoor Telugu" displayName:@"కోహినోరు తెలుగు"];
  v6[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Tiro Telugu" displayName:@"Tiro తెలుగు"];
  v6[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Telugu MN" displayName:@"తెలుగు MN"];
  v6[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Telugu Sangam MN" displayName:@"తెలుగు సంగం MN"];
  uint64_t v6[3] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:4];

  return v4;
}

void sub_1A6CB0870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id thaiFonts(void)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Thonburi" displayName:@"ธนบุรี"];
  v6[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Tahoma" displayName:0];
  v6[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Sukhumvit Set" displayName:@"สุขุมวิท"];
  v6[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Silom" displayName:@"สีลม"];
  uint64_t v6[3] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:4];

  return v4;
}

void sub_1A6CB09DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id simplifiedChineseFonts(void)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"PingFang SC" displayName:@"苹方"];
  v6[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Songti SC" displayName:@"宋体"];
  v6[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Kaiti SC" displayName:@"楷体"];
  v6[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Yuanti SC" displayName:@"圆体"];
  uint64_t v6[3] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:4];

  return v4;
}

void sub_1A6CB0B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id traditionalChineseFonts(void)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"PingFang TC" displayName:@"蘋方"];
  v6[0] = v0;
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Songti TC" displayName:@"宋體"];
  v6[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Kaiti TC" displayName:@"楷體"];
  v6[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Yuanti TC" displayName:@"圓體"];
  uint64_t v6[3] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:4];

  return v4;
}

void sub_1A6CB0CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id unifiedCanadianSyllabicsFonts(void)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Euphemia UCAS" displayName:0];
  v3[0] = v0;
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1];

  return v1;
}

void sub_1A6CB0DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id urduFonts(void)
{
  v7[5] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont fontWithFamilyName:@"Noto Nastaliq Urdu" displayName:@"نوٹو نستعلیق"];
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Geeza Pro", @" گیزہ پرو", v0 displayName];
  v7[1] = v1;
  uint64_t v2 = +[WBSReaderFont systemFontWithDisplayName:@"سان فرانسسکو"];
  void v7[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Times New Roman" displayName:@" ٹائمز نیو رومن"];
  v7[3] = v3;
  uint64_t v4 = +[WBSReaderFont fontWithFamilyName:@"Myriad Arabic" displayName:@"Myriad عربي"];
  v7[4] = v4;
  id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:5];

  return v5;
}

void sub_1A6CB0F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id defaultFonts(void)
{
  v12[9] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[WBSReaderFont systemFont];
  uint64_t v1 = +[WBSReaderFont fontWithFamilyName:@"Athelas", 0, v0 displayName];
  v12[1] = v1;
  uint64_t v2 = +[WBSReaderFont fontWithFamilyName:@"Charter" displayName:0];
  _OWORD v12[2] = v2;
  uint64_t v3 = +[WBSReaderFont fontWithFamilyName:@"Georgia" displayName:0];
  v12[3] = v3;
  uint64_t v4 = +[WBSReaderFont fontWithFamilyName:@"Iowan Old Style" displayName:@"Iowan"];
  v12[4] = v4;
  id v5 = +[WBSReaderFont fontWithFamilyName:@"Palatino" displayName:0];
  v12[5] = v5;
  CFRunLoopTimerRef v6 = +[WBSReaderFont fontWithFamilyName:@"Seravek" displayName:0];
  v12[6] = v6;
  double v7 = +[WBSReaderFont fontWithFamilyName:@"Times New Roman" displayName:0];
  v12[7] = v7;
  id v8 = +[WBSReaderFont systemSerifFont];
  v12[8] = v8;
  CFRunLoopTimerContext v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:9];

  double v10 = [v9 sortedArrayUsingComparator:&__block_literal_global_96];

  return v10;
}

void sub_1A6CB1144(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1A6CB1270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL12defaultFontsv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = [a2 displayName];
  CFRunLoopTimerRef v6 = [v4 displayName];
  uint64_t v7 = [v5 localizedCaseInsensitiveCompare:v6];

  return v7;
}

void sub_1A6CB15F8(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6CB17F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB186C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WBSReloadReadingListWidget()
{
  uint64_t v0 = WBS_LOG_CHANNEL_PREFIXWidgets();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_1A6B5F000, v0, OS_LOG_TYPE_INFO, "Requesting reload of Reading List widget", (uint8_t *)v7, 2u);
  }
  uint64_t v8 = 0;
  CFRunLoopTimerContext v9 = &v8;
  uint64_t v10 = 0x2050000000;
  uint64_t v1 = (void *)getCHSTimelineControllerClass_softClass;
  uint64_t v11 = getCHSTimelineControllerClass_softClass;
  if (!getCHSTimelineControllerClass_softClass)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __getCHSTimelineControllerClass_block_invoke;
    v7[3] = &unk_1E5C8C9B8;
    v7[4] = &v8;
    __getCHSTimelineControllerClass_block_invoke((uint64_t)v7);
    uint64_t v1 = (void *)v9[3];
  }
  uint64_t v2 = v1;
  _Block_object_dispose(&v8, 8);
  id v3 = [v2 alloc];
  id v4 = (void *)[v3 initWithExtensionBundleIdentifier:*MEMORY[0x1E4F981C8] kind:@"ReadingListWidget"];
  id v5 = [v4 reloadTimelineWithReason:@"new data"];
  if (v5)
  {
    CFRunLoopTimerRef v6 = WBS_LOG_CHANNEL_PREFIXWidgets();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      WBSReloadReadingListWidget_cold_1(v6, v5);
    }
  }
}

void sub_1A6CB1B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCHSTimelineControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!ChronoServicesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    void v3[3] = __ChronoServicesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5C9F1F8;
    uint64_t v5 = 0;
    ChronoServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ChronoServicesLibraryCore_frameworkLibrary) {
    __getCHSTimelineControllerClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("CHSTimelineController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCHSTimelineControllerClass_block_invoke_cold_2();
  }
  getCHSTimelineControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ChronoServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ChronoServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1A6CB2558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB25F8(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A6CB26FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB2838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB2928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB2A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB2AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB2CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB2ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB2FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB3064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB3140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB31D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB32CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB3378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB3F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB405C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB4130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB4234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB447C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CB49BC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6CB5CC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A6CB6F74(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6CB8198(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A6CB90F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6CB9DC8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6CBA74C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6CBB1CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6CBC2AC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6CBD2C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6CBE204(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A6CBF2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CBF480(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1A6CC0060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC0344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC0D08(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1A6CC18F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC1B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC1CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC1DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC1F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC20AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC22CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC24FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC2728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC2884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t WBSSafariSandboxBrokerInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EFC4C318];
}

uint64_t WBSSafariSandboxBrokerInterfaceWithProtocol(uint64_t a1)
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:a1];
}

void sub_1A6CC4B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6CC5058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC5138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC51A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC53CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC5850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC5AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC5D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC6320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC64D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC6868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC6AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC6C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC6DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  SafariShared::ScopeExitHandler::~ScopeExitHandler((void (***)(void))va);
  _Unwind_Resume(a1);
}

void sub_1A6CC6F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC710C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC72C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  SafariShared::ScopeExitHandler::~ScopeExitHandler((void (***)(void))va);
  _Unwind_Resume(a1);
}

id ___ZL37searchSuggestionsFromQuerySuggestionsP7NSArrayIP18WBSQuerySuggestionEP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 type]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 5;
  }
  id v5 = objc_alloc(MEMORY[0x1E4F9A3C8]);
  uint64_t v6 = [v3 title];
  uint64_t v7 = (void *)[v5 initWithSuggestion:v6 query:*(void *)(a1 + 32) score:v4 type:0.0];

  uint64_t v8 = [v3 identifier];
  [v7 setTopicIdentifier:v8];

  return v7;
}

void sub_1A6CC7464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::ScopeExitHandler::~ScopeExitHandler(void (***this)(void))
{
  uint64_t v2 = *this;
  if (v2)
  {
    v2[2]();
    id v3 = *this;
  }
  else
  {
    id v3 = 0;
  }
}

void sub_1A6CC74E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC7610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC7714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC784C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC78C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC79CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC7AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC7B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC7C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC7D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC90D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC9338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v16);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A6CC9484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC94FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC95F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC9788(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A6CC98BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC9980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC9B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC9D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CC9E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CCA150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CCA42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CCA65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CFArrayRef WBSSecIdentityCopySSLClientAuthenticationChain(__SecIdentity *a1)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  SecPolicyRef SSL = SecPolicyCreateSSL(0, 0);
  if (!SSL) {
    return 0;
  }
  SecPolicyRef v3 = SSL;
  SecCertificateRef certificateRef = 0;
  CFArrayRef v4 = 0;
  if (!SecIdentityCopyCertificate(a1, &certificateRef))
  {
    SecCertificateRef v5 = certificateRef;
    v13[0] = certificateRef;
    uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:1];

    SecTrustRef trust = 0;
    CFArrayRef v4 = 0;
    if (!SecTrustCreateWithCertificates(v6, v3, &trust))
    {
      CFArrayRef v4 = SecTrustCopyCertificateChain(trust);
      SecTrustResultType result = kSecTrustResultInvalid;
      if (v4 && !SecTrustGetTrustResult(trust, &result) && result == kSecTrustResultUnspecified)
      {
        MutableCopy = CFArrayCreateMutableCopy(0, 0, v4);
        CFIndex Count = CFArrayGetCount(v4);
        CFArrayRemoveValueAtIndex(MutableCopy, Count - 1);
        CFRelease(v4);
        CFArrayRef v4 = MutableCopy;
      }
      CFRelease(trust);
    }
  }
  CFRelease(v3);
  return v4;
}

void sub_1A6CCAE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<long long,void *> *>>(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[2];
      id v8[2] = v9;
      uint64_t v10 = (void *)*v8;
      v8[1] = v9;
      uint64_t inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (void *)*a2;
      uint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      double v12 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_multi<long long const&>(a1, a2 + 2);
      a2 = (void *)*a2;
    }
  }
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_multi<long long const&>(void *a1, unint64_t *a2)
{
  CFArrayRef v4 = operator new(0x18uLL);
  unint64_t v5 = *a2;
  v4[2] = *a2;
  void *v4 = 0;
  v4[1] = v5;
  uint64_t inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1A6CCB03C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

id coreSpotlightBookmarksDonationIdentifier()
{
  if (coreSpotlightBookmarksDonationIdentifier_once != -1) {
    dispatch_once(&coreSpotlightBookmarksDonationIdentifier_once, &__block_literal_global_362);
  }
  uint64_t v0 = (void *)coreSpotlightBookmarksDonationIdentifier_identifier;
  return v0;
}

void sub_1A6CCD374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1A6CCE908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1A6CCEC94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A6CCED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1A6CCEF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void __coreSpotlightBookmarksDonationIdentifier_block_invoke()
{
  uint64_t v0 = NSString;
  objc_msgSend(MEMORY[0x1E4F28B50], "safari_safariApplicationPlatformBundleIdentifier");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 stringWithFormat:@"%@.BookmarksDonation", v3];
  uint64_t v2 = (void *)coreSpotlightBookmarksDonationIdentifier_identifier;
  coreSpotlightBookmarksDonationIdentifier_identifier = v1;
}

unsigned char *OUTLINED_FUNCTION_4_4(unsigned char *result, unsigned char *a2)
{
  *SecTrustResultType result = 0;
  *a2 = 0;
  return result;
}

void OUTLINED_FUNCTION_6_0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_1A6CD00CC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t indexOfSectionWithIdentifier(void *a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __indexOfSectionWithIdentifier_block_invoke;
  v7[3] = &unk_1E5CA0208;
  id v8 = v3;
  id v4 = v3;
  uint64_t v5 = [a1 indexOfObjectPassingTest:v7];

  return v5;
}

uint64_t __indexOfSectionWithIdentifier_block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

__CFString *titleForNewTabPosition(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_1E5CA04C0[a1];
  }
}

void sub_1A6CD53C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

double WBSHistoryTopicScore(unint64_t a1, double a2, double a3)
{
  float v3 = a3 - a2;
  return sqrt((double)a1) * powf(1.0, v3);
}

uint64_t WBSTopSitesMinimumVisitCountThreshold(unint64_t a1)
{
  unint64_t v1 = (unint64_t)(float)((float)a1 * 0.011);
  if (v1 <= 3) {
    unint64_t v1 = 3;
  }
  if (v1 >= 0xF) {
    return 15;
  }
  else {
    return v1;
  }
}

float WBSTopSitesScore()
{
  return WBSTopSitesScoreForCaching();
}

float WBSTopSitesScoreForCaching()
{
  CFStringRef v0 = (const __CFString *)MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  double v16 = v15;
  double v18 = v17;
  CFStringRef v19 = v0;
  unint64_t Length = CFStringGetLength(v0);
  if (systemEightBitStringEncoding(void)::onceToken != -1) {
    dispatch_once(&systemEightBitStringEncoding(void)::onceToken, &__block_literal_global_110);
  }
  CStringPtr = CFStringGetCStringPtr(v19, systemEightBitStringEncoding(void)::encoding);
  if (!CStringPtr)
  {
    CharactersPtr = CFStringGetCharactersPtr(v19);
    if (!CharactersPtr)
    {
      v93 = (WTF *)v94;
      uint64_t v35 = (UniChar *)v94;
      if (Length >= 0x801)
      {
        if (Length >> 31)
        {
LABEL_153:
          __break(0xC471u);
          JUMPOUT(0x1A6CD6D4CLL);
        }
        uint64_t v35 = (UniChar *)WTF::fastMalloc((WTF *)(2 * Length));
        v93 = (WTF *)v35;
      }
      v95.location = 0;
      v95.length = Length;
      CFStringGetCharacters(v19, v95, v35);
      unint64_t v22 = 0;
      if (Length)
      {
        uint64_t v37 = v93;
        do
        {
          int v39 = *(unsigned __int16 *)v37;
          uint64_t v37 = (WTF *)((char *)v37 + 2);
          int v38 = v39;
          if (Length == 1) {
            uint64_t v40 = 3;
          }
          else {
            uint64_t v40 = 4;
          }
          if (v22 == 2) {
            unint64_t v41 = v40;
          }
          else {
            unint64_t v41 = v22 + 1;
          }
          if (v38 != 47) {
            unint64_t v41 = v22;
          }
          if (v38 == 63) {
            unint64_t v41 = v22 + 1;
          }
          if (v38 == 38) {
            unint64_t v42 = v22 + 1;
          }
          else {
            unint64_t v42 = v22;
          }
          if (v38 == 35) {
            unint64_t v42 = v22 + 1;
          }
          if (v38 <= 46) {
            unint64_t v22 = v42;
          }
          else {
            unint64_t v22 = v41;
          }
          --Length;
        }
        while (Length);
      }
      if (v94 != (unsigned char *)v93 && v93) {
        WTF::fastFree(v93, v36);
      }
      goto LABEL_77;
    }
    if (Length)
    {
      unint64_t v22 = 0;
      do
      {
        int v30 = *CharactersPtr++;
        int v29 = v30;
        if (Length == 1) {
          uint64_t v31 = 3;
        }
        else {
          uint64_t v31 = 4;
        }
        if (v22 == 2) {
          unint64_t v32 = v31;
        }
        else {
          unint64_t v32 = v22 + 1;
        }
        if (v29 != 47) {
          unint64_t v32 = v22;
        }
        if (v29 == 63) {
          unint64_t v32 = v22 + 1;
        }
        if (v29 == 38) {
          unint64_t v33 = v22 + 1;
        }
        else {
          unint64_t v33 = v22;
        }
        if (v29 == 35) {
          unint64_t v33 = v22 + 1;
        }
        if (v29 <= 46) {
          unint64_t v22 = v33;
        }
        else {
          unint64_t v22 = v32;
        }
        --Length;
      }
      while (Length);
      goto LABEL_77;
    }
LABEL_49:
    float v34 = 1.0;
    goto LABEL_80;
  }
  if (!Length) {
    goto LABEL_49;
  }
  unint64_t v22 = 0;
  do
  {
    int v24 = *(unsigned __int8 *)CStringPtr++;
    int v23 = v24;
    if (Length == 1) {
      uint64_t v25 = 3;
    }
    else {
      uint64_t v25 = 4;
    }
    if (v22 == 2) {
      unint64_t v26 = v25;
    }
    else {
      unint64_t v26 = v22 + 1;
    }
    if (v23 != 47) {
      unint64_t v26 = v22;
    }
    if (v23 == 63) {
      unint64_t v26 = v22 + 1;
    }
    if (v23 == 38) {
      unint64_t v27 = v22 + 1;
    }
    else {
      unint64_t v27 = v22;
    }
    if (v23 == 35) {
      unint64_t v27 = v22 + 1;
    }
    if (v23 <= 46) {
      unint64_t v22 = v27;
    }
    else {
      unint64_t v22 = v26;
    }
    --Length;
  }
  while (Length);
LABEL_77:
  float v34 = 1.0;
  unint64_t v43 = v22 - 4;
  if (v22 >= 4)
  {
    float v34 = 0.25;
    if (v43 <= 5) {
      float v34 = flt_1A6D6EFA0[v43];
    }
  }
LABEL_80:
  if (v4) {
    float *v4 = v34;
  }
  +[WBSHistoryVisit weightedVisitCountFromScore:v14];
  float v45 = v44;
  if (v6 | v10)
  {
    if (v10)
    {
      if (v10 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1A6CD6D5CLL);
      }
      int64_t v46 = (WTF *)WTF::fastMalloc((WTF *)(4 * v10));
      for (uint64_t i = 0; i != v10; ++i)
      {
        +[WBSHistoryVisit weightedVisitCountFromScore:*(unsigned int *)(v12 + 4 * i)];
        if (v10 == i) {
          goto LABEL_153;
        }
        *((_DWORD *)v46 + i) = v48;
      }
      if (v6) {
        goto LABEL_89;
      }
    }
    else
    {
      int64_t v46 = 0;
      if (v6)
      {
LABEL_89:
        if (v6 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x1A6CD6D64);
        }
        long long v49 = (WTF *)WTF::fastMalloc((WTF *)(4 * v6));
        for (uint64_t j = 0; j != v6; ++j)
        {
          +[WBSHistoryVisit weightedVisitCountFromScore:*(unsigned int *)(v8 + 4 * j)];
          if (v6 == j)
          {
            __break(0xC471u);
            JUMPOUT(0x1A6CD6D54);
          }
          *((_DWORD *)v49 + j) = v51;
        }
LABEL_98:
        float v54 = v18;
        if (v10)
        {
          float v55 = *(float *)v46;
          float v56 = v16 - v54;
          float v57 = (float)(v55 * powf(1.0, v56)) + 0.0;
        }
        else
        {
          float v57 = 0.0;
        }
        float v58 = floorf(v54 / 86400.0) * 86400.0 + 43200.0;
        if (v10 >= 2)
        {
          unint64_t v59 = v10 - 1;
          long long v60 = (float *)((char *)v46 + 4);
          do
          {
            float v58 = v58 + -86400.0;
            float v61 = *v60++;
            float v62 = v16 - v58;
            float v57 = v57 + (float)(v61 * powf(1.0, v62));
            --v59;
          }
          while (v59);
        }
        if (v6)
        {
          float v63 = v58 + 259200.0;
          float v64 = 0.0;
          uint64_t v65 = (float *)v49;
          unint64_t v66 = v6;
          do
          {
            float v63 = v63 + -604800.0;
            float v67 = *v65++;
            float v68 = v16 - v63;
            float v64 = v64 + (float)(v67 * powf(1.0, v68));
            --v66;
          }
          while (v66);
        }
        else
        {
          float v64 = 0.0;
        }
        float v69 = 0.5;
        float v70 = 0.5;
        if (v10)
        {
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          float v73 = 0.0;
          do
          {
            float v74 = *((float *)v46 + v71);
            BOOL v75 = v74 == 0.0;
            if (v74 == 0.0) {
              float v74 = -0.0;
            }
            float v73 = v73 + v74;
            if (!v75) {
              uint64_t v72 = v71;
            }
            ++v71;
          }
          while (v10 != v71);
          float v70 = 0.5;
          if (v72)
          {
            if (v73 == 0.0)
            {
              float v70 = 0.0;
              if (v6)
              {
LABEL_125:
                uint64_t v81 = 0;
                uint64_t v82 = 0;
                float v83 = 0.0;
                do
                {
                  float v84 = *((float *)v49 + v81);
                  BOOL v85 = v84 == 0.0;
                  if (v84 == 0.0) {
                    float v84 = -0.0;
                  }
                  float v83 = v83 + v84;
                  if (!v85) {
                    uint64_t v82 = v81;
                  }
                  ++v81;
                }
                while (v6 != v81);
                if (v82)
                {
                  if (v83 == 0.0)
                  {
                    float v69 = 0.0;
                  }
                  else
                  {
                    if ((unint64_t)(v82 + 1) > 1) {
                      uint64_t v87 = v82 + 1;
                    }
                    else {
                      uint64_t v87 = 1;
                    }
                    float v88 = 0.0;
                    v89 = (float *)v49;
                    do
                    {
                      float v90 = *v89++;
                      float v86 = 1.0 / (double)v6;
                      float v88 = v88 + (float)((float)((float)(v90 / v83) - v86) * (float)((float)(v90 / v83) - v86));
                      --v87;
                    }
                    while (v87);
                    float v69 = 0.09531 / logf((float)(v88 / (float)v6) + 1.1);
                  }
                }
              }
LABEL_142:
              float v53 = logf(v45) * (float)((float)(v57 * v70) + (float)(v64 * v69));
              if (v2) {
                float *v2 = v53;
              }
              if (v49) {
                WTF::fastFree(v49, v91);
              }
              if (v46) {
                WTF::fastFree(v46, v91);
              }
              return v34 * v53;
            }
            if ((unint64_t)(v72 + 1) > 1) {
              uint64_t v77 = v72 + 1;
            }
            else {
              uint64_t v77 = 1;
            }
            float v78 = 0.0;
            v79 = (float *)v46;
            do
            {
              float v80 = *v79++;
              float v76 = 1.0 / (double)v10;
              float v78 = v78 + (float)((float)((float)(v80 / v73) - v76) * (float)((float)(v80 / v73) - v76));
              --v77;
            }
            while (v77);
            float v70 = 0.09531 / logf((float)(v78 / (float)v10) + 1.1);
          }
        }
        if (v6) {
          goto LABEL_125;
        }
        goto LABEL_142;
      }
    }
    long long v49 = 0;
    goto LABEL_98;
  }
  float v52 = v16 - v18;
  float v53 = powf(1.0, v52) * v44;
  if (v2) {
    float *v2 = v53;
  }
  return v34 * v53;
}

void sub_1A6CD6D70(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (v11 != a10)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WBSTopSitesCachedScoreIsStale(double a1, double a2, double a3)
{
  return a2 - a3 >= 10800.0 || a1 > a3;
}

float WBSTopSitesScoreWithCachedValues(float a1, float a2)
{
  return a1 * a2;
}

uint64_t ___ZL28systemEightBitStringEncodingv_block_invoke()
{
  uint64_t result = CFStringGetFastestEncoding(@" ");
  systemEightBitStringEncoding(void)::encoding = result;
  return result;
}

void *WBSSetIsStringForUserTypedDomainExpansionInHistoryFunction(void *result)
{
  isStringForUserTypedDomainExpansionInHistory = result;
  return result;
}

uint64_t WBSUnifiedFieldInputTypeForString(void *a1)
{
  id v1 = a1;
  if (WBSUnifiedFieldInputTypeForString::token != -1) {
    dispatch_once(&WBSUnifiedFieldInputTypeForString::token, &__block_literal_global_111);
  }
  uint64_t v2 = (id *)pthread_getspecific(WBSUnifiedFieldInputTypeForString::cacheKey);
  float v3 = v2;
  if (!v2) {
    operator new();
  }
  if (![*v2 isEqualToString:v1])
  {
    uint64_t v5 = [v1 copy];
    id v6 = *v3;
    id *v3 = (id)v5;

    id v45 = v1;
    uint64_t v7 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
    uint64_t v8 = [v45 stringByTrimmingCharactersInSet:v7];
    if ([v8 length])
    {
      objc_msgSend(v8, "safari_stringByRemovingUnnecessaryCharactersFromUserTypedURLString");
      id v9 = (id)objc_claimAutoreleasedReturnValue();

      if ([v9 length])
      {
        uint64_t v10 = [v9 rangeOfCharacterFromSet:v7];
        unint64_t v11 = [v9 rangeOfString:@"/"];
        if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_10;
        }
        CFStringRef v19 = [v9 substringToIndex:v10];
        substringBeforeFirstColon(v19);
        id v20 = (id)objc_claimAutoreleasedReturnValue();
        if (![v20 length]) {
          goto LABEL_26;
        }
        id v21 = v20;
        {
          isWhitespaceAllowingScheme(NSString *)::whitespaceAllowingSchemes = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"data", @"file", @"ftp", @"ftps", @"http", @"https", @"javascript", 0);
        }
        if (![v21 length])
        {

          goto LABEL_32;
        }
        char v22 = [(id)isWhitespaceAllowingScheme(NSString *)::whitespaceAllowingSchemes containsObject:v21];

        if (v22)
        {
LABEL_26:
          uint64_t v23 = [v20 length];
          if (!v23 || v23 != [(NSString *)v19 length] - 1)
          {
            if ([(NSString *)v19 safari_looksLikeAbsoluteURLString])
            {
              uint64_t v4 = 1;
              goto LABEL_33;
            }
            if ([(NSString *)v19 rangeOfString:@"?"] != 0x7FFFFFFFFFFFFFFFLL)
            {

LABEL_10:
              if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
                goto LABEL_41;
              }
              id v12 = v9;
              uint64_t v13 = (uint64_t)v12;
              if ([v12 length])
              {
                uint64_t v14 = [v12 rangeOfString:@":" options:4];

                uint64_t v13 = (uint64_t)v12;
                if (v14 == 0x7FFFFFFFFFFFFFFFLL) {
                  goto LABEL_40;
                }
                unint64_t v15 = [v12 length] - 1;
                uint64_t v13 = (uint64_t)v12;
                if (v14 == v15) {
                  goto LABEL_40;
                }
                unint64_t v16 = v14 + 1;
                uint64_t v17 = MEMORY[0x1E4F14390];
                while (v16 <= v15)
                {
                  unsigned int v18 = [v12 characterAtIndex:v16];
                  if (v18 <= 0xFF)
                  {
                    ++v16;
                    if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x400) != 0) {
                      continue;
                    }
                  }
                  uint64_t v13 = (uint64_t)v12;
                  goto LABEL_40;
                }
                uint64_t v13 = [v12 substringToIndex:v14];
              }

LABEL_40:
              id v9 = (id)v13;
LABEL_41:
              id v9 = v9;
              if ([v9 length]
                && (uint64_t v25 = [v9 length] - 1, objc_msgSend(v9, "characterAtIndex:", v25) == 58))
              {
                uint64_t ColonIndex = firstColonIndex((NSString *)v9);

                if (ColonIndex == v25)
                {
LABEL_51:
                  uint64_t v31 = [v9 rangeOfString:@"."];
                  uint64_t v32 = v31;
                  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    if (v31
                      && v31 != 0x7FFFFFFFFFFFFFFFLL
                      && (uint64_t v46 = 0, (determineUnifiedFieldInputTypeFromApparentHostString(v9, &v46) & 1) != 0))
                    {
                      uint64_t v4 = v46;
                    }
                    else if ([v9 caseInsensitiveCompare:@"localhost"])
                    {
                      uint64_t v4 = 3;
                    }
                    else
                    {
                      uint64_t v4 = 2;
                    }
                    goto LABEL_35;
                  }
                  id v9 = v9;
                  {
                    uint64_t v34 = looksLikeMath(NSString *)::notMathCharacters;
                  }
                  else
                  {
                    uint64_t v34 = ___ZL13looksLikeMathP8NSString_block_invoke();
                    looksLikeMath(NSString *)::notMathCharacters = v34;
                  }
                  uint64_t v35 = [v9 rangeOfCharacterFromSet:v34];

                  if (v35 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    uint64_t v4 = 3;
                    goto LABEL_35;
                  }
                  CFStringRef v19 = 0;
                  if (v32)
                  {
                    if (v32 != 0x7FFFFFFFFFFFFFFFLL)
                    {
                      CFStringRef v19 = [v9 substringToIndex:v11];
                      uint64_t v46 = 0;
                      if (determineUnifiedFieldInputTypeFromApparentHostString(v19, &v46))
                      {
                        uint64_t v4 = v46;
                        goto LABEL_34;
                      }
                    }
                  }
                  unint64_t v38 = [v9 rangeOfString:@"/" options:4];
                  if (v38 != [v9 length] - 1)
                  {
                    unint64_t v39 = [v9 rangeOfString:@"#" options:4];
                    if (v39 == 0x7FFFFFFFFFFFFFFFLL || v39 <= v38)
                    {
                      unint64_t v40 = [v9 rangeOfString:@"?" options:4];
                      if ((v40 == 0x7FFFFFFFFFFFFFFFLL || v40 <= v11)
                        && ([v9 hasPrefix:@"localhost/"] & 1) == 0)
                      {
                        unint64_t v41 = (uint64_t (*)(NSString *))isStringForUserTypedDomainExpansionInHistory;
                        if (!isStringForUserTypedDomainExpansionInHistory) {
                          goto LABEL_88;
                        }
                        if (!v19)
                        {
                          uint64_t v42 = [v9 substringToIndex:v11];
                          unint64_t v41 = (uint64_t (*)(NSString *))isStringForUserTypedDomainExpansionInHistory;
                          CFStringRef v19 = (NSString *)v42;
                        }
                        if ((v41(v19) & 1) == 0)
                        {
LABEL_88:
                          uint64_t v4 = 3;
                          goto LABEL_34;
                        }
                      }
                    }
                  }
LABEL_90:
                  uint64_t v4 = 2;
                  goto LABEL_34;
                }
              }
              else
              {
              }
              if (!objc_msgSend(v9, "safari_looksLikeAbsoluteURLString")) {
                goto LABEL_51;
              }
              unint64_t v27 = [MEMORY[0x1E4F29088] componentsWithString:v45];
              CFStringRef v19 = v27;
              if (v27)
              {
                unint64_t v28 = [(NSString *)v27 scheme];
                int v29 = [v28 isEqualToString:@"about"];

                if (v29)
                {
                  int v30 = [(NSString *)v19 path];
                  if ([v30 isEqualToString:@"blank"])
                  {
                  }
                  else
                  {
                    unint64_t v43 = [(NSString *)v19 path];
                    int v44 = [v43 isEqualToString:@"blank/"];

                    if (!v44) {
                      goto LABEL_88;
                    }
                  }
                  goto LABEL_90;
                }
              }
              substringBeforeFirstColon((NSString *)v9);
              id v20 = (id)objc_claimAutoreleasedReturnValue();
              if (v11 == 0x7FFFFFFFFFFFFFFFLL)
              {
                {
                  isSchemeThatDoesNotRequireSlashInURL(NSString *)::schemesThatDoNotRequireSlashInURL = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"data", @"facetime", @"gamecenter", @"irc", @"javascript", @"mailto", @"man", @"message", @"radar", @"spotify", @"tel", 0);
                }
                if ([v20 length])
                {
                  int v33 = [(id)isSchemeThatDoesNotRequireSlashInURL(NSString *)::schemesThatDoNotRequireSlashInURL containsObject:v20];

                  if (v33) {
                    uint64_t v4 = 1;
                  }
                  else {
                    uint64_t v4 = 3;
                  }
                }
                else
                {

                  uint64_t v4 = 3;
                }
              }
              else
              {
                {
                  isSearchPrefixQualifier(NSString *)::searchQualifiersThatAreUsedLikeSchemes = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"site", @"link", @"related", @"cache", 0);
                }
                if ([v20 length])
                {
                  uint64_t v36 = (void *)isSearchPrefixQualifier(NSString *)::searchQualifiersThatAreUsedLikeSchemes;
                  uint64_t v37 = [v20 lowercaseString];
                  LODWORD(v36) = [v36 containsObject:v37];

                  uint64_t v4 = v36 ^ 1;
                }
                else
                {
                  uint64_t v4 = 1;
                }
              }
LABEL_33:

LABEL_34:
              goto LABEL_35;
            }
          }
        }
LABEL_32:
        uint64_t v4 = 0;
        goto LABEL_33;
      }
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = 4;
      id v9 = v8;
    }
LABEL_35:

    v3[1] = (id)v4;
    goto LABEL_36;
  }
  uint64_t v4 = (uint64_t)v3[1];
LABEL_36:

  return v4;
}

void sub_1A6CD8310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t __WBSUnifiedFieldInputTypeForString_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&WBSUnifiedFieldInputTypeForString::cacheKey, (void (__cdecl *)(void *))WBSUnifiedFieldInputTypeForString::Cache::destroy);
}

id *WBSUnifiedFieldInputTypeForString::Cache::destroy(id *this, void *a2)
{
  if (this)
  {

    JUMPOUT(0x1AD0C4750);
  }
  return this;
}

id substringBeforeFirstColon(NSString *a1)
{
  id v1 = a1;
  uint64_t ColonIndex = firstColonIndex(v1);
  if (ColonIndex == 0x7FFFFFFFFFFFFFFFLL)
  {
    float v3 = 0;
  }
  else
  {
    float v3 = [(NSString *)v1 substringToIndex:ColonIndex];
  }

  return v3;
}

void sub_1A6CD84F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t determineUnifiedFieldInputTypeFromApparentHostString(void *a1, void *a2)
{
  id v3 = a1;
  if ([v3 length])
  {
    uint64_t v4 = [v3 lowercaseString];
    uint64_t v5 = objc_msgSend(v4, "safari_possibleTopLevelDomainCorrectionForUserTypedString");
    if ([v5 length])
    {
      id v6 = v5;

      uint64_t v4 = v6;
    }
    uint64_t v7 = objc_msgSend(v4, "safari_highLevelDomainFromHost");
    if ([v7 length])
    {

LABEL_6:
      *a2 = 2 * ([v4 rangeOfString:@"@"] == 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v8 = 1;
LABEL_15:

      goto LABEL_16;
    }
    id v9 = v4;
    {
      hasWellKnownButUnofficialTopLevelDomainSuffix(NSString *)::unofficialTopLevelDomainSuffixes = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"private", @"box", @"local", 0);
    }
    if ([v9 length]
      && (uint64_t v10 = [v9 rangeOfString:@"." options:4], v10 != 0x7FFFFFFFFFFFFFFFLL))
    {
      if (v10 + 1 != [v9 length]
        || ([v9 substringToIndex:v10],
            unint64_t v11 = objc_claimAutoreleasedReturnValue(),
            v9,
            uint64_t v13 = [v11 rangeOfString:@"." options:4],
            v13 != 0x7FFFFFFFFFFFFFFFLL)
        && (id v9 = v11, v13 + 1 != [v11 length]))
      {
        uint64_t v14 = hasWellKnownButUnofficialTopLevelDomainSuffix(NSString *)::unofficialTopLevelDomainSuffixes;
        unint64_t v15 = objc_msgSend(v9, "substringFromIndex:");
        unint64_t v16 = [v15 lowercaseString];
        LOBYTE(v14) = [(id)v14 containsObject:v16];

        if (v14) {
          goto LABEL_6;
        }
LABEL_14:
        uint64_t v8 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = v9;
    }

    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_16:

  return v8;
}

void sub_1A6CD8740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t firstColonIndex(NSString *a1)
{
  id v1 = a1;
  if ([(NSString *)v1 length]) {
    uint64_t v2 = [(NSString *)v1 rangeOfString:@":"];
  }
  else {
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v2;
}

void sub_1A6CD8804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZL13looksLikeMathP8NSString_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  id v1 = [MEMORY[0x1E4F28B88] decimalDigitCharacterSet];
  [v0 formUnionWithCharacterSet:v1];

  uint64_t v2 = [MEMORY[0x1E4F28B88] punctuationCharacterSet];
  [v0 formUnionWithCharacterSet:v2];

  id v3 = [MEMORY[0x1E4F28B88] symbolCharacterSet];
  [v0 formUnionWithCharacterSet:v3];

  uint64_t v4 = [v0 invertedSet];

  return v4;
}

void sub_1A6CD88D8(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6CD896C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CD8D48(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);

  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v10);
  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va2, v11);

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendRange<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  uint64_t v4 = a2;
  uint64_t result = WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + a3 - a2);
  if (a3 != v4)
  {
    uint64_t v7 = *(void *)a1;
    unsigned int v8 = *(_DWORD *)(a1 + 12);
    do
    {
      id v9 = *v4;
      if (*v4) {
        ++*v9;
      }
      *(void *)(v7 + 8 * v8) = v9;
      ++v4;
      ++v8;
    }
    while (v4 != a3);
    *(_DWORD *)(a1 + 12) = v8;
  }
  return result;
}

uint64_t compareCompletionMatches(SafariShared::BookmarkAndHistoryCompletionMatch **a1, SafariShared::BookmarkAndHistoryCompletionMatch **a2)
{
  return SafariShared::BookmarkAndHistoryCompletionMatch::compare(*a1, *a2) >> 31;
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 12);
  if (v4 != a2)
  {
    uint64_t v5 = (uint64_t *)(*(void *)result + 8 * a2);
    uint64_t v6 = 8 * v4 - 8 * a2;
    do
    {
      uint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result) {
        uint64_t result = WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

void logMatches(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(SafariShared::BookmarkAndHistoryCompletionMatch **)(*(void *)a1 + 8 * v2);
      objc_msgSend(NSString, "stringWithFormat:", @"%4d:", v2);
      uint64_t v4 = (NSString *)objc_claimAutoreleasedReturnValue();
      logCompletionMatchToDebugChannel(v4, v3);

      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 12));
  }
}

void sub_1A6CD8F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CD903C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CD91EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  id v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1A6CD92BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CD94C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CD9558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CD9658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CD9F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  uint64_t v23 = *v21;
  uint64_t *v21 = 0;
  if (v23) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v23);
  }

  _Unwind_Resume(a1);
}

void logCompletionMatchToDebugChannel(NSString *a1, SafariShared::BookmarkAndHistoryCompletionMatch *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  if (a2)
  {
    uint64_t v4 = SafariShared::BookmarkAndHistoryCompletionMatch::data((id *)a2);
    int v5 = [v4 containsBookmark];

    if ([MEMORY[0x1E4F97EA0] isSearchEvaluationLoggingEnabled])
    {
      uint64_t v6 = (id)WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        if (v5) {
          uint64_t v7 = "bookmark";
        }
        else {
          uint64_t v7 = "history";
        }
        float v8 = *((float *)a2 + 12);
        id v9 = SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString(a2);
        uint64_t v10 = objc_msgSend(v9, "safari_urlHashesOfComponents");
        unint64_t v11 = SafariShared::BookmarkAndHistoryCompletionMatch::title(a2);
        uint64_t v12 = objc_msgSend(v11, "safari_md5Hash");
        SafariShared::BookmarkAndHistoryCompletionMatch::uuidString(a2);
        uint64_t v13 = (char *)(id)objc_claimAutoreleasedReturnValue();
        uint64_t matched = SafariShared::debugStringForMatchLocation(*((void *)a2 + 1));
        uint64_t v15 = SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate((id *)a2);
        int v28 = 138414082;
        int v29 = v3;
        __int16 v30 = 2082;
        uint64_t v31 = v7;
        __int16 v32 = 2048;
        double v33 = v8;
        __int16 v34 = 2114;
        id v35 = v10;
        __int16 v36 = 2114;
        id v37 = v12;
        __int16 v38 = 2114;
        unint64_t v39 = v13;
        __int16 v40 = 2082;
        unint64_t v41 = matched;
        __int16 v42 = 2112;
        unint64_t v43 = v15;
        _os_log_debug_impl(&dword_1A6B5F000, v6, OS_LOG_TYPE_DEBUG, "%@: (%{public}8s) %.6f <%{public}@> \"%{public}@\" [%{public}@] (%{public}s) %@", (uint8_t *)&v28, 0x52u);
      }
    }
    else if ([MEMORY[0x1E4F97EA0] isShowURLsInURLAutocompleteDebugChannelEnabled])
    {
      uint64_t v6 = (id)WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        if (v5) {
          unint64_t v16 = "bookmark";
        }
        else {
          unint64_t v16 = "history";
        }
        float v17 = *((float *)a2 + 12);
        SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString(a2);
        id v18 = (id)objc_claimAutoreleasedReturnValue();
        SafariShared::BookmarkAndHistoryCompletionMatch::title(a2);
        id v19 = (id)objc_claimAutoreleasedReturnValue();
        id v20 = SafariShared::debugStringForMatchLocation(*((void *)a2 + 1));
        SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate((id *)a2);
        id v21 = (char *)objc_claimAutoreleasedReturnValue();
        int v28 = 138413827;
        int v29 = v3;
        __int16 v30 = 2082;
        uint64_t v31 = v16;
        __int16 v32 = 2048;
        double v33 = v17;
        __int16 v34 = 2114;
        id v35 = v18;
        __int16 v36 = 2117;
        id v37 = v19;
        __int16 v38 = 2082;
        unint64_t v39 = v20;
        __int16 v40 = 2112;
        unint64_t v41 = v21;
        _os_log_debug_impl(&dword_1A6B5F000, v6, OS_LOG_TYPE_DEBUG, "%@: (%{public}8s) %.6f <%{public}@> \"%{sensitive}@\" (%{public}s) %@", (uint8_t *)&v28, 0x48u);
      }
    }
    else
    {
      uint64_t v6 = (id)WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        if (v5) {
          char v22 = "bookmark";
        }
        else {
          char v22 = "history";
        }
        float v23 = *((float *)a2 + 12);
        SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString(a2);
        id v24 = (id)objc_claimAutoreleasedReturnValue();
        SafariShared::BookmarkAndHistoryCompletionMatch::title(a2);
        id v25 = (id)objc_claimAutoreleasedReturnValue();
        unint64_t v26 = SafariShared::debugStringForMatchLocation(*((void *)a2 + 1));
        SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate((id *)a2);
        unint64_t v27 = (char *)objc_claimAutoreleasedReturnValue();
        int v28 = 138413827;
        int v29 = v3;
        __int16 v30 = 2082;
        uint64_t v31 = v22;
        __int16 v32 = 2048;
        double v33 = v23;
        __int16 v34 = 2117;
        id v35 = v24;
        __int16 v36 = 2117;
        id v37 = v25;
        __int16 v38 = 2082;
        unint64_t v39 = v26;
        __int16 v40 = 2112;
        unint64_t v41 = v27;
        _os_log_debug_impl(&dword_1A6B5F000, v6, OS_LOG_TYPE_DEBUG, "%@: (%{public}8s) %.6f <%{sensitive}@> \"%{sensitive}@\" (%{public}s) %@", (uint8_t *)&v28, 0x48u);
      }
    }
  }
}

void sub_1A6CDA580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDA6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDA800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDA9D4(_Unwind_Exception *a1)
{
  *int v5 = 0;
  if (v7) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v7);
  }

  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  uint64_t v14 = WTF::fastMalloc((WTF *)0x50);
  uint64_t result = SafariShared::BookmarkAndHistoryCompletionMatch::BookmarkAndHistoryCompletionMatch(v14, a1, a2, a3, a4, a5, a7);
  *a6 = v14;
  return result;
}

void sub_1A6CDAAB8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1A6CDAC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_1A6CDAD8C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A6CDB6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v12);
  WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v11);

  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v16);
  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v17);

  _Unwind_Resume(a1);
}

void sub_1A6CDBBFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 - 136, a2);

  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 - 120, v15);
  _Unwind_Resume(a1);
}

void *recordItemIfFullTextMatch(void *result, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  id v24 = result;
  if (result)
  {
    float v8 = result;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t result = (void *)SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation(result, a2, &v23, &v22);
    if (result)
    {
      uint64_t v9 = (uint64_t)result;
      uint64_t v10 = *(unsigned int *)(a4 + 12);
      if (v10 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<objc_object  {objcproto25WBSURLCompletionMatchData}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto25WBSURLCompletionMatchData}&>(a4, &v24);
        id v11 = v24;
      }
      else
      {
        uint64_t v12 = *(void *)a4;
        id v11 = v8;
        *(void *)(v12 + 8 * v10) = v11;
        ++*(_DWORD *)(a4 + 12);
      }
      SafariShared::BookmarkAndHistoryCompletionMatch::create((uint64_t)v11, *(unsigned int *)(a3 + 12), v9, v22, v23, (uint64_t *)&v21, a5);
      unint64_t v13 = *(unsigned int *)(a3 + 12);
      if (v13 == *(_DWORD *)(a3 + 8))
      {
        unint64_t v14 = v13 + (v13 >> 2);
        if (v14 >= 0x10) {
          unint64_t v15 = v14 + 1;
        }
        else {
          unint64_t v15 = 16;
        }
        if (v15 <= v13 + 1) {
          unint64_t v16 = v13 + 1;
        }
        else {
          unint64_t v16 = v15;
        }
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v16);
        unint64_t v13 = *(unsigned int *)(a3 + 12);
        uint64_t v17 = *(void *)a3;
        uint64_t v18 = (uint64_t)v21;
        id v21 = 0;
        *(void *)(v17 + 8 * v13) = v18;
      }
      else
      {
        uint64_t v19 = *(void *)a3;
        uint64_t v20 = (uint64_t)v21;
        id v21 = 0;
        *(void *)(v19 + 8 * v13) = v20;
      }
      *(_DWORD *)(a3 + 12) = v13 + 1;
      uint64_t result = v21;
      id v21 = 0;
      if (result) {
        return (void *)WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref((uint64_t)result);
      }
    }
  }
  return result;
}

void sub_1A6CDBDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a9);
  }
  _Unwind_Resume(exception_object);
}

void addMatchData(void *a1, void *a2)
{
  id v8 = a1;
  id v3 = a2;
  uint64_t v4 = [v3 originalURLString];
  if ([v4 length])
  {
    int v5 = [v8 objectForKeyedSubscript:v4];
    uint64_t v6 = v5;
    if (v5)
    {
      uint64_t v7 = [v5 matchDataByMergingWithMatchData:v3];
      [v8 setObject:v7 forKeyedSubscript:v4];
    }
    else
    {
      [v8 setObject:v3 forKeyedSubscript:v4];
    }
  }
}

void sub_1A6CDBEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A6CDBF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDC368(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 - 136, a2);

  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 - 120, v15);
  _Unwind_Resume(a1);
}

uint64_t recordItemIfPrefixMatch(uint64_t result, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  id v24 = (id)result;
  if (result)
  {
    id v8 = (void *)result;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t result = SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation((void *)result, a2, &v23, &v22);
    if (result >= 4)
    {
      uint64_t v9 = result;
      uint64_t v10 = *(unsigned int *)(a4 + 12);
      if (v10 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<objc_object  {objcproto25WBSURLCompletionMatchData}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto25WBSURLCompletionMatchData}&>(a4, &v24);
        id v11 = v24;
      }
      else
      {
        uint64_t v12 = *(void *)a4;
        id v11 = v8;
        *(void *)(v12 + 8 * v10) = v11;
        ++*(_DWORD *)(a4 + 12);
      }
      SafariShared::BookmarkAndHistoryCompletionMatch::create((uint64_t)v11, *(unsigned int *)(a3 + 12), v9, v22, v23, &v21, a5);
      unint64_t v13 = *(unsigned int *)(a3 + 12);
      if (v13 == *(_DWORD *)(a3 + 8))
      {
        unint64_t v14 = v13 + (v13 >> 2);
        if (v14 >= 0x10) {
          unint64_t v15 = v14 + 1;
        }
        else {
          unint64_t v15 = 16;
        }
        if (v15 <= v13 + 1) {
          unint64_t v16 = v13 + 1;
        }
        else {
          unint64_t v16 = v15;
        }
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v16);
        unint64_t v13 = *(unsigned int *)(a3 + 12);
        uint64_t v17 = *(void *)a3;
        uint64_t v18 = v21;
        uint64_t v21 = 0;
        *(void *)(v17 + 8 * v13) = v18;
      }
      else
      {
        uint64_t v19 = *(void *)a3;
        uint64_t v20 = v21;
        uint64_t v21 = 0;
        *(void *)(v19 + 8 * v13) = v20;
      }
      *(_DWORD *)(a3 + 12) = v13 + 1;
      uint64_t result = v21;
      uint64_t v21 = 0;
      if (result) {
        return WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
      }
    }
  }
  return result;
}

void sub_1A6CDC528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A6CDC5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  id v11 = a2 - 1;
  uint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(a2 - 1, v12);
          if (result)
          {
            uint64_t v23 = *v12;
            *uint64_t v12 = *v11;
            uint64_t *v11 = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v12, v12 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v12, a2, a2, (unsigned int (**)(uint64_t *, uint64_t *))a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v12, &v12[v16 >> 1], a2 - 1, a3);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v12 + 1, v18 - 1, a2 - 2, a3);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v12 + 2, &v12[v17 + 1], a2 - 3, a3);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v19 = *v12;
      *uint64_t v12 = *v18;
      uint64_t *v18 = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(&v12[v16 >> 1], v12, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(v12 - 1, v12) & 1) == 0)
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> *,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&)>(v12, a2, a3);
      uint64_t v12 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v20 = (uint64_t *)std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> *,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&)>(v12, a2, (uint64_t (**)(uint64_t, uint64_t *))a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v12, v20, a3);
    uint64_t v12 = v20 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v20 + 1, a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v22)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*,false>(v10, v20, a3, -v14, a5 & 1);
      uint64_t v12 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>((uint64_t)v12, a2, (uint64_t (**)(uint64_t *, uint64_t))a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>((uint64_t)v12, a2, (uint64_t (**)(uint64_t *, uint64_t))a3);
  }
}

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t result, void *a2, uint64_t (**a3)(uint64_t *, uint64_t))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (uint64_t *)result;
    char v5 = (void *)(result + 8);
    if ((void *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      id v8 = (void *)result;
      do
      {
        uint64_t v9 = v8;
        id v8 = v5;
        uint64_t result = (*a3)(v5, (uint64_t)v9);
        if (result)
        {
          uint64_t v10 = 0;
          uint64_t v11 = *v8;
          *id v8 = 0;
          uint64_t v17 = v11;
          for (uint64_t i = v7; ; i -= 8)
          {
            uint64_t v13 = (uint64_t *)((char *)v4 + i);
            uint64_t v14 = *(uint64_t *)((char *)v4 + i);
            *uint64_t v13 = 0;
            v13[1] = v14;
            if (v10) {
              WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v10);
            }
            if (!i)
            {
              uint64_t v15 = v4;
              goto LABEL_13;
            }
            if (((*a3)(&v17, (uint64_t)v4 + i - 8) & 1) == 0) {
              break;
            }
            uint64_t v10 = *v13;
          }
          uint64_t v15 = (uint64_t *)((char *)v4 + i);
LABEL_13:
          uint64_t v16 = v17;
          uint64_t v17 = 0;
          uint64_t result = *v15;
          uint64_t *v15 = v16;
          if (result)
          {
            WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
            uint64_t result = v17;
            uint64_t v17 = 0;
            if (result) {
              uint64_t result = WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
            }
          }
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

void sub_1A6CDCBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result - 8;
      uint64_t v9 = -1;
      uint64_t v10 = 1;
      do
      {
        uint64_t v11 = v4 + 8 * v7;
        uint64_t v7 = v10;
        uint64_t result = (*a3)(v5, v11);
        if (result)
        {
          uint64_t result = 0;
          uint64_t v12 = *v5;
          *char v5 = 0;
          uint64_t v17 = v12;
          uint64_t v13 = v8;
          for (uint64_t i = v9; ; ++i)
          {
            uint64_t v15 = *(void *)(v13 + 8);
            *(void *)(v13 + 8) = 0;
            *(void *)(v13 + 16) = v15;
            if (result) {
              uint64_t result = WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
            }
            if (!i)
            {
              __break(1u);
              return result;
            }
            if (((*a3)(&v17, v13) & 1) == 0) {
              break;
            }
            uint64_t result = *(void *)(v13 + 8);
            v13 -= 8;
          }
          uint64_t v16 = v17;
          uint64_t v17 = 0;
          uint64_t result = *(void *)(v13 + 8);
          *(void *)(v13 + 8) = v16;
          if (result)
          {
            WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
            uint64_t result = v17;
            uint64_t v17 = 0;
            if (result) {
              uint64_t result = WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
            }
          }
        }
        uint64_t v10 = v7 + 1;
        char v5 = (uint64_t *)(v4 + 8 * (v7 + 1));
        --v9;
        v8 += 8;
      }
      while (v5 != a2);
    }
  }
  return result;
}

void sub_1A6CDCCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> *,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = *a1;
  *a1 = 0;
  uint64_t v18 = v6;
  uint64_t result = (*a3)(&v18, a2 - 1);
  if (result)
  {
    char v8 = a1;
    while (1)
    {
      if (++v8 == a2) {
        goto LABEL_28;
      }
      uint64_t result = (*a3)(&v18, v8);
      if (result) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v9 = a1 + 1;
  do
  {
    char v8 = v9;
    if (v9 >= a2) {
      break;
    }
    uint64_t result = (*a3)(&v18, v9);
    uint64_t v9 = v8 + 1;
  }
  while (!result);
LABEL_9:
  uint64_t v10 = a2;
  if (v8 < a2)
  {
    uint64_t v10 = a2;
    while (v10 != a1)
    {
      uint64_t result = (*a3)(&v18, --v10);
      if ((result & 1) == 0) {
        goto LABEL_19;
      }
    }
    goto LABEL_28;
  }
LABEL_19:
  if (v8 < v10)
  {
    uint64_t v11 = *v8;
    *char v8 = *v10;
    uint64_t *v10 = v11;
    while (++v8 != a2)
    {
      uint64_t result = (*a3)(&v18, v8);
      if (result)
      {
        while (v10 != a1)
        {
          uint64_t result = (*a3)(&v18, --v10);
          if ((result & 1) == 0) {
            goto LABEL_19;
          }
        }
        break;
      }
    }
LABEL_28:
    __break(1u);
    return result;
  }
  uint64_t v12 = v8 - 1;
  if (v8 - 1 != a1)
  {
    uint64_t v13 = *v12;
    *uint64_t v12 = 0;
    uint64_t v14 = *a1;
    *a1 = v13;
    if (v14) {
      WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v14);
    }
  }
  uint64_t v15 = v18;
  uint64_t v18 = 0;
  uint64_t v16 = *v12;
  *uint64_t v12 = v15;
  if (v16) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v16);
  }
  uint64_t v17 = v18;
  uint64_t v18 = 0;
  if (v17) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v17);
  }
  return (uint64_t)v8;
}

void sub_1A6CDCF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> *,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t *))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  *a1 = 0;
  uint64_t v20 = v7;
  do
  {
    uint64_t result = (uint64_t)&a1[v6 + 1];
    if ((uint64_t *)result == a2) {
      goto LABEL_30;
    }
    uint64_t result = (*a3)(result, &v20);
    ++v6;
  }
  while ((result & 1) != 0);
  uint64_t v9 = &a1[v6];
  if (v6 != 1)
  {
    uint64_t v10 = a2;
    while (v10 != a1)
    {
      uint64_t result = (*a3)((uint64_t)--v10, &v20);
      if (result) {
        goto LABEL_12;
      }
    }
    goto LABEL_30;
  }
  uint64_t v10 = a2;
  do
  {
    if (v9 >= v10) {
      break;
    }
    uint64_t result = (*a3)((uint64_t)--v10, &v20);
  }
  while ((result & 1) == 0);
LABEL_12:
  if (v9 < v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
LABEL_14:
    uint64_t v13 = *v11;
    uint64_t *v11 = *v12;
    *uint64_t v12 = v13;
    while (++v11 != a2)
    {
      uint64_t result = (*a3)((uint64_t)v11, &v20);
      if ((result & 1) == 0)
      {
        while (v12 != a1)
        {
          uint64_t result = (*a3)((uint64_t)--v12, &v20);
          if (result)
          {
            if (v11 < v12) {
              goto LABEL_14;
            }
            uint64_t v14 = v11 - 1;
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_30:
    __break(1u);
    return result;
  }
  uint64_t v14 = v9 - 1;
LABEL_22:
  if (v14 != a1)
  {
    uint64_t v15 = *v14;
    uint64_t *v14 = 0;
    uint64_t v16 = *a1;
    *a1 = v15;
    if (v16) {
      WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v16);
    }
  }
  uint64_t v17 = v20;
  uint64_t v20 = 0;
  uint64_t v18 = *v14;
  uint64_t *v14 = v17;
  if (v18) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v18);
  }
  uint64_t v19 = v20;
  uint64_t v20 = 0;
  if (v19) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v19);
  }
  return (uint64_t)v14;
}

void sub_1A6CDD150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *char v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      uint64_t v14 = 0;
      uint64_t v15 = *v11;
      uint64_t *v11 = 0;
      uint64_t v23 = v15;
      for (uint64_t i = v12; ; i -= 8)
      {
        uint64_t v17 = (char *)a1 + i;
        uint64_t v18 = *(uint64_t *)((char *)a1 + i + 16);
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = v18;
        if (v14) {
          WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v14);
        }
        if (i == -16)
        {
          uint64_t v19 = a1;
          goto LABEL_15;
        }
        if (((*a3)(&v23, (uint64_t *)((char *)a1 + i + 8)) & 1) == 0) {
          break;
        }
        uint64_t v14 = *((void *)v17 + 2);
      }
      uint64_t v19 = (uint64_t *)((char *)a1 + i + 16);
LABEL_15:
      uint64_t v20 = v23;
      uint64_t v23 = 0;
      uint64_t v21 = *v19;
      uint64_t *v19 = v20;
      if (v21) {
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v21);
      }
      uint64_t v22 = v23;
      uint64_t v23 = 0;
      if (v22) {
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v22);
      }
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void sub_1A6CDD37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t *, uint64_t *))
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      uint64_t v14 = (uint64_t *)v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          uint64_t v15 = *v14;
          uint64_t *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 9)
    {
      unint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, v6, (unsigned int (**)(uint64_t *, uint64_t))a4, v16);
        v6 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t result, unsigned int (**a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, v12 + 1))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t *))*a2)(v12, v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        *char v5 = 0;
        uint64_t v21 = v14;
        do
        {
          uint64_t v15 = v12;
          uint64_t v16 = *v12;
          *uint64_t v12 = 0;
          uint64_t v17 = *v5;
          *char v5 = v16;
          if (v17) {
            WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v17);
          }
          if (v7 < v11) {
            break;
          }
          uint64_t v18 = (2 * v11) | 1;
          uint64_t v12 = (uint64_t *)(v6 + 8 * v18);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v18;
          }
          else if ((*a2)((uint64_t *)(v6 + 8 * v18), v12 + 1))
          {
            ++v12;
          }
          else
          {
            uint64_t v11 = v18;
          }
          char v5 = v15;
        }
        while (!(*a2)(v12, &v21));
        uint64_t v19 = v21;
        uint64_t v21 = 0;
        uint64_t v20 = *v15;
        uint64_t *v15 = v19;
        if (v20) {
          WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v20);
        }
        uint64_t result = v21;
        uint64_t v21 = 0;
        if (result) {
          return WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
        }
      }
    }
  }
  return result;
}

void sub_1A6CDD7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *result, uint64_t a2, unsigned int (**a3)(uint64_t *, uint64_t), uint64_t a4)
{
  if (a4 <= 0)
  {
    __break(1u);
  }
  else if (a4 != 1)
  {
    uint64_t v6 = (uint64_t)result;
    uint64_t v7 = *result;
    *uint64_t result = 0;
    uint64_t v8 = std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(result, a3, a4);
    uint64_t v9 = v8;
    uint64_t v10 = (uint64_t *)(a2 - 8);
    if (v8 == v10)
    {
      uint64_t result = (uint64_t *)*v8;
      *uint64_t v9 = v7;
      if (result)
      {
        return (uint64_t *)WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref((uint64_t)result);
      }
    }
    else
    {
      uint64_t v11 = *v10;
      uint64_t *v10 = 0;
      uint64_t v12 = *v8;
      *uint64_t v9 = v11;
      if (v12) {
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v12);
      }
      uint64_t v13 = *v10;
      uint64_t *v10 = v7;
      if (v13) {
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v13);
      }
      return (uint64_t *)std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v6, (uint64_t)(v9 + 1), (uint64_t (**)(uint64_t *, uint64_t))a3, ((uint64_t)v9 - v6 + 8) >> 3);
    }
  }
  return result;
}

void sub_1A6CDD8E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, unsigned int (**a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, (uint64_t)(v9 + 1)))
    {
      ++v9;
      uint64_t v6 = v11;
    }
    uint64_t v12 = *v9;
    *uint64_t v9 = 0;
    uint64_t v13 = *a1;
    *a1 = v12;
    if (v13) {
      WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v13);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t result = (*a3)(v8, a2 - 8);
    if (result)
    {
      uint64_t v10 = *v9;
      *uint64_t v9 = 0;
      uint64_t v15 = v10;
      do
      {
        uint64_t v11 = v8;
        uint64_t v12 = *v8;
        *uint64_t v8 = 0;
        uint64_t v13 = *v9;
        *uint64_t v9 = v12;
        if (v13) {
          WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v13);
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t v9 = v11;
      }
      while (((*a3)(v8, (uint64_t)&v15) & 1) != 0);
      uint64_t v14 = v15;
      uint64_t v15 = 0;
      uint64_t result = *v11;
      uint64_t *v11 = v14;
      if (result)
      {
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
        uint64_t result = v15;
        uint64_t v15 = 0;
        if (result) {
          return WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
        }
      }
    }
  }
  return result;
}

void sub_1A6CDDA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

void firstTopHitCandidate(uint64_t a1, void *a2, void *a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  char v5 = a2;
  id v6 = a3;
  uint64_t v77 = a1;
  uint64_t v78 = *(unsigned int *)(a1 + 12);
  id v73 = v6;
  float v74 = v5;
  unsigned int v72 = [v6 strengthenAutocompleteTriggerExtensionMatching];
  unint64_t v7 = [v5 normalizedString];
  uint64_t v8 = [v7 length];
  if (v8 >= [v73 characterThresholdForStartOfTitleWordMatchLongEnoughForTopHit])
  {
    uint64_t v10 = [v5 normalizedString];
    int v9 = !+[WBSURLCompletionDatabase doesStringLookLikeURLHost:v10];
  }
  else
  {
    LOBYTE(v9) = 0;
  }

  uint64_t v11 = [v5 stringWithoutWhitespace];
  uint64_t v70 = [v11 length];
  uint64_t v12 = [v5 normalizedString];
  uint64_t v69 = [v12 length];

  if (!v78)
  {
LABEL_73:

    return;
  }
  unint64_t v13 = 0;
  char v71 = v9 ^ 1;
  while (v13 < *(unsigned int *)(v77 + 12))
  {
    uint64_t v14 = *(void *)(*(void *)v77 + 8 * v13);
    uint64_t v15 = SafariShared::BookmarkAndHistoryCompletionMatch::data((id *)v14);
    float v16 = *(float *)(v14 + 64);
    uint64_t v17 = SafariShared::BookmarkAndHistoryCompletionMatch::data((id *)v14);
    int v18 = [v17 lastVisitWasFailure];
    int v19 = [v17 visitWasClientError] | v18;
    if (v19 != 1 || v16 < 5.0)
    {

      if (v19) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v21 = (void *)MEMORY[0x1E4F29088];
      uint64_t v22 = SafariShared::BookmarkAndHistoryCompletionMatch::originalURLString((id *)v14);
      uint64_t v23 = [v21 componentsWithString:v22];

      if (v23)
      {
        id v24 = [v23 host];
        BOOL v25 = +[WBSURLCompletionDatabase doesStringLookLikeURLHost:v24];

        if (!v25)
        {

LABEL_43:
          logCompletionMatchToDebugChannel(&cfstr_SkippedForErro.isa, (SafariShared::BookmarkAndHistoryCompletionMatch *)v14);
          goto LABEL_66;
        }
      }

      unint64_t v26 = SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate((id *)v14);
      [v26 timeIntervalSinceNow];
      if ((float)(10.0 - v16) <= 0.0) {
        float v28 = (float)((float)(10.0 - v16) / 5.0) * -21600.0;
      }
      else {
        float v28 = -0.0;
      }
      BOOL v29 = v27 >= v28;

      if (v29) {
        goto LABEL_43;
      }
    }
    unint64_t v30 = *(void *)(v14 + 8);
    if (v30 - 9 > 1)
    {
      if (v30 > 8 || ((1 << v30) & 0x1C8) == 0) {
        goto LABEL_65;
      }
      uint64_t v44 = SafariShared::BookmarkAndHistoryCompletionMatch::title((SafariShared::BookmarkAndHistoryCompletionMatch *)v14);
      BOOL v45 = WBSUnifiedFieldInputTypeForString(v44) == 1;

      if (v45) {
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v31 = (void *)v74[1];
      int v32 = [v73 isForVoiceSearch];
      id v76 = v31;
      BOOL v75 = SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString((SafariShared::BookmarkAndHistoryCompletionMatch *)v14);
      if ((v32 & 1) == 0 && [v75 rangeOfString:v76] != 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_70;
      }
      double v33 = [MEMORY[0x1E4F29088] componentsWithString:v75];
      __int16 v34 = v33;
      if (!v33) {
        goto LABEL_52;
      }
      if (!v32)
      {
        uint64_t v46 = [v33 rangeOfHost];
        NSUInteger v48 = v47;
        if (v47)
        {
          NSUInteger v49 = v46;
          NSUInteger v51 = [v75 rangeOfString:v76 options:1];
          if (v51 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v86.NSUInteger length = v50;
            v85.location = v49;
            v85.NSUInteger length = v48;
            v86.location = v51;
            NSRange v52 = NSIntersectionRange(v85, v86);
            if (v52.length)
            {
              NSUInteger v53 = v52.location - v51;
              NSUInteger v54 = [v76 length] - v53;
              NSUInteger length = v52.length;
              if (v52.length >= v54) {
                NSUInteger length = [v76 length] - v53;
              }
              float v56 = objc_msgSend(v76, "stringByReplacingCharactersInRange:withString:", v53, length, &stru_1EFBE3CF8);
              if (![v56 length])
              {

LABEL_70:
LABEL_71:

LABEL_72:
                goto LABEL_73;
              }
              float v57 = objc_msgSend(v75, "stringByReplacingCharactersInRange:withString:", v52.location, v52.length, &stru_1EFBE3CF8);
              BOOL v58 = [v57 rangeOfString:v56] == 0x7FFFFFFFFFFFFFFFLL;

              if (!v58) {
                goto LABEL_72;
              }
              goto LABEL_65;
            }
          }
        }
LABEL_52:

LABEL_64:
        goto LABEL_65;
      }
      id v35 = [v33 host];
      __int16 v36 = objc_msgSend(v35, "safari_hostComponentsEnumerator");

      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      id v37 = v36;
      uint64_t v38 = [v37 countByEnumeratingWithState:&v79 objects:v83 count:16];
      if (v38)
      {
        uint64_t v39 = *(void *)v80;
LABEL_27:
        uint64_t v40 = 0;
        while (1)
        {
          if (*(void *)v80 != v39) {
            objc_enumerationMutation(v37);
          }
          unint64_t v41 = *(void **)(*((void *)&v79 + 1) + 8 * v40);
          if ([v37 isSpeculative] & 1) != 0 || (objc_msgSend(v37, "containsEmptyComponents")) {
            break;
          }
          if ([v37 kind] != 3)
          {
            if ([v37 kind] == 4) {
              unint64_t v59 = v41;
            }
            else {
              unint64_t v59 = 0;
            }
            id v42 = v59;
            goto LABEL_58;
          }
          if (v38 == ++v40)
          {
            uint64_t v38 = [v37 countByEnumeratingWithState:&v79 objects:v83 count:16];
            id v42 = 0;
            if (v38) {
              goto LABEL_27;
            }
            goto LABEL_58;
          }
        }
      }
      id v42 = 0;
LABEL_58:

      long long v60 = [v76 stringByReplacingOccurrencesOfString:@" " withString:&stru_1EFBE3CF8];
      char v61 = objc_msgSend(v42, "safari_isCaseInsensitiveEqualToString:", v60);

      if (v61) {
        goto LABEL_72;
      }
    }
    char v62 = v71;
    if (v30 - 6 > 2) {
      char v62 = 1;
    }
    if ((v62 & 1) == 0)
    {
      float v63 = (void *)MEMORY[0x1E4F1CB10];
      float v64 = SafariShared::BookmarkAndHistoryCompletionMatch::originalURLString((id *)v14);
      id v76 = [v63 URLWithString:v64];

      if (v70 != v69)
      {
        uint64_t v65 = [v76 host];
        unint64_t v66 = [v74 stringWithoutWhitespace];
        float v67 = [v66 lowercaseString];
        char v68 = [v65 containsString:v67];

        if (v68) {
          goto LABEL_71;
        }
      }
      goto LABEL_64;
    }
LABEL_65:
    if ([v15 matchesAutocompleteTrigger:v74[1] isStrengthened:v72])
    {
      logCompletionMatchToDebugChannel(&cfstr_Tophitfrommatc.isa, (SafariShared::BookmarkAndHistoryCompletionMatch *)v14);
      goto LABEL_72;
    }
LABEL_66:

    if (++v13 == v78) {
      goto LABEL_73;
    }
  }
  __break(0xC471u);
}

void sub_1A6CDE194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<objc_object  {objcproto25WBSURLCompletionMatchData}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto25WBSURLCompletionMatchData}&>(uint64_t a1, id *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v9 = *(void *)a1;
  *(void *)(v9 + 8 * v8) = *a2;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      uint64_t *v4 = 0;
      if (v6) {
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v3 = result;
    if (result[3] > a2) {
      uint64_t result = (unsigned int *)WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, a2);
    }
    uint64_t v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        if (!(a2 >> 61))
        {
          void v3[2] = a2;
          uint64_t result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
          *(void *)uint64_t v3 = result;
          return result;
        }
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x1A6CDE4FCLL);
      }
      if (a2 >> 29) {
        goto LABEL_18;
      }
      uint64_t v5 = v3[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      void v3[2] = a2;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v4) {
        uint64_t result = (unsigned int *)memcpy(result, v4, 8 * v5);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        void v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

void WTF::Vector<objc_object  {objcproto25WBSURLCompletionMatchData}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      uint64_t v5 = (void **)(*(void *)a1 + 8 * a2);
      uint64_t v6 = 8 * v4 - 8 * a2;
      do
      {
        unint64_t v7 = *v5++;

        v6 -= 8;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v8 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v9 = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(void *)a1 = v9;
      if ((WTF *)v9 != v8 && v4)
      {
        uint64_t v10 = (void *)v9;
        uint64_t v11 = 8 * v4;
        uint64_t v12 = (void **)v8;
        do
        {
          unint64_t v13 = *v12;
          *uint64_t v12 = 0;
          *v10++ = v13;
          uint64_t v14 = *v12++;

          v11 -= 8;
        }
        while (v11);
      }
    }
    if (v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)a2);
    }
  }
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (_DWORD **)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *v3;
  if (*v3) {
    ++*v6;
  }
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,SafariShared::BookmarkAndHistoryCompletionMatch*&>(uint64_t a1, _DWORD **a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *a2;
  if (*a2) {
    ++*v10;
  }
  *(void *)(v9 + 8 * v8) = v10;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

void OUTLINED_FUNCTION_2_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1A6CDE7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDE9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDEC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDED80(_Unwind_Exception *exception_object)
{
  if (v1) {
    WTF::ThreadSafeRefCounted<SafariShared::HistoryURLCompletionItem,(WTF::DestructionThread)0>::deref(v1);
  }
  _Unwind_Resume(exception_object);
}

void SafariShared::HistoryURLCompletionItem::create(SafariShared::HistoryURLCompletionItem *this@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, SafariShared::HistoryURLCompletionItem **a4@<X8>)
{
  char v4 = (char)a3;
  uint64_t v9 = this;
  unint64_t v7 = a2;
  uint64_t v8 = (SafariShared::HistoryURLCompletionItem *)WTF::fastMalloc((WTF *)0xA8);
  SafariShared::HistoryURLCompletionItem::HistoryURLCompletionItem(v8, (NSString *)v9, v7, v4);
  *a4 = v8;
}

void sub_1A6CDEE18(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  WTF::fastFree(v11, a2);

  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>>::reset[abi:sn180100](void ***result, void **a2)
{
  unint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>::__destroy_vector::operator()[abi:sn180100](&v3);
    return (void ***)MEMORY[0x1AD0C4750](v2, 0x20C40960023A9);
  }
  return result;
}

SafariShared::HistoryURLCompletionItem *SafariShared::HistoryURLCompletionItem::HistoryURLCompletionItem(SafariShared::HistoryURLCompletionItem *this, NSString *a2, NSString *a3, char a4)
{
  unint64_t v7 = a2;
  uint64_t v8 = a3;
  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = [(NSString *)v7 copy];
  *((void *)this + 9) = [(NSString *)v8 copy];
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  *((void *)this + 10) = v9;
  *((_DWORD *)this + 22) = 1;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 100;
  *((_WORD *)this + 80) = 0;
  *((unsigned char *)this + 162) = a4;
  *((unsigned char *)this + 163) = 0;

  return this;
}

void sub_1A6CDEFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = v11 + 4;
  std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>::__destroy_vector::operator()[abi:sn180100](&a10);

  _Unwind_Resume(a1);
}

void sub_1A6CDF0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDF18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDF284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDF3D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDF624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDF884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CDFB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t typedStringMatchesTitleOrURLWithAutocompleteTrigger(NSString *a1, NSString *a2, NSString *a3, NSString *a4, const __CFCharacterSet *a5)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  theJSValueRef String = a1;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v46 = a4;
  uint64_t v8 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
  uint64_t v9 = [(__CFString *)v46 componentsSeparatedByCharactersInSet:v8];
  uint64_t v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SELF != ''"];
  uint64_t v11 = [v9 filteredArrayUsingPredicate:v10];

  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  v51[0] = v39;
  v51[1] = v40;
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v51 count:2];
  unint64_t v13 = v46;
  uint64_t v14 = [v12 countByEnumeratingWithState:&v47 objects:v52 count:16];
  if (!v14)
  {
    uint64_t v37 = 0;
    goto LABEL_25;
  }
  id obj = v12;
  uint64_t v42 = *(void *)v48;
  while (2)
  {
    uint64_t v43 = v14;
    for (uint64_t i = 0; i != v43; ++i)
    {
      if (*(void *)v48 != v42) {
        objc_enumerationMutation(obj);
      }
      float v16 = (__CFString *)*(id *)(*((void *)&v47 + 1) + 8 * i);
      int v17 = [(__CFString *)v13 length];
      uint64_t v18 = v17;
      UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v17);
      if (CFCharacterSetIsCharacterMember(a5, CharacterAtIndex)
        || (UniChar v20 = CFStringGetCharacterAtIndex(v46, [(__CFString *)v46 length] - 1),
            CFCharacterSetIsCharacterMember(a5, v20)))
      {
        CFIndex Length = CFStringGetLength(v16);
        objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 1);
        uint64_t v22 = (NSString *)objc_claimAutoreleasedReturnValue();
        LOBYTE(Length) = isPrefixOrFullWordMatchInHaystack(v16, (const __CFString *)Length, v22, 1);

        if ((Length & 1) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v23 = objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 1);
        int v24 = [v23 length];

        uint64_t v18 = v17 - v24;
      }
      BOOL v25 = -[__CFString substringFromIndex:](theString, "substringFromIndex:", v18, v39);
      unint64_t v26 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
      double v27 = [v25 componentsSeparatedByCharactersInSet:v26];
      float v28 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SELF != ''"];
      BOOL v29 = [v27 filteredArrayUsingPredicate:v28];

      CFStringRef v30 = (const __CFString *)CFStringGetLength(v16);
      id v31 = v29;
      if (![v31 count])
      {

LABEL_22:
        uint64_t v37 = 1;
        goto LABEL_23;
      }
      unsigned int v32 = 0;
      while ([v31 count] - 1 > (unint64_t)v32)
      {
        double v33 = [v31 objectAtIndexedSubscript:v32];
        char v34 = isPrefixOrFullWordMatchInHaystack(v16, v30, v33, 1);

        ++v32;
        if ((v34 & 1) == 0)
        {

          goto LABEL_17;
        }
      }
      objc_msgSend(v31, "objectAtIndexedSubscript:", objc_msgSend(v31, "count") - 1);
      id v35 = (NSString *)objc_claimAutoreleasedReturnValue();
      char v36 = isPrefixOrFullWordMatchInHaystack(v16, v30, v35, 0);

      if (v36) {
        goto LABEL_22;
      }
LABEL_17:

LABEL_18:
      unint64_t v13 = v46;
    }
    uint64_t v14 = [obj countByEnumeratingWithState:&v47 objects:v52 count:16];
    if (v14) {
      continue;
    }
    break;
  }
  uint64_t v37 = 0;
LABEL_23:
  uint64_t v12 = obj;
LABEL_25:

  return v37;
}

void sub_1A6CDFFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t isPrefixOrFullWordMatchInHaystack(const __CFString *a1, const __CFString *a2, NSString *a3, int a4)
{
  unint64_t v7 = a3;
  LODWORD(v8) = 0;
  int v9 = 0;
  while (1)
  {
    uint64_t v10 = [[WBSURLCompletionUserTypedString alloc] initWithString:v7];
    uint64_t v8 = (SafariShared *)SafariShared::caseInsensitiveFindInUserTypedString(a1, a2, (uint64_t)v10, (WBSURLCompletionUserTypedString *)(v9 + (int)v8));

    if (v8 != -1
      && SafariShared::offsetAppearsToBeAtStartOrEndOfWord(v8, a1, 0)
      && (!a4
       || SafariShared::offsetAppearsToBeAtStartOrEndOfWord((SafariShared *)(v8 + [(NSString *)v7 length]), a1, (const __CFString *)1)))
    {
      break;
    }
    int v9 = [(NSString *)v7 length];
    if (v8 == -1 || (int)v8 > (int)a2 - v9)
    {
      uint64_t v12 = 0;
      goto LABEL_12;
    }
  }
  uint64_t v12 = 1;
LABEL_12:

  return v12;
}

void sub_1A6CE01A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE0A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6CE0C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _SSURLCompletionMatchLocationForWBSURLCompletionMatchLocation(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9) {
    return 0;
  }
  else {
    return qword_1A6D6EFD0[a1 - 1];
  }
}

void sub_1A6CE1160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE11EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE1368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE1408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE14C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE15EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE1FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A6CE360C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE36C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE3A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE3D2C(_Unwind_Exception *exception_object)
{
}

void sub_1A6CE3DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE3ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE4088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE42B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE44A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<int,NSString * {__strong}&>(void *a1, void *a2, unsigned int *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  int v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,int,NSString * {__strong}&>(v9, a3, a4);
  uint64_t v10 = [v9 fetch];

  return v10;
}

void sub_1A6CE45A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE4620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE4718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE4900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  int v9 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v7 query:v8];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&>(v9, a3, a4);
  uint64_t v10 = [v9 fetch];

  return v10;
}

void sub_1A6CE4A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE4B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE4E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * {__strong},NSString * {__strong},int,int const&,NSData * {__strong}>(void *a1, void *a2, void *a3, void *a4, unsigned int *a5, unsigned int *a6, void *a7)
{
  id v13 = a1;
  id v14 = a2;
  uint64_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v13 query:v14];
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong},int,int const&,NSData * {__strong}>(v15, a3, a4, a5, a6, a7);
  uint64_t v16 = [v15 fetch];

  return v16;
}

void sub_1A6CE4F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE511C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE5304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE54B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE55A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE5644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,int,NSString * {__strong}&>(void *a1, unsigned int *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt:*a2 atParameterIndex:1];
  [v5 bindString:*a3 atParameterIndex:2];
}

void sub_1A6CE5710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong},int,int const&,NSData * {__strong}>(void *a1, void *a2, void *a3, unsigned int *a4, unsigned int *a5, void *a6)
{
  id v11 = a1;
  [v11 bindString:*a2 atParameterIndex:1];
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong},int,int const&,NSData * {__strong}>(v11, a3, a4, a5, a6);
}

void sub_1A6CE57AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong},int,int const&,NSData * {__strong}>(void *a1, void *a2, unsigned int *a3, unsigned int *a4, void *a5)
{
  id v9 = a1;
  [v9 bindString:*a2 atParameterIndex:2];
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,int,int const&,NSData * {__strong}>(v9, a3, a4, a5);
}

void sub_1A6CE5838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,int,int const&,NSData * {__strong}>(void *a1, unsigned int *a2, unsigned int *a3, void *a4)
{
  id v7 = a1;
  [v7 bindInt:*a2 atParameterIndex:3];
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,int const&,NSData * {__strong}>(v7, a3, a4);
}

void sub_1A6CE58BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,int const&,NSData * {__strong}>(void *a1, unsigned int *a2, void *a3)
{
  id v5 = a1;
  [v5 bindInt:*a2 atParameterIndex:4];
  [v5 bindData:*a3 atParameterIndex:5];
}

void sub_1A6CE5934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSData * {__strong}&,int>(void *a1, void *a2, void *a3, void *a4, unsigned int *a5)
{
  id v9 = a1;
  id v10 = a3;
  id v17 = 0;
  id v11 = (void *)[objc_alloc(MEMORY[0x1E4F97FA0]) initWithDatabase:v9 query:v10 error:&v17];
  id v12 = v17;
  id v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,int>(v11, a4, a5);
    uint64_t v14 = [v11 execute];
    [v11 invalidate];
    if ((v14 - 100) >= 2 && v14 != 0) {
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v12;
    }
    uint64_t v14 = [v13 code];
  }

  return v14;
}

void sub_1A6CE5A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,int>(void *a1, void *a2, unsigned int *a3)
{
  id v5 = a1;
  [v5 bindData:*a2 atParameterIndex:1];
  [v5 bindInt:*a3 atParameterIndex:2];
}

void sub_1A6CE5AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE5BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE5DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE5F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE64C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE6598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE6870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE691C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE6A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A6CE6BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A6CE6D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE6E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE6F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id originHash(NSString *a1, NSString *a2)
{
  uint64_t v3 = a2;
  char v4 = [(NSString *)a1 dataUsingEncoding:4];
  id v5 = objc_msgSend(v4, "safari_SHA1Hash");

  unint64_t v6 = [(NSString *)v3 dataUsingEncoding:4];
  id v7 = objc_msgSend(v5, "safari_dataByAppendingData:", v6);
  id v8 = objc_msgSend(v7, "safari_SHA1Hash");

  id v9 = objc_msgSend(NSString, "safari_stringByBase64EncodingData:", v8);

  return v9;
}

void sub_1A6CE7030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE70D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE71E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE74F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1A6CE76F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE790C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE7A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE7BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE7CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE7D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE7E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE7F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE800C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE8218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1A6CE8364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE8474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE8530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE872C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v16 - 72));

  _Unwind_Resume(a1);
}

void sub_1A6CE87F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE8918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE8A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE8C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE8D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE8FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE9104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE92C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE9374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1A6CE96BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE9740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE979C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE9870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE9960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE9BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CE9D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1A6CEA0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A6CEA244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CEA2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A6CEA3A0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A6CEA588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A6CEA878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A6CEA964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void SafariShared::computeURLMatchLocation(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1A6B5F000, log, OS_LOG_TYPE_ERROR, "Nil urlString passed to computeURLMatchLocation()", v1, 2u);
}

void SafariShared::computeURLMatchLocation(uint64_t a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v2 = 141558275;
  uint64_t v3 = 1752392040;
  __int16 v4 = 2117;
  uint64_t v5 = a1;
  _os_log_error_impl(&dword_1A6B5F000, a2, OS_LOG_TYPE_ERROR, "Encountered a malformed URL without a valid scheme: %{sensitive, mask.hash}@. How did that get in here?", (uint8_t *)&v2, 0x16u);
}

void WBSReportAutoplaySignalIfNecessary_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_1A6B5F000, a2, OS_LOG_TYPE_DEBUG, "Discarding auto-play signal for quick navigation on domain: %{private}@", (uint8_t *)&v2, 0xCu);
}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1_1(&dword_1A6B5F000, v0, v1, "Recording auto-play signal: %lu for domain: %{private}@", v2);
}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1_1(&dword_1A6B5F000, v0, (uint64_t)v0, "Discarding auto-play signal %lu from %{private}@ after checking feedback allowlist", v1);
}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 48);
  int v4 = 138478083;
  uint64_t v5 = a1;
  __int16 v6 = 2048;
  uint64_t v7 = v3;
  OUTLINED_FUNCTION_1_1(&dword_1A6B5F000, a3, (uint64_t)a3, "Checking if the high-level domain '%{private}@' is on the feedback allowlist before recording auto-play signal %lu", (uint8_t *)&v4);
}

void ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1_1(&dword_1A6B5F000, v0, v1, "Recording auto-play signal: %{public}@ for high-level domain: %{private}@", v2);
}

void ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1_1(&dword_1A6B5F000, v0, v1, "Discarding auto-play signal %{public}@ from %{private}@ after checking feedback allowlist", v2);
}

void __getSADeviceInfoClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *SearchAssetsLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WBSBiomeDonationManager.m", 52, @"%s", *a1);

  __break(1u);
}

void __getSADeviceInfoClass_block_invoke_cold_2()
{
  id v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSADeviceInfoClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"WBSBiomeDonationManager.m", 53, @"Unable to find class %s", "SADeviceInfo");

  __break(1u);
}

void __getSAAssetManagerFactoryClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *SearchAssetsLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WBSBrowsingAssistantContentProvider.m", 32, @"%s", *a1);

  __break(1u);
}

void __getSAAssetManagerFactoryClass_block_invoke_cold_2()
{
  id v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSAAssetManagerFactoryClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"WBSBrowsingAssistantContentProvider.m", 33, @"Unable to find class %s", "SAAssetManagerFactory");

  __break(1u);
}

void ___ZL29allProfileDatabaseIdentifiersv_block_invoke_cold_1(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138543362;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl(&dword_1A6B5F000, log, OS_LOG_TYPE_ERROR, "Failed to look up existing profile content blocker stores: %{public}@", buf, 0xCu);
}

void __getOSLogStoreClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *OSLogLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WBSCyclerService.m", 25, @"%s", *a1);

  __break(1u);
}

void __getOSLogStoreClass_block_invoke_cold_2()
{
  id v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getOSLogStoreClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"WBSCyclerService.m", 26, @"Unable to find class %s", "OSLogStore");

  __break(1u);
}

void __WBSSystemSymbolNameForCurrentDevice_block_invoke_cold_1(uint64_t a1, void *a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  __int16 v6 = objc_msgSend(a3, "safari_privacyPreservingDescription");
  int v7 = 138543618;
  uint64_t v8 = a1;
  __int16 v9 = 2114;
  id v10 = v6;
  _os_log_error_impl(&dword_1A6B5F000, v5, OS_LOG_TYPE_ERROR, "Failed to determine device symbol for %{public}@: %{public}@", (uint8_t *)&v7, 0x16u);
}

void fillDateUsingClassification(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_1A6B5F000, log, OS_LOG_TYPE_ERROR, "Control has mutliple parts, but no formatting. Skipping.", buf, 2u);
}

void SafariShared::ReadStreamedObjects(int *a1, uint8_t *buf, os_log_t log)
{
  int v3 = *a1;
  *(_DWORD *)buf = 67109120;
  *((_DWORD *)buf + 1) = v3;
  _os_log_error_impl(&dword_1A6B5F000, log, OS_LOG_TYPE_ERROR, "Failed to allocate buffer: %{errno}i", buf, 8u);
}

void SafariShared::URLCompletionEntryBuilder::validateVisitedCountsIfNeeded(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1A6B5F000, log, OS_LOG_TYPE_ERROR, "Found data corruption in weekly visit counts", v1, 2u);
}

{
  uint8_t v1[16];

  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1A6B5F000, log, OS_LOG_TYPE_ERROR, "Found data corruption in daily visit counts", v1, 2u);
}

void byteArrayToInteger(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t SafariShared::ReaderAvailabilityController::~ReaderAvailabilityController(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100]((uint64_t)a1, v3);
  }

  uint64_t result = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata()
{
  OUTLINED_FUNCTION_1_0();
  _os_log_error_impl(&dword_1A6B5F000, v0, OS_LOG_TYPE_ERROR, "Error: could not initialize m_originalArticleFinderJSController", v1, 2u);
}

void SafariShared::ReaderAvailabilityController::checkTextSampleAvailabilityIfNeeded()
{
  OUTLINED_FUNCTION_1_0();
  _os_log_debug_impl(&dword_1A6B5F000, v0, OS_LOG_TYPE_DEBUG, "Translation could not find any text samples. Retrying", v1, 2u);
}

{
  os_log_t v0;
  uint8_t v1[16];

  OUTLINED_FUNCTION_1_0();
  _os_log_debug_impl(&dword_1A6B5F000, v0, OS_LOG_TYPE_DEBUG, "Could not inject article finder on page", v1, 2u);
}

void SafariShared::ReaderAvailabilityController::checkAvailabilityIfNeeded(uint8_t *buf, uint64_t a2, os_log_t log)
{
  *(_DWORD *)buf = 134217984;
  *(void *)(buf + 4) = a2;
  _os_log_debug_impl(&dword_1A6B5F000, log, OS_LOG_TYPE_DEBUG, "Reader found %lu text samples for translation", buf, 0xCu);
}

void SafariShared::ReaderJSController::evaluateLocalizedStringsScript(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138543362;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl(&dword_1A6B5F000, log, OS_LOG_TYPE_ERROR, "Cannot read WBSLocalizedStrings.js with error: %{public}@", buf, 0xCu);
}

void SafariShared::jsLog(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl(&dword_1A6B5F000, log, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
}

void WBSReloadReadingListWidget_cold_1(void *a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = objc_msgSend(a2, "safari_privacyPreservingDescription");
  int v5 = 138543362;
  __int16 v6 = v4;
  _os_log_error_impl(&dword_1A6B5F000, v3, OS_LOG_TYPE_ERROR, "Failed to reload Reading List widget: %{public}@", (uint8_t *)&v5, 0xCu);
}

void __getCHSTimelineControllerClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *ChronoServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WBSReadingListWidgetUtilities.m", 14, @"%s", *a1);

  __break(1u);
}

void __getCHSTimelineControllerClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getCHSTimelineControllerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"WBSReadingListWidgetUtilities.m", 15, @"Unable to find class %s", "CHSTimelineController");

  __break(1u);
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1F410C8D0]();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C94A8](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, dataIn, dataInLength);
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9710](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1F40C97B8](md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1F40C97C0](c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C97C8](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7450](bundle);
}

CFArrayRef CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType)
{
  return (CFArrayRef)MEMORY[0x1F40D7530](allocator, directoryURL, bundleType);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7718](alloc);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1F40D7770](theSet, theChar);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78B0](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1F40D78E0](allocator, formatter, date);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1F40D8180](allocator, flags, order, callout, context, fireDate, interval);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x1F40D83A8](*(void *)&encoding);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.NSUInteger length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale)
{
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString)
{
  return MEMORY[0x1F40D8550](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

CFStringRef CFStringTokenizerCopyBestStringLanguage(CFStringRef string, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D8688](string, range.location, range.length);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8790](anURL);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D8888](allocator, URLBytes, length, *(void *)&encoding, baseURL);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1F40DAA98](image);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CFTypeRef CTFontDescriptorCopyLocalizedAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute, CFStringRef *language)
{
  return (CFTypeRef)MEMORY[0x1F40DF3B8](descriptor, attribute, language);
}

CTFontDescriptorRef CTFontDescriptorCreateMatchingFontDescriptor(CTFontDescriptorRef descriptor, CFSetRef mandatoryAttributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF3F0](descriptor, mandatoryAttributes);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF408](attributes);
}

BOOL CTFontDescriptorMatchFontDescriptorsWithProgressHandler(CFArrayRef descriptors, CFSetRef mandatoryAttributes, CTFontDescriptorProgressHandler progressBlock)
{
  return MEMORY[0x1F40DF468](descriptors, mandatoryAttributes, progressBlock);
}

uint64_t CTLineCreateWithString()
{
  return MEMORY[0x1F40DF7A0]();
}

uint64_t CTLineIsRightToLeft()
{
  return MEMORY[0x1F40DF838]();
}

JSClassRef JSClassCreate(const JSClassDefinition *definition)
{
  return (JSClassRef)MEMORY[0x1F40E9BD0](definition);
}

JSGlobalContextRef JSContextGetGlobalContext(JSContextRef ctx)
{
  return (JSGlobalContextRef)MEMORY[0x1F40E9BD8](ctx);
}

JSObjectRef JSContextGetGlobalObject(JSContextRef ctx)
{
  return (JSObjectRef)MEMORY[0x1F40E9BE0](ctx);
}

JSContextGroupRef JSContextGetGroup(JSContextRef ctx)
{
  return (JSContextGroupRef)MEMORY[0x1F40E9BE8](ctx);
}

JSValueRef JSEvaluateScript(JSContextRef ctx, JSStringRef script, JSObjectRef thisObject, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9BF8](ctx, script, thisObject, sourceURL, *(void *)&startingLineNumber, exception);
}

JSGlobalContextRef JSGlobalContextCreateInGroup(JSContextGroupRef group, JSClassRef globalObjectClass)
{
  return (JSGlobalContextRef)MEMORY[0x1F40E9C10](group, globalObjectClass);
}

void JSGlobalContextRelease(JSGlobalContextRef ctx)
{
}

JSGlobalContextRef JSGlobalContextRetain(JSGlobalContextRef ctx)
{
  return (JSGlobalContextRef)MEMORY[0x1F40E9C20](ctx);
}

JSValueRef JSObjectCallAsFunction(JSContextRef ctx, JSObjectRef object, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9C30](ctx, object, thisObject, argumentCount, arguments, exception);
}

JSPropertyNameArrayRef JSObjectCopyPropertyNames(JSContextRef ctx, JSObjectRef object)
{
  return (JSPropertyNameArrayRef)MEMORY[0x1F40E9C38](ctx, object);
}

BOOL JSObjectDeleteProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef *exception)
{
  return MEMORY[0x1F40E9C40](ctx, object, propertyName, exception);
}

void *__cdecl JSObjectGetPrivate(JSObjectRef object)
{
  return (void *)MEMORY[0x1F40E9C58](object);
}

JSValueRef JSObjectGetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9C60](ctx, object, propertyName, exception);
}

JSValueRef JSObjectGetPropertyAtIndex(JSContextRef ctx, JSObjectRef object, unsigned int propertyIndex, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9C68](ctx, object, *(void *)&propertyIndex, exception);
}

BOOL JSObjectHasProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName)
{
  return MEMORY[0x1F40E9CA0](ctx, object, propertyName);
}

BOOL JSObjectIsFunction(JSContextRef ctx, JSObjectRef object)
{
  return MEMORY[0x1F40E9CB0](ctx, object);
}

JSObjectRef JSObjectMake(JSContextRef ctx, JSClassRef jsClass, void *data)
{
  return (JSObjectRef)MEMORY[0x1F40E9CB8](ctx, jsClass, data);
}

JSObjectRef JSObjectMakeArray(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1F40E9CC0](ctx, argumentCount, arguments, exception);
}

JSObjectRef JSObjectMakeError(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1F40E9CD8](ctx, argumentCount, arguments, exception);
}

JSObjectRef JSObjectMakeFunctionWithCallback(JSContextRef ctx, JSStringRef name, JSObjectCallAsFunctionCallback callAsFunction)
{
  return (JSObjectRef)MEMORY[0x1F40E9CE0](ctx, name, callAsFunction);
}

BOOL JSObjectSetPrivate(JSObjectRef object, void *data)
{
  return MEMORY[0x1F40E9D10](object, data);
}

void JSObjectSetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef value, JSPropertyAttributes attributes, JSValueRef *exception)
{
}

size_t JSPropertyNameArrayGetCount(JSPropertyNameArrayRef array)
{
  return MEMORY[0x1F40E9D30](array);
}

JSStringRef JSPropertyNameArrayGetNameAtIndex(JSPropertyNameArrayRef array, size_t index)
{
  return (JSStringRef)MEMORY[0x1F40E9D38](array, index);
}

void JSPropertyNameArrayRelease(JSPropertyNameArrayRef array)
{
}

uint64_t JSRemoteInspectorGetInspectionEnabledByDefault()
{
  return MEMORY[0x1F40E9D48]();
}

uint64_t JSRemoteInspectorGetInspectionFollowsInternalPolicies()
{
  return MEMORY[0x1F40E9D50]();
}

uint64_t JSRemoteInspectorSetInspectionEnabledByDefault()
{
  return MEMORY[0x1F40E9D58]();
}

uint64_t JSRemoteInspectorSetInspectionFollowsInternalPolicies()
{
  return MEMORY[0x1F40E9D60]();
}

uint64_t JSScriptCreateReferencingImmortalASCIIText()
{
  return MEMORY[0x1F40E9D78]();
}

uint64_t JSScriptEvaluate()
{
  return MEMORY[0x1F40E9D80]();
}

CFStringRef JSStringCopyCFString(CFAllocatorRef alloc, JSStringRef string)
{
  return (CFStringRef)MEMORY[0x1F40E9D88](alloc, string);
}

JSStringRef JSStringCreateWithCFString(CFStringRef string)
{
  return (JSStringRef)MEMORY[0x1F40E9D90](string);
}

JSStringRef JSStringCreateWithCharacters(const JSChar *chars, size_t numChars)
{
  return (JSStringRef)MEMORY[0x1F40E9D98](chars, numChars);
}

JSStringRef JSStringCreateWithUTF8CString(const char *string)
{
  return (JSStringRef)MEMORY[0x1F40E9DA0](string);
}

const JSChar *__cdecl JSStringGetCharactersPtr(JSStringRef string)
{
  return (const JSChar *)MEMORY[0x1F40E9DA8](string);
}

size_t JSStringGetLength(JSStringRef string)
{
  return MEMORY[0x1F40E9DB0](string);
}

void JSStringRelease(JSStringRef string)
{
}

JSStringRef JSStringRetain(JSStringRef string)
{
  return (JSStringRef)MEMORY[0x1F40E9DD8](string);
}

JSStringRef JSValueCreateJSONString(JSContextRef ctx, JSValueRef value, unsigned int indent, JSValueRef *exception)
{
  return (JSStringRef)MEMORY[0x1F40E9DE0](ctx, value, *(void *)&indent, exception);
}

BOOL JSValueIsArray(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9DF8](ctx, value);
}

BOOL JSValueIsBoolean(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E00](ctx, value);
}

BOOL JSValueIsDate(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E08](ctx, value);
}

BOOL JSValueIsNull(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E10](ctx, value);
}

BOOL JSValueIsObject(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E20](ctx, value);
}

BOOL JSValueIsString(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E30](ctx, value);
}

BOOL JSValueIsUndefined(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E38](ctx, value);
}

JSValueRef JSValueMakeBoolean(JSContextRef ctx, BOOL BOOLean)
{
  return (JSValueRef)MEMORY[0x1F40E9E40](ctx, BOOLean);
}

JSValueRef JSValueMakeFromJSONString(JSContextRef ctx, JSStringRef string)
{
  return (JSValueRef)MEMORY[0x1F40E9E48](ctx, string);
}

JSValueRef JSValueMakeNull(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1F40E9E50](ctx);
}

JSValueRef JSValueMakeNumber(JSContextRef ctx, double number)
{
  return (JSValueRef)MEMORY[0x1F40E9E58](ctx, number);
}

JSValueRef JSValueMakeString(JSContextRef ctx, JSStringRef string)
{
  return (JSValueRef)MEMORY[0x1F40E9E60](ctx, string);
}

JSValueRef JSValueMakeUndefined(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1F40E9E68](ctx);
}

void JSValueProtect(JSContextRef ctx, JSValueRef value)
{
}

BOOL JSValueToBoolean(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E78](ctx, value);
}

double JSValueToNumber(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  MEMORY[0x1F40E9E80](ctx, value, exception);
  return result;
}

JSObjectRef JSValueToObject(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1F40E9E88](ctx, value, exception);
}

JSStringRef JSValueToStringCopy(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return (JSStringRef)MEMORY[0x1F40E9E90](ctx, value, exception);
}

void JSValueUnprotect(JSContextRef ctx, JSValueRef value)
{
}

uint64_t JSWeakObjectMapCreate()
{
  return MEMORY[0x1F40E9EB0]();
}

uint64_t JSWeakObjectMapGet()
{
  return MEMORY[0x1F40E9EB8]();
}

uint64_t JSWeakObjectMapRemove()
{
  return MEMORY[0x1F40E9EC0]();
}

uint64_t JSWeakObjectMapSet()
{
  return MEMORY[0x1F40E9EC8]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1F417CE38]();
}

id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone)
{
  return (id)MEMORY[0x1F40E6FF0](aClass, extraBytes, zone);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.NSUInteger length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

uint64_t PNCreateFormattedStringWithCountry()
{
  return MEMORY[0x1F4114250]();
}

uint64_t SecCertificateIsValid()
{
  return MEMORY[0x1F40F6BC8]();
}

uint64_t SecCertificateNotValidAfter()
{
  return MEMORY[0x1F40F6BD0]();
}

uint64_t SecCertificateNotValidBefore()
{
  return MEMORY[0x1F40F6BD8]();
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x1F40F6DB8](identityRef, certificateRef);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1F40F6DE8](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1F40F6E20](query, attributesToUpdate);
}

SecPolicyRef SecPolicyCreateSSL(Boolean server, CFStringRef hostname)
{
  return (SecPolicyRef)MEMORY[0x1F40F7088](server, hostname);
}

CFArrayRef SecTrustCopyCertificateChain(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1F40F7190](trust);
}

CFDataRef SecTrustCopyExceptions(SecTrustRef trust)
{
  return (CFDataRef)MEMORY[0x1F40F71A0](trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1F40F71E0](certificates, policies, trust);
}

OSStatus SecTrustGetTrustResult(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x1F40F7230](trust, result);
}

BOOL SecTrustSetExceptions(SecTrustRef trust, CFDataRef exceptions)
{
  return MEMORY[0x1F40F7270](trust, exceptions);
}

uint64_t WBSAllowedCreditCardNumberSeparatorCharacters()
{
  return MEMORY[0x1F414A140]();
}

uint64_t WBSAuditTokenHasEntitlement()
{
  return MEMORY[0x1F414A148]();
}

uint64_t WBSCreditCardCardholderFieldLabels()
{
  return MEMORY[0x1F414A150]();
}

uint64_t WBSCreditCardCompositeExpirationDateFieldLabels()
{
  return MEMORY[0x1F414A158]();
}

uint64_t WBSCreditCardNumberFieldLabels()
{
  return MEMORY[0x1F414A160]();
}

uint64_t WBSCreditCardSecurityCodeFieldLabels()
{
  return MEMORY[0x1F414A168]();
}

uint64_t WBSCreditCardTypeFieldLabels()
{
  return MEMORY[0x1F414A170]();
}

uint64_t WBSCreditCardTypeFromNumber()
{
  return MEMORY[0x1F414A178]();
}

uint64_t WBSCreditCardTypeFromNumberAllowingPartialMatch()
{
  return MEMORY[0x1F414A180]();
}

uint64_t WBSCreditCardTypeLocalizedName()
{
  return MEMORY[0x1F414A188]();
}

uint64_t WBSCreditCardTypeLocalizedNameForGeneratingCardNames()
{
  return MEMORY[0x1F414A190]();
}

uint64_t WBSCreditCardTypeSynonyms()
{
  return MEMORY[0x1F414A198]();
}

uint64_t WBSDispatchGroupNotifyWithTimeout()
{
  return MEMORY[0x1F414A1A0]();
}

uint64_t WBSExpirationDateWithDayMonthYear()
{
  return MEMORY[0x1F414A1A8]();
}

uint64_t WBSGetKeychainData()
{
  return MEMORY[0x1F414A1B0]();
}

uint64_t WBSIsEqual()
{
  return MEMORY[0x1F414A1B8]();
}

uint64_t WBSKeychainItemExists()
{
  return MEMORY[0x1F414A1C0]();
}

uint64_t WBSLocaleForCreditCardExpirationDate()
{
  return MEMORY[0x1F414A1C8]();
}

uint64_t WBSNonCreditCardCardNumberFieldLabels()
{
  return MEMORY[0x1F414A1E0]();
}

uint64_t WBSNormalizedCreditCardNumber()
{
  return MEMORY[0x1F414A1E8]();
}

uint64_t WBSPerformBlockOnMainRunLoopWithCommonModes()
{
  return MEMORY[0x1F414A1F0]();
}

uint64_t WBSReadExactAmountOfBytesFromFileDescriptor()
{
  return MEMORY[0x1F414A1F8]();
}

uint64_t WBSReadExactAmountOfBytesFromFileDescriptorAsNSData()
{
  return MEMORY[0x1F414A200]();
}

uint64_t WBSRemoveKeychainPasswordIfExists()
{
  return MEMORY[0x1F414A208]();
}

uint64_t WBSRunLoopRunUntilTerminationSignal()
{
  return MEMORY[0x1F414A210]();
}

uint64_t WBSSetKeychainData()
{
  return MEMORY[0x1F414A218]();
}

uint64_t WBSSetKeychainPassword()
{
  return MEMORY[0x1F414A220]();
}

uint64_t WBSSetSignalHandler()
{
  return MEMORY[0x1F414A228]();
}

uint64_t WBSStatusCodeGroupFromStatusCode()
{
  return MEMORY[0x1F414A238]();
}

uint64_t WBSWriteExactAmountOfBytesToFileDescriptor()
{
  return MEMORY[0x1F414A248]();
}

uint64_t WTFLogAlways()
{
  return MEMORY[0x1F40E9EE8]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFNetworkSetOverrideSystemProxySettings()
{
  return MEMORY[0x1F40D5720]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t _WBSLocalizedString()
{
  return MEMORY[0x1F414A250]();
}

uint64_t _WBSRunOnceImpl()
{
  return MEMORY[0x1F414A260]();
}

uint64_t SafariShared::SuddenTerminationDisabler::enableSuddenTermination(SafariShared::SuddenTerminationDisabler *this)
{
  return MEMORY[0x1F414A268](this);
}

uint64_t SafariShared::SuddenTerminationDisabler::SuddenTerminationDisabler(SafariShared::SuddenTerminationDisabler *this, NSString *a2)
{
  return MEMORY[0x1F414A270](this, a2);
}

uint64_t WTF::fastMalloc(WTF *this)
{
  return MEMORY[0x1F40EADC0](this);
}

uint64_t WTF::URLWithData(WTF *this, NSData *a2, NSURL *a3)
{
  return MEMORY[0x1F40EAF40](this, a2, a3);
}

uint64_t WTF::fastRealloc(WTF *this, void *a2)
{
  return MEMORY[0x1F40EAF50](this, a2);
}

uint64_t WTF::decodeHostName(WTF *this, NSString *a2)
{
  return MEMORY[0x1F40EB368](this, a2);
}

uint64_t WTF::originalURLData(WTF *this, NSURL *a2)
{
  return MEMORY[0x1F40EB3F8](this, a2);
}

uint64_t WTF::fastZeroedMalloc(WTF *this)
{
  return MEMORY[0x1F40EB420](this);
}

uint64_t WTF::isUserVisibleURL(WTF *this, NSString *a2)
{
  return MEMORY[0x1F40EB428](this, a2);
}

uint64_t WTF::userVisibleString(WTF *this, NSURL *a2)
{
  return MEMORY[0x1F40EB4D8](this, a2);
}

uint64_t WTF::initializeMainThread(WTF *this)
{
  return MEMORY[0x1F40EB600](this);
}

uint64_t WTF::URLWithUserTypedString(WTF *this, NSString *a2, NSURL *a3)
{
  return MEMORY[0x1F40EB6A8](this, a2, a3);
}

uint64_t WTF::fastFree(WTF *this, void *a2)
{
  return MEMORY[0x1F40EBCA8](this, a2);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E8C8]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE90](retstr, __val);
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

void _os_activity_initiate(void *dso, const char *description, os_activity_flag_t flags, os_block_t activity_block)
{
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1F40CA578](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1F4181538](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1F4181540](cls, name);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1F4181578](cls, name, imp, types);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

uint64_t ct_green_tea_logger_create_static()
{
  return MEMORY[0x1F417A380]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

intptr_t dispatch_block_testcancel(dispatch_block_t block)
{
  return MEMORY[0x1F40CB9F0](block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CB9F8](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

dispatch_qos_class_t dispatch_queue_get_qos_class(dispatch_queue_t queue, int *relative_priority_ptr)
{
  return MEMORY[0x1F40CBBE0](queue, relative_priority_ptr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA0](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

double drand48(void)
{
  MEMORY[0x1F40CBDE8]();
  return result;
}

void exit(int a1)
{
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int flock(int a1, int a2)
{
  return MEMORY[0x1F40CC160](*(void *)&a1, *(void *)&a2);
}

void free(void *a1)
{
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x1F417A398]();
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

uint64_t lrand48(void)
{
  return MEMORY[0x1F40CC8D0]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1F4181618](m);
}

int mkfifo(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDE8](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

void *__cdecl object_getIndexedIvars(id a1)
{
  return (void *)MEMORY[0x1F4181A68](a1);
}

void object_setIvar(id obj, Ivar ivar, id value)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int pipe(int a1[2])
{
  return MEMORY[0x1F40CD760](a1);
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

uint64_t random(void)
{
  return MEMORY[0x1F40CDC18]();
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1F40CDDF8]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1F40CDE00]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1F40CDE50]();
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return MEMORY[0x1F40CDF60](__name, __value, *(void *)&__overwrite);
}

void *__cdecl sqlite3_aggregate_context(sqlite3_context *a1, int nBytes)
{
  return (void *)MEMORY[0x1F4181F60](a1, *(void *)&nBytes);
}

int sqlite3_bind_blob64(sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F98](a1, *(void *)&a2, a3, a4, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x1F4182120](db, zFunctionName, *(void *)&nArg, *(void *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
}

void sqlite3_result_error_nomem(sqlite3_context *a1)
{
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
}

void sqlite3_result_null(sqlite3_context *a1)
{
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1F4182408](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1F4182410](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1F4182418](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  MEMORY[0x1F4182428](a1);
  return result;
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1F4182440](a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x1F4182448](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1F4182458](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1F4182468](a1);
}

void srand48(uint64_t a1)
{
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

float tanhf(float a1)
{
  MEMORY[0x1F40CE438](a1);
  return result;
}

UChar32 u_foldCase(UChar32 c, uint32_t options)
{
  return MEMORY[0x1F417F730](*(void *)&c, *(void *)&options);
}

int32_t u_memcasecmp(const UChar *s1, const UChar *s2, int32_t length, uint32_t options)
{
  return MEMORY[0x1F417F800](s1, s2, *(void *)&length, *(void *)&options);
}

int32_t u_strToLower(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F848](dest, *(void *)&destCapacity, src, *(void *)&srcLength, locale, pErrorCode);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1F40CE9D0](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE9E8](activity);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_transaction_begin(void)
{
}

void xpc_transaction_end(void)
{
}